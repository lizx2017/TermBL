issueID:ARIES-1
type:Task
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableIdRefMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/IdRefRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableServiceReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/BundleDelegatingClassLoader.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/AbstractRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanPropertyImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanProperty.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/CollectionRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/IdRefMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableServiceMetadata.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Activator.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistry.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceListener.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmUtils.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ServiceMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanArgument.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Foo.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/HeaderParser.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/BlueprintConstants.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableRegistrationListener.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/DependencyGraph.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Recipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableValueMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MapMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ExtendedBlueprintContainer.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableCollectionMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ValueMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ServiceProcessor.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceListenerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceMetadataImpl.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmProperties.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/Processor.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ArrayRecipe.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ManagedObject.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MapEntryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceListMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ComponentMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/NamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/CircularDependencyException.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ManagedObjectManager.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/RefRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ExecutionContext.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/InterfaceA.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanArgumentImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceListMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/RegistrationListenerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/BeanProcessor.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedBeanMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/PropsMetadataImpl.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DateTypeConverter.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ParserContext.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableMapEntry.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceListener.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ParserContextImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceListMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceMetadata.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Bar.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/BindingListener.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/SatisfiableRecipe.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/FooRegistrationListener.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/CollectionMetadataImpl.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/MapRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/RefMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableComponentMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutablePropsMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedServiceReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/JavaUtils.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableMapMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ValueRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentNameAlreadyInUseException.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/CurrencyTypeConverter.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistryProcessor.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MetadataUtil.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/PassThroughRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableRefMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/GenericType.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/DynamicCollection.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ServiceReferenceMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/PassThroughMetadataImpl.java
texts:Rename package to org.apache.aries.blueprint.*

issueID:ARIES-10
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/JavaUtils.java
texts:EventAdmin events not always including the bundle and extenderBundle version properties.
Section 121.12.3 defines the properties that MUST be set on all blueprint events published to the EventAdmin service. For the BUNDLE_VERSION properties and EXTENDER_BUNDLE_VERSION properties, these properties are not set if the bundles do not include a version headers. Since these properties are specified as mandatory, these properties should be getting set to Version.emptyVersion rather than left as null.
issueID:ARIES-100
type:Improvement
changed files:samples/blueprint/idverifier/idverifier-api/src/main/java/org/apache/aries/samples/blueprint/idverifier/api/CreditRecordOperation.java
samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/SimpleVerifierRegistrationListener.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecordOperationImpl.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/PersonCreditRecords.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecordStore.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/VerifierServiceReferenceListener.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditQueryRegistrationListener.java
samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/ComplexVerifierRegistrationListener.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/RandomIDChoice.java
samples/blueprint/idverifier/idverifier-api/src/main/java/org/apache/aries/samples/blueprint/idverifier/api/PersonIDVerifier.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecord.java
samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/PersonIDVerifierComplexImpl.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/PersonBankBean.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/IDVerifierClientActivator.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecordFactory.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/BankInfo.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/IDConverter.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/PersonalInfo.java
samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/PersonIDVerifierSimpleImpl.java
texts:Another blueprint sample to contribute
These days I am testing blueprint MBean, and generated a complex blueprint sample. With this sample, user can learn how to define nesting components with blueprint XML.
To run this sample, besides OSGi framework, these bundles are required:
CoreOptions.mavenBundle().groupId("org.apache.felix").artifactId("org.apache.felix.configadmin").versionAsInProject(),
CoreOptions.mavenBundle().groupId("org.apache.felix").artifactId("org.apache.felix.eventadmin").versionAsInProject(),
CoreOptions.mavenBundle().groupId("org.ops4j.pax.logging").artifactId("pax-logging-api").versionAsInProject(),
CoreOptions.mavenBundle().groupId("org.ops4j.pax.logging").artifactId("pax-logging-service").versionAsInProject(),
CoreOptions.mavenBundle().groupId("org.apache.aries.blueprint").artifactId("org.apache.aries.blueprint").versionAsInProject(),
CoreOptions.mavenBundle().groupId("org.apache.aries").artifactId("org.apache.aries.util"),
CoreOptions.mavenBundle().groupId("org.apache.aries.jmx").artifactId("aries-jmx-blueprint").versionAsInProject(),
issueID:ARIES-1000
type:Dependency upgrade
changed files:
texts:Upgrade to Apache POM 12

issueID:ARIES-1001
type:Bug
changed files:
texts:Rat profile doesn't build
If you run a build on Aries with the RAT profile (-Prat), you will have a certain number of issues.
I fixed all issues, extended the rat plugin configuration, and updated the aries parent version to use in the different modules.
issueID:ARIES-1002
type:Bug
changed files:
texts:Missing export-service directive for PlatformTransactionManager
Aries transaction manager has an optional import for the spring-tx bundles and when it finds them it will export the it's service with the Spring PlatformTransactionManager interface as well. When it does this however it doesn't have a Manifest entry for "export-service org.springframework.transaction.PlatformTransactionManager". This causes problem in applications that use the export-service directive to lookup valid deployments (i.e. Fuse Fabric).
issueID:ARIES-1004
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:When the framework is being shut down, blueprint bundles are not shut down orderly
The reason is that the extender can be at a lower start level and is shut down after other blueprint bundles. The extender needs to intercept the STOPPING event for the system bundle and stop all bundles in the correct order.
issueID:ARIES-1005
type:Bug
changed files:
texts:BundleHookBundleTracker throws Exception when close()-method is called twice
  public void close() {
      sr.unregister();
      tracked.close();
      tracked = null;
  }
Supsequent calls cause sr.unregister to throw an IllegalStateException.
Since today, there is a piece of code introduced by ARIES-1004 that does actually do that (http://mail-archives.apache.org/mod_mbox/aries-commits/201301.mbox/%3C20130118083142.DA5852388900%40eris.apache.org%3E)
issueID:ARIES-1006
type:Bug
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ApplicationResourceImpl.java
jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/EJBServiceFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ManagedObjectManager.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
util/src/main/java/org/apache/aries/util/internal/R43Worker.java
texts:Compilation error with JDK7
When I try to compile Aries with JDK 7, I have:
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile (default-compile) on project org.apache.aries.testsupport.unit: Compilation failure: Compilation failure:
[ERROR] could not parse error message: warning: [options] bootstrap class path not set in conjunction with -source 1.5
[ERROR] /home/jbonofre/workspace/aries/testsupport/testsupport-unit/src/main/java/org/apache/aries/mocks/BundleMock.java:187: warning: [deprecation] toURL() in File has been deprecated
[ERROR] this(name,properties,location.toURL().toExternalForm());
[ERROR] ^
[ERROR]
[ERROR] /home/jbonofre/workspace/aries/testsupport/testsupport-unit/src/main/java/org/apache/aries/mocks/BundleMock.java:[239,17] [deprecation] toURL() in File has been deprecated
[ERROR]
[ERROR] /home/jbonofre/workspace/aries/testsupport/testsupport-unit/src/main/java/org/apache/aries/mocks/BundleMock.java:[263,60] [deprecation] toURL() in File has been deprecated
[ERROR]
[ERROR] /home/jbonofre/workspace/aries/testsupport/testsupport-unit/src/main/java/org/apache/aries/mocks/BundleMock.java:[328,65] [deprecation] toURL() in File has been deprecated
[ERROR]
It's due to some parent POM definition which force JDK5 support (target and source).
I don't think that the JDK5 support is still required. I gonna prepare a couple of patches about that.
issueID:ARIES-1007
type:Bug
changed files:
texts:Missing Export-Package for 'org.osgi.service.repository' in subsystem-bundle
It is present in subsystem-api module, but is missing in subsystem-bundle (that aggregates both subsystem-api and subsystem-core)
issueID:ARIES-101
type:New Feature
changed files:
texts:Create basic build structure for the Aries JPA component
Create the basic structure for the JPA component in Aries
issueID:ARIES-1010
type:Improvement
changed files:
texts:BlueprintContainer - reload() - no way to know when the reload is fully done
If you have a blueprint application deploy in felix / karaf. Then you can restart the bundle from karaf shell using
osgi:restart 123
Where 123 is the bundle id. This works fine, as it does a fully restart.
If you want to be notified about the starting|stopping in your blueprint application, you can use the org.osgi.framework.ServiceListener and listen for changes, and wait for the BlueprintContainer itself to be created/unregistered. For example we use this in Camel to know when we can start Camel after all the osgi blueprint has been fully started:
We have an init method in a POJO that we ensure blueprint invokes. This allows us to register our service listener.
    public void init() throws Exception {
        LOG.trace("init {}", this);
        // add service listener so we can be notified when blueprint container is done
        // and we would be ready to start CamelContext
        bundleContext.addServiceListener(this);
    }
Where we listen for the blueprint container to be created, and invoke the maybeStart method which will start Camel.
    @Override
    public void serviceChanged(ServiceEvent event) {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Service {} changed to {}", event, event.getType());
        }

        // look for blueprint container to be registered, and then we can start the CamelContext
        if (event.getType() == ServiceEvent.REGISTERED && event.getServiceReference().isAssignableTo(bundleContext.getBundle(),
                "org.osgi.service.blueprint.container.BlueprintContainer")) {
            try {
                maybeStart();
            } catch (Exception e) {
                LOG.error("Error occurred during starting Camel: " + this + " due " + e.getMessage(), e);
            }
        }
    }
However if you use the API on ExtendedBlueprintContainer, which is the reload() method then it does not work the same as the reload command above.
The issue is in particular that we do not get any service listener callbacks. So we cannot know when the blueprint container has been fully restarted.
On the ExtendedBlueprintContainer there is no API either to get the state, eg a getState method. If we had that we could potentially "work around" this by having to wait for the state to be changed to CREATED.
I am not sure if a reload should trigger the BlueprintContainer service to be unregistered/registered again. Which will fix this for all people. As then a reload works just as stop|start a bundle.
An alternative is that we get some API in blueprint so we can know when the reload is done. And it would also be nice to have the getState method on the ExtendedBlueprintContainer.
issueID:ARIES-1011
type:Bug
changed files:
texts:Blueprint Core bundle raises an exception during stop
At Karaf shutdown, when stopping the Aries Blueprint Core bundle, an IllegalStateException is raised:
ERROR: Bundle org.apache.aries.blueprint.core [7] Error stopping bundle. (java.lang.IllegalStateException: Service already unregistered.)
java.lang.IllegalStateException: Service already unregistered.
at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:123)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker.close(BundleHookBundleTracker.java:88)
at org.apache.aries.util.tracker.RecursiveBundleTracker.close(RecursiveBundleTracker.java:106)
at org.apache.aries.blueprint.container.BlueprintExtender.stop(BlueprintExtender.java:160)
at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2361)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1214)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
at java.lang.Thread.run(Thread.java:662)
ERROR: Bundle org.apache.aries.blueprint.core [7] Error stopping mvn:org.apache.aries.blueprint/org.apache.aries.blueprint.core/1.1.0 (org.osgi.framework.BundleException: Activator stop error in bundle org.apache.aries.blueprint.core [7].)
java.lang.IllegalStateException: Service already unregistered.
at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:123)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker.close(BundleHookBundleTracker.java:88)
at org.apache.aries.util.tracker.RecursiveBundleTracker.close(RecursiveBundleTracker.java:106)
at org.apache.aries.blueprint.container.BlueprintExtender.stop(BlueprintExtender.java:160)
at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2361)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1214)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
at java.lang.Thread.run(Thread.java:662)
issueID:ARIES-1012
type:Bug
changed files:
texts:Properly isolate the subsystems core bundle.
The subsystems core bundle should be properly isolated so that internal packages are not exposed. Currently, the uber bundle provides the intended isolation, but the core bundle was left open due to dependencies in the itests. The core bundle's manifest will be updated to hide internal packages and a fragment bundle will be used to continue to satisfy the itest dependencies.
issueID:ARIES-1013
type:Bug
changed files:
texts:Aries JMX Core should extend its OSGi framework version range
In order to work with "all" OSGi frameworks, Aries JMX bundle should extend its org.osgi.framework package version range (to something like [1.6,2)):
Bundle org.apache.aries.jmx.core [65] Error starting mvn:org.apache.aries.jmx/org.apache.aries.jmx.core/1.1.0 (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.aries.jmx.core [65]: Unable to resolve 65.0: missing requirement [65.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.7.0)(!(version>=2.0.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.aries.jmx.core [65]: Unable to resolve 65.0: missing requirement [65.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.7.0)(!(version>=2.0.0)))
at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3826)
at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
at java.lang.Thread.run(Thread.java:662)
laERROR: Bundle org.apache.aries.jmx.core [65] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.aries.jmx.core [65]: Unable to resolve 65.0: missing requirement [65.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.7.0)(!(version>=2.0.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.aries.jmx.core [65]: Unable to resolve 65.0: missing requirement [65.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.7.0)(!(version>=2.0.0)))
at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3826)
at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1388)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:301)
at java.lang.Thread.run(Thread.java:662)
issueID:ARIES-1014
type:Bug
changed files:
texts:inconsistencies in org.apache.aries.proxy versions
I grabbed the trunk from https://github.com/apache/aries.git and started following the instructions in "Build at the command line then import into Eclipse if you need Eclipse." on http://aries.apache.org/development/buildingaries.html. When running 'mvn clean install' in the root of the project, the following occurs:
[ERROR] Failed to execute goal on project org.apache.aries.subsystem.itests: Could not resolve dependencies for project org.apache.aries.subsystem:org.apache.aries.subsystem.itests:jar:1.0.0-SNAPSHOT: Failure to find org.apache.aries.proxy:org.apache.aries.proxy:jar:1.0.1-SNAPSHOT
Other rrtifacts, including subsystem.itests, refer to org.apache.aries.proxy:jar:1.0.1-SNAPSHOT.
Installing /proxy generated 1.0.0, 1.0.1, and 1.0.2-SNAPSHOT in my local repo
Do dependencies on proxy need to be updated for version 1.0.2-SNAPSHOT? I'm guessing 1.0.1-SNAPSHOT was recently removed from Nexus...
issueID:ARIES-1016
type:Bug
changed files:
texts:Deadlock potential in ApplicationContextManagerImpl
The fixes delivered to the Blueprint container delivered under Aries-962 have exposed some potential deadlocks in the isolated application runtime. This JIRA covers the first; some over-wide synchronized methods in ApplicationContextManagerImpl.
issueID:ARIES-1017
type:Bug
changed files:
texts:Properly isolate the subsystem-obr bundle.
The generated export package header is currently:
Export-Package: org.apache.aries.subsystem.obr.internal;uses:="org.osg
i.resource,org.apache.felix.bundlerepository,org.osgi.util.tracker,or
g.osgi.service.repository,org.osgi.framework,org.slf4j"
There should be no exported packages.
issueID:ARIES-1018
type:Bug
changed files:
texts:JPA container throws Exception when stopped without a JPA-Provider present
To reproduce unpack the latest karaf-snapshot and install the JPA-feature:
feature:install jpa
and install a bundle containing a persistence-unit.
stop the JPA Container bundle.
This happens since aries-util was upgraded to 1.1.0. The issue did not occur with util-1.0.0.
I investigated a bit and found the problem:
In util-1.1.0 the BundleHookBundleTracker was changed to untrack all bundles when it's closed. In util-1.0 closing did essentially nothing but setting a closed-flag.
So when using JPA Container with util-1.1.0 the persistence-units are destroyed without ever being created.
This also happens when having a JPA Provider (like OpenJPA) installed, but when it's stopped before the the JPA-Container Bundle is stopped (the usual case).
issueID:ARIES-1019
type:Bug
changed files:
texts:JPA weaving hook must be called before proxy weaving hook.
Caused by: <openjpa-2.2.2-SNAPSHOT-r422266:1446295 nonfatal general error> org.apache.openjpa.util.GeneralException: An error occurred while enhancing itemjpa.ItemJPA. Exception message: java.lang.ClassNotFoundException: org.apache.aries.proxy.weaving.WovenProxy
at org.apache.openjpa.enhance.PCEnhancer.run(PCEnhancer.java:578)
at org.apache.openjpa.enhance.PCClassFileTransformer.transform0(PCClassFileTransformer.java:153)
at org.apache.openjpa.enhance.PCClassFileTransformer.transform(PCClassFileTransformer.java:126)
at org.apache.openjpa.persistence.PersistenceProviderImpl$ClassTransformerImpl.transform(PersistenceProviderImpl.java:290)
at org.apache.aries.jpa.container.weaving.impl.WrappingTransformer.transform(WrappingTransformer.java:80)
at org.apache.aries.jpa.container.weaving.impl.JPAWeavingHook.weave(JPAWeavingHook.java:71)
... 48 more
Caused by: java.lang.IllegalArgumentException: java.lang.ClassNotFoundException: org.apache.aries.proxy.weaving.WovenProxy
at serp.util.Strings.toClass(Strings.java:164)
at serp.util.Strings.toClass(Strings.java:108)
at serp.bytecode.BCClass.getDeclaredInterfaceTypes(BCClass.java:740)
at org.apache.openjpa.enhance.PCEnhancer.run(PCEnhancer.java:537)
... 53 more
This issue occurs when the Apache Aries Proxy weaving hook gets called before the Apache Aries JPA weaving hook. Proxy weaves the class with the WovenProxy interface and adds the necessary dynamic package imports. JPA then gets called and uses PCEnhancer which, in turn, calls BCClass.getDeclaredInterfaceTypes, which ultimately calls Class.forName using the woven interface's name. The class loader is from the bundle whose class is being woven. Per the OSGi spec, dynamic imports do not take effect until after the entire weaving process is complete. Consequently, the bundle's class loader does not yet have visibility to the class.
One solution would be to ensure that the jpa weaving hook is always called before the proxy weaving hook using the service ranking property.
issueID:ARIES-102
type:Improvement
changed files:samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
texts:Ad a 'back to home' link to teh blog sample

issueID:ARIES-1020
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Blueprint disable service too soon at shutdown
The enhancement, preemtive shutdown, from last blueprint release introduce this regression, and the configuration to disable this enhancement does not work either.
Please see https://issues.apache.org/jira/browse/KARAF-2189 for detail
according to karaf, it is using blueprint-core 1.1.0, but there is no entry for htis at Arier JIRA site
issueID:ARIES-1021
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionUpdater.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
texts:Implementation of AriesSubsystem.addRequirements must not assume the region only has edges to the parent subsystem's region.
The addRequirements method on the AriesSubsystem interface allows clients to add additional requirements (i.e. those beyond what was in the deployment manifest) to a subsystem. Effectively, this means any capability matching a specified requirement will be allowed into the subsystem's region from the parent region.
However, the implementation assumes that all edges of the current region point to the parent, which is not the case. For example, currently there is always at least one edge that does not fit that pattern, namely the edge that allows subsystem services to be seen from the root region. Other edges might also exist if region digraph was manipulated outside of the subsystems API.
issueID:ARIES-1022
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
texts:Support for mandatory directive for osgi.wiring.[package | bundle | host] namespaces
When finding capabilities from the Repositories implemented by the Subsystems Implementation (Local Repo, System Repo, etc.) the mandatory directive should be honored for the osgi.wiring.bundle, osgi.wiring.host and osgi.wiring.package namespaces.
We can assume service implementing the Repository services used by the subsystems implementation already honor the mandatory directive. If not then it is a bug in the Repository service implementation, not the Subsystems implementation. But we should ensure the internal repository implementations for the subsystems core accurately honor the mandatory directive.
issueID:ARIES-1024
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
texts:SingleServiceTracker fails to track services properly when using a filter
The SingleServiceTracker does not work reliably when you use a filter.
Scenario:
Two services are registered with the interface Foo. The first (lower service id) has no properties, the second (higher service id) has the property bar=baz.
I create a SingleServiceTracker with the class Foo and the filter (bar=baz). I open the SingleServiceTracker, and attempt to get the service.
Result:
The tracker returns null, even though there is a service I could use.
issueID:ARIES-1025
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Orderly shutdown is ineffective for containers using the ext/cm namespace

issueID:ARIES-103
type:Improvement
changed files:
texts:Documantation for the blog sample
1) How to run it
2) How the code is organised and what it does
Add to the web pages under documentation
issueID:ARIES-1030
type:Bug
changed files:
texts:ClassCircularityError with Aries Blueprint on JDK1.7
09:13:24,538 DEBUG [org.jboss.osgi.framework] (Blueprint Extender: 2) Register service: ServiceState{service.id=19, objectClass=[org.jboss.test.osgi.example.blueprint.bundle.ServiceB]}
09:13:24,537 ERROR [org.jboss.osgi.framework] (Blueprint Extender: 1) JBOSGI011026: Framework Error: org.osgi.framework.ServiceException: Cannot get factory value
 at org.jboss.osgi.framework.internal.ServiceStateImpl.getScopedValue(ServiceStateImpl.java:152)
 at org.jboss.osgi.framework.internal.ServiceManagerImpl.getService(ServiceManagerImpl.java:266)
 at org.jboss.osgi.framework.internal.AbstractBundleContext.getService(AbstractBundleContext.java:475)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.addingService(NamespaceHandlerRegistryImpl.java:101)
 at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932)
 at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:864)
 at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
 at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
 at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:894)
 at org.jboss.osgi.framework.internal.FrameworkEventsImpl.fireServiceEvent(FrameworkEventsImpl.java:606)
 at org.jboss.osgi.framework.internal.ServiceManagerImpl.registerService(ServiceManagerImpl.java:149)
 at org.jboss.osgi.framework.internal.AbstractBundleContext.registerService(AbstractBundleContext.java:383)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl$3.run(BlueprintContainerImpl.java:412)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl$3.run(BlueprintContainerImpl.java:410)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:410)
 at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:191)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:670)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:339)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:242)
 at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
 at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
 at java.util.concurrent.FutureTask.run(FutureTask.java:166)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
 at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.ClassCircularityError: org/apache/aries/blueprint/container/BlueprintContainerImpl$5$1
 at org.apache.aries.blueprint.container.BlueprintContainerImpl$5.combine(BlueprintContainerImpl.java:435)
 at java.security.AccessControlContext.goCombiner(AccessControlContext.java:493)
 at java.security.AccessControlContext.optimize(AccessControlContext.java:401)
 at java.security.AccessController.getContext(AccessController.java:502)
 at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:406)
 at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:374)
 at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:119)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.loadClass(BlueprintContainerImpl.java:391)
 at org.apache.aries.blueprint.container.BlueprintRepository.loadClass(BlueprintRepository.java:410)
 at org.apache.aries.blueprint.container.GenericType.parse(GenericType.java:113)
 at org.apache.aries.blueprint.di.AbstractRecipe.doLoadType(AbstractRecipe.java:168)
 at org.apache.aries.blueprint.di.AbstractRecipe.loadType(AbstractRecipe.java:161)
 at org.apache.aries.blueprint.container.BeanRecipe.loadClass(BeanRecipe.java:245)
 at org.apache.aries.blueprint.container.BeanRecipe.getType(BeanRecipe.java:891)
 at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:319)
 at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:802)
 at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:783)
 at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:106)
 at org.apache.aries.blueprint.container.ServiceRecipe.createService(ServiceRecipe.java:280)
 at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:247)
 at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:349)
 at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:502)
 at org.jboss.osgi.framework.internal.ServiceStateImpl$ServiceFactoryHolder.getService(ServiceStateImpl.java:468)
 at org.jboss.osgi.framework.internal.ServiceStateImpl.getScopedValue(ServiceStateImpl.java:141)
 ... 28 more
issueID:ARIES-1032
type:Bug
changed files:
texts:JNDI implementation for the ObjectFactory.getObjectInstance returns incorrect value
The JNDI implementation for the ObjectFactory.getObjectInstance is incorrect. If it is unable to create the required object it will return the provided reference when it should return null according to the JNDI API spec. The Aries osgi.service.jndi.JNDIProviderAdmin interface implementation requires its getObjectInstance to return the provided reference in the failure scenario, so need to make sure that still takes place.
Docs for javax.naming.spi.ObjectFactory.getObjectInstance():
http://docs.oracle.com/javase/6/docs/api/javax/naming/spi/ObjectFactory.html#getObjectInstance%28java.lang.Object,%20javax.naming.Name,%20javax.naming.Context,%20java.util.Hashtable%29
JNDIProviderAdmin Javadoc:
/**
Resolve the object from the given reference.
@param refInfo Reference info
@param name the JNDI name associated with this reference
@param context the JNDI context associated with this reference
@param environment the JNDI environment associated with this JNDI context
@return an Object based on the reference passed in, or the original
reference object if the reference could not be resolved.
@throws Exception in the event that an error occurs while attempting to
resolve the JNDI reference.
*/
issueID:ARIES-1033
type:Bug
changed files:
texts:Blueprint does not destroy dependent bean when a dependency service is gone
BTW the blueprint.core 1.1.0 is not available in the JIRA choices. It should be added.
Here's the dependency:
<bean id="hello" class="com.hendyirawan.blueprintdep.dep.HelloImpl"
 init-method="init" destroy-method="destroy"/>
<service ref="hello" auto-export="interfaces"/>
Here's the consumer: (note that adding `depends-on` has no effect on behavior)
<reference id="hello" interface="com.hendyirawan.blueprintdep.dep.HelloService"/>
<bean id="consumer" class="com.hendyirawan.blueprintdep.consumer.Consumer"
  init-method="init" destroy-method="destroy">
 <argument ref="hello"/>
</bean>
1. Install the dependency, but don't start it. Then install the consumer and start it. We'll get this which is correct behavior:
karaf@root> list
START LEVEL 100 , List Threshold: 50
   ID   State         Blueprint      Level  Name
[  54] [Resolved   ] [            ] [   80] com.hendyirawan.blueprintdep.dep (0.0.1.SNAPSHOT)
[  55] [Active     ] [GracePeriod ] [   80] com.hendyirawan.blueprintdep.consumer (0.0.1.SNAPSHOT)
2. Start the dependency. The dependency is started and also the consumer, also correct behavior:
karaf@root> start 54
karaf@root> HelloService constructed
HelloService inited
Consumer created
      
karaf@root> list
START LEVEL 100 , List Threshold: 50
   ID   State         Blueprint      Level  Name
[  54] [Active     ] [Created     ] [   80] com.hendyirawan.blueprintdep.dep (0.0.1.SNAPSHOT)
[  55] [Active     ] [Created     ] [   80] com.hendyirawan.blueprintdep.consumer (0.0.1.SNAPSHOT)
3. Stop the dependency. Here's unexpected behavior. The dependency is now in 'resolved' state but the consumer stays in Active-Created state:
karaf@root> stop 54
HelloService destroyed
karaf@root> list
START LEVEL 100 , List Threshold: 50
   ID   State         Blueprint      Level  Name
[  54] [Resolved   ] [            ] [   80] com.hendyirawan.blueprintdep.dep (0.0.1.SNAPSHOT)
[  55] [Active     ] [Created     ] [   80] com.hendyirawan.blueprintdep.consumer (0.0.1.SNAPSHOT)
4. If we restart the consumer, now the consumer is aware that dependency is gone, so consumer is destroyed and goes to GracePeriod. But this should have happened in step 3 without manual restart:
karaf@root> restart 55
Consumer destroyed
karaf@root> list
START LEVEL 100 , List Threshold: 50
   ID   State         Blueprint      Level  Name
[  54] [Resolved   ] [            ] [   80] com.hendyirawan.blueprintdep.dep (0.0.1.SNAPSHOT)
[  55] [Active     ] [GracePeriod ] [   80] com.hendyirawan.blueprintdep.consumer (0.0.1.SNAPSHOT)
Is this a bug or that there's a Blueprint trick I'm not aware yet?
The sample project is available at https://github.com/ceefour/blueprintdep
issueID:ARIES-1034
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
texts:Excessive IO when install subsystems and when initializing the root subsystem
I noticed this when activating the subsystem.core bundle. It was taking a long time to start subsystem.core. A lot of IO is being done to establish the constituents of the root subsystem. In my particular environment there are about 120 bundles. All of these bundles end up being constituents of the root subsystem.
In the call to org.apache.aries.subsystem.core.internal.Subsystems.getRootSubsystem() the deployment manifest for the root subsystem is being rewritten once for each constituent detected and the file content gets progressively larger with each constituent added. That ends up being 121 times the whole file gets written and the final content of the file ends up being around 14 KB.
I have two observations:
1) a BufferedOutputStream is not used to write the deployment manifest. Since the file can grow to several KB in size it would be optimal to use a buffered output stream.
2) can we avoid writing the persistent deployment manifest until a successful installation is done and then at the end we only write the complete deployment manifest once?
issueID:ARIES-1038
type:New Feature
changed files:blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/Account.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/DateTypeConverter.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/AccountsServlet.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/AccountFactory.java
blueprint/blueprint-web/src/main/java/org/apache/aries/blueprint/web/BlueprintContextListener.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/StaticAccountFactory.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/Foo.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/CurrencyTypeConverter.java
texts:be able to easily use Blueprint inside a WAR in any servlet container using blueprint-noosgi and a ServletContextListener to boot up all the blueprint XML files
I've an initial patch I'm about to submit as a pull request which is a first cut.
Basically letting WARs in a servlet engine act like blueprint in OSGi; in the sense that any jar can include a blueprint XML file (in META-INF/blueprint.xml to differentiate from the OSGi based configuration?) which the ServletContextListener can then use to find all the blueprint XML files on the classpath (e.g. in dependent jars of the WAR) and then boot everything up
issueID:ARIES-104
type:Bug
changed files:samples/blueprint/helloworld/helloworld-server/src/main/java/org/apache/aries/samples/blueprint/helloworld/server/HelloWorldServiceImpl.java
samples/blueprint/helloworld/helloworld-client/src/main/java/org/apache/aries/samples/blueprint/helloworld/client/HelloWorldClient.java
samples/blueprint/helloworld/helloworld-api/src/main/java/org/apache/aries/samples/blueprint/helloworld/api/HelloWorldService.java
texts:Fix the hello world blueperint sample
The hello world blue print sample does not build.
issueID:ARIES-1040
type:Bug
changed files:
texts:Exception during jpa-container shutdown
During OSGi Framework shutdown, if the JPA provider bundle is stopped before the JPA Container's PersistenceBundleManager.stop() method is being called, you end up with this exception:
ERROR: Bundle org.apache.aries.jpa.container [235] Error stopping bundle. (java.lang.IllegalStateException: No persistence units defined for bundle org.fusesource.example.transactions.database/1.0.0.SNAPSHOT.)
java.lang.IllegalStateException: No persistence units defined for bundle org.fusesource.example.transactions.database/1.0.0.SNAPSHOT.
 at org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoFactoryImpl.destroyPersistenceBundle(ManagedPersistenceUnitInfoFactoryImpl.java:60)
 at org.apache.aries.jpa.container.impl.PersistenceBundleManager.removedBundle(PersistenceBundleManager.java:313)
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerRemoved(BundleHookBundleTracker.java:513)
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerRemoved(BundleHookBundleTracker.java:433)
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.untrack(BundleHookBundleTracker.java:834)
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker.close(BundleHookBundleTracker.java:196)
 at org.apache.aries.util.tracker.RecursiveBundleTracker.close(RecursiveBundleTracker.java:106)
 at org.apache.aries.jpa.container.impl.PersistenceBundleManager.close(PersistenceBundleManager.java:140)
 at org.apache.aries.jpa.container.impl.PersistenceBundleManager.stop(PersistenceBundleManager.java:643)
 at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
 at org.apache.felix.framework.Felix.stopBundle(Felix.java:2707)
 at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1327)
 at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
 at java.lang.Thread.run(Thread.java:680)
issueID:ARIES-1041
type:Task
changed files:
texts:Subsystems 1.0.0 Release

issueID:ARIES-1044
type:New Feature
changed files:
texts:Integrate the versioning plugin into subsystem modules after the 1.0.0 release.

issueID:ARIES-1047
type:New Feature
changed files:
texts:Update Aries for JPA 2.1
While implementing OSGi support in Hibernate, I forked Aries JPA and updated it for JPA 2.1 – we needed it as a test bed. The spec is not yet out (currently in a final draft and will hopefully soon be voted on). The fork uses Hibernate's current implementation of the 2.1 API.
I'm creating a pull request with the work, just in case you want it as a starting point for whenever you begin to support 2.1. It's pretty simplistic – updated the POMs and manifests, added un-implemented methods, etc. There are several places where features, new to 2.1, may need to be implemented, however some of them may just need to throw Unsupported.
Pull request: https://github.com/apache/aries/pull/3
Feel free to take it or leave it!
issueID:ARIES-105
type:Bug
changed files:
texts:The JMX bundle does not export correctly the jmx api

issueID:ARIES-1050
type:Improvement
changed files:
texts:Revisit the use of coordinations in order to take advantage of the deployment manifest optimizations.
ARIES-1034 introduced an optimization where the saving of the deployment manifest is delayed when a coordination is present. All subsystem operations affecting the deployment manifest should be revisted and make use of coordinations in order to take advantage of this change.
issueID:ARIES-1055
type:Bug
changed files:blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/SimpleNamespaceHandlerSet.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Allow use of custom namespaces in blueprint-noosgi

issueID:ARIES-106
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdminMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
texts:The JMX bundle should work even if all compendium specs are not available

issueID:ARIES-1060
type:Bug
changed files:samples/twitter/twitter-bundle/src/main/java/org/apache/aries/sample/twitter/TwitterQuery.java
texts:Twitter sample compilation fails with Java 7 SDK
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile (default-compile) on project org.apache.aries.samples.twitter.bundle: Compilation failure
[ERROR] could not parse error message: warning: [options] bootstrap class path not set in conjunction with -source 1.5
[ERROR] C:\inst\cygwin\home\hughesj\oss\aries-trunk\samples\twitter\twitter-bundle\src\main\java\org\apache\aries\sample\twitter\TwitterQuery.java:45: error: incompatible types
[ERROR] for (Tweet tweet : result.getTweets()) {
[ERROR] ^
[ERROR] -> [Help 1]
issueID:ARIES-1062
type:Improvement
changed files:
texts:org.apache.aries.subsystem.core.internal.Activator needs to be improved
Currently, org.apache.aries.subsystem.core.internal.Activator class and org.apache.aries.subsystem.core.internal.SubsystemResolverHookFactory class have some curious coding as following:
1. activate()
"new Subsystems()" can not throw SubsystemException.
2. addingService method
I suggest the following writing:
@Override
public synchronized Object addingService(ServiceReference<Object> reference) {
Object service = bundleContext.getService(reference);
if (service instanceof IDirectoryFinder)
{ finders.add((IDirectoryFinder)service); return service; }
else if (service instanceof Repository)
{ repositories.add((Repository)service); return service; }
else if (service instanceof Coordinator){
if (coordinator == null)
{ coordinator = (Coordinator)service; }
}
else if (service instanceof RegionDigraph) {
if (regionDigraph == null)
{ regionDigraph = (RegionDigraph)service; }
}
else if (service instanceof Resolver) {
if (resolver == null)
{ resolver = (Resolver)service; }
}
else if (service instanceof ModelledResourceManager) {
if (modelledResourceManager == null)
{ modelledResourceManager = (ModelledResourceManager)service; }
}
activate();
return service;
}
3. SubsystemResolverHookFactory class's constructor
I have never seen the following and explicitly throw NPE
if (subsystems == null)
throw new NullPointerException("Missing required parameter: subsystems");
I suggest that we'd better use RuntimeException or IllegalArgumentException
issueID:ARIES-1063
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Aries Blueprint 1.0 service does not work with ServiceFactory
A blueprint service does not work with Aries Blueprint (Core) 1.1.0 if the implementation bean is a ServiceFactory. This did work with Aries Blueprint 0.3.1.
I think the attached demo and patch make the issue clear.
issueID:ARIES-1064
type:Bug
changed files:
texts:Advertise blueprint extender capability as defined in the OSGi enterprise r5 spec

issueID:ARIES-1065
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Blueprint - ServiceFactory can't be specified as the bean class
Specifying a class that implements org.osgi.framework.ServiceFactory as the bean class causes an error indicating that the class does not implement the specified interfaces.
e.g. a blueprint.xml containing:
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
<bean id="MyServiceImplBean" class="com.code.impl.MyServiceFactory"/>
<service ref="MyServiceImplBean" id="MyServiceImplBeanService" interface="com.code.api.MyServiceInterface"></service>
</blueprint>
Where MyServiceFactory implements ServiceFactory and can be used to obtain the actual service class that implements the MyServiceInterface would cause an error indicating that MyServiceFactory does not implement MyServiceInterface (which is true)
Suggested fix (patch attached) is to ensure for this case that the proxy class indicates it implements the ServiceFactory interface, and then delay validation until after the service is obtained.
issueID:ARIES-1069
type:New Feature
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/AriesTransactionManagerImpl.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/XidFactoryImpl.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/AriesPlatformTransactionManager.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/AriesTransactionManager.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
texts:Publish a single interface for better integration of the TransactionManager with other low-level components
When integrating with the Geronimo Connector library, it's quite hard to use the Aries transaction manager because some interfaces are not exposed.
Exposing a single interface inheriting from all the needed ones will ease the work a lot.
issueID:ARIES-107
type:Bug
changed files:
texts:remove unneeded maven-paxexam-plugin in jmx-itest which causes a build error when doing mvn eclipse:eclipse
[INFO] ------------------------------------------------------------------------
[INFO] Building Apache Aries JMX integration tests
[INFO] task-segment: [eclipse:eclipse]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing eclipse:eclipse
[INFO] artifact org.ops4j.pax.exam:maven-paxexam-plugin: checking for updates from central
[INFO] [enforcer:enforce
{execution: default}
]
[INFO] [remote-resources:process
{execution: default}
]
[INFO] [depends:generate-depends-file
{execution: generate-depends-file}
]
[INFO] Created: /Users/linsun/aries/jmx/jmx-itests/target/classes/META-INF/maven/dependencies.properties
[INFO] [paxexam:generate-config
{execution: generate-config}
]
[INFO] Adding dependencies in scope provided
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Unable to create dependencies file: java.lang.NullPointerException
[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8 seconds
[INFO] Finished at: Tue Jan 05 13:53:20 EST 2010
[INFO] Final Memory: 31M/63M
issueID:ARIES-1070
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ConnectionManagerFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Recovery.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/XADataSourceMCFFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/RecoverableDataSource.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ManagedDataSourceFactory.java
texts:Provide a correct JDBC wrapping for XA data sources

issueID:ARIES-1072
type:Bug
changed files:
texts:Bundle BREE headers must be converted to osgi.ee requirements for proper resolution at subsystem install time.
Subsystems containing bundles that declare a BREE header with an unsupported environment will currently resolve at install time then fail to start later because runtime resolution fails. This failure should occur at install time.
The BREE headers should be converted into osgi.ee requirements according to OSGi core specification 3.4.1.
issueID:ARIES-1075
type:Bug
changed files:
texts:NullPointerException in EntityManagerFactoryManager.providerRemoved
Suggested solution will be attached
issueID:ARIES-1078
type:Bug
changed files:
texts:JPA container stops locating providers for managers (PUs) when one provider is found
What happens is, you may have two providers in the OSGi registry. When one is found, all managers who are waiting on a provider get removed from this list, even though not all may match.
I found this issue because I created a custom provider which allows for injecting configuration into the process of creating the entity manager, apart from that which is in persistence.xml. I wanted to mate up configuration admin configuration, and so I subclassed the provider given by openjpa, and activated my bundle.
The end result is, my persistence unit is registered with a null provider.
This is a quick one-liner fix; I will create a pull request.
issueID:ARIES-108
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BundleData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
texts:bundle.getBundleContext().getBundles() throws NPE on INSTALLED Bundles
Within FrameworkUtils when extracting imported packages or dependencies
this is done by looking up all bundles via the Bundle's BundleContext.
Unfortunately bundle.getBundleContext() returns null for non-resolved bundles.
One can workaround this by checking for null, but this will nevertheless miss
Bundles in certain states.
BTW, I agree that the dependency resolution via iteration for each
JMX call is ugly (and expensive!). There must be a better way ....
issueID:ARIES-1080
type:Improvement
changed files:
texts:Missing Description Header in Subsystem Manifest
Subsystem specs has a description header for the subsystem manifest.


org.apache.aries.subsystem.core.archive package doesn't contain a header class for it.
issueID:ARIES-1081
type:Bug
changed files:
texts:Preferred-Provider header on an unscoped subsystem must result in installation failure.
Section 134.5.3 of the osgi enterprise specification states:
Because this [Preferred-Provider] header influences resolution, it is only valid for it to be used on a Scoped Subsystem. If a Subsystems implementation encounters this header on an Unscoped Subsystem, it must fail the installation of the Subsystem.
This is not currently verified by the CT (see https://www.osgi.org/members/bugzilla/show_bug.cgi?id=2535).
issueID:ARIES-1082
type:New Feature
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableServiceReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ServiceReferenceMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedServiceReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Add a way to use property placeholders to define filters on service references
The idea is to define a ext:filter attribute that would be a ValueMetadata so that property substitution would take place through placeholders.
issueID:ARIES-1085
type:Bug
changed files:
texts:Rare NPE in jndi ContextHelper.getInitialContextUsingBuilder()
This implies that builder can sometimes end up null. This might be because context or ref were somehow null, or possibly because context and ref were valid but the OSGi service registry somehow still returned null from Utils.getServicePrivileged(). Adding some small, non-intrusive extra diagnostics.
issueID:ARIES-1089
type:Bug
changed files:
texts:Handlers map in NamespaceHandlerSetImpl is unsafe.
The NamespaceHandlerSetImpl class uses an unprotected map to store handlers. The map is accessible to multiple threads. For example, the thread delivering the NamespaceHandler service registration event will store the handler in the map and eventually call BlueprintContainerImpl.schedule, which spawns off another thread that will look for a handler in the map.
We appear to be encountering a visibility issue where the org.apache.aries.application.resolver.obr bundle will never activate because blueprint thinks the required namespace handler is not available. However, the logs clearly show the namespace handler being registered anywhere from a millisecond to one or two seconds previously.
Would there be any objections to using a ConcurrentHashMap?
issueID:ARIES-109
type:Bug
changed files:samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
texts:Blog sample does not persist blogtext.
The blog sample persists all of the fields (date, title etc) of a blog entry except the blog text. For example, here is a view of the blogentry table after creating a blogentry with title 'whatever'
ij> select * from blogentry;
ID |BLOGTEXT |PUBLISHDATE |TITLE |UPDATEDDATE |AUTHOR_EMAIL
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1 | |2010-01-08 00:00:00.0 |whatever |NULL |zoe@uk.ibm.com
issueID:ARIES-1090
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:ABBA deadlock in BP container between BlueprintContainerImpl and ReferenceRecipe
thread 1:
Blocked on: java/lang/Object@0x00000000B00078C0 Owned by: "Blueprint Extender: 2" Java callstack:
at org/apache/aries/blueprint/container/ReferenceRecipe.untrack(ReferenceRecipe.java:151(Compiled Code))
at org/apache/aries/blueprint/container/BlueprintContainerImpl.notifySatisfaction(BlueprintContainerImpl.java:623(Compiled Code))
(entered lock: org/apache/aries/blueprint/container/ServiceRecipe@0x00000000AC3C94B8, entry count: 1)
<quiesce>
Blueprint Extender: 2
Blocked on: org/apache/aries/blueprint/container/ServiceRecipe@0x00000000AC3C94B8 Owned by: "thread 1"
Java callstack:
at org/apache/aries/blueprint/container/ServiceRecipe.decrementActiveCalls(ServiceRecipe.java:468(Compiled Code))
at org/apache/aries/blueprint/container/QuiesceInterceptor.postCallWithReturn(QuiesceInterceptor.java:44(Compiled Code))
at org/apache/aries/blueprint/proxy/Collaborator.postInvoke(Collaborator.java:105(Compiled Code))
...
at org/apache/aries/blueprint/utils/ReflectionUtils.invoke(ReflectionUtils.java:238(Compiled Code))
at org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe$Listener.invokeMethods(AbstractServiceReferenceRecipe.java:466(Compiled Code))
at org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe$Listener.bind(AbstractServiceReferenceRecipe.java:448(Compiled Code))
at org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.bind(AbstractServiceReferenceRecipe.java:345(Compiled Code))
at org/apache/aries/blueprint/container/ReferenceRecipe.bind(ReferenceRecipe.java:165(Compiled Code))
(entered lock: java/lang/Object@0x00000000B00078C0, entry count: 1)at org/apache/aries/blueprint/container/ReferenceRecipe.retrack(ReferenceRecipe.java:132(Compiled Code))
at org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.updateListeners(AbstractServiceReferenceRecipe.java:337(Compiled Code))
...
at org/apache/aries/blueprint/container/BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:648(Compiled Code))
at org/apache/aries/blueprint/container/BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:340(Compiled Code))
...
issueID:ARIES-1095
type:Bug
changed files:
texts:jndi-url problem when Bundles export services on interfaces they cannot load

issueID:ARIES-1099
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
texts:Aries Proxy explodes when using Logback
The Aries Proxy weaving code has a exclusions for the packages that it uses (e.g. ASM) to prevent it trying to weave classes that are needed to weave classes. Obviously this is necessary to prevent cycle/NoClassDefFoundError/Kaboom type problems.
One of the things needed by the proxy weaving code is logging. There is an existing exclusion for SLF4J, but this can also be provided by logback. This also needs to be excluded.
issueID:ARIES-11
type:Bug
changed files:
texts:An exception in a single BlueprintListener blueprintEvent() method should not terminate the event dispatch chain.
The dispatch loop for calling BlueprintListener.blueprintEvent() methods does not catch exceptions that might occur during a listener call. This can result in some registered listeners not seeing some of the events. The listener dispatch needs to catch all exceptions from individual method calls and process the entire listener list.
issueID:ARIES-1103
type:Bug
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/ContentInfo.java
esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/Constants.java
esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:esa-maven-plugin breaks maven 3 snapshot dependencies in subsystem manifest
With maven3 SNAPSHOT dependencies are stored as a-0.0.1-20101204.150527-6.jar, not as a-0.0.1-SNAPSHOT.jar if they are not built within the same reactor.
Maven dependencies will be resolved fine, however the esa-maven-plugin will generate wrong subsystem manifests from this.
The bundle-symbolic-name is parsed from the manifest (maven2OsgiConverter.getBundleSymbolicName(artifact) does that), but the version put into the artifact is generated with Analyzer.cleanupVersion(), which will generate a completely wrong qualifier (6) from the maven version number.
I think the only way to get the correct version number is to parse it from the bundle's manifest (as it is done for the bundle symbolic name).
issueID:ARIES-1107
type:Bug
changed files:
texts:Having issues when deploy my service bundle for JPA-Hibernate ..
2013-08-22 10:35:37,111 | DEBUG | l Console Thread | AbstractServiceReferenceRecipe | r.AbstractServiceReferenceRecipe 143 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Found initial references null for OSGi service (&(&(org.apache.aries.jpa.proxy.factory=true)(osgi.unit.name=tenant))(objectClass=javax.persistence.EntityManagerFactory))
2013-08-22 10:35:37,111 | DEBUG | l Console Thread | BlueprintContainerImpl | container.BlueprintContainerImpl 280 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Running blueprint container for bundle com.igt.arcus.framework.jta.arcus-framework-feature-service in state WaitForInitialReferences
2013-08-22 10:35:37,111 | INFO | l Console Thread | BlueprintContainerImpl | container.BlueprintContainerImpl 344 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Bundle com.igt.arcus.framework.jta.arcus-framework-feature-service is waiting for dependencies [(&(&(org.apache.aries.jpa.proxy.factory=true)(osgi.unit.name=tenant))(objectClass=javax.persistence.EntityManagerFactory))]
2013-08-22 10:35:37,112 | DEBUG | l Console Thread | BlueprintEventDispatcher
issueID:ARIES-111
type:Bug
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
texts:Allow NamespaceHandlers to use ParserContext to figure out what is being parsed
ParserContext.parseElement currently expects you to know what kind of metadata you expect to get out of an element and, depending on the type, may or may not require the element to be in the blueprint namespace. Sometimes he requiest is mapped to a namespace handler, and sometimes it's assumed that you are giving it a blueprint element (but it isn't checked).
It would be much more convenient for writing sophisticated NamespaceHandlers if parseElement would work with Metadata.class as the type: this allows the parser to check namespaces, map to the correct namespace handler if necessary, and figure out what kind of metadata is needed for blueprint elements.
issueID:ARIES-1113
type:Bug
changed files:
texts:Double checked locking in BundleRevisionResource
The class org.apache.aries.subsystem.core.internal.BundleRevisionResource contains the following method:
private ParsedServiceElements getParsedServiceElements() {
  ParsedServiceElements result = elements;
  if (result == null) {
    synchronized (this) {
      result = elements;
      if (result == null)
        elements = result = computeParsedServiceElements();
    }
  }
  return result;
}
It is well known that this double checked locking ideom does not work. It should be changed to something like
private synchronized ParsedServiceElements getParsedServiceElements() {
  if (elements == null)
    elements = computeParsedServiceElements();
  return elements;
}
issueID:ARIES-1117
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/AbstractServiceRegistryContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/AugmenterInvokerImpl.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContextFactory.java
jndi/jndi-api/src/main/java/org/apache/aries/jndi/spi/AugmenterInvoker.java
jndi/jndi-api/src/main/java/org/apache/aries/jndi/spi/EnvironmentUnaugmentation.java
texts:JNDI Environment Augmentation can cause problems with JNDI providers
A suggestion is to add an unaugmentation ability so that after Aries is done with the BundleContext, it can be removed from the Map, allowing providers to operate as though Aries wasn't involved.
issueID:ARIES-1118
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
texts:Provide common schema for XML namespace
And schema that uses the "xml" namespace things (xml:lang, xml:base, etc...) needs to import . Blueprint could provide a Namespace handler for that namespace to avoid having a bunch of different bundles all having to add this to their namespace handlers.
issueID:ARIES-112
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:NamespaceHandlerRegistry does not check that a Service is instantiable before adding it to the registry.

issueID:ARIES-1120
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:getComponentIds returns the context/bundle/etc... even during a reset

issueID:ARIES-1124
type:Bug
changed files:
texts:Extend blueprint-cm import range for blueprint-core
blueprint-cm 1.0.1 is not compatible with the new blueprint-core 1.2.0 bundle.
blueprint-cm defines import to org.apache.aries.blueprint with the "[1.0, 1.2)".
issueID:ARIES-1125
type:Improvement
changed files:
texts:Update to blueprint-core 1.2.0 in aries modules
As blueprint-core 1.2.0 has been release, for consistency, we can upgrade the other Aries modules to use this blueprint-core version.
issueID:ARIES-1126
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java
texts:Weave hook could NPE
In some non-reproducible cases with Equinox (likely during a refresh, but not really sure), the call at the first line of weave of:
Bundle b = wovenClass.getBundleWiring().getBundle();
can NPE due to the bundle wiring being null. This will result in bundles not starting at all. There is no way to work around this.
Two part proposed fix:
1) Check for null there and if null, don't do the bundle check. Note: if we DO have to weave, we do still need the wiring for the loader later.
2) If the "enabled" flag is set to "none", don't register the hook at all. We know nothing will be weaved by the hook so don't bother.
issueID:ARIES-113
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
texts:Use headers when resolving dependencies for BundleStateMBean

issueID:ARIES-1130
type:Bug
changed files:
texts:Blueprint itest failures when using the latest code
If I update the blueprint itest pom to use the latest blueprint code then I see two errors. I get a failure in TestRegistrationListener#testWithAutoExportEnabled() and also in BlueprintContainerTest#testScheduledExecMemoryLeak()
It looks like the itests haven't been running with the latest code for a while, so I can't easily tell what might have broken these.
issueID:ARIES-1134
type:Improvement
changed files:
texts:Enable JPA 2.1 API and correct inconsistent <aries.osgi.import> versioning
There are some inconsistency of <aries.osgi.import> version useage between these modules:
jpa/jpa-api/pom.xml
jpa/jpa-container/pom.xml
jpa/jpa-container-context/pom.xml
jpa/jpa-container-eclipselink-adapter/pom.xml
javax.persistence;version="[1.0.0,2.1.0)",
javax.persistence.spi;version="[1.0.0,2.1.0)",
javax.persistence.criteria;version="[1.1.0,2.1.0)";
javax.persistence.metamodel;version="[1.1.0,2.1.0)";
and
jpa-blueprint-aries/pom.xml
javax.persistence;version="[1.0.0,3.0.0)",
I would like to propose all these modules' version updated to
javax.persistence;version="[1.0.0,3.0.0)",
so the JPA 2.1 API can be used at runtime, if enabled by the container environment.
issueID:ARIES-114
type:Improvement
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/ClassPathBuilder.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/WarToWabConverter.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
application/application-converters/src/main/java/org/apache/aries/application/converters/WabConverterService.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterService.java
web/web-urlhandler/src/main/java/org/apache/aries/web/url/WARConnection.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/PackageFinder.java
web/web-urlhandler/src/main/java/org/apache/aries/web/url/WAR_URLServiceHandler.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/JSPImportParser.java
texts:Move IBM contrib code for War to Wab conversion into trunk to provide a (default) BundleConverter for War files

issueID:ARIES-1140
type:Improvement
changed files:
texts:Injected java.lang.reflect.Proxy implements only single interface
Hi,
I have a problem in using Blueprint together with CXF and Karaf projects. The use case is quite trivial: I inject OSGi service into java class source. This OSGi service is exposed by declared jax-ws client.
1. Blueprint configuration exporting service:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://cxf.apache.org/blueprint/core"
    xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
    xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                        http://cxf.apache.org/blueprint/jaxws http://cxf.apache.org/schemas/blueprint/jaxws.xsd
                        http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
    ">
    <jaxws:client id="crmClient"
        xmlns:serviceNamespace="http://services.talend.org/CRMService"
        serviceClass="org.talend.services.crmservice.CRMService"
        serviceName="serviceNamespace:CRMServiceProvider"
        endpointName="serviceNamespace:CRMServicePort"
        address="http://localhost:8080/service/CRMService"/>

     <service ref="crmClient" interface="org.talend.services.crmservice.CRMService" />
</blueprint>
Where org.talend.services.crmservice.CRMService is generated jax-ws interface
2. Blueprint configuration importing service:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">
 <reference id="CRMServiceClient" interface="org.talend.services.crmservice.CRMService" />

 <bean id="TestClass"
  class="org.talend..demo.TestClass">
  <property name="crms" ref="CRMServiceClient" />
 </bean>
</blueprint>
3. Code in TestClass:
...
    private CRMService crms;

    public void setCrms(CRMService crms) {
        this.crms = crms;
        System.out.println(crms.getClass());
        System.out.println(crms.toString());
        System.out.println(crms instanceof BindingProvider);
    }
...
Problem:
The problem is that crms proxy, injected into TestClass, implements only org.talend.services.crmservice.CRMService.
The proxy calls methods of org.apache.cxf.jaxws.JaxWsClientProxy which implements javax.xml.ws.BindingProvider interface. I expect that crms proxy also implements javax.xml.ws.BindingProvider, but it is not the case. I have the following output from setCrms:
class com.sun.proxy.$Proxy151
org.apache.cxf.jaxws.JaxWsClientProxy@c3f8b42
false
The proxy calls toString() method of JaxWsClientProxy, but it is not instance of BindingProvider interface. The problem is that this proxy is not jax-ws compatible, because spec requires that all proxies implementing BindingProvider interface.
Interesting that Spring DM proxy hasn't such problem: it implements BindingProvider interface in this scenario.
Is it Blueprint problem? (seems to be true for me)
Is there way to fix this in Blueprint?
Regards,
Andrei.
issueID:ARIES-1144
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Shared dependencies are uninstalled while still referenced.
Resources, such as bundles, that are shared by more than one subsystem will get uninstalled when one of the subsystems is uninstalled despite still being referenced by the other subsystems.
issueID:ARIES-1147
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemUri.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java
texts:Installing a subsystems as a transitive dependency via a Repository service fails
The exception occurs when constructing a SubsystemUri instance with an uri value of: subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.0.0!/my-subsystem@0.5.0
The full exception is:
java.lang.IllegalArgumentException: invalid version "1.0.0!/cdi-subsystem@0.5.0": non-numeric "0!/cdi-subsystem@0"
 at org.osgi.framework.Version.parseInt(Version.java:170)
 at org.osgi.framework.Version.<init>(Version.java:134)
 at org.osgi.framework.Version.parseVersion(Version.java:233)
 at org.apache.aries.subsystem.core.internal.SubsystemUri.<init>(SubsystemUri.java:65)
 at org.apache.aries.subsystem.core.internal.Location.<init>(Location.java:58)
 at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:114)
 at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.installRepositoryContent(SubsystemResourceInstaller.java:149)
 at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.install(SubsystemResourceInstaller.java:36)
 at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.installAriesSubsystem(SubsystemResourceInstaller.java:98)
 at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.install(SubsystemResourceInstaller.java:38)
 at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:75)
 at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:31)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:621)
 at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:259)
 at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:63)
 at org.coderthoughts.subsystems.gogo.Activator.install(Activator.java:29)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:606)
 at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
 at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
 at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
 at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
 at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
 at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
 at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
 at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
 at org.apache.felix.gogo.shell.Console.run(Console.java:62)
 at org.apache.felix.gogo.shell.Shell.console(Shell.java:203)
 at org.apache.felix.gogo.shell.Shell.gosh(Shell.java:128)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:606)
 at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:137)
 at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:82)
 at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
 at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
 at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
 at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
 at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
 at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
 at org.apache.felix.gogo.shell.Activator.run(Activator.java:75)
 at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.NumberFormatException: For input string: "0!/cdi-subsystem@0"
 at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
 at java.lang.Integer.parseInt(Integer.java:492)
 at java.lang.Integer.parseInt(Integer.java:527)
 at org.osgi.framework.Version.parseInt(Version.java:168)
 ... 45 more
issueID:ARIES-115
type:Improvement
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/WarToWabConverter.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
application/application-converters/src/main/java/org/apache/aries/application/converters/WabConverterService.java
texts:Improvements to War to Wab converter
Currently, there is little in the way of javadoc around the war to wab converter. That needs to change to make this component truly usable.
Also, a common conversion case might be to convert a WAR inside an EAR file. In this case the context root can be defaulted from the value it is set to in the application.xml. The converter should support such a scenario.
issueID:ARIES-1150
type:Improvement
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/DataSourceMCFFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/AbstractMCFFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/XADataSourceMCFFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/RecoverableDataSource.java
texts:Add support for creating non xa DataSource
Actually you need an XADataSource to get handled by transaction-jdbc. I might be useful to have one abstraction layer to configure either non xa DataSources and XADataSources the same way with the same capabilities (pooling/error handling/...). May be in an generic way by providing specific driver class information. The benefit of that unique approach would be to get all kinds of DataSource configuration the same way on top of the geronimo core libraries. The transaction flag (none/local/xa) might be used for distinction.
issueID:ARIES-1155
type:Bug
changed files:
texts:Error when OSGi container is stopped on aries jpa container No persistence units defined for bundle
I run my cameljpa jpa2jms example on karaf 3.0.1-SNAPSHOT (The snapshot version is necessary as karaf had some issues with openjpa).
See the readme in:
https://github.com/cschneider/Karaf-Tutorial/tree/master/cameljpa/jpa2jms
The example works fine but when I stop the OSGi container I get the error below:
ERROR: Bundle org.apache.aries.jpa.container [160] Error stopping mvn:org.apache.aries.jpa/org.apache.aries.jpa.container/1.0.0 (org.osgi.framework.BundleException: Activator stop error in bundle org.apache.aries.jpa.container [160].)
java.lang.IllegalStateException: No persistence units defined for bundle jpa2jms/1.0.0.SNAPSHOT.
at org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoFactoryImpl.destroyPersistenceBundle(ManagedPersistenceUnitInfoFactoryImpl.java:60)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.removedBundle(PersistenceBundleManager.java:313)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerRemoved(BundleHookBundleTracker.java:513)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerRemoved(BundleHookBundleTracker.java:433)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.untrack(BundleHookBundleTracker.java:834)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker.close(BundleHookBundleTracker.java:196)
at org.apache.aries.util.tracker.RecursiveBundleTracker.close(RecursiveBundleTracker.java:120)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.close(PersistenceBundleManager.java:140)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.stop(PersistenceBundleManager.java:643)
at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:667)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2530)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1309)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
at java.lang.Thread.run(Thread.java:744)
issueID:ARIES-1156
type:Bug
changed files:spi-fly/spi-fly-static-tool/src/main/java/org/apache/aries/spifly/statictool/Main.java
texts:SPI-Fly static tool does not work with Require-Capability bundles
When processing the spi-fly-example-client2-bundle with the static tool, the bundle contains invalid metadata and will not install.
Installation of the org.apache.aries.spifly.examples.client2.bundle-1.0.1-SNAPSHOT_spifly.jar bundle in Equinox yields the following exception:
Invalid manifest header Require-Capability: "osgi.serviceloader; filter:="(osgi.serviceloader=org.apache.aries.spifly.mysvc.SPIProvider)";cardinality:=multiple,"
Note the trailing comma that should not be there.
issueID:ARIES-1157
type:Bug
changed files:
texts:SPI-Fly does not support bundles that are both providers and consumers of the same API
This has been observed with a bundle that does not provide the SPI API, but contains both the provider jar as well as the consumer jar, which is invoked from the activator.
The bundle contains both these headers:
SPI-Consumer: *
SPI-Provider: *
Note that this problem can be observed in Felix but not in Equinox because Equinox sets the TCCL to the current bundle by default.
issueID:ARIES-1158
type:Bug
changed files:transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/RecoverableConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledSession.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/SessionKey.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/IntrospectionSupport.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledConnection.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledProducer.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/ConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/PooledConnectionFactory.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/RecoverablePooledConnectionFactory.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledSessionEventListener.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/GenericResourceManager.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/XaConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/XaPooledConnectionFactory.java
texts:XAConnectionFactory not recoverable
GenericResourceManager needs XAConnectionFactory for recovery but gets only ConnectionFactory which wraps the XAConnectionFactory provided.
XaPooledConnectionFactory:
public void setXaConnectionFactory(XAConnectionFactory xaConnectionFactory) {
this.xaConnectionFactory = xaConnectionFactory;
setConnectionFactory(new ConnectionFactory() {
public Connection createConnection() throws JMSException
{ return XaPooledConnectionFactory.this.xaConnectionFactory.createXAConnection(); }
public Connection createConnection(String userName, String password) throws JMSException
{ return XaPooledConnectionFactory.this.xaConnectionFactory.createXAConnection(userName, password); }
});
}
issueID:ARIES-116
type:Bug
changed files:
texts:Intermittent failures in PersistenceBundleLifecycleTest.testDefault

issueID:ARIES-1160
type:Bug
changed files:
texts:Hibernate JPA: EntityManagerFactoryManager failed to create EntityManagerFactories by Bundle.RESOLVED
Use case: persistence bundle is deployed in OSGi using Hibernate persistence provider. Bundle contains blueprint configuration injecting EntityManager and activates transaction management:
<blueprint  xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.0.0"
            xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0">

  <bean id="addressDao" class="de.conrad.ccp.basit.customer.ecom.dao.impl.AddressDaoImpl"> 
      <jpa:context unitname="ecom" property="entityManager"/>
      <tx:transaction method="*" value="Required"/>
  </bean>
  
  <service ref="addressDao" interface="de.conrad.ccp.basit.entity.customer.ecom.dao.AddressDao" />
  
</blueprint>
Effect: bundle waiting for EntityManager service. The reason of problem is runtime exception by providerService.createContainerEntityManagerFactory(mpui.getPersistenceUnitInfo(), mpui.getContainerProperties()).
Exception is unfortunately not logged by Aries. The stack trace is following:
java.lang.IllegalStateException: The bundle de.conrad.poc.customerservice-ecom/0.0.1.SNAPSHOT is not started.
        at org.apache.aries.jpa.container.unit.impl.JndiDataSource.getDs(JndiDataSource.java:61)
        at org.apache.aries.jpa.container.unit.impl.DelayedLookupDataSource.getConnection(DelayedLookupDataSource.java:36)
        at org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:70)
        at org.hibernate.engine.jdbc.internal.JdbcServicesImpl$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcServicesImpl.java:242)
        at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:117)
        at org.hibernate.service.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:76)
        at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:160)
        at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:132)
        at org.hibernate.cfg.Configuration.buildTypeRegistrations(Configuration.java:1825)
        at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1783)
        at org.hibernate.ejb.EntityManagerFactoryImpl.<init>(EntityManagerFactoryImpl.java:96)
        at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:914)
        at org.hibernate.osgi.OsgiPersistenceProvider.createContainerEntityManagerFactory(OsgiPersistenceProvider.java:99)
        at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:330)
        at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.bundleStateChange(EntityManagerFactoryManager.java:175)
        at org.apache.aries.jpa.container.impl.PersistenceBundleManager.addingService(PersistenceBundleManager.java:197)
The problem is that call of createEntityManagerFactories() in EntityManagerFactoryManager.bundleStateChange() is made by BUNDLE.RESOLVED event.
The lookup of data source is failed, because the bundle context is not yet available (call by BUNDLE.RESOLVED event). The createEntityManagerFactory is called again by Bundle.ACTIVE event, the problem is that emfs hash map is already created, but it is empty.
Therefore STARTED/ACTIVE createEntityManagerFactories() is called, but makes nothing.
Attached patch contains two changes:
a) log runtime exception throwing by providerService.createContainerEntityManagerFactory
b) adds check to empty hash map:
if(((emfs == null) || emfs.isEmpty()) && !quiesce)
The patch fixes the problem.
Basically it should analyzed is call createEntityManagerFactories() really necessary for Bundle.RESOLVED event.
issueID:ARIES-1161
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
texts:ProxyGenerator uses ProxyCLassLoaded with wrong classloader
After bundle has been reloaded/refreshed, ProxyGenerator keeps using cached version and old reference to outdated classloader. It latter results in NPE when classloader tries to load class from refreshed bundle.
Affected version 1.0.3-SNAPSHOT
issueID:ARIES-1162
type:Bug
changed files:
texts:Persistence Units neet to be destroyed when bundle becomes unresolved
This problem occurs when BundleWatcher is used.
When bundle is updated, its wiring becomes disposed, and UNRESOLVED event is fired. PersistenceBundleManager needs to remove associated persistence units.
patch is attached
issueID:ARIES-1163
type:Bug
changed files:
texts:Upgrade spifly to support asm-5 for jdk-8
The spifly-dyamic-bundle does not support asm-5, which is required to support jdk-8 syntax.
issueID:ARIES-1164
type:Bug
changed files:
texts:itests.BlueprintContainerBTCustomizerTest fails
It fails with equinox 3.5.1. It passes with equinox 3.5.0 configured in @Configuration method
issueID:ARIES-1165
type:Improvement
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:esa-maven-bundle without packaging type "esa"
In cases where the pom's packaging type cannot be "esa" (e.g. "bundle"), add pom's artefact to subsystem.
Scenario: The pom's packaging type is "bundle" (maven-bundle-plugin) and this bundle is supposed to be packaged into a subsystem with its dependencies.
issueID:ARIES-1167
type:Bug
changed files:
texts:transaction.itests fail while retrieving maven-metadata-local.xml from remote repository
There is the following message in logs:
URL [mvn:org.ops4j.pax.logging/pax-logging-api] could not be resolved.
and:
[org.ops4j.pax.url.mvn.internal.Connection] : Reading http://osgi.sonatype.org/content/groups/pax-runner/org/ops4j/pax/logging/pax-logging-api/maven-metadata-local.xml
[org.ops4j.pax.url.mvn.internal.Connection] :     Metadata found: [org/ops4j/pax/logging/pax-logging-api/maven-metadata-local.xml]
[Fatal Error] :6:3: The element type "hr" must be terminated by the matching end-tag "</hr>".
as there's no maven-metadata-local.xml in remote repo.
issueID:ARIES-1169
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/Activator.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/FrameworkMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/wiring/BundleWiringStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/MBeanServiceTracker.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentContext.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgent.java
texts:Concurrency issues in jmx-core
java.lang.NullPointerException
 at org.apache.aries.jmx.agent.JMXAgentImpl.unregisterMBeans(JMXAgentImpl.java:165)[14:org.apache.aries.jmx.core:1.1.1]
 at org.apache.aries.jmx.agent.JMXAgentContext.unregisterMBeans(JMXAgentContext.java:66)[14:org.apache.aries.jmx.core:1.1.1]
 at org.apache.aries.jmx.MBeanServiceTracker$2.run(MBeanServiceTracker.java:83)[14:org.apache.aries.jmx.core:1.1.1]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_51]
 at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_51]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]
 at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
issueID:ARIES-117
type:New Feature
changed files:samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServiceUtilities.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2ServletRcv.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Jsp.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/KeyBlock.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServiceUtilities.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TimerStat.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/ExplicitGC.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServletWriter.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2ServletRcv.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Servlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/ExplicitGC.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Servlet.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/ServiceUtilities.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TimerStat.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2IncludeRcv.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/MDBStats.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2IncludeRcv.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TimerStat.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/ExplicitGC.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2IncludeRcv.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2IncludeRcv.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2ServletRcv.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServiceUtilities.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/ServiceUtilities.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/KeyBlock.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/ServiceUtilities.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2ServletRcv.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/KeyBlock.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TimerStat.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/MDBStats.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/ServiceUtilities.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/ExplicitGC.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Servlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/KeyBlock.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Jsp.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServiceUtilities.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Jsp.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2IncludeRcv.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/MDBStats.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TimerStat.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Servlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServletWriter.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/ServiceUtilities.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/MDBStats.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServletWriter.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Servlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/KeyBlock.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/ExplicitGC.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Jsp.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingBean.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServletWriter.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServiceUtilities.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/MDBStats.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServletWriter.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Jsp.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2ServletRcv.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
texts:Introduce Aries enabled DayTrader from Apache Geronimo
I've been working on a version of the Geronimo Daytrader performance benchmark to leverage the enterprise OSGi application programming model. I've been doing this work in my sandbox under Apache Geronimo (https://svn.apache.org/repos/asf/geronimo/sandbox/jbohn with the most recent changes under daytrader-bp-new).
I'd like to find a more permanent location for this work and get it out of my sandbox.
Here is a brief description of what I have thus far in sandbox:
A restructured Daytrader to support an enterprise OSGi application programming model including blueprint, web container, jndi, jpa, etc...
To further support this programming model I have also reorganized the classes, packages, and bundles.
Simplification and removal of content not yet available in the enterprise OSGi application programming model such as EJB support and removal of Geronimo specific artifacts such as the plugins.
Refactoring the way components gain knowledge of each other and interact to support blueprint concepts such as reference list and reference listeners.
Support for just two different persistence mechanisms - direct JDBC and direct JPA which are currently included in the enterprise OSGi application programming model.
packaging using the Aries Application concepts.
issueID:ARIES-1170
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
texts:Jndi/Url activator should not print a stack trace to stderr
When jndi/url is deployed without blueprint (which is optional), a ClassNotFoundException stack trace is printed to stderr, that's ugly.
issueID:ARIES-1171
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/XADataSourceMCFFactory.java
texts:Aries transaction-jdbc invokes JDBC drivers getXAConnection(String username, String password) but passes null for both arguments
This is rather a bug in the tranql JDBC driver but since that project isn't so active anymore it may be better raised here.
Consider an Oracle JDBC driver exposed as OSGi service such as in the following blueprint:
    <bean id="dataSource" class="oracle.jdbc.xa.client.OracleXADataSource" >
        <property name="URL" value="jdbc:oracle:thin:@localhost:1521:XE" />
        <property name="user" value="admin" />
        <property name="password" value="oracle" />
        <property name="connectionCachingEnabled" value="false" />
    </bean>

    <service interface="javax.sql.XADataSource" ref="dataSource">
      <service-properties>
        <entry key="osgi.jndi.service.name" value="jdbc/oracle"/>
        <entry key="datasource.name" value="Oracle"/>
      </service-properties>
    </service>
When another bundle uses this driver to open a JDBC connection, it is most likely going to raise the following error (full error below [1]):
 java.sql.SQLException: Invalid argument(s) in call
This particular error will only occur with the Oracle ojdbc6 JDBC driver.
With MySQL 5.1.26 I did not have any problems but other JDBC drivers could potentially raise different errors.
What that error means is that the call to the Oracle JDBC driver's
public XAConnection getXAConnection(String userName, String passwd)
passes in null for the username and password, which the driver does not like and raises the exception.
The point is that we probably should not call getXAConnection(String userName, String passwd) if we have no credentials to pass in but instead use the method getXAConnection() so that the configured credentials of the JDBC driver are used.
[1]
org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Invalid argument(s) in call
 at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)[264:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
 at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:575)[264:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
 at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:617)[264:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
 at org.apache.camel.test.TestProcessor.insert(TestProcessor.java:55)[255:dts.filestore.routes-trimmed-6.1:1.0.0.SNAPSHOT]
 at org.apache.camel.test.TestProcessor.process(TestProcessor.java:46)[255:dts.filestore.routes-trimmed-6.1:1.0.0.SNAPSHOT]
 at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:97)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:139)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:64)[142:org.apache.camel.camel-core:2.12.0.redhat-610379]
 at java.util.TimerThread.mainLoop(Timer.java:555)[:1.7.0_45]
 at java.util.TimerThread.run(Timer.java:505)[:1.7.0_45]
Caused by: java.sql.SQLException: Invalid argument(s) in call
 at oracle.jdbc.xa.client.OracleXADataSource.getXAConnection(OracleXADataSource.java:209)[253:wrap_mvn_com.oracle_ojdbc6_11.2.0:0]
 at org.tranql.connector.jdbc.AbstractXADataSourceMCF.getPhysicalConnection(AbstractXADataSourceMCF.java:76)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.tranql.connector.jdbc.AbstractXADataSourceMCF.createManagedConnection(AbstractXADataSourceMCF.java:66)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.MCFConnectionInterceptor.getConnection(MCFConnectionInterceptor.java:48)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.XAResourceInsertionInterceptor.getConnection(XAResourceInsertionInterceptor.java:41)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.SinglePoolConnectionInterceptor.internalGetConnection(SinglePoolConnectionInterceptor.java:70)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.AbstractSinglePoolConnectionInterceptor.getConnection(AbstractSinglePoolConnectionInterceptor.java:80)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.TransactionEnlistingInterceptor.getConnection(TransactionEnlistingInterceptor.java:49)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.TransactionCachingInterceptor.getConnection(TransactionCachingInterceptor.java:109)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.ConnectionHandleInterceptor.getConnection(ConnectionHandleInterceptor.java:43)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.TCCLInterceptor.getConnection(TCCLInterceptor.java:39)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.ConnectionTrackingInterceptor.getConnection(ConnectionTrackingInterceptor.java:66)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.apache.geronimo.connector.outbound.AbstractConnectionManager.allocateConnection(AbstractConnectionManager.java:81)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at org.tranql.connector.jdbc.TranqlDataSource.getConnection(TranqlDataSource.java:62)[118:org.apache.aries.transaction.jdbc:1.0.1.redhat-610379]
 at Proxy1fba8d14_d2b7_481d_86bd_bdb4e72fa591.getConnection(Unknown Source)[:]
 at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:111)[264:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
 at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:77)[264:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
 ... 15 more
issueID:ARIES-1172
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ApplicationServiceModeller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ServiceModeller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemUri.java
texts:Make subsystems independent of application modeller
The ModelledResourceManager is optional but the package dependency is not.
issueID:ARIES-1175
type:Bug
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:esa-maven-plugin custom headers
Information on http://aries.apache.org/modules/esamavenpluginproject.html claims under the "Including Other Headers" section that "You can add any other headers in addition to those calculated from the pom configuration" using the esa-maven-plugin. However, that's not true. A header that I specified within the <instructions/> element did not end up in the generated SUBSYSTEM.MF file.
issueID:ARIES-1176
type:Improvement
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:Override subsystem name & description
Subsystem-Name header value defaults to project name and Subsystem-Description defaults to project description. It would be nice to override these defaults to something else via instructions. Also, since the project description is optional, the Subsystem-Description should not be generated if there is no description.
issueID:ARIES-1177
type:Bug
changed files:
texts:Upgrade to Apache POM 14
Some Maven plugins downloads fail as their pom refers the "old" Central repo URL.
In order to avoid this, we should upgrade to Apache POM 14.
issueID:ARIES-1178
type:Bug
changed files:
texts:Upgrade to maven-plugin-plugin 3.2
The versioning-plugin currently uses the maven-plugin-plugin 2.3.
This old version of maven-plugin-plugin still references the "old" Central URL.
In order to fix that, we should update to maven-plugin-plugin 3.2.
issueID:ARIES-118
type:New Feature
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableServiceReferenceMetadata.java
texts:Add Persistence Context support
Add support for managed persistence contexts and blueprint injection of JPA persistence units and contexts.
issueID:ARIES-1180
type:Improvement
changed files:
texts:Upgrade to ASM 5
In order to support Java8, aries-proxy, aries-spifly, ... have to uprade to ASM5.
issueID:ARIES-1182
type:Improvement
changed files:
texts:Add Export-Service header for org.apache.aries.proxy.ProxyManager service
The proxy-impl bundle currently doesn't have an Export-Service header declaring that it provides the org.apache.aries.proxy.ProxyManager service. This can cause problems when using OBR to resolve bundles, as that relies heavily on this type of information.
issueID:ARIES-1183
type:Improvement
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiURLContextFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/AbstractName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryListContext.java
texts:Small refactorings
Some small refactorings of jndi url to remove duplications, make code more concise and easier to understand.
issueID:ARIES-1184
type:Improvement
changed files:blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Foo.java
texts:Update blueprint integration tests to pax exam 3.4.0
Currently blueprint itests still use pax exam 1.4.0 which is deprecated for some time. We should update the itests to use pax exam 3.4.0.
I found that the pax exam dependency is defined in the aries parent pom. Ultimately we should also change the dependency there but for this issue I will define the pax exam version in the blueprint itests to keep this upgrade isolated.
issueID:ARIES-1185
type:Bug
changed files:
texts:SPI Fly does not work with Java 8
The SPI Fly component does not work with Java 8 due to the ASM version being used not being compatible with Java 8.
Upgrading ASM to the latest version should fix the issue.
issueID:ARIES-1186
type:Improvement
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyAbstractMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/SyntheticSerialVerUIDAdder.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyConcreteMethodAdapter.java
texts:Upgrade proxy-impl to ASM 5 for Java 8 support
Aries Proxy does not work under Java 8, since it depends on ASM 4 which does not support Java 8.
This is currently a blocker for working with Karaf 3.0.1 under Java 8. (Karaf contains Aries Proxy Impl 1.0.2).
Upgrading to ASM 5.0.2 requires changing a few super() calls in Aries subclasses of ASM classes.
I tried a local build of Aries Proxy Impl 1.0.3-SNAPSHOT with these changes, and the result seems to be ok for Karaf.
The larger part of the issue on Aries side is the dependency on a prehistoric version of Pax Exam which depends on Pax Runner (with additional configuration tweaks from Aries) which does not support Java 8 either, so I haven't been able to run the Proxy integration tests.
issueID:ARIES-1187
type:Bug
changed files:
texts:Installing a subsystem does not cleanup files left in tmp area
Installing a subsystem from an esa will leave a file in the temp area with a name like "inputStreamExtract296108253125408467.zip"
issueID:ARIES-1188
type:Improvement
changed files:
texts:Remove pax exam dependency from org.apache.aries.testsupport.unit
Like described in http://mail-archives.apache.org/mod_mbox/aries-dev/201405.mbox/%3C5370E1EA.9040008%40die-schneider.net%3E
I propose to remove the pax exam dependency from org.apache.aries.testsupport.unit. So some reasons why I think this makes sense:
testsupport is used in many aries projects. Many of these do not need the pax exam depdenency. So the dependency binds all these project to a particular pax exam version and increases coupling
pax exam is only needed for two classes in test support. ExtraOptions and AbstractIntegrationTest. ExtraOptions is not really necessary with newer pax exam versions as most of the features are available directly in the pax exam DSL. AbstractIntegrationTest just uses the pax exam @Inject. In pax exam 3 this is replaced with javax @Inject. So this dependency is not necessary anymore.
As far as I know this means we need a new major version of testsupport as we remove a public class.
I will provide a patch.
issueID:ARIES-1189
type:Improvement
changed files:
texts:Update transaction integration tests to pax exam 3

issueID:ARIES-119
type:Bug
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
texts:WAR to WAB converter must add preceding slash to Web-ContextPath

issueID:ARIES-1190
type:Improvement
changed files:
texts:Update aries proxy integration tests to pax exam 3

issueID:ARIES-1192
type:Bug
changed files:
texts:Need to update to maven-bundle-plugin 2.4.0
I'm opening this against blueprint because that is where I noticed an issue with the uses directives generated by the maven-bundle-plugin (version 2.3.4). But the maven-bundle-plugin should be updated for all of Aries in my opinion.
The built blueprint bundle has the following Export-Package statements
org.apache.aries.blueprint.ext;
version="1.1.0";
uses:="
org.slf4j,
org.osgi.service.blueprint.reflect,
org.osgi.framework,
org.apache.aries.blueprint,
org.apache.aries.blueprint.mutable,
org.osgi.service.blueprint.container,
org.apache.aries.blueprint.services,
org.apache.aries.blueprint.ext.evaluator"
AND
org.apache.aries.blueprint.utils;
version="1.1.0";
uses:="
org.osgi.framework,
org.apache.aries.blueprint.services,
org.osgi.service.blueprint.container,
org.slf4j"
Notice that the uses directive includes org.slf4j. This is wrong. The use of that package is an internal implementation detail each of these packages. It should not be included. The inclusion of slf4j package here prohibits other bundles from importing these two blueprint packages if the importing bundles are using a different version of slf4j.
The extra slf4j package is getting added because the bnd version used by the maven-bundle-plugin (version 2.3.4) is bnd version 1.15. That is a VERY old version of BND. Newer bnd versions no longer add uses directives for packages that are only internal implementation details of the exported package. I tested out building blueprint with maven-bundle-plugin 2.4.0 and it solves this issue (it uses bnd version 2.1)
issueID:ARIES-1194
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgent.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/Activator.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/MBeanServiceTracker.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentContext.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/Logger.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BundleData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/RoleData.java
texts:Update jmx integration tests to pax exam 3.4.0

issueID:ARIES-1195
type:Improvement
changed files:
texts:Update jndi integration tests to pax exam 3.4.0

issueID:ARIES-1196
type:Bug
changed files:
texts:Service dependency model may create filters with null objectClass
The camel namespace handler does something strange with the dependencies required by a blueprint container by inserting a dependency that only has matching attributes but no interface defined. This results in a model that returns null fromorg.apache.aries.application.modelling.WrappedReferenceMetadata.getInterface()
Ultimately this results in a service filter that includes (objectClass=null) which will never match. This results in a blueprint that subsystems things it can never resolve which ends up causing the subsystem to fail to install.
issueID:ARIES-1197
type:Improvement
changed files:
texts:Update web integration tests to pax exam 3

issueID:ARIES-1198
type:Improvement
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/Activator.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CaseInsensitiveMap.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/PackageFinder.java
web/web-urlhandler/src/main/java/org/apache/aries/web/url/WAR_URLServiceHandler.java
texts:Web urlhandler should not depend on blueprint
The blueprint context in the org.apache.aries.web.urlhandler project only registers two simple services. This can be done in the same way using a plain java BundleActivator.
So we should get rid of the unnecessary blueprint dependency.
issueID:ARIES-1199
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
texts:Upgrade subsystem tests to pax exam 3

issueID:ARIES-12
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:BlueprintListener events are not delivered synchronously and bad/tardy listeners are not ignored
The spec states that the events must be delivered synchronously. "These events are send synchronously with their cause. That is, all listeners must be notified before the Blueprint Container continues to the next step." So we must not use a thread pool to deliver.
It also states "Blueprint Listener services that throw Exceptions or do not return in a reasonable time as judged by the Blueprint extender implementation, should be logged, if possible, and further ignored." We don't do this.
issueID:ARIES-120
type:New Feature
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Maven plugin for creating Aries application archive
Would be nice to have a plugin for Maven for creating Aries application archive. That is, something similar to maven-ear-plugin or maven-war-plugin but for Aries applications.
issueID:ARIES-1200
type:Bug
changed files:
texts:JPA PersistentBundleManager does not work with OSGi 4.2
JPA container code is compiled against OSGi 4.3, but is intended to work with 4.2
If a JPA persistence unit is defined with a org.apache.aries.jpa.provider.version property that contains a version range, the PersistenceBundleManager.combineVersionRanges is driven, but fails due to the code trying to call an OSGi 4.3 specific method for compareTo (which has changed from compareTo(Object) to compareTo(Version)).
One solution would be to catch the exception and attempt to use reflection to drive the Object version of the method. (Diff will be attached)
issueID:ARIES-1201
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Blueprint start can hang when using reference-listeners
Blueprint startup can hang if a reference listener uses the same bean as it is tracking.
For the blueprints included below, blueprints 1 and 2 start processing on different threads. Blueprint 2 tries to get the service from blueprint 1, but blocks as blueprint 1's bean is waiting for the reference to become available. Blueprint 1 runs, tries to create the reference, and so needs to create the bean, but can't as blueprint 2 has started this, and so blueprint 1 can't complete to release blueprint 2.
Essentially, this happens as the blueprint service is registered before it is completely ready to be used. If the eager components were created before registering, the service would be ready to be used straight away. Section 121.6 of the OSGi spec indicates that a blueprint service shouldn't be registered before it is ready.
Blueprint 1:
<reference id="i" interface="api.Interface">
<reference-listener ref="AImplBeanBean" unbind-method="unbound"/>
</reference>
<bean id="AImplBeanBean" class="bundle2.AImplBean" init-method="init">
<property name="i" ref="i"/>
</bean>
<service id="ASrv" ref="AImplBeanBean" interface="api.InterfaceA" activation="eager"></service>
Blueprint 2:
<bean id="BImplBeanBean" class="bundle3.BImplBean"
init-method="init" activation="lazy">
<property name="a" ref="A"/>
</bean>
<service id="BImplBeanBeanService" ref="BImplBeanBean"
interface="api.InterfaceB" />
<reference interface="api.InterfaceA" id="A"/>
Blueprint 3:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" default-activation="lazy">
<bean id="InterfaceImplBean" class="pmr40452.impl.InterfaceImpl" />
<service id="Impl" ref="InterfaceImplBean"
interface="api.Interface" />
</blueprint>
issueID:ARIES-1202
type:Bug
changed files:
texts:Aries Transaction JDBC not runable on ServiceMix
While developing on transaction-jdbc I recognized problems with embedded dependencies like geronimo-connector and geronimo-j2ee-connector_1.6_spec which are embedded into the jar. Got it worked by using connector feature instead (see SM-2319 for enhancement to ServiceMix)
issueID:ARIES-1203
type:Bug
changed files:
texts:Build error specifying old snapshot version for versioning.plugin
I've been trying to compile the latest code from:
https://svn.apache.org/repos/asf/aries/trunk (revision 1599264)
following the "Just build it - no Eclipse" instructions:
http://aries.apache.org/development/buildingaries.html
The last step (﻿mvn -Dmaven.test.skip=true install) is failing with the following error:
[ERROR] Plugin org.apache.aries.versioning:org.apache.aries.versioning.plugin:0.2.0-SNAPSHOT or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.aries.versioning:org.apache.aries.versioning.plugin:jar:0.2.0-SNAPSHOT: Could not find artifact org.apache.aries.versioning:org.apache.aries.versioning.plugin:pom:0.2.0-SNAPSHOT in apache.snapshots (https://repository.apache.org/content/groups/snapshots-group) -> [Help 1]
issueID:ARIES-1204
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
texts:StringIndexOutOfBounds for blueprint apps that have constructors with multiple exceptions
If a blueprint application has classes that have constructors that throw multiple exceptions, such as:
public MyClass(String something) throws IllegalStateException, NumberFormatException {
...
The ASM Method.getMethod(String) call fails with a StringIndexOutOfBoundsException.
It's not 100% clear from the ASM method Javadoc, but I suspect that it's not expecting any throws declaration in the string passed in.
The problem occurs in ProxySubclassAdapter.visit when it tried to get the constructor, and although there is a Method.getMethod(Constructor) method, this returns a different return value (method name is always "<init>"), which still doesn't work.
So, the rather inelegant solution appears to be to strip off the exceptions from the method string.
Diff will be attached.
issueID:ARIES-1207
type:Improvement
changed files:
texts:Upgrade jpa itests to pax exam 3

issueID:ARIES-1208
type:Improvement
changed files:
texts:Forward all javax.persistence.jdbc.* properties to the DataSourceFactory
It is already possible to refer to a DataSource in persistence.xml by defining
javax.persistence.jdbc.driver instead of a jndi DataSource.
We implement this by looking for a DataSourceFactory service.
The problem is that we only foward three properties to the factory:
url, user and password.
So this is not usable for the derby DataSourceFactory provided by ops4j. This DataSource requires a DatabaseName and does not work with url, user and password.
So I would like to change the code in our DataSourceFactoryDataSource to accept a complete Properties object. This object will be filled from the persistence unit by copying all properties that start with javax.persistence.jdbc and remove this prefix.
So this will allow to do any configuration the DataSourceFactory requires.
I hope I am not misusing the javax.persistence.jdbc.* property namespace. So if this is not a good idea please speak up.
issueID:ARIES-1209
type:Bug
changed files:
texts:When recovering the jms pool always invokes createXAConnection()
It may be desirable to allow username / password to be configured on the GenericResourceManager so that createXAConnection(String userName, String password) is invoked if username / password are configured.
issueID:ARIES-121
type:Improvement
changed files:
texts:Convert ApplicationMetadataManager to a simple Factory, and improve application javadoc

issueID:ARIES-1210
type:Improvement
changed files:
texts:Switch samples to pax exam 3

issueID:ARIES-1211
type:Improvement
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ValidatingGenericConnectionManager.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Reflections.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ConnectionManagerFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ValidatingDelegatingManagedConnectionFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/RecoverableDataSource.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ManagedDataSourceFactory.java
texts:Add connection validation feature to jdbc
Aries Transaction JDBC lacks support for connection validation in DataSource pool.
issueID:ARIES-1213
type:Improvement
changed files:
texts:Switch ejb modeller itest to pax exam 3

issueID:ARIES-1214
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java
texts:NPE in subsystem-core
When using Subsystems with OBR (via the OSGi Repository API) I'm running into a NPE in org/apache/aries/subsystem/core/internal/BundleRevisionResource.java
The problem is that computeServiceCapabilities() returns null which is then fed into Collections.unmodifiableList() in the getCapabilities() method.
issueID:ARIES-1215
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Use system bundle for tracking namespace handlers and bundles
The blueprint implementation currently uses its own BundleContext to track Namespace handlers. This can cause issues if namespace handlers are contained in subsystems. One approach to support namespace handlers contained in application subsystems would be for blueprint to use the system bundle context to track namespace handlers.
Blueprint also uses the org.apache.aries.util.tracker.RecursiveBundleTracker to track bundles with blueprint components. The RecursiveBundleTracker understands composites and knows how to recurse into them to track for blueprints contained in composite bundles. We should make the dependency on RecursiveBundleTracker optional and fallback to using the system bundle context for tracking blueprints. This would allow for the support of subsystems with blueprints.
issueID:ARIES-1216
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AsmProxyManager.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
texts:Error when creating proxies with an invisible super class in the hierarchy

issueID:ARIES-1217
type:Bug
changed files:
texts:ProxySubclassGenerator doesn't compile
svn commit: r1603727 introduced a call to a nonexistent method. Add something simple to get the class compiling and the test passing.
issueID:ARIES-1218
type:Bug
changed files:
texts:Blueprint iTests fail

issueID:ARIES-1220
type:Improvement
changed files:
texts:Fix required and provided services for ProxyManager

issueID:ARIES-1221
type:Bug
changed files:
texts:Remove bundle versions from itest dependencies
We still have some itests with specific bundle dependencies. I want to move all the ones I'm aware of into pom.xmls for easier maintenance.
issueID:ARIES-1222
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Should make osgi.ee and osgi.native capabilities available to all subsystems
This is a clarification coming in the Subsystems R6 specification, but I think we should fix this in the R5 subsystems (currently in trunk) now. Otherwise, isolated subsystems with bundles that have Bundle-NativeCode headers may fail to resolve on an R6 OSGi framework implementation. This is because R6 frameworks will convert Bundle-NativeCode headers into the osgi.native namespace requirement. If the subsystems does not make available the osgi.native capability from the system bundle then the bundle with native code will fail to resolve at runtime.
issueID:ARIES-1226
type:New Feature
changed files:blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/Activator.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationBeanProcessor.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationInterceptor.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationNsHandler.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationBeanProcessor.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/SecurityAnotationParser.java
texts:JAAS and JEE annotation based authorization
Provide a new blueprint extension for authorization based on JAAS Authentication and JEE security annotations.
The extension will install a interceptor for blueprint beans that are annotated with @RolesAllowed or @DenyAll.
At runtime calls will be checked for a JAAS login context. Access to methods will only be granted if the principals match the required roles.
issueID:ARIES-1227
type:Improvement
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Allow PerserService to parse successfully when namespace handlers are missing
This becomes painful in scenarios where we are trying to reason about the dependencies of a group of bundles and one of these bundles provides a NamespaceHandler service which will be used at runtime by other bundles in the group. For example, an OSGi Subsystem may be installed with such a group of bundles as its content. The subsystems implementation in Aries attempts to model the blueprint dependencies of the bundle resources before actually installing and starting the bundles. This is done by using the blueprint ParserService. But it always fails to do so because any blueprint XML that uses the custom namespace will fail to model correctly which ultimately results in a subsystem installation failure.
It would be nice if the ParserService could be configured to ignore the missing NamespaceHandlers and continue with modelling the basic blueprint XML. One way to accomplish this would be to have a framework property that can be configured to ignore when a namespace is missing while using the ParserService. This will only change the behavior of the ParserService and not the internal usage of the Parser implementation by blueprint-core. It should also not change the current behavior of the ParserService unless the option to ignore is enabled explicitly.
Another option is to change the ParserService API somehow to pass in an option to ignore unknown NamespaceHandlers. This has an unfortunate side-effect of exploding the API of the ParserService and the many other layers built on top of it (e.g. ParserProxy and ModelledResourceManager which get used by Aries subsystesms). Perhaps that is the correct thing to do, but I am not comfortable changing that much API for this usecase. A global switch that simply enables the option to ignore missing NamespaceHandlers is good enough for my usage. If others want to add API to allow clients of the API to make that choice that is fine with me, but I would prefer that to be done by someone more familiar with the overall API here.
issueID:ARIES-1228
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
texts:subsytem install fails OSGI CT test on Java 8
This was opened to address Bug 2666 from the enterprise compliance tests. It appeared when running on Java 8.
Initial debugging shows that garbage from an uninstalled subsystem is sticking around in the SubSystems.resourceReferences object. This causes incorrect results from the resolve in computeDependencies.
Failing test was:
junit.framework.AssertionFailedError: Unexpected failure installing a subsystem: test4F2_comp_feat - 4F2.prefer.feat.composite@1.0.0.esa: org.osgi.service.subsystem.SubsystemException: org.osgi.framework.BundleException: A bundle is already installed with the name "share.g" and version "1.0.0"
issueID:ARIES-1229
type:Bug
changed files:
texts:Wrong interface advertised in manifest for ParserService

issueID:ARIES-123
type:New Feature
changed files:
texts:Produce a maven plugin to create Aries applications
The application support allows an application artifact to be produced that can be understood by the application component, but there isn't a nice way to generate such an assembly.
We should produce a maven plugin to generate the artifact.
issueID:ARIES-1230
type:Bug
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:Manifest start-order bug in esa maven plugin
There is a small bug in the esa maven plugin.
See page 894 in the OSGi Compendium 5.0.0 for an example.
The entry should look like this:
start-order:=2
but the plugin creates this:
start-order=2
Note that the aries subsytem implementation does not work with the latter notation either.
Diff:
svn diff esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
Index: esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
===================================================================
— esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java (revision 1612842)
+++ esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java (working copy)
@@ -425,7 +425,7 @@
}
String entry = info.getContentLine();
if ("dependencies".equals(startOrder))
{ - entry += ";start-order=\"" + order + "\""; + entry += ";start-order:=\"" + order + "\""; }
if (iter.hasNext()) {
entry += ",\n ";
issueID:ARIES-1231
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
texts:coordinator rollback action incorrectly added
while it may not cause a failure, this is a housekeeping item needed in the code. In ResourceInstaller, a conditional addReference needs to have coordination participant made conditional as well (diff attached).
issueID:ARIES-1232
type:Bug
changed files:
texts:ResolveContext helper appears to not considering all valid capabilities
NOTE, this issue does not exist in truck it is in the aries/branches/subsystemsR6/ implementation.
I don't know of an actual failure this is causing but code appears to be a bug.
ResolveContext.java as part of the findProviders call has a helper addValidCapabilities(). If asked to validate on the first non-Valid capability encountered, it will return rather than continue to check all Capabilities passed into it to evaluate.
Also when adding dependencies from RepositoryServiceRepositories the implementation seems to incorrectly enable validation of sharing path.
issueID:ARIES-1234
type:Bug
changed files:
texts:Recreate Aries JPA 2.0 support
Aries-1047 moved the JPA support up to JPA 2.1. However classes that implement the JPA 2.1 API cannot work against the JPA 2.0 API.
For example, javax.persistence.EntityManager has gained a number of new methods such as createStoredProcedureQuery() which return an object of class javax.persistence.StoredProcedureQuery. The class does not exist in JPA 2.0.
A class that implements the 2.1 version of EntityManager can not be loaded under the JPA 2.0 API.
org.apache.aries.jpa.container.impl.EntityManagerWrapper implements javax.persistence.EntityManager. This means that it now has public API methods with class signatures that can not possibly work in a JPA 2.0 environment. Attempts to do so yield errors of the form,
java.lang.ClassNotFoundException: javax.persistence.StoredProcedureQuery cannot be found by org.apache.aries.jpa.container.context.
We need the JPA 2.0 code back. This will first be achieved by restoring the JPA container code to /trunk/jpa20/... at the svn level before the commit that broke it, http://svn.apache.org/viewvc?view=revision&revision=1610718.
Most of the code remains common, but will require additional effort to refactor: this can be done, if desired, under future JIRAs.
issueID:ARIES-1236
type:Bug
changed files:
texts:Subsystem cannot be loaded from directory it must be a Zip archive.
Steps to reproduce:
Extract a simple subsystem archive (e.g.: http://coderthoughts.googlecode.com/files/subsystem1.esa)
Rename the folder to end with .esa (e.g.: subsystem1.esa)
Install subsystem, rootSubsystem.install(file://path/to/dir/subsystem1.esa);
The subsystem will be installed but the bundles/jars are not imported/installed.
It seems like that the path to bundles gets screwed up by content.convertNested() in the BundleResource class
Please see: https://github.com/apache/aries/blob/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java#L64
Here is how the path looks like:
/path/to/dir/subsystem1.esa/BundleA_1.0.0.jar//BundleA_1.0.0.jar
Bundle Dependencies:
'org.apache.aries.subsystem:org.apache.aries.subsystem.core:1.0.0'
'org.apache.aries.subsystem:org.apache.aries.subsystem:1.0.0'
'org.apache.aries.subsystem:org.apache.aries.subsystem.obr:1.0.0'
'org.apache.aries.subsystem:org.apache.aries.subsystem.api:1.0.0'

'org.apache.aries.application:org.apache.aries.application.api:1.0.0'
'org.apache.aries.application:org.apache.aries.application.modeller:1.0.0'
'org.apache.aries.application:org.apache.aries.application.utils:1.0.0'
'org.apache.aries.blueprint:org.apache.aries.blueprint:1.1.0'
'org.apache.aries.proxy:org.apache.aries.proxy:1.0.1'
'org.apache.aries:org.apache.aries.util:1.1.0'
'org.apache.felix:org.apache.felix.bundlerepository:1.6.6'
'org.apache.felix:org.apache.felix.resolver:1.0.0'
'org.eclipse.equinox:org.eclipse.equinox.coordinator:1.1.0.v20120522-1841'
'org.eclipse.equinox:org.eclipse.equinox.region:1.1.0.v20120522-1841'
issueID:ARIES-1237
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
texts:subsytem BundleEventHook incorrectly associating new bundle installs to subsystems
BundleEvent hook has logic to detect new bundle installed by an existing bundle context that is a subsystem constituent and make the new bundle a constituent of same susbsystem. It is triggering on budles that are merely dependencies.
As a result of this incorrect association, the BundleResolverHook may later incorrectly stop a bundle from resolving by incorrectly associating the "victim" bundle with a subsytem in installing state.
issueID:ARIES-1238
type:Bug
changed files:
texts:Fix for ARIES-1216 can cause NPE if classToProxy is a class from the boot loader
I'm not entirely sure on the scenario to reproduce this. But I was getting an NPE when the classToProxy is a class from the boot strap class loader. In my scenario I think that class is java.util.Properties:
org.osgi.service.blueprint.container.ComponentDefinitionException: Error setting property: PropertyDescriptor <name: props, getter: null, setter: [class bp.test.client.TestBean.setProps(class java.util.Properties)]
at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:941)
at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:907)
at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:888)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:820)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
at java.util.concurrent.FutureTask.run(FutureTask.java:273)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:681)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:378)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:482)
at java.util.concurrent.FutureTask.run(FutureTask.java:273)
at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:482)
at java.util.concurrent.FutureTask.run(FutureTask.java:273)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:189)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:303)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:626)
at java.lang.Thread.run(Thread.java:804)
Caused by: java.lang.NullPointerException
at org.apache.aries.proxy.impl.AsmProxyManager.createNewProxy(AsmProxyManager.java:117)
at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:75)
at org.apache.aries.proxy.impl.AbstractProxyManager.createInterceptingProxy(AbstractProxyManager.java:53)
at org.apache.aries.blueprint.container.BeanRecipe.addInterceptors(BeanRecipe.java:767)
at org.apache.aries.blueprint.container.BeanRecipe.wrap(BeanRecipe.java:843)
at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:149)
at org.apache.aries.blueprint.container.BlueprintRepository.convert(BlueprintRepository.java:402)
at org.apache.aries.blueprint.utils.ReflectionUtils$PropertyDescriptor.convert(ReflectionUtils.java:394)
at org.apache.aries.blueprint.utils.ReflectionUtils$MethodPropertyDescriptor.internalSet(ReflectionUtils.java:628)
at org.apache.aries.blueprint.utils.ReflectionUtils$PropertyDescriptor.set(ReflectionUtils.java:378)
at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:939)
... 23 more
issueID:ARIES-1239
type:Bug
changed files:
texts:Correct/improve logging in org.apache.aries.subsystem.core.internal.StartAction

issueID:ARIES-124
type:Bug
changed files:
texts:Aries JPA modules and bundles do not follow the correct naming scheme
This should be made consistent before creating a first release.
issueID:ARIES-1242
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
texts:Poor JNDI performance using Oracle DSML
Trace added to org.apache.aries.jndi.ObjectFactoryHelper is not guarded. A particularly expensive toString() implementation in com.sun.jndi.dsml.DsmlCtx results in unacceptably poor performance working with JNDI as a result,
issueID:ARIES-1243
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
texts:NPE in ObjectFactoryHelper.getObjectInstanceViaContextDotObjectFactories
NPE occurs when a null env is passed to OSGiObjectFactoryBuilder.getObjectInstance(). env can validly be null according to javadoc
issueID:ARIES-1244
type:Wish
changed files:
texts:Allow external access to Felix<->OSGi adapters in org.apache.aries.subsystem.obr.internal
Hi, I'm currently writing code that accesses Felix repositories and then allows interaction with these repositories via OSGi interfaces. This is something that Aries does inside the org.apache.aries.subsystem.obr.internal package where there are a number of classes which provide the ability to adapt OSGi->Felix and Felix->OSGi. The classes in question are
FelixCapabilityAdapter.java
FelixProperty.java
FelixRepositoryAdapter.java
FelixRequirementAdapter.java
FelixResourceAdapter.java
OsgiCapabilityAdapter.java
OsgiContentCapability.java
OsgiIdentityCapability.java
OsgiRequirementAdapter.java
OsgiResourceAdapter.java
Rather than re-invent the wheel/take a copy, I would like to propose that these classes are moved into their own package, and that this is subsequently exported for external use. Scanning the import statements, none of them look to reference any Aries internal classes and so I believe a simple refactoring is all that would be required.
issueID:ARIES-1246
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/RecoverableDataSource.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ConnectionManagerFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ManagedDataSourceFactory.java
texts:ConnectionManagerFactory does not honor aries.xa.name service property
I´m running JBoss Fuse 6.1 (which includes org.apache.aries.transaction.jdbc/1.0.1-redhat-610379 as well as geronimo-connector/3.0).
When using XA auto-enlisting it seems that org.apache.aries.transaction.jdbc.internal.ConnectionManagerFactory does not use the service property aries.xa.name as a name; instead it uses getClass().getName():
        if (connectionManager == null) {
            // Instantiate the Geronimo Connection Manager
            connectionManager = new GenericConnectionManager(
                    transactionSupport,
                    poolingSupport,
                    subjectSource,
                    connectionTracker,
                    transactionManager,
                    managedConnectionFactory,
                    getClass().getName(), // <-- this may be wrong
                    getClass().getClassLoader());
This leads to problems in org.apache.geronimo.transaction.manager.RollbackTask when looking up the NamedXAResourceFactory in case of XAException.XAER_RMFAIL:
                    } else if (e.errorCode == XAException.XAER_RMFAIL || e.errorCode == XAException.XAER_RMERR) {
                        //refresh the xa resource from the NamedXAResourceFactory
                        if (manager.getCommitter() instanceof NamedXAResource) {
                            String xaResourceName = manager.getResourceName(); // <-- this will resolve to aries.xa.name´s property value
                            NamedXAResourceFactory namedXAResourceFactory = txManager.getNamedXAResourceFactory(xaResourceName); // <-- this will be null since the factory has been registered under "org.apache.aries.transaction.jdbc.internal.ConnectionManagerFactory" 
Now the problem is that manager.getResourceName() resolves to the value of the service property aries.xa.name, but txManager.getNamedXAResourceFactory(xaResourceName) will return null since ConnectionManagerFactory registered the GenericConnectionManager under its fully qualified class name (org.apache.aries.transaction.jdbc.internal.ConnectionManagerFactory).
Result in my case is an endless loop of RollbackTasks since the NamedXAResourceFactory will never be found.
Relevant stack trace of registration:
  Daemon Thread [FelixStartLevel] (Suspended (breakpoint at line 36 in XAResourceInsertionInterceptor)) 
   owns: AtomicBoolean  (id=205) 
   XAResourceInsertionInterceptor.<init>(ConnectionInterceptor, String) line: 36 
   XATransactions.addXAResourceInsertionInterceptor(ConnectionInterceptor, String) line: 61 
   GenericConnectionManager$InterceptorsImpl.<init>(TransactionSupport, PoolingSupport, SubjectSource, String, ConnectionTracker, TransactionManager, ManagedConnectionFactory, ClassLoader) line: 129 
   GenericConnectionManager.<init>(TransactionSupport, PoolingSupport, SubjectSource, ConnectionTracker, RecoverableTransactionManager, ManagedConnectionFactory, String, ClassLoader) line: 67 
   org.apache.aries.transaction.jdbc.internal.ConnectionManagerFactory.init() line: 140 
   org.apache.aries.transaction.jdbc.internal.ManagedDataSourceFactory.register() line: 116 
   Activator.addingService(ServiceReference) line: 95 
issueID:ARIES-1247
type:Improvement
changed files:
texts:EntityManagerFactoryManager: remove the try of creation of EntityManagerFactories from Bundle.RESOLVED event
EntityManagerFactoryManager:
As it was already mentioned in ARIES-1160, I do not see any benefit for trying to create EntityManagerFactories on Bundle.RESOLVED event.
On time of Bundle.RESOLVED the bundle context is still not initialized and trying of creation EntityManagerFactory will likely failed (Hibernate and EclipseLink implementations are failed by lookup of DataSource service).
It only confuses user with a stack trace.
The EntityManagerFactories will be created a tick later on Bundle.ACTIVE event by calling registerEntityManagerFactories() method.
Patch is attached.
issueID:ARIES-125
type:Improvement
changed files:
texts:Implement a new BundleTracker that automatically filters out events related to framework bundles in a composite bundle
This new BundleTracker should be aware of what a CompositeBundle is and should automatically handle events related to framework bundles. This should make life a bit easier for clients.
issueID:ARIES-1250
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/RecoverableDataSource.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ConnectionManagerFactory.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ManagedDataSourceFactory.java
texts:Ability to manage non XA DataSource

issueID:ARIES-1251
type:Improvement
changed files:
texts:Support jpa 2.0 and 2.1 with the same code base
We currently have two separate code bases for jpa 2.0 and 2.1 support. This is very difficult to manage when we do source code changes.
So I will try to create one code that supports both jpa 2.0 and 2.1 by using Dynamic Proxies where we implement EntityManager or EntityManagerFactory.
issueID:ARIES-1252
type:New Feature
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/CustomResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/FileResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/CustomResources.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/content/ConfigAdminContentHandler.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/content/ConfigurationHandler.java
subsystem/subsystem-api/src/main/java/org/apache/aries/subsystem/ContentHandler.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/CustomResourceInstaller.java
texts:Support custom content in subsystems/.esa files
Aries should support custom content in .esa files. This should be (dynamically) pluggable to allow registration of custom handlers for the custom content.
More background: http://mail-archives.apache.org/mod_mbox/aries-user/201407.mbox/%3CCAA+82QtK+DMS9udB7hjLpLe+dgiNxuDKdOQFXDMQo1PnGxt6Sw@mail.gmail.com%3E
issueID:ARIES-1253
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java
texts:Subsystem installation assumes location to be a valid url
If you provide any value for the location parameter of the install() method, the implementation tries to interpret this as a valid url and fails, for example if you use "fileinstall:/something.esa"
I think this should work, especially as the spec does not mandate the location information to be a url
02.10.2014 16:38:31.306 ERROR [OsgiInstallerImpl] org.apache.sling.installer.core.impl.OsgiInstallerImpl Uncaught exception during task execution!
org.osgi.service.subsystem.SubsystemException: java.net.MalformedURLException: Unknown protocol: fileinstall
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:93)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:33)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:621)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:259)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:63)
at org.apache.sling.installer.factories.subsystems.impl.InstallSubsystemTask.execute(InstallSubsystemTask.java:48)
at org.apache.sling.installer.core.impl.OsgiInstallerImpl.executeTasks(OsgiInstallerImpl.java:735)
at org.apache.sling.installer.core.impl.OsgiInstallerImpl.run(OsgiInstallerImpl.java:249)
at java.lang.Thread.run(Thread.java:745)
C
issueID:ARIES-1255
type:Bug
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/ContentInfo.java
texts:esa-maven-plugin generates Subsystem-Content with version range for composite subsystems
Subsystem-Content is derived from the project artifacts. However currently the version range is produced as version="x.y.z" which does not have an upper bound.
This is not valid for composite subsystems, as they need a specific version.
However, I think in general this is not desirable for other subsystems either.
The default should be "[x.y.z, x.y.z]" for all Subsystem-Content derived from maven dependencies as they point at a specific version.
issueID:ARIES-1257
type:Bug
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java
texts:blueprint-cm doesn't call update-method for managed-properties
After this commit: https://github.com/apache/aries/commit/422ba764e04debc9fe197492d5e54b428ef9890d#diff-bbe5c23cdf8f6a0438851e861b3d8704
using blueprint XML like:
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0">

    <bean class="net.nanthrax.karaf.test.MyBean">
        <cm:managed-properties persistent-id="my.config" update-method="update" update-strategy="component-managed"/>
    </bean>

</blueprint>
doesn't call the update() method when the configuration change.
issueID:ARIES-1259
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
texts:Namespacehandler still identifies as 2.0 rather than 2.1
XBeanNamespaceHandler is still configured on the http://aries.apache.org/xmlns/transaction-jdbc/2.0 namespace. Versionnumber should be pushed to 2.1.
issueID:ARIES-126
type:Bug
changed files:
texts:Aries does not deploy sources to mvn repository
Perhaps you could add this to the default parent pom.xml
<plugin>
<artifactId>maven-source-plugin</artifactId>
<executions>
<execution>
<id>attach-sources</id>
<goals>
<goal>jar</goal>
</goals>
</execution>
</executions>
<inherited>true</inherited>
</plugin>
issueID:ARIES-1261
type:Improvement
changed files:transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/Activator.java
texts:Remove blueprint dependency from aries transaction jms
Make xbean dependency optional and not depend on blueprint by providing Activator like aries transaction jdbc.
issueID:ARIES-1262
type:Improvement
changed files:
texts:Use generic capabilities and requirements for services

issueID:ARIES-1263
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemExportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Grammar.java
texts:Make it possible to select 'all services' with Subsystem-ImportService
The Subsystem-ImportService header currently has a format that requires a class name followed by a filter, for example:
 Subsystem-ImportService: com.acme.logging.Log;filter:="(threshold=error)"
However in some cases you want to specify all services. There is currently no way to do this.
Additionally, it would be nice to make is easier to select all services of a given type. Currently you have to specify a filter for this, which is a little awkward. It would be nice if that could be shortened, so e.g.
 Subsystem-ImportService: com.acme.Foo
instead of
 Subsystem-ImportService: com.acme.Foo;filter:="(service.id=*)"
issueID:ARIES-1266
type:Bug
changed files:
texts:Aries Transaction Manager can't use spring 4.x PlatformTransactionManager
Actually 1.1.1 SNAPSHOT does exclude Spring versions with 4.x and higher. Those are automatically installed by newer karaf versions if installing spring-tx feature before transaction feature.
issueID:ARIES-1269
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BlueprintRegistry.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/FilteredClassFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Add blueprint maven plugin
I have recently created a maven plugin that generates blueprint.xml from CDI, JEE and Spring annotations.
https://github.com/cschneider/blueprint-maven-plugin
What makes this different from the blueprint annotations support we already got in aries?
------------------------------------------------------------------------------------------------------------------------
The blueprint annotations follow the xml style of binding to an exact bean id.
The annotations I used by default bind simply by type which is much simpler to manage and more in line with Spring @Autowired and CDI @Inject.
Still they also allow to bind by name using @Named
The aries blueprint annotations are processed at runtime but create xml under the covers. My plugin on the other hand does all the work at build time.
So at runtime you can install into any existing container running blueprint - no additional deps needed.
My plugin uses standard CDI/JEE annotations and where there is no standard (Services) pax cdi annoations. So people using this style can transition from and to real CDI quite easily. People with JEE background also feel at home with this style.
My plugin also supports some spring annotations like @Autowired, @Component, @Value. This allows a very fast migration from spring to blueprint. In fact I used it in a quite big customer project for that case
Sample application
-------------------------
I created an example application that shows how the following features:
internal wiring
container managed JPA with transactions
using and offering OSGi services
https://github.com/cschneider/Karaf-Tutorial/tree/master/tasklist-cdi
issueID:ARIES-127
type:Bug
changed files:
texts:Add logging to the JPA components
The JPA components currently have no logging. These should be updated to use the standard Aries logging framework (whatever that is)
issueID:ARIES-1272
type:Test
changed files:
texts:Add jpa test with hibernate

issueID:ARIES-1275
type:Improvement
changed files:
texts:Add monitoring capability via MBean
It would be good to have monitoring capability via JMX to get static and runtime information.
issueID:ARIES-1277
type:Bug
changed files:
texts:the lifecycle of a bundle is not respected according to the osgi spec. when trying to load a class from a bundle
When using a parent-child subsystem setup, the lifecycle of a bundle is not respected according to the osgi spec. when trying to load a class from a bundle the BundleActivator is not being called before returning the class in the following scenario.
When I create the following environment where I create a subsystem parent 'parent1' which is a feature that has a subsystem constituent 'child1' (application subsystem) and a bundle 'parent-bundle1'. The child subsystem is an application subsystem and has a bundle 'child-bundle1'.
So subsystem 'parent1' contains 'child1' and 'parent-bundle1'.
Subsystem 'child1' contains 'child-bundle1'.
The 'child-bundle1' tries to use a class from 'parent-bundle1' that should fetch state that is set in the BundleActivator of 'parent-bundle1'. Sometimes the logs indicated a nullpointerexception occurred while starting 'child-bundle1'.
While further analysing the problem it became clear to me it was possible to load a class while the bundle activator has not been executed. I added some logging to the code to confirm in the log what I suspected and the log confirmed my suspicions. I was also able to force the issue by using 'start-order' in the manifest to make sure subsystem 'child1' would start before 'parent-bundle1'. Before that I had to try 20x times before it randomly occurred.
If I read the Osgi spec correctly it says the BundleActivator.start should finish before a class from that bundle is returned. I didn't find anything in the subsystem spec that describes a different flow when using subsystems.
I would expect 'parent-bundle1' to be started and become active at the point where 'child-bundle1' tries to load a class from 'parent-bundle1'.
What happens now is 'parent-bundle1' is not being activated but the class is returned causing a nullpointerexception when the state is queried. At the point where 'parent1' is trying to start bundle 'parent-bundle1' it succeeds as you would expect.
issueID:ARIES-1278
type:Bug
changed files:
texts:jpa persist visible outside its transaction
I have created a small example that shows the problem:
https://github.com/cschneider/Karaf-Tutorial/tree/master/tasklist-cdi
The project uses hibernate 4.3, aries jpa and derby.
In persistence I work with container managed persistence provided by aries jpa.
In persistence-emf I directly use the EntiryManagerFactory.
In both cases I open a JTA transaction, then persist an entity. After a sleep I commit the transaction.
In a separate thread I look for the number of entities. I would expect this number to be 0 until the transaction is committed. Unfortunately the persist is already shown while the transaction is still open.
As it also happens with pure EMF the problem is maybe not in aries jpa directly as it is only quite thin then. Still I have no clue what might go wrong.
issueID:ARIES-128
type:New Feature
changed files:util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/AbstractServiceRegistryContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiURLContextFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryListContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiNameParser.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
texts:Implement the JNDI url scheme according to the OSGi Enterprise Specification

issueID:ARIES-1280
type:Bug
changed files:
texts:Bytecode weaving for blueprint proxy classes does not support Java 8
Hi, whilst using blueprint with Java 8 classes I started getting bytecode verification errors.
I believe that this is because the weaving being done in the proxy component does not yet support Java 8. I've had a look at the code and it looks like it needs an upgrade of the version of ASM being used to generate the bytecode from version 4 to 5 so that the class version can be correctly set in the ProxyUtils class.
issueID:ARIES-1281
type:Documentation
changed files:
texts:ESA Maven Plugin Documentation - Update for right Subsystem Type
The Apache Aries ESA maven plugin documentation page at http://aries.apache.org/modules/esamavenpluginproject.html, is using a wrong subsystem type in the section Including Other Headers as
<instructions>
    <Use-Bundle>org.apache.aries.test.Bundle;version=1.0.0-SNAPSHOT</Use-Bundle>
   <Subsystem-Type>feature</Subsystem-Type>
</instructions>
Which is causing the deployment of the subsystem to fail. The subsystem deployment works when I update the instructions as shown below,
<instructions>
    <Use-Bundle>org.apache.aries.test.Bundle;version=1.0.0-SNAPSHOT</Use-Bundle>
   <Subsystem-Type>org.osgi.subsystem.feature</Subsystem-Type>
</instructions>
issueID:ARIES-1282
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/generics/TypeInference.java
texts:BeanRecipe.findMatchingMethods is not able to filter out overridden method signatures
I was trying to get an Infinispan cache object from an infinispan CacheManager using the following blueprint configuration:
<reference id="cacheManager" availability="mandatory" interface="org.infinispan.manager.CacheContainer" />

<bean id="queueCountCache" factory-ref="cacheManager" factory-method="getCache">
 <argument index="0" type="java.lang.String" value="QueueCountCache" />
</bean>
Unfortunately the blueprint startup fails with following error:
org.osgi.service.blueprint.container.ComponentDefinitionException: Multiple matching factory methods getCache found on class Proxy36341b52_07db_4c05_bab0_40dbf8a3899a for arguments [QueueCountCache] when instanciating bean queueCountCache: [public org.infinispan.commons.api.BasicCache Proxy36341b52_07db_4c05_bab0_40dbf8a3899a.getCache(java.lang.String), public org.infinispan.Cache Proxy36341b52_07db_4c05_bab0_40dbf8a3899a.getCache(java.lang.String)]
        at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:305)[7:org.apache.aries.blueprint.core:1.4.0]
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[7:org.apache.aries.blueprint.core:1.4.0]
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[7:org.apache.aries.blueprint.core:1.4.0]
        ...
looking at the matches produced by the BeanRecipe.findMatchingMethods makes it obvious that the CacheContainer implements an interface BasicCacheContainer. The CacheContainer interface overrides the getCache(java.lang.String) that is initially defined in the BasicCacheContainer without any changes. I guess this was implemented for some backward compatibility.
public org.infinispan.commons.api.BasicCache Proxy6e18b006_c93d_4840_bb4d_3522802f6a68.getCache(java.lang.String)=[QueueCountCache]
and
public org.infinispan.Cache                  Proxy6e18b006_c93d_4840_bb4d_3522802f6a68.getCache(java.lang.String)=[QueueCountCache]
The BeanRecipe.findMatchingMethods probably also needs to check if the method signatures found are overridden by another method in the matching collection. If that is the case, all methods that are overridden also need to be discharged.
Here are the 2 offending interfaces that the BeanReceipe matches. Unfortunately the CacheContainer getCache method is the one it should match but not the one from BasicCacheContainer.
CacheContainer.java
package org.infinispan.manager;

import org.infinispan.Cache;
import org.infinispan.commons.api.BasicCache;
import org.infinispan.commons.api.BasicCacheContainer;

public interface CacheContainer extends BasicCacheContainer {

   @Override
   <K, V> Cache<K, V> getCache();

   @Override
   <K, V> Cache<K, V> getCache(String cacheName);

}
BasicCacheContainer.java
package org.infinispan.commons.api;

public interface BasicCacheContainer extends Lifecycle {
 
   <K, V> BasicCache<K, V> getCache();

   <K, V> BasicCache<K, V> getCache(String cacheName);
}
issueID:ARIES-1283
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemExportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Grammar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
texts:Subsystem import/export service header parsing is incorrect
ARIES-1263 introduced a bug in the parsing of the Subsystem import/export service headers. It appears the wildcard matching is causing the regular expressions used to parse the headers to match too much. If you modify test file:
subsystem/subsystem-itests/src/test/resources/composite2/OSGI-INF/SUBSYSTEM.MF
To have the following the test will fail:
Subsystem-ExportService: *;filter:="(test=tb4)", does.not.exist; filter:="(a=b)"
It appears the parsing converts the above to be something like
Subsystem-ExportService: *;filter:="(a=b)"
Basically collapsing the elements into one and using the last filter. This is causing Subsystem OSGi CT failures.
issueID:ARIES-1284
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Improve blueprint-maven-plugin: inherited annotations and qualifiers
I would propose two small improvements in blueprint-maven-plugin:
1. Currently @PostCreate and @PreDestroy annotations will be proceed only if they declared explicitly on bean method. Annotations inherited from abstract class or interface are ignored. I have seen that at least Spring Framework proceeds inherited annotations as well. I would extend the code to check inheritance for these two method annotations.
2. Currently by matching field to types plugin checks @Named("name") annotation. Spring framework uses additionally @Qualifier("name") annotation for bean matching purposes. I would suggest to check additionally Spring @Qualifier annotation.
Patch is attached.
issueID:ARIES-1286
type:Bug
changed files:
texts:Support for inner beans defined as "xsd:any" in custom XMLs
When a custom XSD defines a "xs:any" bean (for instance "shutdownHooks" in ActiveMQ), Blueprint XML validation rejects it because the XML Validator cannot find the XSD for the Blueprint core namespace (http://www.osgi.org/xmlns/blueprint/v1.0.0).
This is because the BlueprintContainer, which calls the XSD validation, extracts the XSD's from the various NamespaceHandler's which are used in the XML. But the Blueprint core namespace is an exceptional case, because it does not have a NamespaceHandler registered in the OSGi registry. Its XSD is therefore missing from the "Schema" object.
To reproduce the problem, here are the steps :
Download samples and extract it :
http://apache.cu.be/aries/samples-1.0.0-source-release.zip
Replace file samples-1.0.0\blueprint\helloworld\helloworld-client\src\main\resources\OSGI-INF\blueprint\config.xml with attached, which adds an inner bean definition.
In directory blueprint-samples-1.0.0-source-release\samples-1.0.0\blueprint\helloworld, do a "mvn install"
In directory blueprint-samples-1.0.0-source-release\samples-1.0.0\blueprint\helloworld\helloworld-assembly\target,
open org.apache.aries.blueprint-1.0.0.jar with a ZIP editor.
Browse to directory org/apache/aries/blueprint/ext/impl
Replace blueprint-ext.xsd with the attached version, which adds a "xsd:any" element.
Run the test with
java -jar osgi-3.5.0.v20090520.jar -console
Type "ss" and check the ID for the bundles.
Start the bundle "org.apache.aries.samples.blueprint.helloworld.client_1.0.0"
[Blueprint Extender: 1] ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle org.apache.aries.samples.blueprint.helloworld.client
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to validate xml
        at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:288)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:291)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:242)
        at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
Caused by: org.xml.sax.SAXParseException; cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'bean'.
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(Unknown Source)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
        at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.beginNode(Unknown Source)
        at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(Unknown Source)
        at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(Unknown Source)
        at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(Unknown Source)
        at javax.xml.validation.Validator.validate(Unknown Source)
        at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:285)
        ... 10 more
issueID:ARIES-1287
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/XADataSourceMCFFactory.java
texts:Forcing auto-commit on Oracle JDBC connection that is still part of a transaction breaks transactional behavior

issueID:ARIES-1288
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:ClassCastException with proxy set in bean of generic class
I have a blueprint configuration as follows (actually from a third-party application):
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.0.0"
           xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0"
           xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
           http://aries.apache.org/xmlns/jpa/v1.0.0 http://aries.apache.org/xmlns/jpa/v1.0.0
           http://aries.apache.org/xmlns/transactions/v1.0.0 http://aries.apache.org/xmlns/transactions/v1.0.0">

    <bean id="meterDaoBean" class="com.third.party.impl.dao.jpa.JpaMeterDao">
        <jpa:context unitname="MeterUnit" property="entityManager" />
    </bean>

    <reference id="securityService" interface="com.third.party.api.SecurityService" availability="optional"/>

    <bean id="secureMeterDaoBean" class="com.third.party.impl.dao.secure.SecureMeterDao">
        <property name="dao" ref="meterDaoBean" />
        <property name="securityService" ref="securityService" />
    </bean>

    <bean id="meterBean" class="com.third.party.impl.MeterServiceImpl">
        <tx:transaction method="*" value="Required" />

        <property name="meterDao" ref="secureMeterDaoBean" />
    </bean>

    <service ref="meterBean" interface="com.third.party.api.MeterService"/>

</blueprint>
...and the (for this issue relevant) class definitions look as follows:
public interface CrudDao<T> {
}

public abstract class SecureDao<T, R extends CrudDao<T>> implements CrudDao<T> {
    protected R dao;

    // ...

    public void setDao(R dao) {
        this.dao = dao;
    }
}

public interface MeterDao extends CrudDao<MeterEntity> {
}

public class JpaMeterDao extends JpaCrudDao<MeterEntity> implements MeterDao {
}

public class SecureMeterDao extends SecureDao<MeterEntity, MeterDao> implements MeterDao {

    // ...

    public MeterEntity get(String id) {
        // some security stuff...
        dao.get(id);
    }
}

...now with that usage of generics the proxy that gets created for the "dao" member in the SecureMeterDao bean instance only implements CrudDao, but not MeterDao.
So, although the initial blueprint setup of beans and services is fine, any call traveling through the SecureMeterDao results in a ClassCastException:
java.lang.ClassCastException: Proxyf427f861_7a7d_41e8_98c7_a09aea99f756 cannot be cast to com.third.party.impl.dao.MeterDao
 at com.third.party.impl.dao.secure.SecureMeterDao.get(SecureMeterDao.java:47)
 at com.third.party.impl.MeterServiceImpl.get(MeterServiceImpl.java:96)
 at Proxy8bef53d7_0df3_4724_a67c_fb296af2aee2.get(Unknown Source)
 at Proxya8f9ae87_fa39_42ae_bf11_baa82efa76cc.get(Unknown Source)
 ...
issueID:ARIES-1289
type:Bug
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
texts:Problematic directory entry check in ProviderBundleTrackerCustomizer
In short: lines 109-111 of ProviderBundleTrackerCustomizer.java contain a check that is both problematic if the bundle does not contain directory entries and also unnecessary:
URL servicesDir = bundle.getResource("/" + METAINF_SERVICES);
  if (servicesDir == null)
    return null;
issueID:ARIES-129
type:Task
changed files:
texts:The index.html in blog sample contains IBM license header.
The index.html in blog sample (blog-sample/blog-servlet/src/main/resources/index.html) contains IBM license header.
issueID:ARIES-1290
type:Bug
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Reflect cm.CmPropertyPlaceholder -> ext.PropertyPlaceholder relationship in XSD
Because org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder directly extends org.apache.aries.blueprint.ext.PropertyPlaceholder and relevant namespace handler looks for ext namespace elements/attributes in cm version of the placeholder, XSDs should reflect this fact.
issueID:ARIES-1291
type:Bug
changed files:
texts:transaction will roll back. XA error code: 100
Tests show incorrect operation of the database.
Create Requerd transaction. Create internal RequiresNew transaction. Rollback first transaction.
Error rollback.
WARN Transaction - Error ending association for XAResource
org.apache.geronimo.transaction.manager.WrapperNamedXAResource@75288e22;
transaction will roll back. XA error code: 100
javax.transaction.xa.XAException
If the test is to remove the string create an exception, the test will take place without any errors.
throw new Exception("rollback");
issueID:ARIES-1292
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/BundleDelegatingClassLoader.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Improve log output when destroying a BlueprintContainer
In BlueprintExtender.destroyContainer() method there is
LOGGER.info("Destroying BlueprintContainer for bundle {}", bundle.getSymbolicName());
Besides the symbolic name, it should also display version information.
Perhaps best to consider all log output using bundle.getSymbolicName() to include the version.
issueID:ARIES-1293
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
texts:Help custom namespace handlers that would like bean references..
In some cases, custom namespace handlers may have a schema element like:
<xsd:element name="plugin">
<xsd:complexType>
<xsd:sequence>
<xsd:any namespace="##other"/>
</xsd:complexType>
</xsd:element>
where they intend to allow the user to define some sort of bean or other object to be defined by the user. This works well in Spring/Spring-DM as you can define an object there via the normal Spring "bean" element. However, blueprint.xsd does NOT have a top level bean element that can be referenced. Thus, with the above schema, you can only use objects that can be created via custom namespaces.
The proposal would be to add two elements to the blueprint-ext namespace:
<xsd:element name="bean" type="bp:Tbean"/>
<xsd:element name="reference" type="bp:Treference"/>
to fill the gap that Spring-DM provides that we cannot do with Blueprint.
issueID:ARIES-1294
type:Improvement
changed files:
texts:Refactor blueprint NSHandler
The class NSHandler is quite large and especially the decorate method is very long and difficult to understand fast.
I plan to extract the EMFService ref creation into a separate class and extract some other parts into methods.
issueID:ARIES-1295
type:Bug
changed files:
texts:container-context - unit map properties not used to create EntityManager
properties that are defined with jpa:map in jpa:unit section are NOT used to create the EnetityManager.
Properties specified in jpa:map section are passed to JTAEntityManagerHandler to create an EnetityManager "managed" with the call
manager = emf.createEntityManager (props);
where emf is an instance of QuiesceEMFHandler. The EntityManagerFactory implementation first create an EntityManager and then add properties passed. So properties are NOT used for the creation.
I created a test to show that this does not work.
issueID:ARIES-1296
type:Dependency upgrade
changed files:
texts:Upgrade to transaction api 1.2
The transaction API 1.2 is needed by the most current Java EE spec.
Besiides that it contains the @Transactional annotation that would allows to specify JPA without xml.
issueID:ARIES-1297
type:Improvement
changed files:
texts:Remove quiesce support from jpa
I recently asked on the dev list if anyone uses the quiesce API in aries jpa.
Till now no one reported that he needs it. So this issue is to track the removal.
I plan to commit the removal on next monday (2015-02-16) if no one speaks up to keep it.
issueID:ARIES-1298
type:New Feature
changed files:blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedValueMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableValueMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/evaluator/PropertyEvaluator.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ValueMetadataImpl.java
blueprint/blueprint-jexl-evaluator/src/main/java/org/apache/aries/blueprint/jexl/evaluator/JexlPropertyEvaluator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholderExt.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/evaluator/PropertyEvaluatorExt.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ValueRecipe.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholderExt.java
texts:Support typed configurations in property placeholders
It's possible that ConfigurationAdmin puts more complex types to Configuration object. With lists or arrays returned by Configuration aries placeholders are getting crazy trying to convert retrieved value to String and then back to type required by bean.
issueID:ARIES-1299
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:blueprint-maven-plugin: Wrong annotation used to create jpa:context
When the plugin hits the @PersistenceUnit annotation it creates a jpa:context xml element.
Unfortunately this is wrong. @PersistenceUnit should result in jpa:unit while
@PersistenceContext should result in jpa:context.
issueID:ARIES-13
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
texts:EventAdmin tracker not closed at blueprint bundle shutdown.
The BlueprintEventTracker closes the tracker for the BlueprintListener services when shutdown, but leaves the tracker for the EventAdmin service active. This should be cleaned up as well.
issueID:ARIES-130
type:Improvement
changed files:
texts:Name unnamed maven projects in the source tree
While building Aries sources I stumbled upon the following:
[INFO] Unnamed - org.apache.aries.jpa:jpa-container-testbundle:bundle:1.0.0-incubating-SNAPSHOT SUCCESS [0.317s]
[INFO] Unnamed - org.apache.aries.jpa:jpa-container-itest:jar:1.0.0-incubating-SNAPSHOT SUCCESS [12.326s]
They're missing their proper names (with the possibly-false assumption that these default names of the Maven projects are not proper )
issueID:ARIES-1300
type:Improvement
changed files:blueprint/blueprint-web/src/main/java/org/apache/aries/blueprint/web/BlueprintContextListener.java
blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:NoOsgi BlueprintContextImpl should accept custom namespace handler sets

issueID:ARIES-1301
type:Bug
changed files:
texts:Obsolete ticket

issueID:ARIES-1303
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java
versioning/versioning-plugin/src/main/java/org/apache/aries/versioning/mojo/VersionCheckerMojo.java
versioning/versioning-checker/src/main/java/org/apache/aries/versioning/check/BundleCompatibility.java
texts:Return type for public API getRespository() is not exported
The interface class "org.apache.aries.blueprint.services.ExtendedBlueprintContainer" in the blueprint-core component is a public interface that contains a deprecated internal API method:
/**
To be removed as internal API
*/
@Deprecated
Repository getRepository();
Because this is a public API interface this method is part of a public exported package and is visible to applications, however the return type for the method "org.apache.aries.blueprint.di.Repository" is an internal class and is not exported.
This can cause issues with tooling that performs checking that all public methods, parameters and return types form a consistent set.
Ideally this deprecated method should be removed from the public interface (I don't believe it can actually be used by anyone as the return type is not accessible), but as it is used internally it would need moving to some other internal only interface (along with all resulting references).
Alternatively, while the deprecated method remains visible, the return type should be publicly exported too.
issueID:ARIES-1304
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
texts:InstanceNotFoundException when unregistering mbeans

issueID:ARIES-1305
type:New Feature
changed files:esa-ant-task/src/main/java/org/apache/aries/ant/taskdefs/Constants.java
esa-ant-task/src/main/java/org/apache/aries/ant/taskdefs/EsaTask.java
esa-ant-task/src/main/java/org/apache/aries/ant/taskdefs/BundleSelector.java
texts:Ant ESA TaskDef
As a ARIES user I would like to have Ant based task that would generate the Enterprise Service Archive(esa)
issueID:ARIES-1306
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BlueprintRegistry.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Support @Produces annotation in blueprint-maven-plugin
In blueprint we can create beans using a factory-ref and factory-method.
In JEE the same is done using the @Produces anntation on a factory.
So we should support the @Produces annotation in the blueprint-maven-plugin and translate it into the generation of two beans.
The code below should result in the xml below:
@Singleton
public class MyFactoryBean {
@Produces
public MyProduced create()
{ return new MyProduced("My message"); }
}
public class MyProduced {
private String message;
public MyProduced(String message)
{ this.message = message; }
public String getMessage()
{ return message; }
}
<bean id="myFactoryBean" class="org.apache.aries.blueprint.plugin.test.MyFactoryBean" ext:field-injection="true">
</bean>
<bean id="myProduced" class="org.apache.aries.blueprint.plugin.test.MyProduced" ext:field-injection="true" factory-ref="myFactoryBean" factory-method="create">
</bean>
issueID:ARIES-1307
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageRequirement.java
texts:mandatory matching directive on exported packages cause all importers to fail
Export-Package: org.apache.felix.service.command; status=provisional; mandatory:=status
And then another resource that correctly specifies the mandatory matching attribute like the following:
Import-Package: org.apache.felix.service.command; status=provisional
The subsystems implementation will not allow the resource with the import package header resolve to the package capability with the mandatory directive.
This is because ImportPackageRequirement.ImportPackageRequirement(Clause, Resource) constructor does not correctly handle the matching attributes of the clause. The filter created only has the packagename and if specified the package version range.
issueID:ARIES-1308
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Support special blueprint beans like blueprintBundleContext
Blueprint defines some special bean ids that return defined instances
"blueprintBundleContext" -> BundleContext
"blueprintBundle" -> Bundle
"blueprintContainer" -> BlueprintContainer
"blueprintConverter" -> Converter.class
We should support them in the maven-blueprint plugin too.
issueID:ARIES-1309
type:New Feature
changed files:subsystem/subsystem-gogo-command/src/main/java/org/apache/aries/subsystem/gogo/Activator.java
texts:Subsystem Commands
As as ARIES subsystem user I would prefer the ARIES subsystem implementation to provide Subsystem installation commands that would help the user to all standard bundle operations
Install
Start
Stop
Update
Uninstall
On the ESA archives
issueID:ARIES-131
type:Improvement
changed files:
texts:Support JPA2 features
Currently, although compiling against the JPA2 classes, we do not actually support any use of JPA2 functionality, be it a persistence.xml with version "2.0" or any of the methods added to the EntityManager interface.
issueID:ARIES-1310
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionToken.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Use enumeration instead of String for transaction propagation type
Currently we use Strings for the transaction propagation type internally while we have a nice enum for it in the annotation package. So I propose to switch to the enum there as it is more expressive than the String we use now.
issueID:ARIES-1311
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
texts:Support ${env:xxx} variable substition for environment variables

issueID:ARIES-1312
type:Improvement
changed files:
texts:Upgrade blueprint tests to pax exam 4.5.0

issueID:ARIES-1313
type:Improvement
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
texts:Upgrade to geronimo transaction manager 3.1.2

issueID:ARIES-1314
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:Update service reference when service with higher ranking gets registered
Bundle X uses the service defined by API Bundle A.
Bundle A1 implements A and has a service ranking of 1.
Bundle A2 implements A and has a service ranking of 10.
The bundles get started in the following order: A, A1, X, A2
In the current implementation X will use A1 till e.g. A1 gets stopped and started again - according to [~chris@die-schneider.net] in this post: http://karaf.922171.n3.nabble.com/Karaf-3-0-1-does-not-consider-service-ranking-set-by-Blueprint-tp4039991p4040041.html
I propose that X switches from A1 to A2 when A2 gets registered as A2 has a higher service ranking.
issueID:ARIES-1315
type:Improvement
changed files:
texts:Upgrade application to pax exam 4.5.0

issueID:ARIES-1316
type:Bug
changed files:blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/SecurityAnotationParser.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationInterceptor.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationBeanProcessor.java
texts:Problem with intercepting authorizing annotations of a class declared as an interface
Using of interface variable causes empty roles' list error Method call interface EchoService.echo denied. Roles allowed are [], when interface doesn't have method authorizing annotations, while implementing class has.
Code example:
EchoService.java
public interface EchoService {
        //@RolesAllowed("admin")
        public String echo(String message);
} 
SimpleEchoService.java
public class SimpleEchoService implements EchoService {
        @RolesAllowed("admin")
        @Override
        public String echo(String message) {
                return message;
        }
} 
EchoCommand.java
@Command(scope = "kb", name = "echo")
public class EchoCommand extends OsgiCommandSupport {
    private EchoService echoService;
    public EchoService getEchoService() {
        return echoService;
    }
    public void setEchoService(EchoService echoService) {
        this.echoService = echoService;
    }
    @Argument(index = 0, name = "message", required = true, multiValued = false)
    private String message;
    @Override
    protected Object doExecute() throws Exception {
        return echoService.echo(message);
    }
}
issueID:ARIES-1317
type:New Feature
changed files:async/promise-api/src/main/java/org/osgi/util/function/Function.java
async/promise-api/src/main/java/org/apache/aries/async/promise/PromiseImpl.java
async/promise-api/src/main/java/org/osgi/util/promise/Failure.java
async/promise-api/src/main/java/org/osgi/util/promise/Deferred.java
async/promise-api/src/main/java/org/osgi/util/promise/Success.java
async/promise-api/src/main/java/org/osgi/util/promise/Promise.java
async/promise-api/src/main/java/org/osgi/util/promise/FailedPromisesException.java
async/promise-api/src/main/java/org/osgi/util/function/Predicate.java
async/promise-api/src/main/java/org/osgi/util/promise/Promises.java
texts:Sample implementation of Promises API from OSGi R6 Asynchronous Services
The OSGi Asynchronous Services RFC-206 defines a new Promises API that will be released with the R6 framework.
This (~100Kb) patch is a sample implementation of the Promises API, created from scratch using only the API defined in RFC-206.
The aim was to quickly create a conformant implementation, not a "best" implementation, so the code can undoubtedly be improved,
It contains its own unit tests, but these may miss some test-cases from the formal compatibility tests.
–
derek.baum@paremus.com
issueID:ARIES-1318
type:New Feature
changed files:async/async-impl/src/main/java/org/apache/aries/async/impl/TrackingInvocationHandler.java
async/async-impl/src/main/java/org/apache/aries/async/impl/FireAndForgetWork.java
async/async-api/src/main/java/org/osgi/service/async/Async.java
async/async-impl/src/main/java/org/apache/aries/async/impl/MethodCall.java
async/async-impl/src/main/java/org/apache/aries/async/impl/Work.java
async/async-impl/src/main/java/org/apache/aries/async/impl/AsyncServiceFactory.java
async/async-impl/src/main/java/org/apache/aries/async/impl/AsyncService.java
async/async-api/src/main/java/org/osgi/service/async/delegate/AsyncDelegate.java
async/async-impl/src/main/java/org/apache/aries/async/impl/Activator.java
texts:Basic implementation of the Async service
The OSGi Asynchronous Service (RFC 206) provides a useful tool for making asynchronous invocations on OSGi services.
Aries should have an implementation of this service, and I am able to contribute this basic, but functionally complete version.
issueID:ARIES-1319
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/SingleInterceptorCollaborator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/CollaboratorFactory.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Reduce memory allocation in org.apache.aries.blueprint.proxy.Collaborator class
In case of intensive usage there is an memory and CPU overhead in org.apache.aries.blueprint.proxy.Collaborator which can be easy eliminated:
1) Stack has a thread safety overhead, it can be replaced by ArrayDeque, the stack is used in a single thread
2) In case of there are no interceptors - it make sense to not allocate each time a Stack object. The reference can be set to null or a static immutable empty stack value.
issueID:ARIES-1320
type:Bug
changed files:async/async-impl/src/main/java/org/apache/aries/async/impl/AsyncService.java
texts:Async service cannot create mediated objects for "virtual" services
Services such as Remote Services and other proxies are often registered using "host" bundles that cannot load the service interface. These services should be supported by Async.
issueID:ARIES-1321
type:Bug
changed files:spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java
texts:NPE when calling ServiceLoader.load with a variable
When ServiceLoader is called with a variable (aka not a constant):


Then the weaver result in a NPE in TCCLMethodVisitor because lastLDCType is null.
Patch provided.
issueID:ARIES-1322
type:Improvement
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/Namespaces.java
texts:Introduce Namespaces annotation
This applies to a blueprint-parser component.
NamespaceHandler interface does not list the namespaces this handler supports which makes it difficult to automate the registration of handlers in non-OSGI contexts.
Having a Namespace annotation will provide an optional mechanism for NamespaceHandlers to advertise the list of supported namespaces and help discovering the handlers in non OSGI contexts but also introspect them in OSGI if needed.
issueID:ARIES-1323
type:Improvement
changed files:blueprint/blueprint-web/src/main/java/org/apache/aries/blueprint/web/BlueprintContextListener.java
texts:Update blueprint-web ServletContextListener to optionally register NamespaceHandlers
Option 1. Use a 'blueprintNamespaceHandlers' context parameter:
<web-app>
    <context-param>
        <param-name>blueprintLocation</param-name>
        <param-value>WEB-INF/beans.xml</param-value>
    </context-param>
    <context-param>
        <param-name>blueprintNamespaceHandlers</param-name>
        <param-value>
              a.b.C,
              d.e.F
        </param-value>
    </context-param>
    <listener>
        <listener-class>
            org.apache.aries.blueprint.web.BlueprintContextListener
        </listener-class>
    </listener>
    <!-- the rest of web-app -->
</web-app>
Option 2. Check META-INF/blueprint.handlers class resources. The handler resource only lists one or more NamespaceHandler classes, example:
a.b.C
d.e.F
The web.xml will look much simpler:
<web-app>
    <context-param>
        <param-name>blueprintLocation</param-name>
        <param-value>WEB-INF/beans.xml</param-value>
    </context-param>
    <listener>
        <listener-class>
            org.apache.aries.blueprint.web.BlueprintContextListener
        </listener-class>
    </listener>
    <!-- the rest of web-app -->
</web-app>
issueID:ARIES-1324
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Allow to use Blueprint annotations and configuration files simultaneously
Currently it is not possible to mix Blueprint annotations and configuration files in same bundle. In some cases (e.g. using of tx:enable-annotation or autzh:enable) it is necessary to use configuration file, but on the other side the annotations are closer to the code. It would be great to allow to use Blueprint annotations and configuration files simultaneously.
issueID:ARIES-1325
type:Bug
changed files:
texts:Redesign of jpa component
As discussed on the dev list. This is a major redesign of how aries jpa works.
See http://liquid-reality.de/display/liquid/New+design+for+aries+jpa
issueID:ARIES-1326
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Allow to define bean id for service ref
If you want to reference two Services that have the same ClassName for the interface but different packages then currently both get the same bean id that is derived solely from the Classname of the interface.
So we need a way to define the bean id in this case. The Suitable way is to enable @Named and @Qualifier for @OsgiService refs too.
issueID:ARIES-1328
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Application subsystem does not import service capabilities
I have an application Subsystem that has a bundle that looks for a service via a service tracker.
This service and its API is provided by pre-existing bundles (api-bundle, svc-bundle2) in the parent subsystem.
The OSGi enterprise R5 spec states in 134.16.1 (Application Subsystems):
"Any required capabilities that are not satisfied by the application's constituents are automatically shared in (imported) from the parent Subsystem."
However when I install and start the application subsystem (application-subsystem-nosvc), it does not find the services provided in the parent.
I'm attaching the bundles and subsystem to reproduce. The full source code can be found here: https://github.com/coderthoughts/subsystem-examples
issueID:ARIES-1329
type:Bug
changed files:
texts:Cannot install .esa file containing bundle with Provide-Capability (osgi.service)
The attached feature-subsystem-1.0.0-SNAPSHOT.esa bundle contains a bundle that has the following manifest header:
Provide-Capability: osgi.service;objectClass:List<String>="org.coderthoughts.pizza.api.Pizza"
Installing this subsystem gives the following error:
SubsystemException: java.lang.IllegalArgumentException: A Provide-Capability header must have at least one clause
issueID:ARIES-133
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Improve the information provided when services are unavailable
[31/01/10 17:58:14:166 GMT] 00000011 BlueprintCont E org.apache.aries.blueprint.container.BlueprintContainerImpl$1 run Unable to start blueprint container for bundle com.ibm.ws.eba.example.onlineShop.persistence
java.util.concurrent.TimeoutException
at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:270)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:453)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:315)
at java.util.concurrent.FutureTask.run(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:736)
[31/01/10 17:58:14:166 GMT] 00000012 BlueprintCont E org.apache.aries.blueprint.container.BlueprintContainerImpl$1 run Unable to start blueprint container for bundle com.ibm.ws.eba.example.onlineShop.warehouse
java.util.concurrent.TimeoutException
at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:270)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:453)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:315)
at java.util.concurrent.FutureTask.run(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:736)
[31/01/10 17:58:14:166 GMT] 00000013 BlueprintCont E org.apache.aries.blueprint.container.BlueprintContainerImpl$1 run Unable to start blueprint container for bundle com.ibm.ws.eba.example.onlineShop.admin
java.util.concurrent.TimeoutException
at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:270)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:453)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:315)
at java.util.concurrent.FutureTask.run(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:736)
[31/01/10 17:58:14:166 GMT] 00000011 BlueprintCont E org.apache.aries.blueprint.container.BlueprintContainerImpl$1 run Unable to start blueprint container for bundle com.ibm.ws.eba.example.onlineShop.search
java.util.concurrent.TimeoutException
at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:270)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:453)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:315)
at java.util.concurrent.FutureTask.run(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:736)
Currently, in order to diagnose what has gone wrong it is necessary to turn trace on. More information should be provided so that it is not necessary to turn trace on.
issueID:ARIES-1330
type:Improvement
changed files:
texts:Remove codehause repo, add ops4j snapshot repo

issueID:ARIES-1331
type:Improvement
changed files:
texts:Upgrade maven release plugin to 2.5.2

issueID:ARIES-1332
type:Improvement
changed files:
texts:Update to parent 2.0.1

issueID:ARIES-1333
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
texts:Cannot instantiate singleton collections in blueprint
New instances of collections (set, list, map) are always created when referring them by different beans. So, it behaves like the prototype scope would be set on them. The singleton scope should be default, but it doesn't work even if it is set explicitly. A Camel based reproducer is attached. Note that this is not an issue for Spring configuration.
issueID:ARIES-1334
type:Improvement
changed files:blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/SimpleNamespaceHandlerSet.java
texts:NoOsgi SimpleNamespaceHandlerSet should try to resolve relative schema references

issueID:ARIES-1335
type:Improvement
changed files:
texts:Avoid using aries util in eclipselink adapter

issueID:ARIES-1336
type:Test
changed files:
texts:Provide a maven module to easily run the OSGi tck tests
Currently it is very difficult to run the OSGi tck tests for aries jpa.
The tck is not freely available and it needs to be configured specially to run against aries jpa.
I will prepare a maven module and documentation to make it as easy as possible to run the tck tests.
issueID:ARIES-1337
type:Bug
changed files:
texts:Avoid exception when closing an already closed EMF
During the tck tests there is a WARNING sometimes that EMF.close is called but the EMF is already closed.
Adding a test and a check
issueID:ARIES-1338
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
texts:Bundle manifest parser does not allow multiple packages on Import-Package clause
Parsing a bundle manifest fails on Import-Package if a clause contains more than one target (package) for example, this syntax fails:
Import-package: org.apache.p1; org.apache.p2; vendor="Apache"
When the bundle with above manifest appears as content in an esa, an exception is thrown:
java.lang.IllegalArgumentException: Only one package name per requirement allowed
at org.apache.aries.subsystem.core.archive.ImportPackageRequirement.<init>(ImportPackageRequirement.java:39)
at org.apache.aries.subsystem.core.archive.ImportPackageHeader$Clause.toRequirement(ImportPackageHeader.java:159)
at org.apache.aries.subsystem.core.archive.ImportPackageHeader.toRequirements(ImportPackageHeader.java:218)
at org.apache.aries.subsystem.core.internal.BundleResource.computeOsgiWiringPackageRequirements(BundleResource.java:182)
issueID:ARIES-1339
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RepositoryServiceRepository.java
texts:IllegalAccessException when installing a new subsystem
Exception when installing a subsystem:
SubsystemException: java.lang.IllegalAccessException: Class org.apache.aries.subsystem.core.internal.RepositoryServiceRepository can not access a member of class org.apache.felix.bundlerepository.impl.OSGiRepositoryImpl with modifiers "public"
This can be reproduced by following the steps described in http://aries.apache.org/modules/subsystems.html to install the feature1.esa file.
issueID:ARIES-134
type:Bug
changed files:
texts:Apache Aries Transaction is not working on equinox
Apache Aries Transaction bundle is not working on equinox because it imports package "org.osgi.service.cm" with version 1.3 which is not available in equinox.
This is fixed in "Apache Aries Blueprint Bundle" with "org.osgi.service.cm;version="[1.2.0,2.0.0)"" . This should be done also for Transaction bundle.
issueID:ARIES-1340
type:Improvement
changed files:
texts:Upgrade to geronimo transaction manager 3.1.3

issueID:ARIES-1341
type:Improvement
changed files:
texts:JpaBeanProcessor not working in karaf
getAnnotation() return null because annotations are proxied (com.sun.proxy).
only fields are scanned whereas target of persistence annotations is: TYPE, METHOD, FIELD
Setting persistence fields results in:
Can not set javax.persistence.EntityManager field xxx to com.sun.proxy.$Proxy37
issueID:ARIES-1342
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
texts:Aries Proxy Impl fails to proxy a service with covariant type hierarchy in Java 8
I have a simple type hierarchy with a base interface and an extending interface with method overriding (covariant return types). A service implements the derived interface (ColumnDAO - see attached test case). The attached test case illustrates the scenario. In certain situations AriesProxy Impl (more specifically the InterfaceCombiningClassAdapter) fails to properly synthesize the proxy code. In particular it is a combination of the lexical naming of the classes in the hierarchy and Java 8 method access flags that does it. The naming of the classes determines the order in which they are processed since the ProxyClassLoader receives a sorted set of classes when building the proxy. If that order happens to be such that the types are processed in hierarchy order starting with the base type, then all is cool. If not then trouble arises.
Why ? Well if a more derived type is processed then it instruments base methods which are marked (in Java 8) with Synthetic and Bridge access flags. In this case the visitMethod() in AbstractWovenProxyAdapter does not generate any code but records the fact that this method has been visited. When it subsequently visits the base type, the methods are skipped since they are considered already visited.
In the test case running javap -verbose ColumnDAO.class yields the following (note the base type is named ZanyDAO to force the lexical ordering and thus the error) :
public abstract org.deklanowski.aries.dao.ColumnBatch<R, C, V> prepareBatch();
    flags: ACC_PUBLIC, ACC_ABSTRACT
    Signature: #9                           // ()Lorg/deklanowski/aries/dao/ColumnBatch<TR;TC;TV;>;

  public abstract org.deklanowski.aries.dao.ColumnQuery<R, C, V> createQuery();
    flags: ACC_PUBLIC, ACC_ABSTRACT
    Signature: #12                          // ()Lorg/deklanowski/aries/dao/ColumnQuery<TR;TC;TV;>;

  public org.deklanowski.aries.dao.Batch prepareBatch();
    flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokeinterface #1,  1            // InterfaceMethod prepareBatch:()Lorg/deklanowski/aries/dao/ColumnBatch;
         6: areturn
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       7     0  this   Lorg/deklanowski/aries/dao/ColumnDAO;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lorg/deklanowski/aries/dao/ColumnDAO<TR;TC;TV;>;

  public org.deklanowski.aries.dao.Query createQuery();
    flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokeinterface #2,  1            // InterfaceMethod createQuery:()Lorg/deklanowski/aries/dao/ColumnQuery;
         6: areturn
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       7     0  this   Lorg/deklanowski/aries/dao/ColumnDAO;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lorg/deklanowski/aries/dao/ColumnDAO<TR;TC;TV;>;
The logic in the aforementioned AbstractWovenProxyAdapter.visitMethod() on line 341 is as follows:
    if ((access & (ACC_STATIC | ACC_PRIVATE | ACC_SYNTHETIC 
        | ACC_NATIVE | ACC_BRIDGE)) == 0 && !!!name.equals("<init>") && 
        !!!name.equals("<clinit>")) {
<snip>
The if statement evaluates to false and no code is generated though the methods are recorded as having been visited.
issueID:ARIES-1343
type:Improvement
changed files:
texts:Also scan parent classes for jpa annotations

issueID:ARIES-1344
type:Improvement
changed files:
texts:Support multiple EntityManager injections per class
Currently only the first @PersistenceContext or @PersistenceUnit annotation is injected.
A class may contain more than one inject though.
issueID:ARIES-1345
type:Improvement
changed files:
texts:Support jpa annotations on method and class
@PersistenceContext and @PersistenceUnit annotations can also be used on method and class level.
On method level the annotation could be put on a setter.
On class level I am not sure how we would interpret it. I have not found any good real life example for this so I propose to not support it.
issueID:ARIES-1346
type:Improvement
changed files:
texts:EntityManager should be reused for series of coordinated calls
Consider scenario:
blueprint service A with JPA
   A {

      C find() {
         return em.find();
      }

      void delete(C c) {
         em.remove(c)
      }
  }
blueprint bean B with A injected. B call methods of A within transaction
B {

   @Transaction
   B1() {
      C = A.find(); // Entity returned by find (em.find())

      A.delete(C); // Entity is not attached!!!!!!
   }

}
Reason:
Method of bean A are proxied in following way:
emsupplier.precall()
emsupplier.get()
find(); //or delete()
emsupplier.postcall()
Each method call gets its own EM so find has one EM, delete has another one. Entity C is managed within first EM but not the second.
EM should be shared in transaction within single Thread, not by single method call.
Please also note that:
transaction could be JTA and use different units in single transaction
My scenario:
bundle A1,A2,A3 with persistence JPA exposing entities through services (domain module), Each bundle (A1, A2, A3) uses different schema in database (different unit name)
bundle B1,B2,B3 with rest services using entity services in a transaction
(Separation of domain logic from business logic). Each of B1,B2,B3 can use any method of A1,A2,A3
issueID:ARIES-1347
type:Improvement
changed files:
texts:Working example of @Transaction annotation
Attaching working example (code) of transaction annotation.
Places for improvement:
inline beans are not scanned (beanMetaData is null in that case) - ones without id
<service ...>
<bean .../>
</service>
issueID:ARIES-1348
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
texts:subsystems that are dependencies are not auto started
Auto start does not work in the following scenario:
bundle a in Feature a (Fa) imports package x
composite b (Cb) exports package x from content bundle b
1) install Cb, install Fa, start Fa
start fails with framework resolution error on bundle importing x
but
2) install Cb, start Cb, install Fa, start Fa
the start works.
In case 1) Cb should have it active count incremented and be started automatically per OSGI.cmpn-6.0.0 134.12.2 Active Use Count.
issueID:ARIES-1349
type:Bug
changed files:
texts:EmfProxy.close should close tracker instead of EMF
EmfProxy.close() is called when the blueprint bean is destroyed.
Currently this is forwarded to the EntitymanagerFactory. The EntityManagerFactory should only be closed by jpa.container bundle though.
On the other hand the tracker is never closed.
So we should catch the close call and close only the tracker.
Additionally there are two catch clauses that should throw an exception but only create it.
issueID:ARIES-135
type:Bug
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
texts:webbundle url handler does not handle Import-Package parameters with version range

issueID:ARIES-1350
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Namespace handler can't be found even if it's registered correctly
org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.NamespaceHandlerSetImpl class deals with namespace handlers for single BP container.
During creation, it takes all already registered handlers from global NS registry.
After creation it is added to sets field in the registry to get notified about newly registered NS handlers.
But when NS handler is registered between the above two steps, BP stays in GRACE_PERIOD state infinitely, because this "case" in BP container impl:
case WaitForNamespaceHandlers:
{
    List<String> missing = new ArrayList<String>();
    List<URI> missingURIs = new ArrayList<URI>();
    for (URI ns : namespaces) {
        if (handlerSet.getNamespaceHandler(ns) == null) {
won't ever get namespace handler, because it looks in the handler set obtained when NamespaceHandlerRegistryImpl.NamespaceHandlerSetImpl was constructed.
This:
10:51 $ git diff
diff --git a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index 7688924..d53ea5c 100644
--- a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -535,6 +535,9 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
         }
 
         public NamespaceHandler getNamespaceHandler(URI namespace) {
+            if (!handlers.containsKey(namespace)) {
+                findCompatibleNamespaceHandler(namespace);
+            }
             return handlers.get(namespace);
         }
fixes the problem
issueID:ARIES-1351
type:Bug
changed files:
texts:TCK tests not working

issueID:ARIES-1352
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/content/ConfigAdminContentHandler.java
texts:Do not overwrite existing configuration when installing a subsystem
I have a subsystem which embeds a configuration file (using "embedded-resource" and type="osgi.config.properties" in the manifest file).
When this subsystem is started, the configuration is applied, as expected.
However, if a configuration file with the same PID is created, while the subsystem is still not started, the configuration is overwritten by the subsystem resource on start.
I think that ConfigAdminContentHandler should check if the configuration entries exist before updating it from the subsystem resource.
issueID:ARIES-1353
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:NullpointerException when trying to log an exception
During installation of a feature in Karaf, I get the following exception in blueprint core 1.4.3:
Caused by: java.lang.NullPointerException
at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:300)[15:org.apache.aries.blueprint.core:1.4.3]
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[15:org.apache.aries.blueprint.core:1.4.3]
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[15:org.apache.aries.blueprint.core:1.4.3]
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[15:org.apache.aries.blueprint.core:1.4.3]
at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_67]
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[15:org.apache.aries.blueprint.core:1.4.3]
at org.apache.aries.blueprint.di.RefRecipe.internalCreate(RefRecipe.java:62)[15:org.apache.aries.blueprint.core:1.4.3]
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:106)[15:org.apache.aries.blueprint.core:1.4.3]
at org.apache.aries.blueprint.container.ServiceRecipe.createService(ServiceRecipe.java:284)[15:org.apache.aries.blueprint.core:1.4.3]
... 38 more
Looks like when logging the exception in the exception handler getType() returns null :
                 try {
                     Map.Entry<Method, List<Object>> match = matches.entrySet().iterator().next();
                     instance = invoke(match.getKey(), factoryObj, match.getValue().toArray());
                 } catch (Throwable e) {
/* line 300! */                     throw new ComponentDefinitionException("Error when instantiating bean " + getName() + " of class " + getType().getName(), getRealCause(e));
                 }
So it is not clear what the real reason for the problem is ...
issueID:ARIES-1354
type:Bug
changed files:
texts:Subsystem ContentHandler instances are not called in a child subsystem
However, if the same subsystem is embedded in a bigger subsystem, the resource is not handled, while the subsystem is successfully installed and started.
No errors found in logs (DEBUG level).
issueID:ARIES-1356
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:getInstance method on the core Activator shows up on jvisualvm sampling during performance analysis
The 'getInstance' method on the core Activator shows up on jvisualvm sampling during performance analysis.
While doing performance analyses because of poor subsystem install performance while running 200 subsystems we encountered the 'getInstance' method in jvisualvm statistics. It is called so much that it actually cost 4 seconds on the total process of installing two subsystems when 200 subsystems have been deployed already.
While using the patch below we didn't notice it anymore in jvisualvm sampling.
issueID:ARIES-1357
type:Improvement
changed files:
texts:BasicSubsystem can be used by the subsystem install process a factor 6 times faster
The problem was poor performance while installing a subsystem on a container with 200+ subsystems installed.
While doing performance analyses on the subsystem install process we noticed the BasicSubsystem is working a lot with its manifest instead of pre-calculating data that is used a lot.
While using the pre-patch version of BasicSubsystem a subsystem install (while having 200+ running subsystems) could take more than a minute. While using the patched version where we pre-calculate highly used data when a new subsystem manifest or deployment manifest is set we could bring it down to 10 seconds. We only pre-calculated the data that was highly used.
issueID:ARIES-1358
type:Improvement
changed files:
texts:The PreferredProviderRepository never sets the initialized boolean to true causing it the initialize on every call to the 'findProviders' method
The below is alread solved but it can work unmeasurable faster by checking the field before going into synchronized.
While doing performance analysis we noticed the PreferredProviderRepository is never initialized causing it to re-initalize on every call to the findProviders method. This slows down the install process.
issueID:ARIES-1359
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SystemRepository.java
texts:Performance improvement on the findProviders method in the SystemRepository class
Two improvements in the patch
1) Application subsystems are not processed by the method because application subsystems do not share capabilities. (I think it works like that but maybe I'm wrongly interpreting the specification)
2) All processed constituents are stored in a set and not processed again when encountered in a different subsystem when they are being shared across features. When using 60 features a shared bundle used to be processed 60 times.
issueID:ARIES-136
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:BlueprintExtender registers ParserService for every bundle checked

issueID:ARIES-1361
type:Bug
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:EntityManager does not participatte in transaction if transactional interceptor is called after jpa interceptor
Solution: Set higher rank for transactional interceptor
issueID:ARIES-1362
type:New Feature
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionToken.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:Support coordinations triggered by transaction markers
The new JPA component uses coordinations to manage the lifecycle of the JPA EntityManager.
The blueprint transaction support should create a coordination for all transaction markers. This will allow the JPA entitymanager to have a controlled lifecycle that is larger than the DAO method.
So for example a service method that calls several DAO methods can be marked with @Transactional. It will then create a coordination for the method and close the EntityManager only after the whole service method.
If the service method does not need a transaction it can be annotated with TxType.SUPPORTS. In this case only the coordination will be started. So the EM lifecycle can be declared using an annotation without the performance impact of a transaction.
issueID:ARIES-1364
type:Bug
changed files:
texts:transaction.manager causes cascading refreshs in karaf 4
transaction.manager embeds the transaction api. So all bundles that use the transactions api are wired to it.
Unfortunately it also has optional imports like for the spring transactions. So if such an optional import is loaded then all bundles using transactions are also reloaded.
The simple solution is to not embed the transaction api and instead install it spearately.
issueID:ARIES-1365
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/Activator.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/StateConfig.java
jmx/jmx-core-whiteboard/src/main/java/org/apache/aries/jmx/core/whiteboard/Activator.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
texts:ServiceState attribute notifications slow down startup/shutdown time considerably
Around 20% of the startup time of our Felix OSGI container is spent creating attribute notifications for changed services in ServiceState#getAttributeChangeNotification. This is so slow because for each notification it calls bundleContext.getAllServiceReferences to get all service ids.
Here a few suggestions how this could be improved:
The ServiceState could maintain its own list of service ids which is updated according to the service events
The ServiceState could implement the NotificationEmitter directly and be aware when there are any listeners (in our case, there are mostly none).
Make it possible to disable the attribute change notifications with configuration property.
issueID:ARIES-1366
type:Bug
changed files:
texts:subsystem bundle (uber bundle) exports wrong package versions
uber bundle for R6 exports as:
org.apache.aries.subsystem;version="1.1"
should export as 1.2.0 as the API bundle does.
issueID:ARIES-1368
type:Bug
changed files:
texts:Fragment resources receive the osgi.identity capability type of osgi.bundle but should receive osgi.fragment. Also, osgi.wiring.host capabilities and requirements are not computed for bundle or fragment resources.
The computeOsgiIdentityCapability method of the BundleResource is not able to compute capabilities for fragments (only for bundles).
This is caused by the fact that the BundleResource is hardcoded to always assume a type of osgi.bundle without inspecting the manifest.
Link to mailinglist thread: http://mail-archives.apache.org/mod_mbox/aries-user/201508.mbox/%3CCAL5nZgTOVhdAPYYFOmuV%3DPquAz1a4n_D1Rd3RBrTfu2znCSjKA%40mail.gmail.com%3E
issueID:ARIES-1369
type:Bug
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:Transaction is not rolled back if coordination has failed
If an exception happens in the user code during the transaction then it is possible that this causes the coordination associated to the transaction to fail.
In TxInterceptorImpl.postCallWithException we end the coordination before rolling back the transaction. Unfortunately the end method will throw a CoordinationException if the coordination failed. So we exit the interceptor code and never roll back.
issueID:ARIES-137
type:Bug
changed files:
texts:Lifecycle issues with PersistenceBundleManager
EntityManagerFactory only gets registered for a unit if a matching PersistenceProvider service
is bound before the persistence bundle is added to the tracker.
The PersistenceBundleManager will only attempt to setup an EntityManagerFactoryManager
for the PersistenceProvider services available at the point when a persistence bundle
is first detected and subsequently only tracks the persistence bundles that get matched with a Provider.
Any Persistence bundle added to the tracker before a (suitable) PersistenceProvider is
available will never get matched with a provider.
The PersistenceBundleManager#addingProvider method should check for persistence bundles
that are not matched with a provider and attempt to resolve.
One possible solution would be that the addingBundle and setUpManager methods use a
null object style pattern (or similar) for the EntityManagerFactoryManager so that
detected persistence bundles without a matching provider are still tracked.
When a provider service is then bound to the PersistenceBundleManager via addingProvider,
iterate through all tracked persistence bundles and attempt to match those that do
not have a valid EntityManagerFactoryManager associated.
(Note: MultiBundleTracker does not expose the bundles tracked, but by exposing getBundles()
for above and also using getObject() where the EntityManagerFactoryManager is being returned
there probably wouldn't be any need for bundleToManagerMap and associated synchronization)
Also I think an ExecutorService should be used for the setUpManager calls rather
than this work being done on a framework event thread.
(I don't have time right now to look at this properly, so somebody might want to have a
look/take this in the meantime)
issueID:ARIES-1370
type:Documentation
changed files:
texts:JPA main README.md file not up-to-date
File README.md in org.apache.aries.jpa.main-2.0.0/examples is outdated.
To make things work (using ubuntu lts, karaf 3.0.4) had to perform (simple) changes in features and bundle version as described in patch:
"
— README.md 2015-06-16 14:48:08.000000000 +0200
+++ /home/john/LABS/ARIES-Samples/org.apache.aries.jpa.main-2.0.0/examples/README.md 2015-08-08 19:14:26.015376238 +0200
@@ -3,7 +3,7 @@
copy DataSource config
cat https://svn.apache.org/repos/asf/aries/trunk/jpa/examples/org.ops4j.datasource-tasklist.cfg | tac -f etc/org.ops4j.datasource-tasklist.cfg
-feature:repo-add mvn:org.ops4j.pax.jdbc/pax-jdbc-features/0.6.0-SNAPSHOT/xml/features
+feature:repo-add mvn:org.ops4j.pax.jdbc/pax-jdbc-features/0.6.0/xml/features
feature:install scr transaction pax-jdbc-config pax-jdbc-h2 pax-jdbc-pool-dbcp2 http-whiteboard
install -s mvn:org.hibernate.javax.persistence/hibernate-jpa-2.1-api/1.0.0.Final
@@ -35,18 +35,18 @@
Our JPA service implementation
-install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.api/2.0.0-SNAPSHOT
-install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.container/2.0.0-SNAPSHOT
-install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.support/2.0.0-SNAPSHOT
+install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.api/2.0.0
+install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.container/2.0.0
+install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.support/2.0.0
Closure based example. (Make sure to start karaf with JDK 8)
-install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.model/2.0.0-SNAPSHOT
-install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.ds/2.0.0-SNAPSHOT
+install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.model/2.0.0
+install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.ds/2.0.0
Blueprint based example
-install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.blueprint/2.0.0-SNAPSHOT
-install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.model/2.0.0-SNAPSHOT
-install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.blueprint/2.0.0-SNAPSHOT
+install -s mvn:org.apache.aries.jpa/org.apache.aries.jpa.blueprint/2.0.0
+install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.model/2.0.0
+install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.blueprint/2.0.0
After installing the examples you can check for the services.
"
issueID:ARIES-1371
type:Task
changed files:
texts:Move subsystems to Aries Util 1.1.1
A request has been received to update the next subsystems release to point to Aries Util 1.1.1.
issueID:ARIES-1372
type:Bug
changed files:
texts:Avoid NPE in case of exception in preCall
Exceptions like this can occur in postCallWithException if an exception happened in preCall and no token was created.
java.lang.NullPointerException
at org.apache.aries.jpa.blueprint.impl.JpaInterceptor.postCallWithException(JpaInterceptor.java:68)[70:org.apache.aries.jpa.blueprint:2.1.0]
at org.apache.aries.blueprint.proxy.Collaborator.postInvokeExceptionalReturn(Collaborator.java:136)[12:org.apache.aries.blueprint.core:1.4.3]
at org.apache.aries.blueprint.proxy.Collaborator.preInvoke(Collaborator.java:78)[12:org.apache.aries.blueprint.core:1.4.3]
issueID:ARIES-1373
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
texts:Add switch to generator for the annotation based style of jpa 2.1.0

issueID:ARIES-1374
type:Bug
changed files:
texts:EmSupplier is not unpublished when EntityManagerFactory is unpublished

issueID:ARIES-1375
type:Improvement
changed files:
texts:Refactor to release by subproject

issueID:ARIES-1377
type:Task
changed files:
texts:Subsystems 2.0.4 Release
This will track the 2.0.4 release of the following subsystems modules.
subsystem-core
previous release 2.0.2
svn diff -r 1688374
http://svn.apache.org/viewvc/aries/tags/org.apache.aries.subsystem.core-2.0.2/
ARIES-1348: subsystems that are dependencies are not auto started
ARIES-1368: Fragment resources receive the osgi.identity capability type of osgi.bundle but should receive osgi.fragment. Also, osgi.wiring.host capabilities and requirements are not computed for bundle or fragment resources.
ARIES-1371: Move subsystems to Aries Util 1.1.1
ARIES-1381: java.lang.ClassCastException: org.apache.aries.subsystem.core.archive.GenericDirective cannot be cast to org.apache.aries.subsystem.core.archive.VersionRangeAttribute
ARIES-1352: Do not overwrite existing configuration when installing a subsystem
ARIES-1388: Compute requirement filters only once.
ARIES-1356: getInstance method on the core Activator shows up on jvisualvm sampling during performance analysis
ARIES-1359: Performance improvement on the findProviders method in the SystemRepository class
ARIES-1389: Compute service requirements and capabilities once in BundleRevisionResource.
ARIES-1390: BasicCapability should take advantage of the effective immutability of capabilities.
ARIES-1392: Provide a more efficient implementation of a system repository.
ARIES-1394: Provide more efficient implementations of the local and content repositories.
ARIES-1396: Use capability set when calculating subsystem dependencies.
ARIES-1397: Use capability set with preferred provider repository.
ARIES-1399: Trunk fails OSGi R6 CT
ARIES-1387: Make equals and hashCode comparisons within the header, clause, and parameter hierarchies based on equivalency rather than string equals.
ARIES-1084: Subsystem : Failure on restart after framework crash
ARIES-1408: The RequireCapabilityHeader currently only supports requirements defined by the Aries implementation
ARIES-1404: Restart of the osgi container does not restart subsystem core because of an error related to missing resource org.apache.aries.subsystem.resource.synthesized
ARIES-1416: BundleException "bundle is already installed" when the Preferred-Provider subsystem header points to a bundle.
ARIES-1357: BasicSubsystem can be used by the subsystem install process a factor 6 times faster
ARIES-1419: Provide-Capability header parser does not support typed attributes.
ARIES-1235: Installation of a Subsystem containing Subsystems extremely slow
ARIES-1328: Application subsystem does not import service capabilities
ARIES-1421: SimpleFilter attribute extraction can not handle version ranges
ARIES-1419: Provide-Capability header parser does not support typed attributes.
ARIES-1423: IllegalArgumentException when GenericHeader has no clauses
subsystem-api
previous release 2.0.2
svn diff -r 1688370
http://svn.apache.org/viewvc/aries/tags/org.apache.aries.subsystem.api-2.0.2/
ARIES-1371: Move subsystems to Aries Util 1.1.1
subsystem-bundle
previous release 2.0.2
svn diff -r 1688378
http://svn.apache.org/viewvc/aries/tags/org.apache.aries.subsystem-2.0.2/
ARIES-1371: Move subsystems to Aries Util 1.1.1
subsystem-obr
previous release 1.0.1
svn diff -r 1668058
http://svn.apache.org/repos/asf/aries/tags/org.apache.aries.subsystem.obr-1.0.1/
ARIES-1410: The FelixResourceAdapter does not return all capabilities when given a null namespace.
issueID:ARIES-1379
type:Bug
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/RecoverableConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/IntrospectionSupport.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/ConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/Activator.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/XaConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/XaPooledConnectionFactory.java
texts:Cleanup Aries transaction JMS
Make the module less dependent on Aries tm by not using AriesTransactionManager.
Cleanup warnings.
issueID:ARIES-1380
type:Improvement
changed files:
texts:Remove remaining NLS usage
Most of the exceptions and log messages do not use NLS support. Remove the rest to unify the handling.
issueID:ARIES-1381
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
texts:java.lang.ClassCastException: org.apache.aries.subsystem.core.archive.GenericDirective cannot be cast to org.apache.aries.subsystem.core.archive.VersionRangeAttribute
Example:
Import-Package: org.objectweb.asm;version:="5.0.4,5.0.4]",org.objectweb.asm.signature;version:="[5.0.4,5.0.4]",org.objectweb.asm.tree;version:="[5.0.4,5.0.4]"
This Import-Package header will cause a "GenericDirective cannot be cast to VersionRangeAttribute" error thrown by the ImportPackageHeader class.
This is caused by the fact that the custom version directive is interpreted as the version attribute by the getVersionRangeAttribute method.
What should have happened is:
1. The subsystem install should have succeeded.
2. The version should have been treated as a custom directive.
3. The actual package import versions would assume the default of [0.0.0,infinity) since a version attribute was not specified.
Link to mailinglist discussion: http://mail-archives.apache.org/mod_mbox/aries-user/201508.mbox/%3CCAL5nZgTwUpc05MY4mWNL3D8-2g13u2it6kYd6JG_ueZNWKJOjA%40mail.gmail.com%3E
Caused by: java.lang.ClassCastException: org.apache.aries.subsystem.core.archive.GenericDirective cannot be cast to org.apache.aries.subsystem.core.archive.VersionRangeAttribute
at org.apache.aries.subsystem.core.archive.ImportPackageHeader$Clause.getVersionRangeAttribute(ImportPackageHeader.java:155)
at org.apache.aries.subsystem.core.archive.ImportPackageRequirement.<init>(ImportPackageRequirement.java:42)
at org.apache.aries.subsystem.core.archive.ImportPackageHeader$Clause.toRequirement(ImportPackageHeader.java:159)
at org.apache.aries.subsystem.core.archive.ImportPackageHeader.toRequirements(ImportPackageHeader.java:218)
at org.apache.aries.subsystem.core.internal.BundleResource.computeOsgiWiringPackageRequirements(BundleResource.java:210)
at org.apache.aries.subsystem.core.internal.BundleResource.computeRequirementsOtherThanService(BundleResource.java:240)
at org.apache.aries.subsystem.core.internal.BundleResource.computeRequirementsAndCapabilities(BundleResource.java:216)
at org.apache.aries.subsystem.core.internal.BundleResource.<init>(BundleResource.java:74)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addResource(RawSubsystemResource.java:435)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeResources(RawSubsystemResource.java:420)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:130)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:90)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:54)
... 55 more
issueID:ARIES-1382
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/AnnotationProcessor.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/ComponentTxData.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Only allow jta annotations to configure transactions
In aries.transaction.blueprint 1.x there are 4 different ways to configure transactions:
xml on bean level using wildcards
xml on bundle level using wildcards
aries @Transaction annoations
jta 1.2 standard @Transactional annotations
The code needs to work for all of these options.
So for the new major version I plan to only allow the jta 1.2 style. This will make the code as well as the documentation considerably smaller.
issueID:ARIES-1383
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartResourceComparator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemSymbolicNameHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResolveContext.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallDependencies.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DirectiveFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemTypeHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AriesProvisionDependenciesDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/LocalRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/WovenClassListener.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionUpdater.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/LockingStrategy.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java
texts:Provide option to disable the provisioning of dependencies at install time.
PROBLEM
-------------
The Subsystems specification states that all dependencies of a subsystem must have been installed in order to attain the INSTALLED state. If required dependencies are not found, the installation must fail.
This functionality was described in order to achieve fail-fast functionality. If an environment cannot support the dependencies of a subsystem, it is rejected right away.
However, there are deployment situations where it is valuable to delay the installation of dependencies. For example, you may wish to independently and simultaneously install a suite of subsystems whose contents have interleaving dependencies. This is currently not possible because the local repository of one subsystem is not available to others. The resources will not be available to others until they become part of the System Repository (assuming a compatible sharing policy) once the INSTALLED state is acquired. In the meantime, the other subsystems fail installation.
There are three potential workarounds to this issue, none of which may be acceptable to a particular Subsystems consumer.
(1) Provide all content as part of a remote repository. Note that this would require the Subsystem-Content header to be computed by the subsystem provider and not by the implementation.
(2) Package all subsystems into a single ESA and make use of parent-child relationships.
(3) Manage the install order manually. Note that this would not handle the case of circular dependencies.
A solution that will allow for the independent and simultaneous installation of multiple subsystems with interleaving content dependencies, thus giving a deployer more flexibility, is desirable.
PROPOSED SOLUTION
-----------------------------
A custom directive is introduced: apache-aries-provision-dependencies. The possible values are "install" and "resolve", which indicate the time at which dependency provisioning should occur. The default value is "install" which results in the current behavior. This directive may be specified as part of the Subsystem-Type header. A value of "resolve" indicates that dependencies should not be provisioned at installation time. Rather, this step will occur when the subsystem is resolved which typically happens as part of the start process.
A subsystem with apache-aries-provision-dependencies:=resolve will remain in the INSTALLING state until it is started. This is an indication to administration programs monitoring subsystems via the service registry that the subsystem has not yet had its dependencies provisioned. When the subsystem is started, the transition from INSTALLING to INSTALLED will then occur as it does today. Assuming the provisioning of dependencies succeeds, the subsystem will then immediately transition into the RESOLVING state and proceed as normal.
State transitions when apache-aries-provision-dependencies:=start:
install() : <void> -> INSTALLING
<void> -> INSTALLING -> INSTALL_FAILED -> UNINSTALLING -> UNINSTALLED (if installation fails for some reason other than dependency provisioning)
start() : INSTALLING -> INSTALLED -> RESOLVING -> RESOLVED -> STARTING -> ACTIVE
INSTALLING -> INSTALLING (if provisioning of dependencies fails)
INSTALLING -> INSTALLED -> RESOLVING -> INSTALLED (if runtime resolution fails)
INSTALLING -> INSTALLED -> RESOLVING -> RESOLVED -> STARTING -> RESOLVED (if starting fails)
Child scoped subsystems inherit the apache-aries-provision-dependencies value of the first scoped ancestor unless explicitly overridden. Unscoped subsystems always inherit the apache-aries-provision-dependencies value of the first scoped ancestor and may not override the value. The root subsystem always has a value of apache-aries-provision-dependencies:=install.
ALTERNATIVE SOLUTIONS
---------------------------------
(1) Make the local repositories of installing subsystems available to other installing subsystems. The specification does not allow local repositories to be registered as a Repository service, although it does not explicitly address the possibility of a particular implementation sharing them internally. Nevertheless, the intent of the spec seems clear in that it should not be assumed that a subsystem provider desires their content to be shared with others.
POTENTIAL ISSUES
-------------------------
(1) The proposed solution will break the contract of the install methods specified on the Subsystem and AriesSubsystem interfaces, which require that either the returned subsystem is in the INSTALLED state or that the installation fails with an exception. However, it is assumed that the explicit declaration of the apache-aries-provision-dependencies directive with a value of "resolve" grants the implementation permission to do so. An alternative would be to return the Subsystem in the INSTALLED state even though none of the dependencies have been installed. However, this would also violate the specification and may confuse third party applications monitoring subsystem services via the registry.
(2) A subsystem may have more than one parent but at most one scoped parent. This means that additional parents will always be features (or other unscoped subsystems). The question is how should apache-aries-provision-dependencies inheritance work when there are multiple parents with conflicting values. A simplifying assumption would be that features may not override the value of the scoped parent. This implies that features should fail installation if they contain a value of apache-aries-provision-dependencies that conflicts with the scoped subsystem within the same region.
TEST CASES
------------------
(1) A set of subsystems with interleaving content dependencies are able to be independently, simultaneously, and successfully installed and started.
(2) Subsystem with apache-aries-provision-dependencies:=resolve is in the INSTALLING state after a successful installation.
(3) Subsystem with apache-aries-provision-dependencies:=resolve is available as a service after a successful installation.
(4) Subsystem with apache-aries-provision-dependencies:=resolve does not have its dependencies installed after a successful installation.
(5) Subsystem with apache-aries-provision-dependencies:=resolve undergoes the following state transitions when starting: INSTALLING -> INSTALLED -> RESOLVING -> RESOLVED -> STARTING -> ACTIVE.
(6) Subsystem with apach-earies-provision-dependencies:=resolve has its dependencies installed after a successful start.
(7) Subsystem with apache-aries-provision-dependencies:=resolve is in the INSTALL_FAILED state after an unsuccessful installation.
(8) Subsystem with apache-aries-provision-dependencies:=resolve is not available as a service after an unsuccessful installation.
(9) Subsystem with apache-aries-provision-dependencies:=resolve is in the INSTALLING state when dependencies cannot be provisioned after invoking the start method.
(10) Subsystem fails installation if the apache-aries-provision-dependencies directive has a value other than "install" or "resolve".
(11) Subsystem with apache-aries-provision-dependencies:=resolve undergoes the following state transitions when starting fails due to a runtime resolution failure: INSTALLING -> INSTALLED -> RESOLVING -> INSTALLED.
(12) Subsystem with apache-aries-provision-dependencies:=resolve undergoes the following state transitions when starting fails due to a start failure: INSTALLING -> INSTALLED -> RESOLVING -> RESOLVED -> STARTING -> RESOLVED.
(13) The root subsystem has apache-aries-provision-dependencies:=install.
(14) Subsystem with explicit apache-aries-provision-dependencies:=install works as before.
(15) Unscoped subsystem with a value of apache-aries-provision-dependencies that is different than the scoped parent fails installation.
(16) Unscoped subsystem with a value of apache-aries-provision-dependencies that is the same as the scoped parent installs successfully.
(17) Scoped subsystem with a value of apache-aries-provision-dependencies that is the same as the scoped parent behaves accordingly.
(18) Scoped subsystem with a value of apache-aries-provision-dependencies that overrides the scoped parent behaves accordingly.
(19) Scoped subsystem with only features as parents is able to override the value of apache-aries-provision-dependencies.
(20) Install a scoped subsystem, S1, with apache-aries-provision-dependencies:=resolve. Install two features, F1 and F2, independently as children of S1. F1 has bundle B1 as content. F2 has bundle B2 as content. B2 has B1 as a dependency. B1 should be a constituent of F1 but not of the root subsystem.
(21) Install a scoped subsystem, S1, with apache-aries-provision-dependencies:=resolve. Install two features, F1 and F2, independently as children of S1. F1 has bundle B1 and B2 as content. F2 has bundle B2 and B3 as content. B2 is shared content. B1 has a dependency on bundle B4, B2 has a dependency on bundle B5. B3 has a dependency on bundle B6. Start F1. Dependency bundles B4 and B5 should be provisioned but not B6.
issueID:ARIES-1385
type:Bug
changed files:
texts:Create karaf feature for aries jpa

issueID:ARIES-1386
type:Bug
changed files:
texts:Use bnd file to describe OSGi config and use bnd baselining

issueID:ARIES-1387
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ResolutionDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractClause.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AriesSubsystemParentsHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/FragmentHostHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractParameter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionRangeAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedVersionAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Patterns.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ReferenceDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/PreferredProviderHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AriesSubsystemLocationHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/capabilityset/SimpleFilter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ExportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/OsgiExecutionEnvironmentRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvideCapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractClauseBasedHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericClause.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/HeaderFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemTypeHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/FilterDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AttributeFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionResourceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemExportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DynamicImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java
texts:Make equals and hashCode comparisons within the header, clause, and parameter hierarchies based on equivalency rather than string equals.
Currently the org.apache.aries.subsystem.core.archive.SubsystemContentHeader class (line 210) and other headers classes uses a HashSet in order to hold its clauses.
HashSet doesn't ensure the order of its items and then its impossible to have a reproducible build of any manifest file. As the SubsystemManifest class doesn't provide a equals() method, we can't compare a generated manifest file with any template in a test, it will fail.
The propose it to change the used HashSet for the LinkedHashSet class.
issueID:ARIES-1388
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
texts:Compute requirement filters only once.
ResourceHelper.matches(Requirement, Capability) is an often used method during resolution. Currently, it recomputes the requirement filter with each call.
The measurements used the same test scenario being developed as part of ARIES-1357. The time it took to install 50 features was measured. Each feature consists of 10 bundles plus one application. All features share the same 10 bundles. Each bundle exports 5 unique packages. Each application consists of 10 unique bundles. The bundles import packages offered by the containing feature.
The baseline average time for installing all 50 features was 67.9 seconds.
AbstractRequirement will now lazily compute the requirement filter when asked for the first time. Subsequent calls will return the already computed value.
ResourceHelper now asks whether or not the Requirement is an instance of AbstractRequirement. If so, it asks for the filter directly. If not, the filter is computed as before.
After these modifications, the average time for installing all 50 features was 46.6 seconds, a 31.3% improvement.
issueID:ARIES-1389
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java
texts:Compute service requirements and capabilities once in BundleRevisionResource.
BundleRevisionResource computes the service capabilities with each call to getCapabilities. Testing has shown that this is having an unacceptable performance impact.
Profiling showed that BundleRevisionResource.getCapabilities was taking up 16.9%, or 7368 ms, of the total time. After the optimization, this was reduced to 0.1%, or 50 ms.
The measurements used the same test scenario being developed as part of ARIES-1357. The time it took to install 50 features was measured. Each feature consists of 10 bundles plus one application. All features share the same 10 bundles. Each bundle exports 5 unique packages. Each application consists of 10 unique bundles. The bundles import packages offered by the containing feature.
Baseline
Average time across 1 trials: 42352.0 ms
Average time across 1 trials: 43709.0 ms
Average time across 1 trials: 43309.0 ms
Average time across 1 trials: 43234.0 ms
Average time across 1 trials: 41946.0 ms
Total Average: 42910
BundleRevisionResource Optimization
Average time across 1 trials: 32743.0 ms
Average time across 1 trials: 33094.0 ms
Average time across 1 trials: 32905.0 ms
Average time across 1 trials: 32015.0 ms
Average time across 1 trials: 32226.0 ms
Total Average: 32596.6
A 24% overall improvement. The solution was to compute the service capabilities once at object construction time. The same strategy was also employed for service requirements in anticipation that the same performance bottleneck would exist there, although that was not tested here.
issueID:ARIES-139
type:Bug
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
texts:webbundle url handler must convert a war or a bundle
The webbundle url handler must follow different rules when converting a war file or an existing bundle.
issueID:ARIES-1390
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicCapability.java
texts:BasicCapability should take advantage of the effective immutability of capabilities.
Currently, when given an already existing Capability at construction, BasicCapability will make a copy of the attributes and directives. This is not really necessary since a properly implemented Capability will be effectively immutable as required by the OSGi API.
Profiling showed that BasicCapability(Capability, Resource) was taking up 4.6%, or 1550 ms, of the total time. After the optimization, this no longer registered with a sampling time of 50 ms.
BasicCapability(Capability, Resource) will now simply reuse the already existing, and effectively immutable, attribute and directive maps of the provided capability.
issueID:ARIES-1391
type:Improvement
changed files:
texts:Add the new headers specified in the latest 6.0.0 subsystem spec

issueID:ARIES-1392
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/capabilityset/CapabilitySet.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/capabilityset/SimpleFilter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SystemRepositoryManager.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResolveContext.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/capabilityset/StringComparator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SystemRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/capabilityset/SecureAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/capabilityset/CapabilitySetRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
texts:Provide a more efficient implementation of a system repository.
While running the same test case developed as part of ARIES-1357, profiling continually showed a bottleneck surrounding the system repository. A more efficient implementation has been provided using code copied over from the Apache Felix (http://felix.apache.org/) project.
http://svn.apache.org/viewvc/felix/trunk/framework/src/main/java/org/apache/felix/framework/capabilityset/CapabilitySet.java?view=log
http://svn.apache.org/viewvc/felix/trunk/framework/src/main/java/org/apache/felix/framework/capabilityset/SimpleFilter.java?view=log
http://svn.apache.org/viewvc/felix/trunk/framework/src/main/java/org/apache/felix/framework/util/SecureAction.java?view=log
http://svn.apache.org/viewvc/felix/trunk/framework/src/main/java/org/apache/felix/framework/util/StringComparator.java?view=log
These classes were copied to the org.apache.aries.subsystem.core.capabilityset package with some modifications. A new repository implementation called CapabilitySetRepository was created using these classes from the Felix project. This repository will index the standard namespaces along with their associated namespace attributes. It will also create additional capability sets as necessary when encountering custom namespaces.
The system repository now delegates to CapabilitySetRepository. In addition, the system repository now tracks both bundles and subsystem services. Capabilities are added to the repository as they appear and removed when they go away. Bundle revisions are wrapped with BundleRevisionResource in order to account for service capabilities.
Other changes resulting from this optimization are listed below. They were necessary and appropriate because either (a) BundleRevisionResource became part of the normal flow when delivered from the system repository, or (b) computing service capabilities for the system repository requires searching for blueprint.xml files in the bundle which causes the framework to attempt a resolution.
(1) BundleResourceInstaller must now check for BundleRevisionResource in addition to BundleRevision when installing a bundle.
(2) BundleRevisionResource now provides access to the wrapped BundleRevision.
(3) ResolveContext must now check for BundleRevisionResource in addition to BundleResource when identifying the region of an already installed resource.
(4) SubsystemResolverHook will now prevent bundles not referenced by any subsystems from resolving. A non-referenced bundle is one that is being installed as part of a subsystem installation before it has been added as a reference.
(5) Utils now includes BundleRevisionResource, in addition to BasicSubsystem and BundleRevision, as a shared resource, which is essentially any resource that has already been installed and being referenced by a new subsystem.
(6) RootSubsystemTest was modified to allow for the RESOLVED state when ensuring the bundle has not been started. Frameworks are allowed to attempt to resolve bundles as needed, and subsystems no longer prevent resolution after entering the installed state, which is the case in this test.
As part of future work, some of the other internal repository implementations, such as ContentRepository, LocalRepository, and PreferredProviderRepository, should be modified to use CapabilitySetRepository as well.
The measurements used the same test scenario being developed as part of ARIES-1357. The time it took to install 50 features was measured. Each feature consists of 10 bundles plus one application. All features share the same 10 bundles. Each bundle exports 5 unique packages. Each application consists of 10 unique bundles. The bundles import packages offered by the containing feature.
Baseline
Average time across 1 trials: 25843.0 ms
Average time across 1 trials: 25824.0 ms
Average time across 1 trials: 25767.0 ms
Average time across 1 trials: 26043.0 ms
Average time across 1 trials: 25819.0 ms
25859.2
New System Repository
Average time across 1 trials: 12260.0 ms
Average time across 1 trials: 11658.0 ms
Average time across 1 trials: 11602.0 ms
Average time across 1 trials: 11485.0 ms
Average time across 1 trials: 11629.0 ms
11726.8
A 54.7% improvement.
issueID:ARIES-1393
type:Bug
changed files:
texts:XAJpaTemplate calls EntityManager#joinTransaction regardless of desired TransactionType
When calling txExpr methods with TransactionType.Supports on OSGi-exposed JpaTemplate services within a JTA-based setup a TransactionRequired [1] exception is thrown when no existing transaction is present.
The logic in XAJpaTemplate#txExpr is calling EntityManager#joinTransaction() regardless of whether there is a current global transaction. So for situations where users want to 'support' running within an existing global transaction, but not create a new one if one doesn't exist, em.joinTransaction() is still being called which results in the exception.
[1] Caused by: javax.persistence.TransactionRequiredException:
Exception Description: No externally managed transaction is currently active for this thread
at org.eclipse.persistence.internal.jpa.transaction.JTATransactionWrapper.throwCheckTransactionFailedException(JTATransactionWapper.java:94) ~[org.eclipse.persistence.jpa.jar:na]
at org.eclipse.persistence.internal.jpa.transaction.JTATransactionWrapper.checkForTransaction(JTATransactionWrapper.java:54) ~[org.eclipse.persistence.jpa.jar:na]
at org.eclipse.persistence.internal.jpa.transaction.JTATransactionWrapper.registerIfRequired(JTATransactionWrapper.java:131) ~[org.eclipse.persistence.jpa.jar:na]
at org.eclipse.persistence.internal.jpa.EntityManagerImpl.joinTransaction(EntityManagerImpl.java:2081) ~[org.eclipse.persistence.jpa.jar:na]
at org.apache.aries.jpa.support.impl.XAJpaTemplate.txExpr(XAJpaTemplate.java:57) ~[na:na]
... 20 common frames omitted
issueID:ARIES-1394
type:Improvement
changed files:
texts:Provide more efficient implementations of the local and content repositories.
These measurements use a new test scenario to help flush out bottlenecks in the local and content repositories. The time it took to install 1 application was measured. The application consisted of 200 bundles. Half of the bundles each exported 50 packages. Half of the bundles each imported 50 packages. This gives a total of 5000 requirements and 5000 capabilities.
Before
Average time across 1 trials: 13915.0 ms
Average time across 1 trials: 14628.0 ms
Average time across 1 trials: 14196.0 ms
Average time across 1 trials: 13905.0 ms
Average time across 1 trials: 14021.0 ms
14133
After
Average time across 1 trials: 7781.0 ms
Average time across 1 trials: 7782.0 ms
Average time across 1 trials: 8085.0 ms
Average time across 1 trials: 7850.0 ms
Average time across 1 trials: 7971.0 ms
7893.8
A 44.2% overall improvement.
Before, obtaining the subsystem region took 2254 ms, or 14.4%. After caching the region context bundle and using it to perform the region lookup, the effort no longer registered on a profiler with a 50 ms sampling period.
Before, finding providers from the local repository took 2260 ms, or 15.3%. After adding the capability set, it took 747 ms, or 5.9%.
Before, asking whether or not a resource was content took 2152 ms, or 16.9%. After answering by using existing content resource sets rather than the content header, the effort no longer registered on a profiler with a 50 ms sampling period.
Before, finding providers from the content repository took 4510 ms, or 28.8%. After adding the capability set, it took 49 ms, or 0.4%.
issueID:ARIES-1395
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
texts:Add a structure-only option to Blueprint xml-validation feature
Currently, xml-validation is performed on blueprint beans files by default. One can disable validation by setting blueprint.aries.xml-validation to false. The available option is either full-validation or no-validation. In some use-cases, it is practical to disable datatype validation and keep structure validation.
This is a request to add such an option by passing an appropriate ErrorHandler to the Validator instance so that datatype specific validation errors can be ignored.
issueID:ARIES-1396
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
texts:Use capability set when calculating subsystem dependencies.
These measurements use a more beefed up version of the test from ARIES-1394. The time it took to install 1 application was measured. The application consisted of 300 bundles. 200 of the bundles each exported 50 packages. 100 of the bundles each imported 50 packages. This gives a total of 5000 requirements and 10,000 capabilities. 100 of the exporting bundles serve as preferred providers.
Before, calculating dependencies took 6728 ms, or 43.6%. After making use of the capability set, it took 2005 ms, or 18.2%.
Baseline
Average time across 1 trials: 13841.0 ms
Average time across 1 trials: 13820.0 ms
Average time across 1 trials: 13982.0 ms
Average time across 1 trials: 13599.0 ms
Average time across 1 trials: 13782.0 ms
13804.8
DependencyCalculator Using Capability Set
Average time across 1 trials: 9923.0 ms
Average time across 1 trials: 10247.0 ms
Average time across 1 trials: 10180.0 ms
Average time across 1 trials: 10212.0 ms
Average time across 1 trials: 10442.0 ms
10200.8
A 26.1% overall improvement.
issueID:ARIES-1397
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/PreferredProviderRepository.java
texts:Use capability set with preferred provider repository.
These measurements use the same test as in ARIES-1396. The time it took to install 1 application was measured. The application consisted of 300 bundles. 200 of the bundles each exported 50 packages. 100 of the bundles each imported 50 packages. This gives a total of 5000 requirements and 10,000 capabilities. 100 of the exporting bundles serve as preferred providers.
Before, finding providers from the preferred provider repository took 3305 ms, or 25.0%. After making use of the capability set, it took 948 ms, or 8.6%.
Baseline
Average time across 1 trials: 12974.0 ms
Average time across 1 trials: 12597.0 ms
Average time across 1 trials: 12760.0 ms
Average time across 1 trials: 12573.0 ms
Average time across 1 trials: 12339.0 ms
12648.6
Preferred Provider Repository Using Capability Set
Average time across 1 trials: 10917.0 ms
Average time across 1 trials: 10562.0 ms
Average time across 1 trials: 10743.0 ms
Average time across 1 trials: 10718.0 ms
Average time across 1 trials: 10471.0 ms
10682.2
A 15.6% improvement.
issueID:ARIES-1398
type:Bug
changed files:
texts:Aries Subsystem implementation is start-order dependent
From an email thread by Paul F Frazer: https://mail-archives.apache.org/mod_mbox/aries-user/201509.mbox/browser
When the Aries Subsystem implementation is started in a certain order the synthesized org.osgi.service.subsystem.region.context.0 bundle is not created.
While the original bug was reported on the Raspberry Pi, this can also be reproduced on an ordinary laptop. For example by starting the bundles in the following order:
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (5.2.0)
    1|Active     |    1|Apache Felix Bundle Repository (2.0.4)
    2|Active     |    1|Apache Felix Gogo Command (0.14.0)
    3|Active     |    1|Apache Felix Gogo Runtime (0.16.2)
    4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
    5|Active     |    1|Apache Felix Configuration Admin Service (1.8.6)
    6|Active     |    1|Apache Felix Coordinator Service (1.0.0)
    7|Active     |    1|osgi.cmpn (5.0.0.201305092017)
    8|Active     |    1|slf4j-api (1.7.12)
    9|Active     |    1|Region Digraph (1.1.0.v20120522-1841)
   10|Active     |    1|Apache Aries Subsystem Core (2.0.2)
   11|Resolved   |    1|slf4j-simple (1.7.12)
   12|Active     |    1|Apache Aries Util (1.1.1)
   13|Active     |    1|Apache Aries Subsystem API (2.0.2)
As you can see the synthesized bundle does not appear.
issueID:ARIES-1399
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SystemRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ThreadLocalBundleRevision.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ThreadLocalSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java
texts:Trunk fails OSGi R6 CT
The Subsystems implementation is currently failing three tests in the R6 CT as a result of some of the recent performance tunings:
org.osgi.test.cases.subsystem.junit.SharingPolicySubsystemTests.test3A1a_BundleIsolationApplication
org.osgi.test.cases.subsystem.junit.SharingPolicySubsystemTests.test3A1b_BundleIsolationFeatures
org.osgi.test.cases.subsystem.junit.SharingPolicySubsystemTests.test3A1a_BundleIsolationComposite
It fails all three for the same reason. The tests explicitly install a bundle using the region bundle context of the root subsystem. The bundle is subsequently started. Using a synchronous bundle listener, the tests reasonably expect to see INSTALLED, RESOLVED, STARTING, and ACTIVE bundle events. However, the RESOLVED event is missing. It is missing because:
(1) The Bundle Event Hook, registered with a service ranking of Integer.MAX_VALUE, correctly identifies the event as pertaining to an explicitly installed bundle and acts accordingly.
(2) As normal, the bundle is wrapped by a Bundle Revision Resource in order to compute the service capabilities and requirements if the Application Modeller service is present. Previously, the capabilities and requirements were not cached but (lazily) computed with each request. Today, they are computed once and cached at instantiation.
(3) Computing the service capabilities and requirements requires searching for Blueprint XML files through Bundle.findEntries which results in the framework attempting to resolve the bundle.
(4) Region Digraph, through its own bundle event hook, receives the RESOLVED event before the INSTALLED event. Because this is an unknown bundle, the event is filtered and not delivered to any listeners, synchronous or otherwise.
There are at least a few possible solutions to the problem.
(1) Have the Bundle Event Hook explicitly add the bundle to the region using Region.addBundle(Bundle) as part of handling the INSTALLED event. This would solve the immediate issue but promote out of order event delivery to other hooks and listeners.
(2) Prevent bundles under these circumstances from resolving altogether. This would solve the immediate issue and prevent out of order event delivery, but eliminate the possibility of searching fragment bundles for Blueprint XML files.
(3) Lazily compute service dependencies and requirements in Bundle Revision Resource as before but still cache them. This would solve the immediate issue, resemble how things already were before performance tuning, not contribute to out of order event delivery, and leave open the possibility of searching fragments for Blueprint XML files.
issueID:ARIES-14
type:Task
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiURLContextFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
jndi/jndi-bundle/src/main/java/org/apache/aries/jndi/priv/Activator.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
texts:Refactor IBM JNDI donation to fit into Aries

issueID:ARIES-140
type:Bug
changed files:
texts:The Aries JPA container leaks EntityManagers on error paths

issueID:ARIES-1401
type:Bug
changed files:
texts:Damping Timeout for access to EntityManager in blueprint too short
In https://github.com/apache/aries/blob/trunk/jpa/jpa-blueprint/src/main/java/org/apache/aries/jpa/blueprint/supplier/impl/ServiceProxy.java
There is return tracker.waitForService(10000);
In some cases it turned out that the timeout is too low. So it should be larger and configureable.
Giuseppe also mentioned that we might run into deadlocks at some points beacuse of the blocking. Not sure if this is also an issue here.
issueID:ARIES-1402
type:Bug
changed files:
texts:We are unable to build jpa for a 1.6 JVM due to changes in the jpa-parent/pom
The jpa-parent/pom.xml was changed to require bytecode to be targeted to a 1.7 jvm. This change was done as part of:
r1680218 ARIES-1325 Redesign of aries jpa for next major version
We have a business requirement to continue support for 1.6 JVMs for a while still and so propose to change the target and source levels back to 1.6.
The only new 1.7 features in use currently is the diamond operator in 10 or so files.
I will attach a patch with the details of the required changes.
issueID:ARIES-1403
type:Bug
changed files:
texts:Namespace for jpa blueprint should be jpa/2.0.0
In version 2.0.0 I introduced a temprorary namespace jpan/1.0.0 that was not meant to go into the release.
This issue is to add the correct namespace jpa/2.0.0. We will keep the jpan one too as people might already have started using it. It will be removed in jpa 3.
issueID:ARIES-1404
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Restart of the osgi container does not restart subsystem core because of an error related to missing resource org.apache.aries.subsystem.resource.synthesized
Restart of the osgi container does not restart subsystem core because of an error related to missing resource org.apache.aries.subsystem.resource.synthesized
The deployment manifest contains the entry below in the provision-resource header:
org.apache.aries.subsystem.resource.synthesized;resourceId=-1;deployed-version=0.0.0;type=org.apache.aries.subsystem.resource.synthesized
On restart it tries to load the resource because it is in the deployment manifest and can't find the resource in the osgi framework.
It seems the 'synthesized' type is related to something which looks like a missing capability/service capability placeholder while installing/resolving. It is not installed because the ResourceInstaller has an if statement returning an installer which does nothing. So I guess it should also not be added to the manifest.
I therefore patched the ProvisionResourceHeader to check for this 'synthesized' type and ignore it for the Provision-resource header. I'm not sure if this is the best solution but it does solve the issue we are having.
The reason for patching it there is because it would be least affecting the entire process. Just like ignoring it before it is installed in the osgi framework it will not also be ignored before adding it to the manifest.
issueID:ARIES-1405
type:Improvement
changed files:
texts:Make sure bundle goes into graceperiod if services needed for JPA are not present
Currently Coordinator as well as EntityManager services are injected using a manually created service proxy.
The problem with this is that we can not stop blueprint from starting up the user context this way. So the jpa enabled beans start even if their prerequisites are not yet present.
This can lead to calls blocking at runtime until the service timeout. The error reporting is also bad as you only know something went wrong after the first call and the timeout.
So the idea is to use correct blueprint metadata for the service refs. This makes blueprint go into graceperiod until the services are present. The diag command will then also show what is missing.
The current approach with the Beanprocessor does not support this approach. Se we need to switch to a ComponentDefinitionRegistryProcessor as recommended by Guillaume Nodet.
issueID:ARIES-1406
type:Improvement
changed files:
texts:Add karaf itests to test the examples

issueID:ARIES-1407
type:Bug
changed files:
texts:Service (un)registration listener not called anymore
Service (un)registration listeners are not called anymore since Blueprint 1.4.0.
There are 2 booleans in the "ServiceRecipe" class which are tested against the wrong values.
Please find a patch which makes them work again with Blueprint 1.4.3.
issueID:ARIES-1408
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityHeader.java
texts:The RequireCapabilityHeader currently only supports requirements defined by the Aries implementation
The RequireCapabilityHeader currently only supports requirements defined by the Aries implementation and it does not allow any custom Requirement subclasses.
This is caused by the following if statement:
!(requirement instanceof RequireCapabilityRequirement || requirement instanceof OsgiExecutionEnvironmentRequirement)
This statement was introduced to tackle the issues concerning the equals and hashcode methods in ARIES-1387. A better solution to this issue would be to use the equality specifications from the specs to determine equality of clauses.
Additionally the current instanceof comparison only supports RequireCapabilityRequirement and OsgiExecutionEnvironmentRequirement classes from the aries classloader. IllegalArgumentExceptions will be thrown when using a RequireCapabilityRequirement originating from a different classloader.
issueID:ARIES-1409
type:Bug
changed files:
texts:JPA compilation error when compiling against 1.6 jre/lib jars.
A jpa class, DummyDataSource.java, extends javax.sql.CommonDataSource and annotates one of its methods with "@Overrides". The over-ridden method does not exist in the super-class version in jre1.6 lib, so the compiler issues an error.
This can be fixed by removing the @Override annotation.
issueID:ARIES-1410
type:Bug
changed files:subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixResourceAdapter.java
texts:The FelixResourceAdapter does not return all capabilities when given a null namespace.
This is a bug spawned from ARIES-1357, specifically from a group of comments starting with https://issues.apache.org/jira/browse/ARIES-1357?focusedCommentId=14743649&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14743649.
The adapter responsible for adapting org.apache.felix.bundlerepository.Resource into org.osgi.resource.Resource does not return all capabilities given a null namespace as required by the org.osgi.resource.Resource interface.
issueID:ARIES-1411
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Blueprint Annotations: Missing service when two services with the same type are annotated
If I have a class with two services of the same type, differentiated via filters, it seems that only one reference is created in autowire.xml. E.g.
@Singleton
@OsgiServiceProvider(classes = {RouteBuilder.class})
public class EchoRoute extends RouteBuilder {

    @OsgiService(filter = "(path=/echo/reverse)")
    @Inject
    private EchoService reverseEchoService;

    @OsgiService(filter = "(path=/echo/simple)")
    @Inject
    private EchoService echoService;
...
produces the following:
<?xml version="1.0" ?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0" xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.1.0" xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.1.0">

  <bean id="echoRoute" class="com.tup.spa.demo.wms.tupspa.examples.echo.routes.EchoRoute" ext:field-injection="true">
      <property name="echoService" ref="echoService"/>
      <property name="reverseEchoService" ref="echoService"/>
  </bean>

  <reference id="echoService" interface="com.tup.spa.demo.wms.tupspa.examples.echo.service.api.EchoService" filter="(path=/echo/reverse)"/>

  <service ref="echoRoute" interface="org.apache.camel.builder.RouteBuilder"/>
  
</blueprint>
I would expect the following:
<bean id="echoRoute" class="com.tup.spa.demo.wms.tupspa.examples.echo.routes.EchoRoute" ext:field-injection="true">
      <property name="echoService" ref="echoService"/>
      <property name="reverseEchoService" ref="reverseEchoService"/>
  </bean>

  <reference id="echoService" interface="com.tup.spa.demo.wms.tupspa.examples.echo.service.api.EchoService" filter="(path=/echo/simple)"/>
  <reference id="reverseEchoService" interface="com.tup.spa.demo.wms.tupspa.examples.echo.service.api.EchoService" filter="(path=/echo/reverse)"/>
issueID:ARIES-1412
type:Bug
changed files:
texts:EmProxy needs to unwrap InvocationTargetException
Currently EmProxy simply throws the exception from the invocation. If a PersistenceException is thrown inside the persistence provider it will surface as an InvocationtargetException on the InvocationHandller. In the log it will look like below.
It should be the real PersistenceException though. This works by unwrapping the InvocationtargetException.
2015-09-20 11:37:51,197 | WARN | pool-39-thread-1 | InitHelper | 63 - net.lr.tasklist.cdi.tasklist-persistence - 1.0.0.SNAPSHOT |
java.lang.reflect.UndeclaredThrowableException
at com.sun.proxy.$Proxy33.flush(Unknown Source)[58:javax.persistence:2.1.0.v201304241213]
at Proxy4d1c1d44_8813_413d_8045_ba268a99b2c0.flush(Unknown Source)[:]
at net.lr.tasklist.persistence.impl.TaskServiceImpl.addTask(TaskServiceImpl.java:39)[63:net.lr.tasklist.cdi.tasklist-persistence:1.0.0.SNAPSHOT]
at Proxy3316312c_9444_405a_90e5_af21ec088f0b.addTask(Unknown Source)[:]
at net.lr.tasklist.persistence.impl.InitHelper.addSampleTask(InitHelper.java:38)[63:net.lr.tasklist.cdi.tasklist-persistence:1.0.0.SNAPSHOT]
at net.lr.tasklist.persistence.impl.InitHelper.access$0(InitHelper.java:36)[63:net.lr.tasklist.cdi.tasklist-persistence:1.0.0.SNAPSHOT]
at net.lr.tasklist.persistence.impl.InitHelper$1.run(InitHelper.java:27)[63:net.lr.tasklist.cdi.tasklist-persistence:1.0.0.SNAPSHOT]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_60]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_60]
at java.lang.Thread.run(Thread.java:745)[:1.7.0_60]
Caused by: java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_60]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_60]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_60]
at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_60]
at org.apache.aries.jpa.support.osgi.impl.EmProxy.invoke(EmProxy.java:41)[74:org.apache.aries.jpa.support:2.2.0.SNAPSHOT]
... 10 more
Caused by: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1763)
at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1677)
at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1683)
at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1338)
... 15 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement
at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:129)
at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:126)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:112)
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:211)
at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:62)
at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3124)
at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3581)
at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:104)
at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:463)
at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:349)
at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:350)
at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:56)
at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1222)
at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1335)
... 15 more
Caused by: org.h2.jdbc.JdbcSQLException: Unique index or primary key violation: "PRIMARY_KEY_2 ON PUBLIC.TASK(ID)"; SQL statement:
insert into Task (description, dueDate, finished, title, id) values (?, ?, ?, ?, ?) [23505-172]
at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
at org.h2.message.DbException.get(DbException.java:169)
at org.h2.message.DbException.get(DbException.java:146)
at org.h2.index.BaseIndex.getDuplicateKeyException(BaseIndex.java:83)
at org.h2.index.TreeIndex.add(TreeIndex.java:65)
at org.h2.table.RegularTable.addRow(RegularTable.java:124)
at org.h2.command.dml.Insert.insertRows(Insert.java:126)
at org.h2.command.dml.Insert.update(Insert.java:86)
at org.h2.command.CommandContainer.update(CommandContainer.java:79)
at org.h2.command.Command.executeUpdate(Command.java:235)
at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:154)
at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:140)
at org.apache.commons.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:98)
at org.apache.commons.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:98)
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:208)
... 25 more
issueID:ARIES-1413
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Switch to 2.0.0 namespace
The 2.0.0 namespace only has the enable element like in jpa. It can be installed together with the old transaction bundle to support a smooth transition.
issueID:ARIES-1414
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Allow to configure code generation based on namespaces
The idea is to configure the generated code by specifying the namespaces it should use.
The configuration looks like this:
<namespaces>
<namespace>http://aries.apache.org/xmlns/jpa/v2.0.0</namespace>
<namespace>http://aries.apache.org/xmlns/transactions/v2.0.0</namespace>
</namespaces>
If no namespaces are configured the two above are assumed.
The list of initially supported namespaces for this config are:
http://aries.apache.org/xmlns/jpa/v1.1.0
http://aries.apache.org/xmlns/jpa/v2.0.0
http://aries.apache.org/xmlns/transactions/v1.2.0
http://aries.apache.org/xmlns/transactions/v2.0.0
The 1.x namespace cause the generation of xml elements, the 2.0 namespaces just generate the respective enable elements.
issueID:ARIES-1415
type:Bug
changed files:
texts:Exception laundering in JpaTemplate impls
Currently XaJpaTemplate and ResourceLocalJpaTemplate wrap all caught exceptions in a new RuntimeException and throw that instead of the original. This can make it problematic to integrate with code that wants to run txExpr methods and catch specific exceptions - like NoResultException or other type of recoverable exception.
Perhaps a method (like launderTxException) could be added to their base class - AbstractJpaTemplate - which could allow for additional exception laundering.
Specifically, I'm thinking of something that would actually attempt to instantiate a new instance of the original exception type via reflection and populate it with the necessary detail message. If it is unable to instantiate the original exception, then it can simply rethrow it as-is or maintain the original behavior of wrapping it in a RuntimeException.
Something like this:
    protected RuntimeException launderTxException(Throwable original, String message) {
        if (RuntimeException.class.isInstance(original)) {
            return wrapTxException(RuntimeException.class.cast(original), message);
        }
        else {
            return new RuntimeException(message, original);
        }
    }

    protected RuntimeException wrapTxException(RuntimeException original, String message) {
        if (message == null)
            return original;

        try {
            RuntimeException wrapper = original.getClass().getConstructor(new Class[]
            { String.class }).newInstance(message);
            wrapper.initCause(original);
            return wrapper;
        }
        catch (ReflectiveOperationException e) {
            return original;
        }
    }
Thoughts, comments, criticisms?
issueID:ARIES-1416
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/PreferredProviderRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
texts:BundleException "bundle is already installed" when the Preferred-Provider subsystem header points to a bundle.
When using the Preferred-Provider header that specifies a bundle, an exception similar to the following is received:
org.osgi.framework.BundleException: A bundle is already installed with the name "bundle.c.jar" and version "0.0.0"
at org.eclipse.osgi.container.ModuleContainer.install(ModuleContainer.java:254)
at org.eclipse.osgi.storage.Storage.install(Storage.java:513)
at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:146)
at org.eclipse.equinox.internal.region.BundleIdBasedRegion.installBundle0(BundleIdBasedRegion.java:117)
at org.eclipse.equinox.internal.region.BundleIdBasedRegion.installBundleAtLocation(BundleIdBasedRegion.java:97)
at org.apache.aries.subsystem.core.internal.BundleResourceInstaller.installBundle(BundleResourceInstaller.java:197)
at org.apache.aries.subsystem.core.internal.BundleResourceInstaller.install(BundleResourceInstaller.java:182)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.installAriesSubsystem(SubsystemResourceInstaller.java:98)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.installSubsystemResource(SubsystemResourceInstaller.java:159)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.installRawSubsystemResource(SubsystemResourceInstaller.java:130)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.install(SubsystemResourceInstaller.java:38)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.installAriesSubsystem(SubsystemResourceInstaller.java:113)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.install(SubsystemResourceInstaller.java:36)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:77)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:30)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:646)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:690)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:278)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:65)
...
issueID:ARIES-1417
type:Improvement
changed files:
texts:Aries Subsystems implementation bundle must provide official capabilities
Compendium v6.0.0 states in 134.19 - Capabilities:
A capability in the osgi.implementation namespace declaring the implemented specification to be osgi.subsystem. This capability must also declare a uses constraint for the org.osgi.service.subsystem package. For example:
    Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.subsystem";
    version:Version="1.1";
    uses:="org.osgi.service.subsystem"
*This capability must follow the rules defined for the osgi.implementation Namespace on page 997.
A capability in the osgi.service namespace representing the Subsystem service. This capability
must also declare a uses constraint for the org.osgi.service.subsystem package. For example:
    Provide-Capability: osgi.service;
    objectClass:List<String>="org.osgi.service.subsystem.Subsystem";
    uses:="org.osgi.service.subsystem"
issueID:ARIES-1419
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/CardinalityDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/TypedAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvideCapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Grammar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DirectiveFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractClause.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Patterns.java
texts:Provide-Capability header parser does not support typed attributes.
I added a patch (require-capability-service.patch) that contains a test case to test the behavior with require-capability and provide-capability and it is failing. Maybe the test case is wrong, can someone check it?
The test case has a feature with a bundle 1 and an embedded application with a bundle 2.
Bundle 1 provides a service capability
Bundle 2 requires a service capability
I would expect all to be installed correctly but the install fails because of the require-capability for the service not resolving.
missing requirement org.apache.aries.subsystem.core.archive.RequireCapabilityRequirement: namespace=osgi.service, attributes={}, directives=
{filter=(objectClass=com.emagiz.osgi.environment.PropertiesSource), effective=active, resolution=mandatory}
------------------------------------------
Try not using typed parameters in Provide-Capability and see what happens. I think there may be a parsing issue in that header.
In other words, try removing ":List" from "osgi.service;objectClass:List=\"com.emagiz.osgi.environment.PropertiesSource\";effective:=\"active\"".
--------------------------------------------
Got it working by not using the ":List<String>" but kept the test case because it should work. Tested with type "String" and that works.
Added another patch 'require-capability-service-2.patch' that contains three test cases.
1) For a provide on root level
2) For a provide on feature level
3) For a provide with a List<String>
All test cases have three levels: root/feature/application and the application has a bundle with require.
issueID:ARIES-142
type:New Feature
changed files:
texts:Add declarative transactions support to Apache Aries
The aim is to alllow declarative transactions to be used via blueprint, a la JEE declarative transaction support. For example,
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0"
xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0"
default-activation="lazy">
<bean id="persistenceImpl" class="org.apache.aries.samples.blog.persistence.BlogPersistenceServiceImpl">
<tx:transaction method="*" value="Required"/>
</bean>
...
</blueprint>
issueID:ARIES-1420
type:Bug
changed files:
texts:OSGi capability handling does not seem to work between subsystems and OSGi bundles
Hello,
We are using Aries subsystems container (1.1.0) to manage the lifecycle of subsystems in our Equinox OSGi runtime (3.8.2). Each of these subsystems provides certain capabilities which are declared in the SUBSYSTEM.MF file for the subsystem using standard OSGi Provide-Capability header. There are OSGi bundles in the runtime which are dynamically deployed to this runtime which have dependency on these subsystem capabilities which are declared via standard OSGi Require-Capability header.
The problem is that the capabilities declared at the subsystem level is not registered in the BundleRevision associated to the subsystem which results in missing wiring between the provide and require capabilities. So even though the Subsystem with capabilities are active in the OSGi runtime the bundles which are depending on it do not go to RESOLVED state.
On further investigation it appears that the only way to get the capabilities that are defined at the subsystem level is via reflection. We have tested this for feature and composite subsystems which are currently using.
                    final Method getCapabilitiesMethod = ReflectionUtils.findMethod(subsystem.getClass(), "getCapabilities", String.class);
                    if (getCapabilitiesMethod != null) {
                        final List<Capability> foundCapabilities = (List<Capability>) ReflectionUtils
                                .invokeMethod(getCapabilitiesMethod, subsystem, capabilityNs);
                        out.println("---------- Capabilities found ----------");
                        out.println(foundCapabilities);
                    } else {
                        out.println("Could not locate method: getCapabilities via reflection for class " + s.getClass().getName());
                    }
When we try and fetch the dependencies via BundleRevision then we do not get them:
                    final Bundle bundle = subsystem.getBundleContext().getBundle();
                    final BundleRevision bundleRevision = bundle.adapt(BundleRevision.class);
                    final List<Capability> bundleCapabilities = bundleRevision.getCapabilities("com.bingo.capability.adapter");
                    out.println("---------- Capabilities found ----------");
                    out.println(bundleCapabilities);
This IMO should not happen, any capability defined at a subsystem level should be available to be consumed outside its region to any bundle in the parent region. It seems that this is not the case when using the Aries subsystem container.
Best Regards,
Madhav
issueID:ARIES-1421
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleVersionAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/capabilityset/SimpleFilter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractClauseBasedHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleHeader.java
texts:SimpleFilter attribute extraction can not handle version ranges
The SimpleFilter attributes(SimpleFilter filter, Map<String, Object> attributes) method currently makes the wrong assumption that all attributes are specified by a simple equality.
This is true for attributes like the 'osgi.wiring.package' attribute. However for version ranges, this assumption is incorrect.
Version ranges specify greater than and not relations that are ignored when extracting attributes.
For example, (&(osgi.wiring.package=org.osgi.framework)(&(version>=1.7.0)(!(version>=2.0.0)))) will result in the attributes:
osgi.wiring.package: org.osgi.framework
version: 2.0.0
Do note that the bug is not in parsing the filter. It is in the extraction of the attributes.
issueID:ARIES-1422
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Support m2e incremental build in blueprint-maven-plugin

issueID:ARIES-1423
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericHeader.java
texts:IllegalArgumentException when GenericHeader has no clauses
When trying to install a subsystem which contains bundles that have a manifest that contains empty headers, the AbstractClauseBasedHeader throws an IllegalArgumentException.
Example headers are (manifest attached to this issue)
Build-Plan: 
Build-Number: 
The exception is caused by the rework of the AbstractClauseBasedHeader for ARIES-1387.
issueID:ARIES-1425
type:Task
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
texts:Support both osgi.bundle and osgi.fragment resource types when given a Subsystem-Content header clause with an unspecified type attribute.
Before ARIES-1368, the Subsystems implementation would not distinguish between bundle and fragment content. This created the following issues as discussed in that bug:
(1) Content would not be found when the Subsystem-Content header was computed by the implementation and fragments were provided by a remote repository.
(2) Content would not be found when the Subsystem-Content header was specified and contained a resource with type osgi.fragment provided by the local repository.
However, it did not cause issues when, for example, fragment content was included as part of the header without specifying the type, and the fragment also existed within the local repository.
Unfortunately, the bug lived long enough to become an issue for consumers with a zero migration policy. Consequently, we would like to introduce the following implementation specific behavior without violating the specification.
REQUIREMENTS
(1) An unspecified type attribute in a Subsystem-Content header clause MAY indicate either a bundle (i.e. osgi.bundle) or a fragment (i.e. osgi.fragment).
(2) When the type attribute is not specified, the implementation MUST search for both bundles and fragments according to the rules for discovering content resources in section 134.5.5 of the specification.
(3) Bundles MUST be preferred over fragments.
issueID:ARIES-1426
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Implementation specific subsystem header Application-ImportService should not affect the sharing policy.
The implementation specific subsystem header Application-ImportService provides a means for application providers to tell the implementation that there are bundles with unresolvable service dependencies that will be satisfied at runtime in some unspecified way. Consequently, the implementation will not fail the installation if any of the requirements listed in the header are not present. How the requirements are ultimately satisfied is the responsibility of the provider. The implementation should not allow this header to affect the sharing policy.
Currently, the implementation will add these requirements to the sharing policy so that matching services from the parent subsystem are automatically visible. This could result in unanticipated wirings from the provider's point of view.
issueID:ARIES-1427
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractClauseBasedHeader.java
texts:org.osgi.service.subsystem.SubsystemException: java.lang.IllegalArgumentException: Invalid filter: (version=*)
An exception can occur when converting an osgi.wiring.package requirement into an Import-Package header [1]. This can only occur with an open ended version range. For example, (1.5, 2.0). This range is converted into the following filter form: (&(version=*)(!(version<=1.5.0))(!(version>=2.0.0))). The presence operator is required because the filter would otherwise match when a version attribute was not specified.
[1]
Caused by: java.lang.IllegalArgumentException: Invalid filter: (version=*)
at org.apache.aries.subsystem.core.archive.AbstractClauseBasedHeader.parseVersionRange(AbstractClauseBasedHeader.java:53)
at org.apache.aries.subsystem.core.archive.ImportPackageHeader$Clause.valueOf(ImportPackageHeader.java:65)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeImportPackageHeader(RawSubsystemResource.java:332)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addImportPackageHeader(RawSubsystemResource.java:283)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeSubsystemManifestAfterRequirements(RawSubsystemResource.java:513)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:136)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:90)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:54)
... 15 more
issueID:ARIES-1428
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
texts:org.osgi.framework.BundleException: Could not resolve module: <module> Bundle was filtered by a resolver hook.
This exception may occur during a small window of time between the registration of the resolver hook and initialization of the root subsystem while the implementation bundle is being activated.
ARIES-1392 introduced the need to prevent bundles that are part of a subsystem installation from resolving until the installation is complete. An assumption made was that a check to see if the bundle was referenced by any subsystems was sufficient. This is not the case because during the small window of time mentioned previously, the resolver hook will think that no bundles are associated with any subsystems. If a bundle undergoes a resolution attempt during this period, it will fail.
The solution is to ensure that the resolver hook will only prevent bundles not referenced by any subsystems from resolving on the same thread as the subsystem installation.
issueID:ARIES-1429
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionUpdater.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/WovenClassListener.java
texts:NullPointerException at org.apache.aries.subsystem.core.internal.WovenClassListener.modified at org.apache.aries.subsystem.core.internal.RegionUpdater.addRequirements
A NullPointerException [1] may occur while updating a region as part of adding dynamic imports to the sharing policy for a bundle containing a woven class. This will only occur when something outside of the subsystems implementation for whatever reason has deleted the region digraph edge that connects the parent subsystem to the subsystem containing the bundle whose class is being woven as a constituent.
Still, it would be useful if the implementation would allow this by replacing the NPE with a noop. In other words, if the implementation does not find an existing edge between parent and child, it would simply assume that something else is handling the dynamic imports.
[1]
org.osgi.service.subsystem.SubsystemException: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.WovenClassListener.modified(WovenClassListener.java:125)
at org.eclipse.osgi.internal.weaving.WovenClassImpl$1.call(WovenClassImpl.java:203)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1280)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHooksPrivileged(ServiceRegistry.java:1263)
at org.eclipse.osgi.internal.weaving.WovenClassImpl.notifyWovenClassListeners(WovenClassImpl.java:220)
at org.eclipse.osgi.internal.weaving.WovenClassImpl.callHooks(WovenClassImpl.java:271)
at org.eclipse.osgi.internal.weaving.WeavingHookConfigurator.processClass(WeavingHookConfigurator.java:56)
at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.defineClass(ClasspathManager.java:616)
at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findClassImpl(ClasspathManager.java:588)
at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClassImpl(ClasspathManager.java:540)
at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:527)
at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:324)
at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:330)
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:407)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:357)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:349)
at org.eclipse.osgi.internal.framework.BundleContextImpl.loadBundleActivator(BundleContextImpl.java:757)
at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:711)
at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:951)
at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:328)
at org.eclipse.osgi.container.Module.doStart(Module.java:566)
at org.eclipse.osgi.container.Module.start(Module.java:434)
at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:402)
at org.apache.aries.subsystem.core.internal.StartAction.startBundleResource(StartAction.java:337)
at org.apache.aries.subsystem.core.internal.StartAction.startResource(StartAction.java:365)
at org.apache.aries.subsystem.core.internal.StartAction.run(StartAction.java:128)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.start(BasicSubsystem.java:295)
...
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.RegionUpdater.addRequirements(RegionUpdater.java:106)
at org.apache.aries.subsystem.core.internal.RegionUpdater.addRequirements(RegionUpdater.java:60)
at org.apache.aries.subsystem.core.internal.WovenClassListener.modified(WovenClassListener.java:122)
... 39 more
issueID:ARIES-143
type:New Feature
changed files:samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
texts:Extend AriesTrader sample to include support for JPA Application Managed Persistence

issueID:ARIES-1430
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Blueprint bundle shut down after timeout even if all dependencies are present at that time
When I run the jpa blueprint example it works fine at the start but after 4 minutes I see the exception below.
When the blueprint context is created the future for the timeout of dependencies is canceled.
https://github.com/apache/aries/blob/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java#L379
In Aries JPA I use a ComponentDefinitionRegistryProcessor to scan for the @PersistenceContext annoations and register a service reference for these. I think that this triggers
the future for the timeout of such dependencies again. If this processor is called after the future is canceled above then the future will not be canceled anymore. So after the timeout (5min) it will
trigger and stop the blueprintcontainer even if all dependencies are satisfied now.
This is the code that is executed after the timeout:
https://github.com/apache/aries/blob/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java#L341
It matches the exception and explains why there are no unresolved dependencies.
I would be happy about feedback from anyone with deeper blueprint knowledge. Is what I do there in Aries JPA incorrect? If yes then we need a new Aries JPA release .. though I am not sure how to better address the problem.
If it is correct then we need to fix this in blueprint core.
A simple fix/workaround would be to check if there are no unresolved dependencies when the future times out and not stop the container in this case. A better fix would cancel the future as soon as all dependencies are fulfilled.
2015-10-11 19:08:43,371 | ERROR | rint Extender: 2 | BlueprintContainerImpl | 12 - org.apache.aries.blueprint.core - 1.4.4 | Unable to start blueprint container for bundle net.lr.tasklist.cdi.tasklist-persistence/1.0.0.SNAPSHOT due to unresolved dependencies []
java.util.concurrent.TimeoutException
at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:336)[12:org.apache.aries.blueprint.core:1.4.4]
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)[12:org.apache.aries.blueprint.core:1.4.4]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_60]
at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_60]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_60]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_60]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_60]
at java.lang.Thread.run(Thread.java:745)[:1.8.0_60]
issueID:ARIES-1433
type:Bug
changed files:
texts:Persistence units are not picked up while bundle is in status resolved
So if you put a persistence unit definition and a blueprint JPA bean using the persistence unit into the same bundle then it will never start.
We should also track bundles in state resolved.
issueID:ARIES-1434
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
texts:org.osgi.framework.BundleException: Region 'application.a.esa;0.0.0;osgi.subsystem.application;1' is already connected to region 'composite.a.esa;0.0.0;osgi.subsystem.composite;2
Starting a parent subsystem which has an already started child subsystem with an export sharing policy results in the exception below [1]. The exception occurs because the implementation attempts to set the already existing export sharing policy of the child subsystem during resolution.
[1]
org.osgi.framework.BundleException: Region 'application.a.esa;0.0.0;osgi.subsystem.application;1' is already connected to region 'composite.a.esa;0.0.0;osgi.subsystem.composite;2
at org.eclipse.equinox.internal.region.StandardRegionDigraph.connect(StandardRegionDigraph.java:158)
at org.eclipse.equinox.internal.region.BundleIdBasedRegion.connectRegion(BundleIdBasedRegion.java:176)
at org.apache.aries.subsystem.core.internal.StartAction.setExportIsolationPolicy(StartAction.java:267)
at org.apache.aries.subsystem.core.internal.StartAction.resolve(StartAction.java:237)
at org.apache.aries.subsystem.core.internal.StartAction.resolve(StartAction.java:184)
at org.apache.aries.subsystem.core.internal.StartAction.run(StartAction.java:116)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.start(BasicSubsystem.java:295)
at org.apache.aries.subsystem.itests.SubsystemTest.startSubsystemFromInstalled(SubsystemTest.java:874)
at org.apache.aries.subsystem.itests.SubsystemTest.startSubsystem(SubsystemTest.java:868)
at org.apache.aries.subsystem.itests.defect.AriesXXXXTest.test(AriesXXXXTest.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:67)
at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:37)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.invokeViaJUnit(JUnitProbeInvoker.java:125)
at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.findAndInvoke(JUnitProbeInvoker.java:98)
at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.call(JUnitProbeInvoker.java:74)
at org.ops4j.pax.exam.nat.internal.NativeTestContainer.call(NativeTestContainer.java:108)
at org.ops4j.pax.exam.spi.reactors.EagerSingleStagedReactor.invoke(EagerSingleStagedReactor.java:109)
at org.ops4j.pax.exam.junit.impl.ProbeRunner$2.evaluate(ProbeRunner.java:278)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.ops4j.pax.exam.junit.impl.ProbeRunner.run(ProbeRunner.java:112)
at org.ops4j.pax.exam.junit.PaxExam.run(PaxExam.java:93)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
issueID:ARIES-1435
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/WovenClassListener.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionUpdater.java
texts:Sharing policy updates for dynamic imports, if necessary, should proceed up the subsystem region tree.
Currently, dynamic imports only affect the sharing policy between the region of the woven subsystem and the region containing its parent(s). Sharing policy updates should continue to wind up the region tree until either the dynamic import is satisfied or the root subsystem has been reached.
issueID:ARIES-1436
type:Improvement
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
texts:cm:managed-component destroy-method will only be called when it has a single integer argument
The destroy-method for cm:managed-components is only considered a compatible method if it contains a single integer argument. This requires the use of a placeholder integer when no argument is required, and can lead to confusion during use of blueprint-cm.
CmManagedServiceFactory.java
private Method findDestroyMethod(Class clazz) {
        Method method = null;
        if (componentDestroyMethod != null && componentDestroyMethod.length() > 0) {
            List<Method> methods = ReflectionUtils.findCompatibleMethods(clazz, componentDestroyMethod, ----> new Class [] { int.class } <----);
            if (methods != null && !methods.isEmpty()) {
                method = methods.get(0);
            }
        }
        return method;
    }
issueID:ARIES-1437
type:Bug
changed files:spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java
texts:Use ASM5 Opcodes instead of the ASM4 and implement ASM 5 visitor api.
If weaving code use Java 8 specific language features you will end-up with this kind of exception:
Caused by: java.lang.IllegalArgumentException: INVOKESPECIAL/STATIC on interfaces require ASM 5
at org.objectweb.asm.MethodVisitor.visitMethodInsn(Unknown Source)
at org.objectweb.asm.ClassReader.a(Unknown Source)
at org.objectweb.asm.ClassReader.b(Unknown Source)
at org.objectweb.asm.ClassReader.accept(Unknown Source)
at org.objectweb.asm.ClassReader.accept(Unknown Source)
at org.apache.aries.spifly.dynamic.ClientWeavingHook.weave(ClientWeavingHook.java:61)
I provide a pull request in order to solve it:
https://github.com/apache/aries/pull/29
issueID:ARIES-1438
type:Bug
changed files:
texts:NPE in XAJpaTemplate#txExpr if Coordinator is null
XAJpaTemplate uses the following code to initialize the transaction and later calls Coordinator#end in a finally block.
TransactionAttribute ta = TransactionAttribute.fromType(type);
Coordination coord = null;
try {
    tranToken = ta.begin(tm);
    coord = coordinator.begin(this.getClass().getName(), 0);
However, if the call to ta.begin(tm) fails, then the coord reference will be null, thus provoking an NPE during the finally block. This will then suppress the original exception that prevented ta.begin from succeeding.
A null-check on coord prior to the invocation of Coordinator#end should suffice to fix this, but perhaps there's another problem here.
issueID:ARIES-1439
type:Bug
changed files:
texts:Aries ResolveContext.insertHostedCapability() calls unsupported add() method on capabilies
The method
org.apache.aries.subsystem.core.internal.ResolveContext.insertHostedCapability(List<Capability> capabilities, HostedCapability hostedCapability)
calls capabilities.add(hostedCapability).
However the key reason for this callback is to insert this capability at the correct position in the capabilities list. The Felix implementation of the List provided insist on a call to add(idx, capability) which seems to make sense in this context.
Currently this call causes the following exception:
java.lang.UnsupportedOperationException: null
 at org.apache.felix.resolver.util.CopyOnWriteList.add(CopyOnWriteList.java:135)
 at org.apache.aries.subsystem.core.internal.ResolveContext.insertHostedCapability(ResolveContext.java:101)
 at org.apache.felix.resolver.Candidates.prepare(Candidates.java:934)
 at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:232)
 at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:158)
 at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:372)
issueID:ARIES-144
type:New Feature
changed files:samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
texts:Extend AriesTrader sample to include support for JPA Container Managed Persistence

issueID:ARIES-1440
type:Bug
changed files:
texts:OSGi Subsystems CT testGetDeploymentHeaders() failure 'Wrong Import-Package header'
  <testcase name='testGetDeploymentHeaders' time='0.100' classname='org.osgi.test.cases.subsystem.junit.DeploymentHeadersTests'>
    <failure type='junit.framework.AssertionFailedError'><![CDATA[junit.framework.AssertionFailedError: Wrong Import-Package header
 at junit.framework.Assert.fail(Assert.java:57)
 at junit.framework.Assert.assertTrue(Assert.java:22)
 at junit.framework.TestCase.assertTrue(TestCase.java:192)
 at org.osgi.test.cases.subsystem.junit.DeploymentHeadersTests.testGetDeploymentHeaders(DeploymentHeadersTests.java:78)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:483)
 at junit.framework.TestCase.runTest(TestCase.java:176)
 at junit.framework.TestCase.runBare(TestCase.java:141)
 at junit.framework.TestResult$1.protect(TestResult.java:122)
 at junit.framework.TestResult.runProtected(TestResult.java:142)
 at junit.framework.TestResult.run(TestResult.java:125)
 at junit.framework.TestCase.run(TestCase.java:129)
 at junit.framework.TestSuite.runTest(TestSuite.java:255)
 at junit.framework.TestSuite.run(TestSuite.java:250)
 at junit.framework.TestSuite.runTest(TestSuite.java:255)
 at junit.framework.TestSuite.run(TestSuite.java:250)
 at aQute.junit.Activator.test(Activator.java:303)
 at aQute.junit.Activator.automatic(Activator.java:186)
 at aQute.junit.Activator.run(Activator.java:120)
 at aQute.launcher.Launcher$5.call(Launcher.java:1175)
 at aQute.launcher.Launcher$5.call(Launcher.java:1173)
 at aQute.launcher.Launcher.run(Launcher.java:278)
 at aQute.launcher.Launcher.main(Launcher.java:87)
]]>
    </failure>
  </testcase>
issueID:ARIES-1441
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
texts:Subsystem core tries to shutdown the framework when it has a framework dependency like org.osgi.util.tracker
When performing a shutdown of the subsystem core bundle it tries to stop the framework because there is a org.osgi.util.tracker import package.
Also in the same situation described above when trying to shutdown the framework by calling stop on bundle 0 it can fail with:
[org.apache.aries.subsystem.core.internal.StopAction] : An error occurred while stopping resource osgi.identity; osgi.identity="org.eclipse.osgi"; type="osgi.bundle"; version:Version="3.10.0.v20140606-1445"; singleton:="true" of subsystem org.apache.aries.subsystem.core.internal.BasicSubsystem@25760667
org.osgi.framework.BundleException: Unable to acquire the state change lock for the module: osgi.identity; osgi.identity="org.eclipse.osgi"; type="osgi.bundle"; version:Version="3.10.0.v20140606-1445"; singleton:="true" [id=0] STOPPED [STOPPED] invalid
at org.eclipse.osgi.container.Module.lockStateChange(Module.java:329)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule.asyncStop(EquinoxBundle.java:151)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.stop(EquinoxBundle.java:272)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.stop(EquinoxBundle.java:277)
at org.apache.aries.subsystem.core.internal.StopAction.stopBundleResource(StopAction.java:97)
at org.apache.aries.subsystem.core.internal.StopAction.stopResource(StopAction.java:109)
at org.apache.aries.subsystem.core.internal.StopAction.run(StopAction.java:67)
at org.apache.aries.subsystem.core.internal.StopAction.stopSubsystemResource(StopAction.java:135)
at org.apache.aries.subsystem.core.internal.StopAction.stopResource(StopAction.java:107)
at org.apache.aries.subsystem.core.internal.StopAction.run(StopAction.java:67)
at org.apache.aries.subsystem.core.internal.Activator.deactivate(Activator.java:162)
at org.apache.aries.subsystem.core.internal.Activator.removedService(Activator.java:291)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:967)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:870)
at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:909)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:109)
at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:914)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:862)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:801)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:222)
at org.eclipse.equinox.internal.region.RegionManager.stop(RegionManager.java:67)
at org.eclipse.osgi.internal.framework.BundleContextImpl$4.run(BundleContextImpl.java:827)
at org.eclipse.osgi.internal.framework.BundleContextImpl$4.run(BundleContextImpl.java:1)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.framework.BundleContextImpl.stop(BundleContextImpl.java:820)
at org.eclipse.osgi.internal.framework.EquinoxBundle.stopWorker0(EquinoxBundle.java:950)
at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.stopWorker(EquinoxBundle.java:324)
at org.eclipse.osgi.container.Module.doStop(Module.java:626)
at org.eclipse.osgi.container.Module.stop(Module.java:488)
at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.decStartLevel(ModuleContainer.java:1623)
at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1542)
at org.eclipse.osgi.container.SystemModule.stopWorker(SystemModule.java:248)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule.stopWorker(EquinoxBundle.java:145)
at org.eclipse.osgi.container.Module.doStop(Module.java:626)
at org.eclipse.osgi.container.Module.stop(Module.java:488)
at org.eclipse.osgi.container.SystemModule.stop(SystemModule.java:186)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule$1.run(EquinoxBundle.java:160)
at java.lang.Thread.run(Thread.java:662)
issueID:ARIES-1442
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
texts:Subsystem impersonates bundles that are a constituent through sharing the osgi.identity capability
Feature subsystems should export all capabilities of its constituents. The osgi.identity capability is also exported but I doubt it is supposed to.
It might cause problems when using osgi.identity in the preferred-provider header.
issueID:ARIES-1444
type:Bug
changed files:
texts:Subsystem does not install because feature subsystem exports all constituents
The resolver will try endlessly to resolve the situation presented to it. You do have to restart the subsystem core bundle before this happens because after that the feature exports all constituent capabilities.
While debugging it shows the following messages:
org.osgi.service.resolver.ResolutionException: Uses constraint violation. Unable to resolve resource nl.capesystemsintegration.testcu.bus.testms.container-infra [org.apache.aries.subsystem.core.internal.BasicSubsystem@73ed4f] because it exports package 'net.sf.saxon.sxpath' and is also exposed to it from resource org.apache.servicemix.bundles.saxon [osgi.identity; osgi.identity="org.apache.servicemix.bundles.saxon"; type="osgi.bundle"; version:Version="9.4.0.7_1"] via the following dependency chain:
nl.capesystemsintegration.testcu.bus.testms.container-infra [org.apache.aries.subsystem.core.internal.BasicSubsystem@73ed4f]
import: (&(osgi.wiring.package=net.sf.saxon.trans)(&(version>=9.4.0)(!(version>=10.0.0))))
export: osgi.wiring.package: net.sf.saxon.trans; uses:=net.sf.saxon.sxpath
export: osgi.wiring.package=net.sf.saxon.sxpath
org.apache.servicemix.bundles.saxon [osgi.identity; osgi.identity="org.apache.servicemix.bundles.saxon"; type="osgi.bundle"; version:Version="9.4.0.7_1"]
issueID:ARIES-1445
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResolveContext.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
texts:Bundles that are not direct dependencies of a subsystem can be removed while still in use
Bundle A is a constituent of application subsystem S1
Bundle A is a constituent of application subsystem S2
Bundle A has a package import of b.package
Bundle B exports b.package
Bundle B imports c.package
Bundle C exports c.package
There is an obr repository with bundle b and c
Bundle B and C are not constituents
When installing S1 bundle B and C are added to the root subsystem to fullfill the requirements of bundle A
When installing S2 everything is still working.
Start S1.
Now we uninstall S1 and bundle C is removed.
refreshBundles
Subsystem S2 won't start anymore because of that.
The testcase uses different bundle ids.
issueID:ARIES-1446
type:Bug
changed files:
texts:ResolveContext should stop searching for capabilities once it found a match
If I read the osgi.enterprise-5.0.0 spec correctly it says in section 134.6 that searching for capabilities should stop once a repository returns results. The current resolvecontext does not do this but instead keeps on searching which might return results.
Don't know if this causes behaviour that is not according to spec. but I can imagine that it might cause the resolver to have a more difficult time or it resolves to something that it should not.
issueID:ARIES-1447
type:Bug
changed files:
texts:JPAWeavingHook transforming with wrong classloader
PersistenceUnitInfo has a getNewTempClassLoader which includes both provider and persistence unit classloader. The provider classloader is important when enhancing the class, but now the transformations is only done against persistence unit classloader that doesn't yet have needed the dynamic imports in place.
As a workaround, I am mimicking the proper approach by using TempBundleDelegatingClassLoader in my patched version of WrappingTransformer
BTW: The org.apache.aries.jpa.container.weaving.packages (that seems to be completely removed from 2.x???) could be replaced with ASM code that looks for referenced packages before and after transformation and adds the difference to dynamic imports. How I'm adding packages manually because the wildcard approach just doesn't seem right.
org/apache/aries/jpa/container/weaving/impl/WrappingTransformer.java
@@ -26,7 +26,9 @@
 import javax.persistence.spi.ClassTransformer;
 
 import org.apache.aries.jpa.container.impl.NLS;
+import org.apache.aries.jpa.container.unit.impl.TempBundleDelegatingClassLoader;
 import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleReference;
 import org.osgi.framework.Constants;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.wiring.BundleCapability;
@@ -35,6 +37,7 @@
 
 class WrappingTransformer implements ClassTransformer {
   private final ClassTransformer delegate;
+  private final ServiceReference<?> persistenceProvider;
   private final Collection<String> packageImportsToAdd = new HashSet<String>();
   
   public WrappingTransformer(ClassTransformer delegate,
@@ -48,6 +51,7 @@
     }
     
     this.delegate = delegate;
+    this.persistenceProvider = persistenceProvider;
     
     Object packages = persistenceProvider.getProperty("org.apache.aries.jpa.container.weaving.packages");
     
@@ -56,7 +60,7 @@
         packageImportsToAdd.add(s);
       }
     } else {
-      Bundle provider = persistenceProvider.getBundle();
+      Bundle provider = persistenceProvider.getBundle(); 
       String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" +
       provider.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE 
       + "=" + provider.getVersion();
@@ -70,11 +74,25 @@
 
   public WrappingTransformer(ClassTransformer transformer) {
     delegate = transformer;
+    persistenceProvider = null;
   }
 
   public byte[] transform(ClassLoader arg0, String arg1, Class<?> arg2,
       ProtectionDomain arg3, byte[] arg4) throws IllegalClassFormatException {
-    return delegate.transform(arg0, arg1, arg2, arg3, arg4);
+    Bundle bundle = this.persistenceProvider.getBundle();
+    BundleWiring bundleWiring = bundle.adapt(BundleWiring.class);
+    ClassLoader classLoader = bundleWiring.getClassLoader();
+    BundleReference bundleReference = (BundleReference) arg0;
+    bundle = bundleReference.getBundle();
+    classLoader = new TempBundleDelegatingClassLoader(bundle, classLoader);
+    Thread thread = Thread.currentThread();
+    ClassLoader contextClassLoader = thread.getContextClassLoader();
+    thread.setContextClassLoader(classLoader);
+    try {
+      return delegate.transform(classLoader, arg1, arg2, arg3, arg4);
+    } finally {
+      thread.setContextClassLoader(contextClassLoader);
+    }
   }
   
   public Collection<String> getPackagesToAdd() {
issueID:ARIES-1448
type:Improvement
changed files:
texts:Fix Issues reported by Sonar

issueID:ARIES-1449
type:Bug
changed files:
texts:Multiple subsystem instances with the same location can be concurrently installed.
Multiple subsystem instances with the same location can be installed successfully if the installations happen concurrently and before any one of the installations completes.
Note this issue will also apply to other checks such as checking for identical locations but different symbolic names, versions, and types.
issueID:ARIES-145
type:Bug
changed files:jmx/jmx-api/src/main/java/org/osgi/jmx/framework/BundleStateMBean.java
texts:Value of PERSISTENTLY_STARTED constant in BundleStateMBean has spelling mistake

issueID:ARIES-1450
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/AnnotationProcessor.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionToken.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/ComponentTxData.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Cache computation of effective txType

issueID:ARIES-1451
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
texts:BundleResourceInstaller.installBundle() throws IllegalAccessException
Exception in BundleResourceInstaller.installBundle() invoking getContent() on the RespositoryContent resource being installed. Problem occurs if the RespositoryContent implementation type is not of visibility "public" (even though the getContent() method itself is public):
java.lang.IllegalAccessException: Class org.apache.aries.subsystem.core.internal.BundleResourceInstaller can not access a member of class org.apache.aries.subsystem.itests.defect.AriesReflectionTest$PrivateRepositoryContent with modifiers "public"
issueID:ARIES-1452
type:Bug
changed files:
texts:Subsystem throws exception when bundle imports osgi framework
When building an OSGi subsystem feature, I created two bundles, an api and a core. The core has following embedded dependency:
<dependency>
<groupId>com.squeakysand.osgi</groupId>
<artifactId>squeakysand-osgi</artifactId>
<version>0.4.0</version>
</dependency>
Using previous dependency in the core, it creates the Import-Package org.osgi.framework;version="[1.5,2)” when using maven-bundle-plugin version 3.0.1.
Starting up this subsystem through the webconsole subsystem plugin of Apache Felix, following error is thrown:
13.11.2015 22:01:23.849 ERROR [Thread-95] org.apache.sling.extensions.threaddump.internal.Activator Uncaught exception in Thread Thread[Thread-95,5,main]
org.osgi.service.subsystem.SubsystemException: org.osgi.service.resolver.ResolutionException: Uses constraint violation. Unable to resolve resource idoneus.mdm-parser-core [/var/folders/h1/k9tr352j615f8jrrzh5yr5b80000gn/T/inputStreamExtract734624941409606295.zip/mdm-parser-core-1.0.0-SNAPSHOT.jar] because it is exposed to package 'org.osgi.framework' from resources org.apache.felix.framework [org.apache.felix.framework [0](R 0)] and org.apache.felix.framework [org.apache.felix.framework [0](R 0)] via two dependency chains.
Chain 1:
idoneus.mdm-parser-core [/var/folders/h1/k9tr352j615f8jrrzh5yr5b80000gn/T/inputStreamExtract734624941409606295.zip/mdm-parser-core-1.0.0-SNAPSHOT.jar]
import: (&(osgi.wiring.package=org.osgi.framework)(&(version>=1.5.0)(!(version>=2.0.0))))
export: osgi.wiring.package: org.osgi.framework
org.apache.felix.framework [org.apache.felix.framework [0](R 0)]
Chain 2:
idoneus.mdm-parser-core [/var/folders/h1/k9tr352j615f8jrrzh5yr5b80000gn/T/inputStreamExtract734624941409606295.zip/mdm-parser-core-1.0.0-SNAPSHOT.jar]
import: (&(osgi.wiring.package=org.apache.sling.event.jobs.consumer)(&(version>=1.2.0)(!(version>=2.0.0))))
export: osgi.wiring.package=org.apache.sling.event.jobs.consumer; uses:=org.osgi.service.event
org.apache.sling.event [org.apache.sling.event [103](R 103.0)]
import: (&(osgi.wiring.package=org.osgi.service.event)(version>=1.2.0)(!(version>=2.0.0)))
export: osgi.wiring.package=org.osgi.service.event; uses:=org.osgi.framework
org.apache.felix.eventadmin [org.apache.felix.eventadmin [9](R 9.0)]
import: (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)(!(version>=2.0.0)))
export: osgi.wiring.package: org.osgi.framework
org.apache.felix.framework [org.apache.felix.framework [0](R 0)]
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:395)
This does not happen when I install the api and core as seperate bundles in the OSGi container
issueID:ARIES-1453
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/FragmentHostCapability.java
texts:Fragment-Host requirements with version range do not match with FragmentHostCapability
According to http://wiki.osgi.org/wiki/Fragment-Host we can specify Fragment-host headers using version ranges. When we do that the requirement no longer matches on the capabilities in the aries subsystem implementation. It results in the errors below.
Reason for this is that the FragmentHostCapability only uses 'string' attributes which results in versions "9.6.1" and "10.0.0" being compared as if "10.0.0" is earlier than "9.6.1". A bundle host with version 9.6.1 therefore does not match the version range [9.6.0, 10.0.0). It should not do string comparison but have a real 'Version' instance to compare with.
Error installing subsystem: org.osgi.service.subsystem.SubsystemException: org.osgi.service.resolver.ResolutionException: Unable to resolve /var/folders/9b/nqy6w5xs6gz1m1q4g6gpfr_c0000gn/T/inputStreamExtract8702582580344751163.zip/ui-main-13.3.1.jar: missing requirement org.apache.aries.subsystem.core.archive.FragmentHostRequirement: namespace=osgi.wiring.host, attributes={}, directives={filter=(&(osgi.wiring.host=be.aca.ui-framework)(&(bundle-version>=9.3.0)(!(bundle-version>=10.0.0))))}, resource=/var/folders/9b/nqy6w5xs6gz1m1q4g6gpfr_c0000gn/T/inputStreamExtract8702582580344751163.zip/ui-main-13.3.1.jar
g! at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
at org.apache.felix.gogo.shell.Activator.run(Activator.java:75)
at java.lang.Thread.run(Thread.java:745)
Caused by: org.osgi.service.subsystem.SubsystemException: org.osgi.service.resolver.ResolutionException: Unable to resolve /var/folders/9b/nqy6w5xs6gz1m1q4g6gpfr_c0000gn/T/inputStreamExtract8702582580344751163.zip/ui-main-13.3.1.jar: missing requirement org.apache.aries.subsystem.core.archive.FragmentHostRequirement: namespace=osgi.wiring.host, attributes={}, directives={filter=(&(osgi.wiring.host=be.aca.ui-framework)(&(bundle-version>=9.3.0)(!(bundle-version>=10.0.0))))}, resource=/var/folders/9b/nqy6w5xs6gz1m1q4g6gpfr_c0000gn/T/inputStreamExtract8702582580344751163.zip/ui-main-13.3.1.jar
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:395)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:356)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:98)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:90)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:54)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:30)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:646)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:690)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:278)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:65)
at be.aca.subsystem.internal.DefaultSubsystemService.installFromRepo(DefaultSubsystemService.java:86)
at be.aca.subsystem.internal.DefaultSubsystemService.install(DefaultSubsystemService.java:47)
... 30 more
Caused by: org.osgi.service.resolver.ResolutionException: Unable to resolve /var/folders/9b/nqy6w5xs6gz1m1q4g6gpfr_c0000gn/T/inputStreamExtract8702582580344751163.zip/ui-main-13.3.1.jar: missing requirement org.apache.aries.subsystem.core.archive.FragmentHostRequirement: namespace=osgi.wiring.host, attributes={}, directives={filter=(&(osgi.wiring.host=be.aca.ui-framework)(&(bundle-version>=9.3.0)(!(bundle-version>=10.0.0))))}, resource=/var/folders/9b/nqy6w5xs6gz1m1q4g6gpfr_c0000gn/T/inputStreamExtract8702582580344751163.zip/ui-main-13.3.1.jar
at org.apache.felix.resolver.Candidates.populateResource(Candidates.java:285)
at org.apache.felix.resolver.Candidates.populate(Candidates.java:153)
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:148)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:373)
... 42 more
issueID:ARIES-1454
type:Bug
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:NPE in TxInterceptor
I am running some load tests agains an osgi app, which is running inside karaf 4.0.2, using Aries Blueprint and JPA (Hibernate) .
The test is using multiple threads (10) to issue some random calls to the application.
Sometimes, randomly, some of the call throwing NPE in TxInterceptor:
java.lang.NullPointerException
        at org.apache.aries.transaction.TxInterceptorImpl.postCallWithReturn(TxInterceptorImpl.java:101)[66:org.apache.aries.transaction.blueprint:1.1.1]
        at org.apache.aries.blueprint.proxy.SingleInterceptorCollaborator.postInvoke(SingleInterceptorCollaborator.java:75)[48:org.apache.aries.blueprint.core:1.4.4]
        at Proxy65968de8_a064_4203_9a53_5f0c8e536279.lockAll(Unknown Source)[:]
The NPE is thrown from "postCallWithReturn" and "postCallWithException" in following line:
 token.getCoordination().end();
The "getCoordination()" call in above line is returning null.
As I mentioned, it is happening from time to time. sometimes after 20 mins, sometimes after hours of test execution and it is happening in different transactional methods in different classes of the application.
issueID:ARIES-1455
type:Bug
changed files:
texts:JpaComponentProcessor is not scanning the nested beans inside service definition
<service interface="com.foo.MyDao">
        <bean class="com.foo.impl.MyDaoImpl">
            <tx:transaction method="*" value="Required"/>
        </bean>
</service>
MyDaoImpl has a property of type EntityManager annotated with PersistenceUnit but "JpaComponentProcessor" is not able to properly scan the nested bean inside above service definition to find the annotated property.
looking at JpaComponentProcessor source, following code snippet, one can see it
is checking if component definition is an instance of "MutableBeanMetadata" which is not the case when the bean definition is nested in service definition (it is an instance of "MutableServiceMetadata")
Set<String> components = new HashSet<String(cdr.getComponentDefinitionNames());
for (String component : components) {
     ComponentMetadata compDef = cdr.getComponentDefinition(component);
     if (compDef instanceof MutableBeanMetadata && !((MutableBeanMetadata)compDef).isProcessor()) {
                handleComponent((MutableBeanMetadata)compDef, bundle, cdr, container);
     }
}
As a workaround I can change the blueprint definition to following:
<bean id="myBean" class="com.foo.impl.MyDaoImpl">
     <tx:transaction method="*" value="Required"/>
</bean>
<service interface="com.foo.MyDao">
    <ref component-id="myBean" />
</service>
issueID:ARIES-1456
type:New Feature
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ParserContextImpl.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiExtension.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringExtension.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringNamespaceHandlerResolver.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiCompendiumNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringBeanProcessor.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/Activator.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintBeanFactory.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiExtender.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/Activator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ParserContext.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/NamespaceHandler2.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringApplicationContext.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/NamespaceHandlerSet.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BeansNamespaceHandler.java
texts:Spring support
Support for spring namespaces would be a great feature and would allow users to completely get rid of spring-dm easily.
issueID:ARIES-1457
type:Bug
changed files:
texts:Custom interceptor prohibits declarative transactions
When using declarative transactions in Karaf 4 (Aries transaction blueprint 2.0.0),
adding a custom interceptor seems to conflict with the aries TxInterceptor.
Expected behavior
Interceptor enabled for service A
Service A with TxType.REQUIRED calls service B with TxType.MANDATORY and service B will be executed in a transaction.
Actual behavior
Service B throws exception: No transaction present when calling method that mandates a transaction.
(TxInterceptor was not registered for service A and therefore no tx started)
Disabling the interceptor (removing declaration in blueprint),
transactional behaviour works as expected (B is executed in a transaction).
Custom interceptor + tx behavior works as expected when using transaction blueprint 1.1.1 and delcaring transactions in blueprint.
Example to reproduce the issue:
https://github.com/fwassmer/transaction-chain/
issueID:ARIES-1458
type:Task
changed files:
texts:Subsystems 2.0.8 Release
This will track the 2.0.8 release of Subsystems.
subsystem-core
previous release 2.0.6
svn diff -r 1711061
http://svn.apache.org/viewvc/aries/tags/org.apache.aries.subsystem.core-2.0.6/
ARIES-1451 BundleResourceInstaller.installBundle() throws IllegalAccessException
ARIES-1453 Fragment-Host requirements with version range do not match with FragmentHostCapability
subsystem-api
previous release 2.0.6
svn diff -r 1711055
http://svn.apache.org/viewvc/aries/tags/org.apache.aries.subsystem.api-2.0.6/
No changes
subsystem-bundle
previous release 2.0.6
svn diff -r 1711065
http://svn.apache.org/viewvc/aries/tags/org.apache.aries.subsystem-2.0.6/
No changes
issueID:ARIES-1459
type:Bug
changed files:
texts:Installing subsystem with large number of constituents takes forever or gives out of memory
I think this is caused by the fact that all the bundles inside the subsystem are attempted to be resolved in one shot. When you have 200+ bundles that gives an enormous resolution problem space.
In a plain OSGi framework such a scenario can be helped by installing bundles in stages, making life easier for the resolver.
Maybe subsystems can support this too. We could use the 'start-order' directive on the Subsystem-Content header to guide resolution and only resolve bundles on the current start-order as we progress through those.
issueID:ARIES-146
type:Bug
changed files:
texts:KeyAlreadyExistsException thrown when running PackageStateMBean.listPackages()
javax.management.RuntimeMBeanException
javax.management.openmbean.KeyAlreadyExistsException: javax.management.openmbean.KeyAlreadyExistsException: Argument val
ue's index, calculated according to this TabularData instance's tabularType, already refers to a value in this table.
The exception is being thrown because there are duplicated package names in the OSGi framework.
issueID:ARIES-1460
type:Improvement
changed files:blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/SimpleNamespaceHandlerSet.java
texts:Using blueprint-noosgi, unable to resolve absolute schemas to their local resources
When using blueprint-noosgi, it seems its schema handling code (i.e., SimpleNamespaceHandlerSet#getSchema) can resolve relative schemas but not absolute schemas to their corresponding local resources. As a result, one will require the Internet connection to resolve those schemas.
It will be practical to avoid making an unnecessary remote schema retrieval.
issueID:ARIES-1461
type:Bug
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/BaseActivator.java
spi-fly/spi-fly-examples/spi-fly-example-client3-bundle/src/main/java/org/apache/aries/spifly/examples/client3/impl/Activator.java
spi-fly/spi-fly-examples/spi-fly-example-provider3-bundle/src/main/java/org/apache/aries/spifly/mysvc/impl3/SPIProviderImpl.java
texts:Support SPI-Consumer/Provider headers for fragment bundles
I have a host bundle and I can't modify the content of the host bundle, So I created a fragment bundle and add the following header,
<SPI-Consumer>javax.ws.rs.ext.RuntimeDelegate#findDelegate</SPI-Consumer>
After adding this header to the fragment bundle and using it, the service is not working accordingly, Is this a limitation of SPI-Fly?..
Please note that if I edit and add the above header to the host bundle, it works accordingly.
issueID:ARIES-1462
type:Bug
changed files:
texts:Datasource JNDI service dependency not honoured

issueID:ARIES-1463
type:Bug
changed files:
texts:After a persistent unit refresh, the PersistentUnitInfo may return an old class loader

issueID:ARIES-1464
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/FilteredClassFinder.java
texts:Improve blueprint-maven-plugin: add prototype-scope support
I propose adding support for configuring bean scope using blueprint-maven-plugin, e.g. annotating a class with `@Scope("prototype")` will add `scope = "prototype"` to the bean's xml element.
The JSR-330 spec says that a class can be defined as a prototype-scoped bean by applying only the @Named annotation, and that to give the bean a singleton-scope the @Singleton annotation should then be applied (either with or replacing @Named), e.g.
@Singleton class AutonamedSingleton {}
@Singleton @Named("foo") class NamedSingleton {}
@Named AutonamedPrototype {}
@Named("bar") NamedPrototype {}
The pull request implements this. NB this maintains backwards-compatibility with classes annotated using @Singleton or @Component, with or without @Named.
[~chris@die-schneider.net] is probably the person to review this.
issueID:ARIES-1465
type:Bug
changed files:
texts:Stopping the Subsystem-Core bundle does not remove synthesized bundles
The Aries Subsystems implementation generates synthesized bundles, such as:
org.osgi.service.subsystem.region.context.0
However, when the Aries Subsystem implementation is stopped/uninstalled these generated bundles should disappear. This is currently not happening.
issueID:ARIES-1466
type:Task
changed files:
texts:New JPA and Transaction xml schema should be published
Users have to use these links to sources now:
https://raw.githubusercontent.com/apache/aries/trunk/jpa/jpa-blueprint/src/main/resources/jpa20.xsd
https://raw.githubusercontent.com/apache/aries/trunk/transaction/transaction-blueprint/src/main/resources/org/apache/aries/transaction/parsing/transactionv20.xsd
It will be nice we publish xsds somewhere on Aries site.
issueID:ARIES-1467
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
texts:Blueprint creates unnecessary prototype bean instances
After creating all necessary prototype instances, blueprint create one more instance for each prototype bean. It can be a huge trouble when there is a deep prototype bean tree.
Here is simple example to demonstrate it: http://www.lorien.biz/karaf/test.zip
– normal creation –
Server1 create bpt.test.internal.Server1@67ea2a02
Server2 create bpt.test.internal.Server2@72af85f3
Consumer1 create bpt.test.internal.Consumer1@35fc15f7
injected_s1 bpt.test.internal.Server1@67ea2a02
injected_s2 bpt.test.internal.Server2@72af85f3
MyServlet create bpt.test.internal.MyServlet@612307e7
injected_c bpt.test.internal.Consumer1@35fc15f7
– normal creation ends –
– unnecessary creation of Server 1 –
Server1 create bpt.test.internal.Server1@6f878ffd
– unnecessary creation of Server 1 ends –
– unnecessary creation of Server 2 –
Server2 create bpt.test.internal.Server2@2cfe643f
– unnecessary creation of Server 2 ends –
– unnecessary creation of Consumer (with its all dependencies which are prototypes too) –
Server1 create bpt.test.internal.Server1@71677b2c
Server2 create bpt.test.internal.Server2@40c7bfde
Consumer1 create bpt.test.internal.Consumer1@7a05a90b
injected_s1 bpt.test.internal.Server1@71677b2c
injected_s2 bpt.test.internal.Server2@40c7bfde
– unnecessary creation of Consumer ends –
issueID:ARIES-1468
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java
texts:Aries Transaction Blueprint bundle fails to start sometimes
I have found some unstable behavior when starting Karaf 4.0.3.
Apache Aries Transaction Blueprint 2.0.0 bundle start success is random.
I have to restart Karaf several (about 3 to 10) times to get the error.
It looks like it is some sort of a bundle race or something.
The list of features to be installed:
feature:install -v eventadmin;
feature:install -v http-whiteboard;
feature:install -v jdbc;
feature:install -v pax-jdbc-pool-dbcp2;
feature:install -v eclipselink/2.6.0;
feature:install -v jpa/2.2.0;
Exception during Karaf start:
karaf@root()> ERROR: Bundle org.apache.aries.blueprint.core [13] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.addingService(NamespaceHandlerRegistryImpl.java:126)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901)
at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)
at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)
at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)
at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)
at org.apache.felix.framework.Felix.registerService(Felix.java:3549)
at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:459)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:193)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:710)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:385)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask.run(FutureTask.java:262)
at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask.run(FutureTask.java:262)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)
Cut from bundle:list command result:
108 | Active | 80 | 1.2 | javax.interceptor API
109 | Active | 80 | 1.2 | javax.transaction API
110 | Active | 80 | 1.1.1 | Apache Aries Transaction Blueprint
111 | Failure | 80 | 2.0.0 | Apache Aries Transaction Blueprint
112 | Active | 80 | 1.3.0 | Apache Aries Transaction Manager
Diag command result for problem bundle:
Apache Aries Transaction Blueprint (111)
----------------------------------------
Status: Failure
Blueprint
11.11.15 12:06
Exception:
Service already unregistered.
java.lang.IllegalStateException: Service already unregistered.
at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:140)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:195)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:710)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:385)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask.run(FutureTask.java:262)
at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask.run(FutureTask.java:262)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)
I have recorded some logs with DEBUG level. One with normal start and another with problem start.
http://www.lorien.biz/karaf/logs.zip
I have recorded a video to demonstrate it: http://www.youtube.com/watch?v=GzFy_suhwNg
I've never seen Transaction bundle fail without exception from JMX. But I've seen exception from JMX without Transaction bundle fail.
issueID:ARIES-1469
type:Bug
changed files:
texts:JPA container should not embed spec packages
Currently Aries JPA container embeds two spec packages:
org.osgi.service.jdbc and org.osgi.service.jpa.
These packages are now also provided by bundles provided by the OSGi alliance. So we should remove the embedding and instead install the official bundles.
This will avoid problems like the linked issue reported at pax jdbc where the spec package is provided by different bundles.
issueID:ARIES-147
type:Bug
changed files:
texts:The Aries JPA container should ignore WAB files
Java EE defines integration between JPA and Servlets. The Aries JPA container cannot provide this level of integration with an arbitrary Serviet container, so it should ignore WAB files. The Aries JPA code could later be refactored to provide useful function (e.g. a peristence xml parsing service, and a Transaction Scoped EntityManger).
issueID:ARIES-1470
type:Bug
changed files:
texts:java.util.ServiceConfigurationError
Deploying application that relies on 3rd party framework that's using ServiceLoader into Eclipse Virgo intermittenly causes the following exception to be thrown:
Caused by: java.util.ServiceConfigurationError: org.axonframework.serializer.ContentTypeConverter: Provider org.axonframework.serializer.converters.ByteArrayToInputStreamConverter not a subtype
at java.util.ServiceLoader.fail(ServiceLoader.java:231)
at java.util.ServiceLoader.access$300(ServiceLoader.java:181)
at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:369)
at java.util.ServiceLoader$1.next(ServiceLoader.java:445)
at org.axonframework.serializer.ChainingConverterFactory.<init>(ChainingConverterFactory.java:51)
at org.axonframework.serializer.AbstractXStreamSerializer.<init>(AbstractXStreamSerializer.java:106)
at org.axonframework.serializer.AbstractXStreamSerializer.<init>(AbstractXStreamSerializer.java:81)
at org.axonframework.serializer.AbstractXStreamSerializer.<init>(AbstractXStreamSerializer.java:70)
at org.axonframework.serializer.xml.XStreamSerializer.<init>(XStreamSerializer.java:53)
at org.axonframework.contextsupport.spring.FileSystemEventStoreBeanDefinitionParser.doParse(FileSystemEventStoreBeanDefinitionParser.java:76)
at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85)
at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:59)
at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1438)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:195)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)
... 21 common frames omitted
Have tried to weave static bundle using SPI Fly, but the problem persists.
issueID:ARIES-1472
type:Bug
changed files:blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationNsHandler.java
blueprint/blueprint-authz/src/main/java/org/apache/aries/blueprint/authorization/impl/AuthorizationBeanProcessor.java
texts:Precautions to avoid influencing other processors

issueID:ARIES-1473
type:Bug
changed files:
texts:Aries JPA creates derby.log outside target

issueID:ARIES-1474
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:blueprint-maven-plugin: Inherited init/destroy methods are ignored
Current behaviour:
public class A {
    @PostConstruct
    public void init() {}

    @PreDestroy
    public void destroy() {}
}
public class B extends A {}
public class C extends B {
    @Override
    public void init() {}

    @PostConstruct
    public void secondInit()
}
Three problems:
The A.destroy() method is ignored
The C.init() method overrides A.init() without the @PostConstruct annotation, but is still taken to be the init method. This means the subclass can't disable a superclass' init method.
The C.secondInit() method is silently ignored because another init method is found first.
Patch incoming...
issueID:ARIES-1475
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:blueprint-maven-plugin: support methods annotated with @Transactional
Currently @Transactional is only supported when annotating a class. Blueprint supports specifying the transactional type for all methods and/or for individual methods by adding more <tx:transaction ../> elements.
Patch incoming...
issueID:ARIES-1476
type:Improvement
changed files:
texts:blueprint-maven-plugin: support 0 or multiple OsgiServiceProvider#classes
Currently blueprint-maven-plugin supports annotating beans with @OsgiServiceProvider(classes = ...) to expose the bean as an OSGi service, but only when given exactly 1 interface class to expose it under.
This improvement adds support for passing 0 classes, which creates:
<service ref="beanRef" auto-export="interfaces"/>
and also adds support for passing multiple classes, which creates:
<service ref="beanRef">
    <interfaces>
        <value>com.example.ServiceA</value>
        <value>com.example.ServiceB</value>
    </interfaces>
<service/>
Patch incoming...
issueID:ARIES-1477
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:NPE in NamespaceHandlerRegistryImpl

issueID:ARIES-1478
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Avoid possible IllegalStateException when registering a service

issueID:ARIES-1479
type:Improvement
changed files:
texts:Add service requirements and capabilities

issueID:ARIES-148
type:Bug
changed files:
texts:The Aries JPA container should not pass the "type" property to createEntityManager
The type property in the Map of Persistence properties is for internal use only. It should be removed before the Map is passed to the EntityManagerFactory.
Also, the key should be qualified with org.apache.aries.jpa.container.context.
issueID:ARIES-1480
type:New Feature
changed files:blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiExtension.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiCompendiumNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringBeanProcessor.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiExtender.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BeansNamespaceHandler.java
texts:Complete spring extender support
New extender supporting META-INF/spring/*.xml
issueID:ARIES-1481
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Introspector.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Introspector.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:blueprint-maven-plugin: fix detection of inherited @OsgiService/@PersistenceContext/Unit-annotated fields
This is because @Inject-annotated fields are found in the Bean.resolve(Matcher) method which recursively searches all parent classes for declared fields, whereas @PersistenceContext/Unit-annotated fields are discovered in Bean.getPersistenceFields() by simply using the fields declared in the bean class. Similarly, @OsgiService-annotated fields are discovered in Context.addServiceRefs(Class) by looking through the fields declared in the bean class.
This commit extracts the field-getting algorithm used for finding
@Inject fields to a utility method which is used for finding fields for the other
annotations.
issueID:ARIES-1482
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/BlueprintExtenderService.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiExtension.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiCompendiumNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringBeanProcessor.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiExtender.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BeansNamespaceHandler.java
texts:Support programmatic creation of blueprint container with specific additional namespaces

issueID:ARIES-1483
type:Bug
changed files:
texts:NullPointerException in Blueprint with karaf 4.0.3 and Hibernate
karaf@root()> ERROR: Bundle org.apache.aries.blueprint.core [13] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.addingService(NamespaceHandlerRegistryImpl.java:126)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901)
at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)
at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)
at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)
at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)
at org.apache.felix.framework.Felix.registerService(Felix.java:3549)
at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:459)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:193)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:710)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:385)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask.run(FutureTask.java:262)
at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask.run(FutureTask.java:262)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)
Here is how to reproduce it. I am really new to karaf and aries so these are some commands I collected from examples/tutorials for JPA with karaf:
start a clean initial karaf 4.0.3
feature:repo-add pax-jdbc 0.7.0
feature:install hibernate jpa
feature:install jdbc pax-jdbc-config pax-jdbc-pool-dbcp2 transaction
restart karaf
The exception doesn't appear everytime, so maybe some more restarts are needed. I hope you can reproduce it with that.
issueID:ARIES-1484
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Only write blueprint context if any beans are discovered

issueID:ARIES-1485
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
texts:java.lang.UnsupportedOperationException when a hosted capability is being inserted by the resolver.
This is similar to ARIES-1439. There are two resolve contexts in subsystems. One is used for the "real" resolution of a subsystem at start time. This is used for all subsystems and the one that was modified in that other issue. The second one is used in order to calculate the dependencies of a subsystem as part of installation. This one is only used for applications and features since composites explicitly define their sharing policies.
Although, based on FELIX-4727, the resolver will be updated to implement the optional add() method, there are releases out there that don't. The same change made in ARIES-1439 should be made in the second resolve context for consistency and to avoid any issues.
Caused by: java.lang.UnsupportedOperationException
at org.apache.felix.resolver.util.CopyOnWriteList.add(CopyOnWriteList.java:135)
at org.apache.aries.subsystem.core.internal.DependencyCalculator$ResolveContext.insertHostedCapability(DependencyCalculator.java:86)
at org.apache.felix.resolver.Candidates.prepare(Candidates.java:934)
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:232)
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:158)
at org.apache.aries.subsystem.core.internal.DependencyCalculator.calculateDependencies(DependencyCalculator.java:163)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeRequirements(RawSubsystemResource.java:447)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:138)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:91)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:54)
issueID:ARIES-1486
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
texts:can't create proxy on java 8 vm for interfaces containing lambda
Creating proxy of an interface containing a default method implemented with a lambda will result in a invalid Proxy class file (see attached test case).
issueID:ARIES-1487
type:Bug
changed files:
texts:JPA waits forever on osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/DataSource)
A list of jndiServices is kept up to date and the jpa-container bundles waits for a matching service to be available.
However it only supports the following syntax:
<jta-data-source>osgi:service/jdbc/DataSource</jta-data-source>
and not the equivalent
<jta-data-source>osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/DataSource)</jta-data-source>
This is a regression.
issueID:ARIES-1489
type:New Feature
changed files:
texts:Create repository for Aries JPA

issueID:ARIES-149
type:Improvement
changed files:samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntry.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewAuthor.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthorManager.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddCommentForm.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogCommentManager.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntry.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Author.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/BlogPersistenceService.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/Blog.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/JNDIHelper.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogEntryImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BloggingService.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogCommentImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthor.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorManagerImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewBlog.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogCommentManagerImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/BlogCommentService.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogComment.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntryForm.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogEntryManagerImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddComment.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/Comment.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BloggingServiceImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Entry.java
texts:Refactor the blog sample to be able to swap the persistence layer and add a comment service

issueID:ARIES-1490
type:New Feature
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/ContentInfo.java
esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:The esa maven plugin provides more flexibility when creating the subsystem manifest
When determining which dependencies are included in the archive, the ESA maven plugin provides different possibilities as to which dependencies are included (transitive dependencies vs only direct dependencies).
When generating the subsystem manifest, the plugin always decides to only list the direct dependencies and therefore it does not include the transitive dependencies as part of the subsystem content even though they are present in the archive.
Additionally, the type of the dependencies (e.g. 'pom') is not taken into account. This makes it impossible to extract a sequence of related dependencies into a separate pom file to improve the overall readability. The readability would improve greatly if a related set of dependencies could be imported from another pom.
issueID:ARIES-1492
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
texts:Exception creating a subclass proxy of class with package-private access modifer.
Creating a subclass proxy of class with package-private access modifer throws an IllegalArgumentException:
java.lang.IllegalArgumentException: null
at org.objectweb.asm.commons.Method.getMethod(Method.java:175)
at org.objectweb.asm.commons.Method.getMethod(Method.java:144)
at org.apache.aries.proxy.impl.gen.ProxySubclassAdapter.visit(ProxySubclassAdapter.java:154)
at org.objectweb.asm.ClassReader.accept(ClassReader.java:622)
at org.objectweb.asm.ClassReader.accept(ClassReader.java:506)
at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.processClass(ProxySubclassGenerator.java:255)
at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.generateAndLoadSubclass(ProxySubclassGenerator.java:234)
at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.getProxySubclass(ProxySubclassGenerator.java:130)
at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.getProxySubclass(ProxySubclassGenerator.java:75)
at org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest.testPackageAccessCtor(ProxySubclassGeneratorTest.java:190)
issueID:ARIES-1494
type:Bug
changed files:
texts:Exception when calling a transactional method twice from a non transaction method
This issue was reported by Nicolas Dutertry on the karaf user list:
http://karaf.922171.n3.nabble.com/JPA-and-transaction-issue-in-Karaf-4-0-4-td4045208.html
He also provided a repository with a demo (which I forked):
https://github.com/cschneider/test-jpa
In short TestServiceImpl has a non Transactional method:
public void delete(String... names) {
for (String name : names)
{ System.out.println("Deleting " + name); deleteManager.delete(name); }
}
It calls DeleteManager
@Transactional
public void delete(String lastName)
{ Query query = entityManager.createQuery( "delete from Person where lastName = :lastName"); query.setParameter("lastName", lastName); query.executeUpdate(); }
If the method TestServiceImpl.delete is called with one name then it works.
If it is called with two names it fails.
It is not even necessary to first create the person records to show the error.
A workaround is to make the method TestServiceImpl.delete also transactional. Then it works.
I will create a test case in the jpa code and fix the issue.
issueID:ARIES-1497
type:Bug
changed files:
texts:jpa-support XAJpaTemplate does not properly handle RollbackException
There are a couple of problems addressed here:
1. No checked exceptions ever reach the safeRollback method in XAJpaTemplate. This is due to the fact that safeFinish catches and wraps via wrapThrowable. This means that the shouldRollback logic will always (or almost always) be true, because no checked exceptions have the opportunity to bubble-up as-is from safeFinish.
2. Because of the above problem, javax.transaction.RollbackException events are not properly handled since they result in another rollback attempt.
The proposed fix (and patch) is to allow RollbackExceptions to bubble up from safeFinish, thus allowing for their direct passing to safeRollback. Basically, because this is a checked exception, shouldRollback will be false during safeRollback handling, thus preventing a rollback attempt while this exception is propagating. Additionally, because safeRollback calls safeFinish which ultimately calls the corresponding TransactionAttribute.finish method, then the logic therein to issue a rollback in the event of STATUS_MARKED_ROLLBACK will be executed when this exception is propagating. Thus, no other special handling is really required.
Please validate and correct my statement of the problem and my fix.
issueID:ARIES-1498
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:NullPointerException NPE Blueprint Container AbstractServiceReferenceRecipe setSatisfied
[2/28/16 6:12:25:150 EST] 00000010 LogService-115-BPCompWABClient E CWWKE0701E: FrameworkEvent ERROR Bundle:BPCompWABClient(id=115) java.lang.NullPointerException
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.setSatisfied(AbstractServiceReferenceRecipe.java:419)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceAdded(AbstractServiceReferenceRecipe.java:361)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:341)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:109)
at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:915)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:862)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:801)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:127)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:225)
at org.eclipse.osgi.internal.framework.BundleContextImpl.registerService(BundleContextImpl.java:464)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:485)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:193)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:739)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:406)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:275)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:483)
at java.util.concurrent.FutureTask.run(FutureTask.java:274)
at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:483)
at java.util.concurrent.FutureTask.run(FutureTask.java:274)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:190)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1157)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:627)
at java.lang.Thread.run(Thread.java:798)
Event:org.osgi.framework.FrameworkEvent[source=BPCompWABClient_1.0.0 [115]]
issueID:ARIES-1499
type:Bug
changed files:
texts:Refreshing a persistent bundle leaves it in the grace period blueprint state

issueID:ARIES-150
type:Bug
changed files:util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
texts:ZipFileImpl.toURL() returning incorrect results
One line fix.
issueID:ARIES-1500
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/GenericType.java
texts:Fix wildcard types support
Let's take a bean with the method setSomething(Something<T>) called via blueprint with another bean implementing Something => exception saying that bean conversion is not possible. But, if I change the method signature without the generic type setSomething(Something), then it works as expected.
Blueprint should not care for the generic type as Java is type erasure and do not exceed the spec.
There is no nice work around. Have to change all APIs used via Blueprint and take note for all deviations. This is really heavy.
issueID:ARIES-1501
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BlueprintRegistry.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Argument.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Add constructor injection in blueprint-maven-plugin

issueID:ARIES-1502
type:Bug
changed files:
texts:Blueprint files are not handled in fragments
This issue description changed due to investigations and the evolution of my comprehension.
I made two bundles, a host and a fragment attached to the host.
The host defines the Bundle-Blueprint manifest header specifying for instance a single file called bp.xml.
The fragment defines several files in the default OSGI-INF/blueprint folder, none named bp.xml.
The fragment Blueprint files are not handled. Only a bp.xml would. As the fragment Bundle-Blueprint header is not taken into account (as per spec 121.3.4), is it normal not to handle fragment Blueprint files stored in the default OSGI-INF/blueprint folder?
issueID:ARIES-1503
type:Bug
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/NamespaceHandler2.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/MissingNamespaceException.java
texts:Timing issue when cm blueprint references ext namespaces
Since version 1.0.6, blueprint-cm's XSDs started to import ext namespaces, to reflect Java hierarchy of org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder and org.apache.aries.blueprint.ext.PropertyPlaceholder, however, sometimes we fail with:
org.xml.sax.SAXParseException; systemId: jar:file:/home/ggrzybek/.m2/repository/org/apache/aries/blueprint/org.apache.aries.blueprint.cm/1.0.7/org.apache.aries.blueprint.cm-1.0.7.jar!/org/apache/aries/blueprint/compendium/cm/blueprint-cm-1.0.0.xsd; lineNumber: 80; columnNumber: 79; src-resolve: Cannot resolve the name 'ext100:ignore-missing-locations' to a(n) 'attribute declaration' component.
 at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
 at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134)
 at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:396)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaErr(XSDHandler.java:4158)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaError(XSDHandler.java:4141)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getGlobalDecl(XSDHandler.java:1674)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDAttributeTraverser.traverseLocal(XSDAttributeTraverser.java:90)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDAbstractTraverser.traverseAttrsAndAttrGrps(XSDAbstractTraverser.java:615)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDAttributeGroupTraverser.traverseGlobal(XSDAttributeGroupTraverser.java:145)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.traverseGlobalDecl(XSDHandler.java:1897)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getGlobalDecl(XSDHandler.java:1772)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDAttributeGroupTraverser.traverseLocal(XSDAttributeGroupTraverser.java:80)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDAbstractTraverser.traverseAttrsAndAttrGrps(XSDAbstractTraverser.java:643)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDComplexTypeTraverser.processComplexContent(XSDComplexTypeTraverser.java:1123)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDComplexTypeTraverser.traverseComplexContent(XSDComplexTypeTraverser.java:836)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDComplexTypeTraverser.traverseComplexTypeDecl(XSDComplexTypeTraverser.java:315)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDComplexTypeTraverser.traverseGlobal(XSDComplexTypeTraverser.java:191)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.traverseGlobalDecl(XSDHandler.java:1884)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getGlobalDecl(XSDHandler.java:1772)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDElementTraverser.traverseNamedElement(XSDElementTraverser.java:405)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDElementTraverser.traverseGlobal(XSDElementTraverser.java:242)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.traverseSchemas(XSDHandler.java:1429)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.parseSchema(XSDHandler.java:626)
 at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:613)
 at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:572)
 at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:538)
 at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:255)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.createSchema(NamespaceHandlerRegistryImpl.java:347)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.getSchema(NamespaceHandlerRegistryImpl.java:261)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.access$300(NamespaceHandlerRegistryImpl.java:75)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.getSchema(NamespaceHandlerRegistryImpl.java:557)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:321)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
 at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
 at java.lang.Thread.run(Thread.java:745)
working on PR right now
issueID:ARIES-1504
type:Bug
changed files:
texts:ServiceUnavailableException when a Karaf-Feature gets uninstalled and re-installed
I get a strange exception when I uninstall and then re-install a feature on Karaf (without restarting Karaf). The referenced settings-service is available (I can see it in the Karaf Web-Console).
org.osgi.service.blueprint.container.ServiceUnavailableException: The Blueprint container is being or has been destroyed: (objectClass=com.bechtle.sol.kernel.api.settings.SettingsService)
 at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:241)[42:org.apache.aries.blueprint.core:1.5.0]
 at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:56)[42:org.apache.aries.blueprint.core:1.5.0]
 at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:306)[42:org.apache.aries.blueprint.core:1.5.0]
 at Proxy9fcb3aef_066e_4c6c_a1b1_92d8b4c4d6c7.getInteger(Unknown Source)[:]
 at com.bechtle.sol.postevent.impl.registry.EventRegistry.tryToAquireProperty(EventRegistry.java:128)[213:com.bechtle.sol.postevent.impl:1.0.0.SNAPSHOT]
 at com.bechtle.sol.postevent.impl.messaging.listener.MessageListenerImpl.process(MessageListenerImpl.java:62)[213:com.bechtle.sol.postevent.impl:1.0.0.SNAPSHOT]
 at com.bechtle.sol.postevent.impl.messaging.listener.MessageListenerImpl.onMessage(MessageListenerImpl.java:52)[213:com.bechtle.sol.postevent.impl:1.0.0.SNAPSHOT]
 at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562)[127:org.apache.servicemix.bundles.spring-jms:4.0.7.RELEASE_3]
issueID:ARIES-1505
type:Bug
changed files:
texts:ServiceUnavailableException when a Karaf-Feature gets uninstalled and re-installed
I get a strange exception when I uninstall and then re-install a feature on Karaf (without restarting Karaf). The referenced settings-service is available (I can see it in the Karaf Web-Console).
org.osgi.service.blueprint.container.ServiceUnavailableException: The Blueprint container is being or has been destroyed: (objectClass=com.bechtle.sol.kernel.api.settings.SettingsService)
 at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:241)[42:org.apache.aries.blueprint.core:1.5.0]
 at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:56)[42:org.apache.aries.blueprint.core:1.5.0]
 at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:306)[42:org.apache.aries.blueprint.core:1.5.0]
 at Proxy9fcb3aef_066e_4c6c_a1b1_92d8b4c4d6c7.getInteger(Unknown Source)[:]
 at com.bechtle.sol.postevent.impl.registry.EventRegistry.tryToAquireProperty(EventRegistry.java:128)[213:com.bechtle.sol.postevent.impl:1.0.0.SNAPSHOT]
 at com.bechtle.sol.postevent.impl.messaging.listener.MessageListenerImpl.process(MessageListenerImpl.java:62)[213:com.bechtle.sol.postevent.impl:1.0.0.SNAPSHOT]
 at com.bechtle.sol.postevent.impl.messaging.listener.MessageListenerImpl.onMessage(MessageListenerImpl.java:52)[213:com.bechtle.sol.postevent.impl:1.0.0.SNAPSHOT]
 at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562)[127:org.apache.servicemix.bundles.spring-jms:4.0.7.RELEASE_3]
issueID:ARIES-1506
type:Bug
changed files:
texts:Blueprint xsd namespace url using http instead of https in documentation
on page http://aries.apache.org/modules/blueprint.html
the xsd mentioned fo rblueprint is http://www.osgi.org/xmlns/blueprint/v1.0.0 although we shoudl use the https version (even if it is redirected, not all tools supports it).
It should be replaced by https://www.osgi.org/xmlns/blueprint/v1.0.0
issueID:ARIES-1507
type:Bug
changed files:
texts:Extended filter is not included in OSGi service filter
I'm using the extended filter, eg
<reference id="foo" interface="org.foo.Bar" ext:filter="type=one"/>
but it isn't getting included in the service filter and thus the correct service isn't (always) getting imported.
In AbstractServiceReferenceRecipe.getOsgiFilter:
public String getOsgiFilter() {
if (filterRecipe != null && blueprintContainer instanceof BlueprintContainerImpl) {
BlueprintContainerImpl.State state = ((BlueprintContainerImpl) blueprintContainer).getState();
switch (state)
{ case InitialReferencesSatisfied: case WaitForInitialReferences2: case Create: case Created: return createOsgiFilter(metadata, getExtendedOsgiFilter()); }
}
return filter;
}
it doesn't include a case for the Populated state which is when the BlueprintContainerImpl calls trackServiceReferences. So when init calls
getBundleContextForServiceLookup().addServiceListener(this, getOsgiFilter());
the extended filter isn't included. Sometimes it does get the right service but it's timing and luck.
I can use the regular filter attribute but there are cases when I need to dynamically substitute it via cm-property-placeholder. I'm unclear as to why AbstractPropertyPlaceholder substitutes the extended filter but not the regular one but that's another topic.
issueID:ARIES-1508
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Name produced beans
Let beans created with annotation @Produces could be named with @Named
issueID:ARIES-1509
type:New Feature
changed files:
texts:Add obr repository

issueID:ARIES-151
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
texts:Remove references to com.ibm.osgi.blueprint in Apache Aries code
The org.apache.aries.blueprint.proxy.ProxySubclassGenerator class contains a reference to a com.ibm package that should not be there. Also, the org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest class contains a reference to the same com.ibm package in the javadoc.
issueID:ARIES-1510
type:Improvement
changed files:
texts:Allow to set the host name for endpoints in tcp transport
Currently the hostname for endpoint created by the tcp transport is created automatically. This does not always return the desired name / ip address. So it should be possible to override this using a config admin property.
issueID:ARIES-1513
type:New Feature
changed files:
texts:Migrate CXF DOSGi to Aries RSA
Extract the spec implementation from the CXF DOSGi code
Convert to Aries namespaces
Add itests that do not require CXF
issueID:ARIES-1514
type:New Feature
changed files:
texts:Add TCP transport provider
Transport that communicates over a TCP socket and uses Java serialization for the data.
This transport is meant to provide a simple means of testing the spec implementation and also to show how new transports can be created.
issueID:ARIES-1515
type:Bug
changed files:
texts:TCPServer fails to retrive method @reflection when using interfaced arguments
The following TCPServer.java
private Object invoke(String methodName, Object[] args)
throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
Class<?>[] parameterTypesAr = getTypes(args);
Method method = service.getClass().getMethod(methodName, parameterTypesAr);
try
{ return method.invoke(service, args); }
catch (Throwable e)
{ return e; }
}
bases the signature method on the argument's object implementation. However, this fails if the Service interface uses an interface in signature e.g. java.util.List
can't see a real straight forward solution, cause trying to match the signature with the interfaces extracted alike getType does, e.g doing an arg.getClass().getInterfaces() could be a mess, as there could be many interfaces.
As I note I do not have this problem with the CXF-WS transport so perhaps whatever is done there could be applied here
issueID:ARIES-1516
type:Improvement
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
texts:Make transaction manager independent from util at runtime

issueID:ARIES-1517
type:Improvement
changed files:
texts:Inject properties to persistence.xml
It would be great to being able to modify the persistence.xml's properties at startup (or even at runtime).
For now, you can inject a datasource at runtime, but the persistence.xml's properties like "hibernate.dialect" or "openjpa.jdbc.DBDictionary" cannot be changed, making the changes of datasource useless.
issueID:ARIES-1518
type:Bug
changed files:
texts:RSA exports services that don't match the DistributionProvider
When trying to export a service the RSA ignores the supported types of the DistributionProvider and exports the service regardless of the 'service.exported.configs' property
issueID:ARIES-1519
type:Bug
changed files:
texts:NPE when DistributionProvider has no remote.intents.supported
When a DistributionProvider has no 'remote.intents.supported' set, the DistributionProviderTracker throws an NPE when trying to create the RSA instance
issueID:ARIES-152
type:Sub-task
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/AriesPlatformTransactionManager.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
transaction/transaction-manager/src/main/java/javax/resource/spi/XATerminator.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Initial Contribution - declarative transaction support

issueID:ARIES-1520
type:Bug
changed files:
texts:Supplying an external DataSource is not possible with the EntityManagerFactoryBuilder
The Aries JPA container provides an EntityManagerFactoryBuilder service so that clients can provide persistence unit configuration at runtime.
One of the things that clients are supposed to be able to do is to provide ready configured database connections at runtime using the javax.persistence.jtaDataSource and javax.persistence.nonJtaDataSource properties.
This works for EclipseLink (the JPA RI) but does not with Hibernate or OpenJPA. Both Hibernate and OpenJPA see the PersistenceUnitInfo return null and then fail when they find no Driver class name. The EntityManagerFactoryBuilder can fix this by overriding the PersistenceUnitInfo's DataSource using the supplied standard property names.
issueID:ARIES-1521
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Inject constructor parameters without @Inject when class has only one constructor

issueID:ARIES-1522
type:Bug
changed files:subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java
texts:NullPointerException (NPE) when creating a RequireBundleHeader using the filter provided by FelixRequirementAdapter.
Stack Dump = org.osgi.service.subsystem.SubsystemException: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:98)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:27)
at java.security.AccessController.doPrivileged(AccessController.java:594)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:665)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:659)
at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.installSubsystem(DeploySubsystemAction.java:190)
at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.deploySubsystem(DeploySubsystemAction.java:163)
at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.deploy(DeploySubsystemAction.java:113)
at com.ibm.ws.app.manager.esa.internal.SubsystemHandler.install(SubsystemHandler.java:356)
at com.ibm.ws.app.manager.esa.internal.EBAToSubsystemHandler.install(EBAToSubsystemHandler.java:189)
at com.ibm.ws.app.manager.internal.statemachine.StartAction.execute(StartAction.java:141)
at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.enterState(ApplicationStateMachineImpl.java:1192)
at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.run(ApplicationStateMachineImpl.java:805)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1153)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.lang.Thread.run(Thread.java:785)
Caused by: java.lang.NullPointerException
at org.apache.aries.subsystem.core.archive.AbstractClause.<init>(AbstractClause.java:95)
at org.apache.aries.subsystem.core.archive.RequireBundleHeader$Clause.<init>(RequireBundleHeader.java:46)
at org.apache.aries.subsystem.core.archive.RequireBundleHeader$Clause.valueOf(RequireBundleHeader.java:82)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeRequireBundleHeader(RawSubsystemResource.java:384)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addRequireBundleHeader(RawSubsystemResource.java:311)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeSubsystemManifestAfterRequirements(RawSubsystemResource.java:548)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:139)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:91)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:60)
... 15 more
issueID:ARIES-1523
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResolveContext.java
subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/OsgiWiringHostCapability.java
subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/obr/internal/NamespaceTranslator.java
subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixResourceAdapter.java
texts:Application with fragment in archive and host in OBR will fail to resolve.
An application containing a fragment and host bundle as content but with the fragment packaged in the archive and host in an OBR repository will fail to resolve.
issueID:ARIES-1524
type:Bug
changed files:
texts:Unable to override the Transaction Type of a persistence unit using the EntityManagerFactoryBuilder
When using the EntityManagerFactoryBuilder it is not possible to override the transaction type using javax.persistence.TransactionType. This means that JPA 2.0 providers (such as OpenJPA) can't be easily switched between RESOURCE_LOCAL and JTA modes.
issueID:ARIES-1526
type:New Feature
changed files:
texts:Add a fast nio/protobuf provider

issueID:ARIES-1527
type:Improvement
changed files:
texts:[rsa] Make eventadmin optional

issueID:ARIES-1528
type:Improvement
changed files:
texts:[rsa] Use karaf 4 maven plugin to verify features

issueID:ARIES-153
type:Sub-task
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionToken.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Add itests for transactions

issueID:ARIES-1530
type:Bug
changed files:
texts:It is difficult to register plugins with EclipseLink
EclipseLink requires that plugins are passed as String class names which it then reflectively loads. This makes it almost impossible to add plugins as a client. The EclipseLink adapter can be updated to help with this.
issueID:ARIES-1531
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Add arguments to produced bean based on factory method parameters

issueID:ARIES-1532
type:New Feature
changed files:
texts:Provide an extender capability

issueID:ARIES-1533
type:Bug
changed files:
texts:JPA blueprint AnnotationScanner is unable to handle Interfaces
If there are beans defined in the blueprint with a "class" attribute referencing an interface instead of a class, the JPA blueprint AnnotationScanner fails with a NullPointerException.
During the annotation scanning, the assumption is made that the class hierarchy will eventually hit the Object.class, while an interface Class<?> will return null when the getSuperclass() is called.
While it may not be a common use case to reference an Interface in a bean definition, I have a rather specific use case where I am using a factory class with a factory method to return an implementation of an interface.
issueID:ARIES-1535
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/SatisfiableRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/DependentComponentFactoryRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Introduce a damping policy (reluctant / greedy)

issueID:ARIES-1536
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/SatisfiableRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/DependentComponentFactoryRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Introduce a reference lifecycle policy (dynamic / static)

issueID:ARIES-1538
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResolveContext.java
texts:Never fail a subsystem resolution because an already resolved resource has a missing dependency.
The implementation should be forgiving and never fail the resolution of a subsystem when one of its dependencies is an already resolved resource with a missing dependency. This scenario can occur now due to the change made as part of ARIES-1445 whereby an empty wiring map is always returned by the resolve context to the resolver in order to detect indirect dependencies and maintain an accurate use count. Also, note that the scenario can only occur with resources installed outside of the subsystem framework. We suspect that, by far, the most common occurrence will be related to non-subsystem resources having effective:=active requirements.
issueID:ARIES-1539
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/FilteredClassFinder.java
texts:Allow for setting name of generated file

issueID:ARIES-154
type:Bug
changed files:
texts:Application managed JPA cannot use the jpa:unit blueprint element without a TransactionSynchronizationRegistry
Currently, the jpa-container-context bundle has a mandatory service dependency on TransactionSynchronizationRegistry. This both unnecessary and potentially crippling (if the framework does not have one).
Instead the service dependency should probably be optional and the jpa-container-context should log a warning when it is started without a TranSyncRegistry and an error when a jpa:context element is used without one.
issueID:ARIES-1540
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Blueprint NamespaceHandler can't resolve XSD in offline mode
When the NamespaceHandler is offline, it fails to resolve the XSD:
17:18:44,952 | WARN  | pool-27-thread-1 | l$NamespaceHandlerSetImpl$Loader  544 | 16 - org.apache.aries.blueprint.core - 1.6.1 | Dynamically adding namespace handler http://cxf.apache.org/configuration/beans to bundle org.talend.esb.job.controller/6.2.0.SNAPSHOT
17:18:44,955 | WARN  | pool-27-thread-1 | l$NamespaceHandlerSetImpl$Loader  544 | 16 - org.apache.aries.blueprint.core - 1.6.1 | Dynamically adding namespace handler http://cxf.apache.org/configuration/parameterized-types to bundle org.talend.esb.job.controller/6.2.0.SNAPSHOT
17:18:44,956 | ERROR | pool-27-thread-1 | container.BlueprintContainerImpl  437 | 16 - org.apache.aries.blueprint.core - 1.6.1 | Unable to start blueprint container for bundle org.talend.esb.job.controller/6.2.0.SNAPSHOT
org.xml.sax.SAXParseException: src-resolve: Cannot resolve the name 'ptp:ParameterizedInt' to a(n) 'simpleType definition' component.
    at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)[:]
    at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)[:]
    at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser.reportSchemaError(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDAttributeTraverser.traverseNamedAttr(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDAttributeTraverser.traverseLocal(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser.traverseAttrsAndAttrGrps(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.processComplexContent(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.traverseComplexTypeDecl(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.traverseLocal(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseNamedElement(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseGlobal(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDHandler.traverseSchemas(Unknown Source)[:]
    at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown Source)[:]
    at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source)[:]
    at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:]
    at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:]
    at org.apache.xerces.jaxp.validation.XMLSchemaFactory.newSchema(Unknown Source)[:]
    at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.createSchema(NamespaceHandlerRegistryImpl.java:637)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.doGetSchema(NamespaceHandlerRegistryImpl.java:458)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.getSchema(NamespaceHandlerRegistryImpl.java:443)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:343)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:300)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:269)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:265)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:255)[16:org.apache.aries.blueprint.core:1.6.1]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[26:org.apache.aries.util:1.1.1]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[26:org.apache.aries.util:1.1.1]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[26:org.apache.aries.util:1.1.1]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[26:org.apache.aries.util:1.1.1]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[26:org.apache.aries.util:1.1.1]
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher$2.call(EquinoxEventPublisher.java:189)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1280)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHooksPrivileged(ServiceRegistry.java:1263)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.notifyEventHooksPrivileged(EquinoxEventPublisher.java:186)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEventPrivileged(EquinoxEventPublisher.java:146)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:75)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:67)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.framework.EquinoxContainerAdaptor.publishModuleEvent(EquinoxContainerAdaptor.java:102)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.container.Module.publishEvent(Module.java:466)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.container.Module.start(Module.java:457)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:392)[org.eclipse.osgi-3.10.2.jar:]
    at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:411)[org.eclipse.osgi-3.10.2.jar:]
    at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1262)[9:org.apache.karaf.features.core:4.0.5]
    at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:840)[9:org.apache.karaf.features.core:4.0.5]
    at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1152)[9:org.apache.karaf.features.core:4.0.5]
    at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:1048)[9:org.apache.karaf.features.core:4.0.5]
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_60]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_60]
    at java.lang.Thread.run(Thread.java:745)[:1.8.0_60]
The problem is located on the NamespaceHandler. The following fix does the trick:
diff --git a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index 86ad15b..fd8ea52 100644
--- a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -541,16 +541,20 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                         }
                     }
                     // Find a compatible namespace handler
-                    LOGGER.warn("Dynamically adding namespace handler {} to bundle {}/{}",
-                            nsUri, bundle.getSymbolicName(), bundle.getVersion());
                     h = findCompatibleNamespaceHandler(nsUri);
                     if (h != null) {
-                        URL url = h.getSchemaLocation(rid);
+                        URL url = h.getSchemaLocation(namespaceURI);
+                        if (url == null) {
+                           url = h.getSchemaLocation(rid);
+                       }
                         if (isCorrectUrl(url)) {
+                            LOGGER.warn("Dynamically adding namespace handler {} to bundle {}/{}",
+                               nsUri, bundle.getSymbolicName(), bundle.getVersion());
                             return createLSInput(url, id, namespaceURI);
                         }
                     }
                 }
+                LOGGER.warn("Unable to find namespace handler for {}", namespaceURI); 
                 return null;
             }
issueID:ARIES-1541
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Introspector.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Use annotations for maven, fix javadoc

issueID:ARIES-1542
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ValidatingGenericConnectionManager.java
texts:Aries transaction manager fails with background connection validation
Caused by: java.lang.RuntimeException: java.lang.NoSuchFieldException: pool
at org.apache.aries.transaction.jdbc.internal.Reflections.get(Reflections.java:56)
at org.apache.aries.transaction.jdbc.internal.ValidatingGenericConnectionManager.<init>(ValidatingGenericConnectionManager.java:89)
at org.apache.aries.transaction.jdbc.internal.ConnectionManagerFactory.init(ConnectionManagerFactory.java:152)
at org.apache.aries.transaction.jdbc.RecoverableDataSource.start(RecoverableDataSource.java:235)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
issueID:ARIES-1543
type:Improvement
changed files:
texts:Make it easier to use EndpointDescriptionParser
Currently the EndpointDescrptionParser handles the generated java classes for the xml types. It would be easier if it could directly handle EndpointDescription
issueID:ARIES-1544
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:Blueprint property resolution fails for setters with derived type
Blueprint property resolution expects getter and setter methods to use exactly the same class. It should allow setters that take a derived type using isAssignableFrom() instead of equals(). It currently fails for the following:
    class A {
        private X x;
        public X getX() { return x; }
        public void setX(X x) { this.x = x; }
    }

    class B extends A {
        public void setX(Y y) { super.setX(y); } // Y extends X
    }
Trying to set property X for bean B using Blueprint fails.
issueID:ARIES-1545
type:Improvement
changed files:
texts:make proxy-impl works with java9

issueID:ARIES-1546
type:Improvement
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/SystemModuleClassLoader.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AsmProxyManager.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
texts:make proxy-impl works with java9

issueID:ARIES-1548
type:Bug
changed files:
texts:JTA container managed transaction rollback not working for jaxrs endpoint
Rest Endpoint
<jaxrs:server id="jaxrs" address="http://127.0.0.1:8080/jaxrs">
<jaxrs:serviceBeans>
<ref component-id="service1" />
...
...
<ref component-id="serviceX" />
</jaxrs:serviceBeans>
<jaxrs:providers>
<ref component-id="runtimeExceptionMapper" />
</jaxrs:providers>
</jaxrs:server>
Route
<route id="secureBridgeRoute">
<from uri="jetty:https://0.0.0.0:443/jaxrs?sslContextParametersRef=sslContextParameters&amp;matchOnUriPrefix=true&amp;minThreads=8&amp;maxThreads=16" />
<transacted ref="JTA_TRANSACTION" />
<to uri="jetty:http://127.0.0.1:8080/jaxrs?bridgeEndpoint=true&amp;throwExceptionOnFailure=true" />
</route>
DAO
<bean id="dao1" class="com.example.Dao1" activation="eager">
<jpa:context unitname="PU" property="entityManager" type="TRANSACTION" />
</bean>
Service bean
<bean id="service1" class="com.example.Service1" activation="eager">
<property name="dao1" ref="dao1" />
<property name="dao2" ref="dao2" />
<tx:transaction method="*" value="Required" />
</bean>
Service bean method pseudocode
public void create(entity1, entity2) {
dao1.persist(entity1);
dao2.persist(entity2);
}
When dao2 persist failed, the transaction did not get rolled back. Entity1 is inserted into the DB.
Additional information
1) TransactionManager definition
<reference id="platformTransactionManager" interface="org.springframework.transaction.PlatformTransactionManager" />
<bean id="JTA_TRANSACTION" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
<property name="transactionManager" ref="platformTransactionManager" />
<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
</bean>
2) My persistent unit is of type JTA and hibernate as the provider.
3) I have an ExceptionMapper, which when I look into it, the stacktrace shows the transaction indeed is marked for rollback.
4) The service beans are not separated to another bundle.
5) Hibernate autocommit is NOT true.
issueID:ARIES-1549
type:Bug
changed files:
texts:Aries can't build from fresh sorce clone
Description
Steps to reproduce
1. move aries artifacts outside local maven repository (into some backup location)
2. git clone source code from git://git.apache.org/aries.git
3. run mvn clean install -Dmaven.test.skip inside blueprint folder
actual: build failure
expected: successful installation
Proposed Fix:
There is dependency in org.apache.aries.blueprint module (.../aries/blueprint/blueprint-bundle/pom.xml):
<dependency>
    <groupId>org.apache.aries.blueprint</groupId>
    <artifactId>org.apache.aries.blueprint.core</artifactId>
    <version>1.6.1-SNAPSHOT</version>
    <scope>provided</scope>
</dependency>
The version should be probably changed to 1.6.2 (last released) or 1.6.3-SNAPSHOT (current)
issueID:ARIES-155
type:Bug
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CaseInsensitiveMap.java
web/web-urlhandler/src/main/java/org/apache/aries/web/url/WARConnection.java
web/web-urlhandler/src/main/java/org/apache/aries/web/url/WAR_URLServiceHandler.java
texts:Url handler parameter names are supposed to be case insensitive

issueID:ARIES-1550
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/DataSourceMCFFactory.java
texts:aries-transaction-jdbc: Calls to getConnection() with null user and password
This is a follow-up to ARIES-1171.
aries-transaction-jdbc can wrap a "normal" DataSource with pooling functionality. If that happens, it calls DataSource.getConnection(String, String) with null user/password (in case aries.xa.username and/or aries.xa.password are not set.
In some DataSource-implementations this causes a NPE, e. g. DB2. Derby and H2 for example also work with null parameters.
A fix similar to ARIES-1171 is proposed.
issueID:ARIES-1552
type:Question
changed files:
texts:Aries Blueprint and Custom Namespace
Hi all,
My current OSGI-Spring based application is currently using AxonFramework which has custom namespace. If I were to migrate to Aries blueprint can still use the same custom namespace as is ?
Regards,
Setya
issueID:ARIES-1553
type:Bug
changed files:
texts:Aries1522Test and Aries1523Test don't work on Windows
org.apache.aries.subsystem.itests.defect.Aries1522Test
org.apache.aries.subsystem.itests.defect.Aries1523Test
These tests both have a method createRepositoryXml that does not work properly on Windows because it is checking for an absolute path that ends with "/target". But on windows the path will end with "\target". The fix is to use File.separator to do the check instead of hardcoding the separator to '/'
issueID:ARIES-1554
type:Bug
changed files:subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixResourceAdapter.java
texts:FelixResourceAdapter returns true for resources of other types
The Resource implementation org.apache.aries.subsystem.util.felix.FelixResourceAdapter does an equality check based on the osgi.identity name, version, and type. This typically is not an issue but the contract for Resource.equals states the following:
<javadoc>
This Resource is equal to another Resource if both have the same content and come from the same location. Location may be defined as the bundle location if the resource is an installed bundle or the repository location if the resource is in a repository.
</javadoc>
The assumption is that if the osgi.identity name, version and type are equal then the resources have the "same content". But the implementation does not take into account the location. This causes issues if resources are used as keys in a Map and the Map will contain resources of different implementation types. This is done by the felix resolver implementation. In some scenarios the subsystems will return to the resolver resources from the OBR repository and from the system repository (installed bundles) that have the same name, version, type. From the resolver's perspective these two resources must be treated as distinctly different resources because they come from completely different locations. And the framework's Resource implementation of equals does return false if checked against a FelixResourceAdapter, but the FelixResourceAdapter equals method will return true if check against the framework's Resource implementation. This inconsistency in the equals behavior reeks havoc for Map implementations. Usually the issue is very intermittent because of they way hash slots are determined based on hashcodes, but in rare cases these two resources will be slotted the same and collide with eachother depending on the Map implementation.
At a minimum the FelixResourceAdapter should check that the other object is an instance of FelixResourceAdapter to be able to return true. This makes the simple assumption that if the Resource is not of type FelixResourceAdapter then there is no way the resource is at the same location.
issueID:ARIES-1555
type:Bug
changed files:
texts:Cannot build blueprint-maven-plugin
I am using maven 3.0.5
$ mvn clean install
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Apache Aries Blueprint Maven Plugin 1.5.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] — maven-clean-plugin:2.5:clean (default-clean) @ blueprint-maven-plugin —
[INFO]
[INFO] — maven-enforcer-plugin:1.3.1:enforce (default) @ blueprint-maven-plugin —
[INFO]
[INFO] — maven-plugin-plugin:3.4:descriptor (default-descriptor) @ blueprint-maven-plugin —
[INFO] Using 'UTF-8' encoding to read mojo metadata.
[INFO] Mojo extractor with id: java-javadoc found 0 mojo descriptors.
[INFO] Mojo extractor with id: java-annotations found 0 mojo descriptors.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.916s
[INFO] Finished at: Mon May 30 22:02:09 CEST 2016
[INFO] Final Memory: 16M/429M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-plugin-plugin:3.4:descriptor (default-descriptor) on project blueprint-maven-plugin: Error extracting plugin descriptor: 'No mojo definitions were found for plugin: org.apache.aries.blueprint:blueprint-maven-plugin.' -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
issueID:ARIES-1556
type:Bug
changed files:
texts:fastbin provider fails if local host cannot be resolved
TcpTransport tries to check if the remote host is actually the localhost and uses localhost in such a case.
However, if 'InetAddress.getLocalHost().getHostName()' throws an UnknownHostException, the TcpTransport is not created and all invocations starve in the queue until the timeout is reached.
issueID:ARIES-1559
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
texts:Support injection of static values to bean properties or constructor's args
For example I want to use this expression:
<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
<property name="hashAlgorithmName" value="#
{T(org.apache.shiro.crypto.hash.Md5Hash).ALGORITHM_NAME}
" />
</bean>
instead of this one:
<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
<property name="hashAlgorithmName" value="MD5" />
</bean>
issueID:ARIES-156
type:Bug
changed files:
texts:Line up import/exports in blueprint bundles
The imports and exports vary quite a bit between the individual jars and the full bundle.
For instance org.osgi.service.event*;resolution:=optional, in the bundle but not in blueprint-core.
the cm bundle exports org.apache.aries.blueprint.compendium.cm*; but the full bundle does not.
For starters I'm fixing the import problem noted above.
issueID:ARIES-1560
type:Bug
changed files:
texts:Upgrade Aries JDBC Transaction to 2.1.2
Fixes https://issues.apache.org/jira/browse/ARIES-1542
issueID:ARIES-1561
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Produced bean could be exposed as Service in blueprint-maven-plugin

issueID:ARIES-1562
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Introspector.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Allow for setter injection in blueprint-maven-plugin

issueID:ARIES-1563
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Add field-injection attribute only if bean needs it
If bean has at least one field to which value/ref should be injected then bean needs the field-injection attribute set to true. There is not need to use this attribute in other cases.
issueID:ARIES-1564
type:Improvement
changed files:
texts:Performance improvement: sorting bundles by start-level is done eagerly
During sorting in the StartAction class, the SubsystemContentHeader is parsed every time the start order of a bundle is needed. By eagerly parsing the header and storing the start value for every bundle, an improved startup time can be achieved.
Pull request
https://github.com/apache/aries/compare/subsystem-2.0.x...WouterBanckenACA:sorting_performance_optimalisation
Mailinglist
http://mail-archives.apache.org/mod_mbox/aries-user/201606.mbox/%3CCAL5nZgRQcvFqz8g1c7mKJ3C_UoRmRox10%2BOM2uEjRbCkTYodDQ%40mail.gmail.com%3E
issueID:ARIES-1565
type:Improvement
changed files:
texts:Performance Improvement: unpack subsystem artifacts to tmp folder to avoid directly reading from zip archive
Description
Aries copies ESA archives to a temporary zip file during the installation phase. Afterwards, bundles are read directly from this temporary zip which has a large impact on the startup performance of Aries applications. By unpacking the esa artifact into the temporary folder it is unpacked only once. Subsequent reads for the bundles (jars) can be read directly from the folder.
Pull request
https://github.com/apache/aries/compare/subsystem-2.0.x...WouterBanckenACA:io_performance_optimalisation?expand=1
Mailinglist
http://mail-archives.apache.org/mod_mbox/aries-user/201606.mbox/%3CCAL5nZgTq5FxDvURJbzcEZ9YHx6vTs3HAOuFYDYA3ec9OZbmwjA%40mail.gmail.com%3E
issueID:ARIES-1566
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/Activation.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Support @Lazy annotation
There is some things to do:
interpret @org.springframework.context.annotation.Lazy on bean as activation='lazy'
@Lazy(true) generates attribute activation='lazy' on bean element
@Lazy(false) generates attribute activation='eager' on bean element
add plugin paramater: defaultActivation
default from defaultActivation is null which indicates blueprint default
if defaultActivation is set to EAGER then generate attribute default-activation='eager' on blueprint element
if defaultActivation is set to LAZY then generate attribute default-activation='lazy' on blueprint element
for produces beans activation of class is overridden by method activation
issueID:ARIES-1567
type:Bug
changed files:blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringApplicationContext.java
texts:Error when using Blueprint Spring with simple configuration
Hi,
When using Blueprint Spring I experience the following exception:
2016-06-06 14:45:15,112 | ERROR | nsole user karaf | BlueprintContainerImpl | 13 - org.apache.aries.blueprint.core - 1.6.1 | Unable to start blueprint container for bundle com.modulariti.eventstore/0.0.1
org.springframework.beans.factory.BeanCreationException: Error creating bean with name '_axon-annotation-command-handler-bean-post-processor': Cannot resolve reference to bean 'axon-parameter-resolver-factory' while setting bean property 'parameterResolverFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '_axon-parameter-resolver-factory': Invocation of init method failed; nested exception is java.lang.IllegalStateException: org.apache.aries.blueprint.spring.SpringApplicationContext@33268309 has not been refreshed yet
at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)[103:org.apache.servicemix.bundles.spring-context:4.2.5.RELEASE_1]
at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:687)[103:org.apache.servicemix.bundles.spring-context:4.2.5.RELEASE_1]
at org.apache.aries.blueprint.spring.SpringApplicationContext.process(SpringApplicationContext.java:59)[153:org.apache.aries.blueprint.spring:0.2.0]
at org.apache.aries.blueprint.spring.SpringBeanProcessor.process(SpringBeanProcessor.java:56)[153:org.apache.aries.blueprint.spring:0.2.0]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:569)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:395)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:300)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:269)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:265)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:255)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[22:org.apache.aries.util:1.1.1]
at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.Felix.activateBundle(Felix.java:2216)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.Felix.startBundle(Felix.java:2144)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.karaf.bundle.command.Install.execute(Install.java:96)[24:org.apache.karaf.bundle.core:4.0.5]
at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:83)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:67)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:87)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.karaf.shell.impl.console.ConsoleSessionImpl.run(ConsoleSessionImpl.java:270)[44:org.apache.karaf.shell.core:4.0.5]
at java.lang.Thread.run(Thread.java:745)[:1.7.0_71]
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '__axon-parameter-resolver-factory': Invocation of init method failed; nested exception is java.lang.IllegalStateException: org.apache.aries.blueprint.spring.SpringApplicationContext@33268309 has not been refreshed yet
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
... 45 more
Caused by: java.lang.IllegalStateException: org.apache.aries.blueprint.spring.SpringApplicationContext@33268309 has not been refreshed yet
at org.springframework.context.support.AbstractApplicationContext.assertBeanFactoryActive(AbstractApplicationContext.java:1041)[103:org.apache.servicemix.bundles.spring-context:4.2.5.RELEASE_1]
at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1161)[103:org.apache.servicemix.bundles.spring-context:4.2.5.RELEASE_1]
at org.axonframework.contextsupport.spring.ApplicationContextLookupParameterResolverFactory.afterPropertiesSet(ApplicationContextLookupParameterResolverFactory.java:76)[115:org.axonframework.axon-core:2.4.3]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)[102:org.apache.servicemix.bundles.spring-beans:4.2.5.RELEASE_1]
... 52 more
While my Blueprint config is as simple as:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:axon="http://www.axonframework.org/schema/core"
xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd">
<axon:annotation-config/>
</blueprint>
Thanks & Regards,
Setya
issueID:ARIES-1568
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Support @DependsOn annotation
org.springframework.context.annotation.DependsOn annotation on class or producing method should add depends-on attribute on bean element.
issueID:ARIES-1569
type:Bug
changed files:
texts:Fix javadoc creation for release
When doing a release build we also create javadoc. As it is not done in normal builds there are a lot of errors.
We should add javadoc for the jenkins builds to make sure we hit these earlier.
issueID:ARIES-157
type:Improvement
changed files:
texts:JPA Container iTests
Provide iTests for the Persistence unit container.
Note that these tests need to work around the limitations outlined in ARIES-137, and OPENJPA-1491
issueID:ARIES-1570
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/Handlers.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/MethodAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/LazyAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/SingletonBeanFinder.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ComponentAsNamed.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/NamedLikeHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/AutowiredAsInject.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/InjectLikeHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/DependsOnAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/NamedHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ComponentBeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/InjectHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/NamedBeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/AnnotationHelper.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/FilteredClassFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/QualifierAsNamed.java
texts:Prepare extension machanism in blueprint maven plugin
Goals:
create SPI for processing external annotations on classes, methods, constructors, fields
move Spring annotation handling to separate package and let it implement SPI
move bleurpint plugin core (handling javax.** annotations and maven specific parts) to separate package - impl
Packages structures should look like:
core
spi
spring
core package will use only spi package and will not use/know classes from spring package.
spring package will not use core clases, it will only implement interfaces from spi package.
All currently green tests should pass after these changes.
issueID:ARIES-1571
type:Bug
changed files:
texts:Exception in TCPEndpoint Integer cannot be cast to java.lang.String
When the port value is an Integer it will result in the exception below.
2016-06-13 14:47:39,201 | ERROR | pool-3-thread-2 | TopologyManagerExport | 18 - org.apache.aries.rsa.topology-manager - 1.8.0 | TopologyManager: export failed for [net.lr.demo.chat.service.ChatListener]
java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
at org.apache.aries.rsa.provider.tcp.TcpEndpoint.getString(TcpEndpoint.java:52)
at org.apache.aries.rsa.provider.tcp.TcpEndpoint.getInt(TcpEndpoint.java:48)
at org.apache.aries.rsa.provider.tcp.TcpEndpoint.<init>(TcpEndpoint.java:33)
at org.apache.aries.rsa.provider.tcp.TCPProvider.exportService(TCPProvider.java:49)
at org.apache.aries.rsa.core.RemoteServiceAdminCore.exportService(RemoteServiceAdminCore.java:184)
at org.apache.aries.rsa.core.RemoteServiceAdminCore.exportService(RemoteServiceAdminCore.java:117)
at org.apache.aries.rsa.core.RemoteServiceAdminInstance$1.run(RemoteServiceAdminInstance.java:57)
at org.apache.aries.rsa.core.RemoteServiceAdminInstance$1.run(RemoteServiceAdminInstance.java:55)
at java.security.AccessController.doPrivileged(Native Method)[:1.8.0_92]
at org.apache.aries.rsa.core.RemoteServiceAdminInstance.exportService(RemoteServiceAdminInstance.java:55)
at org.apache.aries.rsa.core.RemoteServiceAdminInstance.exportService(RemoteServiceAdminInstance.java:39)
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.exportServiceUsingRemoteServiceAdmin(TopologyManagerExport.java:154)[18:org.apache.aries.rsa.topology-manager:1.8.0]
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.doExport(TopologyManagerExport.java:125)[18:org.apache.aries.rsa.topology-manager:1.8.0]
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.access$0(TopologyManagerExport.java:103)[18:org.apache.aries.rsa.topology-manager:1.8.0]
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport$1.run(TopologyManagerExport.java:98)[18:org.apache.aries.rsa.topology-manager:1.8.0]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_92]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_92]
at java.lang.Thread.run(Thread.java:745)[:1.8.0_92]
issueID:ARIES-1572
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
texts:Problem wiring beans with constructor parameter containing Generics
Wiring beans with constructor parameter that contains generics will fail with the following exception:
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to find a matching constructor on class com.modulariti.eventstore.OrientDbEventEntryStore for arguments [org.apache.aries.blueprint.container.BeanRecipe$UnwrapperedBeanHolder@1d73edea, org.apache.aries.blueprint.container.BeanRecipe$UnwrapperedBeanHolder@2608acc1] when instanciating bean eventEntryStore
at org.apache.aries.blueprint.container.BeanRecipe.getInstanceFromType(BeanRecipe.java:354)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:282)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:830)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[13:org.apache.aries.blueprint.core:1.6.1]
at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_71]
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:255)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:186)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:724)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:411)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:300)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:269)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:265)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:255)[13:org.apache.aries.blueprint.core:1.6.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[22:org.apache.aries.util:1.1.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[22:org.apache.aries.util:1.1.1]
at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.Felix.activateBundle(Felix.java:2216)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.Felix.startBundle(Felix.java:2144)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.Felix.updateBundle(Felix.java:2484)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:1018)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:1004)[org.apache.felix.framework-5.4.0.jar:]
at org.apache.karaf.bundle.command.Update.doExecute(Update.java:49)[24:org.apache.karaf.bundle.core:4.0.5]
at org.apache.karaf.bundle.command.BundleCommand.execute(BundleCommand.java:46)[24:org.apache.karaf.bundle.core:4.0.5]
at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:83)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:67)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:87)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)[44:org.apache.karaf.shell.core:4.0.5]
at org.apache.karaf.shell.impl.console.ConsoleSessionImpl.run(ConsoleSessionImpl.java:270)[44:org.apache.karaf.shell.core:4.0.5]
at java.lang.Thread.run(Thread.java:745)[:1.7.0_71]
This is how the classes are declared:
public interface EventSqlSchema<T>
public class GenericEventSqlSchema<T> implements EventSqlSchema<T>
public class OrientDbEventSqlSchema extends GenericEventSqlSchema<byte[]>
And below is the configuration:
<bean id="sqlSchema" class="com.modulariti.eventstore.OrientDbEventSqlSchema">
</bean>
Regards,
Setya
issueID:ARIES-1573
type:Improvement
changed files:
texts:RSA discovery from ConfigAdmin
There is an idea to discover import services from CA configurations.
It's a separate module that registers ManagedServiceFactory and creates EndpointDescription(s) from configuration.
issueID:ARIES-1574
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Remove the reference to AutoCloseable in blueprint-core in order to maintain Java 1.6 compatibility.
The org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl has a private inner Loader class implementing the AutoCloseable interface introduced in 1.7. The only reference is within the createSchema method of the NamespaceHandlerRegistryImpl class where try-with-resources is not being used.
We would like to replace AutoCloseable with Closeable in order to maintain compatibility with 1.6. We could make this change only in the java6support branch but desire to avoid divergence for as long as possible, until a compelling reason comes along.
If we are we missing anything with regard to the apparent lack of necessity of AutoCloseable, please speak up.
issueID:ARIES-1575
type:Bug
changed files:
texts:Aries JPA should use the persistence bundle's context to obtain the Persistence Provider service
Aries JPA always uses its own Bundle Context to do the service "get" which confuses Hibernate into doing the wrong thing. This causes problems such as:
https://hibernate.atlassian.net/browse/HHH-10855
issueID:ARIES-1576
type:Improvement
changed files:
texts:Properties of the tcp endpoint should be prefixed with aries.rsa to avoid ambiguity
I just ran into an issue where I wanted to access an external device over a certain port in DS and used the property "port" as config property of my @Component.
Unfortunately this was then also set by DS as a service property which triggered Aries RSA to use the same port for the tcp endpoint.
So I think we need to prefix our properties with aries.rsa to make sure they do not collide with user properties.
issueID:ARIES-1577
type:Bug
changed files:
texts:Deadlock in TopologyManagerImport
TopologyManagerImport caused a deadlock. See attached stack information (I'll try to create a pull request)
Found one Java-level deadlock:
=============================
"pool-107-thread-2":
  waiting to lock monitor 0x0000000036016928 (object 0x00000006c276e118, a java.util.HashMap),
  which is held by "pool-107-thread-1"
"pool-107-thread-1":
  waiting to lock monitor 0x00000000342829d8 (object 0x00000006cca8bb38, a java.util.concurrent.ConcurrentHashMap),
  which is held by "Thread-74"
"Thread-74":
  waiting to lock monitor 0x0000000036016928 (object 0x00000006c276e118, a java.util.HashMap),
  which is held by "pool-107-thread-1"

Java stack information for the threads listed above:
===================================================
"pool-107-thread-2":
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.unexportNotAvailableServices(TopologyManagerImport.java:214)
    - waiting to lock <0x00000006c276e118> (a java.util.HashMap)
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.access$0(TopologyManagerImport.java:212)
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport$1.run(TopologyManagerImport.java:202)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
"pool-107-thread-1":
    at org.jboss.osgi.framework.internal.FrameworkEventsPlugin.fireServiceEvent(FrameworkEventsPlugin.java:479)
    - waiting to lock <0x00000006cca8bb38> (a java.util.concurrent.ConcurrentHashMap)
    at org.jboss.osgi.framework.internal.ServiceManagerPlugin.registerService(ServiceManagerPlugin.java:201)
    at org.jboss.osgi.framework.internal.AbstractBundleContext.registerService(AbstractBundleContext.java:301)
    at org.jboss.osgi.framework.internal.AbstractBundleContext.registerService(AbstractBundleContext.java:293)
    at org.apache.aries.rsa.core.RemoteServiceAdminCore.exposeServiceFactory(RemoteServiceAdminCore.java:421)
    at org.apache.aries.rsa.core.RemoteServiceAdminCore.importService(RemoteServiceAdminCore.java:375)
    - locked <0x00000006c274bb50> (a java.util.LinkedHashMap)
    at org.apache.aries.rsa.core.RemoteServiceAdminInstance$2.run(RemoteServiceAdminInstance.java:80)
    at org.apache.aries.rsa.core.RemoteServiceAdminInstance$2.run(RemoteServiceAdminInstance.java:1)
    at java.security.AccessController.doPrivileged(Native Method)
    at org.apache.aries.rsa.core.RemoteServiceAdminInstance.importService(RemoteServiceAdminInstance.java:78)
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.importService(TopologyManagerImport.java:288)
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.importServices(TopologyManagerImport.java:252)
    - locked <0x00000006c276e118> (a java.util.HashMap)
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.access$1(TopologyManagerImport.java:244)
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport$1.run(TopologyManagerImport.java:203)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
"Thread-74":
    at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.removeServiceInterest(TopologyManagerImport.java:129)
    - waiting to lock <0x00000006c276e118> (a java.util.HashMap)
    at org.apache.aries.rsa.topologymanager.importer.ListenerHookImpl.removed(ListenerHookImpl.java:103)
    at org.jboss.osgi.framework.internal.FrameworkEventsPlugin.removeServiceListener(FrameworkEventsPlugin.java:304)
    - locked <0x00000006cca8bb38> (a java.util.concurrent.ConcurrentHashMap)
    at org.jboss.osgi.framework.internal.AbstractBundleContext.removeServiceListener(AbstractBundleContext.java:262)
    at org.apache.felix.scr.impl.manager.ServiceTracker.close(ServiceTracker.java:400)
    - locked <0x000000072591b008> (a org.apache.felix.scr.impl.manager.ServiceTracker)
    at org.apache.felix.scr.impl.manager.DependencyManager.unregisterServiceListener(DependencyManager.java:1972)
    at org.apache.felix.scr.impl.manager.AbstractComponentManager.disableDependencyManagers(AbstractComponentManager.java:1352)
    at org.apache.felix.scr.impl.manager.AbstractComponentManager.doDeactivate(AbstractComponentManager.java:912)
    at org.apache.felix.scr.impl.manager.AbstractComponentManager.deactivateInternal(AbstractComponentManager.java:883)
    at org.apache.felix.scr.impl.manager.AbstractComponentManager.dispose(AbstractComponentManager.java:580)
    at org.apache.felix.scr.impl.config.ConfigurableComponentHolder.disposeComponents(ConfigurableComponentHolder.java:406)
    at org.apache.felix.scr.impl.BundleComponentActivator.dispose(BundleComponentActivator.java:335)
    at org.apache.felix.scr.impl.Activator.disposeComponents(Activator.java:313)
    at org.apache.felix.scr.impl.Activator.access$300(Activator.java:45)
    at org.apache.felix.scr.impl.Activator$ScrExtension.destroy(Activator.java:198)
    at org.apache.felix.utils.extender.AbstractExtender$2.run(AbstractExtender.java:290)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at org.apache.felix.utils.extender.AbstractExtender.destroyExtension(AbstractExtender.java:312)
    at org.apache.felix.utils.extender.AbstractExtender.bundleChanged(AbstractExtender.java:186)
    at org.jboss.osgi.framework.internal.FrameworkEventsPlugin.fireBundleEvent(FrameworkEventsPlugin.java:385)
    at org.jboss.osgi.framework.internal.AbstractBundleState.fireBundleEvent(AbstractBundleState.java:196)
    at org.jboss.osgi.framework.internal.AbstractBundleState.changeState(AbstractBundleState.java:190)
    at org.jboss.osgi.framework.internal.AbstractBundleState.changeState(AbstractBundleState.java:172)
    at org.jboss.osgi.framework.internal.HostBundleState.stopInternal(HostBundleState.java:379)
    at org.jboss.osgi.framework.internal.AbstractBundleState.stop(AbstractBundleState.java:502)
    at com.seeburger.rosgi.test.Activator$2.run(Activator.java:72)
    at java.lang.Thread.run(Thread.java:745)

Found 1 deadlock.
issueID:ARIES-1578
type:Bug
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmProperties.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmUtils.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ManagedObjectManager.java
texts:blueprint-cm doesn't support org.osgi.service.cm.ConfigurationPlugin
it doesn't integrate with possible implementation of org.osgi.service.cm.ConfigurationPlugin registered in the OSGi framework.
That interface allows to intercept ConfigAdmin properties updates, allowing to manipulate their content without persisting them anywhere.
A sample usacase can be a decrypt component that decrypts values on the fly.
The issue on blueprint-cm is with the current implementation of CmPropertyPlaceholder:
https://github.com/apache/aries/blob/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java#L130-L140
public void updated(Dictionary props) {
    if ("reload".equalsIgnoreCase(updateStrategy) && !equals(properties, props)) {
        LOGGER.debug("Configuration updated for pid={}", persistentId);
        // Run in a separate thread to avoid re-entrance
        new Thread() {
            public void run() {
                blueprintContainer.reload();
            }
        }.start();
    }
updated() is correctly forwarded the props param, containing eventual manipulation of registered ConfigurationPlugin instances, but that content is discarded. The event will trigger a reload of the whole blueprint context, that will fetch the configuration from ConfigAdmin directly, thus bypassing the plugin behavior.
issueID:ARIES-1579
type:Bug
changed files:
texts:Fastbin tests often fail as zookeeper of previous test is still running
The current implementation for tests with two containers is not fully working.
We start the second container in the @Configuration method but never stop it. So when the fastbin roundtrip test wants to do this a second time it fails.
I created an extension of pax exam that allows to setup a remote container more cleanly.
issueID:ARIES-158
type:Task
changed files:
texts:Undo workaround for OPENJPA-1491
Once OPENJPA-1491 is fixed we should undo the workaround we have for it which was committed in r908733
issueID:ARIES-1580
type:Bug
changed files:
texts:Blueprint itest ParserServiceImportXSDsBetweenNamespaceHandlersTest intermittently fails due to race condition.
The ParserServiceImportXSDsBetweenNamespaceHandlersTest Blueprint itest will intermittently fail due to a race condition where the namespace handler may not have been registered by the time the test is executed. I haven't been able to reproduce it on Pax Exam 4.5.0. Nevertheless, the condition exists and could still occur. It occurs, on average, once every 5 or 10 runs on Pax Exam 3.5.0, required for Java 6.
The solution is to have the test wait until the namespace handler registration, which occurs on a Blueprint background thread, has been verified, or a timeout occurs, before proceeding.
org.osgi.service.blueprint.container.ComponentDefinitionException: Unsupported node namespace: http://aries.apache.org/blueprint/xmlns/blueprint-aries-1503/v1.1.0
at org.apache.aries.blueprint.parser.Parser.getNamespaceHandler(Parser.java:1386)
at org.apache.aries.blueprint.parser.Parser.getNamespaceHandler(Parser.java:1374)
at org.apache.aries.blueprint.parser.Parser.parseCustomElement(Parser.java:1367)
at org.apache.aries.blueprint.parser.Parser.loadComponents(Parser.java:427)
at org.apache.aries.blueprint.parser.Parser.populate(Parser.java:331)
at org.apache.aries.blueprint.container.ParserServiceImpl.validateAndPopulate(ParserServiceImpl.java:86)
at org.apache.aries.blueprint.container.ParserServiceImpl.parse(ParserServiceImpl.java:63)
at org.apache.aries.blueprint.container.ParserServiceImpl.parse(ParserServiceImpl.java:53)
at org.apache.aries.blueprint.container.ParserServiceImpl.parse(ParserServiceImpl.java:46)
at org.apache.aries.blueprint.itests.ParserServiceImportXSDsBetweenNamespaceHandlersTest.testXSDImports(ParserServiceImportXSDsBetweenNamespaceHandlersTest.java:106)
issueID:ARIES-1581
type:Bug
changed files:
texts:RSA does not include the ExportReference in RSA Events
When an exported service is removed, the RemoteServiceAdminEvent contains 'null' as the ExportReference.
I will create a pull request
issueID:ARIES-1582
type:Improvement
changed files:
texts:fastbin should handle object methods locally
The proxy created by the fastbin provider should handle object methods (equals, hashcode, ...) as local calls instead of remote calls.
There is hardly any scenario where people want to use those as actual remote calls and remote hashcode/equals creates a severe performance penalty when the remote objects are stored in a list or map.
issueID:ARIES-1583
type:Bug
changed files:
texts:RSA discovery commands
Create commands to list endpoints and list details of a specific endpoint
issueID:ARIES-1584
type:Improvement
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
texts:Do not spam messages for each considered and skipped bundle
I will switch the logging to debug so these messages are not visible by default.
issueID:ARIES-1585
type:Bug
changed files:
texts:Transaction Control Connection Pool lifecycle issues
The transaction control project creates numerous objects which consume resources. Database Connection pools are a particular concern.
These must be cleaned up if/when:
1. The resource factory service is unregistered/released by the bundle
2. A configured resource provider configuration changes
3. The Transaction control service is unregistered
issueID:ARIES-1586
type:New Feature
changed files:
texts:Async calls in fastbin
For long running remote calls it should be possible to make async remote calls and receive e.g. a Future or osgi Promise as the result.
Details have been discussed here:
http://mail-archives.apache.org/mod_mbox/aries-dev/201607.mbox/%3CCAJLHLX_sh1oK1o2HurzvN8_kCKtegvmmf-pucJq3pTW92QqQQg%40mail.gmail.com%3E
issueID:ARIES-1587
type:New Feature
changed files:
texts:Support streams in fastbin
Fastbin should support InputStreams and OutputStreams as parameters and return values of remote calls.
Since streams cannot be serialized directly, the distribution provider should replace the original objects with serializable proxies that load/write data through additional remote requests.
For sending large amounts of data this approach would work far better than serializing a huge byte[]
issueID:ARIES-1588
type:Bug
changed files:
texts:Installation of subsystems fails due to uses constraint violation after exposing feature capabilities.
Two feature subsystems
1. Feature subsystem with fragment-hosts and fragments
2. Feature subsystem with other bundles
Installation of the second subsystem fails
Issue
Installation of the second subsystem fails with the message
gogo: SubsystemException: org.osgi.service.resolver.ResolutionException: Uses constraint violation. Unable to resolve resource org.ops4j.pax.web.pax-web-jetty-bundle [124.0] because it exports package 'org.apache.xbean.finder.archive' and is also exposed to it from resource org.apache.xbean.finder [98.0] via the following dependency chain:
org.ops4j.pax.web.pax-web-jetty-bundle [124.0]
import: (osgi.wiring.package=org.apache.xbean.finder)
export: osgi.wiring.package: org.apache.xbean.finder; uses:=org.apache.xbean.finder.archive
export: osgi.wiring.package=org.apache.xbean.finder.archive
org.apache.xbean.finder [98.0]
Before failing a lot of similar messages are logged with the message "DEBUG: Candidate permutation failed due to a conflict between an export and import; will try another if possible."
This is especially weird since pax-web-jetty-bundle does not expose the org.apache.xbean.finder.archive package (see attached Jar). Both pax-web-jetty-bundle and org.apache.xbean.finder are only present in the first subsystem.
In our setup pax-web-jetty-bundle is a fragment-host for a fragment which is in the same (first) subsystem. Similar DEBUG statements are printed for other fragment-hosts in the first subsystem.
The issue occurs since commit 4c0437de06f34321909a6132a7f2be163b2f6d5 (ARIES-1443). In earlier versions, we had no issues for these subsystems.
issueID:ARIES-1589
type:Bug
changed files:
texts:Blueprint-maven-plugin does not handle service reference filter correctly
When trying to reference a filtered service with pax-cdi-api annotation i.e.:
[code]
@OsgiService(filter="(component-type=jmsXA)")
private ConnectionFactory connectionFactory
[/code]
The generated blueprint adds the filter as a 'component-name' attribute instead of filling the 'filter' attribute.
issueID:ARIES-159
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:NoClassDefFoundError in Blueprint looking for org.apache.aries.application.filesystem.IDirectory
A bean in a blueprint bundle that consumes the AriesApplicationManager service that uses createApplication(URL) but not createApplication(IDirectory) doesn't need an import-package header for org.apache.aries.application.filesystem (where the IDirectory class resides) and indeed bnd (maven-bundle-plugin) doesn't create one. The BP impl creates a proxy to the service and in doing so tries to load IDirectory - I suspect it is using the client bundle's classloader to create the proxy rather than the classloader of the bundle providing the interface.
I get:
[pool-1-thread-1] ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle org.apache.aries.application.itests.minimports
org.osgi.service.blueprint.container.ComponentDefinitionException: java.lang.NoClassDefFoundError: org.apache.aries.application.filesystem.IDirectory
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:98)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:140)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:606)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:313)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:212)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:453)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:315)
at java.util.concurrent.FutureTask.run(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.NoClassDefFoundError: org.apache.aries.application.filesystem.IDirectory
at $Proxy12.<clinit>(Unknown Source)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:44)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:39)
at java.lang.reflect.Constructor.newInstance(Constructor.java:516)
at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:589)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory.createProxy(AbstractServiceReferenceRecipe.java:558)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:243)
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:82)
... 14 more
I'll check in a disabled test case
issueID:ARIES-1590
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
texts:Subsystem install fails due to unexpected resolve conflict
When we use the 2.0.9-SNAPSHOT version currently in development we get an unexpected resolve conflict:
DEBUG: Candidate permutation failed due to a conflict between imports; will try another if possible. (org.osgi.service.resolver.ResolutionException: Uses constraint violation. Unable to resolve resource org.apache.servicemix.bundles.spring-core [116.0] because it is exposed to package 'org.aspectj.bridge' from resources com.reproduce.reproduce-base-subsystem [org.apache.aries.subsystem.core.internal.BasicSubsystem: children=0, constituents=60, id=3, location=file:///Users/tom/Documents/code/aca-common/osgi-subsystem-support/reproduce-base-subsystem/target/reproduce-base-subsystem-4.1.2-SNAPSHOT.esa, parents=1, state=INSTALLED, symbolicName=com.reproduce.reproduce-base-subsystem, type=osgi.subsystem.feature, version=4.1.2.SNAPSHOT] and org.apache.servicemix.bundles.aspectj [111.0] via two dependency chains.
Chain 1:
org.apache.servicemix.bundles.spring-core [116.0]
import: (&(osgi.wiring.package=org.aspectj.bridge)(version>=1.7.1)(!(version>=2.0.0)))
export: osgi.wiring.package: org.aspectj.bridge
com.reproduce.reproduce-base-subsystem [org.apache.aries.subsystem.core.internal.BasicSubsystem: children=0, constituents=60, id=3, location=file:///Users/tom/Documents/code/aca-common/osgi-subsystem-support/reproduce-base-subsystem/target/reproduce-base-subsystem-4.1.2-SNAPSHOT.esa, parents=1, state=INSTALLED, symbolicName=com.reproduce.reproduce-base-subsystem, type=osgi.subsystem.feature, version=4.1.2.SNAPSHOT]
Chain 2:
org.apache.servicemix.bundles.spring-core [116.0]
import: (&(osgi.wiring.package=org.aspectj.weaver)(version>=1.7.1)(!(version>=2.0.0)))
export: osgi.wiring.package=org.aspectj.weaver; uses:=org.aspectj.weaver.patterns
com.reproduce.reproduce-base-subsystem [org.apache.aries.subsystem.core.internal.BasicSubsystem: children=0, constituents=60, id=3, location=file:///Users/tom/Documents/code/aca-common/osgi-subsystem-support/reproduce-base-subsystem/target/reproduce-base-subsystem-4.1.2-SNAPSHOT.esa, parents=1, state=INSTALLED, symbolicName=com.reproduce.reproduce-base-subsystem, type=osgi.subsystem.feature, version=4.1.2.SNAPSHOT]
import: (&(osgi.wiring.package=org.aspectj.weaver.patterns)(&(version>=1.7.1)(!(version>=2.0.0))))
export: osgi.wiring.package: org.aspectj.weaver.patterns; uses:=org.aspectj.bridge
export: osgi.wiring.package=org.aspectj.bridge
org.apache.servicemix.bundles.aspectj [111.0])
It is unexpected because 1 of the 2 chains points to the actual bundle that exports the package and the other of the 2 chains points to the base subsystem already installed in the runtime. In fact the bundle is part of that subsystem so it should consider both as exactly the same and not consider it as 2 chains he cannot resolve.
Not sure if it is related to ARIES-1588 and the commit mentioned there but that commit does affect how already installed subsystems are taken into account in the resolve process.
Note: we are using the felix resolver 1.4.0, verified it has the same problem with 1.8.0
Steps to reproduce:
1. start clean felix
2. install the attached reproduce-base-subsystem-4.1.2-SNAPSHOT.esa, do not start it
3. install the attached reproduce-subsystem-4.1.2-SNAPSHOT.esa
Step 3 will start failing in DEBUG logging with chain errors like above. It will try a number of permutations but it will not get out of it.
Note: which bundles and packages are shown in the example log above are less important as we have multiple such kind of errors for which only the package and bundles differ.
issueID:ARIES-1591
type:Bug
changed files:
texts:Subsystem install fails due to ArrayIndexOutofBoundsException
When we use the 2.0.9-SNAPSHOT version currently in development we get an ArrayIndexOutOfBoundsException as soon as our base subsystem contains a fragment bundle:
Caused by: org.osgi.service.subsystem.SubsystemException: java.lang.ArrayIndexOutOfBoundsException: -1
at org.apache.aries.subsystem.core.internal.Utils.handleTrowable(Utils.java:117)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:398)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:363)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:101)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:91)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:60)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:27)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:738)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:791)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:365)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:70)
... 30 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: -1
at org.apache.felix.resolver.util.CopyOnWriteList.set(CopyOnWriteList.java:53)
at org.apache.felix.resolver.Candidates.prepare(Candidates.java:1052)
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:173)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:393)
... 41 more
Attached are 2 subsystems that allow to reproduce it. Note that the ONLY difference between these subsystem esa's and the onces attached at ARIES-1590 is the fragment bundle osgi-pax-web-jetty-config.
So the problem might be related to the same commit, but another effect.
Note: we are using the felix resolver 1.4.0
Steps to reproduce:
1. start clean felix
2. install the attached reproduce-base-subsystem-4.1.2-SNAPSHOT.esa, do not start it
3. install the attached reproduce-subsystem-4.1.2-SNAPSHOT.esa
Step 3 fails with the above exception.
issueID:ARIES-1593
type:Bug
changed files:
texts:Blueprint NamespaceHandler can't resolve XSD in offline mode
When the NamespaceHandler is offline, it fails to resolve the XSD:
1.6.1 | Unable to start blueprint container for bundle org.talend.esb.job.controller/6.2.0.SNAPSHOT
org.xml.sax.SAXParseException: src-resolve: Cannot resolve the name 'ptp:ParameterizedInt' to a 'simpleType definition' component.
at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)[:]
at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)[:]
at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser.reportSchemaError(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDAttributeTraverser.traverseNamedAttr(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDAttributeTraverser.traverseLocal(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser.traverseAttrsAndAttrGrps(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.processComplexContent(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.traverseComplexTypeDecl(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.traverseLocal(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseNamedElement(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseGlobal(Unknown Source)[:]
at org.apache.xerces.impl.xs.traversers.XSDHandler.traverseSchemas(Unknown Source)[:]
issueID:ARIES-1594
type:Bug
changed files:
texts:Add lastReleaseVersion properties to a number of blueprint modules for clean build to work again
A few test modules were missing <lastReleaseVersion/> property and the build would fail.
issueID:ARIES-1595
type:Improvement
changed files:
texts:Support capabilities and requirements specified in RSA 1.1
See OSGi compendium
122.9 Capability Namespaces
issueID:ARIES-1596
type:Bug
changed files:
texts:Exception when running blueprint-maven-plugin
See https://stackoverflow.com/questions/38825386/blueprint-maven-plugin-runtimeexception/39043870#39043870
for more details and fix / workaround.
[ERROR] Failed to execute goal org.apache.aries.blueprint:blueprint-maven-plugin:1.1.0:blueprint-generate
(default) on project data-collection-terminal-updates: Error building
commands help: RuntimeException - [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
execute goal
org.apache.aries.blueprint:blueprint-maven-plugin:1.1.0:blueprint-generate
(default) on project data-collection-terminal-updates: Error building
commands help
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: Error
building commands help
at org.apache.aries.blueprint.plugin.GenerateMojo.execute(GenerateMojo.java:80)
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
... 19 more Caused by: java.lang.RuntimeException
at org.apache.xbean.asm5.MethodVisitor.visitParameter(Unknown Source)
at org.apache.xbean.asm5.ClassReader.b(Unknown Source)
at org.apache.xbean.asm5.ClassReader.accept(Unknown Source)
at org.apache.xbean.asm5.ClassReader.accept(Unknown Source)
at org.apache.xbean.finder.AbstractFinder.readClassDef(AbstractFinder.java:581)
at org.apache.xbean.finder.AbstractFinder.readClassDef(AbstractFinder.java:576)
at org.apache.xbean.finder.AbstractFinder.readClassDef(AbstractFinder.java:562)
at org.apache.xbean.finder.ClassFinder.<init(ClassFinder.java:122)
at org.apache.aries.blueprint.plugin.GenerateMojo.createProjectScopeFinder(GenerateMojo.java:96)
at org.apache.aries.blueprint.plugin.GenerateMojo.execute(GenerateMojo.java:70)
... 21 more
issueID:ARIES-1597
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:blueprint-maven-plugin new option to override generatedDir
In ODL we use another place than the default "OSGI-INF/blueprint/" and would like to be able to customize the directory that the blueprint-maven-plugin generates the XML into.
Proposed patch in https://github.com/apache/aries/pull/52
issueID:ARIES-1598
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Generate blueprint file in generated-sources/blueprint directory
Blueprint maven plugin generates file to "generated-resources" directory which is not standard maven directory. It should be generated to "generated-sources/blueprint".
issueID:ARIES-1599
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/AddResourceDirMojo.java
texts:Add new goal to blueprint maven plugin - add-resource-dir in generate-resources phase
Intelij IDEA finds generated sources and resources by executing process-resources phase. It is configurable, but next phases in selecion list in properties are test phases, which all occur after compilation.
Blueprint maven plugin adds resource directory (and bluprint file) in process-classes phase.
To mark directory as resource root by IDEA, it is enough to add such directory in separete goal (add-resource-dir) in earlier phase (generate-resources).
issueID:ARIES-16
type:Task
changed files:
texts:The IBM contribution was committed with (C) IBM statements in the files - need to remove them and add ASL statement
While the copyright of the initial contribution itself doesn't change, an IBM employee needs to make the change to remove the (C) IBM to adhere to the Apache policy on source headers:
http://www.apache.org/legal/src-headers.html#headers
issueID:ARIES-160
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
texts:Improved exception handling
Within the Framework and UserAdmin MBeans IOException are thrown in an error case without wrapping the original exception.
This makes it harder to detected the original cause of an error e.g. an invalid URL when installing a bundle via the FrameworkMBean
Please find attachted a simple patch for wrapping the cause exception when an error occurs.
issueID:ARIES-1600
type:Bug
changed files:
texts:'Unknown namespace for jpa' in JpaNsHandler
The IllegalArgumentException "Unknown namespace for jpa: " is being triggered in org.apache.aries.jpa.blueprint.impl.JpaNsHandler.getSchemaLocation.
The bundle I am deploying has several extension namespaces defined in the Blueprint XML. I don't have a minimal example that exhibits this problem but I might be able to create one if necessary.
I'm not sure why the JpaNsHandler is being passed a namespace that it can't handle. However all other implementations of NamespaceHandler that I have seen return null if they are passed a namespace they do not recognize. When I replaced the IllegalArgumentException with returning null the bundle successfully started.
This is related to ARIES-1403.
issueID:ARIES-1601
type:Improvement
changed files:blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
texts:Support for nested property placeholders
As today property placeholders are resolved sequentially but it would be nice to have the possibility to resolve nested placeholders like:
${jre-${java.specification.version}}
The problem in blueprint seems to be located in AbstractPropertyPlaceholder
I've been using StrSubstitutor from Commons-Lang and could be ported to blueprint-ext.
See:
https://issues.apache.org/jira/browse/LANG-482
https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/org/apache/commons/lang3/text/StrSubstitutor.html
issueID:ARIES-1602
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PostConstructHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/ProducesHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/Handlers.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BlueprintRegistry.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/CustomDependencyAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanEnricher.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/LazyAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/QualifierHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/MethodAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceProviderHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextEnricher.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceContextHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceUnitHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintConfigurationImpl.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BlueprintConfiguration.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/AnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FactoryMethodFinder.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/DependsOnAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/Activation.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FieldAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PreDestroyHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/QualifingAnnotationFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/XmlWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
texts:Remove annotations from Blueprint Maven Plugin model package and make them using only SPI
Annotations to remove from model package:
javax.annotation.PostConstruct;
javax.annotation.PreDestroy;
javax.enterprise.inject.Produces;
javax.inject.Qualifier;
javax.persistence.PersistenceContext;
javax.persistence.PersistenceUnit;
org.ops4j.pax.cdi.api.OsgiService;
org.ops4j.pax.cdi.api.OsgiServiceProvider;
org.ops4j.pax.cdi.api.Properties;
org.ops4j.pax.cdi.api.Property;
issueID:ARIES-1603
type:Bug
changed files:async/async-impl/src/main/java/org/apache/aries/async/impl/AsyncServiceFactory.java
async/async-impl/src/main/java/org/apache/aries/async/impl/AsyncService.java
texts:Aries async classloader leak
Using the async service with repeated tasks during one hour leads to an out of memory. It's due to the very large amount of class loaded (in 10 min we get 20000 classes loaded). The metaspace is growing indefinitely.
It seems to come from the privMediate method of the AsyncService where the classloader of the target service is cloned.
issueID:ARIES-1605
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintConfigurationImpl.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BlueprintConfiguration.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextInitializationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/init/BlueprintInitialization.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/Handlers.java
texts:Add custom preperties map in plugin and spi handler for init context
Each extension via SPI could receive plugin configuration. Goals of this ticket are:
allow for add any parameter to maven configuration and pass it to extension
prepare a SPI handler which could for example init context with additional beans (e. g. Properties, PropertyPlaceholder, etc)
issueID:ARIES-1606
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextInitializationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BlueprintConfiguration.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/Activation.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FieldAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanFinder.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/CustomDependencyAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FactoryMethodFinder.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/MethodAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/QualifingAnnotationFinder.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/XmlWriter.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/InjectLikeHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextEnricher.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/AnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/NamedLikeHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanEnricher.java
texts:Extract SPI from blueptin maven plugin to external project

issueID:ARIES-1607
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/AbstractRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedBeanMetadata.java
texts:Add a flag to enable raw conversion when using generics
Blueprint should only check constuctor and method arguments depending on their class the way the JVM works at runtime.
At runtime there is no difference between:
setSomething(List);
and
setSomething(List<String>);
Furthermore Java prevents having both methods above declared in the same class (same applies if List were List<Object>). A List is a List no matter the generic type. The generic type checking is made at compilation time. Blueprint is not a compiler
Please add a flag to enforce or not the generic type checking!
issueID:ARIES-1608
type:Bug
changed files:subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixCapabilityAdapter.java
texts:Application with bundle in archive and required bundle in OBR will fail to resolve.
Similar to issue ARIES-1523 except a bundle using Require-Bundle in side an application archive will fail to resolve against a required bundle in OBR. The reason is the capability representing the required bundle in OBR does not have the bundle-version attribute set correctly. Instead it uses the 'version' attribute from OBR.
issueID:ARIES-1609
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/LockingStrategy.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
texts:Increase timeout for subsystem locking strategy and make it configurable
With a large number of large subsystems the contention for the locks managed by LockingStrategy class in subsystems may be very high. The current timeout is hardcoded to 30 seconds. In scenarios that use provision dependencies at start (instead of at install) this contention may increase if a large number of subsystems are staged and are in the state waiting to provision dependencies. Once the first subsystem is started it may result in a very large number of the currently installed subsystems to all provision dependencies at once. This can take over 30 seconds. If multiple threads are attempting to start the subsystems at the same time this may cause the timeout for the losing threads.
I think the default timeout should be increased to something pretty large. I suggest 10 minutes. And we should likely allow a property to override the default timeout.
issueID:ARIES-1610
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceUnitHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/Namespaces.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceContextHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
texts:Blueprint plugin: check namespace patterns instead conrete namespace
Currently blueprint plugin checks exact version of configured transaction and JPA namespaces in order to generate appropriate blueprint descriptor.
For example supported transaction namespaces are:
http://aries.apache.org/xmlns/transactions/v1.2.0
http://aries.apache.org/xmlns/transactions/v2.0.0
I would suggest to relax this check and validate only major version on the base of regular pattern. As a result, not only 1.2.0 version will be supported, but versions 1.1.0, 1.0.0 as well.
Solution should be safe for minor versions, because:
a) normally schema syntax haven't to be changed in incompatible way for different minor version;
b) unsupported generated extensions will be ignored at the runtime
Patch is attached
issueID:ARIES-1611
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/AbstractTransactionFactory.java
texts:Blueprint plugin: support javax.cdi.Transactional annotation
Transaction demarcation code mostly uses the:
javax.transaction.Transactional
org.springframework.transaction.annotation.Transactional
anyway some users still have javax.transaction.cdi.Transactional
It would be nice if blueprint plugin support cdi Transactional as well.
Patch is attached
issueID:ARIES-1612
type:Bug
changed files:
texts:Zip input stream relies on default (non buffered) InputStream read
I've made the pull request with the requested change https://github.com/apache/aries/pull/55
issueID:ARIES-1615
type:Bug
changed files:
texts:Calling the method createAndCloseDummyEMF() causes NullPointerException
In the current version of JPAContainer the method call createAndCloseDummyEMF throws the following NullPointerException:
[EL Warning]: 2016-09-20 14:59:39.373--ServerSession(1864482722)--Thread(Thread[Start Level: Equinox Container: 80090ef3-307f-0016-1904-9194b7ab7645,5,main])--java.lang.NullPointerException
[EL Severe]: 2016-09-20 14:59:39.373--ServerSession(1864482722)--Thread(Thread[Start Level: Equinox Container: 80090ef3-307f-0016-1904-9194b7ab7645,5,main])--java.lang.NullPointerException
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeDirectNoSelect(DatabaseAccessor.java:892)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeNoSelect(DatabaseAccessor.java:964)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:633)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2056)
at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelectCall(DatasourceCallQueryMechanism.java:271)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeNoSelect(DatasourceCallQueryMechanism.java:251)
at org.eclipse.persistence.queries.DataModifyQuery.executeDatabaseQuery(DataModifyQuery.java:85)
at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
at org.eclipse.persistence.internal.sessions.AbstractSession.internalExecuteQuery(AbstractSession.java:3271)
at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1790)
at org.eclipse.persistence.internal.sessions.AbstractSession.priviledgedExecuteNonSelectingCall(AbstractSession.java:5079)
at org.eclipse.persistence.tools.schemaframework.DatabaseObjectDefinition.createOnDatabase(DatabaseObjectDefinition.java:202)
at org.eclipse.persistence.tools.schemaframework.SchemaManager.createObject(SchemaManager.java:223)
at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:171)
at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:148)
at org.eclipse.persistence.tools.schemaframework.TableCreator.createTables(TableCreator.java:140)
at org.eclipse.persistence.tools.schemaframework.SchemaManager.createDefaultTables(SchemaManager.java:1032)
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryProvider.generateDefaultTables(EntityManagerFactoryProvider.java:109)
at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDLToDatabase(EntityManagerSetupImpl.java:4225)
at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4153)
at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.writeDDL(EntityManagerSetupImpl.java:4053)
at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:777)
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getAbstractSession(EntityManagerFactoryDelegate.java:205)
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.getDatabaseSession(EntityManagerFactoryDelegate.java:183)
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getDatabaseSession(EntityManagerFactoryImpl.java:528)
at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:385)
at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)
at org.apache.aries.jpa.eclipselink.adapter.EclipseLinkPersistenceProvider.createContainerEntityManagerFactory(EclipseLinkPersistenceProvider.java:52)
at org.apache.aries.jpa.container.impl.PersistenceProviderTracker.createAndCloseDummyEMF(PersistenceProviderTracker.java:105)
at org.apache.aries.jpa.container.impl.PersistenceProviderTracker.addingService(PersistenceProviderTracker.java:85)
at org.apache.aries.jpa.container.impl.PersistenceProviderTracker.addingService(PersistenceProviderTracker.java:44)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:109)
at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:914)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:862)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:801)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:127)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:225)
at org.eclipse.osgi.internal.framework.BundleContextImpl.registerService(BundleContextImpl.java:464)
at org.eclipse.osgi.internal.framework.BundleContextImpl.registerService(BundleContextImpl.java:482)
at org.eclipse.osgi.internal.framework.BundleContextImpl.registerService(BundleContextImpl.java:998)
at org.apache.aries.jpa.eclipselink.adapter.Activator.handlePotentialEclipseLink(Activator.java:116)
at org.apache.aries.jpa.eclipselink.adapter.Activator.start(Activator.java:72)
at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:771)
at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:764)
at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:721)
at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:941)
at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:318)
at org.eclipse.osgi.container.Module.doStart(Module.java:571)
at org.eclipse.osgi.container.Module.start(Module.java:439)
at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1582)
at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1562)
at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1533)
at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1476)
at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:340)
In the class DatabaseAccessor of EclipseLink the following code is called (line 1570):
statement = nativeConnection.prepareStatement(call.getSQLString());
The nativeConnection is return by the class DummyDataSource and is a dynamic proxy using DummyHandler as InvocationHandler. Because the method prepareStatement returns an instance of the type java.sql.PreparedStatement the method proxyClasses gets called. This method now returns null, because the type PreparedStatement is not covered by the if-clauses. The following call (line: 892)
rowCount = ((PreparedStatement)statement).executeUpdate(); }}
in the class DatabaseAccessor now results in a NullPointerExcpetion.
issueID:ARIES-1616
type:Bug
changed files:
texts:Transaction Recovery Log does not shut down properly
After shutting down or reconfiguring the XA Transaction Control implementation a daemon thread is left running from the HOWL Flush manager. This never seems to get closed...
This is likely a bug in HOWL, but that project hasn't been updated in a decade so Aries will have to work around it.
issueID:ARIES-1617
type:Bug
changed files:
texts:Hikari pools are not closed by the JPA Resource Providers
When shutting down the Aries JPA Resource Provider (both XA and non XA) the Hikari pool (if created) does not get closed. This leads to Hikari maintenance threads being left running, which leaks class loaders and may prevent framework shutdown.
issueID:ARIES-1618
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
texts:Regression after ARIES-1342: Duplicate interface name in class file
I have regression on Karaf 4.0.6 (Proxy Service 1.0.5) with such blueprint config:
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
   <reference id="transactionManager" interface="org.apache.aries.transaction.AriesTransactionManager"/>

<!-- other bean defenitions -->

</blueprint>
Because of hierarchy ordering fix in ARIES-1342 resulting interfaces set contains duplicates - two javax.transaction.TransactionManager entries. As result Exception thrown on proxy class generation:
Caused by: org.apache.aries.proxy.UnableToProxyException: java.lang.ClassFormatError: Duplicate interface name in class file Proxy3636dfb0_3a9f_46d5_8eb4_32506b8a33ae
 at org.apache.aries.proxy.impl.interfaces.ProxyClassLoader.createProxyClass(ProxyClassLoader.java:165)[20:org.apache.aries.proxy.impl:1.0.5]
 at org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator.getProxyInstance(InterfaceProxyGenerator.java:97)[20:org.apache.aries.proxy.impl:1.0.5]
 at org.apache.aries.proxy.impl.AsmProxyManager.createNewProxy(AsmProxyManager.java:80)[20:org.apache.aries.proxy.impl:1.0.5]
 at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:75)[20:org.apache.aries.proxy.impl:1.0.5]
 at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingProxy(AbstractProxyManager.java:40)[20:org.apache.aries.proxy.impl:1.0.5]
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:332)[12:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:107)[12:org.apache.aries.blueprint.core:1.6.2]
issueID:ARIES-1619
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/AnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BlueprintConfiguration.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/CustomDependencyAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/XmlWriter.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/InjectLikeHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/NamedBeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/ProducesHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceContextHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/MethodAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceProviderHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanEnricher.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextInitializationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/Activation.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceUnitHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/SingletonBeanFinder.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FactoryMethodFinder.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextEnricher.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/Handlers.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ComponentBeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigPropertyInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FieldAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanFinder.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/QualifingAnnotationFinder.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/NamedLikeHandler.java
texts:Add javadoc in blueprint maven plugin spi
Create javadoc describing when each handler Handler/Finder is used
issueID:ARIES-162
type:Bug
changed files:application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/runtime/AriesApplicationContextManager.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextManagerImpl.java
texts:Fix some app install issues
We need to install the bundles when install is called, not when start is called.
issueID:ARIES-1621
type:Improvement
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
texts:Aries Transaction Manager is published to the OSGi registry then immediately re-published
The Aries Transaction Manager's bundle activator publishes an implementation of the javax.transaction.TransactionManager service when the bundle activator's start method is called. Because the activator implements the ManagedService interface, it then almost immediately receives its configuration from config admin, causing the transaction manager to be unregistered and then re-registered.
This very short term initial registration of the TransactionManager sometimes allows other components that have a reference to the TransactionManager to start up only to then almost immediately be shut down as the TransactionManager is being re-published.
See http://karaf.922171.n3.nabble.com/Karaf-4-x-startup-Aries-causing-components-to-deactivate-and-re-activate-multiple-times-td4047996.html for more details.
issueID:ARIES-1623
type:Bug
changed files:
texts:FilterHelper OBJECTCLASS_EXPRESSION excludes inner classes
The existing OBJECTCLASS_EXPRESSION in the FilterHelper class filters out inner classes. Its not clear to me this is a desired behavior since I can find nothing in the remote service admin specification stating it is unacceptable to publish a service using an inner class interface. Many code generation tools choose to nest many classes into a single java file, so I think there are some valid use cases for supporting this if it is not excluded in the specification.
I have submitted a patch https://github.com/apache/aries-rsa/pull/12 for consideration; however, I realize this is a mirror and someone will likely need to manage its merge to the official repository.
issueID:ARIES-1624
type:Improvement
changed files:
texts:Aries JPA should tell provider tonot scan classes by default
As Aries JPA does the scanning itself it should always tell the PersistenceProvider to not scan.
So it should set when calling it
<exclude-unlisted-classes>true</exclude-unlisted-classes>
https://github.com/apache/aries/blob/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parser/impl/PersistenceUnit.java#L217
issueID:ARIES-1625
type:Bug
changed files:
texts:JPA inheritence Eclipselink - classloader issue ?!
I have jar with packaged entities in it.
I have package org.test.base where I have class like:
BaseParameter.java
package org.test.base;
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "TYPE")
@Table(name = "PARAMETER")
public abstract class BaseParameter implements Serializable {...

 @Id
 @SequenceGenerator(name = "ParameterIdGenerator", allocationSize = 1, sequenceName = "SEQ_PARAMETER_ID")
 @GeneratedValue(generator = "ParameterIdGenerator", strategy = GenerationType.SEQUENCE)
 @Column(name = "ID", nullable = false, precision = 20)
 protected Long id;
and another package org.test.operation in which I have concrete parameter for example:
SubscriptionParameter.java
package org.test.operation 
@Entity
@DiscriminatorValue("SUBSCRIPTION")
public class SubscriptionParameter extends BaseParameter { .....
I am using example from
https://github.com/apache/aries/tree/trunk/jpa/examples
to get to my entities using DS module but of course I modified it to fit my model.
Commands I do are:
install -s mvn:pl.orange.isep/my-model/0.1-SNAPSHOT -> OK
install -s mvn:org.apache.aries.jpa.example/org.apache.aries.jpa.example.tasklist.model/3.0.0-SNAPSHOT
and then the exception arises:
Exception
org.apache.aries.jpa/org.apache.aries.jpa.container/2.3.0]: Unexpected problem updating configuration org.apache.aries.jpa.tasklist
javax.persistence.PersistenceException: Exception [EclipseLink-28018] (Eclipse Persistence Services - 2.6.1.v20150916-55dc7c3): org.eclipse.persistence.exceptions.EntityManagerSetupException
Exception Description: Predeployment of PersistenceUnit [tasklist] failed.
Internal Exception: Exception [EclipseLink-7161] (Eclipse Persistence Services - 2.6.1.v20150916-55dc7c3): org.eclipse.persistence.exceptions.ValidationException
Exception Description: Entity class [class org.test.operation.SubscriptionParameter] has no primary key specified. It should define either an @Id, @EmbeddedId or an @IdClass. If you have defined PK using any of these annotations then make sure that you do not have mixed access-type (both fields and properties annotated) in your entity class hierarchy.
        at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.createPredeployFailedPersistenceException(EntityManagerSetupImpl.java:2035)[333:org.eclipse.persistence.jpa:2.6.1.v20150916-55dc7c3]
        at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.predeploy(EntityManagerSetupImpl.java:2026)[333:org.eclipse.persistence.jpa:2.6.1.v20150916-55dc7c3]
        at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactoryImpl(PersistenceProvider.java:347)[333:org.eclipse.persistence.jpa:2.6.1.v20150916-55dc7c3]
        at org.eclipse.persistence.jpa.PersistenceProvider.createContainerEntityManagerFactory(PersistenceProvider.java:313)[333:org.eclipse.persistence.jpa:2.6.1.v20150916-55dc7c3]
        at org.apache.aries.jpa.eclipselink.adapter.EclipseLinkPersistenceProvider.createContainerEntityManagerFactory(EclipseLinkPersistenceProvider.java:52)[302:org.apache.aries.jpa.eclipselink.adapter:2.3.0]
        at org.apache.aries.jpa.container.impl.ManagedEMF.createAndPublishEMF(ManagedEMF.java:129)[164:org.apache.aries.jpa.container:2.3.0]
        at org.apache.aries.jpa.container.impl.ManagedEMF.updated(ManagedEMF.java:125)[164:org.apache.aries.jpa.container:2.3.0]
        at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updated(ManagedServiceTracker.java:189)[3:org.apache.felix.configadmin:1.8.8]
        at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updateService(ManagedServiceTracker.java:152)[3:org.apache.felix.configadmin:1.8.8]
My assumption is that class BaseParameter is not seen by the eclipselink that validates entities.
But surprisingly when I change the package for this two entities that they are in common package for example org.base then everything is loading fine and I can access my entities.
Problem was happening with all my entities consecutively until I packed them all in one package, then it disappeared.
My model is quite complex and I really dont want to have all entities mixed in one package. Do You have any idea why it happens?
The examples from github (https://github.com/apache/aries/tree/trunk/jpa/examples) have no JPA inheritence and all the entities are in one package.
I have my application configured correctly (persistence.xml etc.) because only package change makes a difference.
Is it Karaf classloader issue or jpa-container one? Is there any workaroud other than putting all entities in one package?
issueID:ARIES-1626
type:Bug
changed files:
texts:Missing capability in eclipselink adapter
In the org.apache.aries.jpa.eclipselink.adapter manifest is not declared
osgi.service; effective:=active; objectClass=javax.persistence.spi.PersistenceProvider
so Aries JPA is not able to resolve its Require-Capability, and it is not possbile to install jpa 2.4.0 feature with eclipselink.
issueID:ARIES-1627
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/StateConfig.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
texts:Give ability to disable JMX notifications generation in case of OSGi service changes
Aries JMX generates JMX notifications for all OSGi service changes events:
During a startup a lot of OSGi services are published.
Generation of JMX notifications takes some time (it can take about 0.7-1 seconds total on some live Karaf instances), getServiceIds retrieves each time all service references and so on.
these JMX notifications frequently are not needed
It would be useful to have a configuration option to disable JMX notifications for OSGi service changes (it can be an Config Admin option in org.apache.aries.jmx.framework.StateConfig)
issueID:ARIES-1628
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BlueprintRegistry.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PostConstructHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/CustomDependencyAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/MethodAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/Handlers.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/ProducesHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanEnricher.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/LazyAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/QualifierHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextEnricher.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigPropertyInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/SingletonBeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceUnitHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PersistenceContextHandler.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceProviderHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ComponentAsNamed.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigWriter.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintConfigurationImpl.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/NamedLikeHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BlueprintConfiguration.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/AnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FactoryMethodFinder.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/AutowiredAsInject.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/config/Config.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/InjectLikeHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/Namespaces.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/ContextInitializationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/DependsOnAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/NamedHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/Activation.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/AbstractTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Introspector.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ComponentBeanFinder.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/config/ConfigProperty.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/FieldAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/PreDestroyHandler.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/config/DefaultProperty.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/InjectHandler.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/QualifingAnnotationFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/NamedBeanFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BeanAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/init/BlueprintInitialization.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/XmlWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Argument.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/AnnotationHelper.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/FilteredClassFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/QualifierAsNamed.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/AddResourceDirMojo.java
texts:Allow to configure beans with pure annotations
Like discussed on the list and with Dominik I would like to add two annotations Config and ConfigProperty to define configs as well as inject them.
issueID:ARIES-1629
type:Improvement
changed files:
texts:Remove persistence-api feature from aries jpa feature repo
This approach had some issues with openjpa which only supports 2.0. In karaf we switched to a different approach a while ago that works better.
We simply depend on the 2.1 api with dependency=true. This also gives karaf the flexibility to choose the working api.
issueID:ARIES-163
type:Improvement
changed files:application/application-install/src/main/java/org/apache/aries/application/install/EBAInstaller.java
texts:Simple application installer
Provide a simple demonstration of how an Aries Application (.eba artifact) can be deployed into a running OSGi framework. The 'Programming model' page discusses applications and the .eba file: http://incubator.apache.org/aries/applications.html
issueID:ARIES-1630
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/StateConfig.java
texts:jmx core fails if configadmin is not present
JMX core claims it has an optional dependency to config admin. In the Activator though it directly accesses StateConfig which depends on config admin.
So the fix is to make config admin spec mandatory.
issueID:ARIES-1631
type:Bug
changed files:
texts:Aries JPA does not honour the javax.persistence.dataSource property
The Aries EntityManagerFactoryBuilder implementation provides help for Persistence Providers, but does not pay attention to this property. It should be used to provide the non-jta datasource in the Persistence Unit info if no other non jta DataSource is provided.
issueID:ARIES-1632
type:Bug
changed files:
texts:fastbin does not throw an error for unknown services
When the client invokes a service that is not known to the server, the request is silently dropped.
This is especially problematic if the client does an async call with futures. There will never be a reply, therefore the client thread could hang indefinitely.
If a service id is unknown to the server, it should throw a ServiceException early on.
issueID:ARIES-1634
type:Bug
changed files:
texts:BlueprintContainer are leaked when destroyed
When the BlueprintContainer is #destroy(), it is not unregistered from the OSGi registry hence is retained in the memory.
But when the BlueprintContainer is #quiesce() it is correctly unregistered from the OSGi registry.
The workaround it to first #quiesce() the container, then #destroy() it, so no service is retaining it, and it can be GC.
issueID:ARIES-1635
type:Bug
changed files:
texts:BeanMetadata parsing issue when ext and cm are combined.
org.osgi.service.blueprint.container.ComponentDefinitionException: Multiple placeholders with the same prefix and suffix are not allowed
 at org.apache.aries.blueprint.ext.PlaceholdersUtils.validatePlaceholder(PlaceholdersUtils.java:49)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler.parsePropertyPlaceholder(ExtNamespaceHandler.java:367)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler.parse(ExtNamespaceHandler.java:165)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.parser.Parser.parseCustomElement(Parser.java:1369)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.parser.Parser.loadComponents(Parser.java:427)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.parser.Parser.populate(Parser.java:331)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:349)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:300)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:269)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:265)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:255)[21:org.apache.aries.blueprint.core:1.6.2]
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[30:org.apache.aries.util:1.1.1]
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[30:org.apache.aries.util:1.1.1]
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[30:org.apache.aries.util:1.1.1]
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[30:org.apache.aries.util:1.1.1]
 at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[30:org.apache.aries.util:1.1.1]
 at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
 at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
 at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
 at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
 at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)[org.apache.felix.framework-5.4.0.jar:]
 at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
 at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
 at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1286)[8:org.apache.karaf.features.core:4.0.7]
 at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:846)[8:org.apache.karaf.features.core:4.0.7]
 at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1176)[8:org.apache.karaf.features.core:4.0.7]
 at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:1074)[8:org.apache.karaf.features.core:4.0.7]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_111]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_111]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_111]
 at java.lang.Thread.run(Thread.java:745)[:1.8.0_111]
Debug of BeanMetadata:
BeanMetadata[id='system-database-config', initialization=0, dependsOn=null, className='null', initMethodName='init', destroyMethodName='null', \
arguments=null, properties= [ \
   BeanProperty[name='placeholderPrefix', value=ValueMetadata[stringValue='${', type='null']], \
   BeanProperty[name='placeholderSuffix', value=ValueMetadata[stringValue='}', type='null']] \
], factoryMethodName='null', factoryComponent=null, scope='singleton', runtimeClass=class org.apache.aries.blueprint.ext.PropertyPlaceholder, fieldInjection=false]
blueprint.xml:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
 xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0"
 xsi:schemaLocation="
    http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
    http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd
    http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0 http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.5.xsd">

 <cm:property-placeholder id="application-database-config" persistent-id="com.nolimitssoft" update-strategy="none" />

 <!-- Allow the use of system properties -->
    <ext:property-placeholder id="system-database-config" placeholder-prefix="$[" placeholder-suffix="]" />

    ...

</blueprint>
You will notice that the Blueprint bean uses prefix and suffix properties but the BeanMetadata does not reflect those properties.
issueID:ARIES-1636
type:Bug
changed files:
texts:mvn install fails due to old dependency versions
Currently mvn clean install -DskipTests fails because some subprojects have dependencies to old Aries snapshot versions or 3rd party libraries.
issueID:ARIES-1637
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
texts:Subsystem persistent cache is not successfully deleted on uninstall
It is unclear the cause of this, but sometimes upon uninstalling a subsystem I find that the subsystems cache on disk still will contain the DEPLOYMENT.MF file for the subsystem. On restart if the same subsystem is installed again you will see the exception below. One cause may be because the DEPLOYMENT.MF holds the state of the subsystem, it may be possible that another thread is attempting to save the state in the DEPLOYMENT.MF file while the uninstall command is trying to delete the cache folder for the subsystem. On restart the DEPLOYMENT.MF file has the header indicating that it is uninstalled:
AriesSubsystem-State: UNINSTALLED
One possible fix is to detect the uninstalled state while reading the subsystems cache and discarding the ones that are uninstalled.
org.osgi.service.subsystem.SubsystemException: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.BasicSubsystem.getSubsystemManifest(BasicSubsystem.java:512)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.getSymbolicName(BasicSubsystem.java:336)
at org.apache.aries.subsystem.core.internal.TargetRegion.contains(TargetRegion.java:36)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:63)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:27)
at java.security.AccessController.doPrivileged(AccessController.java:594)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:738)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:732)
at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.installSubsystem(DeploySubsystemAction.java:190)
at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.deploySubsystem(DeploySubsystemAction.java:163)
at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.deploy(DeploySubsystemAction.java:113)
at com.ibm.ws.app.manager.esa.internal.SubsystemHandler.install(SubsystemHandler.java:356)
at com.ibm.ws.app.manager.esa.internal.EBAToSubsystemHandler.install(EBAToSubsystemHandler.java:189)
at com.ibm.ws.app.manager.internal.statemachine.StartAction.execute(StartAction.java:141)
at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.enterState(ApplicationStateMachineImpl.java:1191)
at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.run(ApplicationStateMachineImpl.java:804)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1153)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.lang.Thread.run(Thread.java:785)
Caused by: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.BasicSubsystem.getSubsystemManifest(BasicSubsystem.java:509)
... 18 more
issueID:ARIES-1638
type:Task
changed files:
texts:Update blueprint maven plugin webpage
Blueprint maven plugin webpage http://aries.apache.org/modules/blueprint-maven-plugin.html is old. Tasks:
update supported annotations
describe spi
describe parameters
issueID:ARIES-1639
type:Improvement
changed files:
texts:Convert blueprint-maven-plugin-annotation from jar to bundle

issueID:ARIES-164
type:Bug
changed files:
texts:Remove manual registerService() call for javax.persistence.provider
Currently, the jpa-container-itest code (and AriesTrade sample) is having to manually register OpenJPA as a javax.persistence.provider.
Once OPENJPA-1512 is integrated and in a nightly build, this code should be removed.
issueID:ARIES-1640
type:Improvement
changed files:
texts:Upgrade to geronimo transaction manager 3.1.4
The new release includes a fix for GERONIMO-4576
issueID:ARIES-1641
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceProviderHandler.java
texts:OsgiServiceProvider annotation does not publish service.ranking property as integer
There is no such option to generate service.ranking property using @OsgiServiceProvider annotation.
@OsgiServiceProvider(classes = [TaskRepository])
@Properties([
        @Property(name = "type", value = "db"),
        @Property(name = "service.ranking", value = "100"),
])
generates blueprint
<service ref="dbRepository" interface="org.github.alien11689.osgi.task.api.TaskRepository">    
    <service-properties>
        <entry key="type" value="db"/>
        <entry key="service.ranking" value="100"/>
    </service-properties>
</service>
and service properties in Apache Karaf:
 osgi.service.blueprint.compname = dbRepository
 service.bundleid = 54
 service.id = 274
 service.scope = bundle
 type = db
The best option is to convert service.ranking property from @Property annotation as ranking attribute in service element.
issueID:ARIES-1643
type:Bug
changed files:
texts:Github integration has stopped for https://github.com/apache/aries
Last commit on github is:
r1772389 | csierra | 2016-12-02 18:34:11 +0100 (pią) | 1 linia

More tests
Last commit in svn:
r1775287 | alien11689 | 2016-12-20 13:43:22 +0100 (wto) | 1 linia
ARIES-1641 Add missing file
issueID:ARIES-1644
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/PackageFinder.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Find packages to scan in BMP when scanPaths is missing

issueID:ARIES-1645
type:Test
changed files:
texts:Update JPA itests to current dependency versions

issueID:ARIES-1646
type:Bug
changed files:
texts:Improve upward compatibility of SPI Fly to ASM Version 6.x
In order to get Pax Web 6.0.1-SNAPSHOT (with Jetty) running in Apache Karaf 4.1-SNAPSHOT using the provided feature, an update of the ASM package is required. SPI Fly is required, because the Jetty packages rely on Java's service provider mechanism by placing configuration files in META-INF/services.
Is it possible to get a new snapshot release?
issueID:ARIES-1647
type:Bug
changed files:
texts:Aries Local Tx Control bundle does not advertise the TransactionControl Service
The Aries transaction control (local) implementation is missing a Provide-Capability for the TransactionControl service
issueID:ARIES-1648
type:Bug
changed files:
texts:Aries JPA does not advertise EntityManagerFactoryBuilder or EntityManagerFactory services
The problem is that there are no capabilities advertising this feature. Ideally there would be a Provide-Capability added automatically to every persistence bundle, but this is true for few, if any, persistence bundles, and also most persistence bundles do not make use of the org.osgi.service.jpa package, making the uses constraint impossible to apply.
Therefore the Provide Capability header should go on the Aries JPA container:
Provide-Capability: osgi.service;objectClass=javax.persistence.EntityManagerFactory;effective:=active;uses:=javax.persistence,osgi.service;objectClass=org.osgi.service.jpa.EntityManagerFactoryBuilder;effective:=active";uses:=org.osgi.service.jpa
issueID:ARIES-1649
type:Bug
changed files:
texts:Aries EclipseLink Adapter packaging issues
The Aries EclipseLink Adapter has two main problems:
1. The package import ranges for the EclipseLink API are overly specific. The latest release of the adapter only works with EclipseLink 2.6, even though all of the APIs it uses were defined long before. This bundle should be built against an older EclipseLink to ensure that Aries JPA doesn't force users to upgrade EclipseLink unnecessarily.
2. The Aries EclipseLink Adapter has no dependency on the EclipseLink JPA bundle. All of the API that it uses comes from EclipseLink Core, and therefore when doing a provisioning resolve operation EclipseLink JPA is not added! This needs to be fixed with a Require-Capability for EclipseLink JPA. Require-Capability: osgi.identity;filter:='(osgi.identity=org.eclipse.persistence.jpa)';effective:=active
issueID:ARIES-1650
type:Improvement
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:Maven plugin no longer includes non-bundle artifacts
The ESA Maven Plugin should be adapted to either log warnings or fail when trying to include a non-bundle artifact in the archive. Detecting whether an artifact is a bundle can be done by checking if the Bundle-SymbolicName header is present in the manifest.
Example error when trying to install an archive containing a non-bundle artifact:
Caused by: java.lang.NullPointerException
at org.apache.aries.subsystem.core.archive.FragmentHostCapability.initializeAttributes(FragmentHostCapability.java:38)
at org.apache.aries.subsystem.core.archive.FragmentHostCapability.<init>(FragmentHostCapability.java:67)
at org.apache.aries.subsystem.core.internal.BundleResource.computeOsgiWiringHostCapability(BundleResource.java:191)
at org.apache.aries.subsystem.core.internal.BundleResource.computeRequirementsOtherThanService(BundleResource.java:245)
at org.apache.aries.subsystem.core.internal.BundleResource.computeRequirementsAndCapabilities(BundleResource.java:216)
at org.apache.aries.subsystem.core.internal.BundleResource.<init>(BundleResource.java:74)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addResource(RawSubsystemResource.java:444)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeResources(RawSubsystemResource.java:429)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:131)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:90)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:54)
... 37 more
issueID:ARIES-1651
type:Improvement
changed files:
texts:Add repos for maven deploy

issueID:ARIES-1653
type:Improvement
changed files:blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Bar.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Activator.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DefaultRunnable.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/CurrencyTypeConverter.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/BindingListener.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Foo.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/AccountFactory.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/StaticAccountFactory.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/StaticAccountFactory.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/FooRegistrationListener.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/Account.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/DateTypeConverter.java
blueprint/examples/blueprint-sample-fragment/src/main/java/org/apache/aries/blueprint/fragment/FragmentBean.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DodgyListener.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/AccountFactory.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DateTypeConverter.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Account.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/AccountsServlet.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/InterfaceA.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/Foo.java
blueprint/examples/blueprint-sample-war/src/main/java/org/apache/aries/blueprint/sample/CurrencyTypeConverter.java
texts:Move samples and tests to subdirectories
Currently we have the actual blueprint modules, the test bundles, the tests and the samples in the same level of the directory hierarchy.
I propose to move the samples into a sub directory examples and the tests and test bundles into itests.
issueID:ARIES-1654
type:Improvement
changed files:
texts:Remove old blueprint annotations from trunk
Like discussed on the list.
issueID:ARIES-1655
type:Bug
changed files:
texts:Placeholders in XML - issue with enc: , cm: and ConfigAdmin updates
It seems there is an issue with token replacement when both cm: and enc: namespaces are involved:
Full reproducer inline since is short enough:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:enc="http://karaf.apache.org/xmlns/jasypt/v1.0.0">
 
   <enc:property-placeholder>
    <enc:encryptor class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
      <property name="config">
        <bean class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
          <property name="algorithm" value="PBEWithMD5AndDES"/>
          <property name="password" value="ENCRYPTION_PASSWORD"/>
        </bean>
      </property>
    </enc:encryptor>
  </enc:property-placeholder>

    <cm:property-placeholder persistent-id="mytest"  update-strategy="reload">
      <cm:default-properties>
          <!-- <cm:property name="mykey" value="5f85Rg1mhRZkAwPiRK3H+w=="/> -->
          <!-- <cm:property name="token" value="ENC(${mykey})"/> -->
          <cm:property name="token" value="ENC(5f85Rg1mhRZkAwPiRK3H+w==)"/>
      </cm:default-properties>
  </cm:property-placeholder> 

  <camelContext id="blueprintContext" trace="false"
    xmlns="http://camel.apache.org/schema/blueprint">

    <route>
      <from uri="timer:foo?fixedRate=true&amp;period=1000" />
      <setBody><simple>{{token}}</simple>
      </setBody>
      <log message="Outside of Camel Context ${body}" />
    </route>
  </camelContext>
 
</blueprint>
If the above blueprint file is deployed, it works as expected: camel is able to log lines containing the decrypted value of the encoded token.
But
if the value is changed at ConfigAdmin level, in Karaf with this command:
config:propset --pid mytest token 'ENC(5f85Rg1mhRZkAwPiRK3H+w==)'
The token is no longer unencrypted:
2017-01-09 15:07:24,666 | INFO  | #2 - timer://foo | route2                           | 232 - org.apache.camel.camel-core - 2.17.0.redhat-630187 | Outside of Camel Context ENC(5f85Rg1mhRZkAwPiRK3H+w==)
I have tried adding indirection, with the lines you can see commented out but I have not been able to make it work.
I have worked around the issue writing an implementation of org.osgi.service.cm.ConfigurationPlugin that gave me the functionality I needed but I wonder if this should just work out of the box:
https://github.com/paoloantinori/fabric8/commit/88159db9957cd85e773c807c63bf737be6dc8d81
issueID:ARIES-1656
type:Improvement
changed files:proxy/proxy-api/src/main/java/org/apache/aries/proxy/FinalModifierException.java
texts:Remove dependency to aries utils
Remove dependency of proxy api to aries util. Currently this dependency is only need for internationalization of the FinalModifierException message. I do not think this makes sense for such low level messages. So I would like to replace this with just a fixed english message. I am not even sure anyone tried to create other languages for this.
issueID:ARIES-1657
type:Improvement
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/JdkProxyManager.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/synthesizer/Synthesizer.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/MethodCopyingClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AbstractProxyManager.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
texts:Remove aries util from proxy impl and small cleanup

issueID:ARIES-1658
type:Improvement
changed files:
texts:Require OSGi 4.3 and slf4j
Until now aries proxy depdended only on OSGi 4.2 and also slf4j was marked as optional.
I think we can now assume OSGi 4.3 is present so we can safely use weaving hook and wiring.
I also noticed that slf4j is used quite a lot. So I don think it is really optional.
issueID:ARIES-1659
type:Improvement
changed files:
texts:Only produce the combined bundle

issueID:ARIES-1660
type:Improvement
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmProperties.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceUtil.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ManagedObjectManager.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ServiceUtil.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/BaseManagedServiceFactory.java
texts:Make blueprint independent from aries util at runtime
Embed or remove dependency to aries util
issueID:ARIES-1661
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigPropertiesHandler.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/config/ConfigProperty.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/config/ConfigProperties.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/config/Config.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/config/DefaultProperty.java
texts:Generate cm-properties and inject it via annotations in BMP

issueID:ARIES-1662
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/SingleInterceptorCollaborator.java
texts:Inconsistent behavior when an interceptor.preCall throws an exception
Depending on if there is only one interceptor or multiple interceptors the class org.apache.aries.blueprint.proxy.SingleInterceptorCollaborator or org.apache.aries.blueprint.proxy.Collaborator gets used.
When org.apache.aries.blueprint.proxy.Collaborator is used and an interceptor.preCall throws an exception then that same interceptor has its postInvokeExceptionalReturn method called with a null token. But if the org.apache.aries.blueprint.proxy.SingleInterceptorCollaborator is used then the interceptor is called with a token of org.apache.aries.blueprint.proxy.SingleInterceptorCollaborator.NON_INVOKED
Before the performance improvement from ARIES-1319 interceptors always got a null token in this situation. The behavior should be consistent and I think the token should remain null in this case since that was the prior behavior.
issueID:ARIES-1663
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceHandler.java
texts:Generate reference id without dash when filter is not provided

issueID:ARIES-1664
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceProviderHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintFileWriter.java
texts:Format generated blueprint XML

issueID:ARIES-1665
type:New Feature
changed files:
texts:Initial contribution of implementation of OSGi RFC-193
This contribution will begin to implement RFC-193 CDI Integration
https://github.com/osgi/design/blob/master/rfcs/rfc0193/rfc-0193-CDI-Integration.pdf
issueID:ARIES-1668
type:New Feature
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
texts:Support null values inside property-placeholders
Scenario:
For a bean I'd like to supply property-placeholder with a default null value.
    <cm:property-placeholder persistent-id="org.apache.xxx.placeholder">
        <cm:default-properties>
            <cm:property name="foo.bar">
                <null/>
            </cm:property>
        </cm:default-properties>
    </cm:property-placeholder>
    <bean class="org.apache.xxx.FooImpl" id="xxx-id">
        <property name="fooBar" value="${foo.bar}"/>
    </bean>
package org.apache.xxx;
public class FooImpl {
  public void setFooBar(Integer fooBar) { this.fooBar = fooBar;}
  public Integer getFooBar() { return fooBar; }
}
Observed behaviour:
ERROR  17 o.a.a.b.c.BlueprintContainerImpl [rint Extender: 3] Unable to start blueprint container for bundle org.apache.xxx/0.x.0.SNAPSHOT
org.osgi.service.blueprint.container.ComponentDefinitionException: Error setting property: PropertyDescriptor <name: maxAge, getter: class org.apache.xxx.FooImpl.getFooBar(), setter: [class org.apache.xxx.FooImpl.setFooBar(class java.lang.Integer)]
  at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:963)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:929)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:910)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:844)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[17:org.apache.aries.blueprint.core:1.5.0]
  at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_111]
  at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:255)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:186)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:712)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:399)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:273)[17:org.apache.aries.blueprint.core:1.5.0]
  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_111]
  at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_111]
  at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)[17:org.apache.aries.blueprint.core:1.5.0]
  at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)[17:org.apache.aries.blueprint.core:1.5.0]
  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_111]
  at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_111]
  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_111]
  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_111]
  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_111]
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_111]
  at java.lang.Thread.run(Thread.java:745)[:1.8.0_111]
Caused by: java.lang.NumberFormatException: For input string: ""
  at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)[:1.8.0_111]
Versions loaded in karaf
 | mvn:org.apache.aries.blueprint/org.apache.aries.blueprint.api/1.0.1
 | mvn:org.apache.aries.blueprint/org.apache.aries.blueprint.cm/1.0.7
 | mvn:org.apache.aries.blueprint/org.apache.aries.blueprint.core/1.5.0
My Analysis:
I discovered that org.osgi.service.blueprint.reflect.Metadata.NullMetadata.NULL set correctly on to the BeanProperty
However good work from context.parseElement(BeanProperty.class, enclosingComponent, e) is being vanished from props.addEntry(createValue(context, prop.getName(), String.class.getName()), prop.getValue());
issueID:ARIES-1669
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/referencelistener/Availability.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/referencelistener/ReferenceListener.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/referencelistener/Cardinality.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/referencelistener/Unbind.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/referencelistener/Bind.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/referencelistener/ReferenceListenerHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/referencelistener/ReferenceListenerDefinition.java
texts:Genreate reference listener via annotations

issueID:ARIES-1671
type:Bug
changed files:
texts:Adding a standard JPA extender capability
OSGi JPA Service 1.1 compatibility
The JPA Service extender is required to advertise the following:
Provide-Capability: osgi.extender;
osgi.extender="osgi.jpa";
version:Version="1.1";
uses:="org.osgi.service.jpa,javax.persistence"
issueID:ARIES-1673
type:Bug
changed files:blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringBeanProcessor.java
texts:Spring beans not destroyed
Hello everyone!
I have some problem with undeploy bundle using Blueprint Spring.
If properly understood it, SpringApplicationContext NOT destroy when bundle uninstall.
For example, simple bundle with jax-rs:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xsi:schemaLocation="
             http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
             http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd

">
    <context:annotation-config/>

    <jaxrs:server id="test" address="/test">
        <jaxrs:serviceBeans>
            <ref bean="rs-test"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>

    <bean id="rs-test" class="com.dob.ams.osgi.service.TestRestService"/>

</beans>
It's worked, server was registered (call JAXRSServerFactoryBean#create).
Next step: uninstal this bundle. All methods with annotation @PreDestroy called, but not JAXRSServerFactoryBean#destroy (and not call SpringApplicationContext#close).
When I again deploy this bundle, I get the error:
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: There is an endpoint already running on /test.
at org.apache.cxf.jaxrs.JAXRSBindingFactory.addListener(JAXRSBindingFactory.java:86)
at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:123)
at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:206)
Аny help would be appreciated!
Regards
Anton
issueID:ARIES-1674
type:Bug
changed files:
texts:Multiple inharitance levels with generics cause ClassCastException when JPA is enabled
I'm using inheritance with generics over multiple levels.
Injecting properties to those beans works fine, but on access of a property of the lowest class, there is a ClassCastException thrown.
I could narrow it down to enabling JPA in the blueprint causing the issue:
When disabling JPA, the proper bean class is resolved,
enabled the type resolving stopped at the parent abstract class of the expected class, thus throwing a ClassCastException.
Example project to reproduce this issue:
https://github.com/fwassmer/inheritance
issueID:ARIES-1676
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/bean/Scope.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/bean/BeanHandler.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/bean/Bean.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/bean/Activation.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Create annotation(s) replacement for Spring annotation
Create annotation or annotations, which could be used as replcement for spring annotations:
org.springframework.context.annotation.Lazy
org.springframework.context.annotation.DependsOn
issueID:ARIES-1677
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceHandler.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/ServiceProperty.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceProviderHandler.java
texts:Create typed service properties via annotations
We could currently create service properties only as String.
@Property(name = "test1", value="test") - as it is currently
@Property(name = "test1:Integer", value="15") - 15 as java.lang.Integer created with method valueOf
@Property(name = "test2:java.lang.Boolean", value="true") - true as java.lang.Boolean created with method valueOf
@Property(name = "test2:[]", value="val1|val2") - array of java.lang.String [val1, val2]
@Property(name = "test2:Short[]", value="1|2|3") - array of java.lang.Short [1, 2, 3]
@Property(name = "test2:java.lang.Double[]", value="1.5|0.8|7.0") - array of java.lang.Double [1.5, 0.8, 7.0]
issueID:ARIES-1678
type:Bug
changed files:
texts:blueprint core silently does not work if started without proxy impl
After a question on stack overflow I checked how to run blueprint in bndtools. As it does not use karaf features I only installed the bundles the resolver hinted me to install. For blueprint core this is just the proxy api bundle.
When starting the application blueprint core was active but only had a service tracker for the ProxyManager open. As there was no output it was difficult to spot from the outside what was missing. The visible sign was just that blueprint contexts were not processed.
So we should add a requirement for the ProxyManager service so the resolver can hint that a bundle providing the service is missing.
issueID:ARIES-1680
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Write ext namespace only when bean needs field injection

issueID:ARIES-1681
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
texts:Factory method from annotation register bean without qualifiers

issueID:ARIES-1682
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Aries Blueprint Core 1.7.1 breaks relative JAR URI handling
When resolving relative xsd paths, blueprint will throw the error:
java.lang.RuntimeException: java.net.MalformedURLException: no protocol: ../wsdl/http-conf.xsd
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl$Loader.resolveResource(NamespaceHandlerRegistryImpl.java:514)
 at com.sun.org.apache.xerces.internal.util.DOMEntityResolverWrapper.resolveEntity(DOMEntityResolverWrapper.java:117)
 at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.resolveEntity(XMLEntityManager.java:1081)
 at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.resolveDocument(XMLSchemaLoader.java:657)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.resolveSchemaSource(XSDHandler.java:2109)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.constructTrees(XSDHandler.java:1092)
 at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.parseSchema(XSDHandler.java:623)
 at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:613)
 at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:572)
 at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:538)
 at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:255)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.createSchema(NamespaceHandlerRegistryImpl.java:628)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.doGetSchema(NamespaceHandlerRegistryImpl.java:458)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.getSchema(NamespaceHandlerRegistryImpl.java:443)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:343)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
 at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
 at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.MalformedURLException: no protocol: ../wsdl/http-conf.xsd
 at java.net.URL.<init>(URL.java:593)
 at java.net.URL.<init>(URL.java:490)
 at java.net.URL.<init>(URL.java:439)
 at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl$Loader.resolveResource(NamespaceHandlerRegistryImpl.java:512)
 ... 26 more
This was caused by the relative path in CXF in the xsd.
To reproduce simply deploy any bundle using the http://cxf.apache.org/transports/http/configuration namespace.
issueID:ARIES-1683
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigPropertiesHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigWriter.java
texts:@Config annotation sets placeholder-prefix and placeholder-suffix from updatePolicy
@Config(
        pid = "org.apache.aries.my",
        placeholderPrefix = "$[", 
        placeholderSuffix = "]", 
        defaults = {
                @DefaultProperty(key = "title", value = "My Title")
        }
)
generates
<property-placeholder xmlns="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0" persistent-id="org.apache.aries.my" placeholder-prefix="reload" placeholder-suffix="reload" update-strategy="reload">
        <default-properties>
            <property name="title" value="My Title"/>
        </default-properties>
</property-placeholder>
issueID:ARIES-1684
type:Improvement
changed files:
texts:Upgrade ZooKeeper to 3.4.10
3.4.7 has been removed from the official release list, and in any case it's a bit old. 3.4.9 has been out for several months and fixes some additional issues.
As 3.4.8 and 3.4.9 seem to have issues we will wait for 3.4.10 and stay with 3.4.7 until then.
issueID:ARIES-1685
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/ResourceInitializer.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/bean/BeanHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRefStore.java
texts:Add integration tests for BMP

issueID:ARIES-1686
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Name of blueprint maven plugin goal has changed from version 1.5.0

issueID:ARIES-1687
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Blueprint maven plugin do not recognize source directory change

issueID:ARIES-1688
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
texts:Generate beans and custom writers in alphabetical order

issueID:ARIES-1689
type:Bug
changed files:
texts:JpaInterceptor is not thread safe
If two thread try to access to JpaInterceptor could happen that first thread set the value of coordinator but not yet the em. The second one found the coordinator setted and try to access to em.
NullPointerException is raised
issueID:ARIES-1690
type:Bug
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/ComponentTxData.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionalAnnotationAttributes.java
texts:Ignored rollbackOn element of Transactional annotation
Here is a simple example-method, when I use this the document ends up in the database.
@Transactional(value = Transactional.TxType.REQUIRED
,rollbackOn =
{Exception.class}
)
public void store(Document document) throws Exception
{ entityManager.persist(document); throw new Exception(); }
issueID:ARIES-1692
type:Improvement
changed files:
texts:Add functionality to be able to supply a test query for use in checking pooled connections
A common feature of pooling libraries is to be able to supply a test query for use in checking pooled connections. Many of the later JDBC drivers do not need this option as the driver implements Connection.isValid(), however some older drivers don't implement this method correctly.
Add functionality to be able to supply a test query for use in checking pooled connections.
issueID:ARIES-1693
type:Bug
changed files:
texts:ClassloaderObjectInputStream can not load InputStreamProxy class
This was reported by Nick Baker over E-Mail.
The problem seems to be that the ClassLoaderObjectInputStream only looks into the user bundle classloader. This will fail when loading the InputStreamProxy.
This code should make sure the class can be loaded:
https://github.com/apache/aries-rsa/commit/09771c940422a3f83d3779d6d8b482959605f95a
but apparently it uses the wrong classloader.
This should work:
return Class.forName(className, false, getClass().getClassLoader());
issueID:ARIES-1694
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
texts:Allow JNDI factories to be forced in if already set
While calling the factory setters on NamingManager the code currently gives up:

In some cases it is desired to override the currently set builders. A new option should be added to enable forcing in our own builders. This should not be enabled by default.
issueID:ARIES-1695
type:Bug
changed files:
texts:Aries JPA does not work in karaf because of spec problem
When doing
feature:install jpa hibernate
in karf 4.1.0 Aries JPA does not recognize the hibernate PersistenceProvider service as Aries JPA binds to the jpa spec 2.0 and hibernate binds to the jpa spec 2.1.
The reason for this is that Aries JPA requires the org.osgi.service.jpa package which is only provided by the geronimo jpa spec bundle.
The solution to this is to embed the JPA spec into jpa.container.
I also tried to use the OSGi JPA spec bundle but it is not compatbile to JPA 2.1 spec.
issueID:ARIES-1696
type:Improvement
changed files:
texts:Large refactor using the latest OSGi snapshot API
See https://github.com/apache/aries/pull/67
issueID:ARIES-1697
type:Request
changed files:
texts:Create CDI component in ARIES JIRA project
I'd like to request someone with JIRA powers to create a CDI component in the ARIES project.
issueID:ARIES-1698
type:Bug
changed files:
texts:Aries JPA should update to the latest OSGi API snapshot
Given the stated intent of making Aries JPA the Reference Implementation for version 1.1.0 of the OSGi JPA service, Aries JPA should start building against the latest snapshot of the JPA service API. This is publicly available from https://oss.sonatype.org/content/repositories/osgi/
issueID:ARIES-1699
type:Improvement
changed files:
texts:Make rsa.discovery.command bundle conditional
{{
<conditional>
<condition>eventadmin</condition>
<bundle>mvn:org.apache.aries.rsa.discovery/org.apache.aries.rsa.discovery.command/${project.version}</bundle>
</conditional>
}}
issueID:ARIES-17
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
texts:ServiceHelper registry lookup problems
1) ServiceHelper is using getAllServiceReferences() to get a list of services on the client's bundle context. That can return services which might be incompatible with the bundle classloader. I think the getServiceReferences() should be used instead.
2) The context.lookup("osgi:services/<interface>") should return a best ranking service registered with that interface. However, the ServiceHelper.getService() function seems to return a first service that it finds.
issueID:ARIES-170
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:AriesApplicationManagerImpl#createApplication creates the application once for each included bundle

issueID:ARIES-1700
type:Bug
changed files:blueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/NoOsgiRecipeBuilder.java
texts:A possible null pointer
The current version of NoOsgiRecipeBuilder has the following code:
else if (v instanceof IdRefMetadata)
{ // TODO: make it work with property-placeholders? String componentName = ((IdRefMetadata) v).getComponentId(); IdRefRecipe rnr = new IdRefRecipe(getName(null), componentName); return rnr; }
else
{ throw new IllegalStateException("Unsupported value: " + v.getClass().getName()); }
Here, v.getClass() can return null. The line shall be revised as:
throw new IllegalStateException("Unsupported value: " + (v != null ? v.getClass().getName() : "null"));
Indeed, I notice that the file, RecipeBuilder, has the following similar code:
else if (v instanceof IdRefMetadata)
{ // TODO: make it work with property-placeholders? String componentName = ((IdRefMetadata) v).getComponentId(); IdRefRecipe rnr = new IdRefRecipe(getName(null), componentName); return rnr; }
else
{ throw new IllegalStateException("Unsupported value: " + (v != null ? v.getClass().getName() : "null")); }
It checks whether v is null or not.
issueID:ARIES-1701
type:Bug
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmUtils.java
texts:A Possible NPE
I found that the CmUtils.getProperties method has a buggy code as follow:
try {
ConfigurationAdmin ca = bc.getService(caRef);
Configuration config = getConfiguration(ca, persistentId);
if (config != null)
{ Dictionary<String, Object> props = new CaseInsensitiveDictionary(config.getProperties()); BundleContext caBc = caRef.getBundle().getBundleContext(); callPlugins(caBc, props, service, persistentId, null); return props; }
else
{ return null; }
} finally
{ bc.ungetService(caRef); }
Here, before calling ungetService, the call chain BundleContext caBc = caRef.getBundle().getBundleContext() can throw NPE.
Indeed, a similar bug is fixed in ARIES-788. Please check this bug at https://issues.apache.org/jira/browse/ARIES-788?jql=project%20%3D%20ARIES
issueID:ARIES-1702
type:Bug
changed files:
texts:A performance bug
I notice that DirObjectFactoryHelper.getObjectInstanceUsingObjectFactoryBuilders has the following code:
for (ServiceReference ref : refs) {
ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
try
{ factory = builder.createObjectFactory(obj, environment); }
catch (NamingException e)
{ // TODO: log it }
finally
{ callerContext.ungetService(ref); }
if (factory != null)
{ break; }
}
The above code is copied from a buggy version of ObjectFactoryHelper.getObjectInstanceUsingObjectFactoryBuilders. Please refer to ARIES-1068 for details.
The buggy version of ARIES-1068 is identical. Its fixed version is as follow:
ServiceReference[] refs = objFactoryStC.getServiceRefs();

if (refs != null) {
Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);

for (ServiceReference ref : refs) {
if (canCallObjectFactory(obj, ref)) {
ObjectFactory factory = (ObjectFactory) objFactoryStC.getService(ref);

try { result = factory.getObjectInstance(obj, name, nameCtx, environment); } catch (NamingException ne) { // Ignore this since we are doing last ditch finding, another OF might work. }

// if the result comes back and is not null and not the reference
// object then we should return the result, so break out of the
// loop we are in.
if (result != null && result != obj) { break; }
}
}
}
issueID:ARIES-1704
type:Bug
changed files:
texts:JNDI implementation does not follow the specification
The ObjectFactoryHelper.getObjectInstance method does not follow the specification. Jarek Gawor reported and fixed a similar bug in ARIES-311.
The fixed code in that bug report is as follow:
 public Object getObjectInstance(final Object obj,
                                    final Name name,
                                    final Context nameCtx,
                                    final Hashtable<?, ?> environment,
                                    final Attributes attrs) throws Exception {
        return Utils.doPrivileged(new PrivilegedExceptionAction<Object>() {
            public Object run() throws Exception {
                return doGetObjectInstance(obj, name, nameCtx, environment, attrs);
            }            
        });
    }
    
    private Object doGetObjectInstance(Object obj,
                                       Name name,
                                       Context nameCtx,
                                       Hashtable<?, ?> environment,
                                       Attributes attrs) throws Exception {
I believe that similar fixes work for this bug report.
issueID:ARIES-1706
type:Improvement
changed files:
texts:Use Provide-Capability instead of Export-Service

issueID:ARIES-1707
type:Bug
changed files:jmx/jmx-blueprint-api/src/main/java/org/apache/aries/jmx/blueprint/BlueprintMetadataMBean.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/BlueprintMetadata.java
texts:The BlueprintMetadata.getBlueprintContainer throws inconsistent exceptions
The BlueprintMetadata_getBlueprintContainer method throws IllegalArgumentException as follow:
BlueprintMetadata.java
 if (serviceReferences == null || serviceReferences.length <1) {
            throw new IllegalArgumentException("Invalid BlueprintContainer service id: " + containerServiceId);
        }
However, the FrameworkUtils_resolveService method throws IOException for the same condition:
FrameworkUtils.java
if (references == null || references.length < 1) {
                throw new IOException("Service with id [" + serviceId + "] not found");
            } else {
                result = references[0];
            }
This is confusing. Indeed, I notice that the buggy code of ARIES-333 throws IllegalArgumentException, but the fixed code throws IOException.
The current BlueprintMetadata.java shall be modified to eliminate the confusing.
issueID:ARIES-1708
type:Bug
changed files:
texts:Incorrect processing of duplicated patterns
In case if transaction pattern is used more than once for the same component, the transaction-blueprint module throws following exception:
Unable to apply patterns {.*, .*}.
It caused by following: map in TxComponentMetaDataHelperImpl.TranData uses Pattern as a key. Pattern class doesn't implement equals() method and duplicated patterns can be saved in the map.
That causes exception on later processing steps, because code cannot find fewest and longest pattern.
Proposal:
a) use wildcard string instead Pattern object as map key
b) in case if more than one pattern stays after selection, just use the first one instead exception.
This case happens often by using blueprint maven plugin generating transaction attribute in xml configuration and enabling annotations scan for the same beans.
Patch is attached
issueID:ARIES-171
type:Task
changed files:jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java
texts:Replace System.out.println() with proper logging

issueID:ARIES-1710
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/Namespaces.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/AbstractTransactionFactory.java
texts:Configurable enable-annotation element in blueprint xml
Currently tx:enable-annotation element is always added for 1.0.0, 1.1.0, 1.2.0 and 2.0.0 transaction namespaces by blueprint-plugin.
This element enables scanning of @Transactional attribute in beans additionally to blueprint configuration
Problems:
1) 1.0.0 and 1.1.0 schemas doesn't support this element at all
2) for 1.2.0 there are use cases to skip annotation scanning and use only configured transaction attributes in xml
Proposal:
1) enable element only for 1.2.0 and 2.0.0 namespaces
2) provide configuration property to deactivate injection of this element
issueID:ARIES-1711
type:Bug
changed files:
texts:Mapping files in persistence.xml not used
The mapping files in a PeristenceUnit are not used by Apache Aries.
The same issue was noticed at this thread: http://karaf.922171.n3.nabble.com/Aries-JPA-2-3-0-mapping-file-not-used-td4047501.html
I have the same problem and I found out that the use of a mapping file in a persistence.xml works only on particular circumstances.
For example if I use the following declaration of a persistence.xml :
<?xml version="1.0" encoding="UTF-8"?>
<persistence ...
 version="2.1">
 <persistence-unit name="jpa.customer"
  transaction-type="RESOURCE_LOCAL">
  <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>

  <non-jta-data-source>osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/testDB)</non-jta-data-source>

  <mapping-file>META-INF/developer-orm.xml</mapping-file>
  
  <mapping-file>META-INF/orm.xml</mapping-file>
  
  <class>test.Customer</class>

  ...

  <properties>
   ...
  </properties>
 </persistence-unit>
</persistence>
On deployment of this persistence-unit the class test.Customer gets bootstrapped from Hibernate. The mapping file META-INF/orm.xml is detected automatically from the persistence provider.
But the mapping file META-INF/developer-orm.xml is never detected.
If I fixed the particular code in the module Aries JPA Container locally. After building and testing the Apache Aries Project I could deploy a persistence.xml with multiple mapping files.
issueID:ARIES-1712
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/AbstractTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/JavaxTransactionFactory.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/javax/CdiTransactionFactory.java
texts:Blueprint maven plugin: common code in transaction factories
blueprint maven plugin uses following factories to proceed different kind of transaction annotations: JavaxTransactionFactory, CdiTransactionFactory, CdiTransactionFactory.
Basically factories implement very similar functionality triggered by different kind of annotation classes.
Currently these transacation factories are decoupled one from other, but they repeat a lot of code: namespace handling, attribute writer, etc.
Proposal: refactor common functionality either to delegate helper or to abstract class. In case if proposal sounds reasonable for you, I will provide the patch.
issueID:ARIES-1713
type:Bug
changed files:
texts:TopologyManagerExport fails for multiple interfaces
When a remote service exports more than one interface there is a class cast exception in TopologyManagerExport#shouldExport
issueID:ARIES-1714
type:Bug
changed files:
texts:fastbin long running (future) calls sometimes fail
There is an eviction timeout in fastbins transport pool that can cause long running remote calls (future based) to fail if no other invocations are sent through the same transport for a while.
issueID:ARIES-1715
type:Bug
changed files:
texts:Blueprint doesn't apply interceptors for the init-method.
Trying to use an injected entity manager in an init-method results in the following exception:
2017-04-12T18:10:24,453 | ERROR | Blueprint Extender: 3 | BlueprintContainerImpl           | 12 - org.apache.aries.blueprint.core - 1.8.0 | Unable to start blueprint container for bundle abc.pcta-test/1.0.0.SNAPSHOT
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to initialize bean testBean
 at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:738) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79) [12:org.apache.aries.blueprint.core:1.8.0]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
 at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:255) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:186) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:725) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:412) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:277) [12:org.apache.aries.blueprint.core:1.8.0]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
 at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106) [12:org.apache.aries.blueprint.core:1.8.0]
 at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48) [12:org.apache.aries.blueprint.core:1.8.0]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
 at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: java.lang.IllegalStateException: Need active coordination
 at org.apache.aries.jpa.support.impl.EMSupplierImpl.get(EMSupplierImpl.java:81) ~[?:?]
 at org.apache.aries.jpa.support.osgi.impl.EmProxy.invoke(EmProxy.java:38) ~[?:?]
 at com.sun.proxy.$Proxy80.persist(Unknown Source) ~[?:?]
 at Proxya9d42525_1701_4ce9_bbc8_809ae15cb353.persist(Unknown Source) ~[?:?]
 at abc.pcta_test.TestBean.init(TestBean.java:28) ~[?:?]
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
 at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
 at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299) ~[?:?]
 at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980) ~[?:?]
 at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736) ~[?:?]
 ... 21 more
The following example bundle can be used to reproduce it: https://github.com/Smasherr/postconstruct-transactional-test
issueID:ARIES-1716
type:Improvement
changed files:
texts:Upgrade to pax-jdbc 1.1.0
Pax-jdbc > 1.0.0 handles pooling and xa differently. So we need to adapt our configs.
There is also no wrapped xa DSF anymore. I will avoid it for now but we need a new solution for this.
issueID:ARIES-1717
type:Improvement
changed files:blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringXsdVersionResolver.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
blueprint/blueprint-spring-extender/src/main/java/org/apache/aries/blueprint/spring/extender/SpringOsgiExtension.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BeansNamespaceHandler.java
texts:Untie Aries Blueprint Spring (extender) to specific Spring version
We want to reduce the usage of Spring and replace Spring DM in favor of Aries Blueprint. The blueprint-spring and blueprint-spring-extender bundles could be used to achieve this rather easily.
We're stuck with Spring 3.x version and this does not play well with the earlier mention blueprint bundles. The following problems are encountered:
when the temp blueprint configuration files are created from the Spring beans, the xsd version is set to 4.2 (which are not present because we're using a different version)
when creating a Spring ParserContext XmlBeanDefinitionReader.createReaderContext is called but this is protected in Spring 3.x and results in NoSuchMethodError.
when importing bean definitions XmlReaderContext.getEnvironment is called (from BeansNamespaceHandler$BeanDefinitionReader) but this method does not exists in Spring 3.x. In Spring 4.x this method is introduced and acts as a shortcut by redirecting the call to the member variable reader. The call is simply replaced with XmlReaderContext.getReader.getEnvironment
A patch is attached that solves these problems. For the xsd version a lookup is executed and the version is resolved at run time. The other problem is solved by creating a private inner class that extends XmlBeanDefinitionReader and makes createReaderContext available that simply delegates the call to its super class (XmlBeanDefinitionReader)
issueID:ARIES-1718
type:New Confluence Wiki
changed files:
texts:Please create a Project Space for the Apache Aries

issueID:ARIES-1719
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionLogUtils.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
texts:HOWLLog can't be restarted with different configuration

issueID:ARIES-172
type:Improvement
changed files:application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
application/application-api/src/main/java/org/apache/aries/application/management/BundleInfo.java
texts:BundleInfo should contain imported and exported services

issueID:ARIES-1720
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
texts:java.lang.NullPointerException while processing OSGI-INF as a directory
This method will throw an java.lang.NullPointerException:
08:38:33.903||DEBUG|File "OSGI-INF" in subsystem with location "org.c8tech.runtime.esa.kernel-1493206713882" will be ignored because it is not recognized as a supported resource|o.a.a.s.c.i.RawSubsystemResource||o.a.a.s.c.i.RawSubsystemResource@496[Start Level: Equinox Container: b3c76716-7e67-4fbd-aadb-6d5936b057d9]
java.lang.NullPointerException: null
at org.apache.aries.subsystem.core.internal.BundleResource.computeManifest(BundleResource.java:62)
at org.apache.aries.subsystem.core.internal.BundleResource.<init>(BundleResource.java:73)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addResource(RawSubsystemResource.java:492)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeResources(RawSubsystemResource.java:459)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:134)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:91)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:60)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:1)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:677)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:730)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:304)
at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:1)
for (IFile file : directory.listFiles()) {
            if (file.isFile()) {
                addResource(file, file.convertNested(), manifest, result);
            } else {
-->                addResource(file, file.convert(), manifest, result);
            }
  }
issueID:ARIES-1721
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/SpringTransactionalFactory.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/LazyAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ComponentAsNamed.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ValueInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/AutowiredAsInject.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/DependsOnAttributeResolver.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/ComponentBeanFinder.java
blueprint/plugin/blueprint-maven-plugin-spring-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/spring/QualifierAsNamed.java
texts:Extract Spring annotation handlers to separate jar

issueID:ARIES-1722
type:Bug
changed files:
texts:NLS class in transaction-manager refers to wrong message bundle

issueID:ARIES-1723
type:Bug
changed files:
texts:Blueprint NamespaceHandler can't resolve XSD in offline mode
When the NamespaceHandler is offline, it fails to resolve the XSD. This is the exact same bug that was resolved in ARIES-1540 (blueprint-core-1.6.2).
The changes made in that fix seem to have been undone in later versions. Issue ARIES-1540 describes the issue, and contains the bugfix. If I look at the code for 1.8.0 the change of that fix can be applied with no changes.
issueID:ARIES-1724
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
texts:Proxy generates calls to static methods in <clinit> which can fail on Java 9
The issue is that the JVMS was changed in Java 9 to disallow "final" fields from being modified outside of the <clinit> method. Even other methods called by <clinit>.
"if the field is final the instruction must occur in the < clinit > method of the current class. Otherwise, an IllegalAccessError is thrown."
The issue here is that aires generates method proxies that stores references to the generated methods in 'private static final' fields, which it then assigns in woven static init weaving code by calling another generated static method.
It seems that we can trivially fix this by removing the 'final' modifier of the generated method field.
Here is what the current generated code would looking as a java class:
Foo.java
public class Foo {
  static final boolean bar;
  static {
    setBar(); // blows up with IAE as of class version >= 53
  }
  static void setBar() {
    bar = true;
  }
}
Where the bar field is a field declared by the proxy code and set by another static method which is called by the <clinit> block. A proper fix would be to change the generated code to do something more like this:
Foo.java
public class Foo {
    static final boolean bar;
    static {
        bar = getBar();
    }
    static boolean getBar() {
        return true;
    }
}
But as of now I am not sure how complicated of a change that would be to the proxy code. The simple fix is to not generate these static private fields as final.
issueID:ARIES-1726
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Always use findEntries to find blueprint xml configuration from fragments

issueID:ARIES-1727
type:Bug
changed files:blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
texts:Unable to create blueprint spring container

issueID:ARIES-1728
type:Improvement
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionLogUtils.java
texts:Remove NLS in transaction manager

issueID:ARIES-1729
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
texts:Including resources with no manifest or bundle symbolic names causes NPE
The following NPE happens if you have a resource with no bundle manifest:
java.lang.NullPointerException
 at org.apache.aries.subsystem.core.internal.BundleResource.computeManifest(BundleResource.java:62)
 at org.apache.aries.subsystem.core.internal.BundleResource.<init>(BundleResource.java:73)
 at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addResource(RawSubsystemResource.java:499)
 at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeResources(RawSubsystemResource.java:459)
 at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:134)
 at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:91)
 at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:60)
 at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:27)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:677)
 at org.apache.aries.subsystem.core.internal.BasicSubsystem.install(BasicSubsystem.java:671)
 at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.installSubsystem(DeploySubsystemAction.java:190)
 at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.deploySubsystem(DeploySubsystemAction.java:163)
 at com.ibm.ws.app.manager.esa.internal.DeploySubsystemAction.deploy(DeploySubsystemAction.java:113)
 at com.ibm.ws.app.manager.esa.internal.SubsystemHandler.install(SubsystemHandler.java:356)
 at com.ibm.ws.app.manager.esa.internal.EBAToSubsystemHandler.install(EBAToSubsystemHandler.java:194)
 at com.ibm.ws.app.manager.internal.statemachine.StartAction.execute(StartAction.java:141)
 at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.enterState(ApplicationStateMachineImpl.java:1259)
 at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.run(ApplicationStateMachineImpl.java:874)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
 at java.lang.Thread.run(Thread.java:748)
The following happens if a jar resource is included in the ESA which has no Bundle-SymbolicName header:
java.lang.NullPointerException
 at org.apache.aries.subsystem.core.archive.FragmentHostCapability.initializeAttributes(FragmentHostCapability.java:38)
 at org.apache.aries.subsystem.core.archive.FragmentHostCapability.<init>(FragmentHostCapability.java:67)
 at org.apache.aries.subsystem.core.internal.BundleResource.computeOsgiWiringHostCapability(BundleResource.java:191)
 at org.apache.aries.subsystem.core.internal.BundleResource.computeRequirementsOtherThanService(BundleResource.java:245)
 at org.apache.aries.subsystem.core.internal.BundleResource.computeRequirementsAndCapabilities(BundleResource.java:216)
 at org.apache.aries.subsystem.core.internal.BundleResource.<init>(BundleResource.java:74)
 at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addResource(RawSubsystemResource.java:472)
 at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeResources(RawSubsystemResource.java:457)
 at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:134)
 at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:91)
 at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:60)
In both cases we should give a good exception message to log and simply ignore the resource and continue on installing the subsystem.
issueID:ARIES-173
type:Task
changed files:samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Activities for creating 0.1 release
This is an umbrella task for the activities needed to get our source tree / poms / distribution etc in shape for the 0.1 release.
rename 1.0 release in JIRA to 0.1
change 1.0.0-incubating-SNAPSHOT 0.1-incubating-SNAPSHOT
use maven-assembly plugin to create a zip and tar.gz of the release artifacts
issueID:ARIES-1732
type:Bug
changed files:
texts:blueprint-cm - race condition
There is a possible race condition in `org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder` and `org.apache.aries.blueprint.compendium.cm.ManagedObjectManager`
There are situations where `ConfigAdmin` service might not be available and returns `null` when queried for the initial `config`.
In other cases instead, `CmPropertyPlaceholder` receives updates from `ConfigAdmin` thread even before it has completed it's initialization.
The code doesn't discriminate if `config` is `null` or not, and treats any value as valid, marking `CmPropertyPlaceholder` instance as initialized.
This leads to spotty errors.
The suggested fix, that simply prevents that `update(null)` invocation mark the `CmPropertyPlaceholder` instance as initialized, addresses the issue.
Code here:
https://github.com/apache/aries/compare/trunk...paoloantinori:ENTESB-7141?expand=1
issueID:ARIES-1733
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BlueprintRegistry.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/Handlers.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/collection/CollectionInjectHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/CollectionDependencyAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/collection/CollectionInject.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/RefCollection.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Argument.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRefStore.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/AnnotationHelper.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Property.java
texts:Injecting array, set or list of beans in BMP
Bean like this:
@Bean
public class BeanWithCollections {

    @CollectionInject(I1.class)
    List<I1> listFieldInject;

    @CollectionInject(I1.class)
    Set<I1> setFieldInject;

    @CollectionInject(I2.class)
    I2[] arrayFieldInject;

    @AnnotatedService
    @CollectionInject(I1.class)
    Set<I1> annotatedSetFieldInject;

    @CollectionInject(I1.class)
    public void setListSetterInject(List<I1> l) {
    }

    @CollectionInject(I2.class)
    public void setSetSetterInject(Set<I1> l) {
    }

    @CollectionInject(I1.class)
    public void setArraySetterInject(I1[] l) {
    }

    @AnnotatedService
    @CollectionInject(I2.class)
    public void setAnnotatedArraySetterInject(I2[] l) {
    }

    public BeanWithCollections(
            @CollectionInject(I1.class) List<I1> listOfI1,
            @CollectionInject(I1.class) Set<I1> setOfI1,
            @CollectionInject(I2.class) I2[] arrayOfI2,
            @CollectionInject(I1.class) @AnnotatedService List<I1> listOfAnnotatedI1,
            @CollectionInject(I3.class) List<I3> listOfNotExistingI3,
            @CollectionInject(I3.class) Set<I3> setOfNotExistingI3,
            @CollectionInject(I3.class) I3[] arrayOfNotExistingI3
    ) {
    }
}
should be generated in blueprint xml as:
<bean xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0" id="beanWithCollections" class="org.apache.aries.blueprint.plugin.test.collection.BeanWithCollections" ext:field-injection="true">
        <argument>
            <list>
                <ref component-id="i1Impl1"/>
                <ref component-id="i1Impl2"/>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </list>
        </argument>
        <argument>
            <set>
                <ref component-id="i1Impl1"/>
                <ref component-id="i1Impl2"/>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </set>
        </argument>
        <argument>
            <array>
                <ref component-id="i2Impl1"/>
                <ref component-id="i2Impl2Annotated"/>
                <ref component-id="i2Impl3Annotated"/>
            </array>
        </argument>
        <argument>
            <list>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </list>
        </argument>
        <argument>
            <list/>
        </argument>
        <argument>
            <set/>
        </argument>
        <argument>
            <array/>
        </argument>
        <property name="annotatedArraySetterInject">
            <array>
                <ref component-id="i2Impl2Annotated"/>
                <ref component-id="i2Impl3Annotated"/>
            </array>
        </property>
        <property name="annotatedSetFieldInject">
            <set>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </set>
        </property>
        <property name="arrayFieldInject">
            <array>
                <ref component-id="i2Impl1"/>
                <ref component-id="i2Impl2Annotated"/>
                <ref component-id="i2Impl3Annotated"/>
            </array>
        </property>
        <property name="arraySetterInject">
            <array>
                <ref component-id="i1Impl1"/>
                <ref component-id="i1Impl2"/>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </array>
        </property>
        <property name="listFieldInject">
            <list>
                <ref component-id="i1Impl1"/>
                <ref component-id="i1Impl2"/>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </list>
        </property>
        <property name="listSetterInject">
            <list>
                <ref component-id="i1Impl1"/>
                <ref component-id="i1Impl2"/>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </list>
        </property>
        <property name="setFieldInject">
            <set>
                <ref component-id="i1Impl1"/>
                <ref component-id="i1Impl2"/>
                <ref component-id="i1Impl3Annotated"/>
                <ref component-id="i1Impl4Annotated"/>
            </set>
        </property>
        <property name="setSetterInject">
            <set>
                <ref component-id="i2Impl1"/>
                <ref component-id="i2Impl2Annotated"/>
                <ref component-id="i2Impl3Annotated"/>
            </set>
        </property>
    </bean>
issueID:ARIES-1734
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/ResourceInitializer.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Bean.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/AddResourceDirMojo.java
texts:Allow for changing base directory for generated blueprint file
Currently the blueprint file is generated in
${project.build.directory}/generated-sources/blueprint/${genreatedDir}
There should be a configuration option which allows for changing the base directory.
issueID:ARIES-1735
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/ConflictDetected.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRefStore.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanRef.java
texts:Detect beans with the same id, but different classes
When blueprint maven plugin finds two beans with the classes e. g. p1.T1 and p2.T1, then by default the id of both beans is generated from a simple name of class (it means t1) and we generate only the last bean (sorted lexicographically):
<bean id="t1" class="p2.T1"/>
issueID:ARIES-1736
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/NegativeTimeout.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/Availability.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/BlueprintConfigurationImpl.java
blueprint/plugin/blueprint-maven-plugin-spi/src/main/java/org/apache/aries/blueprint/plugin/spi/BlueprintConfiguration.java
texts:Generate default availability and timeout based on plugin parameters
When defaultAvailability parameter for plugin will be set than defailt-availibility attribute will be set on blueprint element.
When defaultTimeout parameter for plugin will be set than defailt-timeout attribute will be set on blueprint element. Negative timeout will throw exception.
issueID:ARIES-1737
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/CustomTypeConverterWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/Blueprint.java
texts:Generate custom type converters in blueprint xml
Find all type converters and put it in type-converters element as refs, e. g.
@Singleton
public class Converter1 implements Converter { ... }
@Singleton
public class Converter2 implements Converter { ... }
will generate
<type-converters>
        <ref component-id="converter1"/>
        <ref component-id="converter2"/>
    </type-converters>
The default blueprintConverter will be omitted.
Without any custom type converters there will be no type-conveters element in generated xml.
issueID:ARIES-1738
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:BeanProcessor are not removed when a namespace is restarted
a bundle X which register a custom NamespaceHandler. This handler add into the context a BeanProcessor with a reference on an osgi service.The Bundle Y use this namespace.
When I restart X, the bundle Y restarts, but fails with the error "The Blueprint container is being or has been destroyed"
When a namespace is restarted, the bundle Y keeps the same instance of BlueprintContainer. However, his "processors" properties is not resetted : it owns two instances of my BeanProcessor : the first one (before the restart), and the second one (after the restart). The first instance fails because the reference is not valid anymore.
issueID:ARIES-1739
type:Bug
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/SpiFlyConstants.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerHeaderProcessor.java
texts:Specifiying a version in Require-Capability prevents registration
The OSGi Compendium 6.0.0 provides an example for specifying a provider:
Require-Capability:
osgi.extender;
filter:="(&(osgi.extender=osgi.serviceloader.processor)
(version>=1.0)(!(version>=2.0)))"
This fails with spi-fly because spi-fly doesn't provide a version attribute when filtering the requirements, only the type (ProviderBundleTrackerCustomizer:390).
The example in the spi-fly documentation does not include the version in the filter. But it does also not warn you that adding it makes things fail. Having read the compendium specification first, you wouldn't expect that specifying the filter has this fatal effect.
issueID:ARIES-174
type:New Feature
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/MapToDictionary.java
application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRBundleInfo.java
application/application-api/src/main/java/org/apache/aries/application/management/BundleInfo.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ApplicationResourceImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
util/src/main/java/org/apache/aries/util/manifest/BundleManifest.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
texts:AriesApplicationResolver backed by OBR
Here's a app resolver that uses OBR. It doesn't deal with services yet. There's a simple itest which showed up some bugs elsewhere. This was easy to write so if there are significant missing features or a bad design I won't mind if this is replaced
issueID:ARIES-1740
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceListHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/ReferenceList.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceParameters.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/MemberType.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceId.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceListInvalidInterface.java
texts:blueprint-maven-plugin should generate <reference-list> instead of <reference id="list" interface="java.util.List"/> for a @OsgiService List<Service> ?
I may be misunderstanding something, but I would have expected the blueprint-maven-plugin (currently using its 1.4.0 in ODL) to generate <reference-list ...> instead of a <reference id="list" interface="java.util.List"/> for a @Singleton's bean constructor @Inject @OsgiService List<Service> services argument?
issueID:ARIES-1741
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/ServiceProperty.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceProviderHandler.java
blueprint/plugin/blueprint-maven-plugin-pax-cdi-handlers/src/main/java/org/apache/aries/blueprint/plugin/handlers/paxcdi/OsgiServiceHandler.java
texts:Move handlers for pax-cdi-api annotations to separate module in BMP

issueID:ARIES-1742
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/referencelistener/ReferenceListenerDefinition.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/bean/BeanHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigPropertyInjectionHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/collection/CollectionInjectHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/referencelistener/ReferenceListenerHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigAnnotationHandler.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/Reference.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/config/ConfigPropertiesHandler.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/init/BlueprintInitialization.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/referencelistener/ReferenceListener.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/Availability.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/AnnotationHelper.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceHandler.java
texts:Create annotation and handler for reference generation in BMP
The annotation will be replacement for @OsgiService annotation, which will be removed in pax-cdi-api in version 1.0.0
issueID:ARIES-1743
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/ServiceProperty.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ServicePropertyWriter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceParameters.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/Reference.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/Service.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ServiceHandler.java
blueprint/plugin/blueprint-maven-plugin-annotation/src/main/java/org/apache/aries/blueprint/annotation/service/AutoExport.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceId.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/handlers/blueprint/service/ReferenceHandler.java
texts:Create annotation and handler for service generation in BMP

issueID:ARIES-1744
type:Bug
changed files:blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintBeanFactory.java
blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/SpringApplicationContext.java
texts:Unable to load resource from blueprint-spring
org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from URL location [classpath:META-INF/cxf/cxf.xml]
Offending resource: URL [bundle://218.0:0/META-INF/spring/beans.xml]; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [META-INF/cxf/cxf.xml]; nested exception is java.io.FileNotFoundException: class path resource [META-INF/cxf/cxf.xml] cannot be opened because it does not exist
 at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:70)
 at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)
 at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76)
 at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:233)
 at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:184)
 at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:169)
 at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:142)
 at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:94)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:508)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:392)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
 at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
 at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217)
 at org.apache.aries.blueprint.spring.BeansNamespaceHandler$BeanDefinitionReader.importBeanDefinitionResource(BeansNamespaceHandler.java:250)
 ... 21 more
Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from path resource [META-INF/cxf/cxf.xml]; nested exception is java.io.FileNotFoundException: path resource [META-INF/cxf/cxf.xml] cannot be opened because it does not exist
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:344)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
 at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
 at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217)
 at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:227)
 ... 32 more
Caused by: java.io.FileNotFoundException: path resource [META-INF/cxf/cxf.xml] cannot be opened because it does not exist
 at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:330)
 ... 36 more
issueID:ARIES-1745
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/model/BeanFromFactory.java
texts:Name beans from factories after method name in BMP
Currently name of bean from factory is taken from @Named (or similar) annotation or it is name of the bean class.
It should be configurable via plugin property to change the naming policy for such beans.
issueID:ARIES-1746
type:Improvement
changed files:
texts:SPIFly support for InitialContextFactory
I'm trying to use Aries SPYFly with one of our projects. According to the OSGi spec when we register an InitialContextFactory, we need to register that for both implementation and InitialContextFactory classes.
IMHO it would be great if we can support that with SPY-Fly
issueID:ARIES-175
type:Bug
changed files:
texts:Blog sample contains redundant image files that bloat its size by 400%
As the Blog sample has evolved, the blog-servlet WAB has added new image files without removing old redundant ones. In particular, header.png is 300k of a 360k module and it is no longer used.
issueID:ARIES-1750
type:Improvement
changed files:
texts:Support for ASM 6.x
Spi-Fly should open its import range for ASM to be able to wire against 6.x versions for Java 9 support.karaf@root()> headers org.apache.aries.spifly.dynamic.bundle | grep 'asm;version' org.objectweb.asm;version="[5.0,6)",
issueID:ARIES-1751
type:Bug
changed files:
texts:Typo in namespace url in OSGI-INF/metatype/zookeeper.xml
The org.apache.aries.rsa.discovery.zookeeper-1.11.0.jar bundle in Karaf 4.1.2 throws an exception: 2017-10-23T10:39:16,173 | ERROR | Start Level: Equinox Container: be93c50b-3556-48a3-b50c-e9a02f324dcf | metatype | 2 - org.apache.felix.metatype - 1.1.2 | fromDocuments: Error accessing document bundleentry://73.fwk1323531427/OSGI-INF/metatype/zookeeper.xmljava.io.IOException: Unsupported Namespace: 'http://www.osgi.org/xmlns/metadata/v1.0.0'It appears that the namespace URL in the original zookeeper.xml source file has a typo in it : it should be 'metatype' rather than 'metadata'.
issueID:ARIES-1752
type:Dependency upgrade
changed files:
texts:Upgrade to ASM 6.0

issueID:ARIES-1754
type:Bug
changed files:
texts:Application an Ressource CachingServiceReference can't be got
1.
with the newest snapshot from Friday 10.11.2017
All reference of Applications ans Ressources without the .defaule Application can't be got from org.apache.aries.osgi.functional.CachingServiceReference
14:52:54.740 [Timer-0] WARN org.apache.aries.jax.rs.whiteboard.internal.Whiteboard - Application from reference org.apache.aries.osgi.functional.CachingServiceReference@5369019f can't be got
14:52:54.745 [Timer-0] WARN org.apache.aries.jax.rs.whiteboard.internal.Whiteboard - Resource from reference org.apache.aries.osgi.functional.CachingServiceReference@464309e7 can't be got
(2.)
Can you tell me with bundles so i need to let the Annotations work
@JaxrsName(OpenApiApplication.APPLICATION_NAME)
@JaxrsApplicationBase("/" + OpenApiApplication.APPLICATION_NAME)
3.
I got a null pointer by loading the getRuntimeDTO() when there war a Filter without name gegisteres. Will report it again, if this problem is solved
issueID:ARIES-1755
type:Bug
changed files:
texts:IllegalArgumentException on weaving
On weaving a jar that contains a utility loading class like this (this example is an enum, but the same happens if it's a class, anonymous inner class, etc.):
public enum Loader {
    LOADER;
    public <S> S load(Class<S> type) {
        Iterator<S> services = ServiceLoader.load(type).iterator();
        return services.hasNext() ? services.next() : null;
    }
}
The weaving throws this exception:
java.lang.IllegalArgumentException: value null
 at org.objectweb.asm.ClassWriter.newConstItem(ClassWriter.java:1057)
 at org.objectweb.asm.MethodWriter.visitLdcInsn(MethodWriter.java:1126)
 at org.apache.aries.spifly.weaver.TCCLSetterVisitor$TCCLSetterMethodVisitor.visitMethodInsn(TCCLSetterVisitor.java:194)
 at org.objectweb.asm.ClassReader.readCode(ClassReader.java:1416)
 at org.objectweb.asm.ClassReader.readMethod(ClassReader.java:1017)
 at org.objectweb.asm.ClassReader.accept(ClassReader.java:693)
 at org.objectweb.asm.ClassReader.accept(ClassReader.java:506)
 at org.apache.aries.spifly.statictool.Main.weaveDir(Main.java:196)
 at org.apache.aries.spifly.statictool.Main.weaveJar(Main.java:96)
 at org.apache.aries.spifly.statictool.Main.main(Main.java:73)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:282)
 at java.lang.Thread.run(Thread.java:745)
This happens regardless of whether static or dynamic weaving is used.
I'll attach a sample project.
issueID:ARIES-1756
type:New Feature
changed files:
texts:Support osgi.basic.timeout
Remote Services 1.1 spec (OSGi R7) supports a new property osgi.basic.timeout. If this property is set the service client should cancel a call after the given timeout in milli seconds and throw an exception.
issueID:ARIES-1757
type:New Feature
changed files:
texts:Implement osgi.async intent
See Remote Services Spec 1.1.
The provider must support return values of Future, CompletionStage, CompletableFuture and Promise.
issueID:ARIES-1758
type:New Feature
changed files:
texts:Support osgi.basic intent
See remote services spec 1.1.
Most already works. At the moment we are for the most part missing support for Version and DTOs in all their variations.
 
issueID:ARIES-1759
type:Bug
changed files:
texts:Fastbin fails to bind if a configuration exists with the same port
When Fastbin starts it binds to port 2543 even if no configuration exists. If a configuration exists, it will reconfigure but won't wait for the previous socket to unbind. In most cases it will fail to bind the second time.
The workaround is to use in the configuration other port than the default one.
issueID:ARIES-176
type:Bug
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/CachedOutputStream.java
texts:War converter keeps entire war contents in memory
The war to wab converter keeps the entire war contents in memory as a byte array. This will not scale when converting large war files.
issueID:ARIES-1760
type:Bug
changed files:
texts:Primitive type do not work as parameters in TCP transport
During development for remote services 1.1 I found that primitive types in parameters do not work. We get an exception "No method found that matches name %s, types %s".
This happens because we get e.g Integer as parameter when looking at the deserialized data but the method signature has int.
issueID:ARIES-1761
type:New Feature
changed files:blueprint/blueprint-spring-camel/src/main/java/org/apache/camel/osgi/Activator.java
blueprint/blueprint-spring-camel/src/main/java/org/apache/camel/osgi/OsgiSpringCamelContext.java
blueprint/blueprint-spring-camel/src/main/java/org/apache/camel/osgi/CamelContextFactoryBean.java
texts:Provide support for camel-spring from blueprint-spring
With the old spring-dm, there's a "BundleContextAware" interface, any bean implements this interface can get BundleContext injected.
With the new aries-blueprint-spring, we should follow similar pattern, like check if a bean has setBundleContext method, if so, just inject the BundleContext into the bean, so that the application bundles with work with spring-dm can also work with aries-blueprint-spring
issueID:ARIES-1763
type:Bug
changed files:
texts:Upgrade capabilities and API for remote service admin 1.1.0 spec

issueID:ARIES-1764
type:New Feature
changed files:
texts:Also send events using eventadmin

issueID:ARIES-1766
type:Bug
changed files:jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/JmxWhiteboardSupport.java
jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/MBeanHolder.java
texts:Configure log severity for Whiteboard JMX registration exceptions
When Aries JMX Whiteboard registers MBeans (in org.apache.aries.jmx.whiteboard.MBeanHolder) a number of exceptions, including InstanceAlreadyExistsException are caught and logged at error level.
Depending on the context these messages may not really be errors, but rather warnings. It would be good to be able to configure Aries JMX wrt to how these exceptions are logged, allowing certain ones to appear as warnings in the log instead.
issueID:ARIES-1767
type:Bug
changed files:
texts:TransactionControl and transaction isolation among threads
Hi,
I'm evaluating the usage of some enterprise features with Karaf.
I wrote a test shell command (attached) in order to check the behavior of TransactionControl in a multi-threaded environment.
I read tx-control is Thread Safe, so I wrote the command code for check isolation of new transactions created for different threads starting by the same injected TransactionControl service.
Now, it is not working as it was intended to. Maybe for my misunderstanding about its usage.
However:
I use this simple table:
CREATE TABLE `long_term_stata` (
`ID` bigint(20) NOT NULL AUTO_INCREMENT,
`VERSION` bigint(20) DEFAULT NULL,
`STATUS` varchar(255) NOT NULL,
`PROCESSO` varchar(255) NOT NULL,
`TARGET` varchar(255) NOT NULL,
`NOTE` varchar(255) DEFAULT NULL,
`EXTRA_INFO` longblob,
PRIMARY KEY (`ID`),
UNIQUE KEY `PROCESSO_UNIQUE` (`PROCESSO`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;
The command runs N thread performing in a new transaction a "select ... for update" on the same row, a read of a status, its increment and at the and an updateRow.
I believed the first Thread kept a row write lock and the other ones waited each one to acquire the row lock until the end of their own transaction. So at the end the counter in the STATUS field of the table should have been equals to N (the number of threads).
Instead the threads seem to be executed in parallel randomically so that the order of read & write operations is not respected, ending with a STATUS < N.
If I set the ROW LOCK from another client is seems to work as waited. In MySqlWorkbench:
start transaction;
SELECT * FROM long_term_stata where id=19 for update;
The command waits trying to acquire the row lock until I type a COMMIT in the workbench.
So, my conclusion (but easily I made some mistake) is that the transaction isolation does not work properly among threads starting transactions from the same instance of injected TransactionControl.
Could you help me confirming if it is a strange behavior or advising for the right way to write the test?
Thanks in advance
issueID:ARIES-1768
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintDomainCombiner.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintProtectionDomain.java
texts:BlueprintDomainCombiner should not be holding a reference to BundleContext
The BlueprintProtectionDomain holds a reference to a bundle context which can become invalid during state changes. This can cause permission checks to fail when starting/stopping features or bundles when a security manager is being used because of the invalid context. Other ProtectionDomain implementations, such as the Felix one for ConfigAdmin hold a reference to the Bundle instead and seem to work as intended.
issueID:ARIES-1769
type:Improvement
changed files:
texts:Make sure services with unsupported intents are not exported

issueID:ARIES-177
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java
texts:JMX FrameworkMBean does not allow to resolve/refresh all bundles
FrameworkMBean.refreshBundles(long[] bundleIdentifiers)
FrameworkMBean.resolveBundles(long[] bundleIdentifiers)
does not obviously allow to resolve/refresh all bundles.
A client would be forced to collect all ids before making the call.
PackageAdmin however uses a null paramter to mean 'all bundles'.
https://www.osgi.org/members/bugzilla/show_bug.cgi?id=1586
issueID:ARIES-1770
type:Bug
changed files:blueprint/blueprint-spring/src/main/java/org/apache/aries/blueprint/spring/BlueprintNamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ParserContextImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ParserContext.java
texts:Spring schemas can not be validated offline

issueID:ARIES-1771
type:Improvement
changed files:
texts:Support modification events
We need to correctly react to changes in an exported service to be compliant with the spec.
issueID:ARIES-1772
type:New Feature
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:Add an option to blueprint-maven-plugin to exclude dependencies.
Currently the list of scanned classes by blueprint-maven-plugin can be restricted using scanPath parameter, so the list can also contain the classes of the project dependencies. With my projects I experience two kind of issues with it:
If the the scan path is chosen too widely it may lead to a build failure. For example: Assume project A has a dependency to project B an both have the same base package, which is chosen as the scan path. Project B has a blueprint bean, which implements an interface from some provided dependency of it. The build of project A will fail then, because it will try to scan a blueprint bean of project B but it will miss its provided dependency. An example error message:
  Failed to execute goal org.apache.aries.blueprint:blueprint-maven-plugin:1.9.0:blueprint-generate (default) on project email-template-editor-core: Execution default of goal org.apache.aries.blueprint:blueprint-maven-plugin:1.9.0:blueprint-generate failed: A required class was missing while executing org.apache.aries.blueprint:blueprint-maven-plugin:1.9.0:blueprint-generate: com/mycorporation/scheduler/api/ScheduledService
  If a bean of project B appears in the autowire.xml of project A, but the package of that bean is not imported in the manifest of project A, a ClassNotFoundException will be thrown during runtime:
  java.lang.ClassNotFoundException: com.mycorporation.project-a.commons.notification.IncomingNotificationService from [Module "deployment.com.mycorporation.project-b.commons.core:0.0.1.SNAPSHOT" from Service Module Loader]
  I suggest to add an option, to exclude dependencies from the list of scanned classes, like maven-bundle-plugin's excludeDependencies for example, and give this option per default such value as to exclude all dependencies.
 
issueID:ARIES-1773
type:Task
changed files:
texts:Add the rat plugin check to the build

issueID:ARIES-1774
type:Improvement
changed files:
texts:Refactor Zookeeper discovery to use only one listener for all zk endpoints

issueID:ARIES-1775
type:Improvement
changed files:
texts:Remove DiscoveryPlugin
 found that the DiscoveryPlugin facility in the zookeeper discovery does not seem to work at all.
The properties are changed but never used in writing the endpoint to zookeeper. 
So as this was not found until now I doubt anyone is using the DiscoveryPlugin services.
 
I would like to take the opportunity to remove this extensibility point. 
issueID:ARIES-1776
type:Improvement
changed files:
texts:Fixes for tck secure tests

issueID:ARIES-1778
type:Improvement
changed files:
texts:Use endpoint id as path in zookeeper
Currently we use a quite complicated and not completely correct way to create zookeeper nodes for endpoints.
Below the base path we use the fully qualified interfacename and below the endpoint id as path. 
This creates several problems:
To listen to changes we need to create nodes in zookeeper for every interface that is requested as a service. So we end up with many nodes for non remote services.
As an endpoint may have more than one interface we then end up with more than once endpoint for it in zookeeper. When the endpoint changes this results in multiple change events created
So I propose to change this to a much simpler scheme by simply using the endpoint id as a path in zookeeper. This will make it much easier to listen to changes and also will cause less nodes to be created in zookeeper.
 
issueID:ARIES-1779
type:Dependency upgrade
changed files:
texts:Upgrade ZooKeeper to 3.4.13

issueID:ARIES-178
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
texts:PackageMBean.listPackages() raises an exception for certain bundles in Felix 2.0.3
Using PackageStateMBean.listPackages() gives the following exception on Felix 2.0.3 for certain bundles (here: spring-ws-core-1.5.9.jar)
Caused by: javax.management.openmbean.KeyAlreadyExistsException: Argument value's index, calculated according to this TabularData instance's tabularType, already refers to a value in this table.
at javax.management.openmbean.TabularDataSupport.checkValueAndIndex(TabularDataSupport.java:871)
at javax.management.openmbean.TabularDataSupport.internalPut(TabularDataSupport.java:331)
at javax.management.openmbean.TabularDataSupport.put(TabularDataSupport.java:323)
at org.apache.aries.jmx.codec.PackageData.tableFrom(PackageData.java:142)
at org.apache.aries.jmx.framework.PackageState.listPackages(PackageState.java:130)
...
The original reason for this is that Felix returns multiple identical ExportedPackage when calling
ExportedPackage[] PackageAdmin.getExportedPackages(bundle)
(in this example, org.springframework.ws.soap.addressing.server; version=1.5.9 is given twice)
I don't know whether this is allowed by the Spec (or is in fact a bug in Felix), but Aries could be smarter here anyway.
Since each ExportedPackage is wrapped in a PackageData for JMX-Export and then added to a Set<PackageData> all
what is needed to add appropriate equals() and hashCode() to PackageData to make the set contain only PackageData
with a unique index (NAME, VERSION, EXPORTING_BUNDLE) for the TabularData to build up for the JMX return value.
Please find attachted a patch to add equals() and hashCode() to PackageData.
My question though is, whether this an allowed behaviour of Felix to return same ExportedPackage objects multiple times
in getExportedPackages() (so that in case I could rise an issue for Felix as well).
issueID:ARIES-1780
type:Improvement
changed files:
texts:Switch Zookeeper Discovery to DS

issueID:ARIES-1781
type:Bug
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceMetadata.java
texts:ExtendedReferenceMetadata should extend ExtendedServiceReferenceMetadata

issueID:ARIES-1782
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/JREInitialContextFactoryBuilder.java
texts:With java 2 security enabled get java.security.AccessControlException in org.apache.aries.jndi.JREInitialContextFactoryBuilder
With java 2 security enabled get java.security.AccessControlException
  Stack: java.security.AccessControlException: Access denied ("java.lang.RuntimePermission" "getClassLoader")
java.security.AccessController.throwACE(AccessController.java:157)
java.security.AccessController.checkPermissionHelper(AccessController.java:217)
java.security.AccessController.checkPermission(AccessController.java:349)
java.lang.SecurityManager.checkPermission(SecurityManager.java:562)
com.ibm.ws.kernel.launch.internal.MissingDoPrivDetectionSecurityManager.checkPermission(MissingDoPrivDetectionSecurityManager.java:45)
java.lang.ClassLoader.getSystemClassLoader(ClassLoader.java:737)
org.apache.aries.jndi.JREInitialContextFactoryBuilder.createInitialContextFactory(JREInitialContextFactoryBuilder.java:36)
org.apache.aries.jndi.ContextHelper.getInitialContextUsingBuilder(ContextHelper.java:233) org.apache.aries.jndi.ContextHelper.getContextProvider(ContextHelper.java:208)
org.apache.aries.jndi.ContextHelper.getInitialContext(ContextHelper.java:141)
org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.getInitialContext(OSGiInitialContextFactoryBuilder.java:51)
javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:695)
javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:324)
javax.naming.InitialContext.init(InitialContext.java:255)
javax.naming.ldap.InitialLdapContext.<init>(InitialLdapContext.java:165)
issueID:ARIES-1783
type:Bug
changed files:
texts:TransactionRequiredException when non-transactional method precedes a transactional one in the same service.
NEVER
NOT_SUPPORTED
SUPPORTS
From that non-transactional method I want to use a self-reference resolved via BundleContext to call a transactional method in the same service, annotated with one of those TxTypes:
REQUIRED
REQURES_NEW
Since the resolved self-reference is a proxied object I expect it to be able to start a new transaction. This is not the case however and the subject exception occurs.
  I created a test case revealing the issue in the following pull request: https://github.com/apache/aries-jpa/pull/2
issueID:ARIES-1784
type:Bug
changed files:
texts:@Component without (service=A.class) end in Nullpointer
Hi,
when i hava a Ressource annotated with @Component but without (service=A.class) and call AriesJaxrsServiceRuntime.getRuntimeDTO i get a in Nullpointer
org.apache.aries.jax.rs.whiteboard.internal.CxfJaxrsServiceRegistrator.getStaticResourceC
lasses(CxfJaxrsServiceRegistrator.java:307
Stacktrace:
Feb 20, 2018 1:50:50 PM org.apache.cxf.phase.PhaseInterceptorChain
doDefaultLogging
WARNUNG: Application
{openapi.rsw.hub.domain.org/}
OpenApiResource has thrown
exception, unwinding now
org.apache.cxf.interceptor.Fault
at
org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:162)
at
org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:128)
at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:192)
at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:103)
at
org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java
:59)
at
org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerIntercep
tor.java:96)
at
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
at
org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:1
21)
at
org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java
:267)
at
org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.ja
va:234)
at
org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:208)
at
org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)
at
org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:191)
at
org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.ja
va:301)
at
org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:225)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:618)
at
org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:276
)
at
org.apache.felix.http.base.internal.handler.ServletHandler.handle(ServletHandler.java:85)
at
org.apache.felix.http.base.internal.dispatch.InvocationChain.doFilter(InvocationChain.jav
a:79)
at
org.apache.felix.http.base.internal.dispatch.Dispatcher.dispatch(Dispatcher.java:128)
at
org.apache.felix.http.base.internal.dispatch.DispatcherServlet.service(DispatcherServlet.
java:49)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
at
org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:848)
at
org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:584)
at
org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:224)
at
org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)
at
org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)
at
org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
at
org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)
at
org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
at
org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection
.java:213)
at
org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)
at org.eclipse.jetty.server.Server.handle(Server.java:534)
at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)
at
org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)
at
org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:28
3)
at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108)
at
org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)
at
org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(Execut
eProduceConsume.java:303)
at
org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduc
eConsume.java:148)
at
org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.ja
va:136)
at
org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)
at
org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)
at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NullPointerException
at
org.apache.aries.jax.rs.whiteboard.internal.CxfJaxrsServiceRegistrator.getStaticResourceC
lasses(CxfJaxrsServiceRegistrator.java:307)
at
org.apache.aries.jax.rs.whiteboard.internal.AriesJaxrsServiceRuntime.buildApplicationDTO(
AriesJaxrsServiceRuntime.java:552)
at
java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at
java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
at
java.util.concurrent.ConcurrentHashMap$ValueSpliterator.forEachRemaining(ConcurrentHashMa
p.java:3566)
at
java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at
java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at
java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:545)
at
java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
at
java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)
at
org.apache.aries.jax.rs.whiteboard.internal.AriesJaxrsServiceRuntime.getRuntimeDTO(AriesJ
axrsServiceRuntime.java:202)
at
org.domain.hub.rsw.openapi.OpenApiResource.getApplication(OpenApiResource.java:125)
at
org.domain.hub.rsw.openapi.OpenApiResource.getApplicationsUI(OpenApiResource.java:147
)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at
org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:179
)
at
org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)
... 42 more
issueID:ARIES-1785
type:Bug
changed files:
texts:Application without JAX_RS_EXTENSION_SELECT fetchs Extension
Hi,
an application without any JAX_RS_EXTENSION_SELECT property fetchs a extention.
see the attached test for more information.
(could be paste into org.apache.aries.jax.rs.itests test.JaxrsTest.java)
regards
issueID:ARIES-1786
type:Improvement
changed files:jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/SingleServiceTracker.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
texts:Remove dependency on aries util

issueID:ARIES-1788
type:Bug
changed files:
texts:NPE on log line
Hi,
Sometimes I get a NPE in the DistributionProviderTracker as sampled bellow. From my analysis it is caused by this line. This happens as presented bellow normally after the registration of a config. I seems that the previous lines were protected from NPE's but this one is missing the same treatment.
  ...
LOG.info("Registering RemoteServiceAdmin for provider " + provider.getClass().getName());
...
  2018-03-04T01:36:38.870911734Z 2018-03-04T01:36:38,870 | INFO | OsgiInstallerImpl | installer | 252 - org.apache.sling.installer.core - 3.8.10 | Installed configuration org.apache.cxf.dosgi.http from resource TaskResource(url=fileinstall91ba51cf3af2d6db3bc56bd9984dd3b8:/karaf-data/deploy/install.loc.core/core/org.apache.cxf.dosgi.http.cfg, entity=config:org.apache.cxf.dosgi.http, state=INSTALL, attributes=[org.apache.sling.installer.api.tasks.ResourceTransformer=:212:, service.pid=org.apache.cxf.dosgi.http], digest=1f4df79791159cb3c35bb1832be4ba3b)
2018-03-04T01:36:38.919651742Z 2018-03-04T01:36:38,883 | ERROR | features-1-thread-1 | Felix | - - | Bundle org.apache.aries.rsa.core [120] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
2018-03-04T01:36:38.919714648Z java.lang.NullPointerException: null
2018-03-04T01:36:38.919794115Z at org.apache.aries.rsa.core.DistributionProviderTracker.addingService(DistributionProviderTracker.java:59) ~[?:?]
2018-03-04T01:36:38.919813238Z at org.apache.aries.rsa.core.DistributionProviderTracker.addingService(DistributionProviderTracker.java:39) ~[?:?]
2018-03-04T01:36:38.919866292Z at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941) ~[?:?]
2018-03-04T01:36:38.919883382Z at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870) ~[?:?]
2018-03-04T01:36:38.919922491Z at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256) ~[?:?]
2018-03-04T01:36:38.919938661Z at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229) ~[?:?]
2018-03-04T01:36:38.919980225Z at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901) ~[?:?]
2018-03-04T01:36:38.919996574Z at org.apache.felix.framework.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:990) ~[?:?]
2018-03-04T01:36:38.920036455Z at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:838) ~[?:?]
2018-03-04T01:36:38.920052293Z at org.apache.felix.framework.EventDispatcher.fireServiceEvent(EventDispatcher.java:545) ~[?:?]
2018-03-04T01:36:38.920091875Z at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4595) ~[?:?]
2018-03-04T01:36:38.920107658Z at org.apache.felix.framework.Felix.registerService(Felix.java:3587) ~[?:?]
2018-03-04T01:36:38.920150324Z at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348) ~[?:?]
2018-03-04T01:36:38.920165892Z at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.register(AbstractComponentManager.java:887) ~[?:?]
2018-03-04T01:36:38.920202734Z at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.register(AbstractComponentManager.java:874) ~[?:?]
2018-03-04T01:36:38.920217794Z at org.apache.felix.scr.impl.manager.RegistrationManager.changeRegistration(RegistrationManager.java:132) ~[?:?]
2018-03-04T01:36:38.920256314Z at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:941) ~[?:?]
2018-03-04T01:36:38.920274591Z at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:741) ~[?:?]
2018-03-04T01:36:38.920314322Z at org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:675) ~[?:?]
2018-03-04T01:36:38.920330321Z at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:430) ~[?:?]
2018-03-04T01:36:38.920371806Z at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.enableComponents(ConfigurableComponentHolder.java:657) ~[?:?]
2018-03-04T01:36:38.920387388Z at org.apache.felix.scr.impl.BundleComponentActivator.initialEnable(BundleComponentActivator.java:341) ~[?:?]
2018-03-04T01:36:38.920424322Z at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:390) ~[?:?]
2018-03-04T01:36:38.920439082Z at org.apache.felix.scr.impl.Activator.access$200(Activator.java:54) ~[?:?]
2018-03-04T01:36:38.920475920Z at org.apache.felix.scr.impl.Activator$ScrExtension.start(Activator.java:265) ~[?:?]
2018-03-04T01:36:38.920490790Z at org.apache.felix.utils.extender.AbstractExtender.createExtension(AbstractExtender.java:254) ~[?:?]
2018-03-04T01:36:38.920531561Z at org.apache.felix.utils.extender.AbstractExtender.modifiedBundle(AbstractExtender.java:227) ~[?:?]
2018-03-04T01:36:38.920547731Z at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:482) ~[?:?]
2018-03-04T01:36:38.920584797Z at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:415) ~[?:?]
2018-03-04T01:36:38.920600039Z at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:232) ~[?:?]
2018-03-04T01:36:38.920639136Z at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:444) ~[?:?]
2018-03-04T01:36:38.920654887Z at org.apache.felix.framework.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:915) ~[?:?]
2018-03-04T01:36:38.920692119Z at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:834) ~[?:?]
2018-03-04T01:36:38.920707032Z at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:516) ~[?:?]
2018-03-04T01:36:38.920747100Z at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) ~[?:?]
2018-03-04T01:36:38.920767468Z at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) ~[?:?]
2018-03-04T01:36:38.920804456Z at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) ~[?:?]
2018-03-04T01:36:38.920819561Z at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) ~[?:?]
2018-03-04T01:36:38.920856664Z at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1361) ~[?:?]
2018-03-04T01:36:38.920871953Z at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:888) ~[?:?]
2018-03-04T01:36:38.920911820Z at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1248) ~[?:?]
2018-03-04T01:36:38.920928307Z at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$1(FeaturesServiceImpl.java:1147) ~[?:?]
2018-03-04T01:36:38.920968297Z at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
2018-03-04T01:36:38.920983401Z at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:?]
2018-03-04T01:36:38.921025252Z at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:?]
2018-03-04T01:36:38.921040344Z at java.lang.Thread.run(Thread.java:748) [?:?]
  Regards,
Ivo Leitão
issueID:ARIES-1789
type:Bug
changed files:
texts:ClientBuilder and SSE
Hi,
when using:
clientBuilder.newBuilder();
i got a
  java.lang.ClassNotFoundException: org.glassfish.jersey.client.JerseyClientBuilder not found by org.apache.aries.javax.jax.rs-api


or 

java.lang.ClassNotFoundException: org.glassfish.jersey.media.sse.internal.JerseySseEventSource$Builder not found by org.apache.aries.javax.jax.rs-api [7]
    at javax.ws.rs.sse.SseEventSource$Builder.newBuilder(SseEventSource.java:153)
    at javax.ws.rs.sse.SseEventSource.target(SseEventSource.java:238)
    at de.jena.servicehub.phone.demo.DemoSseClient.test(DemoSseClient.java:38)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.apache.felix.gogo.runtime.Reflective.invoke(Reflective.java:136)
    at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:91)
    at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:571)
    at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:497)
    at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:386)
    at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:417)
    at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229)
    at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.ClassNotFoundException: org.glassfish.jersey.media.sse.internal.JerseySseEventSource$Builder not found by org.apache.aries.javax.jax.rs-api [7]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639
  Both builders uses defaultClassNames
  javax.ws.rs.client.ClientBuilder
JAXRS_DEFAULT_CLIENT_BUILDER = "org.glassfish.jersey.client.JerseyClientBuilder";

 
javax.ws.rs.sse.SseEventSource.Builder
String JAXRS_DEFAULT_SSE_BUILDER = "org.glassfish.jersey.media.sse.internal.JerseySseEventSource$Builder";
Both calls
javax.ws.rs.client.FactoryFinder.find(..)
and tryes to get the Object over
-ServiceLoader
-java.home/jaxrs.properties
-SystemPropertys
-Class.forName(defaultclassName);
1. is there any was to use .newBuilder?
2. is ther eny way to @Reference SseEventSource?
3. is there any handling of serverside events in Aries Whiteboard or is it necessary to register the SseFeature of(cxf/jersy) by myselfe?
 
issueID:ARIES-179
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
texts:FrameworkMBean does not log/relay error info
Various operations on the Framework don't log nor relay what went wrong in case of error.
The typical pattern is
public long installBundle(String location) throws IOException {
try
{ Bundle bundle = context.installBundle(location); return bundle.getBundleId(); } catch (BundleException be) { throw new IOException("Can't install bundle with location: " + location); }
}

Instead, I suggest an approach like this

public long installBundle(String location) throws IOException {
try { Bundle bundle = context.installBundle(location); return bundle.getBundleId(); }
catch (BundleException be)
{ IOException ioex = new IOException("Can't install bundle with location: " + location); ioex.initCause(be); throw ioex; }
}
Alternatively, this would also work
public long installBundle(String location) throws IOException {
try
{ Bundle bundle = context.installBundle(location); return bundle.getBundleId(); }
catch (BundleException be)
{ log.error("Can't install bundle with location: " + location, be) throw new IOException("Can't install bundle with location: " + location); }
}
issueID:ARIES-1790
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/RecoverableDataSource.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/ConnectionManagerFactory.java
texts:ValidatingDelegatingManagedConnectionFactory is not used with aries.xa.validateOnMatch

issueID:ARIES-1791
type:Bug
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:blueprint-maven-plugin generate mojo is not threadSafe
When using Maven and the blueprint plugin to build in multi-threaded mode, e.g. '-T <num proc>' is specified, there is a warning which appears notifying the user the blueprint-maven-plugin is not thread safe.
Is this plugin indeed thread safe? If not, what issues should be expected.
{{*****************************************************************
Your build is requesting parallel execution, but project *
contains the following plugin(s) that have goals not marked *
as @threadSafe to support parallel building. *
While this /may/ work fine, please look for plugin updates *
and/or request plugins be made thread-safe. *
If reporting an issue, report it against the plugin in *
question, not against maven-core *
*****************************************************************
The following plugins are not marked @threadSafe in DSM for Apache Karaf:
org.apache.aries.blueprint:blueprint-maven-plugin:1.9.0
Enable debug to see more precisely which goals are not marked @threadSafe.
*****************************************************************}}
issueID:ARIES-1792
type:Improvement
changed files:blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/ArtifactFilter.java
blueprint/plugin/blueprint-maven-plugin/src/main/java/org/apache/aries/blueprint/plugin/GenerateMojo.java
texts:blueprint-maven-plugin slows down compilation
We have a maven project with 20+ modules all using BMP to generate blueprint file.
During compilation, BMP is executed on each module and represents more than 70% of the project's compilation time.
We specify a scanPath for each module as a parameter to BMP but it seems that it scan the module and also all the dependencies so because the modules are linked together, the whole project is scanned again and again for each module.
It could be useful to add an option to exclude dependencies so that BMP only scan the current module.
issueID:ARIES-1793
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:Blueprint interceptors do not work anymore
This project contains a blueprint bundle with a bean TestRepository annotated with @PersistenceContext. This bean is then injected into another bean TestServiceImpl which is then published as an osgi service :
    <jpa:enable/>
    <tx:enable/>

    <!-- This bean contains a @PersistenceContext EntityManager -->
    <bean id="testRepository" class="com.dutertry.test.karaf.jpa.service.impl.TestRepository"/>

    <bean id="testService" class="com.dutertry.test.karaf.jpa.service.impl.TestServiceImpl">
        <property name="testRepository" ref="testRepository"/>
    </bean>

    <service interface="com.dutertry.test.karaf.jpa.service.TestService" ref="testService"/>
With Karaf 4.1.5 the instance of TestRepository injected in testService is an aries proxy managing JPA stuff, but with Karaf 4.2.0 the injected instance is not a proxy. Thus when using testService, the following error occurs:
java.lang.IllegalStateException: Need active coordination
    at org.apache.aries.jpa.support.impl.EMSupplierImpl.get(EMSupplierImpl.java:81) ~[?:?]
    at org.apache.aries.jpa.support.osgi.impl.EmProxy.invoke(EmProxy.java:38) ~[?:?]
    at com.sun.proxy.$Proxy77.createQuery(Unknown Source) ~[?:?]
    at Proxy4c2993b8_dc6f_46b4_8e62_524dc0ad05f5.createQuery(Unknown Source) ~[?:?]
    at com.dutertry.test.karaf.jpa.service.impl.TestRepository.list(TestRepository.java:26) ~[?:?]
    at com.dutertry.test.karaf.jpa.service.impl.TestServiceImpl.list(TestServiceImpl.java:25) ~[?:?]
    at com.dutertry.test.karaf.jpa.cmd.ListPersonCommand.execute(ListPersonCommand.java:24) ~[?:?]
    at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) ~[?:?]
    at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) ~[?:?]
    at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) ~[?:?]
    at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:571) ~[?:?]
    at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:497) ~[?:?]
    at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:386) ~[?:?]
    at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:417) ~[?:?]
    at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) ~[?:?]
    at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:?]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:?]
    at java.lang.Thread.run(Thread.java:748) [?:?]
  After some investigation, I have found that this bug is due to the resolution of issue ARIES-1544. I have done a patch (see attached file) which solve the issue I think.
aries-interceptor.patch
Can you please integrate my patch or correct the issue another way ?
issueID:ARIES-1794
type:Bug
changed files:
texts:java.lang.NoSuchMethodError: org.apache.aries.osgi.functional.OSGi.splitBy
Hello,
when using OSGi R7 - org.osgi.util.function 1.1.0
I got this Exception.
! Failed to start bundle org.apache.aries.jax.rs.whiteboard-0.0.1.201804171134, exception activator error org.apache.aries.osgi.functional.OSGi.splitBy(Ljava/util/function/Function;Ljava/util/function/Function;)Lorg/apache/aries/osgi/functional/OSGi; from: org.apache.aries.jax.rs.whiteboard.internal.utils.Utils:highestPer#118
org.osgi.framework.BundleException: Activator start error in bundle org.apache.aries.jax.rs.whiteboard [7].
    at org.apache.felix.framework.Felix.activateBundle(Felix.java:2428)
    at org.apache.felix.framework.Felix.startBundle(Felix.java:2284)
    at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
    at aQute.launcher.Launcher.startBundles(Launcher.java:517)
    at aQute.launcher.Launcher.activate(Launcher.java:423)
    at aQute.launcher.Launcher.run(Launcher.java:301)
    at aQute.launcher.Launcher.main(Launcher.java:147)
Caused by: java.lang.NoSuchMethodError: org.apache.aries.osgi.functional.OSGi.splitBy(Ljava/util/function/Function;Ljava/util/function/Function;)Lorg/apache/aries/osgi/functional/OSGi;
    at org.apache.aries.jax.rs.whiteboard.internal.utils.Utils.highestPer(Utils.java:118)
    at org.apache.aries.jax.rs.whiteboard.internal.Whiteboard.getAllServices(Whiteboard.java:236)
    at org.apache.aries.jax.rs.whiteboard.internal.Whiteboard.<init>(Whiteboard.java:154)
    at org.apache.aries.jax.rs.whiteboard.internal.Whiteboard.createWhiteboard(Whiteboard.java:161)
    at org.apache.aries.jax.rs.whiteboard.activator.CxfJaxrsBundleActivator.runWhiteboard(CxfJaxrsBundleActivator.java:144)
    at org.apache.aries.jax.rs.whiteboard.activator.CxfJaxrsBundleActivator.start(CxfJaxrsBundleActivator.java:86)
    at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
    at org.apache.felix.framework.Felix.activateBundle(Felix.java:2378)
    ... 6 more
  regards
issueID:ARIES-1795
type:Question
changed files:
texts:java.lang.IllegalStateException: The service registration is no longer valid.
Hi Carlos,
  is this a Felix, an Aries-Whiteboard or (again) my Error?
I only have this error on CI-Build using Gitlab-CI with maven-bnd-test-plugin.
  java.lang.IllegalStateException: The service registration is no longer valid.
    at org.apache.felix.framework.ServiceRegistrationImpl.getReference(ServiceRegistrationImpl.java:109)
    at org.apache.aries.jax.rs.whiteboard.internal.utils.Utils.updateProperty(Utils.java:188)
    at org.apache.aries.jax.rs.whiteboard.internal.Whiteboard.removeHttpEndpoints(Whiteboard.java:737)
    at org.apache.aries.osgi.functional.OSGi.lambda$null$59(OSGi.java:537)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.removedService(ServiceReferenceOSGi.java:96)
    at org.apache.aries.osgi.functional.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.removedService(ServiceReferenceOSGi.java:58)
    at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:969)
    at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:871)
    at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
    at org.osgi.util.tracker.ServiceTracker.close(ServiceTracker.java:380)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.internal.AllOSGi.lambda$null$1(AllOSGi.java:51)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.OSGi.lambda$null$59(OSGi.java:539)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.JustOSGiImpl.lambda$null$1(JustOSGiImpl.java:51)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.OSGiResultImpl.close(OSGiResultImpl.java:36)
    at org.apache.aries.osgi.functional.OSGiResult.run(OSGiResult.java:29)
    at org.apache.aries.osgi.functional.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.removedService(ServiceReferenceOSGi.java:96)
    at org.apache.aries.osgi.functional.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.removedService(ServiceReferenceOSGi.java:58)
    at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:969)
    at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:871)
    at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341)
    at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:911)
    at org.apache.felix.framework.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:990)
    at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:838)
    at org.apache.felix.framework.EventDispatcher.fireServiceEvent(EventDispatcher.java:545)
    at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4807)
    at org.apache.felix.framework.Felix.access$000(Felix.java:110)
    at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:430)
    at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:170)
    at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:145)
    at org.apache.felix.http.base.internal.whiteboard.WhiteboardManager.stop(WhiteboardManager.java:240)
    at org.apache.felix.http.base.internal.HttpServiceController.unregister(HttpServiceController.java:132)
    at org.apache.felix.http.jetty.internal.JettyService.stopJetty(JettyService.java:298)
    at org.apache.felix.http.jetty.internal.JettyService.stop(JettyService.java:250)
    at org.apache.felix.http.jetty.internal.JettyActivator.doStop(JettyActivator.java:94)
    at org.apache.felix.http.base.internal.AbstractActivator.stop(AbstractActivator.java:49)
    at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:719)
    at org.apache.felix.framework.Felix.stopBundle(Felix.java:2771)
    at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1533)
    at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)
    at java.lang.Thread.run(Thread.java:748)
issueID:ARIES-1796
type:Task
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
texts:avoid IllegalArgumentException "Invalid Java version 54" when use proxy-impl with java10
The ProxyUtils class cannot recognize the java10 class version 54
issueID:ARIES-1797
type:Improvement
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
texts:ensure proxy-impl can work with ASM 6.1 plus
In asm 6.1, the GeneratorAdapter.case method changed to
 void ( Type from,  Type to) {
    if (from != to) {
      if (from == Type.DOUBLE_TYPE) {
        if (to == Type.FLOAT_TYPE) {
          mv.visitInsn(Opcodes.D2F);
        } else if (to == Type.LONG_TYPE) {
          mv.visitInsn(Opcodes.D2L);
        } else {
          mv.visitInsn(Opcodes.D2I);
          cast(Type.INT_TYPE, to);
        }
      } else if (from == Type.FLOAT_TYPE) {
        if (to == Type.DOUBLE_TYPE) {
          mv.visitInsn(Opcodes.F2D);
        } else if (to == Type.LONG_TYPE) {
          mv.visitInsn(Opcodes.F2L);
        } else {
          mv.visitInsn(Opcodes.F2I);
          cast(Type.INT_TYPE, to);
        }
      } else if (from == Type.LONG_TYPE) {
        if (to == Type.DOUBLE_TYPE) {
          mv.visitInsn(Opcodes.L2D);
        }   (to == Type.FLOAT_TYPE) {
          mv.visitInsn(Opcodes.L2F);
        }  {
          mv.visitInsn(Opcodes.L2I);
          (Type.INT_TYPE, to);
        }
      }  {
         (to == Type.BYTE_TYPE) {
          mv.visitInsn(Opcodes.I2B);
        }   (to == Type.CHAR_TYPE) {
          mv.visitInsn(Opcodes.I2C);
        }   (to == Type.DOUBLE_TYPE) {
          mv.visitInsn(Opcodes.I2D);
        }   (to == Type.FLOAT_TYPE) {
          mv.visitInsn(Opcodes.I2F);
        }   (to == Type.LONG_TYPE) {
          mv.visitInsn(Opcodes.I2L);
        }   (to == Type.SHORT_TYPE) {
          mv.visitInsn(Opcodes.I2S);
        }  {
            IllegalArgumentException(); 
        }          
      }
    }
  }
  Compared with previous version, it added a
} else {
          throw new IllegalArgumentException(); 
        }          
at the end, however, this break the current logic in proxy-impl, which if "cast" not take effect, can still go with "unbox", we should revise proxy-impl a bit to honor the change in ASM 6.1. Ensure proxy-impl can work with ASM 6.1 on the classpath or in the OSGi container
issueID:ARIES-1798
type:Request
changed files:
texts:Create a JIRA component for "Component DSL" project
Component DSL is a recent project developed by Carlos Sierra Andrés.
Sadly, as all projects realize, bugs are found and must be tracked.
Can we please create a Jira component for "Component DSL"? Thanks.
issueID:ARIES-1799
type:Bug
changed files:
texts:[component-dsl] When registering a service from a Supplier<T> an exception occurs
using the method
static <T> OSGi<ServiceRegistration<T>> register(Class<T> clazz, Supplier<T> service, Supplier<Map<String, ?>> properties)
I get an exception like so:
! Failed to start bundle org.apache.aries.jax.rs.whiteboard-0.0.1.201805051342, exception activator error The service object is not an instance of the service class javax.ws.rs.ext.MessageBodyReader from: org.eclipse.osgi.internal.serviceregistry.ServiceRegistry:registerService#220
org.osgi.framework.BundleException: Exception in org.apache.aries.jax.rs.whiteboard.activator.CxfJaxrsBundleActivator.start() of bundle org.apache.aries.jax.rs.whiteboard.
    at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:792)
    at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:721)
    at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:941)
    at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:318)
    at org.eclipse.osgi.container.Module.doStart(Module.java:571)
    at org.eclipse.osgi.container.Module.start(Module.java:439)
    at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:392)
    at aQute.launcher.Launcher.startBundles(Launcher.java:517)
    at aQute.launcher.Launcher.activate(Launcher.java:423)
    at aQute.launcher.Launcher.run(Launcher.java:301)
    at aQute.launcher.Launcher.main(Launcher.java:147)
Caused by: java.lang.IllegalArgumentException: The service object is not an instance of the service class javax.ws.rs.ext.MessageBodyReader
    at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:220)
    at org.eclipse.osgi.internal.framework.BundleContextImpl.registerService(BundleContextImpl.java:464)
    at org.apache.aries.component.dsl.internal.ServiceRegistrationOSGiImpl.lambda$new$2(ServiceRegistrationOSGiImpl.java:67)
    at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
    at org.apache.aries.component.dsl.OSGi.lambda$effects$61(OSGi.java:520)
    at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
    at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
    at org.apache.aries.component.dsl.internal.IgnoreImpl.lambda$new$1(IgnoreImpl.java:29)
    at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
    at org.apache.aries.component.dsl.internal.AllOSGi.lambda$null$0(AllOSGi.java:40)
    at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
    at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
    at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
    at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
    at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
    at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
    at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
    at org.apache.aries.component.dsl.internal.AllOSGi.lambda$new$2(AllOSGi.java:41)
    at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
    at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:44)
    at org.apache.aries.jax.rs.whiteboard.activator.CxfJaxrsBundleActivator.start(CxfJaxrsBundleActivator.java:105)
    at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:771)
    at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
    at java.security.AccessController.doPrivileged(Native Method)
    at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:764)
    ... 10 more
issueID:ARIES-18
type:Task
changed files:
texts:Refactor IBM unittest package to fit into Aries
There are some tests in JNDI module use the unittest package for testing. Right now these tests are disabled since the unittest package hasn't been moved to trunk yet. This will allow those tests to run.
We might have a different way of running the unit tests in the future but this should get things going now.
issueID:ARIES-180
type:Improvement
changed files:application/application-api/src/main/java/org/apache/aries/application/management/ResolveConstraint.java
texts:The version on the ResolveConstraint should be a VersionRange

issueID:ARIES-1800
type:Bug
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/ComponentTxData.java
texts:rollbackOn element of Transactional annotation ignored when set on class level
Since ARIES-1690 the methods throwing a checked exception cause a rollback if the related exception is marked for a rollback using rollbackOn element of Transactional annotation set on a method. However this doesn't work for Transactional annotations on the class level.
We also need to clarify how we should handle a exceptions set on both levels class and method. There are at least two options:
The resulting set of exceptions marked for rollback is an aggregation from both class level and method level annotation.
Exception set defined on the method level overrides exceptions of the class leve.
issueID:ARIES-1801
type:Bug
changed files:
texts:SPI Fly does not work with a dynamic class object
SLF4J changes in version 1.8 how implementations are looked up to java.util.ServiceLoader.
In our codebase we dynamically search for an SLF4J implementation and use a default logger if none is found.
To adapt to the new mechanism but remain compatible with SLF4J 1.7 I added to our codebase
try {
    // post-1.8 mechanism
    Class<?> slf4jServiceProviderClass = Class.forName("org.slf4j.spi.SLF4JServiceProvider");
    if (ServiceLoader.load(slf4jServiceProviderClass).iterator().hasNext()) {
        noLogger.set(false);
        return true;
    }
} catch (ClassNotFoundException e) {
    // ignore
}
If I now use the org.apache.aries.spifly.dynamic.bundle 1.0.10, I get an exception as SPI Fly seemingly only supports class constants. While traversing the ASM tree it remembers the last class constant seen and uses that to transform the load call.
Here the exception I get:
java.lang.ClassFormatError: Weaving hook failed.
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.transformClass(BundleWiringImpl.java:2479)
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2152)
 at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1607)
 at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
 at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
 at org.javacord.core.util.logging.ExceptionLoggerDelegateImpl.<clinit>(ExceptionLoggerDelegateImpl.java:20)
 at org.javacord.core.util.DelegateFactoryDelegateImpl.createExceptionLoggerDelegate(DelegateFactoryDelegateImpl.java:180)
 at org.javacord.api.util.internal.DelegateFactory.<clinit>(DelegateFactory.java:74)
 at org.javacord.api.DiscordApiBuilder.<init>(DiscordApiBuilder.java:20)
 at net.kautler.test.osgi.OsgiTest.start(OsgiTest.java:17)
 at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
 at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
 at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
 at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1373)
 at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)
 at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: value null
 at org.objectweb.asm.ClassWriter.newConstItem(ClassWriter.java:1057)
 at org.objectweb.asm.MethodWriter.visitLdcInsn(MethodWriter.java:1126)
 at org.apache.aries.spifly.weaver.TCCLSetterVisitor$TCCLSetterMethodVisitor.visitMethodInsn(TCCLSetterVisitor.java:194)
 at org.objectweb.asm.ClassReader.readCode(ClassReader.java:1416)
 at org.objectweb.asm.ClassReader.readMethod(ClassReader.java:1017)
 at org.objectweb.asm.ClassReader.accept(ClassReader.java:693)
 at org.objectweb.asm.ClassReader.accept(ClassReader.java:506)
 at org.apache.aries.spifly.dynamic.ClientWeavingHook.weave(ClientWeavingHook.java:61)
 at org.apache.felix.framework.util.SecureAction.invokeWeavingHook(SecureAction.java:1203)
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.transformClass(BundleWiringImpl.java:2465)
 ... 16 more
issueID:ARIES-1802
type:Test
changed files:
texts:ConfigProperties does not produce xml
I've this annotation in my class
@ConfigProperties(
 pid="my.system",
 update=true
 )

 public void update (Map<String, String> map) throws Exception {
but only services injection is producted
<bean xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"   id="environnement"
  class="fr.aphp.olympe.hermes.services.environnement.impl.EnvironmentImpl"
  ext:field-injection="true" init-method="activate" destroy-method="destroy">
 <property name="blueprintBundleContext" ref="bundleContext"/>
 <property name="transactionManager" ref="transactionManager"/>
</bean>
I would like to reproduce
<bean id="environnement"
  class="fr.aphp.olympe.hermes.services.environnement.impl.EnvironmentImpl"
  init-method="activate" destroy-method="destroy">
  <cm:managed-properties update-strategy="component-managed"
    persistent-id="my.system" update-method="update" />
  <property name="bundleContext" ref="blueprintBundleContext" />
  <property name="transactionManager" ref="transactionManager" />
</bean>
issueID:ARIES-1803
type:Dependency upgrade
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
texts:Upgrade proxy to ASM 6.2

issueID:ARIES-1804
type:Bug
changed files:
texts:Timeout due to connection loss in RSA fastbin provider?
Hello,
I'm running two karaf (4.2.0) servers, one is running the frontend of my application, the second one is running the backend.
The backend services are published to 3 clustered zookeeper (3.4.12) servers. In karaf I have deployed the following RSA features:
karaf@appsrvtlk()> feature:list | grep rsa
aries-rsa-core │ 1.12.0 │ │ Started │ aries-rsa-1.12.0 │
aries-rsa-provider-tcp │ 1.12.0 │ │ Uninstalled │ aries-rsa-1.12.0 │
aries-rsa-provider-fastbin │ 1.12.0 │ x │ Started │ aries-rsa-1.12.0 │
aries-rsa-discovery-local │ 1.12.0 │ │ Uninstalled │ aries-rsa-1.12.0 │
aries-rsa-discovery-config │ 1.12.0 │ │ Uninstalled │ aries-rsa-1.12.0 │
aries-rsa-discovery-zookeeper │ 1.12.0 │ x │ Started │ aries-rsa-1.12.0 │
aries-rsa-discovery-zookeeper-server │ 1.12.0 │ │ Uninstalled │ aries-rsa-1.12.0 │
When I start my karaf servers everything is working fine and my frontend can call my backend service and gets the result. But after some time (I can't figure out when) it seems that the connections between the karaf and zookeeper gets lost and I'm getting a timeout when I call my remote service eventhough all the servers (karaf and zookeepers) are still available and responding. Exhibitor shows no apparent issues with the zookeepers.
I have attached the 
relevant parts of my LoginView UI where I declared the @Reference to my service and where I call the remote service
relevant parts of my AuthenticationService implementation that should be called on the remote karaf
the stacktrace that I'm getting on the frontend karaf when the timeout occurs
my zoo.cfg file
From the stacktrace one can see that the LoginView has a non-null fastbin proxy handler for the authentication service but that after 5 minutes a timeout occurs and there is no line in the log that shows that the remote service was actually called.
Many thanks in advance for your support.
Kind regards,
Alex
issueID:ARIES-1805
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:Blueprint core does not honor Java beans specification
Aries blueprint core, to consider a property legit, checks that is and get access methods are not present at the same time: https://github.com/apache/aries/blob/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java#L222-L255 specifically: https://github.com/apache/aries/blob/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java#L249
looking at java bean specification: http://download.oracle.com/otn-pub/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/beans.101.pdf?AuthParam=1527758194_593d6e2c9336cf75e216a3333390c7b9
it seems that both access methods (is and get) are allowed to be present at the same time, in that case, the is has to be used:
8.3.2 Boolean properties In addition, for boolean properties, we allow a getter method to match the pattern: public boolean is<PropertyName>(); This “is<PropertyName>” method may be provided instead of a “get<PropertyName>” method, or it may be provided in addition to a “get<PropertyName>” method. In either case, if the “is<PropertyName>” method is present for a boolean property then we will use the “is<PropertyName>” method to read the property value.
Should the Aries implementation be modified accordingly?
I've provided a test case in this PR https://github.com/apache/aries/pull/85
If possible, would be nice to have this available to version 1.8.0 as well.
issueID:ARIES-1806
type:New Feature
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderPrototypeServiceFactory.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
texts:Support to create prototype scoped services
It would be nice if one could specify that the type of service produced for the SPI type is prototype scoped.
issueID:ARIES-1807
type:Bug
changed files:
texts:SPI-Fly's weaving hook is subject to start ordering
SPI-Fly is subject to start ordering constraints. This is because weaving hooks are not retroactive in the framework, they only take effect at the moment they are registered. As such they do not operate on previous possible candiates.
It would be nice if SPI-Fly could trigger a refresh on already installed bundles such that weaving would take affect on them. This would eliminate the start ordering problem. Making this a configurable feature would also probably be a good idea.
issueID:ARIES-1809
type:Improvement
changed files:
texts:Run rat plugin by default
The easiest way is to activate rat profile by default in aries parent pom and bump parent pom in depending modules one by one.
issueID:ARIES-181
type:Bug
changed files:application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
texts:AriesApplicationManager has a resolve method that can be passed resolve constraints, but you cannot pass them to the AriesApplicationResolver

issueID:ARIES-1810
type:Bug
changed files:
texts:`onClose` does not execute the action in the correct order
It executed the on leave action in the opposite order to effects which creates inconsistencies.
Actually onClose should be deprecated in favor of effects
issueID:ARIES-1811
type:Bug
changed files:
texts:`effects` is not unwinding properly when exceptions occur
effects does not execute the on leave action if an exception occur. This can leave the system in an inconsistent state, event if recover or recoverWith have been correctly used.
It should make sure the on leave action is always executed if and only if the on adding action has been executed.
issueID:ARIES-1812
type:Bug
changed files:
texts:`once` should support updates
once is normally used to test the existance of a given service or configuration with certain properties. When there is only one tracked instance and that instance is updated, once will retract the program associated to the instance and publish the instance again. This is usually unnecessary and once should support update operations.
issueID:ARIES-1813
type:Bug
changed files:
texts:`effects` must allow more effect execution points
There are two events that DSL nodes must handle: a new instance arrives and an instance leaves. For both these two events there exist two possible effects execution points: before and after, just like an aspect.
effects must allow to specify all four execution points, although this has implications with error handling since not every execution point has the same impact in the execution of the program.
For simplicity the two parameter effects will remain and will mean correspond to before adding and after removal. Any other combination must be specified with the four parameter version.
issueID:ARIES-1814
type:Improvement
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/BaseActivator.java
spi-fly/spi-fly-dynamic-bundle/src/main/java/org/apache/aries/spifly/dynamic/ClientWeavingHook.java
texts:Solve the start order limitations with SPI Fly
A couple of aspects to try:
likely needs to embed ASM and Aries Util
maybe use the bnd instruction -conditionalpackage (which in maven-bundle-plugin becomes <_conditionalpackage>, same syntax as Import-Package
issueID:ARIES-1815
type:Bug
changed files:
texts:ConcurrentModificationException in TopologyManagerImport.unImportForGoneEndpoints
org.apache.aries.rsa.topology-manager[org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport] : null
java.util.ConcurrentModificationException
at java.util.HashMap$HashIterator.nextNode(HashMap.java:1442)
at java.util.HashMap$KeyIterator.next(HashMap.java:1466)
at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.unImportForGoneEndpoints(TopologyManagerImport.java:183)
at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.syncronizeImports(TopologyManagerImport.java:127)
at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.access$000(TopologyManagerImport.java:47)
at org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport$1.run(TopologyManagerImport.java:119)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
issueID:ARIES-1816
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/generics/TypeInference.java
texts:Unable to use <null> with generic arguments

issueID:ARIES-1817
type:Bug
changed files:
texts:Export remove do not always end up in REMOVE events (timing issue)
During testing aries RSA I found several situations where my discovery did not received a remove event. After some inspection I found that
org.apache.aries.rsa.core.ExportRegistrationImpl#getExportReference returns only the reference instance when its not closed, otherwise null.
Usually I expected that the ExportRegistration is closed by the TopologyManager, in this case org.apache.aries.rsa.topologymanager.exporter.ServiceExportRepository. But thats not true. While debugging I saw that sometimes org.apache.aries.rsa.core.RemoteServiceAdminCore#removeServiceExports closes the ExportRegistration a little bit earlier. That leads to a null ExportReference instance in ServiceExportRepository#closeReg, which in return leads to no remove event.
So, there is no single point of truth, who closes the ExportRegistration. Citing the Spec 122.5.1:
The Export Registrations remain open until:
Explicitly closed by the Topology Manager, or
The Remote Service Admin service is no longer used by the Topology Manager that created the Export Registration.
If the Remote Service Admin service can no longer maintain the corresponding Endpoint due to failures than these should be reported through the events. However, the registrations should remain open until explicitly closed by the Topology Manager.
I attached a patch, that solve the problem, but is as well not compliant to the spec, like the current implementation.
   
issueID:ARIES-1818
type:Improvement
changed files:
texts:Upgrade java version to 8 and aries parent to 20

issueID:ARIES-182
type:Improvement
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationImpl.java
texts:The resolution process should be able to be done separatly from the AriesApplication creation
Several use cases:
the user wants to impose constraints without having to resolve the application twice
the resolution fails but we'd like to understand why and have some informations about the application
issueID:ARIES-1820
type:Bug
changed files:
texts:blueprint-maven-plugin should fail instead of silently and arbitrarily choose one of several beans with an identical ID
The blueprint-maven-plugin (1.4.0) will currently silently pick one or another of two (or more) singleton annotated classes with the same name for the <bean> with an identical id=xyz to generate. This is VERY confusing...
This happened to us (in OpenDaylight) when we had a @Singleton class Something in package a; in one project, and another identically named singleton class in another package in another project which was a dependency of the first project (but both packages started with the same scanPath we use). But it probably even happens if you have two classes of the same name in different packages in the same project (not tested).
In an ideal world, such conflicts such lead to a build failure with a clear message.
issueID:ARIES-1821
type:Bug
changed files:
texts:JAX-RS Whiteboard is not using prototype scope when registering services for HTTP Whiteboard
Http Whiteboard recommends using prototype scope for servlets and filters to avoid calling destroy and init on instances that might not support it. Currently singleton scope is used.
issueID:ARIES-1822
type:Dependency upgrade
changed files:
texts:Upgrade plugins

issueID:ARIES-1823
type:Improvement
changed files:
texts:Optionally support Service Loader Mediator

issueID:ARIES-1824
type:Bug
changed files:
texts:Add missing `osgi.jaxrs.media.type` properties to extensions

issueID:ARIES-1825
type:Bug
changed files:
texts:NullPointerException in the JAX-RS Whiteboard
11:06:29.176 [CM Event Dispatcher (Fire ConfigurationEvent: pid=org.apache.aries.jax.rs.jackson)] WARN  o.a.a.j.r.w.i.AriesJaxrsServiceRuntime - Resource CachingServiceReference
{ cachedProperties=\{osgi.jaxrs.application.select=(osgi.jaxrs.name=rest-ui), osgi.jaxrs.name=Domain Viewer, osgi.jaxrs.extension.select=[(osgi.jaxrs.media.type=application/json), (osgi.jaxrs.name=aries.shiro.authz)], osgi.jaxrs.whiteboard.target=null (cached)}

serviceReference=[com.acme.ui.rest.DomainResource]

} is registered with error

11:06:29.178 [CM Event Dispatcher (Fire ConfigurationEvent: pid=org.apache.aries.jax.rs.jackson)] ERROR o.a.a.j.r.w.internal.Whiteboard - ServiceReference CachingServiceReference { cachedProperties={osgi.jaxrs.application.select=(osgi.jaxrs.name=rest-ui), osgi.jaxrs.name=Domain Viewer, osgi.jaxrs.extension.select=[(osgi.jaxrs.media.type=application/json), (osgi.jaxrs.name=aries.shiro.authz)], osgi.jaxrs.whiteboard.target=null (cached)}
serviceReference=[com.acme.ui.rest.DomainResource]
} for endpoint produced error: {}
java.lang.NullPointerException: null
at org.apache.aries.jax.rs.whiteboard.internal.Whiteboard.lambda$null$51(Whiteboard.java:810)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$80(OSGi.java:734)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$80(OSGi.java:734)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$recoverWith$81(OSGi.java:730)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.BundleContextOSGiImpl.lambda$new$0(BundleContextOSGiImpl.java:29)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.ChangeContextOSGiImpl.lambda$new$0(ChangeContextOSGiImpl.java:31)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$recoverWith$81(OSGi.java:730)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.internal.EffectsOSGi.lambda$new$1(EffectsOSGi.java:33)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.BundleContextOSGiImpl.lambda$new$0(BundleContextOSGiImpl.java:29)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$31(OSGi.java:292)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.jax.rs.whiteboard.internal.FilteredPublisher.publishIfMatched(FilteredPublisher.java:53)
at org.apache.aries.jax.rs.whiteboard.internal.ApplicationExtensionRegistry.registerExtensionInApplication(ApplicationExtensionRegistry.java:115)
at org.apache.aries.jax.rs.whiteboard.internal.Whiteboard.lambda$null$61(Whiteboard.java:919)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:614)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$80(OSGi.java:734)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$80(OSGi.java:734)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$recoverWith$81(OSGi.java:730)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.BundleContextOSGiImpl.lambda$new$0(BundleContextOSGiImpl.java:29)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.ChangeContextOSGiImpl.lambda$new$0(ChangeContextOSGiImpl.java:31)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$recoverWith$81(OSGi.java:730)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.internal.EffectsOSGi.lambda$new$1(EffectsOSGi.java:33)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.BundleContextOSGiImpl.lambda$new$0(BundleContextOSGiImpl.java:29)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:74)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:56)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:318)
at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi.lambda$new$0(ServiceReferenceOSGi.java:50)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:611)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.internal.EffectsOSGi.lambda$new$1(EffectsOSGi.java:33)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:693)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:693)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$71(OSGi.java:682)
at org.apache.aries.component.dsl.internal.Pad.publish(Pad.java:59)
at org.apache.aries.component.dsl.OSGi.lambda$null$61(OSGi.java:585)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.OSGi.lambda$null$63(OSGi.java:585)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.HighestRankingOSGi.lambda$null$1(HighestRankingOSGi.java:62)
at org.apache.aries.component.dsl.internal.Pad.publish(Pad.java:59)
at org.apache.aries.component.dsl.OSGi.lambda$null$84(OSGi.java:758)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$85(OSGi.java:751)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:617)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$71(OSGi.java:682)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:74)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:56)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901)
at org.apache.felix.framework.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:990)
at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:838)
at org.apache.felix.framework.EventDispatcher.fireServiceEvent(EventDispatcher.java:545)
at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4595)
at org.apache.felix.framework.Felix.registerService(Felix.java:3587)
at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
at org.apache.aries.component.dsl.internal.ServiceRegistrationOSGiImpl.lambda$new$2(ServiceRegistrationOSGiImpl.java:67)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$70(OSGi.java:633)
at org.apache.aries.component.dsl.internal.CoalesceOSGiImpl.lambda$null$2(CoalesceOSGiImpl.java:67)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.ConfigurationOSGiImpl.lambda$null$1(ConfigurationOSGiImpl.java:99)
at org.apache.aries.component.dsl.internal.UpdateSupport.runUpdate(UpdateSupport.java:50)
at org.apache.aries.component.dsl.internal.ConfigurationOSGiImpl.lambda$null$2(ConfigurationOSGiImpl.java:95)
at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.sendEvent(ConfigurationManager.java:1662)
at org.apache.felix.cm.impl.ConfigurationManager$FireConfigurationEvent.run(ConfigurationManager.java:1630)
at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:138)
at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:105)
at java.lang.Thread.run(Thread.java:748)
issueID:ARIES-1826
type:Bug
changed files:
texts:blueprint-maven-plugin IllegalArgumentException from ASM, possibly Java 9 related
From https://jira.opendaylight.org/browse/ODLPARENT-167 :
[INFO] --- blueprint-maven-plugin:1.10.0:blueprint-generate (default) @ northbound-api ---
[INFO] Package org.opendaylight will be scanned
(...)
[ERROR] Failed to execute goal org.apache.aries.blueprint:blueprint-maven-plugin:1.10.0:blueprint-generate (default) on project northbound-api: Error during blueprint generation: IllegalArgumentException -> [Help 1]
With mvn-X (details in ODLPARENT-167) we find it's Caused by: java.lang.IllegalArgumentException at org.apache.xbean.asm5.ClassReader.<init>, which could be related to it scanning some Java > 8 (9/10/11) class in some JAR?
[~gnt] or [~chris@die-schneider.net], I don't suppose this is a known issue for which you already have a fix, or an thoughts? Stephen Kitt FYI.
issueID:ARIES-1827
type:New Feature
changed files:
texts:Add application base prefix for the whole whiteboard
Allow to specify a property to a whiteboard to prepend a path to all the applications deployed in it
issueID:ARIES-1828
type:Bug
changed files:
texts:JAX-RS whiteboard is registering the JaxRsServiceRuntime interface before it is ready
The whiteboard implementation is registering the JaxRsServiceRuntime before it is ready to process services, which makes more difficult to test or to synch.
issueID:ARIES-1830
type:New Feature
changed files:
texts:Support OSGi promises as asychronous return types in the jaxrs whiteboard

issueID:ARIES-1831
type:Bug
changed files:
texts:Race condition when using accumulate
OnlyLastPublisher was missing a synchronized block that made accumulate and accumulateInMap be subject of race condition errors.
issueID:ARIES-1832
type:Bug
changed files:
texts:NullPointerException in Configuration
ConfigurationOSGiImpl is not properly checking for the null returned value and is causing an unnecessary exception to be thrown and catched.
issueID:ARIES-1833
type:Bug
changed files:
texts:Embed component-dsl into jackson extension

issueID:ARIES-1834
type:Bug
changed files:
texts:add missing osgi.jaxrs implementation requirement to jackson extension

issueID:ARIES-1835
type:Test
changed files:
texts:TestFastbinRoundTrip fails in a high percentage of the builds
TestFastbinRoundTrip often fails. This seems to be caused by the server side not being ready in time.
We should fix this by retrying the call a few times. I will add awatility support to make this easier.
issueID:ARIES-1836
type:Test
changed files:
texts:Test failure in TestFastbinRoundTrip: SocketException: Invalid argument
Sometimes TestFastbinRoundTrip still fails with these exceptions being shown:
https://gist.github.com/cschneider/2e342a72112597dab55c01d65a9f654d
ConnectException 
https://gist.github.com/cschneider/48b8b72bf972e4da0a01021341fa5bfe
 
issueID:ARIES-1837
type:Bug
changed files:
texts:ConcurrentModificationException in InterestManager.endpointChanged
In InterestManager.endpointChanged we iterate through the interests in an unsafe way:
        for (Interest interest : interests.values())
As interests is a simple HashMap this fails if an endpoint is added or removed while iterating.
I propose to use a ConcurrentHashMap instead to fix this.
 
issueID:ARIES-1838
type:Bug
changed files:
texts:Zookeeper discovery does not send modified events
We forgot to set a watcher for data changes on znode. So the zookeeper discovery is not triggered for such changes. So no modified events are sent to the EndpointEventListener
issueID:ARIES-1839
type:Bug
changed files:
texts:Invalid zookeeper path /osgi/service_registry#osgi#service_registry is created

issueID:ARIES-184
type:Improvement
changed files:
texts:The application uninstallation should be fully delegated to the ApplicationContextManager
Currently, the uninstallation of bundles is done by the ApplicationManager, but he does not really have the full knowledge of what happened, so this should be delegated to the ContextManager
issueID:ARIES-1840
type:Bug
changed files:
texts:ConcurrentModificationException in org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.importServices
In org.apache.aries.rsa.topologymanager.importer.TopologyManagerImport.importServices
we iterate through importPossibilities which is MultiMap. As this map is access by more than one thread we must use a ConcurrentHashMap.
issueID:ARIES-1842
type:Bug
changed files:
texts:CxfJaxRsServiceRegistrator might NPE when using service references of already unregistered services
or if the service factory returns null for whatever reason.
The whiteboard implementation should defend against this.
issueID:ARIES-1843
type:Bug
changed files:
texts:JAX-RS Whiteboard is not handling _unregistering_ services
During service unregistration it can happen that the whiteboard refreshes the application. This can lead to request a new instance of a service that is being unregistered in that thread. This condition has to be explicitly checked because, during this process, the service reference still appears as registered.
issueID:ARIES-1844
type:Dependency upgrade
changed files:
texts:Support for ASM 7 (Java 11)
Would like to see SPI Fly be upgraded to support ASM 7, so that Java 11 runtimes can start to work with ServiceLoader behaviors.
issueID:ARIES-1846
type:Bug
changed files:
texts:Topologymanager doesn't import org.osgi.service.clusterinfo.* remote services
The OSGi clusterinfo specification defines services in the org.osgi.service.clusterinfo package that have to be exported and imported as remote services. However, currently the TopologyManager filters out all org.osgi.service.* services.
issueID:ARIES-1847
type:Bug
changed files:
texts:IllegalArgumentException: Path cannot be null when handling zookeeper event
INFO: Received event WatchedEvent state:Disconnected type:None path:null
Oct 11, 2018 8:48:06 PM org.apache.aries.rsa.discovery.zookeeper.repository.ZookeeperEndpointRepository watchRecursive
INFO: Path cannot be null
java.lang.IllegalArgumentException: Path cannot be null
at org.apache.zookeeper.common.PathUtils.validatePath(PathUtils.java:45)
at org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1203)
at org.apache.aries.rsa.discovery.zookeeper.repository.ZookeeperEndpointRepository.handleZNodeChanged(ZookeeperEndpointRepository.java:237)
at org.apache.aries.rsa.discovery.zookeeper.repository.ZookeeperEndpointRepository.watchRecursive(ZookeeperEndpointRepository.java:174)
at org.apache.aries.rsa.discovery.zookeeper.repository.ZookeeperEndpointRepository.process(ZookeeperEndpointRepository.java:146)
at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:533)
at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:508)
issueID:ARIES-1848
type:Bug
changed files:
texts:jaxrs whiteboard jar contains SseEventSource.Builder but not the impl
org.apache.aries.jax.rs.whiteboard-1.0.1.jar!/META-INF/services/javax.ws.rs.sse.SseEventSource.Builder shouldn't be part of aries jaxrs whiteboard packaging since the impl is not provided and is optional for cxf
issueID:ARIES-1849
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyMethodAdapter.java
texts:Aries proxy does not work with interface default methods
Since Java 8 it is possible to define default implementations inside interface definition.
It seems that Aries proxy is not compatible with interface default methods. As a result it is not possible to use a blueprint reference to a service implementing an interface with default method.
The following unit test demonstrates the issue :
import java.util.Collections;
import org.apache.aries.proxy.UnableToProxyException;
import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
import org.junit.Assert;
import org.junit.Test;

public class InterfaceProxyGeneratorTest {
    public static interface Service {
        String getName();
        
        default String getValue() {
            return "default";
        }
    }
    
    public static class ServiceImpl implements Service {
        @Override
        public String getName() {
            return "serviceimpl";
        }
        
        @Override
        public String getValue() {
            return "value";
        }
    }
    
    @Test
    public void testProxy() throws UnableToProxyException {
        ServiceImpl serviceImpl = new ServiceImpl();
        Assert.assertEquals("serviceimpl", serviceImpl.getName());
        Assert.assertEquals("value", serviceImpl.getValue());
        
        Service proxy = (Service)InterfaceProxyGenerator.getProxyInstance(
            null, null, Collections.singleton(Service.class),
            () -> {
                return serviceImpl;
            },
            null);
        
        Assert.assertNotNull(proxy);        
        Assert.assertEquals("serviceimpl", proxy.getName());
        Assert.assertEquals("value", proxy.getValue());
    }
}
issueID:ARIES-185
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
texts:AriesTrader - create unique package for entity implementation classes
Currently the ariestrader-beans and ariestrader-entities both implement the same class names and packages. Beans are just pojo's while entities are jpa enhanced entities. Since the interfaces for the beans were introduced a while back it is no longer necessary for these implementations to be the same package and class names to be shared so they should be made unique.
issueID:ARIES-1850
type:Bug
changed files:
texts:Local service modification is not reflected in changed export registration

issueID:ARIES-1851
type:Bug
changed files:
texts:NoClassDefFoundError ZooTrace on shutdown of zookeeper discovery
org.apache.hadoop.zookeeper[org.apache.zookeeper.server.ZooKeeperThread] : Exception occurred from thread Thread-28-SendThread(localhost:15201)
java.lang.NoClassDefFoundError: org/apache/zookeeper/server/ZooTrace
at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1192)
Caused by: java.lang.ClassNotFoundException: Unable to load class 'org.apache.zookeeper.server.ZooTrace' because the bundle wiring for org.apache.hadoop.zookeeper is no longer valid.
at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1539)
at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
... 1 more
issueID:ARIES-1852
type:Bug
changed files:
texts:Missing null check in PromiseAwareJAXRSInvoker
Looks like Object result might be null and it is not being checked.
issueID:ARIES-1853
type:Bug
changed files:
texts:SAXParseException in transaction.xml because of uneven number of schemaLocation URI
I am using the bundle org.apache.aries.transaction.blueprint-2.2.0.jar in a Karaf 4.2.1 environment. I get several warnings in the log file because the schemaLocation value of OSGI-INF/transaction.xml has an uneven number. Does not affect the bundle start, but these warnings should be avoided.
org.xml.sax.SAXParseException: SchemaLocation: schemaLocation-Wert = 'http://www.osgi.org/xmlns/blueprint/v1.0.0' muss eine gerade Anzahl an URIs haben.
at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203) ~[?:?]
at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.warning(ErrorHandlerWrapper.java:99) [?:?]
at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:392) [?:?]
at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327) [?:?]
at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:284) [?:?]
at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:452) [?:?]
at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.storeLocations(XMLSchemaValidator.java:2347) [?:?]
at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1754) [?:?]
at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:740) [?:?]
at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:374) [?:?]
issueID:ARIES-1854
type:Improvement
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/WeavingData.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerRestriction.java
spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/BaseActivator.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerHeaderProcessor.java
spi-fly/spi-fly-dynamic-bundle/src/main/java/org/apache/aries/spifly/dynamic/ClientWeavingHook.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/Util.java
texts:Add support for ServiceLoader.load(Class, ClassLoader)
Currently SpiFly does not support the ServiceLoader.load(Class, ClassLoader) method, ignoring it completely.
  The solution is to create a wrapper classloader which takes the specified classloader as the parent. If the parent lookup for a provider fails, fall through to the Service Loader Mediator mechanism. This method does not rely on the TCCL.
issueID:ARIES-1855
type:Improvement
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/BaseActivator.java
spi-fly/spi-fly-dynamic-bundle/src/main/java/org/apache/aries/spifly/dynamic/ClientWeavingHook.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/Util.java
texts:Finish removing legacy of LogService
LogService is never used and so I'm removing the remaining aspects and dependency on osgi.compendium.
issueID:ARIES-1856
type:Bug
changed files:
texts:Issue with redeployment in Bndtools
When using Bndtools for development there are many redeploys of the JAX-RS whiteboard bundle (the bundle gets rebuilt on save). For some reason I am seeing an NPE, after which my application is broken until I restart the framework.
This is happening using the OSGi enRoute 7.0.0 templates.
  java.lang.NullPointerException: null
at org.apache.aries.jax.rs.whiteboard.internal.utils.ServiceReferenceResourceProvider.getResourceClass(ServiceReferenceResourceProvider.java:56)
at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.setResourceProviders(JAXRSServerFactoryBean.java:391)
at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.setResourceProvider(JAXRSServerFactoryBean.java:381)
at org.apache.aries.jax.rs.whiteboard.internal.cxf.CxfJaxrsServiceRegistrator.rewire(CxfJaxrsServiceRegistrator.java:282)
at org.apache.aries.jax.rs.whiteboard.internal.cxf.CxfJaxrsServiceRegistrator.remove(CxfJaxrsServiceRegistrator.java:178)
at org.apache.aries.jax.rs.whiteboard.internal.cxf.CxfJaxrsServiceRegistrator.add(CxfJaxrsServiceRegistrator.java:90)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:615)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$76(OSGi.java:710)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$map$77(OSGi.java:710)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$80(OSGi.java:735)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$80(OSGi.java:735)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$recoverWith$81(OSGi.java:731)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.BundleContextOSGiImpl.lambda$new$0(BundleContextOSGiImpl.java:29)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.ChangeContextOSGiImpl.lambda$new$0(ChangeContextOSGiImpl.java:31)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$recoverWith$81(OSGi.java:731)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$31(OSGi.java:292)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.jax.rs.whiteboard.internal.FilteredPublisher.publishIfMatched(FilteredPublisher.java:53)
at org.apache.aries.jax.rs.whiteboard.internal.ApplicationExtensionRegistry.lambda$waitForApplicationExtension$3(ApplicationExtensionRegistry.java:81)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$transform$89(OSGi.java:777)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.internal.EffectsOSGi.lambda$new$1(EffectsOSGi.java:33)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$effects$70(OSGi.java:612)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.internal.EffectsOSGi.lambda$new$1(EffectsOSGi.java:33)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.BundleContextOSGiImpl.lambda$new$0(BundleContextOSGiImpl.java:29)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.HighestRankingOSGi.lambda$null$1(HighestRankingOSGi.java:62)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$71(OSGi.java:683)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:74)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:56)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi.lambda$new$0(ServiceReferenceOSGi.java:50)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$filter$72(OSGi.java:679)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.internal.HighestRankingOSGi.lambda$new$3(HighestRankingOSGi.java:47)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$flatMap$74(OSGi.java:694)
at org.apache.aries.component.dsl.internal.OSGiImpl.lambda$create$0(OSGiImpl.java:39)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$73(OSGi.java:694)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$71(OSGi.java:683)
at org.apache.aries.component.dsl.internal.Pad.publish(Pad.java:59)
at org.apache.aries.component.dsl.OSGi.lambda$null$61(OSGi.java:586)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.OSGi.lambda$null$63(OSGi.java:586)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.HighestRankingOSGi.lambda$null$1(HighestRankingOSGi.java:62)
at org.apache.aries.component.dsl.internal.Pad.publish(Pad.java:59)
at org.apache.aries.component.dsl.OSGi.lambda$null$84(OSGi.java:759)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:25)
at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
at java.util.Collections$2.tryAdvance(Collections.java:4717)
at java.util.Collections$2.forEachRemaining(Collections.java:4725)
at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
at org.apache.aries.component.dsl.internal.JustOSGiImpl.lambda$new$2(JustOSGiImpl.java:42)
at org.apache.aries.component.dsl.internal.OSGiImpl.run(OSGiImpl.java:50)
at org.apache.aries.component.dsl.OSGi.lambda$null$85(OSGi.java:752)
at org.apache.aries.component.dsl.OSGi.lambda$null$69(OSGi.java:618)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.OSGi.lambda$null$71(OSGi.java:683)
at org.apache.aries.component.dsl.Publisher.apply(Publisher.java:28)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:74)
at org.apache.aries.component.dsl.internal.ServiceReferenceOSGi$DefaultServiceTrackerCustomizer.addingService(ServiceReferenceOSGi.java:56)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:903)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:112)
at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:923)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:233)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:865)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:804)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:228)
at org.eclipse.osgi.internal.framework.BundleContextImpl.registerService(BundleContextImpl.java:472)
at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.register(AbstractComponentManager.java:906)
at org.apache.felix.scr.impl.manager.AbstractComponentManager$3.register(AbstractComponentManager.java:892)
at org.apache.felix.scr.impl.manager.RegistrationManager.changeRegistration(RegistrationManager.java:128)
at org.apache.felix.scr.impl.manager.AbstractComponentManager.registerService(AbstractComponentManager.java:959)
at org.apache.felix.scr.impl.manager.AbstractComponentManager.activateInternal(AbstractComponentManager.java:732)
at org.apache.felix.scr.impl.manager.AbstractComponentManager.enableInternal(AbstractComponentManager.java:666)
at org.apache.felix.scr.impl.manager.AbstractComponentManager.enable(AbstractComponentManager.java:432)
at org.apache.felix.scr.impl.manager.ConfigurableComponentHolder.enableComponents(ConfigurableComponentHolder.java:665)
at org.apache.felix.scr.impl.BundleComponentActivator.initialEnable(BundleComponentActivator.java:339)
at org.apache.felix.scr.impl.Activator.loadComponents(Activator.java:381)
at org.apache.felix.scr.impl.Activator.access$200(Activator.java:49)
at org.apache.felix.scr.impl.Activator$ScrExtension.start(Activator.java:263)
at org.apache.felix.scr.impl.AbstractExtender.createExtension(AbstractExtender.java:196)
at org.apache.felix.scr.impl.AbstractExtender.modifiedBundle(AbstractExtender.java:169)
at org.apache.felix.scr.impl.AbstractExtender.modifiedBundle(AbstractExtender.java:49)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:488)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:232)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:450)
at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:911)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:233)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEventPrivileged(EquinoxEventPublisher.java:233)
at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:140)
at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:132)
at org.eclipse.osgi.internal.framework.EquinoxContainerAdaptor.publishModuleEvent(EquinoxContainerAdaptor.java:194)
at org.eclipse.osgi.container.Module.publishEvent(Module.java:479)
at org.eclipse.osgi.container.Module.start(Module.java:470)
at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:431)
at aQute.launcher.Launcher.startBundles(Launcher.java:519)
at aQute.launcher.Launcher$1.run(Launcher.java:260)
at java.util.TimerThread.mainLoop(Timer.java:555)
at java.util.TimerThread.run(Timer.java:505)
issueID:ARIES-1857
type:Bug
changed files:
texts:Regression in framework.extension due to work on ARIES-1739

issueID:ARIES-1858
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholderExt.java
texts:Make typed property placeholders compatible with older Camel versions
ARIES-1298 changed the runtime class of bean registered from {http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.x.0}property-placeholder and {http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.x.0}property-placeholder. This is definitely not caught by semver plugin.
camel-blueprint (see CAMEL-12570) added support for this new runtime class - it was needed because Camel explicitly casts and uses reflection on old org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder class, while blueprint-core 1.10.0 registers placeholder class that extends org.apache.aries.blueprint.ext.AbstractPropertyPlaceholderExt - and these two are not related.
The problem is that when user will try to upgrade to e.g., Karaf with blueprint-core 1.10.0 without upgrading Camel, Camel blueprint will stop detecting blueprint property resolvers.
issueID:ARIES-1859
type:Improvement
changed files:
texts:source of org.apache.aries.spifly.dynamic.bundle on maven isn't complete
org.apache.aries.spifly.core-internal
org.apache.aries.spifly.weaver-internal
org.apache.aries.spifly.dynamic.bundle
but on maven source bundle only from org.apache.aries.spifly.dynamic.bundle
issueID:ARIES-186
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
texts:AriesTrader - code cleanup - remove unavailable function left overs from DayTrader

issueID:ARIES-1860
type:Bug
changed files:spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java
texts:Dynamic Spifly fails on java 11
I've upgraded to spifly 1.1, due as suggested on https://issues.apache.org/jira/browse/ARIES-1844
But when running tests, it still fails due to TCCLSetterVisitor still using ASM5:
https://github.com/apache/aries/blob/trunk/spi-fly/spi-fly-weaver/src/main/java/org/apache/aries/spifly/weaver/TCCLSetterVisitor.java#L64
  Problem can be re-produced via:
git clone https://github.com/DozerMapper/dozer.git
mvn clean install -DskipTests
mvn clean install -Dtest=Proto3KarafContainerTest#canResolveProtobufSupportModule
Protobuf tests will fail with exception:
[ERROR] canResolveProtobufSupportModule(com.github.dozermapper.osgitests.Proto3KarafContainerTest) Time elapsed: 123.448 s <<< ERROR!
java.lang.UnsupportedOperationException: This feature requires ASM7
 at org.objectweb.asm.ClassVisitor.visitNestMember(ClassVisitor.java:236)
 at org.objectweb.asm.ClassReader.accept(ClassReader.java:651)
 at org.objectweb.asm.ClassReader.accept(ClassReader.java:391)
 at org.apache.aries.spifly.dynamic.ClientWeavingHook.weave(ClientWeavingHook.java:60)
 at org.apache.felix.framework.util.SecureAction.invokeWeavingHook(SecureAction.java:1203)
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.transformClass(BundleWiringImpl.java:2465)
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2152)
 at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1607)
 at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
 at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
 at com.github.dozermapper.core.cache.DefaultCacheManager.putCache(DefaultCacheManager.java:67)
 at com.github.dozermapper.core.DozerBeanMapperBuilder.getCacheManager(DozerBeanMapperBuilder.java:700)
 at com.github.dozermapper.core.DozerBeanMapperBuilder.build(DozerBeanMapperBuilder.java:555)
 at com.github.dozermapper.osgitests.Proto3KarafContainerTest.canResolveProtobufSupportModule(Proto3KarafContainerTest.java:87)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.base/java.lang.reflect.Method.invoke(Method.java:566)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runLeafWithRetry(ContainerTestRunner.java:97)
 at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChildWithRetry(ContainerTestRunner.java:84)
 at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:75)
 at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:43)
 at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
 at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
 at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
 at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.invokeViaJUnit(JUnitProbeInvoker.java:124)
 at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.findAndInvoke(JUnitProbeInvoker.java:97)
 at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.call(JUnitProbeInvoker.java:73)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.base/java.lang.reflect.Method.invoke(Method.java:566)
 at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:85)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.base/java.lang.reflect.Method.invoke(Method.java:566)
 at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
 at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
 at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
 at java.base/java.security.AccessController.doPrivileged(Native Method)
 at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
 at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
 at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
 at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
 at java.base/java.security.AccessController.doPrivileged(Native Method)
 at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
 at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
 at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
 at java.base/java.lang.Thread.run(Thread.java:834)
     
issueID:ARIES-1861
type:Bug
changed files:
texts:Blueprint Spring does not work without internet connection
We are migrating for a customer a lot of old Spring-DM based bundles he used to run on a Karaf 2.x to Karaf 4.x. We were hoping to leverage the Blueprint Spring functionality available in Karaf to not have to not have to change to Blueprint (at least for now).
Unfortunately, it doesn't seem to work when no internet connection is available, because it is trying to download the spring bean schema 'http://www.springframework.org/schema/osgi/spring-osgi.xsd'.
I created a simple Spring-DM based bundle  based on the Aries blueprint Hello World sample and I am able successfully run it on a Karaf 4.2.1 - start karaf, install aries-blueprint-spring and copy the jar to the deploy folder => bundle starts and service is available. Same scenario with internet connection disabled => the bundle is in failed status .
I have attached the simple project and the Karaf log file with the exception.
Requiring a internet connection is a no go for the customer.
issueID:ARIES-1862
type:Improvement
changed files:
texts:Remove superfluous transitive dependencies from spifly dynamic.bundle

issueID:ARIES-1863
type:Bug
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerHeaderProcessor.java
spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
texts:Ensure type compatibility when running in an environment that already has bnd uses elsewhere
Due to how spifly now uses internal bnd types for header parsing it can occur that external implementation types come from some other occurrence of bnd. Make sure this doesn't blow up.
issueID:ARIES-1864
type:Bug
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/Util.java
texts:Fix failure in security compliance test

issueID:ARIES-1865
type:Bug
changed files:
texts:IllegalArgumentException in ServiceTuple
It looks like, under some circumstances, some of the services in the tuples are tried to be ungot twice, causing an IllegalArgumentException to be thrown
issueID:ARIES-1866
type:Bug
changed files:
texts:URI binding conflict resolution appears incorrect in jaxrs-whiteboard
I'm seeing different behaviour in the URI resource binding conflict resolution when using tje jax-rs whiteboard as then using "plain" cxf.
Attached are two resource class implementations. One has a class level @Path of "test", with then a subresource locator with an @Path of "{a}" returning another resource class that has a @GET with an @Path of "{b}". 
The other resource class has a class level @Path of "test/a/b". 
Given a GET request for "/test/a/b" it should match the second of these resource classes as being the most specific match. Instead it matches the first. Indeed it seems that the presence of the first resource class stops anything going to the second. If I change the @Path for the second resource class to be "test2/a/b" then appropriate requests get routed there. 
I have run a "plain" cxf test by adapting the CXF provided "basic" jax-rs test with the same resource classes, and it routes as I would expect. 
I had intended to try and adapt the example in the aries jaxrs whiteboard project, but I get test errors when I run an "mvn install",and it isn't obvious to me how the jax-rs.example-run/example.jar file mentioned in the readme would get created.
issueID:ARIES-1867
type:Bug
changed files:
texts:ContainerResponseFilter not fired for SSE endpoint
I have a resource class such as the following:
@Path("events")
@JaxrsResource
public class EventsResource {

  private Sse sse;
  private SseBroadcaster eventBroadcaster;

  @Context
  public void setSse(Sse sse) {
    this.sse = sse;
    this.eventBroadcaster = sse.newBroadcaster();
  }

  @GET
  @Produces(MediaType.SERVER_SENT_EVENTS)
  public void suscribeToEvents(@Context SseEventSink eventSink) {
    eventBroadcaster.register(eventSink);
  }
}
    In addition, I have a CORS filter:
  @Component(immediate=true)
@Provider
@JaxrsExtension
public class CORSFilter implements ContainerResponseFilter {

  @Override
  public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) throws IOException {
    System.out.println("CORSFilter for "+requestContext.getUriInfo().getPath());
    MultivaluedMap<String, Object> headers = responseContext.getHeaders();

    headers.add("Access-Control-Allow-Origin", requestContext.getHeaderString("Origin"));
    ...
  The CORS filter gets fired on all requests as I expect, except for ones to the EventResource.subscribeToEvents method. Hence browsers complain when receiving SSE events.
This used to work fine with jersey as the JAXRS implementation. CORS filter got called for the EventsResource.subscribeToEvents call.
I've no idea whether this is a jaxrs-whiteboard level issue, or a CXF level issue. I will try and come up with a plain CXF test of the same thing for comparison.
 
issueID:ARIES-1868
type:Bug
changed files:
texts:@Context injection points are re-injected per request even for singleton resource services

issueID:ARIES-1869
type:Bug
changed files:
texts:Example does not work with current karaf 4.2.1
See https://stackoverflow.com/questions/53433775/org-apache-aries-jpaorg-apache-aries-jpa-blueprint2-3-0-cant-make-run
 
issueID:ARIES-187
type:Improvement
changed files:
texts:AriesTrader - Eliminate unnecessary NOTICE and LICENSE files from source and let the build include them

issueID:ARIES-1870
type:Bug
changed files:
texts:URLs are not correctly reported on Windows
The report was using FileSystem dependent classes that have different implementations depending on the operating system.
issueID:ARIES-1872
type:New Feature
changed files:
texts:Provide karaf features repository

issueID:ARIES-1873
type:Bug
changed files:
texts:Aries Proxy should included ASM 7 in the import range
As Karaf upgraded to ASM 7, Aries Proxy should extend the version range for ASM from [5,7) to [5,8).
issueID:ARIES-1874
type:Bug
changed files:
texts:Servlet registration should use / instead of "" to be compliant with HTTP whiteboard spec
According to the spec:
For ServletContextHelper services, the value of this service property must be of type String. The value is either a slash for the root or it must start with a slash but not end with a slash. Valid characters are defined in rfc3986#section-3.3. Contexts with an invalid path are ignored. 
So, JAXRS Whiteboard should use / for instance instead of "".
issueID:ARIES-1875
type:Bug
changed files:
texts:JAXRS Whiteboard feature should depend to http-whiteboard servlet

issueID:ARIES-1876
type:Improvement
changed files:
texts:Provide feature for jackson integration

issueID:ARIES-188
type:Improvement
changed files:application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataFactoryImpl.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadataFactory.java
application/application-utils/src/main/java/org/apache/aries/application/utils/AppConstants.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentContentImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
texts:Separate out the Isolated and Shared bundle content in DeploymentMetadata.java
An Application defines some content and a resolver finds dependencies. The dependencies should be sharable with other applications, but there is no way in the DeploymentMetadata to differentiate shared and non-shared content. This enhancement will separate the two out.
I also found a bug which I'll fix here. If the Application-Content mentions bundle org.apache.aries.example;version="[1.0.0,2.0.0)" and the resolver may choose version 1.5. The problem is the DeploymentMetadata will set the Deployed-Content to be the minimum version irrespective.
issueID:ARIES-1880
type:Improvement
changed files:
texts:Use builder instead of many parameters in subscribe
Subscription subscribe(String topic, Position position, Seek seek, Consumer<Received> callback);
4 Parameters which can partly be null is not a good idea. Dominik Przybysz proposed on the list to use a DTO.
 
issueID:ARIES-1884
type:Bug
changed files:
texts:Extensions without "osgi.jaxrs.application.select" property are registering to all available applications
The specification states that, for both resources and extensions, if the service does not bear an osgi.jaxrs.application.select property it should attach to the default application in that whiteboard only.
Currently resources are attaching to default application but extensions are attaching to all available applications.
issueID:ARIES-1885
type:Bug
changed files:
texts:JpaInterceptor does not properly end coordination in case of Exception
In class JpaInterceptor the method postCallWithException calls Coordination.fail() but not Coordination.end():
@Override
public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
    LOG.debug("PostCallWithException for bean {}, method {}", cm.getId(), m.getName(), ex);
    if (preCallToken != null) {
        ((Coordination)preCallToken).fail(ex);
    }
}
  However, the javadoc of Coordination.fail() states:
If this Coordination has been {@link #push() pushed} onto a thread local Coordination stack, this Coordination is not removed from the stack. The creator of this Coordination must still call {@link #end()} on this Coordination to cause it to be removed from the thread local Coordination stack.
This is causing issues for subsequent calls to jpa service because the coordination is not removed from the stack.
The method postCallWithException should be implemented like this:
@Override
public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
    LOG.debug("PostCallWithException for bean {}, method {}", cm.getId(), m.getName(), ex);
    if (preCallToken != null) {
        Coordination coordination = (Coordination)preCallToken;
        coordination.fail(ex);
        coordination.end();
    }
}
 
issueID:ARIES-1886
type:Wish
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Globally configurable number of extender threads and grace period timeout
At Seeburger AG we migrated from JBoss to Karaf. We use Aries modules for transaction capable beans. Since the migration, the number of blueprint bundles increased and we started to get errors of this kind:
org.apache.aries.blueprint.container.BlueprintContainerImpl  JB2688  Blueprint Extender: 1  B6AIO1@b6aio1bd4ef  ERROR          Unable to start blueprint container for bundle com.seeburger.portal.backend/2.55.0 due to unresolved dependencies [(objectClass=javax.transaction.TransactionSynchronizationRegistry)]
@LGW800 2018-07-04T12:01:36.637+0200
So we tried to increase the number of extender threads and grace period timeout in our blueprint fork to fix it. We introduced this in our master branch in July 2018 and it increased the stability of our software. This is why we want to propose this change also to be done in aries, which can be reviewed in PR91
issueID:ARIES-1888
type:Bug
changed files:
texts:JAX-RS Whiteboard is not passing the CT

issueID:ARIES-1889
type:Improvement
changed files:
texts:register the servlet context listener in async fashion
Fixed in https://svn.apache.org/repos/asf/aries/trunk@1853232 (I forgot to create a JIRA for the issue post first release.)
issueID:ARIES-189
type:Bug
changed files:
texts:Temporarily revert the JPA container for the Aries 0.1 Release
In the Aries release we cannot depend on the OpenJPA 2.0.0 snapshot drivers, only the beta driver. I will temporarily add back support for this release
issueID:ARIES-1890
type:Bug
changed files:
texts:handle scenario where another actor caused the context listener to fire it's contextDestroyed event

issueID:ARIES-1891
type:Bug
changed files:
texts:Memory Leak in aries-jpa-support
The fix for ARIES-1783 has a memory leak. The method org.apache.aries.jpa.supplier.EmSupplier.get() is called every time when a method on EntityManager is called. And every time a ServiceReference to a TransactionManager gets created. But it doesn't get deleted. So we have as many ServiceReferences in the memory as calls on EntityManager.
issueID:ARIES-1892
type:Bug
changed files:
texts:CxfJaxRSServiceRegistrator might NPE when CXF returns a ClassResourceInfo withh null ResourceProvider

issueID:ARIES-1893
type:Bug
changed files:
texts:JSX-RS whiteboard is not filling RuntimeDTO.serviceDTO

issueID:ARIES-1895
type:Test
changed files:
texts:Add tests for OpenJPA 3.0
Apache OpenJPA has released version 3.0 with JPA 2.1 support - we should include this version in our integration tests to prove that we work properly with this new major version.
issueID:ARIES-1896
type:Test
changed files:
texts:Provide integration tests for the Transaction Control Service implementations

issueID:ARIES-1897
type:Improvement
changed files:
texts:Update to HikariCP 3.3.0
The Resource Providers for JDBC and JPA embed HikariCP for database connection pooling. We should update to the latest released version of this library.
issueID:ARIES-1898
type:Improvement
changed files:
texts:Update to bnd 4.1.0
Update to bnd 4.1.0 which adds support for R7 bundle annotations and DS annotations
issueID:ARIES-1899
type:Improvement
changed files:
texts:Unify configurations between the Whiteboard and the integrations
Currently the whiteboard and the integrations use different strategies.
issueID:ARIES-19
type:Task
changed files:
texts:Import servicemix transaction module

issueID:ARIES-190
type:Bug
changed files:
texts:Undo ARIES-189
Once we have released we should undo ARIES-189
issueID:ARIES-1900
type:New Feature
changed files:
texts:Release Transaction Control 1.0.1
Jira issue to track the release of Aries Tx Control 1.0.1
issueID:ARIES-1901
type:Bug
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/ProviderBundleTrackerCustomizer.java
texts:Spi Fly not properly handling multiple providers described in the same descriptor as services

issueID:ARIES-1902
type:Bug
changed files:
texts:CDI does not properly handle BeanPropertyTypes which are marker annotations - Update to converter 1.0.4

issueID:ARIES-1903
type:Bug
changed files:
texts:Cannot create proxy classes from extensions

issueID:ARIES-1904
type:Bug
changed files:
texts:NPE in topology manager activator
I just tried upgrading from 1.11.0 to 1.13.0 and got this NullPointerException (never happened before):
09:59:50.006 [main] DEBUG o.o.p.e.k.c.i.KarafTestContainer - Shutting down the test container (Pax Runner)
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
Exception in org.apache.aries.rsa.topologymanager.Activator.start() of bundle org.apache.aries.rsa.topology-manager.
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1005)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1058)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:994)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
Suppressed: org.osgi.framework.BundleException: Exception in org.apache.aries.rsa.topologymanager.Activator.start() of bundle org.apache.aries.rsa.topology-manager.
at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:800)
at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:729)
at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:933)
at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:309)
at org.eclipse.osgi.container.Module.doStart(Module.java:581)
at org.eclipse.osgi.container.Module.start(Module.java:449)
at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:383)
at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:402)
at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:161)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1149)
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:997)
... 6 more
Caused by: java.lang.NullPointerException
at org.apache.aries.rsa.topologymanager.exporter.ServiceExportsRepository$ExportRegistrationHolder.<init>(ServiceExportsRepository.java:60)
at org.apache.aries.rsa.topologymanager.exporter.ServiceExportsRepository.addService(ServiceExportsRepository.java:99)
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.doExport(TopologyManagerExport.java:170)
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.serviceChanged(TopologyManagerExport.java:99)
at org.apache.aries.rsa.topologymanager.Activator.exportExistingServices(Activator.java:135)
at org.apache.aries.rsa.topologymanager.Activator.doStart(Activator.java:111)
at org.apache.aries.rsa.topologymanager.Activator$1.addingService(Activator.java:74)
at org.apache.aries.rsa.topologymanager.Activator$1.addingService(Activator.java:68)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:318)
at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)
at org.apache.aries.rsa.topologymanager.Activator.start(Activator.java:87)
at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:779)
at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:772)
... 16 more
issueID:ARIES-1905
type:Task
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyUtils.java
texts:aries.proxy:upgrade to asm 7.1 so that can work with JDK12|JDK13

issueID:ARIES-1906
type:Bug
changed files:
texts:Regression - export of superclass interface fails
When exporting a service using an interface that is declared in the service superclass rather than directly by the class, the export fails with the exception stack trace below.
From a quick look it seems like this got broken in the commit for ARIES-1776. The getInterfaces method implementation changed, I'm not sure if it's related to the stated fix but the new implementation changes the behavior - it checks the service getClass().getInterfaces() but does not traverse the superclasses as well. Also, it silently ignores interfaces that are not found rather than throwing the declared ClassNotFoundException. Also it only checks the service interfaces whereas the previous implementation loaded the interface classes regardless (this may be an improvement, dunno). Also the order of returned interfaces changed, which is significant as the line where the exception below is thrown shows. There may be other differences I didn't think of... unfortunately there are no tests to catch any of these.
  java.lang.ArrayIndexOutOfBoundsException: 0
at org.apache.cxf.dosgi.dsw.handlers.ws.WsProvider.exportService(WsProvider.java:164) ~[?:?]
at org.apache.aries.rsa.core.RemoteServiceAdminCore$3.run(RemoteServiceAdminCore.java:236) ~[?:?]
at org.apache.aries.rsa.core.RemoteServiceAdminCore$3.run(RemoteServiceAdminCore.java:234) ~[?:?]
at java.security.AccessController.doPrivileged(Native Method) ~[?:?]
at org.apache.aries.rsa.core.RemoteServiceAdminCore.exportService(RemoteServiceAdminCore.java:234) ~[?:?]
at org.apache.aries.rsa.core.RemoteServiceAdminCore.exportService(RemoteServiceAdminCore.java:135) ~[?:?]
at org.apache.aries.rsa.core.RemoteServiceAdminInstance.exportService(RemoteServiceAdminInstance.java:55) ~[?:?]
at org.apache.aries.rsa.core.RemoteServiceAdminInstance.exportService(RemoteServiceAdminInstance.java:39) ~[?:?]
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.exportService(TopologyManagerExport.java:186) [145:org.apache.aries.rsa.topology-manager:1.14.0.SNAPSHOT]
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.doExport(TopologyManagerExport.java:169) [145:org.apache.aries.rsa.topology-manager:1.14.0.SNAPSHOT]
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport.access$000(TopologyManagerExport.java:58) [145:org.apache.aries.rsa.topology-manager:1.14.0.SNAPSHOT]
at org.apache.aries.rsa.topologymanager.exporter.TopologyManagerExport$1.run(TopologyManagerExport.java:152) [145:org.apache.aries.rsa.topology-manager:1.14.0.SNAPSHOT]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:?]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:?]
at java.lang.Thread.run(Thread.java:748) [?:?]
 
issueID:ARIES-1907
type:Bug
changed files:
texts:IllegalStateException when stopping bundle
Happened during the automated build on a PR in github - https://github.com/apache/aries-rsa/pull/20#issuecomment-477604538. Here is the stack trace from the build log:
 
ERROR: Bundle org.apache.aries.rsa.core [21] ServiceRegistrationImpl: Error ungetting service. (java.lang.IllegalStateException: Invalid BundleContext.)
java.lang.IllegalStateException: Invalid BundleContext.
at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:511)
at org.apache.felix.framework.BundleContextImpl.getBundle(BundleContextImpl.java:114)
at org.apache.aries.rsa.core.RemoteServiceAdminInstance.close(RemoteServiceAdminInstance.java:83)
at org.apache.aries.rsa.core.RemoteServiceadminFactory.ungetService(RemoteServiceadminFactory.java:49)
at org.apache.aries.rsa.core.RemoteServiceadminFactory.ungetService(RemoteServiceadminFactory.java:28)
at org.apache.felix.framework.ServiceRegistrationImpl.ungetFactoryUnchecked(ServiceRegistrationImpl.java:388)
at org.apache.felix.framework.ServiceRegistrationImpl.ungetService(ServiceRegistrationImpl.java:286)
at org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:470)
at org.apache.felix.framework.ServiceRegistry.ungetServices(ServiceRegistry.java:529)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2638)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1389)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)
at java.lang.Thread.run(Thread.java:748)
issueID:ARIES-1908
type:Task
changed files:
texts:aries.spi-fly:upgrade to asm 7.1 so that can work with JDK12|JDK13

issueID:ARIES-191
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
texts:Improvements to VersionRange and ManifestHeaderProcessor
It would be useful to have a method on VersionRange which produces the intersection between itself and another VersionRange. The patch includes this method, updates to how equals() and hashCode() work to support this function, and new unit tests for the intersect() method.
The ManifestHeaderProcessor should handle the objectClass attribute as a special case when generating filters. It should produce a filter element for each interface in the comma-separated list of interfaces.
It would also be convenient to be able to pass through nested verbatim filter text to the filter generation code. This is done in the attached patch using a org.apache.aries.application.filter.attribute attribute. The ManifestHeaderProcessor checks for this attribute and inserts the value into the generated filter string verbatim.
issueID:ARIES-1910
type:Bug
changed files:
texts:Aries CDI does not properly handle security checks

issueID:ARIES-1912
type:Bug
changed files:
texts:aries-jaxrs-whiteboard 1.0.4 registers ServletContextHelper with context.path=/
We have been using aries-jaxrs-whiteboard to run our REST api along with paxweb-extender-whiteboard for sometimes. Recently we upgraded aries-jaxrs-whiteboard from version 1.0.1 to 1.0.4 and noticed that some of our Servlets/ServletFilters are not working anymore. Digging into paxweb servlet registration process I found the new aries-jaxrs-whiteboard registers a cxf-servlet with url pattern /* which makes this servlet a default handler.
Screenshots attached here show the different between aries-jaxrs-whiteboard 1.0.1 and 1.0.4 in terms of ServletContextHelper and Servlet registration.
issueID:ARIES-1913
type:Bug
changed files:
texts:Exception event properties are incorrect
The "exception.class" event property value is set to the Class instance instead of the class name string, and is then overwritten by the exception message (which should have been in a property named "exception.message").
issueID:ARIES-1914
type:Bug
changed files:
texts:Extensions that depend on other extensions leave uncleaned state
Extensions depending on other extensions can only be resolved in the context of an application. Meaning that, if an extension depends on other extensions it might be resolved for one application but not in other application. However this information can not be conveyed properly with the current structure of the DTOs and the internal structures are also not being properly cleared.
issueID:ARIES-1916
type:Bug
changed files:
texts:ResourceContext api returns instances that are not handled by OSGi
When using ResourceContext JAX-RS API the instances returned are not handled by the whiteboard, but created by CXF directly. This is wrong because it does not respect the lifecycle of the resources and also skips injection of dependencies.
issueID:ARIES-1917
type:Bug
changed files:
texts:Sources for dynamic.framework.extension are not complete

issueID:ARIES-1918
type:Bug
changed files:
texts:Move felix framework dependency from runtime to test

issueID:ARIES-192
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:Convert bundles before generating the application content
We currently convert by value artefacts after generating the Application-Content which means we will not pull in converted artefacts when no Application-Content is provided.
issueID:ARIES-1922
type:Bug
changed files:
texts:Effects is not properly handling exceptions that might happen in the {{onAddedAfter}} event handler
in an Effects node, if an error is produced down the chain, there is nothing to undo because the chain did not return a closing handler. However, if the error is produced in the onAddingAfter event, the closing handler needs to be invoked and the exception rethrown.
issueID:ARIES-1923
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassHierarchyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/SyntheticSerialVerUIDAdder.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassVisitor.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/synthesizer/Synthesizer.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/MethodCopyingClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/ConstructorFinder.java
texts:aries-proxy fails when presented with Java 11 classes with nested classes
2019-09-02T21:55:44,997 | INFO  | Blueprint Extender: 2 | ServiceRecipe                    | 19 - org.apache.aries.blueprint.core - 1.10.1 | Unable to create a proxy object for the service .component-6 defined in bundle org.opendaylight.
mdsal.dom-broker/5.0.0.SNAPSHOT with id. Returning the original object instead.
java.lang.UnsupportedOperationException: This feature requires ASM7
        at org.objectweb.asm.ClassVisitor.visitNestMember(ClassVisitor.java:236) ~[?:?]
        at org.objectweb.asm.ClassReader.accept(ClassReader.java:651) ~[?:?]
        at org.objectweb.asm.ClassReader.accept(ClassReader.java:391) ~[?:?]
        at org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.readClass(AbstractWovenProxyAdapter.java:696) ~[?:?]
        at org.apache.aries.proxy.impl.interfaces.InterfaceCombiningClassAdapter.generateBytes(InterfaceCombiningClassAdapter.java:117) ~[?:?]
        at org.apache.aries.proxy.impl.interfaces.ProxyClassLoader.createProxyClass(ProxyClassLoader.java:163) ~[?:?]
        at org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator.getProxyInstance(InterfaceProxyGenerator.java:97) ~[?:?]
        at org.apache.aries.proxy.impl.AsmProxyManager.createNewProxy(AsmProxyManager.java:80) ~[?:?]
        at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:77) ~[?:?]
        at org.apache.aries.proxy.impl.AbstractProxyManager.createInterceptingProxy(AbstractProxyManager.java:55) ~[?:?]
        at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:568) [19:org.apache.aries.blueprint.core:1.10.1]
        at org.eclipse.osgi.internal.serviceregistry.ServiceFactoryUse$1.run(ServiceFactoryUse.java:212) [?:?]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceFactoryUse.factoryGetService(ServiceFactoryUse.java:210) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceFactoryUse.getService(ServiceFactoryUse.java:111) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceConsumer$2.getService(ServiceConsumer.java:45) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:508) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:461) [?:?]
        at org.eclipse.osgi.internal.framework.BundleContextImpl.getService(BundleContextImpl.java:624) [?:?]
        at org.opendaylight.mdsal.binding.dom.adapter.osgi.AdaptingTracker.addingService(AdaptingTracker.java:61) [168:org.opendaylight.mdsal.binding-dom-adapter:5.0.0.SNAPSHOT]
        at org.opendaylight.mdsal.binding.dom.adapter.osgi.AdaptingTracker.addingService(AdaptingTracker.java:29) [168:org.opendaylight.mdsal.binding-dom-adapter:5.0.0.SNAPSHOT]
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941) [?:?]
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870) [?:?]
        at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256) [?:?]
        at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229) [?:?]
        at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:109) [?:?]
        at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:920) [?:?]
        at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) [?:?]
        at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:862) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:801) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:127) [?:?]
        at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:225) [?:?]
        at org.eclipse.osgi.internal.framework.BundleContextImpl.registerService(BundleContextImpl.java:469) [?:?]
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:476) [19:org.apache.aries.blueprint.core:1.10.1]
        at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:193) [19:org.apache.aries.blueprint.core:1.10.1]
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:739) [19:org.apache.aries.blueprint.core:1.10.1]
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:415) [19:org.apache.aries.blueprint.core:1.10.1]
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [19:org.apache.aries.blueprint.core:1.10.1]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
        at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
        at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106) [19:org.apache.aries.blueprint.core:1.10.1]
        at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:45) [19:org.apache.aries.blueprint.core:1.10.1]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
        at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) [?:?]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
        at java.lang.Thread.run(Thread.java:834) [?:?]
This does not happen if the same class is compiled with --release 10 or lower.
 
issueID:ARIES-1926
type:Bug
changed files:
texts:UpdateSupport is changing effects execution order
When running as a result of an update operation, nodes with update support where reorganizing the effects because the termination was deferred but not the following adding event. This caused publication of the new event to happen before the termination of the previous event.
issueID:ARIES-1927
type:Bug
changed files:
texts:Applications registered with higher ranking should shadow other applications even if their extensions dependencies are not met
According to the spec any registered application with a higher ranking should shadow other applications even when the shadowing applications does not have its extension dependencies fulfilled.
issueID:ARIES-1928
type:Bug
changed files:
texts:Applications depending on failing extensions should be held undeployed
If application depends on a extensions that fails when it is wired to the application, the application should be held.
issueID:ARIES-1929
type:Improvement
changed files:
texts:Performance optimization
Currently the deployment of one application involves a redeployment of the whole application per service that conforms the application. That means that, if an application is composed of 20 services it will be rewired 20 times even if all the services are present when the application is registered.
This should not be necessary and an optimization can be made for the best case, being that all the services are present at the moment of the application registration so one rewire should be made.
issueID:ARIES-193
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
texts:BundleState issues NPE when there are no bundles int
when running the listBundles method of the BundleStateMBean, if the BundleContext that the MBean is associated with has no bundles listed, the underlying BundleState.listBundles() throws a NullPointerException.
issueID:ARIES-1930
type:Bug
changed files:
texts:Inconsistent error handling
Currenlty unhandled errors happening during execution are not handled properly by composite nodes, such as , or
They are correctly bubbling up the exceptions but they are not properly closing other executed program nodes, which might lead to unbalanced effects.
issueID:ARIES-1934
type:Improvement
changed files:spi-fly/spi-fly-static-tool/src/main/java/org/apache/aries/spifly/statictool/Main.java
util/src/main/java/org/apache/aries/util/io/IOUtils.java
texts:Make sure jar/zip files are jailed to the destination directory

issueID:ARIES-1935
type:Bug
changed files:
texts:Aries JAXRS whiteboard features xml deployed incorrectly (or at least confusingly).
I wanted to try out the aries jaxrs whiteboard and so I added the features,xml to my pom so it would get added to my project features.xml like this:
<dependency>
<groupId>org.apache.aries.jax.rs</groupId>
<artifactId>org.apache.aries.jax.rs.features</artifactId>
<version>1.0.6</version>
<classifier>features</classifier>
<type>xml</type>
</dependency>
But maven couldn't find it.  I also tried loading it via karaf using: mvn:org.apache.aries.jax.rs/org.apache.aries.jax.rs.features/1.0.6/xml/features but that won't resolve either despite it being in central here: https://repo1.maven.org/maven2/org/apache/aries/jax/rs/org.apache.aries.jax.rs.features/1.0.6/
I looked at the Karaf examples and noticed that the features xml is being deployed without the features classifier on it, which is very confusing.  Will this be corrected or is it going to stay like that since that's how it ended up being deployed?
issueID:ARIES-1936
type:Improvement
changed files:
texts:Switch zookeeper starter to DS and mockito

issueID:ARIES-1937
type:Improvement
changed files:
texts:Require Java 8

issueID:ARIES-194
type:Bug
changed files:
texts:AriesTrader - Primitive PingJspEL currently fails based upon ariestrader changes from DayTrader

issueID:ARIES-1940
type:Bug
changed files:
texts:Failure during service export is not properly handled by RemoteServiceAdminCore
When a DistributionProvider throws an Exception from the DistributionProvider.exportService() method, the RemoteServiceAdminCore detects this properly and keeps track of this failure by creating a ExportRegistration instance that references the thrown Exception.
The specification mandates that if a service export failed, the ExportRegistration should provide access to the thrown Exception (which the current implementation does) and that the ExportReference of the ExportRegistration should throw an IllegalStateException.
The current implementation of RemoteServiceAdminCore handles this in an inconsistent way:
The ExportRegistration.getExportReference() returns null rather then throwing the IllegalStateException
The use of ExportRegistration assumes that there always is an ExportReference instance. This assumption is wrong in cases that the export failed.
The latter triggers exceptions such as as the one below; typically triggered by an event unrelated to the export service failure:
java.lang.NullPointerException
                at org.apache.aries.rsa.core.RemoteServiceAdminCore.removeServiceExports(RemoteServiceAdminCore.java:505)
                at org.apache.aries.rsa.core.RemoteServiceAdminCore$2.serviceChanged(RemoteServiceAdminCore.java:104)
                at org.apache.felix.framework.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:990)
                at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:838)
                at org.apache.felix.framework.EventDispatcher.fireServiceEvent(EventDispatcher.java:545)
                at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4833)
                at org.apache.felix.framework.Felix.access$000(Felix.java:112)
                at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:434)
                at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:170)
                at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:145)
                ...
issueID:ARIES-1941
type:Bug
changed files:
texts:Thread unsafe iteration of thread-safe MultiMap by TopologyManagerImport
The TopologyMangerImport class uses the MultiMap (Map<String, Set<T>>). The operations on the MultiMap itself are thread safe (by means of synchronised keyword), however in some cases the Set<T> value is obtained and iterated over, without holding the right mutex. As a result you may see ConcurrentModificationExceptions.
issueID:ARIES-1942
type:Improvement
changed files:
texts:Use annotation based bundle config

issueID:ARIES-195
type:Bug
changed files:
texts:AriesTrader - configuration option "Publish quote price changes to a JMS topic" should be disabled

issueID:ARIES-196
type:Bug
changed files:application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextManagerImpl.java
texts:Make ApplicationContextManagerImpl fully stateless
As identified by Guillaume the current ApplicationContextManagerImpl looses its state after a restart, but the bundles it installed are left in the framework meaning that we cannot reinstall the application after a restart. aims to make the ApplicationContextManagerImpl store its state for a restart, but that looks like it will be a bit of work to get right. In order to fix the issue for the release we should uninstall the bundles on shutdown to provide a proper stateless (not half stateless) runtime.
issueID:ARIES-197
type:Improvement
changed files:
texts:Fix the Export-Service / Import-Service headers

issueID:ARIES-198
type:Bug
changed files:
texts:blog.eba artifact is not being installed into the local repo
Mistakes in the use of build-helper-maven-plugin configuration
issueID:ARIES-199
type:Improvement
changed files:samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/AuthorImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/BlogPersistenceServiceImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/EntryImpl.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/EntryImpl.java
texts:Add JPA oersistence layer to the blog sample

issueID:ARIES-2
type:Task
changed files:
texts:Change groupId / artifactId to org.apache.aries

issueID:ARIES-20
type:Task
changed files:
texts:Update poms to include the transaction component in the build and use correct version / parent etc...

issueID:ARIES-200
type:Improvement
changed files:
texts:AriesTrader - deploy application as EBA rather than individual bundles in Equinox Assemblies

issueID:ARIES-201
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/ServiceUtilities.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TimerStat.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2ServletRcv.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServletWriter.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/MDBStats.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/ExplicitGC.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Servlet.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2IncludeRcv.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/KeyBlock.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServiceUtilities.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Jsp.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
texts:AriesTrader - move AriesTrader under samples

issueID:ARIES-202
type:Improvement
changed files:
texts:Separate the blueprint integration from the container context management
Currently the org.apache.aries.jpa.container.context bundle does blueprint integration as well as managed context support. This should be split apart to make it easier to integrate other injection methods (for example the blueprint RI).
issueID:ARIES-203
type:Improvement
changed files:
texts:AriesTrader - Eliminate duplicate equinox assemblies and create a common test harness for AriesTrader to use

issueID:ARIES-204
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
texts:blueprint-cm property placeholder parser bug
I'm using servicemix 4.2 that uses the geronimo blueprint implementation (http://geronimo.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0) . I have a blueprint xml config file that use "blueprint-cm" to read a properties file and pass them to the beans. It seem there is a bug with parsing the properties placehodler.
For example the property placeholder
${ldap.server.host}:${ldap.server.port} is parsed as
"ldap.server.host}:${ldap.server.port" one property instead of two
differnet properties.
Exception in servicemix (fuse) 4.2
16:29:53,402 | DEBUG | pool-2-thread-1 |
PropertyPlaceholder | lueprint.ext.PropertyPlaceholder 138
Property ldap.server.host}:${ldap.server.port not found
Complete blueprint file :
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
xmlns:jaas="http://felix.apache.org/karaf/xmlns/jaas/v1.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:cm="http://geronimo.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
xmlns:ext="http://geronimo.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"
>
<type-converters>
<bean
class="org.apache.felix.karaf.jaas.modules.properties.PropertiesConverter"
/>
</type-converters>
<!-- Reads properties in $FUSE_HOME/etc/nnew_security.cfg if exist.
If not provides the defaults. -->
<cm:property-placeholder persistent-id="nnew_security">
<cm:default-properties>
<cm:property name="nnew_security_realm" value="nnew"/>
<!-- Port number where LDAP server runs. Ex. 389 -->
<cm:property name="ldap.server.port"
value="DEFINED_IN_nnew_security.cfg"/>
<!-- Host name or IP address where the LDAP server runs -->
<cm:property name="ldap.server.host"
value="localhost"/> <!-- The DN of the user that opens the
connection to the directory server. For example, cn=nnewServices,ou=Admin,dc
=nnew,dc=com. -->
<cm:property name="ldap.connectionUsername" value=""/>
<!-- The password that matches the DN from
connectionUsername. In the directory server, in the DIT, the
password is normally stored as a userPassword attribute
in the corresponding directory entry. -->
<cm:property name="ldap.connectionPassword" value=""/>
<!-- Currently, the only supported value is a blank string.
In future, this option will allow you to select the
Secure Socket Layer (SSL) for the connection to the
directory server. -->
<cm:property name="ldap.connectionProtocol" value=""/>
<!-- Selects a particular subtree of the DIT to search for
user entries. The subtree is specified by a DN,
which specifes the base node of the subtree. For
example, ou=User,ou=WebCoverageService,ou=services,dc=nnew,dc=com -->
<cm:property name="ldap.constraint.userBase"
value="DEFINED_IN_nnew_security.cfg"/>
<!-- Specify the search depth for user entries, relative to
the node specified by userBase -->
<cm:property name="ldap.constraint.userSearchSubtree"
value="nnew"/>
<cm:property name="nnew_security_realm" value="false"/>
<!-- Specifies an LDAP search filter, which is applied to the
subtree selected by userBase. For example, (uid=
{0}
)
-->
<cm:property name="ldap.filter.userSearchMatching"
value="DEFINED_IN_nnew_security.cfg"/>
<!-- specifies the name of the multi-valued attribute of the
user entry that contains a list of role names for the
user
. If you omit this option, no role names are extracted
from the user entry. -->
<cm:property name="ldap.filter.userRoleName" value=""/>
<!-- you want to store role data directly in the directory
server, you can use a combination of role options
(roleBase, roleSearchMatching, roleSearchSubtree, and
roleName) as an alternative to (or in addition to) spec
ifying the
userRoleName option. For example,
ou=Group,ou=WebCoverageService,ou=services,dc=nnew,dc=com -->
<cm:property name="ldap.constraint.roleBase"
value="DEFINED_IN_nnew_security.cfg"/>
<!-- Specify the search depth for role entries, relative to
the node specified by roleBase -->
<cm:property name="ldap.constraint.roleSearchSubtree"
value="nnew"/>
<!-- Specifies the name of the multi-valued attribute of the
role entry that contains a list of role names for the
current user.
If you omit this option, the role search feature is
effectively disabled. For example, cn -->
<cm:property name="ldap.filter.roleName"
value="DEFINED_IN_nnew_security.cfg"/>
<!-- Specifies an LDAP search filter, which is applied to the
subtree selected by roleBase. For example, (member=ui
d=
{1}
) -->
<cm:property name="ldap.filter.roleSearchMatching"
value="DEFINED_IN_nnew_security.cfg"/>
</cm:default-properties>
</cm:property-placeholder>
<jaas:config name="nnew" rank="1">
<!-- Each realm can contain one or more module definition. Each
module identify a LoginModule and
the "className" attribute must be set to the class name of
the login module to use. Note that
this login module must be available from the bundle
classloader -->
<!-- The "flags" attribute controls the overall behavior as
authentication proceeds down the stack.
The following represents a description of the valid values
for Flag and their respective semantics:
1) required - The LoginModule is required to succeed.
If it succeeds or fails, authentication still
continue to proceed down the LoginModule list.
2) requisite - The LoginModule is required to succeed.
If it succeeds, authentication continues down
the LoginModule list. If it fails, control immediately returns to the
application
(authentication does not proceed down the
LoginModule list).
3) sufficient - The LoginModule is not required to succeed.
If it does succeed, control immediately returns to the
application (authentication does not proceed down the LoginModule list).
If it fails, authentication continues down
the LoginModule list.
4) optional - The LoginModule is not required to succeed.
If it succeeds or fails, authentication still continues
to proceed down the LoginModule list. -->
<jaas:module
className="edu.ucar.ral.security.jaas.login.LDAPLoginModule"
flags="required">
<!-- For more info about module configuration :
http://fusesource.com/docs/broker/5.3/security/Auth-JAAS-LDAPAuthentPlugin.html
-->
<!-- List of properties key=value to pass to the login
module as a Map -->
debug=false
initialContextFactory=com.sun.jndi.ldap.LdapCtxFactory
connectionURL=ldap://${ldap.server.host}:${ldap.server.port}
connectionUsername=${ldap.connectionUsername}
connectionPassword=${ldap.connectionPassword}
connectionProtocol=s
authentication=simple
userBase=${ldap.constraint.userBase}
userSearchMatching=${ldap.filter.userSearchMatching}
userRoleName=${ldap.filter.userRoleName}
userSearchSubtree=${ldap.constraint.userSearchSubtree}
roleBase=${ldap.constraint.roleBase}
roleName=${ldap.filter.roleName}
roleSearchMatching=${ldap.filter.roleSearchMatching}
roleSearchSubtree=${ldap.constraint.roleSearchSubtree}
</jaas:module>
</jaas:config>
</blueprint>
issueID:ARIES-205
type:Bug
changed files:jmx/jmx-api/src/main/java/org/osgi/jmx/framework/ServiceStateMBean.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceData.java
texts:ServiceStateMBean handling of properties
In the latest API docs, the SERVICE_TYPE specifies four items
The Composite Type for a CompositeData representing a service. This type consists of:
BUNDLE_IDENTIFIER
IDENTIFIER
OBJECT_CLASS
USING_BUNDLES
https://www.osgi.org/members/build/build-clean-dir/osgi.companion/generated/javadoc/org/osgi/jmx/framework/ServiceStateMBean.html#SERVICE_TYPE
The Aries implementation adds PROPERTIES as well.
Although I agree with having the service properties in SERVICE_TYPE it currently represents an incompatibility with the spec.
issueID:ARIES-206
type:Bug
changed files:
texts:Spurious error messages on shutdown
I see a lot spurious error messages on the console due to the framework shutting down and the LogService not being available any more.
Running org.jboss.test.osgi.fragments.FragmentTestCase
file:/home/tdiesler/svn/jboss-osgi/trunk/testsuite/functional/target/test-libs/bundles/org.apache.aries.jmx.jar:2 Task rejected for JMX Notification dispatch of event [org.osgi.framework.BundleEvent[source=simple-fragA [6]]] - Dispatcher may have been shutdown
file:/home/tdiesler/svn/jboss-osgi/trunk/testsuite/functional/target/test-libs/bundles/org.apache.aries.jmx.jar:3 Unregistering org.osgi.jmx.framework.FrameworkMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@2d189c with name osgi.core:type=framework,version=1.5
file:/home/tdiesler/svn/jboss-osgi/trunk/testsuite/functional/target/test-libs/bundles/org.apache.aries.jmx.jar:3 Unregistering org.osgi.jmx.framework.BundleStateMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@2d189c with name osgi.core:type=bundleState,version=1.5
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.655 sec
I suggest we only log messages to System.err when the JMX bundle is active or if there is an Exception to log
private void syslog(int level, String message, Throwable exception)
{
if (bundle.getState() == Bundle.ACTIVE || exception != null)
{ System.err.println("[" + bundleLocation + ":" + +level + "] " + message + ((exception == null) ? " " : exception.toString())); }
}
issueID:ARIES-207
type:Bug
changed files:application/application-install/src/main/java/org/apache/aries/application/install/EBAInstaller.java
texts:The FileInstall plugin for eba's takes a copy of the eba.
The FileInstall plugins for EBA's calls the createApplication method that takes a URL. FileInstall gives it a java.io.File which it converts to a URL.
The method that takes a URL takes a copy of the application from the provided location, so instead we should call the IDirectory varient.
issueID:ARIES-208
type:Improvement
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
texts:Url handler and signed war files
The url handler must remove signature files and remove digest attributes from manifest of the source war file during the conversion. Otherwise, the signature validation would fail.
issueID:ARIES-209
type:Improvement
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Fix deprecation warning from mojo extractor running against eba-maven-plugin
Fix this warning from the eba-maven-plugin module:
[INFO] Building Aries EBA Maven Plugin
[INFO] task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [enforcer:enforce
{execution: default}
]
[INFO] [plugin:descriptor]
[INFO] Using 'UTF-8' encoding to read mojo metadata.
[INFO] Applying mojo extractor for language: java
[WARNING] org.apache.aries.plugin.eba.EbaMojo#zipArchiver:
[WARNING] The syntax
[WARNING] @parameter expression="${component.<role>#<roleHint>}"
[WARNING] is deprecated, please use
[WARNING] @component role="<role>" roleHint="<roleHint>"
[WARNING] instead.
issueID:ARIES-21
type:Task
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/AriesPlatformTransactionManager.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
texts:Refactor package names

issueID:ARIES-210
type:Bug
changed files:
texts:Incorrect groupId in eba-maven-plug components.xml
The components.xml for eba-maven-plugin refers to its old group id but the plugin itself is in a different groupid. This line:
<package>org.apache.aries.application:eba-maven-plugin:eba</package>
Should be :
<package>org.apache.aries:eba-maven-plugin:eba</package>
issueID:ARIES-211
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:JdkProxyFactory does not unwrap InvocationTargetExceptions
The JdkProxyFactory in blueprint does not unwrap InvocationTargetExceptions. As a result the following was seen while writing an AriesApplicationResolver itest.
A ResolverException was thrown by the resolve. This resulted in the JdkProxyFactory throwing an InvocationTargetException. The JDK proxy support on my JVM (mac jvm) rethrew this as an UndeclaredThrowableException, so the catch ResolverException in the test failed, as did the test.
issueID:ARIES-212
type:Improvement
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Add application manifest generation to eba-maven-plugin
Add application manifest generation to eba-maven-plugin. This should generation application manifest entries based on maven project configuration.
issueID:ARIES-213
type:Improvement
changed files:
texts:Update the OBRAriesResolver to use OBR post 1.4.3 (maybe 2.0.0)
The latest snapshot releases of OBR have lots of improvements to performance, and to the way resolution is handled. We need to update the OBRAriesResolver to exploit them.
Note we can't do the features are released as using them now would prevent us doing a release of Aries.
issueID:ARIES-214
type:Improvement
changed files:
texts:Separate out blog sample eba creation
Blog sample eba is currently built in blog-assembly, which also builds a sample platform. We need to:
1. Create a new project for building the eba, that uses the new eba-maven-plugin
2. Remove the current eba creation from blog-assembly.
issueID:ARIES-215
type:Improvement
changed files:
texts:AriesTrader - Leverage the eba-maven-plugin to build EBAs for AriesTrader

issueID:ARIES-216
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java
texts:Update FrameworkMBean API method names
FrameworkMBean API methods installBundle, installBundles, updateBundle and updatedBundles all with url or urls argument must be changed to xxxFromURL.
issueID:ARIES-217
type:Improvement
changed files:
texts:Relax OSGI frameworks import version in org.apache.aries.application bundles
The org.apache.aries.application.api and org.apache.aries.application.utils bundles import the org.osgi.framework package at the project default, which is [1.5, 2.0). This limits the ability to re-use these very useful bundles in environments which don't have the 1.5 level of org.osgi.framework.
A patch is attached which relaxes the version requiremements for these two bundles.
issueID:ARIES-218
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/PackageStateMBean.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
texts:Update PackageStateMBean method getExportingBundle to getExportingBundles
Update PackageStateMBean method getExportingBundle to getExportingBundles.
issueID:ARIES-22
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
texts:Incorrectly returning a NamingEnumeration for list and listBindings on osgi:services namespace
When calling list or listBindings for objects in the osgi URL scheme the implementation incorrectly returns a NamingEnumeration that describes services. They should only do this when the equivilent lookup would return a Context. Since the osgi namespace never returns a context this is incorrect behaviour.
This issue will remove the incorrect support.
issueID:ARIES-220
type:Improvement
changed files:
texts:Use eba-maven-plugin to generate app manifest in blog-eba
We should use the eba-maven-plugin to generate an application manifest into the blog-eba. This will demonstrate how the pom information can be re-used to produce application manifests.
issueID:ARIES-221
type:Bug
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/NamespaceHandler.java
texts:Interceptors can get lost in the interactions between multiple namespace handlers
In a blueprint element like the following one taken from the blog sample
<bean id="persistenceImpl"
class="org.apache.aries.samples.blog.persistence.BlogPersistenceServiceImpl">
<tx:transaction method="*" value="Required" />
<jpa:context property="entityManager" unitname="blogExample" />
</bean>
two namespace handlers must interact sensibly to achieve the desired result.
Currently however there is a prolem. The transaction namespace handler registers interceptors against the bean metadata instance handed to it. The jpa namespace handler on the other hand decorates the bean metadata instance and returns a new one (without any interceptors). Hence, the result bean has no transactions. (Behaviour varies depending on the order of invocation).
issueID:ARIES-222
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:Service reference cglib proxy factory does not handle multiple concrete classes correctly
The current implementation of AbstractServiceReference.CgLibProxyFactory will fall over when presented with a valid set of inputs like
{AbstractList, ArrayList}
.
issueID:ARIES-223
type:Improvement
changed files:
texts:Create eba for blog sample using jpa persistence
Blog-eba creates an eba for the sample using jdbc. We need an equivalent for blog using jpa - e.g. blog-jpa-eba
issueID:ARIES-224
type:Bug
changed files:
texts:Make blog jpa persistence bundle symbolic name different from jdbc
The jpa and jdbc blog persistence bundles are logically different but have the same symbolic name. The names should be different.
issueID:ARIES-225
type:Bug
changed files:samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntry.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewAuthor.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogListAdapter.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/AuthorImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/BlogPersistenceService.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddCommentForm.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntry.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/FormServlet.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogCommentManager.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Author.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthorManager.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/Blog.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/JNDIHelper.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/AuthorImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Entry.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogEntryImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BloggingService.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogListIterator.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogCommentImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthor.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorManagerImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewBlog.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogCommentManagerImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/BlogCommentService.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/BlogPersistenceServiceImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogComment.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntryForm.java
samples/blueprint/helloworld/helloworld-api/src/main/java/org/apache/aries/samples/blueprint/helloworld/api/HelloWorldService.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogEntryManagerImpl.java
samples/blueprint/helloworld/helloworld-client/src/main/java/org/apache/aries/samples/blueprint/helloworld/client/HelloWorldClient.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/AddComment.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/BlogPersistenceServiceImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/EntryImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/Comment.java
samples/blueprint/helloworld/helloworld-server/src/main/java/org/apache/aries/samples/blueprint/helloworld/server/HelloWorldServiceImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BloggingServiceImpl.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/EntryImpl.java
texts:Clean up the blog and hw samples ready for realease
These artifacts to have groupId: org.apache.aries.samples.blog:
blog-0.1-incubating.jar (TODO: this isn't an 'uber' bundle so doesn't
follow the pattern the blueprint 'uber' bundle has set. I'd like
consistency so I propose renaming to blog-biz. So call this
org.apache.aries.blog.biz...)
artifactId: org.apache.aries.samples.blog.biz
blog-api-0.1-incubating.jar (TODO: change to
org.apache.aries.samples.blog.api...)
artifactId: org.apache.aries.samples.blog.api
blog-datasource-0.1-incubating.jar
artifactId: org.apache.aries.samples.blog.datasource
blog-persistence-0.1-incubating.jar (TODO: since we now have two
persistence impls we should change this to
org.apache.aries.samples.blog.persistence.jdbc ...)
artifactId: org.apache.aries.samples.blog.persistence.jdbc
blog-persistence-jpa-0.1-incubating.jar
artifactId: org.apache.aries.samples.blog.persistence.jpa
blog-servlet-0.1-incubating.jar (TODO: to be consistent with the spec
names we should call this 'web' instead of 'servlet' so change this to
org.apache.aries.samples.blog.web ...)
artifactId: org.apache.aries.samples.blog.web
These artifacts to have groupId: org.apache.aries.samples.blueprint.helloworld:
blueprint-helloworld-api-0.1-incubating.jar (TODO: change to
org.apache.aries.samples.blueprint.helloworld.api...)
artifactId: org.apache.aries.samples.blueprint.helloworld.api
blueprint-helloworld-client-0.1-incubating.jar (TODO: change to ...client...)
artifactId: org.apache.aries.samples.blueprint.helloworld.client
blueprint-helloworld-server-0.1-incubating.jar (TODO: change to ...server...)
artifactId: org.apache.aries.samples.blueprint.helloworld.server
issueID:ARIES-226
type:Improvement
changed files:tutorials/blueprint/tutorial-modules/greeter-server-osgi/src/main/java/org/apache/aries/tutorials/blueprint/greeter/server/osgi/GreeterMessageServiceImpl.java
tutorials/blueprint/tutorial-modules/greeter-api/src/main/java/org/apache/aries/tutorials/blueprint/greeter/api/GreeterMessageService.java
tutorials/blueprint/tutorial-modules/greeter-server-blueprint/src/main/java/org/apache/aries/tutorials/blueprint/greeter/server/blueprint/GreeterMessageServiceImpl.java
tutorials/blueprint/tutorial-modules/greeter-client-blueprint/src/main/java/org/apache/aries/tutorials/blueprint/greeter/client/GreeterBlueprintClient.java
tutorials/blueprint/tutorial-modules/greeter-server-osgi/src/main/java/org/apache/aries/tutorials/blueprint/greeter/server/osgi/ServiceRegisteringActivator.java
tutorials/blueprint/tutorial-modules/greeter-client-osgi/src/main/java/org/apache/aries/tutorials/blueprint/greeter/client/osgi/ClientBundleActivator.java
texts:Add the tutorial code and documentation that was used at OSGi DevCon

issueID:ARIES-227
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/Logger.java
texts:JMX Logger sends info to System.err
The JMX Logger sends messages to System.err if the LogService is missing. This causes log messages to be written as errors.
Need to remove the calls to System.err. If the messages are important to the user of the JMX components then the user can provide a LogService implementation.
issueID:ARIES-228
type:Improvement
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Add pom config option for Application-SymbolicName in eba-maven-plugin
Add something like:
<configuration>
<Application-SymbolicName>${pom.artifaceId}</Application-SymbolicName>
</configuration>
issueID:ARIES-229
type:Improvement
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Rename service import/export config options for consistency
<serviceImports> should be <Application-ImportService>
<serviceExports> should be <Application-ExportService>
issueID:ARIES-23
type:Bug
changed files:
texts:integration tests fail on IBM JDK 6
All the integration tests fail on IBM JDK 6 with the following exception:
java.lang.TypeNotPresentException: Type org.ops4j.pax.exam.junit.Configuration not present
at com.ibm.oti.reflect.AnnotationHelper.getAnnotation(AnnotationHelper.java:38)
at com.ibm.oti.reflect.AnnotationHelper.getDeclaredAnnotations(AnnotationHelper.java:50)
at com.ibm.oti.reflect.Method.getDeclaredAnnotations(Method.java:31)
at java.lang.reflect.Method.getDeclaredAnnotations(Method.java:687)
at java.lang.reflect.AccessibleObject.getAnnotations(AccessibleObject.java:186)
at com.ibm.oti.reflect.Method.getAnnotation(Method.java:20)
at java.lang.reflect.Method.getAnnotation(Method.java:677)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.getAnnotatedMethods(CallableTestMethodImpl.java:295)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.runBefores(CallableTestMethodImpl.java:162)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:124)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:101)
This is the same problem as described in FELIX-1728.
issueID:ARIES-230
type:Improvement
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Rename eba-maven-plugin to maven-eba-plugin for consistency
Rename eba-maven-plugin to maven-eba-plugin for consistency
Also need to change any samples that use the current plugin.
issueID:ARIES-231
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:No information available when a blueprint bundle fails to start due to missing namespace handlers

issueID:ARIES-232
type:Improvement
changed files:
texts:Refactor the transaction test datasource component to make it reusable

issueID:ARIES-233
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
texts:JNDI service damping code does not correctly unwrap invocation target exceptions
The JNDIServiceDamper should catch InvocationTargetException and rethrow the target exception. If it doesn't do this then the client gets an UnsupportedThrowableException instead.
issueID:ARIES-234
type:Bug
changed files:util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
texts:Have BundleToClassLoaderAdapter implement BundleReference
The JNDI bundle uses a BundleToClassLoaderAdapter for generating dynamic proxies. This class does not implement BundleReference, if it did you could get the Bundle using FrameworkUtil.
issueID:ARIES-235
type:Bug
changed files:
texts:Incorrect capitalization in blog samples database name
blogDB.sql generates a database called BLOGDB. The JDBC persistence layer tries to use blogDB and fails to find the database.
issueID:ARIES-236
type:Bug
changed files:samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/FormatChecker.java
texts:Blog sample email validation inconsistent
The blog sample doesn't validate email addresses when creating an author so we can create an author with an invalid email address. It does validate the email address for editing the author and therefore once created, it is not possible to edit the author. We should either do consistent validation or remove all validation (depending on how 'real' we want it to be).
issueID:ARIES-237
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
texts:getParent on ClassLoader is a Priviledged operation
Wrap the call to getParent in ServiceHelper.getBundleContext(ClassLoader) in a doPriv
issueID:ARIES-238
type:Improvement
changed files:application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataFactoryImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationContext.java
application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadataFactory.java
application/application-install/src/main/java/org/apache/aries/application/install/EBAInstaller.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationListener.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationEvent.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/runtime/AriesApplicationContextManager.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextManagerImpl.java
texts:Various application API improvements
1) Make API more consistent. Add "Aries" prefix to each Application.java
3) Add methods to DeploymentMetadataFactory for creating DeploymentMetadata directly from InputStream or Manifest object.
4) Update AriesApplicationImpl.store() to save application contents to a directory or a file.
issueID:ARIES-239
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
texts:Improve filter generation in ManifestHeaderProcessor
The filter generation in the ManifestHeaderProcessor should be improved to make filters which are suitable for presentation to OBR. It should also handle ranges in Bundle-Version. This means that, due to the way OBR works, it will include a stanza of the form, (mandatory:<*mandatoryAttribute) Filterstrings generated by this method will therefore tend to break the standard OSGi Filter class. The OBR stanza can be stripped out later if required.
A patch is attached which includes the change.
issueID:ARIES-24
type:Task
changed files:
texts:Add svn:ignores so fresh m2e import to eclipse & build shows no unversioned files
This will make the icons the Subclipse shows to indicate there are outgoing changes, useful again.
issueID:ARIES-240
type:Improvement
changed files:
texts:AriesTrader - Update the AriesTrader groupIDs, artifactIDs, and path structure to be consiste within Apache Aries
./assemblies/ariestrader-all-eba/0.1-incubating/ariestrader-all-eba-0.1-incubating.eba
./assemblies/ariestrader-jdbc-eba/0.1-incubating/ariestrader-jdbc-eba-0.1-incubating.eba
./modules/ariestrader-api/0.1-incubating/ariestrader-api-0.1-incubating.jar
./modules/ariestrader-beans/0.1-incubating/ariestrader-beans-0.1-incubating.jar
./modules/ariestrader-core/0.1-incubating/ariestrader-core-0.1-incubating.jar
./modules/ariestrader-derby-ds/0.1-incubating/ariestrader-derby-ds-0.1-incubating.jar
./modules/ariestrader-entities/0.1-incubating/ariestrader-entities-0.1-incubating.jar
./modules/ariestrader-persist-jdbc/0.1-incubating/ariestrader-persist-jdbc-0.1-incubating.jar
./modules/ariestrader-persist-jpa-am/0.1-incubating/ariestrader-persist-jpa-am-0.1-incubating.jar
./modules/ariestrader-persist-jpa-cm/0.1-incubating/ariestrader-persist-jpa-cm-0.1-incubating.jar
./modules/ariestrader-util/0.1-incubating/ariestrader-util-0.1-incubating.jar
./modules/ariestrader-web/0.1-incubating/ariestrader-web-0.1-incubating.jar
So if we are to follow what I've proposed for the rest instead of:
org/apache/aries/ariestrader/ariestrader-api/0.1-incubating/ariestrader-api-0.1-incubating.jar
we would have:
org/apache/aries/samples/ariestrader/org.apache.aries.samples.ariestrader.api/0.1-incubating/org.apache.aries.samples.ariestrader.api-0.1-incubating.jar
and instead of the BSN in that bundle being
org.apache.aries.ariestrader.modules.ariestrader-api it would be
org.apache.aries.samples.ariestrader.api
and then we would apply that to all the other 'modules'.
With the .eba assemblies, instead of:
org/apache/aries/ariestrader/assemblies/ariestrader-all-eba/0.1-incubating/ariestrader-all-eba-0.1-incubating.eba
we would have:
org/apache/aries/samples/ariestrader/org.apache.aries.samples.ariestrader.all-0.1-incubating.eba
and instead of the BSN in that eba being ariestrader.eba it woul be
org.apache.aries.samples.ariestrader.all ... but I suspect this is the
eba-maven-plugin's fault.
issueID:ARIES-241
type:Bug
changed files:samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
texts:AriesTrader - the DataSource is not enlisted in the transaction created via Declarative Transactions
It seems that the DataSource is not enlisted in the transaction when using Container Managed JPA with declarative transactions in this sample.
issueID:ARIES-242
type:Bug
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
texts:Blueprint parser does not call namespace handlers for custom attributes of the blueprint element
The blueprint parser does not call out to NamespaceHandlers for custom attributes of the blueprint element.
There is already a working method for use in child elements of blueprint that could be used instead.
issueID:ARIES-243
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
texts:PassThroughRecipe should cope with null id
BeanRecipe and other recipes cope with null id properties using the getName() method in RecipeBuilder. PassThroughRecipe should be treated the same
issueID:ARIES-244
type:Bug
changed files:
texts:NPE inside GlobalPersistenceManager when parsing blueprint xml
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0"
xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.0.0">
<bean id="myBean" class="org.acme.MyClass">
<jpa:context property="entityManager" unitname="myPU" />
<tx:transaction method="*" value="Required"/>
</bean>
<service id="myService" ref="myBean" interface="org.acme.MyService" />
</blueprint>
Yields,
Caused by: java.lang.NullPointerException
at org.apache.aries.jpa.container.context.GlobalPersistenceManager.registerContext(GlobalPersistenceManager.java:76)
at org.apache.aries.jpa.container.context.namespace.NSHandler.decorate(NSHandler.java:180)
at org.apache.aries.blueprint.container.Parser.decorateCustomNode(Parser.java:1240)
at org.apache.aries.blueprint.container.Parser.handleCustomElements(Parser.java:1230)
at org.apache.aries.blueprint.container.Parser.parseBeanMetadata(Parser.java:568)
at org.apache.aries.blueprint.container.Parser.parseBlueprintElement(Parser.java:391)
at org.apache.aries.blueprint.container.Parser.loadComponents(Parser.java:335)
at org.apache.aries.blueprint.container.Parser.populate(Parser.java:277)
at org.apache.aries.blueprint.container.ParserServiceImpl.validateAndPopulate(ParserServiceImpl.java:81)
at org.apache.aries.blueprint.container.ParserServiceImpl.parse(ParserServiceImpl.java:70)
at org.apache.aries.blueprint.container.ParserServiceImpl.parse(ParserServiceImpl.java:64)
at org.apache.aries.blueprint.ParserService$$EnhancerByCGLIB$$d93728fa.parse(<generated>)
issueID:ARIES-245
type:Bug
changed files:
texts:Fix failing blueprint itests
The blueprint BC tests both fail because the composite bundle created needs to import an additional package in order for the bundle in the framework to work correctly.
The sample now depends on both org.osgi.service.blueprint and org.osgi.service.blueprint.container.
issueID:ARIES-246
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/IdSpace.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
texts:Blueprint ComponentDefinitionRegistryProcessor falls over with duplicate recipe ids
When attempting to use a component definition registry processor, the following kind of problem can occur, where subsequently blueprint will fall over due to duplicate ids for anonymous components.
org.apache.aries.blueprint.container.BlueprintContainerImpl doRun Unable to start blueprint container for bundle com.ibm.ws.eba.interop.bundle
org.osgi.service.blueprint.container.ComponentDefinitionException: Name #recipe-3 is already registered to instance org.apache.aries.blueprint.container.BlueprintRepository.putRecipe(BlueprintRepository.java:113 org.apache.aries.blueprint.container.ServiceRecipe.createRecipe(ServiceRecipe.java:348 org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:139 org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:628 org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:312 org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:212
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:453
...
issueID:ARIES-247
type:Improvement
changed files:
texts:AriesTrader - have the eba-maven-plugin automatically generate the APPLICATION.MF for AriesTrader rather than hard coding it.

issueID:ARIES-248
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:Add support for precedence when multiple transaction elements are selected

issueID:ARIES-249
type:Improvement
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/Processor.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/NamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistry.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ParserContext.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistryProcessor.java
texts:Provide javadoc for the Aries blueprint extensions (NamespaceHandlers, ComponentDefinitionRegistryProcessors, Interceptors, ...)
Currently, there is very little (javadoc) documentation around the extension to blueprint that Apache Aries provides. In particular, around the contracts that namespace handlers can assume and are expected to follow. Similarly, for component definition registry processors and also, partially, for interceptors.
issueID:ARIES-25
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Enable additonal contributions to blueprint xml via bundle private storage.
Problem:
With the potential introduction of annotation processing, blueprint information for a bundle starts to come from more than one source. Rather than have to expand the Parser to allow extensible blueprint sources, it is simpler to have a single location, where any blueprint info can be found.
Proposal:
The Blueprint extender currently scans the bundle looking for xml to use for blueprint, building a list of paths that are passed to the container for parsing. This list-building logic to be updated to check the bundles private storage for overrides, and replace path entries in the list when present.
issueID:ARIES-250
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryListContext.java
texts:JNDI service name lookup bugs
There are two bugs related to lookups using the osgi.jndi.service.name property. These are:
osgi:service/jdbc/myDataSource
results in a NamingException. To work correctly first off we try looking using an interface name of jdbc and a filer of myDataSource. Since myDataSource is not a valid filter we get a FilterSyntaxException when we first query. This results in a NamingException. Instead we should ignore the exception so we fall back to a service name lookup.
The following lookup doesn't work:
osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/myDataSource)
because we basically do a split on /, so we end up with:
osg:service
javax.sql.DataSource
(osgi.jndi.service.name=jdbc
/myDataSource)
hasFilter returns false in this case which means we query for javax.sql.DataSource with a null filter so we get the wrong DataSource (well only if there are multiple).
So two fixes:
1. If we have more than 3 parts we shouldn't query with interface/filter but go straight to service name.
2. We should ignore the / inside a filter, so we need better parsing that balances the brackets.
issueID:ARIES-251
type:Bug
changed files:jmx/jmx-api/src/main/java/org/osgi/jmx/service/cm/ConfigurationAdminMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/BundleStateMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/service/provisioning/ProvisioningServiceMBean.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningService.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
texts:BundleStateMBean, ConfigurationAdminMBean and ProvisioningServiceMBean are not up to date
BundleStateMBean, ConfigurationAdminMBean and ProvisioningServiceMBean are not up to date.
issueID:ARIES-252
type:Bug
changed files:util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
texts:DirectoryImpl.getFile returns FileImpl for Directories.
DirectoryImpl.getFile returns FileImpl for Files that are directories.
The IFile.convert approach for FileImpl/DirectoryImpl relies on the implementation being the correct class, so this leads to
IFile.isDirectory() being true, while IFile.convert() returns null, which breaks the contract defined by the interface.
The fix corrects the construction logic in getFile to build the appropriate implementation class.
issueID:ARIES-253
type:Bug
changed files:samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorManagerImpl.java
texts:Blog Sample Date of Birth seems to get corrupted on save
When I create a new user in the Blog Sample and create a DOB of today it seems that what gets persisted is somehow corrupted. For example, for today (3/15/10) it displays this 20-7-2
issueID:ARIES-254
type:Task
changed files:jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPReferenceListener.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPIdRefMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/TransferObject.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPMapMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPServiceMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPReferenceMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPPropsMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPBeanProperty.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPRefMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPRegistrationListener.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPTarget.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/BlueprintState.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPBeanArgument.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPValueMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/BlueprintMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPServiceReferenceMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPCollectionMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPNullMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/OSGiBlueprintEvent.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/Util.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPMapEntry.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPComponentMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPBeanMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPNonNullMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPReferenceListMetadata.java
texts:The JMX blueprint bundle should not export the .impl.codec package but .codec package instead

issueID:ARIES-255
type:Bug
changed files:
texts:Blueprint-bundle exports a subset of packages exported by the individual blueprint bundles
The packages exported by blueprint-bundle should be the same as packages exported by the individual blueprint bundles that make the blueprint-bundle.
issueID:ARIES-256
type:Improvement
changed files:samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/BlogPersistenceServiceImpl.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
texts:Modify the transaction wrappers bundle to use a service tracker instead of blueprint

issueID:ARIES-258
type:Bug
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:Declarative Transaction is not rolled back when RuntimeException is thrown
It turns out that the blueprint bean method that I was using declared that it threw Exception and since RuntimeException is a subclass of Exception it considered this an expected exception and did not rollback the transaction. Much thanks to Brian De Pradine for figuring out what was going on here.
The transaction interceptor should check if the exception being thrown is a "RuntimeException" and if so perform the rollback.
issueID:ARIES-259
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
texts:MBeans not getting unregistered reliably
Closing the MBeanServiceTracker asyncronously triggers JMXAgent.unregisterBeans(MBeanServer server)
If there is a unexpected exception while unregistering an MBeanHandler the ones coming after it will not get unregitered.
In particular I am seeing an unguarded postDeregister hook.
Caused by: java.lang.IllegalStateException: Invalid BundleContext.
at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:393)
at org.apache.felix.framework.BundleContextImpl.removeBundleListener(BundleContextImpl.java:170)
at org.apache.aries.jmx.framework.BundleState.shutDownDispatcher(BundleState.java:353)
at org.apache.aries.jmx.framework.BundleState.postDeregister(BundleState.java:293)
at org.apache.aries.jmx.framework.RegistrableStandardEmitterMBean.postDeregister(RegistrableStandardEmitterMBean.java:69)
at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.postDeregisterInvoke(DefaultMBeanServerInterceptor.java:1065)
issueID:ARIES-26
type:Improvement
changed files:
texts:Allow NamespaceHandlers to store data beyond the ComponentMetadata, for use later by BeanProcessors.
Problem:
Current NamespaceHandler support allows for NamespaceHandlers to declare support for a Namespace, when elements from that namespace are met within blueprint xml, the Handler is called to obtain an instance of ComponentMetadata representing the element.
When custom elements are met within Bean, Reference, RefList, Service, ServiceProperties, the current approach is to invoke the namespace handler for each custom element in turn, passing the metadata as returned by the previous handler.
Namespace handlers may be modifying the content of the passed metadata, and returning the same instance, or may be wrapping it in a new type.. such as ExtendedBeanMetaData implements BeanMetaData, to store their additional parsed information.
This however rapidly becomes problematic when multiple custom namespaces are present on the same blueprint entity, eg.
<bean>
...
<custom-a/>
<custom-b/>
<custom-c/>
</bean>
with handlers each for a,b,c that extend the passed metadata by wrapping it with one of their own, you would result in CustomCMetadata, that's wrappering CustomBMetadata, that in turn is wrappering CustomAMetadata, that is wrappering the original BeanMetadata..
Aside from the issue that A now has to delve through implementations of Metadata it doesnt not understand to find it's own metadata, there's also the secondary issue that simply declaring the custom elements in a different order results in different nesting being used.
Proposal:
To address these issues, the ComponentDefinitionRegistry is enhanced to allow storage of additional data, for a given ComponentMetdata, keyed by namespace URI.
With the example above, the potential chaining is left untouched, to avoid disrupting any current usage. However, instead of custom-a,b,c using wrappering to store additional data, they return the original metadata (after potentially querying it, in conjunction with their own parsed data), and store the extra information directly into the ComponentDefinitionRegistry, keyed by their custom namespace.
Later, when a (Bean)Processor runs, it is able to query for if any additional data was registered for this ComponentMetadata within the Registry for the BeanProcessors associated Namespace(s).
In order to provide some simple basic structure, the data is stored as a String->Object Map.
issueID:ARIES-261
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
texts:AriesTrader - let the maven-bundle-plugin generate import and export packages overriding only when necessary

issueID:ARIES-262
type:Task
changed files:
texts:Use properties to configure the bundle plugin manifest generation instead of configuring the plugin in each pom

issueID:ARIES-263
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
texts:AriesTrader - ensure that java packages begin with the artifactId of the bundle

issueID:ARIES-264
type:Improvement
changed files:samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogListAdapter.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Author.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/AuthorImpl.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/BlogPersistenceServiceImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/BlogPersistenceService.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Author.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/EntryImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/AuthorImpl.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/AuthorImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/BlogCommentService.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/Comment.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogEntryImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogListIterator.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogCommentImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/BlogPersistenceServiceImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorManagerImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogCommentManagerImpl.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/EntryImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/BlogCommentService.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/BlogPersistenceServiceImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogEntryManagerImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorImpl.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/BlogPersistenceServiceImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/EntryImpl.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/AuthorImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/EntryImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/BlogPersistenceService.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Entry.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/comment/persistence/Comment.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BloggingServiceImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Entry.java
texts:Blog - ensure that java package names begin with the artifactId of the bundle

issueID:ARIES-265
type:Improvement
changed files:
texts:Find a way to make it easy to run the samples outside the Aries source tree
(1) A minimal OSGi framework
(2) Just the Aries components required to run the sample.
The samples each have an assembly project that pulls this platform together in the projects' target directory and creates the configuration files needed to load the platform and aries jars.
At release time all that the platform assembly produces is a pom, this can be executed by a user outside the Aries build tree and it will install the required jars in a target directory. Unfortunately, without the configuration files, the user still has a fair amount of 'file install'ing to do before the platform will actually run.
The most useful thing we could supply would be a zip and/or tar file which contains the assembly pom, configuration files and legal files.
The user can simply unzip, java -jar osgi-blah -console, to get a fully configured platform on which to run the sample.
issueID:ARIES-266
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/VersionRange.java
util/src/main/java/org/apache/aries/util/internal/MessageUtil.java
texts:JPA module has dependencies on Application modules
Some of the JPA code uses VersionRange code from the Application module. Since VersionRage is an interface in the application api module, JPA ends up pulling two application bundles: api (for the interface) and utils (for the implementation).
These dependencies should be completely unnecessary. To break this dependency, the VersionRange class can be moved to the "util" module which JPA already uses.
issueID:ARIES-267
type:Sub-task
changed files:sandbox/samples/transaction-sample/transaction-sample-web/src/main/java/org/apache/aries/samples/transaction/GenericJTAException.java
texts:Run RAT and resolve issues

issueID:ARIES-269
type:Bug
changed files:
texts:Remove maven-bundle-plugin automatic generation of Import-Service entries for aries.blueprint.NamespaceHandler
There is some discussion related to how appropriate it is to have the manve-bundle-plugin configured to automatically add in the org.apache.aries.blueprint.NamespaceHandler entries. Until the issue is resolved I'm removing these entries.
See thread starting with: http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201003.mbox/%3c4BABA437.7090706@gmail.com%3e
issueID:ARIES-27
type:Improvement
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/BeanProcessor.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:Expand the BeanProcessor interface, so it is better able to make decisions about bean replacements.
Problem:
The current beanProcessor is fairly restricted passing only the current Bean, and it's beanName, expecting the implementation to be able to do any 'processing' or substitution based only on that information.
While this works well for simple bean wrappers, it's easy to see that some categories of BeanProcessor will struggle with such limited information.
Eg, a processor may wish to dynamically replace the bean, to do so, it may require infomation from the original BeanMetadata. Additionally, a processor may need to return a wrapper, that when invoked obtains a bean dynamically.
Proposal:
Pass the bean metadata, and a 'BeanCreator' to the BeanProcessor, enabling the processor to instantiate a new Bean when required.
This gets slightly more complex when there is more than one BeanProcessor operating, as each processor must still obtain a Bean that went through the same chain of Processors that it's orignal bean did.
Eg. with 3 processors.
A gets the fresh bean, and a BeanCreator for fresh beans
B gets A's returned bean, and a BeanCreator that returns beans passed through A.
C gets B's returned bean, and a BeanCreator that returns beans passed through A, then B.
issueID:ARIES-270
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/Interceptor.java
texts:Transaction blueprint interceptor should rollback transaction if method throws an Error
Currently, the transaction interceptor (due to the implementation of the Blueprint Interceptor interface) only handles successful method calls and method calls that throw an Exception but not method calls that throw an Error.
The latter class should also be handled so that the transaction is properly marked and closed if necessary.
issueID:ARIES-271
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/JMXThreadFactory.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintThreadFactory.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
texts:Ensure that thread pools created in Apache Aries use daemon threads
Ensure that thread pools create daemon threads in order to avoid the scenario where the threads in the pool prevent the JVM from exiting.
issueID:ARIES-272
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/tracker/InternalRecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:BundleTrackerCustomizers will not recurse on bundles added to a CompositeBundle before the composite bundle is started
At the moment the AbstractBundleTrackerCustomizer and its descendents trap Bundle.STARTING events. If the originator is a composite bundle they add themselves as a tracker to the composite bundle's context so that they are notified of bundle events in the child framework. This model assumes that the child bundles are added to the composite bundle after it is started. It would be better to trap Bundle.INSTALLED events, since child bundles can be added any time after the composite bundle is installed. For example, if the composite bundle has exports, its children have to be added before it is started so that it can satisfy the exports.
There is also quite a lot of redunant and duplicate code in the area of the bundle tracker customizers which should be cleaned up.
issueID:ARIES-274
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
texts:Blueprint Collaborator fails on finalize
A Blueprint bean with interceptors gets wrapped in a Collaborator object. When the blueprint bundle goes away and the beans gets garbage collected the GC will call finalize on the actual bean instance and also the wrapper that was created around it to support interceptors. The call to the wrapper is interpreted as an attempt to invoke the finalize method on the actual bean, which fails since finalize is (by default) protected.
For example:
Collaborator E org.apache.aries.blueprint.proxy.Collaborator invoke
java.lang.Error: Unreachable catch statement
at org.apache.aries.blueprint.proxy.Collaborator$1. onUnexpectedException(Collaborator.java:59)
at org.apache.aries.blueprint.proxy.Collaborator$1. invoke(Collaborator.java:72)
at org.apache.aries.blueprint.proxy.Collaborator. invoke(Collaborator.java:148)
at <some blueprint bean with interceptors>. finalize(Unknown Source)
at java.lang.J9VMInternals.runFinalize(J9VMInternals. java:412)
Caused by: java.lang.IllegalAccessException: Class org.apache.aries.blueprint.proxy.Collabor ator$1 can not access a member of class java.lang.Object with modifiers "protected"
at sun.reflect.Reflection.ensureMemberAccess(Reflection. java:77)
at java.lang.reflect.Method.invoke(Method.ja va:591)
at org.apache.aries.blueprint.proxy.Collaborator$1. invoke(Collaborator.java:66)
... 3 more
issueID:ARIES-275
type:Bug
changed files:samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
texts:AriesTrader - stock quote ranges are not updated on buy/sell activity

issueID:ARIES-276
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/HoldingDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/FinancialUtils.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/KeySequenceDirect.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession2.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/OrderDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/RunStatsDataBean.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/QuoteDataBean.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/ExplicitGC.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Include.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/AccountProfileDataBean.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/Log.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Servlet.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/KeyBlock.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/ServiceUtilities.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/MDBStats.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/persistence/MarketSummaryDataBean.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2ServletRcv.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeDBManager.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeAppServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeServletAction.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3Object.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/OrdersAlertFilter.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2IncludeRcv.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession1.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2Jsp.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingSession3.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TimerStat.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeScenarioServlet.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet2JNDI.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServletWriter.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeDBManagerImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingServlet.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-beans/src/main/java/org/apache/aries/samples/ariestrader/beans/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServiceUtilities.java
texts:move the ariestrader-sample directory to just ariestrader

issueID:ARIES-277
type:Test
changed files:
texts:Use pax exam to write itest for the new subsystem code

issueID:ARIES-278
type:New Feature
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:Provide subsystem event dispatcher to dispatch events to Subsystem listener

issueID:ARIES-279
type:Improvement
changed files:
texts:Move Blueprint Spec API classes to version 1.0.1
In the OSGi Enterprise spec, the companion jar has moved up to 1.0.1 for the blueprint spec packages due to the changes for generics. We should move up too, since we have generics.
issueID:ARIES-28
type:Improvement
changed files:
texts:Allow extenders of blueprint to function without requiring specific declaration in deployed blueprint components xml.
Problem:
BeanProcessors (in conjunction with NamespaceHandlers) are useful to supplement or extend Blueprint processing. However, unlike NamespaceHandlers, BeanProcessors must currently be declared in the blueprint xml itself. This would mean that where Blueprint is extended through the BeanProcessor approach, that every blueprint xml would require updating to make use of the new function.
Proposal:
Like Namespace Handlers, to allow BeanProcessors to be declared in the ServiceRegistry, as well as in the blueprint xml.
issueID:ARIES-280
type:Sub-task
changed files:samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/ComplexVerifierRegistrationListener.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecord.java
samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/SimpleVerifierRegistrationListener.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/RandomIDChoice.java
samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/PersonIDVerifierComplexImpl.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/IDVerifierClientActivator.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/IDConverter.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/BankInfo.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/PersonBankBean.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecordFactory.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecordOperationImpl.java
samples/blueprint/idverifier/idverifier-server/src/main/java/org/apache/aries/samples/blueprint/idverifier/server/PersonIDVerifierSimpleImpl.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditRecordStore.java
samples/blueprint/idverifier/idverifier-api/src/main/java/org/apache/aries/samples/blueprint/idverifier/api/CreditRecordOperation.java
samples/blueprint/idverifier/idverifier-api/src/main/java/org/apache/aries/samples/blueprint/idverifier/api/PersonIDVerifier.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/PersonCreditRecords.java
samples/blueprint/helloworld/helloworld-client/src/main/java/org/apache/aries/samples/blueprint/helloworld/client/HelloWorldClient.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/PersonalInfo.java
samples/blueprint/helloworld/helloworld-api/src/main/java/org/apache/aries/samples/blueprint/helloworld/api/HelloWorldService.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/CreditQueryRegistrationListener.java
samples/blueprint/idverifier/idverifier-client/src/main/java/org/apache/aries/samples/blueprint/idverifier/client/VerifierServiceReferenceListener.java
samples/blueprint/helloworld/helloworld-server/src/main/java/org/apache/aries/samples/blueprint/helloworld/server/HelloWorldServiceImpl.java
texts:Refactor blueprint-sample-idverifier and helloworld/blueprint samples into blueprint/idverifier and blueprint/helloworld

issueID:ARIES-281
type:Sub-task
changed files:
texts:Remove blog-standalone-platform-assembly in favour of users checking out blog-assembly to create their platform on which to run the blog sample

issueID:ARIES-282
type:Sub-task
changed files:sandbox/samples/transaction-sample/osgi-jdbc-api/src/main/java/org/osgi/service/jdbc/DataSourceFactory.java
sandbox/samples/transaction-sample/transaction-sample-web/src/main/java/org/apache/aries/samples/transaction/GenericJTAException.java
sandbox/samples/transaction-sample/transaction-sample-web/src/main/java/org/apache/aries/samples/transaction/TxDBServlet.java
sandbox/samples/transaction-sample/osgi-jdbc-derby/src/main/java/org/apache/aries/samples/osgijdbc/derby/DerbyActivator.java
texts:move transaction sample which isn't working out of samples to samples-sandbox so it isn't released

issueID:ARIES-283
type:Improvement
changed files:subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/obr/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:Provide an implementation of ResourceResolver that can find/resolve resources in local .m2 repo or any other specified repo

issueID:ARIES-284
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCRead.java
samples/ariestrader/modules/ariestrader-persist-jdbc/src/main/java/org/apache/aries/samples/ariestrader/persist/jdbc/TradeJdbc.java
samples/ariestrader/modules/ariestrader-persist-jpa-cm/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/cm/TradeJpaCm.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServicesManager.java
samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-api/src/main/java/org/apache/aries/samples/ariestrader/api/TradeServices.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/prims/PingJDBCWrite.java
samples/ariestrader/modules/ariestrader-core/src/main/java/org/apache/aries/samples/ariestrader/core/TradeServicesManagerImpl.java
samples/ariestrader/modules/ariestrader-persist-jpa-am/src/main/java/org/apache/aries/samples/ariestrader/persist/jpa/am/TradeJpaAm.java
texts:AriesTrader - clean up mode processing and use the service property rather than invoking the service to get the enum value

issueID:ARIES-285
type:Sub-task
changed files:
texts:Fix source licenses for the JPA component

issueID:ARIES-286
type:Bug
changed files:
texts:Remove hard-coded version from Blueprint iTest
The BlueprintContainerBTCustomizerTest.java currently contains a hard-coded version that should be removed so that releases don't need to change this version.
issueID:ARIES-287
type:Bug
changed files:
texts:Egregious errors in PersistenceUnitInfoImpl
urls are not actually added to list of urls for getJarFileUrls
getJtaDataSource actually returns non-jta-datasource
These are serious enough, especially the second one, so I'd have to vote -1 on 0.1 unless it includes the fixes.
issueID:ARIES-29
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/Activator.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/MBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/MBeanServiceTracker.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentContext.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/Logger.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgent.java
texts:Implement JMX Agent
Implement JMX Agent. It should be responsible for tracking all MBean servers(registered as a services) and services which will be exposed as a Managed Beans (MBeans).
JMX Agent should register following MBeans: Framework MBean, Bundle State MBean, Service State MBean, Package State MBean, Permission Admin MBean, Configuration Admin MBean,
Provisioning Service MBean, User Admin MBean, Conditional Permission Admin MBean.
It is open issue if we should track MBean servers registered as services but for now we can follow RI of JMX which listen to MBean Server services.
For now we can track MBeanServers and when service is discovered register MBeans. Same in case when service is exposed as Managed MBeans it should be registered (on all available MBean servers) when is discovered.
issueID:ARIES-290
type:Bug
changed files:samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
texts:Running a disconnected machine the images from the blog are broken

issueID:ARIES-291
type:Bug
changed files:samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorManagerImpl.java
texts:Unparsable date
When a date wasn't provided for the data entry.
org.apache.aries.jpa.container. EntityManager org.apache.openjpa.persistence.EntityManagerImpl@b81791 as the transaction has completed.
java.text.ParseException: Unparseable date: ""
at java.text.DateFormat.parse(Unknown Source)
at org.apache.aries.samples.blog.biz.BlogAuthorManagerImpl.updateAuthor(BlogAuthorManagerImpl.java:81)
at org.apache.aries.samples.blog.biz.BloggingServiceImpl.updateBlogAuthor(BloggingServiceImpl.java:76)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.apache.aries.jndi.services.ServiceHelper$JNDIServiceDamper.invoke(ServiceHelper.java:99)
at $Proxy39.updateBlogAuthor(Unknown Source)
at org.apache.aries.samples.blog.web.EditAuthor.doPost(EditAuthor.java:85)
at org.apache.aries.samples.blog.web.EditAuthor.doGet(EditAuthor.java:41)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64
at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
issueID:ARIES-292
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:Unable to delete the *.eba file from the samples/blog/blog-assembly/target/load folder while it was running.
Moving to version 0.4
issueID:ARIES-293
type:Bug
changed files:
texts:Invalid schemaLocations in blog and ariestrader samples
The blog and ariestrader samples have the following schemaLocation declarations:
SchemaLocation should have a pair of values (the namespace and the schema location hint). I don't believe we have a useful location to include (the OSGi Alliance makes no promises about where it will locate its schema) so we should just remove these entries.
issueID:ARIES-294
type:Sub-task
changed files:
texts:Reset the 0.1-incubating-RCx branch to use 0.1-incubating-SNAPSHOT in preparation for RC2

issueID:ARIES-295
type:Sub-task
changed files:
texts:Move the maven-release-plugin configuration to skip tests from module poms to parent pom

issueID:ARIES-296
type:Bug
changed files:
texts:Add org.osgi.framework.system.packages to config.ini of samples so that we can specify javax.transaction mandatory properties
With recent updates we are now loading some transaction classes from the system bundle and others from the transaction spec bundle. This is causing a linkage error as follows:
java.lang.LinkageError: loader constraint violation: when resolving interface method "javax.transaction.Transaction.enlistResource(Ljavax/transaction/xa/XAResource;)Z" the class loader (instance of org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader) of the current class, org/apache/aries/transaction/jdbc/ConnectionWrapper, and the class loader (instance of org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader) for resolved class, javax/transaction/Transaction, have different Class objects for the type javax/transaction/xa/XAResource used in the signature
at org.apache.aries.transaction.jdbc.ConnectionWrapper.<init>(ConnectionWrapper.java:67)
To avoid the error we need to add org.osgi.framework.system.packages entries that include a mandatory attribute on the transaction packages so that our bundles do not wire to the system bundle which only includes a subset of the necessary classes.
issueID:ARIES-297
type:Sub-task
changed files:
texts:Ensure Incubator disclaimer is included in each release artifact

issueID:ARIES-298
type:Sub-task
changed files:
texts:Include HOWL's license in the LICENSE file within the artifacts that include HOWL code. Also, add a notice to the NOTICE file.

issueID:ARIES-3
type:Task
changed files:
texts:Change version to 1.0.0-incubating-SNAPSHOT

issueID:ARIES-30
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchActionResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchInstallResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/FrameworkMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
texts:Implement Framework MBean
Implement Framework MBean wich provides access to bundle life cycle methods of the framework including
batch install and update operations.
issueID:ARIES-300
type:Sub-task
changed files:
texts:Add the GPL part of the CPL+GPL license to the jpa LICENSE file

issueID:ARIES-301
type:Bug
changed files:
texts:Missing 'peristence.xml' does not trigger warning
If a bundle has a meta-persistence header, but is missing its persistence.xml, persistence doesn't work (obviously) but no diagnostic warning is given explaining why. Such a bundle is in an inconsistent state, so we probably should put out a warning.
issueID:ARIES-302
type:Improvement
changed files:
texts:Adding prototype code for a graphical console
Add prototype code which gives the user a graphical view of OSGi bundles and their package dependencies. The code will only work with Firefox.
issueID:ARIES-303
type:Improvement
changed files:
texts:Improvements to prototype graphical console
https://issues.apache.org/jira/browse/ARIES-302?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel
Ultimately there are two use cases for the console; the first is as a dynamic replacement for the power point pictures we use in demos to illustrate the architecture of the blog sample, and the second is as a management console. We'll want different things in the two scenarios - in general, we'll want a lot of abstraction when we're using the console to illustrate what's happening in a demo, but using the console to debug or manage a proper system would need much more detail. For example, we may not want to show the bundle IDs for a demo, and we may want to programatically filter out bundles which aren't part of the blog sample. I think a good way to achieve these two modes is to provide a customisable set of preferences, and we can ship with two default modes, 'abstract' and 'diagnosis' (say). We could use a different URL pattern to swap between the modes, and also allow users to customise the preferences files to create hybrid modes.
I've taken a step towards this by allowing some of what's shown to be turned off and moving the control for that switch into a separate javascript file. The next steps will be to externalise it to a user-editable file, possibly in combination with a set of controls in the GUI and cookie persistence.
I've also added a visual representation of the bundle state, so that bundles which aren't active are greyed out. At the moment they go a slightly bilious yellow when they're not active, but we can fine tune the colours as we go.
(Depending on the preferences setting, we can show the state as a text string, use the visualization, or do both.)
issueID:ARIES-304
type:Improvement
changed files:
texts:Refactor the demop prototype
Refactor the sample to put the API into a separate bundle and move the javascript to a sub directory of web.
issueID:ARIES-305
type:Improvement
changed files:
texts:Upgrade to released OpenJPA 2.0.0 artifacts
Apache OpenJPA 2.0.0 was released on April 22.
issueID:ARIES-306
type:Improvement
changed files:
texts:Upgrade to latest geronimo-jpa_2.0_spec-1.1 artifact
Geronimo released a new version of the geronimo-jpa_2.0_spec which exports the packages as version=1.1, as required by the EEG 4.2 spec for JPA.
issueID:ARIES-307
type:Wish
changed files:
texts:DOAP file for Aries
I've created a DOAP file -
http://projects.apache.org/doap.html
which will get Aries listed under http://projects.apache.org/
All I need someone to do, is check the file into svn under https://svn.apache.org/repos/asf/incubator/aries/ and then myself or another ASF member can update infrastructure/site-tools/trunk/projects/files.xml to refer to the file.
issueID:ARIES-308
type:Bug
changed files:
texts:Fix licences in JS files in demo sample
Missing Apache licenses and missed some changes associated with ARIES-303 which need to be re-instated.
issueID:ARIES-309
type:Improvement
changed files:
texts:Remove unnecessary service export for transaction interceptor

issueID:ARIES-31
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BundleEventData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BundleData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/TypeUtils.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/shared/RegistrableStandardEmitterMBean.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleState.java
texts:Implement Bundle State MBean
Implement Bundle State MBean wich provides detailed access to the state of one bundle and aggregated
state of a group of bundles.
issueID:ARIES-310
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningService.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
texts:MBean exceptions
The exceptions raised by aries mbeans are not quite consistent with that the JMX OSGi specification defines. However, the specification itself is very inconsistent and unclear when to throw an IOException or IllegalArgumentException.
issueID:ARIES-311
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/JREInitialContextFactoryBuilder.java
jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIProviderAdmin.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ProviderAdminService.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiURLContextFactory.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ProviderAdminServiceFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryListContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerServiceFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiURLContextServiceFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/AbstractServiceRegistryContext.java
jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIConstants.java
jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIContextManager.java
texts:JNDI implementation does not follow the specification
The Aries JNDI implementation does not quite follow the specification.
issueID:ARIES-312
type:Task
changed files:
texts:Delete half-deleted files
The patch for Aries 272 removed the contents of some files without fully deleting them.
util/src/main/java/org/apache/aries/util/tracker/MultiBundleTracker.java
util/src/main/java/org/apache/aries/util/tracker/AbstractBundleTrackerCustomizer.java
util/src/main/java/org/apache/aries/util/tracker/AriesBundleTrackerCustomizer.java
issueID:ARIES-313
type:Improvement
changed files:samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/BlogPersistenceServiceImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/Statements.java
texts:The samples should all have tests!
Someone on the user mailing list reported that the blog sample wasn't working. It wasn't because we had made changes to the bundles and because there are no tests for the blog sample the only way to see that it was broken was by checking running it. We really need tests for the 'show case' samples to make sure that when ever a user tries to run them they just work.
issueID:ARIES-314
type:Bug
changed files:
texts:Fix various minor issues with the demo sample
1) Problem with VisibilitySwitch added in ARIES-308
2) Crash when application bundle is stopped
issueID:ARIES-315
type:Improvement
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmProperties.java
texts:Blueprint-cm and the cm-properties element
I tried to use Blueprint similarly to what I did in Spring:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
 xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0">

 <bean id="registry" class="com.bartek.tests.paxtests.blueprint.cm.ConfigurableMock">
  <property name="properties" ref="testProps" />
 </bean>

 <cm:cm-properties id="testProps" persistent-id="testProps" />

</blueprint>
What I really want to do is to inject all the properties for a given persistent id into a field of my bean. This was possible for Spring Extender. I analyzed the Blueprint source code, because I wanted to provide a patch for this issue, but it turned out that there are several reasons why this cannot work:
1. blueprint-cm xsd does not allow using the 'id' attribute on the cm-properties element
2. CmNamespaceHandler is prepared to parse neither top level cm-properties elements, nor cm-properties inlined as a value for a property of a bean manager
3. the CmNamespaceHandler 's decorateCmProperties method and especially the contents of the CmProperties class suggest that cm-properties were not designed to be used the way I would like to use them; it is designed to provide a way to update properties of a registered service;
While I can definitely patch it, so that it works the way I want , I would like to know if such a usage is allowed by the spec. My first impression (especially after I found out how CmProperties work - #3 above) is that this feature of Spring DM was dropped.
One more thing: Is there any draft of the spec that covers the blueprint-cm schema? I found it difficult to understand the semantics behind the bluepring-cm elements only provided with the xsd file.
issueID:ARIES-316
type:Improvement
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:eba-maven-plugin should ignore dependencies in 'test' or 'provided' scope

issueID:ARIES-317
type:Bug
changed files:samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/entity/AuthorImpl.java
texts:Samples fail to work with the latest version of Derby DB
Samples shipped with Aries recommend following installation instructions from when installing Derby.
The issue is that this guide suggests installing the latest version of Derby DB. A new version of Derby (v10.6.x) was released in May 2010 and it is incompatible with version of Derby client library (bundle) used in Aries (v10.5.3.0_1).
When running the Blog sample, in the browser I get:
java.lang.IllegalArgumentException: Failed to start database 'blogDB', see the next exception for details.
at org.apache.aries.samples.blog.persistence.jdbc.BlogPersistenceServiceImpl.createAuthor(BlogPersistenceServiceImpl.java:84)
And in the logs I can see:
C:\svn_checkouts\aries\samples\blog\blog-assembly\target\blogDB has an incompatible format with the current version of the software. The database was created by or upgraded by version 10.6.
at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)
at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
... 45 more
Caused by: ERROR XSLAN: Database at C:\svn_checkouts\aries\samples\blog\blog-assembly\target\blogDB has an incompatible format with the current version of the software. The database was created by or upgraded by version 10.6.
at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
at org.apache.derby.impl.store.raw.log.LogToFile.readControlFile(Unknown Source)
at org.apache.derby.impl.store.raw.log.LogToFile.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)
at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)
at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.bootLogFactory(Unknown Source)
at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.setRawStoreFactory(Unknown Source)
at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)
at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)
at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)
at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)
at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)
at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)
at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)
at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)
... 45 more
Version 10.5.3.0_1 is hardcoded inside pom.xml files in many Aries subprojects. Changing the version of Derby in all of these files does not really make sense and would not bring a lot of value.
I think that a better approach is to just add a short note to all samples that use Derby and explicitly specify the recommended version of Derby to be installed when preparing env for running Aries samples.
issueID:ARIES-318
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
texts:ObjectFactoryBuilder already set
JNDI Activator will display a "java.lang.IllegalStateException: ObjectFactoryBuilder already set" exception if the activator is started multiple times in the same JVM process.
issueID:ARIES-319
type:Improvement
changed files:sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipAspect.java
sandbox/samples/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfo.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfoProvider.java
sandbox/samples/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ModelInfoService.java
sandbox/samples/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/Activator.java
sandbox/samples/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService.java
sandbox/samples/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ServiceInterceptor.java
sandbox/samples/goat/goat-web/src/main/java/org/apache/aries/samples/goat/web/ServerSideClass.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ParameterizedRelationshipAspect.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfoProvider.java
sandbox/samples/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfo.java
sandbox/samples/goat/goat-bundlecontext-modelprovider/src/main/java/org/apache/aries/samples/goat/bundlecontextmodel/BundleContextInfoProvider.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/api/VersionedRelationshipAspect.java
sandbox/samples/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService2.java
sandbox/samples/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ModelInfoEnhancerService.java
sandbox/samples/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
texts:Check in a re-factored version of the samples-sandbox/demo sample
The first stage in the process is to move the code to samples/goat (Graphical Osgi Analysis Tool) - this code only contains a dummy info provider so it's not quite up to the same level as the code currently under samples-sandbox/demo. When the new code has an equivalent of BundleContextInfoProvder the code under samples-sandbox will be removed.
issueID:ARIES-32
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchActionResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/AuthorizationData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/UserData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/FrameworkMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchInstallResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdminMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/RoleData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
texts:Implement Permission Admin MBean
Implement Permission Admin MBean based on Permission Admin service.
issueID:ARIES-320
type:New Feature
changed files:
texts:Support ClassTransformers for PUs
One way of supporting runtime enhancement of JPA entity classes is via java agent approach. Aries JPA should allow for java agent based enhancement.
issueID:ARIES-321
type:Improvement
changed files:
texts:Demo application which can be coded up from scratch
I've been presenting Apache Aries a bit lately, and think there's a gap in our current demos. The samples are really useful as samples, but they're not quite right for a live demo. What would be idea for Aries is something that can be coded up live from scratch. I think this makes an engaging demo in general, and it's especially suitable for Aries because it's partly a programming model - what will be different for developers is the development experience, rather than the externals of the finished application. We could code up helloworld from scratch but it's a bit too simple, and the blog sample has much too much code to be coded live.
The intention is to have an application which shows a lot of the main elements of an enterprise architecture - a web front end, a persistence layer, a modular design - but almost no code. I chose keyword association for two reasons. The first is that it's pretty trivial to implement. The second is that I am hoping it will work well in front of a live audience because the audience can be prompted to supply the associations, which should help wake them up.
The main collateral is the script for the demo. It is in the wordassociation root, and is called demoscript.html. It probably needs further refinement as we use it in front of a live audience and discover what works and what needs further explanation. I've also included the completed bundles for reference.
I have deviated from our usual org.apache.aries.sample naming convention and left the package names quite short so that it's easy to type them during live coding. Having the names in the subversion copies match names we might use live means that if something goes wrong during the demo it should be possible to swap in a pre-built bundle from the repository.
I have included a maven build so that the bundles can be built independently of eclipse (although I don't think coding up the maven build scripts live in front of an audience would be much fun for either the audience or the speaker.) The maven build doesn't strictly follow best practices for the module names, again to keep the names short so that the mvn modules are interchangeable with those coded live.
The projects were built using the Rational free tools for OSGi applications, and their internal layout reflects this. They build fine with maven but .don't build brilliantly when imported into normal eclipse. They do work (obviously) when imported into the web tools platform with the OSGi Applications free tools installed. Instructions for installing the free tools are given in demoscript.html. The demo could also be done using normal eclipse or normal eclipse and a maven build, although the instructions would be slightly different at some steps.
issueID:ARIES-322
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
texts:Anonymous beans in blueprint incompatible with JPA integration
If I change the blueprint.xml for the JPA bundle of the blog sample to the following,
<service interface="com.ibm.ws.eba.example.blog.persistence.api.BlogPersistenceService">
<bean class="com.ibm.ws.eba.example.blog.persistence.BlogPersistenceServiceImpl">
<tx:transaction method="*" value="Required"/>
</bean>
</service>
the samples fails with this error:
[25/05/10 17:35:59:068 BST] 0000002c servlet E com.ibm.ws.webcontainer.servlet.ServletWrapper service SRVE0068E: Uncaught exception created in one of the service methods of the servlet Edit Blog Author in application 55f218ea-219d-4ff1-af48-3b80c274765b.2. Exception created : javax.persistence.TransactionRequiredException: No transaction currently active
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:94)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext (JTAEntityManager.java:73)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.persist(JTAEntityManager.java:220)
The problem seems to be the anonymous bean. This tripped me up pretty badly when I was trying to write a new application, and I expect other users would hit it as well.
issueID:ARIES-324
type:Bug
changed files:
texts:System crash (windows) caused by mvn eclipse:eclipse on Aries trunk
I tried to create Eclipse project on trunk of Aries code according to tutorial instructions:
http://incubator.apache.org/aries/blueprinthelloworldtutorial.html
I've got blue screen.
After restart, second attempts ended with:
[INFO] ------------------------------------------------------------------------
[INFO] Building Apache Aries Blueprint HelloWorld Assembly
[INFO] task-segment: [eclipse:eclipse]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing eclipse:eclipse
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.
Unable to read local copy of metadata: Cannot read metadata from '[myhome]\.m2\repository\org\apache\aries\samples\blueprint\helloworld\org.apache.aries.samples.blueprint.helloworld.client\0.2-incubating-SNAPSHOT\maven-metadata-codehaus.snapshots.xml': only whitespace content allowed before start tag and not \u0 (position: START_DOCUMENT seen \u0... @1:1)
org.apache.aries.samples.blueprint.helloworld:org.apache.aries.samples.blueprint.helloworld.client:jar:0.2-incubating-SNAPSHOT
Path to dependency:
1) org.apache.aries.samples.blueprint.helloworld:org.apache.aries.samples.blueprint.helloworld.assembly:pom:0.2-incubating-SNAPSHO
T
2) org.apache.aries.samples.blueprint.helloworld:org.apache.aries.samples.blueprint.helloworld.client:jar:0.2-incubating-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 40 seconds
[INFO] Finished at: Thu May 27 09:25:46 CEST 2010
[INFO] Final Memory: 89M/160M
[INFO] ------------------------------------------------------------------------
After removing folder '[myhome]\.m2\repository\org\apache\aries\samples\ and run mvn eclipse:eclipse again - bluescreen again.
My colleague is getting the same result. Hard blue screen and PC restart.
I cannot attach a file causing problems I found in my local repo (I believe it is beeing downloaded from apache repo) '[myhome]\.m2\repository\org\apache\aries\samples\blueprint\helloworld\org.apache.aries.samples.blueprint.helloworld.client\0.2-incubating-SNAPSHOT\maven-metadata-codehaus.snapshots.xml'
Regards,
Marek
issueID:ARIES-325
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:static factory methods with the same names are not distinguished during bean instantiation
I have a class SuperClass with a static method:
public static SuperObject getObject()
{...return SuperObject}
this class is subclassed by SubClass which also has a static method:
public static SubObject getObject()
{...return SubObject}
where SubObject extends SuperObject
when I use <bean id="someFactoryBean" class="SubClass" factory-method="getObject"/> I get a ComponentDefinitionException:
ServiceRecipe E org.apache.aries.blueprint.container.ServiceRecipe createService Error retrieving service from ServiceRecipe[name='.component-2']
org.osgi.service.blueprint.container.ComponentDefinitionException: Multiple matching factory methods getObject found on class
my.package.SubClass for arguments [] when instanciating bean someFactoryBean: [
public static my.package.SubClass.getObject(),
public static my.package.SuperClass.getObject()]
at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:248)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:675)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
at org.apache.aries.blueprint.di.RefRecipe.internalCreate(RefRecipe.java:60)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
at org.apache.aries.blueprint.container.ServiceRecipe.createRecipe(ServiceRecipe.java:350)
at org.apache.aries.blueprint.container.ServiceRecipe.createService(ServiceRecipe.java:256)
at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:228)
at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:307)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:365)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:120)
at java.security.AccessController.doPrivileged(AccessController.java:202)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse.getService(ServiceUse.java:118)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:449)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:430)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:667)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.getService(BlueprintContainerImpl.java:400)
at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:180)
at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:49)
at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:201)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$CgLibProxyFactory$1.loadObject(AbstractServiceReferenceRecipe.java:634)
I think the bean should be instantiated using the static method declared on the class I specified as an attribute.
issueID:ARIES-326
type:Improvement
changed files:
texts:ERROR XBM0J: Directory /tmp/paxexam_runner_hudson/TESTDB already exists.
Last 5 Aries builds were unstable. It seems to be really hard to reproduce the issue with Derby DB that is observable on the build machine:
Caused by: ERROR XBM0J: Directory /tmp/paxexam_runner_hudson/TESTDB already exists.
at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
at org.apache.derby.impl.services.monitor.StorageFactoryService$9.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.derby.impl.services.monitor.StorageFactoryService.createServiceRoot(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)
at org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(Unknown Source)
at org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Unknown Source)
... 48 more
While I don't know what's the real source of this issue (as I cannot reproduce it on my machine) and the SVN log does help a lot in investigating this problem, I have a proposal for a change in the way Derby DB is used in Aries. This change might potentially also get rid of the error that we are now observing on the build machine.
The embedded Derby data source that is used in transaction itests uses disk storage and creates a TESTDB directory in the Pax Exam/Runner working dir. In case of the build machine it is /tmp/paxexam_runner_hudson/TESTDB. Fortunately, the derby DB version that is used in Apache Aries already supports an in-memory storage backend. It is suitable for tests - persistent storage is not really required for the tests that are run in Aries. What is more, with this backend there's no longer a need to care about files that must be deleted after test is finished.
What would need to be changed?
transaction\transaction-testds\src\main\resources\OSGI-INF\blueprint\dataSource.xml
<property name="databaseName" value="memory:TESTDB"/>
instead of
<property name="databaseName" value="TESTDB"/>
for both data sources defined in this file.
I've just given it a try and it works on my machine. Derby DB does not leave any resources after each of the tests (not really - it leaves a log file ).
Of course the fact that it works on my machine does not imply that it will fix the issue that we're now observing on Hudson . Nevertheless, I'd give it a try.
issueID:ARIES-327
type:Bug
changed files:application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
texts:From time to time OBRResolverTest causes Aries build to fail
A good example of a build that failed because of this issue is build #497 on Hudson.
The error log looks like this:
[transitive.bundle.by.reference;
{deployed-version->1.0.0}] expected:<2> but was:<1>

java.lang.AssertionError: [transitive.bundle.by.reference;{deployed-version->1.0.0}
] expected:<2> but was:<1>
at org.junit.Assert.fail(Assert.java:74)
at org.junit.Assert.failNotEquals(Assert.java:448)
at org.junit.Assert.assertEquals(Assert.java:102)
at org.junit.Assert.assertEquals(Assert.java:323)
at org.apache.aries.application.runtime.itests.OBRResolverTest.testBlogApp(OBRResolverTest.java:187)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:134)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:101)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
at sun.rmi.transport.Transport$1.run(Transport.java:159)
at java.security.AccessController.doPrivileged(Native Method)
at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
The second test method defined in this test class also fails from time to time.
This issue is caused by the fact that AriesApplicationManagerImpl is sometimes provided with a wrong service instance for the AriesApplicationResolver interface. Instead of obr-resolver, we get no-op-resolver.
When the test fails, in the logs we can see:
[RMI TCP Connection(1)-192.168.33.2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Retrieving service for bundle org.apache.aries.application.management_0.2.0.incubating-SNAPSHOT [10] and service registration
{org.apache.aries.application.management.AriesApplicationResolver}={osgi.service.blueprint.compname=no-op-resolver, service.ranking=-1, service.id=35}

When it succeeds:
[RMI TCP Connection(1)-192.168.33.2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Retrieving service for bundle org.apache.aries.application.management_0.2.0.incubating-SNAPSHOT [10] and service registration {org.apache.aries.application.management.AriesApplicationResolver}
=
{osgi.service.blueprint.compname=obr-resolver, service.id=40}
It is somewhat weird that we observe this behavior as no-op-resolver has service ranking -1 and obr-resolver has ranking 0. Logs suggest that from time to time, AriesApplicationManagerImpl is provided with a service reference before initialization of the bundle that provides the obr-resolver (org.apache.aries.application.resolver.obr) completes . This seems to exlain the weird behavior. Changing the order of bundles passed to Pax Exam seems to fix this issue.
Note: Other testcases (i.e. OBRAppManagerTest) might also be affected by this issue.
Side note:
Constants defined in the OBRResolverTest class make it hard to understand what's going on inside this test - they are mixed :
public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.reference";
public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.value";
A patch fixing both the initial problem and the issue with constants coming soon.
issueID:ARIES-329
type:New Feature
changed files:
texts:Add support for listeners to ManagedPersistenceUnitInfoFactory
Add support for service-based listeners for ManagedPersistenceUnitInfoFactory. The listeners can be used to perform additional actions as the persistence bundles are detected or untracked by the Aries JPA code.
issueID:ARIES-33
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/AuthorizationData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/UserData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanHandler.java
jmx/jmx-api/src/main/java/org/osgi/jmx/service/useradmin/UserAdminMBean.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdminMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/RoleData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
texts:Implement User Admin MBean
Implement User Admin MBean which manages User Admin service.
issueID:ARIES-330
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableServiceReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ServiceReferenceMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedServiceReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Support for specifiying the runtime class on service references instead of class names
Beans can already be created by custom namespace handlers by specifying the runtime class, but references can not.
issueID:ARIES-331
type:Improvement
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:Override Application-Version in eba-maven-plugin
When auto-generating the application manifest, one can override the Application-SymbolicName but not the Application-Version.
Would be good to support overriding of the Application-Version header as well.
issueID:ARIES-332
type:Bug
changed files:
texts:Blueprint itests fail on some machines with slow internet connection
The reason for the failure is the managed property place holder in the blueprint sample bundle that refers to a properties file at "file://url".
Now calling URL#openStream() on such a URL usually fails fast. However, on at least one machine / internet connection it only fails after more than a minute. This not only causes several tests to break but also means that the whole suite takes several minutes to run.
issueID:ARIES-333
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/GroupData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/useradmin/UserAdmin.java
texts:JMX implementation updates
Some JMX specification issues have been clarified and the Aries implementation needs to be updated accordingly. Specifically,
1) No RuntimeExceptions should be thrown by any of the MBeans
2) BundleStateMBean.getRequiredBundles() and similar functions should return any dependencies via dynamic or static imports, required or fragment bundles.
issueID:ARIES-334
type:Improvement
changed files:sandbox/samples/words-sample/words-jpa/src/org/apache/words/jpa/WordLister.java
sandbox/samples/words-sample/words-api/src/org/apache/words/AssociationRecorderService.java
sandbox/samples/words-sample/words-jpa/src/org/apache/words/jpa/Recorder.java
sandbox/samples/words-sample/words-api/src/org/apache/words/WordGetterService.java
sandbox/samples/words-sample/words-jpa/src/org/apache/words/jpa/Association.java
sandbox/samples/words-sample/words-web/src/org/apache/words/web/AssociateWord.java
texts:Wordassociation: Make names consistenet and create DB in the assembly

issueID:ARIES-335
type:Improvement
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ApplicationResourceImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
texts:Update OBR Application Resolver to use OBR 1.6
In the initial OBRApplicationResolver we had to do some pretty nasty things to get it to work because of the way OBR works. The two biggest are:
1. We had to generate a repository.xml for the application by value content to resolve against, this had to be written to disk and then removed to add it to OBR.
2. We had to add a private repository (the application by value content) as a global repository. This meant that if someone else used OBR they could have ended up with invalid results. Also it meant we could only resolve one application at a time.
3. The application was resolved against the current framework, and the bundles in the current framework would be excluded from the results. Since the resolution info can be stored in the application in the DEPLOYMENT.MF which could be used in a different JVM with different bundles in the framework you could end up with an app not working in the target framework.
The latest level of OBR has fixes for these 3 issues, so we should try to update it so it works against OBR 1.6.
Oh and OBR 1.6 appears to be faster at parsing the repo.xml files, so every performance improvement helps.
issueID:ARIES-336
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/BundleDelegatingClassLoader.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/GenericType.java
texts:Blog sample issues with Java2 security
Trying to run the blog sample with Java2 security on (and reasonable permissions rather than AllPermissions) revealed a small number of places in the Aries componentry that needs doPrivs.
In particular, around Bundle.loadClass and Bundle.getResource
issueID:ARIES-337
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:Reconsiliation of deployment.mf and application.mf is broekn
The AriesApplicationManagerImpl.createApplication method attempts to ensure that a deployment.mf in the application is the deployment.mf for the application. Unfortunately instead of comparing the application symbolic names in the application.mf and the deployment.mf it compares the application symbolic name in the application.mf to itself. A minor typo which essentially removes the value of the if test.
issueID:ARIES-338
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
texts:osgi:service JNDI damping performs like a one legged dog under an anesthetic
I updated some of my code to use the JNDI implementation of osgi:service which does the service damping and my application saw a 3x slowdown (i.e. it took 3 second to do something it used to take 1 seconds).
It appears the problem is that every time a lookup is performed a new java.lang.reflect.Proxy class is generated and doing this over and over when the same service is looked up is expensive. Instead of doing this we can generate a proxy once per client BundleContext per service and cache it between lookups. The cache needs to be managed, so if the client goes away we clear the cache and if the service goes away we purge it too.
I have written the code and shown that it improves performance so I'm raising this JIRA so I can integrate the performance fix.
issueID:ARIES-339
type:Bug
changed files:
texts:Aries builds fail due to incorrectly working setUp() methods in JMX itests
1. There's a method annotated with @Before in the abstract test class. Most concrete test classes also have methods annotated with @Before which inside their body also call the the setUp() method from the abstract class. During a build both methods (the one from the abstract class and the one from the concrete one) are called and the one from the subclass is called first :|. This method setups mbean server and then checks if required mbeans have been registered. After it completes, the the setUp() method from the super class is called directly. It creates a new mbean server - overrides the previous one. The new one is not prepared to be used inside the test method as mbeans haven't been registered yet and there's no code that would wait for those mbeans to be registered. This causes an exception to be thrown in various tests and build to fail. Example:
java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
at sun.rmi.transport.Transport$1.run(Transport.java:159)
at java.security.AccessController.doPrivileged(Native Method)
at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:134)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:101)
... 19 more
Caused by: java.lang.reflect.UndeclaredThrowableException
at $Proxy8.getExportedPackages(Unknown Source)
at org.apache.aries.jmx.framework.BundleStateMBeanTest.testMBeanInterface(BundleStateMBeanTest.java:153)
... 25 more
Caused by: javax.management.InstanceNotFoundException: osgi.core:type=bundleState,version=1.5
at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1094)
at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:833)
at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:288)
... 27 more
2. FrameworkMBeanTest does not wait for the FrameworkMBean at all.
3. Tests wait 5 seconds for mbeans to be registered. This is often not sufficient enough.
4. Some other minor changes are required.
A patch coming soon.
Unfortunately, the list of JMX itests issues provided above is not complete. Additional experiments need to be carried out and some other fixes will probably be required.
issueID:ARIES-34
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningService.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/provisioning/ProvisioningServiceMBeanHandler.java
texts:Implement Provisioning Service MBean
Implement Provisioning Service MBean which manages a Provisioning Service.
issueID:ARIES-340
type:Bug
changed files:
texts:All projects that use org.apache.felix.configadmin should define exclusions for this artifact
org.osgi.foundation is a transitive dependency of the org.apache.felix.configadmin artifact. Unfortunately, org.osgi.foundation contains classes that are normally shipped with JDK and this leads to problems with compiling projects under Eclipse (as 'mvn eclipse:eclipse' places the classpath entry for org.osgi.foundation above the one for the JDK).
<dependency>
<groupId>org.apache.felix</groupId>
<artifactId>org.apache.felix.configadmin</artifactId>
<version>1.2.4</version>
<exclusions>
<exclusion>
<groupId>org.apache.felix</groupId>
<artifactId>org.osgi.compendium</artifactId>
</exclusion>
<exclusion>
<groupId>org.apache.felix</groupId>
<artifactId>org.osgi.core</artifactId>
</exclusion>
</exclusions>
</dependency>
Should be used instead of:
<dependency>
<groupId>org.apache.felix</groupId>
<artifactId>org.apache.felix.configadmin</artifactId>
<version>1.2.4</version>
</dependency>
This change has already been applied to several Aries subprojects, but it hasn't for jpa, jmx, subsystem, and web.
issueID:ARIES-341
type:Improvement
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
texts:Augment Aries OBR Application Resolver to have equivalent function to the geronimo OBR resolver.
While we were spinning the 0.1 release Geronimo needed a resolver that worked with OBR 1.6 so they forked the Aries resolver. The geronimo resolver now has function that is not in the aries resolver. Since the aries resolver now works with OBR 1.6 if we can get the geronimo enhancements into the Aries one we can have a single OBR resolver.
I believe the only enhancement that the Geronimo resolver now has is that it can handle optional dependencies in addition to required ones.
issueID:ARIES-342
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/InternalRecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
texts:Blueprint leaking memory in multi-framework environment
With the current AriesBundleTrackerCustomizer that allows one Blueprint container to track composite sub-frameworks, the blueprint extender class leaks memory in that it never disposes of existing blueprint containers. The reason for this behaviour is that the bundle tracker to the composite bundle is deregistered on stopping, which is before any bundles inside the composite bundle are stopped.
issueID:ARIES-343
type:Bug
changed files:
texts:AbstractServiceRegistryContext caches BundleContexts inappropriately
We've recently made a change to AbstractServiceRegistryContext so that it gets passed a BundleContext on construction and caches it. This creates problems down the line because utility bundles will end up using their own bundle context for lookups instead of the context of the calling bundle. I've seen this behaviour in calls to ServiceHelper.findService().
issueID:ARIES-344
type:Bug
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/WarToWabConverter.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
application/application-converters/src/main/java/org/apache/aries/application/converters/WabConverterService.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterService.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConversion.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConverter.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationImpl.java
web/web-urlhandler/src/main/java/org/apache/aries/web/converter/WabConversion.java
texts:BundleConverter interface returns one-use-only inputstream
The org.apache.aries.application.management.BundleConverter interface has one method which returns an InputStream pointing to a converted bundle.
This InputStream , once read, can no longer be used. Users of the API may wish to read the InputStream several times and this is currently not possible.
Ideally, we would return something more useful from which we can obtain the InputStream (potentially several times) if necessary.
For example, instead of returning an InputStream we return a new Interface called BundleConversion.
This has two methods, initially, : getInputStream() and getBundleInfo().
(Although not strictly necessary - this second method would be useful)
issueID:ARIES-345
type:Bug
changed files:
texts:Make the blueprint tutorial wotk with the the post-release build
The tutorial needs updating to build with '0.2-incubating-SNAPSHOT' etc
issueID:ARIES-346
type:Bug
changed files:
texts:BlueprintExtender.cachePath() not unique
org.apache.aries.blueprint.container.BlueprintExtender.cachePath() designates a bundle-specific directory. The original version is not unique. Two .ebas might contain bundles of the same name and version, but different code.
issueID:ARIES-347
type:Improvement
changed files:sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/ComponentInfoImpl.java
sandbox/samples/goat/goat-api/src/main/java/org/apache/aries/samples/goat/info/RelationshipInfoImpl.java
sandbox/samples/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
sandbox/samples/goat/goat-web/src/main/java/org/apache/aries/samples/goat/web/ServerSideClass.java
sandbox/samples/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
sandbox/samples/goat/goat-bundlecontext-modelprovider/src/main/java/org/apache/aries/samples/goat/bundlecontextmodel/BundleContextInfoProvider.java
sandbox/samples/goat/goat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
sandbox/samples/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ModelInfoEnhancerService.java
sandbox/samples/goat/goat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
texts:GOAT: Move the implementations of RelationshipInfoProvider and ComponentInfoProvider out of the web bundle and into the api bundle
Not sure that they fit in the API bundle either - but it's better than having them as part of the web bundle.
issueID:ARIES-348
type:Bug
changed files:sandbox/samples/goat/goat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ServiceInterceptor.java
texts:GOAT:Fix the info-enhancer failing to start reliably
The info-enhancer sometimes starts and sometimes doesn't
issueID:ARIES-349
type:Task
changed files:subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/Subsystem.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemException.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemConstants.java
texts:Javadoc for Subsystem
Javadoc needed for Subsystems APIs.
issueID:ARIES-35
type:Task
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PropertyData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/TypeUtils.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/shared/RegistrableStandardEmitterMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/ServiceStateMBean.java
texts:Implement Service State MBean
Implement the Service State MBean which provides access to the service state of the framework (properties of a specific service, bundles using the service etc.)
issueID:ARIES-350
type:Improvement
changed files:
texts:Add drop down menus to the navigation pages on the Aries site
The list of items on the navigation pane was getting too long to fit so it was condensed down to a small set of headline items. The result is that people wanting to look at JIRA (say) have a two step process to go through. This could be avoided by having drop down menus on the navigation bar - this should be possible to do by:
1) Turning the Navigation Menu into a set of unordered list items and sub-lists
2) Adding to the site.css so that it displays sub-lists as a menu when the mouse is held over a top level list item.
issueID:ARIES-351
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:If an EBA contains a deployment.mf, we should not convert any invalid bunldes but we don't want to throw an exception either.
At the moment, we convert invalid bundles into valid ones even if a deployment.mf is present in an EBA. We should simply ignore the utility jars but we don't want to throw an exception either.
issueID:ARIES-352
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:Aries application name is not calculated correctly when it is not being provided
as titled, when the app name is not being provided in application.mf, it should be default to the eba file name.
issueID:ARIES-353
type:Improvement
changed files:spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/BaseActivator.java
texts:SPI-Fly needs changes in project structure, so that itests and other subprojects can be added there
I'd like to propose a change to the spi-fly project structure that would enable me to start contributing SPI-Fly itests and other bits and pieces. I think that the current spi-fly folder should contain a parent (pom) project, while its current contents should be used to create a new subproject (i.e. to spi-fly-core).
Unfortunately, the standard 'diff' command does not support such changes as the ones generated by 'svn move'. I think that git diff supports that, but I've never used git and I don't want to experiment now . As I'm unable to create a diff for 'svn move' that would contain all the necessary data (i.e. keep history), I'm wondering if you could do it? This would be a set of simple actions:
1) Create/add a directory for the new child - 'aries\spi-fly\spi-fly-core' (or some other name)
2) 'svn move' from 'aries\spi-fly\src' to 'aries\spi-fly\spi-fly-core\'
3) Changes also need to be applied to pom.xml files. Modified versions of these files will be attached in a moment.
I'll send an e-mail with a link to this JIRA to the e-mail thread 'SPI-Fly and provider-configuration file names that are different than the abstract service class' that was started some time ago on aries-dev by David Bosschaert and me.
Once these changes are available I'll start contributing some patches - first an itests project, then a sandbox with mavenified versions of David's AspectJ-based samples.
issueID:ARIES-354
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionToken.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:Update tranaction strategy to transaction attribute in blueprint transaction project
In blueprint transaction project, there are various places we refer to transaction strategy which is essentially the transaction attribute specified in EJB 3.0 spec. Since we are tring to propose the same transaction attribute (Required, Mandatory, RequiresNew, Supports, NotSupported, and Never) and their behavior in manging transaction boundaries as the EJB spec, I feel it makes sense to use transaction attribute instead of transaction strategy.
issueID:ARIES-355
type:Improvement
changed files:
texts:Web itests - clean-up
I've applied some minor changes to the WabConverterITest class. I took a look at this class after seeing logs from build #580 (WabConverterITest failed in #580).However, the changes I propose are not really related with the issue observed in #580 - they are rather meant to do clean up.
In order to get rid of the issue observed in #580 it might be necessary to increase the amount of time this test waits for the WAR URL Stream Handler Service. TIt currently waits 10 seconds. I guess this could be increased to 15 seconds:
URLStreamHandlerService warHandler = getOsgiService(URLStreamHandlerService.class,
"(url.handler.protocol=webbundle)", 15000);
or even to the default timeout which is 30 seconds.
Changes that applied in the patch
1. fout.close() added
2. Service tracker references kept and closed during test teardown
3. Service tracker used instead of bundleContext.getServiceReferences()
4. There's no need to check urlhandler bundle state. Checking if the WAR URL Stream Handler Service is present should be sufficient.
issueID:ARIES-356
type:Improvement
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryListContext.java
texts:Make jndi proxy creation more flexible and, in the aries context, optional
There are a lot of cases when the current proxy creation fails, such as when a class is in the set of interfaces we're trying to proxy. We should:
1.allow using cglib to proxy classes.
2. if the class can't be proxied, and a proxy is required (in the osgi: namespace) leave it out
3. (behavior up for debate) in the aries:services namespace, if there is a problem proxying, just return the raw service.
An example of when a service can't be proxied is it is a final class such as javax.mail.Session.
There's discussion on the dev list about what is appropriate for (3). I'm committing my proposal to give us something concrete to discuss.
issueID:ARIES-357
type:Improvement
changed files:
texts:Compatibility with both spring 3.x and spring 2.x

issueID:ARIES-358
type:Bug
changed files:application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRBundleInfo.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ResourceWrapper.java
texts:Generate a complete deployment manifest information for applications
For portability, the DEPLOYMENT.MF manifest needs to contain a complete list of bundles needed for the given application. However, right now an incomplete DEPLOYMENT.MF is generated since the bundles installed in the local framework are automatically removed in the resolved set returned by OBR.
See http://aries.15396.n3.nabble.com/Re-svn-commit-r957403-in-incubator-aries-trunk-application-application-itests-src-test-java-org-apac-td922510.html#a922510 for more information,.
issueID:ARIES-359
type:New Feature
changed files:application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
application/application-management/src/main/java/org/apache/aries/application/management/repository/ApplicationRepository.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataFactoryImpl.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkFactoryImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConversion.java
application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
application/application-utils/src/main/java/org/apache/aries/application/utils/service/ServiceCollection.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepository.java
application/application-runtime-repository/src/main/java/org/apache/aries/application/runtime/repository/BundleRepositoryManagerImpl.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkConfiguration.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadataFactory.java
application/application-converters/src/main/java/org/apache/aries/application/converters/WabConverterService.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkFactory.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/ContextException.java
application/application-utils/src/main/java/org/apache/aries/application/utils/AppConstants.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
application/application-api/src/main/java/org/apache/aries/application/management/ManagementException.java
application/application-utils/src/main/java/org/apache/aries/application/utils/service/ArrayServiceList.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadataFactory.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataFactoryImpl.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java
texts:Implement an isolated application runtime
The Apache Aries application documentation (http://incubator.apache.org/aries/applications.html ) states, "An Aries application isolates the OSGi services offered by its contained modules so that they are not visible outside the application unless explicitly configured to be exported from the application." This JIRA is being raised for the work which will provide a new runtime within the application module that will implement this isolation. This first implementation will be based on the multi-framework API in Equinox 3.5.
Each application's Deployed-Content will be installed into its own isolated framework. These application frameworks will all be children of a single framework or 'shared bundle space' into which applications' dependencies will be installed.
issueID:ARIES-36
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/cm/ConfigurationAdminMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PropertyData.java
texts:Implement ConfigurationAdmin MBean
Implement the MBean for Config Admin
issueID:ARIES-360
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
texts:Blueprint proxying for java.* classes fails second time
When I restart a bundle containing a blueprint bean with some interceptors (so that it undergoes proxying) I get the following exception out of the ASM proxying code. This does not happen the very first time I start the bundle, but each subsequent time.
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to proxy bean for interceptors: org.apache.aries.blueprint.proxy.UnableToLoadProxyException: java.lang.ClassNotFoundException: org.apache.aries.blueprint.proxy.java.util.$ArrayList573907509
at org.apache.aries.blueprint.proxy.AsmInterceptorWrapper.createProxyObject(AsmInterceptorWrapper.java:148)
at org.apache.aries.blueprint.container.BeanRecipe.addInterceptors(BeanRecipe.java:651)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:697)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:624)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:315)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:213)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:453)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:315)
at java.util.concurrent.FutureTask.run(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:110)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:219)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:898)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:920)
at java.lang.Thread.run(Thread.java:736)
issueID:ARIES-361
type:New Feature
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ParsedServiceElementsImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ImportedService.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/PostResolveTransformer.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataImpl.java
util/src/main/java/org/apache/aries/util/filesystem/IDirectory.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ParserProxy.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-api/src/main/java/org/apache/aries/application/modelling/DeploymentMFElement.java
application/application-api/src/main/java/org/apache/aries/application/modelling/WrappedServiceMetadata.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRBundleInfo.java
application/application-api/src/main/java/org/apache/aries/application/management/BundleInfo.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRCapability.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/PlatformRepository.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModellingConstants.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/utils/ModellingHelper.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ApplicationResourceImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ResourceType.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ExportedBundle.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
application/application-api/src/main/java/org/apache/aries/application/modelling/DeployedBundles.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedBundleImpl.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataFactoryImpl.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ExportedServiceImpl.java
application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
application/application-api/src/main/java/org/apache/aries/application/Content.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResource.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ServiceDeclarationImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModellingManagerImpl.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/MessageUtil.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/internal/DefaultPlatformRepository.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/internal/MessageUtil.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedServiceImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ImportedPackage.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModellingManager.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/WrappedReferenceMetadata.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ParsedServiceElements.java
application/application-api/src/main/java/org/apache/aries/application/modelling/Consumer.java
application/application-utils/src/main/java/org/apache/aries/application/utils/FilterUtils.java
application/application-api/src/main/java/org/apache/aries/application/InvalidAttributeException.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ParserProxyImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/ModelledBundleResource.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractExportedBundle.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadataFactory.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/BundleResourceTransformer.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
application/application-utils/src/main/java/org/apache/aries/application/utils/AppConstants.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ExportedBundleImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ExportedPackageImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java
util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResourceManager.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ExportedService.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/MessageUtil.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/DeployedBundlesImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/Provider.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/PackageRequirementMerger.java
application/application-utils/src/main/java/org/apache/aries/application/utils/ServiceDeclarationFactory.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedPackageImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ImportedBundle.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/utils/impl/ModellingHelperImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ExportedPackage.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadata.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DefaultPostResolveTransformer.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/RepositoryGenerator.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/BundleResource.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModellerException.java
texts:Provisioning changes required to support application isolation
ARIES-359 will implement new runtime support for application isolation. This JIRA is raised to track the associated changes required by the provisioning logic, plus an additional application.mf header necessary to enforce specific wiring from applications' isolated frameworks to bundles in the shared bundle space. Plug points will be provided to to integrate application server runtime-specific extension and validation logic.
issueID:ARIES-362
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:When checking for compatible namespaces, the namespace registry does not catch NoClassDefFoundError

issueID:ARIES-363
type:Improvement
changed files:
texts:SPI-Fly needs itests subproject - a project with Pax Exam tests
SPI-Fly requires a new subproject dedicated to Pax Exam. Attaching a patch which introduces such project together with a test that verifies if SPIBundleTrackerCustomizer properly analyzes bundles available in the container.
issueID:ARIES-364
type:Improvement
changed files:
texts:Aries itests projects need to use version 1.2 of the Servicemix depends-maven-plugin
All Aries itests projects need to generate a dependencies.properties file, so that Pax Exam based tests can properly retrieve versions of artifacts to be used at runtime. Some Aries projects use maven-paxexam-plugin to generate the dependencies.properties file, but most of them use Servicemix depends-maven-plugin. Unfortunately, the version of depends-maven-plugin used in most of Aries projects (1.1) is buggy. The generated dependencies.properties file sometimes contains resolved snashot versions (i.e. 0.2-incubating-20100717.020505-16) instead of the base versions (i.e. 0.2-incubating-SNAPSHOT). This causes Pax Exam tests to fail from time to time with an exception similar to this one:
java.lang.RuntimeException: URL
[mvn:org.apache.aries/org.apache.aries.util/0.2-incubating-20100717.020505-16]
could not be resolved.
at org.ops4j.pax.url.mvn.internal.Connection.getInputStream(Connection.java:195)
at java.net.URL.openStream(URL.java:1010)
at org.ops4j.pax.runner.platform.internal.StreamUtils.streamCopy(StreamUtils.java:112)
at org.ops4j.pax.runner.platform.internal.PlatformImpl.download(PlatformImpl.java:631)
at org.ops4j.pax.runner.platform.internal.PlatformImpl.downloadBundles(PlatformImpl.java:407)
at org.ops4j.pax.runner.platform.internal.PlatformImpl.start(PlatformImpl.java:186)
at org.ops4j.pax.runner.Run.startPlatform(Run.java:671)
at org.ops4j.pax.runner.Run.start(Run.java:220)
at org.ops4j.pax.runner.Run.start(Run.java:176)
...
This issue has already been fixed in SMX depends-maven-plugin. For details see this SMX revision:
http://svn.apache.org/viewvc?view=revision&revision=770436
and the fix is availble in version 1.2 of the plugin.
Patch coming soon.
issueID:ARIES-365
type:Bug
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
texts:some improvement to the parser class
While prototyping message driven service name space handler, I ran into the following with Parser.java
1. the parseElement method seems to assume the beanMetadata is always not the top element and this may not be true always. It is better to check if the enclosingComponent is null to determine is the bean is top level or not.
2. the parseElement method doesn't process ServiceMetadata type
issueID:ARIES-366
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ExecutionContext.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:Provide property injection for properties with overloaded setter method
When injecting bean property with overloaded setter method the framework returns an exception:
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to find property descriptor <bean-property-setter> on class <bean-class>
Apparently, behaviour for this case was relaxed in Enterprise OSGI 4.2 spec (see section 121.5.7):
"There should only be one set method with a single argument for a specific property. If overloaded properties are
encountered, the chosen set method is unspecified."
Taking into account origin of the Blueprint service and possible migration paths for future users I believe the best case would be to follow Spring 3.x behaviour regarding the case above (just to minimize surprises).
ps:
For user-forum discussion see:
http://mail-archives.apache.org/mod_mbox/incubator-aries-user/201007.mbox/%3C4c446974045723.96045080@wp.pl%3E
issueID:ARIES-367
type:Bug
changed files:samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
texts:AriesTrader - incompatible column warnings when reinitializing the db tables using jpa

issueID:ARIES-368
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-util/src/main/java/org/apache/aries/samples/ariestrader/util/TradeConfig.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/JNDIHelper.java
texts:Samples should lookup osgi services spec compliant using "osgi:service" rather than "aries:services" unless specific aries:service capabilities are needed
Currently the samples use a jndi prefix of "aries:services" rather than the spec compliant "osgi:service". Up until now the results of these 2 calls has been the same. However, changes are being implemented to make them different. Unless there is a specific need for aries specific capabilities our samples should use the osgi:service prefix.
issueID:ARIES-369
type:New Feature
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:Support transaction configuration at the blueprint bundle level
<blueprint>
<tx:transaction value="Required" />
<bean .... >
</blueprint>
Also, we want to allow users to use the method attribute:
<blueprint>
<tx:transaction method="insert*" value="Required" />
<bean .... >
</blueprint>
Of coursre, bean-level definitions should override bundle-wide definitions.
issueID:ARIES-370
type:Improvement
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
texts:Ensure custom element are parsed after blueprint element in Parser.loadComponents
Currently, when we load components in Parser.java, for the child nodes of root, we parse blueprint elements and custom elements based on the order specified in the blueprint definition XML. It is possible when we are parsing the custom element that contains a global configuration for the other blueprint components before the other blueprint components are parsed (and registered in component definition registry).
Proposed is a change to ensure we always finish parsing blueprint components first and ensure they are registered in the component definition registry before we start to pass custom elements. This way, if we support bundle wide transaction, we can easily apply it to all the blueprint components that has been registered in the component definition registry.
issueID:ARIES-371
type:New Feature
changed files:quiesce/quiesce-api/src/main/java/org/apache/aries/quiesce/manager/QuiesceManager.java
quiesce/quiesce-manager/src/main/java/org/apache/aries/quiesce/manager/impl/Activator.java
quiesce/quiesce-manager/src/main/java/org/apache/aries/quiesce/manager/impl/QuiesceManagerImpl.java
quiesce/quiesce-api/src/main/java/org/apache/aries/quiesce/manager/QuiesceCallback.java
quiesce/quiesce-api/src/main/java/org/apache/aries/quiesce/participant/QuiesceParticipant.java
texts:Add functionality to allow quiescing of bundles
There is a need to allow bundles to quiesce gracefully such that in-flight threads in a replaced module are permitted to run to completion. This could allow updates to be made to applications without requiring them to be restarted. If a quiesce does not complete within a suitable time period (e.g. the time a blueprint reference waits), then we should forcefully stop the bundles! Note that this is not specific to blueprint but anyone that needs to be aware of the bundle lifecycle.
issueID:ARIES-372
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:More memory leaks in Aries stack
Starting and stopping managed bundles on a consistent bundles reveals another couple of leaks:
BlueprintEventDispatcher hangs on to BundleEvent and hence to Bundles
GlobalPersistenceManager in a nested framework environment hangs onto Bundles
Independently of starting and stopping the blueprint ParserService fills up the NameSpaceHandlerRegistry list of created namespace handlers.
issueID:ARIES-373
type:Improvement
changed files:
texts:Sample implementention of AspectJ-based SPI mechanisms for SPI-Fly
David Bosschaert some time ago contributed a set of Equinox Aspects-based examples showing how to use aspects to make SPI work inside an OSGi container. I promised to contribute an enhanced version of these mechanisms and integrate these into SPI-Fly /Maven projects, Pax Exam, etc./. I'll attach a patch with those changes in a moment.
Few important notes:
1. This is not intended to be committed directly to Aries SVN. The only purpose of this patch is to provide initial impl that could be used when doing additional experiments and evaluation. The patch is dirty, I was in hurry when doing it and there are lots of ugly pieces of code inside . If we decide to go with this approach, I'll prepare a clean patch once I'm back from vacation - in two weeks' time.
2. The problems that were identified in the discussion about using AspectJ in SPI-Fly haven't been resolved yet. This includes (but is not limited to):
being tightly coupled to Equinox; this piece of code is based on Equinox Aspects/Weaving; this will not work wit any other container
inability to tell AspectJ to run an aspect on behalf of other bundle; each bundle that wants to use these new features, needs to contain an aspect and other settings like a Require-Bundle header
3. This patch introduces a SPI-Consumer header and enhances the SPI-Provider header. A Pax Exam test show how to use this new functionality once you copy the aspect to your bundle and configure Require-Bundle header.
4. I haven't found the latest version of Equinox Weaving in any of publicly available Maven repos. That is why, these libraries will need to be copied manually to the itests project (to the weaverBundles subdirectory). I'll attach these bundles to this JIRA.
This patch is huge, so I guess there might some issues with applying it. If you have problems with that, let me know and I'll try to generate it again.
issueID:ARIES-374
type:New Feature
changed files:
texts:JPA Quiesce Participant support
The JPA container should be able to intgrate with the new Quiesce API
issueID:ARIES-375
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Update blueprint transaction schema from v1.0.0 to v1.1.0
Due to the recent change on the schema, it is due to update from v 1.0.0 to v1.1.0. The new blueprint transaction name space handler will handle blueprint definition XML uses either transaction v1.0.0 or v1.1.0
issueID:ARIES-376
type:Bug
changed files:
texts:[blueprint transaction] with the 1.1 schema, method is optional
With the new 1.1 schema, when method is not specified, it is equivalent to method="*".
The current code would not be able to get the transaction attribute for a particular method when the method attribute is omitted.
issueID:ARIES-377
type:Bug
changed files:
texts:Blueprint helloworld sample does not run due to incorrect config.ini
Hi,
I've just built the svn trunk (http://incubator.apache.org/aries/buildingaries.html)
and am trying the hello word (http://incubator.apache.org/aries/blueprinthelloworldtutorial.html).
Got some issues with the example. I'm not familiar with the magic that is used to generate the "config.ini" file for Equinox, but `Maven currently generates the following (incorrect) file:
osgi.bundles=\
...
org.apache.aries.samples.helloworld.blueprint.api-0.2-incubating-SNAPSHOT.jar@1,\
org.apache.aries.samples.helloworld.blueprint.server-0.2-incubating-SNAPSHOT.jar@1,\
org.apache.aries.samples.helloworld.blueprint.client-0.2-incubating-SNAPSHOT.jar@1
eclipse.ignoreApp=true
org.ops4j.pax.logging.DefaultServiceLog.level=DEBUG
In order to run the example, I need modify the file to switch the order of the "helloword" and "blueprint" words:
org.apache.aries.samples – .blueprint.helloworld. – api-0.2-incubating-SNAPSHOT.jar@1,\
org.apache.aries.samples – .blueprint.helloworld. – server-0.2-incubating-SNAPSHOT.jar@1,\
org.apache.aries.samples – .blueprint.helloworld. – client-0.2-incubating-SNAPSHOT.jar@1
What wizardry of the build system is responsible for the generation of config.ini and how can I fix this? I'm somewhat familiar with Maven, but the "bundle" packaging and its OSGi-plugins are totally new to me.
issueID:ARIES-378
type:Bug
changed files:
texts:Samples error after restart of Blog or AriesTrader sample using JPA
While running the Blog sample in the provided Blog-Assembly and the JPA EBA I noticed the following error. Starting the sample works as expected and everything works fine the first time. However, after stopping and then restarting the assembly the following error is encountered when trying to do anything that will access JPA persistence. I also noticed the same error using the AriesTrader sample when using JPA persistence (either application manager or container managed). If I used JDBC persistence for AriesTrader I did not encounter the error.
A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property
Here is the complete output with full stack trace from the Blog sample:
Problem accessing /org.apache.aries.samples.blog.web/ViewBlog. Reason:
There were errors initializing your configuration: <openjpa-2.0.0-beta3-r422266:926797 fatal user error> org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property.
at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602)
at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70)
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163)
at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151)
at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632)
at $Proxy9.getNoOfBlogEntries(Unknown Source)
at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89)
at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98)
at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by:
<openjpa-2.0.0-beta3-r422266:926797 nonfatal general error> org.apache.openjpa.persistence.PersistenceException: There were errors initializing your configuration: <openjpa-2.0.0-beta3-r422266:926797 fatal user error> org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property.
at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602)
at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70)
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163)
at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151)
at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632)
at $Proxy9.getNoOfBlogEntries(Unknown Source)
at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89)
at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98)
at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:208)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70)
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163)
at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151)
at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632)
at $Proxy9.getNoOfBlogEntries(Unknown Source)
at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89)
at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98)
at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.lang.RuntimeException: There were errors initializing your configuration: <openjpa-2.0.0-beta3-r422266:926797 fatal user error> org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property.
at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602)
at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70)
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163)
at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151)
at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632)
at $Proxy9.getNoOfBlogEntries(Unknown Source)
at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89)
at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98)
at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:308)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602)
at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193)
... 45 more
Caused by:
java.lang.RuntimeException: There were errors initializing your configuration: <openjpa-2.0.0-beta3-r422266:926797 fatal user error> org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property.
at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602)
at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70)
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163)
at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151)
at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632)
at $Proxy9.getNoOfBlogEntries(Unknown Source)
at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89)
at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98)
at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:308)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602)
at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70)
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163)
at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151)
at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632)
at $Proxy9.getNoOfBlogEntries(Unknown Source)
at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89)
at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98)
at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169)
at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
issueID:ARIES-379
type:Improvement
changed files:
texts:Update Samples to use Openjpa 2.0.0 rather than 2.0.0-beta3

issueID:ARIES-38
type:Task
changed files:jmx/jmx-api/src/main/java/org/osgi/jmx/framework/BundleStateMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/PackageStateMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/service/cm/ConfigurationAdminMBean.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/Activator.java
jmx/jmx-api/src/main/java/org/osgi/jmx/service/permissionadmin/PermissionAdminMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/service/provisioning/ProvisioningServiceMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/service/useradmin/UserAdminMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/Item.java
jmx/jmx-api/src/main/java/org/osgi/jmx/JmxConstants.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/FrameworkMBean.java
jmx/jmx-api/src/main/java/org/osgi/jmx/framework/ServiceStateMBean.java
texts:Setup modules for JMX component
Project & build setup for the JMX component
+ aries-jmx
aries-jmx-api
aries-jmx-core
issueID:ARIES-380
type:Bug
changed files:util/src/main/java/org/apache/aries/util/io/IOUtils.java
texts:IOUtils.getOutputStream bug; add unpackZip method
IOUtils.getOutputStream() should call mkdirs if given a file in the root directory. Also add IOUtils.unpackZip() method, and some more unit tests.
issueID:ARIES-381
type:Bug
changed files:application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
texts:Remove workaround for Equinox Bug 298894.
Remove workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=298894.
Call refreshPackages() on each bundle as it's uninstalled.
issueID:ARIES-382
type:Bug
changed files:
texts:Aries itests projects need to use version 1.2.1 of maven-paxexam-plugin
The Aries Jira issue related to servicemix-depends-plugin is ARIES-364.
The change that was made in maven-paxexam-plugin between version 1.2.0 and 1.2.1 is described here: http://issues.ops4j.org/browse/PAXEXAM-160
issueID:ARIES-384
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/repository/ApplicationRepository.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:ApplicationRepository should not use resolver to find the bundleInfo contained within itself
Currently, the ApplicationRepository uses the resolver to find the by value bundles. This is incorrect, as the repository xml describing by-value bundles was not known by the repository admin, because the repository xml was passed to resolver directly instead of going through repository admin. When trying to use resolver.getBundleInfo, it will search the bundle from repository admin's known repositories. Therefore, it will never get it. The fix for this is searching bundleInfo from AriesApplication's get bundleInfo, which makes more sense for the application repository.
The reason that the current test passed is that the no-op resolver's getBundleInfo was manupliated and return the byvalue bundles, which is not the case for the real obr resolver.
I will also use this bug to fix the potential NPE cases.
issueID:ARIES-385
type:Bug
changed files:
texts:Bug fixes for teh 0.2 incubating release
Two minor fixes in JPA.
1) java.lang.NullPointerException
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.stop(PersistenceBundleManager.java:641)
at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:655)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2190)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1172)
at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
at java.lang.Thread.run(Thread.java:619)
2)
Start Level Event Dispatcher] DEBUG org.apache.aries.jpa.container - Adding a provider:
{javax.persistence.spi.PersistenceProvider}
=
{javax.persistence.provider=org.apache.openjpa.persistence.PersistenceProviderImpl, service.id=39}
[Start Level Event Dispatcher] INFO org.apache.aries.jpa.container - No quiesce support is available, so persistence contexts will not participate in quiesce operations
java.lang.ClassNotFoundException: org.apache.aries.quiesce.participant.QuiesceParticipant
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:489)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:405)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:393)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:321)
at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:231)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1193)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.start(PersistenceBundleManager.java:622)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:782)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:773)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:754)
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:352)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:370)
at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1068)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:557)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:464)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:248)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:445)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:220)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:330)
issueID:ARIES-386
type:Bug
changed files:
texts:Improve runtime itest OBRAppManagerTest
The test of OBRAppManagerTest in runtime.itests has some verification code commented out, as it was not working. After some investigation, the commented out code was not working due to the invalid repository.xml url and the incomplete bundles.
issueID:ARIES-387
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:Ensure there is one setter that matches the type of the getter
Per discussion on devlist - http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201008.mbox/%3cAANLkTin8jmMkT2mSeX+PKqruG6=Et5z92ZFCbNM+J2c=@mail.gmail.com%3e
If there isn't one setter that matches the type of the getter, we need to throw ComponentDefinitionException and fail the creation of the bean.
issueID:ARIES-388
type:Improvement
changed files:
texts:Minor improvements to quiesce manager
A couple of minor niggles with the quiesce API and manager:
it would be nice if the quiesce manager returned a Future object that callers can block on rather than having to listen for BundleEvents
issueID:ARIES-389
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
texts:Problem with type converters which produce a null result.
The type converter in necessary in order to correctly deal with unconfigured aka null values.
You may have a look at our open source library under
http://maven.clazzes.org/org/clazzes/util/0.9.1/
where the classes are contained in the package org.clazzes.util.osgi.
When applying all this stuff on null config values in any aries blueprint version available to me at the time of writing, the null return value of the type converter has the effect, that the conversion algorithm in AggregateConverter.java continues with it's conversion machinery for all known types causing it to fail with an Exception.
However in "OSGi Service Platform Release 4, Service Compendium 4.2" in section 121.9.3 on pages 689-690, there is no hint ,taht the conversion algorithm should continue after step 2, when a type converter has been selected in step 1.
I will attach a fix, which fixes my problem for svn rev. 988025 on aries trunk.
Please review my patch and let me know, whether I shoukld improve it or you are able to apply it to the aries trunk.
Best regards, Wolfgang Glas
issueID:ARIES-39
type:Bug
changed files:
texts:The blueprint schema we currently use is outdated

issueID:ARIES-390
type:Bug
changed files:
texts:Deadlock in Blueprint service lookup
As described in https://issues.apache.org/jira/browse/GERONIMO-5554 there is potential deadlock in the Blueprint service code.
In particular, ServiceRecipe has a lock hierarchy of getting an instance lock on the ServiceRecipe instance and then getting the Blueprint container-wide lock for the blueprint repository. However, while the blueprint container is creating its instances a thread may also come into the ServiceRecipe lookup code already having the blueprint repository lock.
In such a case deadlock is possible because two threads can attempt to obtain the lock in either order.
issueID:ARIES-393
type:Bug
changed files:
texts:Blog Assembly is broken again :(
Since integrating the changes for isolation the blog sample assembly has been broken because it now needs two additional bundles.
issueID:ARIES-394
type:Bug
changed files:samples/blog/blog-persistence-jpa/src/main/java/org/apache/aries/samples/blog/persistence/jpa/BlogPersistenceServiceImpl.java
texts:Tidy up some minor issues in the blog sample
I've noticed that the JPA BlogPersistence service contains some code relating to a DataSource that is never hit. I think this is a hold over from the JDBC implementation, so I'll remove the code here.
issueID:ARIES-395
type:Bug
changed files:
texts:Remove .classpath, .project and .settings from svn

issueID:ARIES-396
type:Improvement
changed files:
texts:Move Subsystems to use org.apache.felix.bundlerepository instead of org.osgi.service.obr

issueID:ARIES-397
type:Improvement
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/AbstractServiceRegistryContext.java
texts:Enable ServiceRegistryContext caching override
Further to Aries-343, environments consuming jndi-url but not jndi-core need a way to work around the caching behaviour seen in AbstractServiceRegistryContext. Change the AbstractServiceRegistryContext constructors so that if a BundleContext is provided in the input environment under the JNDIConstants.BUNDLE_CONTEXT key, this BundleContext should be used in preference to the 'callerContext' argument. Although a BundleContext, it's not in this case the one that should be used.
issueID:ARIES-398
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/repository/ApplicationRepository.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepository.java
application/application-runtime-repository/src/main/java/org/apache/aries/application/runtime/repository/BundleRepositoryManagerImpl.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
texts:Cleanup in application runtime
There is various minor problems I have encountered in the new application runtime whlie playing around with update scenarios. I hope to check these in as I go along getting my scenario to work.
issueID:ARIES-399
type:Improvement
changed files:application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/runtime/AriesApplicationContextManager.java
application/application-api/src/main/java/org/apache/aries/application/management/UpdateException.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConverter.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationManager.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextManagerImpl.java
texts:Add update function and plug point to application api
In the application API updating an application can be achieved by uninstalling and then reinstalling it. An update method will allow to move from one deployment of an application to another deployment of the same application in one step.
The implementation should also provide a pluggable way to affect the update because there are several ways of affecting updates that depend on the deployment manifest changes. The default implementation to fall back to can simply uninstall and then reinstall under the covers.
issueID:ARIES-4
type:Task
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutablePassThroughMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/PassThroughMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/PassThroughMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/PassThroughRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MetadataUtil.java
texts:Support for pass-through metadata
When implementing a blueprint custom namespace handler with an underlying technology such as jaxb, the parser may already have an object created, so the namespace handler needs to be able to return this very instance and not force to recreate the object fully through BeanMetadata.
issueID:ARIES-40
type:Task
changed files:util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
application/application-api/src/main/java/org/apache/aries/application/ServiceDeclaration.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ServiceDeclarationImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataImpl.java
application/application-api/src/main/java/org/apache/aries/application/Content.java
application/application-utils/src/main/java/org/apache/aries/application/utils/AppConstants.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadata.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
texts:Move Application Metadata Processing from contrib to trunk
Move Application Metadata Processing from contrib to trunk.
The code processes an application description provided in a manifest format. I will document this on the wiki and post to the list to start a discussion.
issueID:ARIES-400
type:Improvement
changed files:subsystem/subsystem-executor/src/main/java/org/apache/aries/subsystem/executor/SimpleExecutor.java
subsystem/subsystem-executor/src/main/java/org/apache/aries/subsystem/executor/Activator.java
texts:Use Java Futures for Subsystem Admin
Subsystem Installation is asynchronous. The current API allows cancellations of an installation but this only cancels the current install. This can cause problems as what is "current" will change and can result in incorrect cancellations.
issueID:ARIES-401
type:Improvement
changed files:
texts:maven bundle plugin update from v 2.0.1 to 2.1.0
I still hits a NPE occasionally with 2.0.1 so I think we should try to upgrade to the latest 2.1.0 to see if it improves.
WARNING] Exception while updating local OBR: null
.lang.NullPointerException
at org.apache.felix.obrplugin.ObrUpdate.walkOnTree(ObrUpdate.java:541)
at org.apache.felix.obrplugin.ObrUpdate.updateRepository(ObrUpdate.java:239)
at org.apache.felix.obrplugin.ObrInstall.updateLocalBundleMetadata(ObrInstall.java:183)
at org.apache.felix.obrplugin.ObrInstall.execute(ObrInstall.java:142)
at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor
a:694)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifec
Executor.java:556)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.
issueID:ARIES-402
type:Bug
changed files:samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountProfileDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/AccountDataBeanImpl.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeConfigServlet.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/HoldingDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/QuoteDataBeanImpl.java
samples/ariestrader/modules/ariestrader-entities/src/main/java/org/apache/aries/samples/ariestrader/entities/OrderDataBeanImpl.java
texts:Update AriesTrader so that it loads the sql files to create DBs using getResource
Currently there is some pretty crazy code in the AriesTrader sample that recreates the databases on demand as requested by the user. This needs to be cleaned up so that it loads the sql from the bundle rather than expecting it to be available directly in the Equinox assembly or an expanded WAR file as was the case in the former DayTrader code. Also need to clean up some of the sql and entity column lengths so that they are consistent.
issueID:ARIES-403
type:Test
changed files:
texts:Add in new Blog itest to use quiesce

issueID:ARIES-404
type:Improvement
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
application/application-management/src/main/java/org/apache/aries/application/management/repository/ApplicationRepository.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/PlatformRepository.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedBundleImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkFactoryImpl.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataFactoryImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConversion.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConverter.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/ConversionException.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepository.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/runtime/LocalPlatform.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedServiceImpl.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModellingManager.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceImpl.java
application/application-runtime-repository/src/main/java/org/apache/aries/application/runtime/repository/BundleRepositoryManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/runtime/AriesApplicationContextManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java
application/application-api/src/main/java/org/apache/aries/application/InvalidAttributeException.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/ModelledBundleResource.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ParserProxyImpl.java
application/application-converters/src/main/java/org/apache/aries/application/converters/WabConverterService.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkFactory.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/ContextException.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ExportedBundleImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextManagerImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedPackageImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/utils/impl/ModellingHelperImpl.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/RepositoryGenerator.java
texts:Restructure spi packages to be more sensibly split
Currently, the API org.apache.aries.application.management package contains a great variety of user and implementer interfaces with widely different uses. However, they can nicely be split into user interface + spis where most of the spi concerns are orthogonal (on the interface level).
The groups proposed are (most of them depend on the org.apache.aries.application and org.apache.aries.application.management but are independent of other spi packages)
spi.convert for bundle conversion
spi.framework for the bundle framework implementation (depends on spi.repository)
spi.repository
spi.resolve
spi.runtime
spi.update (depends on spi.repository and spi.framework, however the package is expected to be far less stable in the near future so a separate package seemed appropriate).
issueID:ARIES-405
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
texts:getBundleImportedPackages() of FrameworkUtils does not split package declarations correctly
if the import package header has the following content:
junit.framework;resolution:=optional;version="[3.8.1,4)",org.apache.commons.logging;version="[1.0,2)"
then, it will split to 4 pieces:
junit.framework;resolution:=optional;version="[3.8.1
4)"
org.apache.commons.logging;version="[1.0,
2)"
Apparently, it is not correct.
issueID:ARIES-406
type:Bug
changed files:
texts:Regression in blueprint transactions support
The Blueprint transactions namespace used to default the transaction strategy to "Required" if it was not specified. This no longer happens.
<tx:transaction/> should mean the same thing as <tx:transaction method="*" value="Required"/>
issueID:ARIES-407
type:Bug
changed files:
texts:Java2 AccessControlExceptions when using TempBundleDelegatingClassLoader
I've added a patch for the fix. This was generated at the trunk level.
issueID:ARIES-408
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
util/src/main/java/org/apache/aries/util/ManifestHeaderUtils.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
texts:Consolidate Manifest header parsing/split logic in aries.utils
FrameworkUtils does not use common split utility method for manifest header process, which was reported by jira 405. However, the original fix for the jira-405 duplicates the code and make the future maintenance more difficult. The better fix will be to use the ManifestHeaderProcessor.split instead of the string's raw split.
issueID:ARIES-409
type:Bug
changed files:
texts:Fix samples to use version 1.1 of geronimo-jpa_2.0 spec.
The blog sample currently uses geronimo-jpa_2.0_spec-1.0.jar. There was an error in the packaging of this version which is corrected in geronimo-jpa_2.0_spec-1.1.jar. Fixing it will likely imply other minor changes in the blog sample JPA persistence project.
issueID:ARIES-41
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
texts:In JNDI ServiceHelper we should also check for the current thread's context classloader's parent
Hi,
In the ServiceHelper.getBundleContext(), if the current thread's context classloader is not an instance of BundleReference, we should also try to check its parent to see if it is an instance of BundleReference. If it is, then grab the bundle context accordingly. What do people think?
Proposed change:
ClassLoader cl = Thread.currentThread().getContextClassLoader();
if (cl instanceof BundleReference)
{ result = ((BundleReference)cl).getBundle().getBundleContext(); + }
else if (cl.getParent() instanceof BundleReference)
{ + result = ((BundleReference)cl.getParent()).getBundle().getBundleContext(); }
issueID:ARIES-410
type:Bug
changed files:
texts:Application itests fail intermittently
The application itests fail intermittently.
issueID:ARIES-411
type:Bug
changed files:samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BloggingServiceImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/ModelledBundleResource.java
application/application-noop-resolver/src/main/java/org/apache/aries/application/resolver/noop/impl/NoOpResolver.java
texts:Apache Aries blog example currently uses the no-op resolver instead of the obr resolver to resolve the app
Currently our blog samples does not use the obr resolver to resolve the application. We need to make the blog sample exercises the resolving logic.
issueID:ARIES-412
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:FinalModifierExceptions as a result of Quiesce changes to add proxies for services
I've noticed that we are now receiving FinalModifierExceptions when running the samples (Blog and AriesTrader). It seems to me that these are the result of some changes for quiesce support for JPA. I'm not quite sure of the reason or purpose for the changes - but the function seems to be creating proxies for services using the AsmInterceptorWrapper for items that we did not previously create Asm proxies. Not all of these objects work well as proxies and hence these exceptions. This can be easily seen running either the Blog or AriesTrader samples after change rev. 995797 for ARIES-383 ( https://issues.apache.org/jira/browse/ARIES-383 )
org.apache.aries.blueprint.proxy.FinalModifierException
at org.apache.aries.blueprint.proxy.ProxySubclassGenerator.scanForFinalModifiers(ProxySubclassGenerator.java:323)
at org.apache.aries.blueprint.proxy.ProxySubclassGenerator.getProxySubclass(ProxySubclassGenerator.java:118)
at org.apache.aries.blueprint.proxy.ProxySubclassGenerator.newProxySubclassInstance(ProxySubclassGenerator.java:155)
at org.apache.aries.blueprint.proxy.AsmInterceptorWrapper.createSubclassProxy(AsmInterceptorWrapper.java:163)
at org.apache.aries.blueprint.proxy.AsmInterceptorWrapper.createProxyObject(AsmInterceptorWrapper.java:85)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:463)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:120)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse.getService(ServiceUse.java:118)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:445)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:430)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:666)
at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.addingService(NamespaceHandlerRegistryImpl.java:90)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:896)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:233)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:840)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:124)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:930)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:220)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:757)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:712)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:129)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:206)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:506)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:388)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:174)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:646)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:314)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:213)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:637)
issueID:ARIES-413
type:Improvement
changed files:
texts:Injecting an entity manager using factory method
It is only possible to use setter injection when injecting a JPA entity manager. The following injection types should also be supported since they are supported in the Blueprint spec:
Constructor injection
Factory method injection
Factory class injection
An example of usage could be (using a factory method):
<bean id="beanImpl" class="MyClass" factory-method="create">
<argument>
<jpa:context property="entityManager" unitname="myPU"/>
</argument>
</bean>
issueID:ARIES-414
type:Bug
changed files:
texts:user name fiel is not accepting special charectots.
i have enterd special characters in user name field but its not accepting special characters.
user name :asd*&123.
issueID:ARIES-415
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
texts:Fix imports for JNDI url bundle and minor tweak to ProxyFactory
Also update the ProxyFactory to use List<Class<?>> rather than Class<?>[]. Then filter non-interfaces out of the list for the JdKProxyFactory.
Alasdair
issueID:ARIES-416
type:Bug
changed files:
texts:after login into the page its not showing the welcome page directly its showing inbox page.
giving valid username,valid password,click on enter.
system should not displays welcome page.
system displays inbox page.
issueID:ARIES-417
type:Improvement
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ProviderAdminService.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-api/src/main/java/org/apache/aries/jndi/urls/URLObjectFactoryFinder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIContextManager.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/JREInitialContextFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerServiceFactory.java
jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIProviderAdmin.java
texts:Add Generics to JNDI and allow more flexible mechanism to plug URL ObjectFactories in.
1. Make the JNDI code support generics in the API and implementation.
2. Common up the code for finding JNDI URL ObjectFactory implementations.
3. Allow an extra plug point for finding URL ObjectFactories. Some non-OSGi aware URL ObjectFactories may be provided in some environments and may therefore not be in the service registry. Although the best solution is to get them into the service registry that only works if you know all of them, as a result I'll add a plug point that allows some "smart" code to use some heuristics to find stuff.
issueID:ARIES-418
type:Bug
changed files:application/application-converters/src/main/java/org/apache/aries/application/converters/WabConverterService.java
texts:Blog assembly does not work
The blog assembly is unable to run the blog sample, and explodes with a blueprint timeout:
[Blueprint Extender: 1] ERROR
org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to
start blueprint container for bundle
org.apache.aries.application.install due to unresolved dependencies
[(objectClass=org.apache.aries.application.management.AriesApplicationManager)]
java.util.concurrent.TimeoutException
at
org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:273)
at
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:637)
[Blueprint Extender: 2] ERROR
org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to
start blueprint container for bundle
org.apache.aries.application.management due to unresolved dependencies
[(objectClass=org.apache.aries.application.ApplicationMetadataFactory),
(objectClass=org.apache.aries.application.management.spi.resolve.DeploymentManifestManager),
(objectClass=org.apache.aries.application.management.spi.convert.BundleConverter),
(objectClass=org.apache.aries.application.DeploymentMetadataFactory),
(objectClass=org.apache.aries.application.management.spi.runtime.LocalPlatform),
(objectClass=org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager)]
java.util.concurrent.TimeoutException
at
org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:273)
at
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:637)
[Blueprint Extender: 2] ERROR
org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to
start blueprint container for bundle
org.apache.aries.application.deployment.management due to unresolved
dependencies
[(objectClass=org.apache.aries.application.modelling.ModellingManager),
(objectClass=org.apache.aries.application.modelling.ModelledResourceManager),
(objectClass=org.apache.aries.application.management.spi.resolve.AriesApplicationResolver),
(objectClass=org.apache.aries.application.PostResolveTransformer),
(objectClass=org.apache.aries.application.management.spi.runtime.LocalPlatform),
(objectClass=org.apache.aries.application.modelling.utils.ModellingHelper)]
java.util.concurrent.TimeoutException
at
org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:273)
at
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:637)
issueID:ARIES-419
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Provide service interceptors in addition to blueprint quiesce
The new blueprint quiesce work has added a service interceptor. I think it would be a good imrpovement to allow other interceptors to be pulled from the component registry to be used on services in the same way as is allowed for beans.
issueID:ARIES-42
type:Task
changed files:application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataImpl.java
texts:Compilation problem when using JDK 1.5

issueID:ARIES-422
type:Improvement
changed files:sandbox/samples/words-sample/words-web/src/org/apache/words/web/AssociateWord.java
sandbox/samples/words-sample/words-api/src/org/apache/words/AssociationRecorderService.java
sandbox/samples/words-sample/words-jpa/src/org/apache/words/jpa/Association.java
sandbox/samples/words-sample/words-jpa/src/org/apache/words/jpa/Recorder.java
sandbox/samples/words-sample/words-jpa/src/org/apache/words/jpa/WordLister.java
sandbox/samples/words-sample/words-api/src/org/apache/words/WordGetterService.java
texts:Wordassociation: assembly broken and instruction improvements
The recent changes which broke all the other assemblies have broken the wordassociation assembly as well.
Also, the sample would be easier to type if it is called 'words' instead of 'wordassociation' (which I just mis-typed twice trying to enter this remark!).
Finally, we should be able to run it using Eclipse->Run as, which would look smoother.
issueID:ARIES-424
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Under certain circumstances, the blueprint container try to register a service while the bundle is stopping
java.lang.IllegalStateException: Can only register services while bundle is active or activating
       at org.apache.felix.framework.Felix.registerService(Felix.java:2817)
       at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:251)
       at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:388)
       at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:166)
       at org.apache.aries.blueprint.container.BlueprintContainerImpl.notifySatisfaction(BlueprintContainerImpl.java:596)
       at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.setSatisfied(AbstractServiceReferenceRecipe.java:393)
       at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceRemoved(AbstractServiceReferenceRecipe.java:385)
       at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:355)
       at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:864)
       at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:732)
       at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:662)
       at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3726)
       at org.apache.felix.framework.Felix.access$000(Felix.java:80)
       at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:717)
       at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:135)
       at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:129)
       at org.apache.aries.blueprint.container.ServiceRecipe.unregister(ServiceRecipe.java:183)
       at org.apache.aries.blueprint.container.BlueprintContainerImpl.unregisterServices(BlueprintContainerImpl.java:657)
       at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:806)
       at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:204)
       at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:196)
       at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:385)
       at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:453)
       at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237)
       at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)
       at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:800)
       at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:728)
       at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
       at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3715)
       at org.apache.felix.framework.Felix.stopBundle(Felix.java:2180)
       at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1172)
       at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
       at java.lang.Thread.run(Thread.java:637)
issueID:ARIES-425
type:Bug
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedServiceImpl.java
texts:OBR Repository generation is broken - it produces multiple requirements for blueprint services
A sample xml snippet from the blog-biz project follows
<resource id="org.apache.aries.samples.blog.biz/0.3.0.incubating-SNAPSHOT" presentationname="Apache Aries blog sample" symbolicname="org.apache.aries.samples.blog.biz" uri="" version="0.3.0.incubating-SNAPSHOT">
<capability name="bundle">
<p n="presentationname" v="Apache Aries blog sample"/>
<p n="version" t="version" v="0.3.0.incubating-SNAPSHOT"/>
<p n="symbolicname" v="org.apache.aries.samples.blog.biz"/>
<p n="Bundle-ManifestVersion" v="2"/>
<p n="mandatory" v=""/>
</capability>
<capability name="service">
<p n="service" v="service"/>
<p n="osgi.service.blueprint.compname" v="bloggingServiceComponent"/>
<p n="objectClass" t="set" v="org.apache.aries.samples.blog.api.BloggingService"/>
<p n="service.ranking" v="0"/>
<p n="mandatory" v=""/>
</capability>
<capability name="service">
<p n="service" v="service"/>
<p n="objectClass" t="set" v="org.apache.aries.samples.blog.api.BloggingService"/>
<p n="service.ranking" v="0"/>
<p n="mandatory" v=""/>
</capability>
<require extend="false" filter="(&(package=org.apache.aries.samples.blog.api)(version>=0.3.0)(version<=0.4.0)(!(version=0.4.0)))" multiple="false" name="package" optional="false">Requires package with attributes
{package=org.apache.aries.samples.blog.api, version=[0.3.0,0.4.0)}
</require>
<require extend="false" filter="(&(package=org.apache.aries.samples.blog.api.persistence)(version>=0.3.0)(version<=0.4.0)(!(version=0.4.0)))" multiple="false" name="package" optional="false">Requires package with attributes
{package=org.apache.aries.samples.blog.api.persistence, version=[0.3.0,0.4.0)}
</require>
<require extend="false" filter="(&(package=org.apache.aries.samples.blog.api.comment.persistence)(version>=0.3.0)(version<=0.4.0)(!(version=0.4.0)))" multiple="false" name="package" optional="false">Requires package with attributes
{package=org.apache.aries.samples.blog.api.comment.persistence, version=[0.3.0,0.4.0)}
</require>
<require extend="false" filter="(&(package=org.osgi.service.blueprint)(version>=1.0.0)(version<=2.0.0)(!(version=2.0.0)))" multiple="false" name="package" optional="false">Requires package with attributes
{package=org.osgi.service.blueprint, version=[1.0.0,2.0.0)}
</require>
<require extend="false" filter="(&(service=service)(objectClass=org.apache.aries.samples.blog.api.comment.persistence.BlogCommentService)(mandatory:<*service))" multiple="false" name="service" optional="true">Requires service with attributes
{service=service, objectClass=org.apache.aries.samples.blog.api.comment.persistence.BlogCommentService}</require>
<require extend="false" filter="(&(service=service)(objectClass=org.apache.aries.samples.blog.api.persistence.BlogPersistenceService)(mandatory:<*service))" multiple="false" name="service" optional="false">Requires service with attributes {service=service, objectClass=org.apache.aries.samples.blog.api.persistence.BlogPersistenceService}</require>
<require extend="false" filter="(&(service=service)(objectClass=org.apache.aries.samples.blog.api.comment.persistence.BlogCommentService)(mandatory:<*service))" multiple="false" name="service" optional="false">Requires service with attributes {service=service, objectClass=org.apache.aries.samples.blog.api.comment.persistence.BlogCommentService}
</require>
<require extend="false" filter="(&(service=service)(objectClass=org.apache.aries.samples.blog.api.persistence.BlogPersistenceService)(mandatory:<*service))" multiple="false" name="service" optional="false">Requires service with attributes
{service=service, objectClass=org.apache.aries.samples.blog.api.persistence.BlogPersistenceService}
</require>
</resource>
issueID:ARIES-426
type:Improvement
changed files:jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/BlueprintState.java
jmx/jmx-blueprint-api/src/main/java/org/apache/aries/jmx/blueprint/BlueprintStateMBean.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/RegistrableStandardEmitterMBean.java
texts:The Blueprint JMX layer should send notifications for each blueprint event

issueID:ARIES-427
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/Foo.java
texts:Get rid of cglib which doesn't provide anything compared to asm

issueID:ARIES-428
type:Bug
changed files:
texts:blog-web bundle has .class files in the root, they should be in WEB-INF

issueID:ARIES-429
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ExtendedBlueprintContainer.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
texts:Add an option on the <cm:property-placeholder/> element to reload the whole blueprint container if the configuration changes

issueID:ARIES-43
type:Bug
changed files:
texts:New helloworld sample isn't built because of missing pom
The pom missing should be here: trunk/blueprint/blueprint-helloworld/pom.xml
issueID:ARIES-430
type:New Feature
changed files:jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/Activator.java
jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/JmxWhiteboardSupport.java
jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/MBeanHolder.java
texts:Whiteboard registration support for JMX DynamicMBeans
As proposed on dev [1] I have hacked together a small piece of code which implements support for the whiteboard pattern for registering MBeans with MBean servers.
The code is in my Sling whiteboard at http://svn.apache.org/repos/asf/sling/whiteboard/fmeschbe/jmx-whiteboard but is intended to be added to the Aries JMX functionality.
The single-class implementation picks up DynamicMBean servies registered as "javax.management.DynamicMBean". Each such service is registered with each registered MBeanServer service (similar to how the framework MBeans are registered by jmx.core). The JMX ObjectName can either be provided with a "jmx.objectname" service registration property (String type) or the DynamicMBean may implement the MBeanRegistration interface in which case the ObjectName is provided by the preRegister method during registration.
This is just a first hack which has not really been tested but mainly serves to show the idea. It is currently implemented as a Declarative Services component but may as well be implemented as a regular class using ServerTracker instances and instantiated by the BundleActivator (which may be a good idea to make this as widely usable as possible - for example in Sling we don't currently use Blueprint, so a Blueprint based implementation would be a no-go for us )
If there would be interest in this, I would try to test and validate this piece with the hopes to get a release soon (may be released independently, hint hint )
[1] http://markmail.org/message/p464v4gst2uifm5h
issueID:ARIES-431
type:Improvement
changed files:jndi/jndi-legacy-support/src/main/java/org/apache/aries/jndi/legacy/support/LegacyInitialContextFinder.java
jndi/jndi-legacy-support/src/main/java/org/apache/aries/jndi/legacy/support/Activator.java
texts:Add support for "bad" OSGi Web container implementations
I was playing around with the Jetty implementation of the OSGi web container chapter. It has some interesting behaviours, the most significant is it sets the java.naming.initial.context system property, but doesn't register it in the service registry. It relies on the default JDK JNDI behaviour which uses the thread context classloader to load the initial context factory. Gemini Web has a similar bug. I can't fix those web container implementations, but since I want to be able to use these I need a solution. Rather than a bespoke solution that works for me with Jetty I'll check in a new project which will provide a bundle to fix these buggy OSGi Web container implementations.
issueID:ARIES-432
type:Bug
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
texts:Remove the system.out.println in our production code
There are a couple of places we print out some messages by using system.out in our non-test code. This is not good.
issueID:ARIES-433
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
texts:Equals method do not work when using JDK proxies

issueID:ARIES-434
type:Improvement
changed files:web/web-urlhandler/src/main/java/org/apache/aries/web/converter/impl/WarToWabConverterImpl.java
texts:Sort the imported package to make it easier to read

issueID:ARIES-435
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Fix a problem when the bundle is being stopped while the blueprint container is being created
It can lead to an exception being thrown because the blueprint container tries to register itself in the osgi registry while the bundle is stopping already.
issueID:ARIES-436
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:If no interceptors are configured, the service should not be proxied when exposed

issueID:ARIES-437
type:Bug
changed files:
texts:Defaults to ASM if available for proxying instead of JDK

issueID:ARIES-438
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:When proxying with ASM, delegate to sub-class proxying instead

issueID:ARIES-439
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
texts:Improve error messages produced by Framework MBean when a bundle install or start occurs
Right now when starting or installing bundles you get a pretty bland message indicating the failure, without any details. So you know it failed, but not why.
I'll improve the messages to include the message from the OSGi framework tool.
Alasdair
issueID:ARIES-44
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:BeanProcessor.afterInit is not invoked.
The afterInit method on the bean processor interface isn't actually invoked today.
BeanRecipe.internalCreate needs updating to call out to beforeInit and afterInit.
issueID:ARIES-440
type:Improvement
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-api/src/main/java/org/apache/aries/jndi/urls/URLObjectFactoryFinder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
texts:Improve the behaviour of OSGi in keeping with the OSGi way
1. The core does the following:
i) Find an ICF service
ii) Get ICF
iii) Create a Context
iv) release ICF service
v) return Context
This means that the ICF cannot manage the lifecycle because it doesn't know when the context is finished with. We should only release the service when the context has been closed.
2. We do a lot of queries, which is kind of expensive. If we used a service tracker we could remove all the queries and it would be more efficient and perform some amount better.
3. Got some things wrong on ARIES-417. e.g.
i) The uber bundle didn't export the package for the URLObjectFactoryFinder
ii) The URLObjectFactoryFinder doesn't get the environment, so it can't do things based on the JNDI environment, this is bad.
issueID:ARIES-442
type:Improvement
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
texts:Downgrade exception logging from error to debug within TxInterceptorImpl
Exception logging within the TxInterceptorImpl class is currently done at error level, however in many cases these exceptions are expected and shouldn't be cause for concern. For example, I have an application that gracefully handles txn rollbacks due to database deadlocks and retries them, so I don't want the log file to get filled with stack traces unnecessarily. Currently the only workaround is to turn off logging for TxInterceptorImpl specifically.
issueID:ARIES-443
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
texts:Downgrade exception logging from error to debug within proxy Collaborator
Exception logging within the proxy Collaborator class is currently done at error level, however in many cases these exceptions are expected and shouldn't be cause for concern. Currently the only workaround is to turn off logging for Collaborator specifically. This is related to ARIES-442.
issueID:ARIES-444
type:Bug
changed files:application/application-default-local-platform/src/main/java/org/apache/aries/application/local/platform/impl/DefaultLocalPlatform.java
texts:Register the default local platform service in a separate bundle rather than in the appliation utils
There are two issues this jira is trying to address:
1. The default local platform service cannot be excluded when an application server consumes the application bundles.
At the moment, the default local platform service is registered by the bundle of application utils. An application server normally wishes to supply their own platform service. If we don't separate this service from the application utils bundle, the default service will make its way to an application server's service registry. It will be wired to Aries Application manager bundle before the good dedicated local platform service becomes available. This will cause unpredictable behaviour.
2. In application itests, we need to get rid of the hack, blocking one bundle from starting until another bundle has started, because a real fix has been delivered for the the problem of the hack tring to solve.
issueID:ARIES-445
type:Bug
changed files:application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
texts:Isolated framework imports are incorrect
org.apache.aries.application.framework.management.BundleFrameworkManager constructs new isolated osgi frameworks. However, the import statements it constructs to import bundles from the parent framework are incorrect.
The InstallUtils class needs to be updated to construct the correct imports statements.
This is only exposed if an application depends on a bundle from the SharedBundleFramework
issueID:ARIES-446
type:Bug
changed files:
texts:AriesApplicationManager registers an application BundleRepository even when one already exists
org.apache.aries.application.AriesApplicationManager registers a BundleRepository for the content of the application being installed.
This should not be done if the caller has already registered a Repository for the application.
issueID:ARIES-447
type:Bug
changed files:
texts:Bundle wide transactions fail when no transaction strategy is specified
This is a supported case with a default of Required, that should be honoured.
issueID:ARIES-448
type:Bug
changed files:
texts:Support absence of a version attribute on Subsystem content
Subsystem content headers refer to bundles by symbolic name and version. If the version is absent it should be treated as 0.0.0 to infinity. When updating SubsystemAdmin to use Futures, I found I had to include a version in order to get content to be proivisioned.
issueID:ARIES-449
type:Improvement
changed files:
texts:Upgrade to latest geronimo transaction manager

issueID:ARIES-45
type:Bug
changed files:
texts:Refactor Blueprint HelloWorld sample

issueID:ARIES-451
type:Bug
changed files:
texts:Managed Persistence contexts used outside a transaction are never cleared
If a managed persistence context is used outside of a transaction then that EntityManager is never cleared or closed and may be resused.
This causes a major problem, as the EntityManager caches data and never expires it. Old data will be kept, and new updates are ignored.
issueID:ARIES-452
type:Improvement
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextManagerService.java
jndi/jndi-api/src/main/java/org/apache/aries/jndi/spi/EnvironmentAugmentation.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
texts:Provide ability for the JNDI environment to be augmented by an integrator
In my environment I need to be able to augment the JNDI environment with additional properties before a context is created. I will add a service based plug point for this.
issueID:ARIES-453
type:Bug
changed files:application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
texts:No Support for Service-Import in isolated frameworks
When creating isolated child frameworks in the BundleFrameworkManager we do not set up the manifest with the correct Service-Import and Service-Export headers.
We also do not publish service from the parent to the child framework which needs to be done to implement the header behaviour.
issueID:ARIES-454
type:Bug
changed files:
texts:JNDI Core bundle is dragging in the extension APIs and doesn't export them.
Simple pom update will fix it.
issueID:ARIES-455
type:Improvement
changed files:
texts:Allow the Aries JPA runtime to process WAB files
The Aries JPA runtime currently deliberately ignores WAB files because it isn't clear whether they should be processed according to Java EE rules or not.
I propose the following:
A WAB with a Meta-Persistence header should be treated like any other persistence bundle
A WAB with no Meta-Persistence header should follow the rules of the OSGi Web Applications specification. Namely the JPA runtime should look for META-INF/persistence.xml in any locations listed on the bundle classpath (or in the root if no classpath is defined).
This is not the normal Java EE behaviour. We will not find META-INF/persistence.xml in any jar in WEB-INF/lib, or in WEB-INF/classes unless it is explicitly on the bundle classpath. This is, however, consistent with normal WAB behaviour and I believe is therefore the correct approach.
issueID:ARIES-456
type:New Feature
changed files:subsystem/subsystem-example/subsystem-helloIsolation/src/main/java/org/apache/aries/subsystem/example/helloIsolation/HelloIsolationImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/internal/Activator.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/ScopeUpdate.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/InstallInfo.java
subsystem/subsystem-example/subsystem-helloIsolation/src/main/java/org/apache/aries/subsystem/example/helloIsolation/HelloIsolation.java
subsystem/subsystem-example/subsystem-helloIsolationRef/src/main/java/org/apache/aries/subsystem/example/helloIsolationRef/Activator.java
subsystem/subsystem-example/subsystem-helloIsolation/src/main/java/org/apache/aries/subsystem/example/helloIsolation/Activator.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/SharePolicy.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/Scope.java
subsystem/subsystem-example/subsystem-helloIsolationRef/src/main/java/org/apache/aries/subsystem/example/helloIsolationRef/HelloIsolationRefImpl.java
subsystem/subsystem-example/subsystem-helloIsolationRef/src/main/java/org/apache/aries/subsystem/example/helloIsolationRef/HelloIsolationRef.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeUpdateImpl.java
texts:Provide scope API & Impl & itests to evaluate the new RFC 138 (Framework hooks) for subsystem

issueID:ARIES-457
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
texts:Efficiency problem in the method listBundles() of class org.apache.aries.jmx.framework.BundleState
In our environment, there are always 200 to 300 bundles in the OSGi framwork. When invoking listBundles() of the class BundleState, it spends more than twenty seconds which is too long to endure.
issueID:ARIES-459
type:Bug
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
texts:Improve the error message for resolver exception
Improve the error message for Resolver Exception.
issueID:ARIES-46
type:New Feature
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
texts:Invoke namespace handler for custom scope elements.
Update the parser to further process the scope attribute for bean definitions, and to invoke a namespace handler for the scopes value.
If the scope is a custom scope, the appropriate namespace handler will be invoked, passing the Attr Node representing the scope attribute from the blueprint definition.
Intent is to use the presence of ':' within the scope value to determine if the value is a custom scope or not. If the ':' is present, to split on the : resolve the namespace prefix part as per the current element, and use the resulting namespace to check for and invoke the NamespaceHandler. If no handler is registered, the parse is aborted just as if any other non-handled element is encountered.
Once invoked an Namespace Handler can then inject a bean processor to handle it's implementation, or whatever else it wants to do in reaction to seeing the custom scope.
I like the idea of extending BeanProcessor to create ScopedBeanProcessors that will only be invoked if the bean being processed is associated to the scope of the processor, but think this could be done in a seperate issue.
The logic up in AbstractRecipe will likely need a cleanup, as it heavily makes the assumption that only singleton/prototype are possible, and is phrased today to check for singleton by testing for "not prototype". Will need to resolve if custom scopes should act as singleton/prototype wrt addFull / addPartial object, or if this should be configurable. This can also be resolved in a seperate issue.
issueID:ARIES-460
type:Bug
changed files:
texts:Document what the new APPLICATION.MF and DEPLOYMENT.MF as a consequence of delivery under jira361
This jira is for contributing some documentations for the new features of APPLICATION.MF and DEPLOYMENT.MF as a consequence of delivery of jira 361.
issueID:ARIES-461
type:Bug
changed files:application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
texts:Application that bring in dependency bundles from a bundle repository doesn't deploy
Firstly, I created my .eba with all of its dependencies contained within it: twitter4j bundle and commons lang bundle. I hijacked the blog-assembly module to try it out. I started the framework with
java -jar osgi-3.5.0.v20090520.jar -console
then copied my .eba to the load directory. This worked fine - although the debug output from the org.apache.aries.application.modelling.impl now seems to be overly verbose.
Second, I started the framework like this:
java -Dobr.repository.url=http://sigil.codecauldron.org/spring-external.obr -jar osgi-3.5.0.v20090520.jar -console
the -D flag will give an OBR repository to Felix OBR. The repository.xml at the end of the above URL is for the Spring Source Enterprise Bundle Repository. I copied the same .eba into the load directory. This means the repository.xml was fetched, and used in the OBR resolve. It took a lot longer to resolve either because Felix OBR had a large repository.xml to use in its resolution process or because of the verbosity of org.apache.aries.application.modelling.impl. At the end I have the application's bundles started in the framework.
That was all just a sanity check to make sure things still work when including all dependencies in the .eba.
Third, I removed the dependency bundles from the .eba and started as before:
java -Dobr.repository.url=http://sigil.codecauldron.org/spring-external.obr -jar osgi-3.5.0.v20090520.jar -console
I copied the .eba to the load directory. This time I got a problem:
[fileinstall-./load] DEBUG org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl - Method exit: generateDeploymentMani
fest, returning [org.apache.aries.application.management.ResolverException: Resolution of asset org.exampe.twitter.query.app indicates invalid depende
ncies of shared content on isolated content:
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.dom which is exported from isolated bundle [com.springsource.org.apache
.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.stream which is exported from isolated bundle [com.springsource.org.apa
che.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.w3c.dom which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.parsers which is exported from isolated bundle [com.springsource.org.apache.xmlco
mmons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.xml.sax which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform which is exported from isolated bundle [com.springsource.org.apache.xml
commons_1.3.4] ]
[fileinstall-./load] DEBUG org.apache.aries.blueprint.proxy.Collaborator - invoke
org.apache.aries.application.management.ResolverException: Resolution of asset org.exampe.twitter.query.app indicates invalid dependencies of shared c
ontent on isolated content:
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.dom which is exported from isolated bundle [com.springsource.org.apache
.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.stream which is exported from isolated bundle [com.springsource.org.apa
che.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.w3c.dom which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.parsers which is exported from isolated bundle [com.springsource.org.apache.xmlco
mmons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.xml.sax which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform which is exported from isolated bundle [com.springsource.org.apache.xml
commons_1.3.4]
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeployedBundles(DeploymentManifestManagerImpl
.java:325)
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeploymentManifest(DeploymentManifestManagerI
mpl.java:160)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy15.generateDeploymentManifest(Unknown Source)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.resolve(AriesApplicationManagerImpl.java:272)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.install(AriesApplicationManagerImpl.java:289)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy16.install(Unknown Source)
at org.apache.aries.application.install.EBAInstaller.install(EBAInstaller.java:71)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:827)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:755)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:393)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:212)
[fileinstall-./load] WARN org.apache.aries.blueprint.proxy.Collaborator - Discarding initial exception
org.apache.aries.application.management.ResolverException: Resolution of asset org.exampe.twitter.query.app indicates invalid dependencies of shared c
ontent on isolated content:
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.dom which is exported from isolated bundle [com.springsource.org.apache
.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.stream which is exported from isolated bundle [com.springsource.org.apa
che.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.w3c.dom which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.parsers which is exported from isolated bundle [com.springsource.org.apache.xmlco
mmons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.xml.sax which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform which is exported from isolated bundle [com.springsource.org.apache.xml
commons_1.3.4]
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeployedBundles(DeploymentManifestManagerImpl
.java:325)
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeploymentManifest(DeploymentManifestManagerI
mpl.java:160)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy15.generateDeploymentManifest(Unknown Source)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.resolve(AriesApplicationManagerImpl.java:272)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.install(AriesApplicationManagerImpl.java:289)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy16.install(Unknown Source)
at org.apache.aries.application.install.EBAInstaller.install(EBAInstaller.java:71)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:827)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:755)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:393)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:212)
[fileinstall-./load] DEBUG org.apache.aries.blueprint.proxy.Collaborator - invoke
org.apache.aries.application.management.ResolverException: Resolution of asset org.exampe.twitter.query.app indicates invalid dependencies of shared c
ontent on isolated content:
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.dom which is exported from isolated bundle [com.springsource.org.apache
.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.stream which is exported from isolated bundle [com.springsource.org.apa
che.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.w3c.dom which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.parsers which is exported from isolated bundle [com.springsource.org.apache.xmlco
mmons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.xml.sax which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform which is exported from isolated bundle [com.springsource.org.apache.xml
commons_1.3.4]
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeployedBundles(DeploymentManifestManagerImpl
.java:325)
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeploymentManifest(DeploymentManifestManagerI
mpl.java:160)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy15.generateDeploymentManifest(Unknown Source)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.resolve(AriesApplicationManagerImpl.java:272)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.install(AriesApplicationManagerImpl.java:289)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy16.install(Unknown Source)
at org.apache.aries.application.install.EBAInstaller.install(EBAInstaller.java:71)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:827)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:755)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:393)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:212)
[fileinstall-./load] WARN org.apache.aries.blueprint.proxy.Collaborator - Discarding initial exception
org.apache.aries.application.management.ResolverException: Resolution of asset org.exampe.twitter.query.app indicates invalid dependencies of shared c
ontent on isolated content:
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.dom which is exported from isolated bundle [com.springsource.org.apache
.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform.stream which is exported from isolated bundle [com.springsource.org.apa
che.xmlcommons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.w3c.dom which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.parsers which is exported from isolated bundle [com.springsource.org.apache.xmlco
mmons_1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package org.xml.sax which is exported from isolated bundle [com.springsource.org.apache.xmlcommons_
1.3.4]
Shared bundle twitter4j_2.0.8 has a dependency for package javax.xml.transform which is exported from isolated bundle [com.springsource.org.apache.xml
commons_1.3.4]
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeployedBundles(DeploymentManifestManagerImpl
.java:325)
at org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.generateDeploymentManifest(DeploymentManifestManagerI
mpl.java:160)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy15.generateDeploymentManifest(Unknown Source)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.resolve(AriesApplicationManagerImpl.java:272)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.install(AriesApplicationManagerImpl.java:289)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:67)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:143)
at $Proxy16.install(Unknown Source)
at org.apache.aries.application.install.EBAInstaller.install(EBAInstaller.java:71)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:827)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.install(DirectoryWatcher.java:755)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:393)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:212)
I believe OBR is for some reason resolving the java.xml.* org.w3c.dom and org.xml.sax packages to a bundle described in the OBR rather than those coming through from the JRE. As I understand it, there are two OBR resolutions going on here. #1 includes the bundles from the .eba Application-Content manifest header. The resulting list is the bundles from the Application-Content header plus any dependency bundles. We then go back to OBR with just the dependency bundles to make sure they don't depend on the bundles listed in the Application-Content header. This is so that the application content can be isolated from other applications' content and the shared bundles can be shared across applications running in the same JVM - after all if a shared bundle dependended on an bundle isolated in application1, application2 would be able to get to application1's bundle via the shared bundle.
So the issue is with the second OBR resolve. This seems to be giving a different result to the first OBR resolve. The first one seems to be happy resolving those packages against the JRE / System bundle, but the second resolve is not.
Note: In between each of these attempts I cleared out the load dir and deleted the target/configuration/org.eclipse.osgi directory, thereby cleaning out the OSGi cache.
issueID:ARIES-462
type:Improvement
changed files:
texts:Allow cm:property-placeholder substitution within bean attributes
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0">
<cm:property-placeholder persistent-id="foo">
<cm:default-properties>
<cm:property name="foo.classname" value="com.foo.DefaultFoo"/>
</cm:default-properties>
</cm:property-placeholder>
<bean id="foo" class="${foo.classname}"/>
</blueprint>
issueID:ARIES-463
type:Bug
changed files:
texts:org.osgi.service.url.URLStreamHandlerService$$EnhancerByCGLIB$$b588a07c is not an enhanced class
When the Apache Karaf project is deployed as a war file in Jetty / Tomcat web server, the following error appears
ERROR: EventDispatcher: Error during dispatch. (org.osgi.service.blueprint.container.ComponentDefinitionException: java.lang.IllegalArgumentException: class org.osgi.service.url.URLStreamHandlerService$$EnhancerByCGLIB$$b588a07c is not an enhanced class)
org.osgi.service.blueprint.container.ComponentDefinitionException: java.lang.IllegalArgumentException: class org.osgi.service.url.URLStreamHandlerService$$EnhancerByCGLIB$$b588a07c is not an enhanced class
 at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:105)
 at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
 at org.apache.aries.blueprint.di.RefRecipe.internalCreate(RefRecipe.java:60)
 at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
 at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
 at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
 at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
 at org.apache.aries.blueprint.container.ServiceRecipe.createRecipe(ServiceRecipe.java:352)
 at org.apache.aries.blueprint.container.ServiceRecipe.createExplicitDependencies(ServiceRecipe.java:341)
 at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:136)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.notifySatisfaction(BlueprintContainerImpl.java:596)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.setSatisfied(AbstractServiceReferenceRecipe.java:393)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceAdded(AbstractServiceReferenceRecipe.java:366)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:349)
 at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:864)
 at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:732)
 at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:662)
 at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3726)
 at org.apache.felix.framework.Felix.access$000(Felix.java:80)
 at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:717)
 at org.apache.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:107)
 at org.apache.felix.framework.Felix.registerService(Felix.java:2847)
 at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:251)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:388)
 at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:166)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:646)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:314)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:213)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
 at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
 at java.util.concurrent.FutureTask.run(FutureTask.java:138)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
 at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
 at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.IllegalArgumentException: class org.osgi.service.url.URLStreamHandlerService$$EnhancerByCGLIB$$b588a07c is not an enhanced class
 at net.sf.cglib.proxy.Enhancer.setCallbacksHelper(Enhancer.java:618)
 at net.sf.cglib.proxy.Enhancer.setThreadCallbacks(Enhancer.java:609)
 at net.sf.cglib.proxy.Enhancer.createUsingReflection(Enhancer.java:631)
 at net.sf.cglib.proxy.Enhancer.firstInstance(Enhancer.java:538)
 at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:225)
 at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)
 at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$CgLibProxyFactory.createProxy(AbstractServiceReferenceRecipe.java:656)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:304)
 at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:89)
 ... 35 more
issueID:ARIES-464
type:Bug
changed files:application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/PostResolveTransformer.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DefaultPostResolveTransformer.java
util/src/main/java/org/apache/aries/util/VersionRange.java
texts:PostResolveTransformer should identify the application being transformed
The PostResolveTransformer only passes a DeployedBundles to be transformed. This is insufficient for identifying the application, an ApplicationMetadata should be passed as well.
issueID:ARIES-465
type:Bug
changed files:
texts:Application itests - testTwitter test improvement
At the moment, the test reads a 7.5M repository.xml from an internet location. It slows test run and also the test will fail if you run test offline.
issueID:ARIES-466
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:org.apache.aries.jndi-0.2-incubating includes org.osgi.enterprise implementation
org.apache.aries.jndi-0.2-incubating includes org.osgi.enterprise bundle implementations which causes problems when using
<dependency>
<groupId>org.osgi</groupId>
<artifactId>org.osgi.enterprise</artifactId>
<version>4.2.0</version>
</dependency>
as well. If used with org.osgi.enterprise one gets an error that the Initial JNDI Context Factory is already registered and aries JNDI can not work.
I could get around this problem by using org.eclipse.gemini.naming.framework with org.osgi.enterprise + rest of aries.
So my suggestion is simply remove org.osgi api implementation from org.apache.aries.jndi-0.2-incubating and use the one from reference org.osgi.enterprise bundle.
issueID:ARIES-467
type:Improvement
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/FinalModifierException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AbstractProxyManager.java
quiesce/quiesce-manager/src/main/java/org/apache/aries/quiesce/manager/impl/QuiesceManagerImpl.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
util/src/main/java/org/apache/aries/util/io/RememberingInputStream.java
util/src/main/java/org/apache/aries/util/FragmentBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TransactionAttribute.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/JdkProxyManager.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/UnableToProxyException.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
util/src/main/java/org/apache/aries/util/nls/MessageUtil.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/TxInterceptorImpl.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyMethodAdapter.java
util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/MethodCopyingClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
texts:Internationalization of Apache Aries
Since Aries is all about Enterprise it would be really good if we internationalized the info/warning/error messages and exception messages.
issueID:ARIES-468
type:Improvement
changed files:blueprint/blueprint-api/src/main/java/org/osgi/service/blueprint/container/BlueprintEvent.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassDefinitionException.java
util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/ProxyManager.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassInstantiationException.java
util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AsmProxyManager.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/FinalModifierException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AbstractProxyManager.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/Constants.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassHierarchyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/UnableToLoadProxyException.java
util/src/main/java/org/apache/aries/util/internal/EquinoxWorker.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintQuiesceParticipant.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentNameAlreadyInUseException.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/DefaultWrapper.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java
util/src/main/java/org/apache/aries/util/internal/FelixWorker.java
util/src/main/java/org/apache/aries/util/internal/FrameworkUtilWorker.java
util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/JdkProxyManager.java
util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/UnableToProxyException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassMethodHashSet.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/ProxyUtils.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassBytecodeGenerationException.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Create common Proxy creation service to share proxying between blueprint, JNDI and other people.
JNDI and blueprint both do proxying stuff. Rather than have multiple implementations to share lets common it up.
As a part of this we should common up our Bundle to ClassLoader adapter implementations as documented on this thread:
http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201010.mbox/%3cAANLkTik-Bj4p66cz6jKoJ3-ZDkYd9eomj=6mwBeG4CZD@mail.gmail.com%3e
issueID:ARIES-469
type:Bug
changed files:
texts:Update jpa:context entity manager factory service filter to be more accurate
Update the filter from (&(org.apache.aries.jpa.proxy.factory=*).. to (&(org.apache.aries.jpa.proxy.factory=true)... to be more accurate, since that is the service property value being registered with.
issueID:ARIES-47
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistry.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/Interceptor.java
texts:Add interceptor concept to aries blueprint.
Add support for 'interceptors' to Aries blueprint.
The concept is to allow interceptors to be configured for a bean, so that whenever invocations are made to methods on the bean, the interceptors are notified before the call, and after the call.
An interceptors intent is not to modify the arguments to the call, or the return from the call, but merely to be notified, and to be able to inspect the arguments that were passed (if any), and the response/exception returned (if any).
Interceptor would be added as a new Interface, at the same level as BeanProcessor, and the ComponentDefinitionRegistry enhanced to allow Interceptors to be registered against BeanMetadata.
NamespaceHandlers will be able to add interceptors via the ParserContext when invoked to handle custom elements/attributes.
Interceptors would 'see' : The bean metadata for the invocation, The method being / that-was invoked, and any Arguments/Return data/Exceptions.
Interceptors would be implemented by dynamically creating a subclass of the bean that wrappers the original instance of the bean, replacing the bean in the blueprint container.
(CGlib looks interesting for the dynamic subclass, although potentially problematic regarding classes without default zero-arg constructors, if not cglib, then lower using the asm library instead)
The dynamic subclass will coordinate invoking the interceptors, and the delegation of the call to the instance of the bean.
issueID:ARIES-470
type:Bug
changed files:
texts:fix hudson build break
Fix the build break reported by Hudson: See <https://hudson.apache.org/hudson/job/Aries/org.apache.aries.application$org.apache.aries.application.runtime.isolated.itests/715/>
issueID:ARIES-471
type:Bug
changed files:application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
texts:BundleFrameworks created with incorrect location
When we create a new bundle framework inside org.apache.aries.application.framework.management.BundleFrameworkManagerImpl.isolatedInstall, the location provided is a concatenation of the appname and the app version - instead this should be the application scope.
issueID:ARIES-472
type:Bug
changed files:application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
texts:BundleFramework not stopping bundles correctly
The BundleFramework.stop(Bundle b) method is not checking for fragments before stopping the given bundle.
The behaviour should mirror the checking in the start method.
issueID:ARIES-473
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintQuiesceParticipant.java
texts:BlueprintQuiesceParticipant
Currently the BlueprintQuiesceParticipant NullPointers when asked to quiesce a non-blueprint bundle. This then causes a guaranteed quiesce timeout
java.lang.NullPointerException
at org.apache.aries.blueprint.container.BlueprintQuiesceParticipant$QuiesceBundle.run(BlueprintQuiesceParticipant.java:102)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:737)
issueID:ARIES-474
type:Bug
changed files:
texts:Test failure in build 722
org.osgi.framework.BundleException: Exception in org.apache.aries.application.itest.twitter.TwitterQuery.start() of bundle org.apache.aries.application.itest.twitter.bundle.
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:805)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:754)
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:352)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:280)
at org.apache.aries.application.runtime.impl.ApplicationContextImpl.start(ApplicationContextImpl.java:177)
at org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.testTwitter(OBRResolverAdvancedTest.java:450)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:134)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:101)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
at sun.rmi.transport.Transport$1.run(Transport.java:159)
at java.security.AccessController.doPrivileged(Native Method)
at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.IncompatibleClassChangeError: Found interface twitter4j.QueryResult, but class was expected
at org.apache.aries.application.itest.twitter.TwitterQuery.start(TwitterQuery.java:43)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:782)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:773)
... 30 more
issueID:ARIES-475
type:Improvement
changed files:
texts:Use assertEquals rather than assertTrue(... == ...) in QuiesceManagerTest to help debuggability

issueID:ARIES-476
type:Improvement
changed files:sandbox/samples/dgoat/dgoat-cxf-sample-server/src/main/java/org/apache/cxf/dosgi/samples/greeter/impl/GreeterServiceImpl.java
sandbox/samples/dgoat/dgoat-cxf-sample-cli/src/main/java/org/apache/cxf/dosgi/samples/greeter/client/GreeterDataImpl.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/VersionedRelationshipAspect.java
sandbox/samples/dgoat/dgoat-cxf-sample-cli/src/main/java/org/apache/cxf/dosgi/samples/greeter/client/GreeterDialog.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfo.java
sandbox/samples/dgoat/dgoat-cxf-sample-api/src/main/java/org/apache/cxf/dosgi/samples/greeter/GreeterData.java
sandbox/samples/dgoat/dgoat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
sandbox/samples/dgoat/dgoat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService.java
sandbox/samples/dgoat/dgoat-cxf-sample-server/src/main/java/org/apache/cxf/dosgi/samples/greeter/impl/Activator.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/ComponentInfoProvider.java
sandbox/samples/dgoat/dgoat-cxf-sample-cli/src/main/java/org/apache/cxf/dosgi/samples/greeter/client/Activator.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/info/ComponentInfoImpl.java
sandbox/samples/dgoat/dgoat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ModelInfoEnhancerService.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/ParameterizedRelationshipAspect.java
sandbox/samples/dgoat/dgoat-cxf-sample-api/src/main/java/org/apache/cxf/dosgi/samples/greeter/GreeterException.java
sandbox/samples/dgoat/dgoat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyModelService2.java
sandbox/samples/dgoat/dgoat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyInfoProvider.java
sandbox/samples/dgoat/dgoat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/ServiceInterceptor.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/ModelInfoService.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipAspect.java
sandbox/samples/dgoat/dgoat-dummy-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfoProvider.java
sandbox/samples/dgoat/dgoat-info-enhancer/src/main/java/org/apache/aries/samples/goat/enhancer/Activator.java
sandbox/samples/dgoat/dgoat-cxf-sample-api/src/main/java/org/apache/cxf/dosgi/samples/greeter/GreetingPhrase.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/info/RelationshipInfoImpl.java
sandbox/samples/dgoat/dgoat-cxf-sample-api/src/main/java/org/apache/cxf/dosgi/samples/greeter/GreeterService.java
sandbox/samples/dgoat/dgoat-web/src/main/java/org/apache/aries/samples/goat/web/ServerSideClass.java
sandbox/samples/dgoat/dgoat-bundlecontext-modelprovider/src/main/java/org/apache/aries/samples/goat/bundlecontextmodel/BundleContextInfoProvider.java
sandbox/samples/dgoat/dgoat-api/src/main/java/org/apache/aries/samples/goat/api/RelationshipInfo.java
sandbox/samples/dgoat/dgoat-dummy2-provider/src/main/java/org/apache/aries/samples/goat/dummy/DummyRelationshipProvider.java
texts:Checkin code for a distributed goat sample
I've been working on getting the GOAT sample to work using distributed OSGi (Apache CXF). I'll check the sample in under samples-sandbox while I'm trying to make it work.
issueID:ARIES-477
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
texts:ManifestProcessor needs some unit tests
Investigations suggest that the current parseManifest(InputStream) fails with indexOutOfBoundsExceptions for certain classes of input. ManifestProcessor needs some unit tests to flush out and protect against these cases.
issueID:ARIES-479
type:Improvement
changed files:
texts:Upgrade to geronimo transaction manager 2.2

issueID:ARIES-48
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:BeanRecipe has two destroy methods, the one that invokes BeanProcessor is unused.
BeanRecipe declares
destroy(Object instance) which invokes the destroy method if any..
and
destroyInstance(Object obj) which does the same, but also invokes the BeanProcessor before/after destroy calls.
destroyInstance has no callers within the codebase, without which the BeanProcessor will never be invoked for before/after destroy.
SVN history has the destroyInstance method present as far back as I can check for, with the seperate destroy method being brought in as part of the Recipe refactoring that removed DestroyCallback, although DestroyCallback did not invoke destroyInstance either.
Suspect the fix to this is to remove destroy(Object instance) and rename destroyInstance(Object obj) to destroy(Object obj)
issueID:ARIES-480
type:Bug
changed files:application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
texts:Unnecessary exception thrown on DeploymentMetadata interface
This is not thrown by any implementation and doesnt make sense on this method.
issueID:ARIES-481
type:Bug
changed files:blueprint/blueprint-api/src/main/java/org/osgi/service/blueprint/container/BlueprintEvent.java
texts:BlueprintEvent may mutate after creation
Running findbugs on the org.osgi.service.blueprint package results in the
following error:
org.osgi.service.blueprint.container.BlueprintEvent(int, Bundle, Bundle,
String[], Throwable) may expose internal representation by storing an
externally mutable object into BlueprintEvent.dependencies MALICIOUS_CODE
EI_EXPOSE_REP2 229 Medium
I think the worst that can happen is that if the BlueprintContainer
implementation changed the dependencies array it passes to the extender two
different event handlers could see different dependencies.
issueID:ARIES-482
type:Improvement
changed files:
texts:Move jmx-whiteboard pattern itests to shared pax-exam level (1.2.0)

issueID:ARIES-483
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/io/IOUtils.java
texts:Fix some file locking problems occasionally seen in IOUtils

issueID:ARIES-484
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
texts:SingleServiceTracker NPE's when the service is lost
ERROR: Error stopping bundle. (java.lang.IllegalStateException: Can
only register services while bundle is active or activating.)
java.lang.IllegalStateException: Can only register services while
bundle is active or activating.
at org.apache.felix.framework.Felix.registerService(Felix.java:2815)
at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:251)
at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:229)
at org.apache.aries.proxy.impl.ProxyManagerActivator.start(ProxyManagerActivator.java:52)
at org.apache.aries.blueprint.uberbundle.UberActivator.stop(UberActivator.java:40)
at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:655)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2197)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1172)
at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
at java.lang.Thread.run(Thread.java:680)
ERROR: EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
at org.apache.aries.util.SingleServiceTracker.update(SingleServiceTracker.java:115)
at org.apache.aries.util.SingleServiceTracker.findMatchingReference(SingleServiceTracker.java:106)
at org.apache.aries.util.SingleServiceTracker.access$200(SingleServiceTracker.java:31)
at org.apache.aries.util.SingleServiceTracker$1.serviceChanged(SingleServiceTracker.java:54)
at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:871)
at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:733)
at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:662)
at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3724)
at org.apache.felix.framework.Felix.access$000(Felix.java:80)
at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:717)
at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:135)
at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:129)
at org.apache.felix.framework.ServiceRegistry.unregisterServices(ServiceRegistry.java:178)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2215)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1172)
at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
at java.lang.Thread.run(Thread.java:680)
issueID:ARIES-485
type:Bug
changed files:
texts:On IBM J9 JVM Blog itests hang
With Geronimo transaction manager 2.2, on the J9 JVM we see consistent hangs in the JpaBlogSampleWithEbaTest, which is just the first itest to use the real transaction manager. Moving back to 2.1.3 fixes the problem, so almost certainly it is in some form related to the new level.
Concretely this has been seen when building the trunk with:
mvn -fae -e -B clean install
issueID:ARIES-486
type:Bug
changed files:
texts:JMX Whiteboard itests fail on IBM JVM
JMX Itests need to add the pax-exam-junit to work on the IBM JVM.
issueID:ARIES-487
type:Bug
changed files:application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
texts:No ordering on starting bundles
We do not start bundles in the isolated framework in the order we installed them.
issueID:ARIES-488
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/io/IOUtils.java
texts:Add IOUtils.close(ZipFile)
Add a simple IOUtils.close(ZipFile) - ZipFile doesn't implement Closeable
issueID:ARIES-489
type:Task
changed files:application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationContext.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
texts:Support state changes in AriesApplicationContext and correct exception handling
a) Throw exceptions when starting and stopping ApplicationContexts if they are in the incorrect state
b) Restructure the implementation to propogate exceptions back through the api calls.
issueID:ARIES-49
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:ComponentDefinitionException: wrong attribute "class" in message
org.osgi.service.blueprint.container.ComponentDefinitionException: A class [...] was found in the interfaces list, but class proxying is not allowed by default. The ext:proxy-method='class' attribute needs to be added to this service reference.
Should be classes instead of class.
issueID:ARIES-490
type:Bug
changed files:
texts:blog sample test have incorrect configuration
The blog samples tests use the org.apache.aries.application.install bundle which relies on org.apache.felix.fileinstall
This dependency is not included in the configuration steps so the test is failing.
I`m not sure why this has not been seen before.
issueID:ARIES-491
type:Bug
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
texts:Aries OBR repository generation incorrectly generates mandatory directives for capabilities

issueID:ARIES-492
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
texts:Stop overriding the environment for the context
The DelegateContext currently updates the environment on each call to findContext. It updates the url package prefix property used to locate url contexts based on the system context.
This is weird and conceptually wrong. If someone set their own url package prefix property it would be lost on first lookup. So I'll remove this weird code that shouldn't be there.
Alasdair
issueID:ARIES-494
type:Bug
changed files:
texts:Missing relativePath element in parent section of pom.xml files cause a build from scatch to fail with Maven 3
If you are building Apache Aries from scratch with Maven 3 using the instructions from http://incubator.apache.org/aries/buildingaries.html
it fails at the 'mvn clean' step with several errors like:
[ERROR] The project org.apache.aries:eba-maven-plugin:0.3-incubating-SNAPSHOT (/home/godwins/aries/aries/eba-maven-plugin/pom.xml) has 1 error
[ERROR] Non-resolvable parent POM: Could not find artifact org.apache.aries:java5-parent:pom:0.3-incubating-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 25, column 13 -> [Help 2]
Even with the Aries parent project already installed in the Maven repository several warnings about the parent ID not matching the path appear.
Reading the compatibility notes for Maven 3 (https://cwiki.apache.org/MAVEN/maven-3x-compatibility-notes.html) it appears we need a relativePath element in the parent section of the pom.xml files.
I have a patch that fixes this problem which I will attach to this defect.
I have tested that with the patch applied to revision 1035298 Aries continues to build with Maven 2 and also now builds with Maven 3.
issueID:ARIES-495
type:Bug
changed files:
texts:Enlisting DataSource wrapper closes connections too early
The Enlisting DataSource wrapper closes the underlying connection as soon as the application calls ConnectionWrapper.close(). This is not always correct as close() might be called while the transaction is still active.
issueID:ARIES-496
type:Bug
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-utils/src/main/java/org/apache/aries/application/utils/AppConstants.java
texts:Provision against local repository should be made configurable

issueID:ARIES-497
type:Improvement
changed files:subsystem/subsystem-example/subsystem-helloIsolation/src/main/java/org/apache/aries/subsystem/example/helloIsolation/HelloIsolationImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeUpdateImpl.java
subsystem/subsystem-example/subsystem-helloIsolation/src/main/java/org/apache/aries/subsystem/example/helloIsolation/Activator.java
subsystem/subsystem-example/subsystem-helloIsolation/src/main/java/org/apache/aries/subsystem/example/helloIsolation/HelloIsolation.java
texts:Subsystem-scope: some prototype work for java security
I have done some prototype work for for subsystem with java security. The idea is when security manager is turned on, we want to allow the subsystem to have some sort of default permissions (default allows and denys).
I haven't really gotten the piece of work working but I thought I should check what I have. Here is what it is able to do:
1. added default allows and denys for scope when each of the scope is created. If the scope provides its own permission file, this file needs to be read. (TBD).
2. added itests for these. Unfortunately itests are not passing yet, but I was able to turn on security w/ equinox and run through the itests. The itests currently failed when scopeUpdateImpl is trying to register the scopeadmin service in the service registry but didn't have permission to do so. It seems I am not configuring the permission correctly for the subsystem.scope.impl bundle. I thought I should check in what I have for now. The tests of course pass when security is off.
<error message="access denied (org.osgi.framework.ServicePermission org.apache.aries.subsystem.scope.ScopeAdmin register)" type="java.security.AccessControlException">java.security.AccessControlException: access denied (org.osgi.framework.ServicePermission org.apache.aries.subsystem.scope.ScopeAdmin register)
at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323)
at org.eclipse.osgi.internal.permadmin.EquinoxSecurityManager.internalCheckPermission(EquinoxSecurityManager.java:117)
at org.eclipse.osgi.internal.permadmin.EquinoxSecurityManager$CheckPermissionAction.run(EquinoxSecurityManager.java:60)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.permadmin.EquinoxSecurityManager.checkPermission(EquinoxSecurityManager.java:88)
at org.eclipse.osgi.internal.permadmin.EquinoxSecurityManager.checkPermission(EquinoxSecurityManager.java:186)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.checkRegisterServicePermission(ServiceRegistry.java:1021)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:200)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:429)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:447)
at org.apache.aries.subsystem.scope.impl.ScopeUpdateImpl.commit(ScopeUpdateImpl.java:164)
issueID:ARIES-498
type:Improvement
changed files:subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/Subsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:Sybsystem: merge scope work into subsystem-core
The current subsystem-core uses composite bundle and composite bundle factory. This code is deprecated in equinox 3.7.
The OSGi Alliance is currently pursuing the framework hooks as the replacement of this and the subsystem-scope project is designed to prototype framework hooks.
We need to merge the subsystem-scope into subsystem-core so that we use the new framework hooks instead of the deprecated composite bundle and composite bundle factory APIs.
issueID:ARIES-499
type:Improvement
changed files:sandbox/samples/bank/bank-api/src/main/java/org/apache/aries/samples/bank/api/AccountService.java
sandbox/samples/bank/bank-chequingAccount/src/main/java/org/apache/aries/samples/bank/chequingAccount/ChequingAccountServiceImpl.java
sandbox/samples/bank/bank-api/src/main/java/org/apache/aries/samples/bank/api/LineOfCreditAccountService.java
sandbox/samples/bank/bank-lineOfCreditAccount/src/main/java/org/apache/aries/samples/bank/lineOfCreditAccount/LineOfCreditAccountServiceImpl.java
sandbox/samples/bank/bank-web/src/main/java/org/apache/aries/samples/bank/web/ViewAccount.java
sandbox/samples/bank/bank-api/src/main/java/org/apache/aries/samples/bank/api/ChequingAccountService.java
sandbox/samples/bank/bank-api/src/main/java/org/apache/aries/samples/bank/api/Constants.java
sandbox/samples/bank/bank-biz/src/main/java/org/apache/aries/samples/bank/biz/AccountServicesToOutsideWorldImpl.java
sandbox/samples/bank/bank-web/src/main/java/org/apache/aries/samples/bank/web/CreateAccount.java
sandbox/samples/bank/bank-creditCheck/src/main/java/org/apache/aries/samples/bank/creditCheck/CreditCheckServiceImpl.java
sandbox/samples/bank/bank-api/src/main/java/org/apache/aries/samples/bank/api/CreditCheckService.java
sandbox/samples/bank/bank-api/src/main/java/org/apache/aries/samples/bank/api/AccountServicesToOutsideWorld.java
texts:Check in remote services sample using SCA
Banking samples which uses Tuscany/SCA for remote services
issueID:ARIES-5
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/NamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Support for multiple namespace handlers for the same schema and use a compatible one wrt class loaders
Not sure if / how this is doable, but it might be worth investigating.
issueID:ARIES-50
type:New Feature
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchActionResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdmin.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/Framework.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/FrameworkMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchInstallResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/PackageData.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/BatchResult.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/PackageState.java
texts:Implement Package State MBean
This MBean provides information about the package state of the framework.
issueID:ARIES-500
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:Field injection does not consider fields defined on parent classes

issueID:ARIES-501
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryListContext.java
texts:NPE in Aries JNDI when trying to process an empty service list
When doing a lookup using osgi:servlcelist/ that has no matches I get an NPE when I call hasMore on the NamingEnumeration.
Got an exception: java.lang.NullPointerException
at org.apache.aries.jndi.url.ServiceRegistryListContext$ServiceNamingEnumeration.hasMoreElements(ServiceRegistryListContext.java:81)
at org.apache.aries.jndi.url.ServiceRegistryListContext$ServiceNamingEnumeration.hasMore(ServiceRegistryListContext.java:71)
at test.hot.extension.web.TestServlet.doGet(TestServlet.java:57)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)
at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1133)
issueID:ARIES-502
type:Improvement
changed files:
texts:Create new site
Branch the existing site (already done) and checkin new format site
issueID:ARIES-503
type:New Feature
changed files:jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
jndi/jndi-bundle/src/main/java/org/apache/aries/jndi/priv/Activator.java
texts:Support for JNDI RMI URL handler
We should provide out-of-the-box support for RMI urls.
issueID:ARIES-504
type:Improvement
changed files:
texts:The JNDI osgi url handler should use the org.apache.aries.proxy service

issueID:ARIES-505
type:Improvement
changed files:jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
texts:Do not use System.err nor Throwable#printStackTraces() but rather use a jul Logger

issueID:ARIES-506
type:Improvement
changed files:application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
texts:Filter out deployments where an isolated bundle is provisioned twice to provide conflicting copies of a package
The provisioning system currently will quite happily allow a number of corner cases where bundles intend to share a service based on a common view of a package but end up wiring to different package versions because of incompatible version ranges.
The most basic setup where this happens is an application with three isolated bundles: api, consumer, provider. Consumer uses a service from producer based on an interface in package P. Consumer consumes package P at [1.1.0,2.0.0) while producer uses P at [1.0.0,1.1.0). There is two versions of api one exporting P at 1.0.0 and another exporting version 1.1.0 of P. Note that this cannot work.
In this setup with the current resolver api will be provisioned twice: once as isolated content and once as provisioned content providing a package to the isolated content. So despite the fact that the scenario is invalid we produce a deployment.
Now, there are corner cases where the deployment would be valid when no service is shared and the package should not be part of the isolated content in the first place. This scenario should still be supported with an explicit use-bundle clause.
issueID:ARIES-507
type:Bug
changed files:
texts:Proxy impl and proxy bundle build against proxy.api with old group id
Currently the proxy-impl and proxy-bundle projects build against org.apache.aries/org.apache.aries.proxy.api rather than org.apache.aries.proxy/org.apache.aries.proxy.api, which is where the code now lives.
issueID:ARIES-508
type:Improvement
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-api/src/main/java/org/apache/aries/jndi/api/JNDIConstants.java
texts:JNDI URL handler should be able to (if configured) wait for new matching services
I'll introduce an org.apache.aries.jndi.rebind.timeout property, expressed in milliseconds. This should support a String, or Integer value.
issueID:ARIES-509
type:Bug
changed files:
texts:JPA quiesce tests are broken since they need the osgi: namespace but don't deploy the proxy support

issueID:ARIES-51
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Allow to use different blueprint bundle tracker customizer based on different osgi framework
In Aries-7, we provided a default blueprint bundle tracker customizer. However, this default tracker customizer only handles bundles installed in the same framework as the Aries blueprint bundle. I'd like to propose an alternative blueprint bundle tracker customizer that handles bundles installed in the child frameworks as well, and we would only use this blue print tracker customizer if we can find CompositeBundleFactory service (as defined in RFC 138 draft) in the OSGi service registry. My understanding is that the CompositeBundleFactory service exists for equinox 3.5 but not felix.
issueID:ARIES-510
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Lower the log level of the blueprint namespace handler warnings
From http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201012.mbox/%3CAANLkTinuq44urxsHQ-umEfXn6-Q9UAPOyhrZsv3BxZbG@mail.gmail.com%3E
Can the namespace handler warnings be fixed in Aries and/or Karaf before the next release? For example:
23:31:49,913 | WARN | rint Extender: 3 | BlueprintContainerImpl | container.BlueprintContainerImpl 266 | Bundle org.apache.karaf.features.command is waiting for namespace handlers [(&(objectClass=org.apache.aries.blueprint.NamespaceHandler)(osgi.service.blueprint.namespace=http://karaf.apache.org/xmlns/shell/v1.0.0))]
issueID:ARIES-511
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
texts:SingleServiceTracker does not handle service being registered after creation
This is exposed for example in the jndi.url bundle, which does not register the osgi: url handler unless the proxy service is present at start up.
issueID:ARIES-512
type:New Feature
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/OsgiName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContextServiceFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContextFactory.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/AbstractName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintNameParser.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintName.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
texts:blueprint:comp/componentName jndi namespace handler
This JIRA adds a new jndi url namespace handler for a scheme,
blueprint:comp/comp_id
where comp_id is the id of a blueprint managed component in the caller's bundle. This will promote better integration between
a) web bundles and blueprint, and
b) persistence bundles and blueprint.
issueID:ARIES-513
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
texts:JNDI implementation does not interact well with InitialLdapContext
There appears to be no particular provision in the spec to make sure that proxied contexts returned from the OSGi InitialContextFactoryBuilder should be instances of LdapContext. This may likely be an omission.
Typical exception:
javax.naming.NotContextException: Expected an LdapContext object.
at javax.naming.ldap.InitialLdapContext.getDefaultInitLdapContext(InitialLdapContext.java:109)
at javax.naming.ldap.InitialLdapContext.setRequestControls(InitialLdapContext.java:132)
...
issueID:ARIES-514
type:Bug
changed files:
texts:Aries doesn't build because of not available bundle dependency
Applying the proposed patch fixes the problem.
issueID:ARIES-515
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
texts:Exceptions being hidden when thrown by InitialContextFactory from a Builder
A common use of JNDI is to perform authentication against an LDAP registry of users. This typically works by going new InitialDirContext(props) where the props contains a userid/password. This requires the AuthenticationException to be thrown from the InitialDirContext constructor. When used with the default JNDI implementation what actually happens is you get a NoInitialContextException because the creation of the Context fails and if the ICF was created from an ICFB then the exception is swallowed rather than rethrown.
Alasdair
issueID:ARIES-517
type:Bug
changed files:jndi/jndi-bundle/src/main/java/org/apache/aries/jndi/priv/Activator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Use a common approach for building uber bundles
In the email thread: http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201012.mbox/%3cAANLkTi=qU1YZ8HY+bvEZbEfwjDqNRRGRCyprjmWbOxjB@mail.gmail.com%3e we discussed how we build uber bundles.
This JIRA is to make the uber bundles built in a common way and to avoid pulling in unnecessary dependencies. As a result some uber bundles, such as for blueprint and proxy, will have less in them. It will also cause the proxy bundle to do a mandatory package dependency on asm, rather than the current optional one.
Alasdair
issueID:ARIES-518
type:Improvement
changed files:application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
texts:Provide method on BundleFramework to just start the framework, not the bundle
BundleFramework should distinguish between starting the CompositeBundle and starting the framework. Sometimes it's desirable to start the framework (so other bundles can be installed) before starting the composite bundle.
issueID:ARIES-519
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
texts:SingleServiceTracker calls update when there is nothing to update

issueID:ARIES-52
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataImpl.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadataFactory.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataFactoryImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
texts:Improved parsing of Application metadata.
The application.mf parsing support requires a java.util.jar.Manifest. This means that each line needs to be no more than 76 bytes long. This makes things harder for a developer. So I propose the following changes:
1. Add a new method to ManifestProcessor to do a friendly manifest parse
2. Remove the static ApplicationMetadataFactory as this is a non-optimal OSGi pattern
3. Add a new ApplicationMetadataManager service which is a service and will parse metadata from a Manifest, InputStream, and provide a mechanism for sharing parsed ApplicationMetadata when another client does not have access to the manifest.
issueID:ARIES-520
type:Bug
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
texts:The blueprint url naming context does not depend on ProxyManager so should not be registered after it has become available.
The blueprint url naming context is only registered when the ProxyManager exists, but since the ProxyManager is not needed by it we can register it earlier.
Since blueprint also depends on ProxyManager before registering the blueprint context the url scheme still wont work, but you'll get a nicer error message than you get when no url object factory is registered.
Also update the error message when the blueprint container service cannot be found.
issueID:ARIES-521
type:Bug
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
texts:Unsafe File construction in ModelledResourceManagerImpl.findBlueprints()
ModelledResourceManagerImpl.findBlueprints(Collection<IDirectory>) builds a File from IFile.toString(). This fails on Windows when the IFile has a space in its path name.
issueID:ARIES-522
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyHandler.java
texts:Proxy equality always return true

issueID:ARIES-523
type:Bug
changed files:
texts:Misleading message from PersistenceBundleHelper
I regularly see messages like the following:
[12/21/10 14:53:44:559 GMT] 00000017 container I org.apache.aries.jpa.container.impl.PersistenceBundleHelper findPersistenceXmlFiles The bundle [...] specifies both the Web-ContextPath header, but it does not specify the Meta-Persistence header. This bundle will be scanned for persistence descriptors in any locations defined by the JPA specificationthat are on the Classpath.
[12/21/10 14:53:44:561 GMT] 00000017 container W org.apache.aries.jpa.container.impl.PersistenceBundleHelper findPersistenceXmlFiles The bundle [...]_1.0.0 specified the Meta-Persistence header. However, no persistence descriptors could be located. The following locations were searched: [WEB-INF/classes/META-INF/persistence.xml]
This has a few problems:
Is it telling me the Meta-Persistence header is present, or not? The first message says it's missing, the second says it's present. (In fact, there's Web-ContextPath: header but not a Meta-Persistence: header, so the second message is just wrong.)
"specifies both the Web-ContextPath header, but it does not specify the" isn't grammatical. The "both" should be dropped.
"specificationthat" needs a space in it.
It took me a while to work out that it didn't really mean I needed to put the JPA specification on the classpath.
issueID:ARIES-525
type:Improvement
changed files:
texts:Use maven-bundle-plugin 2.2-SNAPSHOT
Switch to build using 2.2-SNAPSHOT of the maven bundle plugin.
It supports WABs, and appears to be much faster.
issueID:ARIES-526
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:NPE from ServiceRecipe when proxying JDK classes
The ProxyManager expects to be given a non-null Bundle when generating the proxy. Currently in some scenarios Blueprint can pass in null. Causing the following:
[12/23/10 13:52:26:537 GMT] 00000017 ServiceRecipe I org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory getService A problem occurred trying to create a proxy object. Returning the original object instead.
java.lang.NullPointerException
at org.apache.aries.proxy.impl.AbstractProxyManager.getClassLoader(AbstractProxyManager.java:83)
at org.apache.aries.proxy.impl.AsmProxyManager.createNewProxy(AsmProxyManager.java:84)
at org.apache.aries.proxy.impl.AbstractProxyManager.createProxy(AbstractProxyManager.java:50)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:463)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:120)
at java.security.AccessController.doPrivileged(AccessController.java:203)
This is caused because in TriggerServiceFactory it calls FrameworkUtil.getBundle() this returns null if the class isn't loaded from a bundle, e.g. is from the JDK, so proxying doesn't work. In this scenario we should use the blueprint bundle instead to generate the proxy.
issueID:ARIES-527
type:Bug
changed files:
texts:Fix intermittent failures in jndi-url-itest
org.apache.aries.jndi.itests.JndiUrlIntegrationTest fails in the Hudson build intermittently.
issueID:ARIES-528
type:Bug
changed files:application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
texts:Rollback behaviour for application update does not work
The desired behaviour of AriesApplicationManager.update is to attempt a new deployment but rollback to the consistent state in case of problems.
Currently this does not work for two reasons:
a) When rolling back to the previous version the wrong deployment metadata gets used, so that the rollback erroneously tries to install the new version again rather than the old one.
b) In isolated cases some failures during installation can leave behind a broken framework that prevents any further installs from succeeding.
issueID:ARIES-529
type:Improvement
changed files:
texts:ARIES TLP: modify site to work for TLP
Check site into trunk and modify for TLP
issueID:ARIES-53
type:Improvement
changed files:
texts:Create site.css for Aries web site
The Aries web site will require a style sheet. See for example http://servicemix.apache.org/resources/site.css
issueID:ARIES-530
type:Bug
changed files:
texts:The WAB samples are not created properly
Currently when you specify _wab for the maven-bundle-plugin the src/main/resources all end up relative to the WEB-INF/classes. Instead it should be relative to the root.
I'll fix this by putting the web content in src/main/web-content
Alasdair
issueID:ARIES-531
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:Allow field injection in some cases with the Blueprint extender's permissions
Currently, Blueprint uses the joint permissions of the Blueprint bundle and the Blueprint extender bundle to perform any kind of privileged actions like property injection, service retrieval and field injection.
However, this permission scheme does not work that well with field injection because usually a Blueprint bundle would not need to (and probably should not) have ReflectPermission. Especially, if all that the field injection is used for is something relatively common like injecting a PersistenceContext ...
So with this issue a slightly more relaxed scheme will be introduced where:
field injection for fields in classes that reside in the Blueprint bundle itself is done with the permissions of the Blueprint extender
all other field injections uses joint permissions as before
issueID:ARIES-532
type:Bug
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
texts:The exception message when a service dependency cannot be resolved has the inserts in the wrong order
The system cannot provision the EBA com.ibm.samples.websphere.osgi.blog.app because the following problems in the dependency chain were detected: The service dependency with attributes com.ibm.samples.websphere.osgi.blog_1.0.0 required by bundle
{objectclass=com.ibm.samples.websphere.osgi.logging.Logger} cannot be resolved.

should read:

The system cannot provision the EBA com.ibm.samples.websphere.osgi.blog.app because the following problems in the dependency chain were detected: The service dependency with attributes {objectclass=com.ibm.samples.websphere.osgi.logging.Logger}
required by bundle com.ibm.samples.websphere.osgi.blog_1.0.0 cannot be resolved.
issueID:ARIES-533
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
texts:ContextProvider incorrectly closes Context when GCed
If I do the following:
Context ctx = new InitialContext().lookup("")
the ContextProvider becomes eligible for GC and if finalize is called will close the context which is still reachable.
Fix is to remove the finalize method.
issueID:ARIES-534
type:Improvement
changed files:
texts:Add aries application document
Add some documentation to explain the application module relationships.
issueID:ARIES-536
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Have a way to specify a blueprint bundle should be started in sync with the start level service as much as possible
The use case is for ordering startup using start-level. If you have a bundle that has an optional dependency on a service provided by blueprint, you have no way to raise the chances that the service will be used from the start as blueprint bundles are started asynchronously.
I'd like to have a way to specifiy that the blueprint bundle should be started asynchronously, at least until a GRACE_PERIOD event would be fired, in which case, the remaning things would be done asynchronously.
This definitely should not be used as a way to work around bad bundle behaviors that aren't resiliant with missing dependencies, but really to ensure that when the server boots up, services are started in an optimal order (log and configadmin should be started before the other ones if possible).
issueID:ARIES-537
type:Bug
changed files:
texts:Update ScopeAdmin impl to latest ResolverHook API
The ResolverHook API has been split into a ResolverHookFactory which creates instances of ResovlerHooks for the framework. The current scope admin impl incorrectly registers a ResolverHook instance directly when it should register a ResolverHookFactory instead.
issueID:ARIES-538
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
texts:ContextHelper ungets a service that is then used.

issueID:ARIES-539
type:Improvement
changed files:samples/ariestrader/modules/ariestrader-web/src/main/java/org/apache/aries/samples/ariestrader/web/TradeBuildDB.java
texts:Update to file install and pax web dependencies
Move our file install dependency to 3.1.4 and pax web to 0.8.1 and ensure everything works again. This involves making our sample WABs proper best practice WABs.
issueID:ARIES-54
type:Improvement
changed files:
texts:Apply the servicemix template to the confluence export
The Aries web site is generated from a confluence wiki and, to get the look and feel of a web site rather than a wiki, a template needs to be applied when the site is exported. It was proposed that the servicemix template should be used: http://www.mail-archive.com/aries-dev@incubator.apache.org/msg00332.html and Don Woods offered to apply the template.
Whoever applies the template requires confluence admin rights (I don't have them). I have modified the template to replace references to servicemix with references to aries.
Here is the template to apply:
##
#macro (renderPage $title)
#set($globalHelper = $action.getGlobalHelper())
#set($renderer = $globalHelper.getWikiStyleRenderer())
#foreach ($child in $page.space.pages)
#if ($child.title.equals($title))
#set ($content =
$renderer.convertWikiToXHtml($child.toPageContext(),
$child.content).trim())
$content
#end
#end
#end
##
#macro (renderMenuPage $title)
#set($globalHelper = $action.getGlobalHelper())
#set($renderer = $globalHelper.getWikiStyleRenderer())
#foreach ($child in $page.space.pages)
#if ($child.title.equals($title))
#set ($content =
$renderer.convertWikiToXHtml($child.toPageContext(),
$child.content).trim())
#set ($content =
$content.replaceAll("<LI>([^<]\\S)(
s)<UL", "<li><div
onclick='SwitchMenu(this)'><h3>$1</h3>$2<ul"))
#set ($content = $content.replaceAll("</UL>(
s*)</LI>",
"</ul>$1</div></li>"))
$content
#end
#end
#end
##
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd";>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements. See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License. You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html>
<head>
<link type="text/css" rel="stylesheet"
href="http://incubator.apache.org/aries/resources/site.css";></link>
<script src="http://incubator.apache.org/aries/resources/space.js";
type="text/javascript"></script>
<script src="http://www.google-analytics.com/urchin.js";
type="text/javascript">
</script>
<meta name="keywords" content="..."/>
<meta name="description" content="..." />
<title>
Apache ServiceMix, the Agile Open Source ESB – $page.title
</title>
</head>
<body onload="init()">
<table width="100%" cellpadding="0" cellspacing="0">
<tr width="100%">
<td id="cell-0-0" colspan="2"> </td>
<td id="cell-0-1"> </td>
<td id="cell-0-2" colspan="2"> </td>
</tr>
<tr width="100%">
<td id="cell-1-0"> </td>
<td id="cell-1-1"> </td>
<td id="cell-1-2">
<div style="padding: 5px;">
<div id="banner">
<!-- Banner -->
#renderPage("Banner")
<!-- Banner -->
</div>
</div>
<div id="top-menu">
<table border="0" cellpadding="1" cellspacing="0" width="100%">
<tr>
<td>
<div align="left">
<!-- Breadcrumbs -->
$autoexport.breadcrumbs($page)
<!-- Breadcrumbs -->
</div>
</td>
<td>
<div align="right">
<!-- Quicklinks -->
#renderPage("QuickLinks")
<!-- Quicklinks -->
</div>
</td>
</tr>
</table>
</div>
</td>
<td id="cell-1-3"> </td>
<td id="cell-1-4"> </td>
</tr>
<tr width="100%">
<td id="cell-2-0" colspan="2"> </td>
<td id="cell-2-1">
<table>
<tr height="100%" valign="top">
<td height="100%">
<div id="wrapper-menu-page-right">
<div id="wrapper-menu-page-top">
<div id="wrapper-menu-page-bottom">
<div id="menu-page">
<!-- NavigationBar -->
#renderPage("Navigation")
<!-- NavigationBar -->
</div>
</div>
</div>
</td>
<td height="100%" width="100%">
<!-- Content -->
<div class="wiki-content">$body</div>
<!-- Content -->
</td>
</tr>
</table>
</td>
<td id="cell-2-2" colspan="2"> </td>
</tr>
<tr width="100%">
<td id="cell-3-0"> </td>
<td id="cell-3-1"> </td>
<td id="cell-3-2">
<div id="footer">
<!-- Footer -->
<div id="site-footer">
<a href="http://incubator.apache.org/aries/privacy-policy.html";>Privacy
Policy</a> -
#editReport()
(<a href="$confluenceUri/pages/editpage.action?pageId=$page.id">edit
page</a>)
</div>
<!-- Footer -->
</div>
</td>
<td id="cell-3-3"> </td>
<td id="cell-3-4"> </td>
</tr>
<tr width="100%">
<td id="cell-4-0" colspan="2"> </td>
<td id="cell-4-1"> </td>
<td id="cell-4-2" colspan="2"> </td>
</tr>
</table>
<script type="text/javascript">
_uacct = "UA-398545-1";
urchinTracker();
</script>
</body>
</html>
issueID:ARIES-540
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/SingleContextProvider.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/URLContextProvider.java
texts:DelegateContext is too eager in caching URL contexts
In some enterprise integration scenarios, it is not appropriate to cache URL contexts. For example java:comp env lookups can depend on thread contexts and return different results for the same InitialContext when used from inside different EJBs.
To maintain a level of performance we can still cache the ObjectFactory that creates the URL context and so avoid service registry lookups.
issueID:ARIES-542
type:Improvement
changed files:application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/ModelledBundleResource.java
application/application-noop-resolver/src/main/java/org/apache/aries/application/resolver/noop/impl/NoOpResolver.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
texts:Use of PlatformRepository in resolvers needs to be more flexible
When resolving, Aries has the notion of a local repository, which represents the OSGi framework, and a platform repository, which would usually represent the bundles provided by higher level infrastructure, like an application server. At the moment the platform repository is provided by a blueprint-injected service, which works very cleanly if there's only one platform to be resolved against, but less well otherwise.
We need to add a new method to AriesApplicationResolver which takes in a platform repository and uses it for resolution as an override to the service. (The alternative is to rapidly register and unregister services between calls to the platform repository, which is both awkward and prone to timing failures.)
issueID:ARIES-543
type:Bug
changed files:
texts:Use of depricated pom.artifactId on http://aries.apache.org/modules/ebamavenpluginproject.html
The webpage http://aries.apache.org/modules/ebamavenpluginproject.html talks about using pom.artifactId and pom.groupId, which are depricated. This should be replaced with ${project.artifactId} and ${project.grouptId}
issueID:ARIES-544
type:Bug
changed files:
texts:Update to use maven bundle plugin v 2.2.0 rather than a snapshot

issueID:ARIES-546
type:Bug
changed files:
texts:SCM references in parent POM still point to incubator
Need to fix SCM versions
issueID:ARIES-547
type:Bug
changed files:jndi/jndi-api/src/main/java/org/apache/aries/jndi/spi/EnvironmentAugmentation.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/BundleResourceTransformer.java
jndi/jndi-legacy-support/src/main/java/org/apache/aries/jndi/legacy/support/Activator.java
jndi/jndi-api/src/main/java/org/apache/aries/jndi/urls/URLObjectFactoryFinder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/ProxyUtils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
jndi/jndi-legacy-support/src/main/java/org/apache/aries/jndi/legacy/support/LegacyInitialContextFinder.java
application/application-api/src/main/java/org/apache/aries/application/modelling/utils/ModellingHelper.java
texts:Fix up wrong or missing licenses in application module
Zoe: "There are approx 10 files in application with missing/bad licences".
issueID:ARIES-548
type:Bug
changed files:application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
application/application-api/src/main/java/org/apache/aries/application/ServiceDeclaration.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadata.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplication.java
texts:Remove references to incubator from code base in trunk and in 0.3-RCx branch

issueID:ARIES-549
type:Bug
changed files:
texts:Require-bundle usage between bundles in the same EBA result in resolve error when deploy
1.Created Bundle1,Bundle2, add Bundle1 as Require-Bundle of Bundle 2
2.Package two bundles into an EBA. Deploy them to geronimo but got erros:
Distribution of module failed. See log for details.
Error resolving Aries Application
org.apache.geronimo.common.DeploymentException: Error resolving Aries Application
at org.apache.geronimo.aries.builder.ApplicationConfigBuilder.buildConfiguration(ApplicationConfigBuilder.java:163)
at org.apache.geronimo.deployment.Deployer.deploy(Deployer.java:250)
at org.apache.geronimo.deployment.Deployer.deploy(Deployer.java:138)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.geronimo.gbean.runtime.ReflectionMethodInvoker.invoke(ReflectionMethodInvoker.java:34)
at org.apache.geronimo.gbean.runtime.GBeanOperation.invoke(GBeanOperation.java:131)
at org.apache.geronimo.gbean.runtime.GBeanInstance.invoke(GBeanInstance.java:872)
at org.apache.geronimo.kernel.basic.BasicKernel.invoke(BasicKernel.java:245)
at org.apache.geronimo.kernel.KernelGBean.invoke(KernelGBean.java:344)
at sun.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.geronimo.gbean.runtime.ReflectionMethodInvoker.invoke(ReflectionMethodInvoker.java:34)
at org.apache.geronimo.gbean.runtime.GBeanOperation.invoke(GBeanOperation.java:131)
at org.apache.geronimo.gbean.runtime.GBeanInstance.invoke(GBeanInstance.java:872)
at org.apache.geronimo.kernel.basic.BasicKernel.invoke(BasicKernel.java:245)
at org.apache.geronimo.system.jmx.MBeanGBeanBridge.invoke(MBeanGBeanBridge.java:172)
at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1427)
at javax.management.remote.rmi.RMIConnectionImpl.access$200(RMIConnectionImpl.java:72)
at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1265)
at java.security.AccessController.doPrivileged(Native Method)
at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1367)
at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:788)
at sun.reflect.GeneratedMethodAccessor46.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
at sun.rmi.transport.Transport$1.run(Transport.java:159)
at java.security.AccessController.doPrivileged(Native Method)
at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.aries.application.management.ResolverException: Could not resolve requirements: (bundle=Bundle1)
Bundle2
(&(symbolicname=Bundle2)(version>=1.0.0))
AriesRequire
at org.apache.aries.application.resolver.obr.OBRAriesResolver.resolve(OBRAriesResolver.java:145)
at org.apache.aries.application.management.AriesApplicationResolver$$EnhancerByCGLIB$$dac3ddef.resolve(<generated>)
at org.apache.aries.application.management.impl.AriesApplicationManagerImpl.resolve(AriesApplicationManagerImpl.java:256)
at org.apache.geronimo.aries.builder.ApplicationConfigBuilder.buildConfiguration(ApplicationConfigBuilder.java:161)
... 40 more
issueID:ARIES-55
type:Improvement
changed files:
texts:Add a matches method to the VersionRange
The VersionRange class is very nice, but it would be even better if I could test to see if a version is in the range.
Adding a matches(Version) method.
issueID:ARIES-550
type:Bug
changed files:
texts:Fix intermittent application itest failure testDemoAppResolveFail
org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.testDemoAppResolveFail [equinox/3.5.0] (from OBRResolverAdvancedTest)
Failing for the past 1 build (Since Unstable#841 )
Took 2.3 sec.
Error Message
Unexpected exception, expected<org.apache.aries.application.management.ResolverException> but was<java.lang.NullPointerException>
Stacktrace
java.lang.Exception: Unexpected exception, expected<org.apache.aries.application.management.ResolverException> but was<java.lang.NullPointerException>
at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:117)
at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:86)
at org.ops4j.pax.exam.junit.internal.JUnit4MethodRoadie.runBeforesThenTestThenAfters(JUnit4MethodRoadie.java:60)
at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:84)
at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.invokeTestMethod(JUnit4TestRunner.java:246)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.runMethods(JUnit4TestRunner.java:196)
at org.ops4j.pax.exam.junit.JUnit4TestRunner$2.run(JUnit4TestRunner.java:186)
at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)
at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:182)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: java.lang.NullPointerException
at org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl.getModelledResource(ModelledResourceManagerImpl.java:134)
at org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.generateOBRRepoXML(OBRResolverAdvancedTest.java:496)
at org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.testDemoAppResolveFail(OBRResolverAdvancedTest.java:236)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:134)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:101)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
at sun.rmi.transport.Transport$1.run(Transport.java:159)
at java.security.AccessController.doPrivileged(Native Method)
at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
issueID:ARIES-551
type:Bug
changed files:
texts:Incorrect poms in subprojects (proxy and others)
SCM and explicit versions should only be in top level pom.xml
issueID:ARIES-552
type:Bug
changed files:application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/PostResolveTransformer.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/ProxyManager.java
util/src/main/java/org/apache/aries/util/tracker/BundleTrackerFactory.java
application/application-api/src/main/java/org/apache/aries/application/modelling/utils/ModellingHelper.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ExportedBundle.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java
application/application-api/src/main/java/org/apache/aries/application/modelling/DeployedBundles.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResource.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConversion.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkConfigurationFactory.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepository.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkFactory.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResourceManager.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ImportedBundle.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadata.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationEvent.java
texts:Fix javadoc warnings
Building the javadoc causes warnings. Need to fix them.
Util project warnings:
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/util/src/main/java/org/apache/aries/util/tracker/BundleTrackerFactory.java:66: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/util/src/main/java/org/apache/aries/util/tracker/BundleTrackerFactory.java:55: warning - @param argument "bundleSymbolicName" is not a parameter name.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/util/src/main/java/org/apache/aries/util/tracker/BundleTrackerFactory.java:55: warning - @param argument "bundleVersion" is not a parameter name.
Proxy project warnings:
[WARNING] Javadoc Warnings
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/proxy/proxy-api/src/main/java/org/apache/aries/proxy/ProxyManager.java:46: warning - Tag @link: can't find createProxyFactory(boolean) in org.apache.aries.proxy.ProxyManager
Application project warning:
[WARNING] Javadoc Warnings
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadata.java:35: warning - Tag @see: missing final '>': "<a href="http://incubator.apache.org/aries/applications.html">
[WARNING] http://incubator.apache.org/aries/applications.html</a>."
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadata.java:84: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java:60: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java:67: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java:73: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/ServiceDeclaration.java:28: warning - Tag @see: missing final '>': "<a href="http://incubator.apache.org/aries/applications.html">
[WARNING] http://incubator.apache.org/aries/applications.html</a>."
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/VersionRange.java:35: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/VersionRange.java:71: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/VersionRange.java:53: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/VersionRange.java:59: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/VersionRange.java:65: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/AriesApplication.java:38: warning - Tag @see: missing final '>': "<a href="http://incubator.apache.org/aries/applications.html">
[WARNING] http://incubator.apache.org/aries/applications.html</a>."
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationEvent.java:37: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationEvent.java:31: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationManager.java:55: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConversion.java:44: warning - @param argument "The" is not a parameter name.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java:98: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java:92: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java:86: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFramework.java:59: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkConfigurationFactory.java:32: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkConfigurationFactory.java:42: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkFactory.java:34: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java:48: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java:55: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java:65: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/framework/BundleFrameworkManager.java:77: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepository.java:69: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepository.java:63: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepository.java:56: warning - @param argument "ctx" is not a parameter name.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java:44: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java:37: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java:78: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java:67: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/BundleRepositoryManager.java:55: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java:69: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java:55: warning - @param argument "appMeta" is not a parameter name.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java:55: warning - @param argument "useBundleSet" is not a parameter name.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java:55: warning - @param argument "appImportServices" is not a parameter name.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/PostResolveTransformer.java:34: warning - @param argument "bundles" is not a parameter name.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/modelling/DeployedBundles.java:101: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/modelling/ExportedBundle.java:41: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/modelling/ImportedBundle.java:32: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResource.java:76: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResource.java:94: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResourceManager.java:31: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/application/application-api/src/main/java/org/apache/aries/application/modelling/utils/ModellingHelper.java:33: warning - @return tag has no arguments.
JPA:
[WARNING] Javadoc Warnings
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/jpa/jpa-api/src/main/java/org/apache/aries/jpa/container/PersistenceUnitConstants.java:30: warning - Tag @link: reference not found: Version
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/jpa/jpa-api/src/main/java/org/apache/aries/jpa/container/PersistenceUnitConstants.java:30: warning - Tag @link: reference not found: Version
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/jpa/jpa-api/src/main/java/org/apache/aries/jpa/container/parsing/ParsedPersistenceUnit.java:82: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/jpa/jpa-api/src/main/java/org/apache/aries/jpa/container/parsing/ParsedPersistenceUnit.java:89: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/jpa/jpa-api/src/main/java/org/apache/aries/jpa/container/parsing/PersistenceDescriptor.java:38: warning - @return tag has no arguments.
[WARNING] /Users/nottinga/Documents/apache/aries/trunk/jpa/jpa-api/src/main/java/org/apache/aries/jpa/container/PersistenceUnitConstants.java:30: warning - Tag @link: reference not found: Version
issueID:ARIES-553
type:Improvement
changed files:
texts:Update parent pom with better javadoc config
Currently the javdoc plugin is configured in the java5-parent and default-parent poms, also the config is slightly different. So we should consolidate and improve things. Improvements:
1. Move settings from java5-parent to default-parent
2. Update to 2.7 of the pluign
3. Add link to the OSGi R4.2 javadocs
4. Add Immutable and ThreadSafe custom tags used by OSGi Alliance
5. Allow projects to set a property to exclude packages. Property to be called: aries.javadoc.exclude.packages
6. Default aries.javadoc.exclude.packages to aries.osgi.private.pkg so packages not exported are not javadoced.
issueID:ARIES-554
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiObjectFactoryBuilder.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
texts:aries JNDI bundle breaks remote JMX clients via RMI
If the aries JNDI bundles are present in the environment, connections to remote JMX agents fail. I could recreate the issue with a bundle containing only the line
JMXConnectorFactory.connect(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1717/jmxrmi"));
in the start() method of the bundle activator (and nothing else).
The bundle will start both on equinox and felix as long as the aries jndi bundles (I tried version 0.2 and 0.3-SNAPSHOT) are not running and any java application that allows remote JMX at that port is running (check with jconsole if you are unsure). It will not start as soon as the jndi bundle is started. As far as I got in debugging this, the JMXConnectionFactory is trying to do a JNDI lookup for the RMI connection and is delegated to the Aries JNDI coding, that is trying to determine a bundle context for the call.
issueID:ARIES-555
type:Bug
changed files:
texts:Folders of the bundle root are not part of the classpath and so we don't see css, images of the Aries Blog JPA Sample
When we use pax-web 0.8.2-SNAPHOT on Apache Karaf, the eba archive of Aries Blog Sample is well deployed but the images, css styles sheets are not available. It seems that the folders of the bundle root are not part of the classpath like images, css.
Here is a step by step scenario to reproduce that :
1) Build or download last Karaf snapshot --> 2.1-SNAPHOT
2) Unzipor untar the archive
3) Go to the bin directory
4) launch the script ./karaf
5) In the console of karaf install the following feature repo file using the command in the karaf console
features:addUrl file:features-eba.xml
6) install features eba using the command in the console
features:install eba
7) Copy:paste the file org.apache.aries.samples.blog.jpa.eba-0.3-SNAPSHOT.eba in the deploy
folder
8) Check that the eba is well installed on the console
[ 74] [Active ] [ ] [ ] [ 60] geronimo-servlet_2.5_spec (1.1.2)
[ 75] [Active ] [ ] [ ] [ 60] Jetty :: Utilities (7.1.6.v20100715)
[ 76] [Active ] [ ] [ ] [ 60] Jetty :: IO Utility (7.1.6.v20100715)
[ 77] [Active ] [ ] [ ] [ 60] Jetty :: Http Utility (7.1.6.v20100715)
[ 78] [Active ] [ ] [ ] [ 60] Jetty :: Continuation (7.1.6.v20100715)
[ 79] [Active ] [ ] [ ] [ 60] Jetty :: Server Core (7.1.6.v20100715)
[ 80] [Active ] [ ] [ ] [ 60] Jetty :: Security (7.1.6.v20100715)
[ 81] [Active ] [ ] [ ] [ 60] Jetty :: Servlet Handling (7.1.6.v20100715)
[ 82] [Active ] [ ] [ ] [ 60] Jetty :: XML utilities (7.1.6.v20100715)
[ 83] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - API (0.8.2.SNAPSHOT)
[ 84] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - Service SPI (0.8.2.SNAPSHOT)
[ 85] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - Runtime (0.8.2.SNAPSHOT)
[ 86] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - Jetty (0.8.2.SNAPSHOT)
[ 88] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - Jsp Support (0.8.2.SNAPSHOT)
[ 89] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - Extender - WAR (0.8.2.SNAPSHOT)
[ 90] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - Extender - Whiteboard (0.8.2.SNAPSHOT)
[ 91] [Active ] [ ] [ ] [ 60] OPS4J Pax Web - FileInstall Deployer (0.8.2.SNAPSHOT)
[ 92] [Active ] [ ] [ ] [ 60] OPS4J Pax Url - war:, war-i: (1.2.4)
[ 93] [Active ] [ ] [ ] [ 60] Apache Felix Bundle Repository (1.6.4)
[ 94] [Active ] [Created ] [ ] [ 60] Apache Karaf :: Shell :: OBR Commands (2.1.99.SNAPSHOT)
[ 95] [Active ] [Created ] [ ] [ 60] Apache Karaf :: Features :: OBR Resolver (2.1.99.SNAPSHOT)
[ 96] [Active ] [ ] [ ] [ 60] Apache Derby 10.5 (10.5.3000000.802917)
[ 97] [Active ] [ ] [ ] [ 60] Apache Geronimo JSR-317 JPA 2.0 Spec API (1.1)
[ 98] [Active ] [ ] [ ] [ 60] geronimo-jta_1.1_spec (1.1.1)
[ 99] [Active ] [ ] [ ] [ 60] geronimo-j2ee-connector_1.5_spec (2.0.0)
[ 100] [Active ] [ ] [ ] [ 60] Geronimo TxManager :: Transaction (3.1)
[ 101] [Active ] [ ] [ ] [ 60] OpenJPA Aggregate Jar (2.0.1)
[ 102] [Active ] [ ] [ ] [ 60] Commons Lang (2.4)
[ 103] [Active ] [ ] [ ] [ 60] Commons Collections (3.2.1)
[ 104] [Active ] [ ] [ ] [ 60] Commons Pool (1.5.5)
[ 105] [Active ] [ ] [ ] [ 60] Apache ServiceMix :: Bundles :: serp (1.13.1.3)
[ 106] [Active ] [ ] [ ] [ 60] Apache Aries JNDI Bundle (0.3.0.SNAPSHOT)
[ 107] [Active ] [Created ] [ ] [ 60] Apache Aries Application OBR Resolver (0.3.0.SNAPSHOT)
[ 108] [Active ] [Created ] [ ] [ 60] Apache Aries Application Installer (0.3.0.SNAPSHOT)
[ 109] [Active ] [ ] [ ] [ 60] Apache Aries Application API (0.3.0.SNAPSHOT)
[ 110] [Active ] [Created ] [ ] [ 60] Apache Aries Application Management (0.3.0.SNAPSHOT)
[ 111] [Active ] [Created ] [ ] [ 60] Apache Aries Application Runtime (0.3.0.SNAPSHOT)
[ 112] [Active ] [Created ] [ ] [ 60] Apache Aries Application Utils (0.3.0.SNAPSHOT)
[ 113] [Active ] [Created ] [ ] [ 60] Apache Aries Application Modelling (0.3.0.SNAPSHOT)
[ 114] [Active ] [Created ] [ ] [ 60] Apache Aries Application Default local platform (0.3.0.SNAPSHOT)
[ 115] [Active ] [Created ] [ ] [ 60] Apache Aries Application Platform Repository (0.3.0.SNAPSHOT)
[ 116] [Active ] [Created ] [ ] [ 60] Apache Aries Application postresolve process (0.3.0.SNAPSHOT)
[ 117] [Active ] [Created ] [ ] [ 60] Apache Aries Application Deployment Management (0.3.0.SNAPSHOT)
[ 118] [Active ] [ ] [ ] [ 60] Aries JPA Container API (0.3.0.SNAPSHOT)
[ 119] [Active ] [ ] [ ] [ 60] Aries JPA Container (0.3.0.SNAPSHOT)
[ 120] [Active ] [Created ] [ ] [ 60] Aries JPA Container blueprint integration for Aries blueprint (0.3.0.SNAPSHOT)
[ 121] [Active ] [ ] [ ] [ 60] Aries JPA Container Managed Contexts (0.3.0.SNAPSHOT)
[ 122] [Active ] [ ] [ ] [ 60] Apache Aries Transaction Manager (0.3.0.SNAPSHOT)
[ 123] [Active ] [Created ] [ ] [ 60] Apache Aries Transaction Blueprint (0.3.0.SNAPSHOT)
[ 124] [Active ] [ ] [ ] [ 60] Apache Aries Transaction Enlisting JDBC Datasource (0.3.0.SNAPSHOT)
[ 125] [Active ] [Created ] [ ] [ 60] Apache Aries blog sample transaction enlisting JDBC datasource (0.3.0.SNAPSHOT)
[ 188] [Active ] [ ] [ ] [ 60] Apache Aries blog sample web component (0.3.0.SNAPSHOT)
[ 189] [Active ] [ ] [ ] [ 60] Apache Aries blog sample API (0.3.0.SNAPSHOT)
[ 190] [Active ] [Created ] [ ] [ 60] Apache Aries blog sample persistence (0.3.0.SNAPSHOT)
[ 191] [Active ] [Created ] [ ] [ 60] Apache Aries blog sample (0.3.0.SNAPSHOT)
9) Go to the web site --> http://localhost:8181/blog/ViewBlog
issueID:ARIES-556
type:Bug
changed files:
texts:Aries fails to read persistence.xml files larger than 8192 bytes
This is probably caused by wrong implementation within org.apache.aries.jpa.container.parsing.impl.PersistenceDescriptorParserImpl parse method.
If one tries to read persistence.xml files larger than 8192 the following exception is thrown:
13:52:01.492 ERROR [Start Level Event Dispatcher][org.apache.aries.jpa.container:331] There was an error while parsing the persistence descriptor META-INF/openjpa_persistence_product.xml in bundle com.navteq.phoenix.jpa_1.0.0. No persistence units will be managed for this bundle
org.apache.aries.jpa.container.parsing.PersistenceDescriptorParserException: There was an error parsing META-INF/openjpa_persistence_product.xml in bundle com.navteq.phoenix.jpa_1.0.0
at org.apache.aries.jpa.container.parsing.impl.PersistenceDescriptorParserImpl.parse(PersistenceDescriptorParserImpl.java:98) ~[org.apache.aries.jpa.container-0.2-incubating.jar:0.2-incubating]
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.parseBundle(PersistenceBundleManager.java:329) [org.apache.aries.jpa.container-0.2-incubating.jar:0.2-incubating]
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.setupManager(PersistenceBundleManager.java:350) [org.apache.aries.jpa.container-0.2-incubating.jar:0.2-incubating]
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.addingBundle(PersistenceBundleManager.java:148) [org.apache.aries.jpa.container-0.2-incubating.jar:0.2-incubating]
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.addingBundle(InternalRecursiveBundleTracker.java:70) [org.apache.aries.util-0.2-incubating.jar:0.2-incubating]
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:440) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:184) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:159) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.apache.aries.util.tracker.RecursiveBundleTracker.open(RecursiveBundleTracker.java:77) [org.apache.aries.util-0.2-incubating.jar:0.2-incubating]
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.open(PersistenceBundleManager.java:132) [org.apache.aries.jpa.container-0.2-incubating.jar:0.2-incubating]
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.start(PersistenceBundleManager.java:619) [org.apache.aries.jpa.container-0.2-incubating.jar:0.2-incubating]
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:783) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at java.security.AccessController.doPrivileged(Native Method) [na:1.6.0_22]
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:774) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:755) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:370) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:374) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1067) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:561) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:546) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:459) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:440) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:337) [org.eclipse.osgi_3.6.0.v20100517.jar:na]
Caused by: java.io.IOException: Resetting to invalid mark
at java.io.BufferedInputStream.reset(BufferedInputStream.java:416) ~[na:1.6.0_22]
at org.apache.aries.jpa.container.parsing.impl.PersistenceDescriptorParserImpl.parse(PersistenceDescriptorParserImpl.java:90) ~[org.apache.aries.jpa.container-0.2-incubating.jar:0.2-incubating]
... 25 common frames omitted
issueID:ARIES-557
type:Improvement
changed files:application/application-api/src/main/java/org/apache/aries/application/modelling/ModellingConstants.java
application/application-api/src/main/java/org/apache/aries/application/management/ResolverException.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
texts:Resolver exception should include more information about nature of missing requirements
It would be handy to have the ResolverException be able to return information about what kind of requirement the unsatisfied requirements are. The AriesOBRResolver gets the information from OBR but strips it out.
issueID:ARIES-558
type:Bug
changed files:quiesce/quiesce-manager/src/main/java/org/apache/aries/quiesce/manager/impl/QuiesceManagerImpl.java
texts:Risk of deadlock in BundleQuiescer.run()
Tidy up run() to remove deadlock risk
issueID:ARIES-56
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:Bean factory-ref and service reference bean are not working together
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
<bean id="product" factory-ref="factory" factory-method="create" init-method="run" />
<reference id="factory" interface="test.pack.Factory" />
</blueprint>
I get a ComponentDefinitionException complaining that ReferenceRecipe.ServiceProxyWrapper does not have the create method. The problem seems to be that ServiceProxyWrappers are not unwrapped when creating beans.
issueID:ARIES-561
type:Improvement
changed files:
texts:Update Subsystems to later Equinox and tidy up references to old prototype.

issueID:ARIES-563
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AbstractProxyManager.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:The NamespaceHandlerRegistryImpl does not actually reuse parsed schemas

issueID:ARIES-564
type:Bug
changed files:
texts:The cm and ext namespaces should be lazy managers

issueID:ARIES-565
type:Bug
changed files:
texts:Some licenses in the blog sample tests are incorrect
The license text in some tests under blog itests are missing the first line (Licensed to the Apache Software Foundation (ASF) under one: see JdbcBlogSampleWithEbaTest.java)
issueID:ARIES-567
type:Improvement
changed files:jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
quiesce/quiesce-manager/src/main/java/org/apache/aries/quiesce/manager/impl/Activator.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/BlueprintState.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ManagedObjectManager.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
texts:Create common utility method for service unregistration
There are quite a few places in the Aries code base that unregister services without catching the potential IllegalStateException. There should be a common utility method in utils that can be used to safely dispose of these services.
issueID:ARIES-568
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
util/src/main/java/org/apache/aries/util/tracker/InternalRecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
texts:More memory leaks
I have seen at least two more memory leaks in the Apache Aries stack:
org.apache.aries.util.tracker.InternalRecursiveBundleTracker keeps a Set of BundleContext objects that is not cleared out due to a bug
issueID:ARIES-569
type:Improvement
changed files:
texts:Update the versions of PAX exam that we use
We currently default to PAX Exam 1.2.0 in the default parent. I'd like to move this up to version 1.2.3 following this discussion on the aries user list. http://mail-archives.apache.org/mod_mbox/aries-user/201102.mbox/browser
the short summary is that the blog itests hang under some circumstances and that the issue is fixed by using a later version of pax-exam
issueID:ARIES-57
type:Bug
changed files:
texts:Stop Blueprint shipping OSGi api classes
The blueprint bundle contains the OSGi apis. This packages should be pulled in from outside which also reduces the size of the bundle.
issueID:ARIES-571
type:Bug
changed files:
texts:Revert the changes in parent/default-parent/pom.xm that calculate import ranges based on ${project.version}
The changes checked in under this JIRA reverts this.
Note - this is only a small part of what was fixed under ARIES-262.
issueID:ARIES-572
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
texts:NamingException in JMXConnectionFactory.connect() calls with JMX over RMI calls
public class Activator implements BundleActivator {
@Override
public void start(BundleContext bundleContext) throws Exception
{ Map<String, Object> env = new HashMap<String, Object>(); env.put("osgi.service.jndi.bundleContext", bundleContext); JMXConnectorFactory.connect(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1717/jmxrmi"), env); }
@Override
public void stop(BundleContext arg0) throws Exception {
}
}
The bundle context in the environment is necessary to work around another issue.
The NamingException is thrown by com.sun.jndi.url.rmi.rmiURLContextFactory.getObjectInstance() if the first parameter is not an URL. This method is called from org.apache.aries.jndi.ObjectFactoryHelper.getObjectInstanceUsingObjectFactories(). This method iterates over all registered ObjectFactories to check if there is a better implementation than the one provided in the first argument, however if it comes to Sun's object factory the NamingException occurs (and will be propagated upwards) even though the proxy object that is already there is actually fine.
Therefore I would propose the following change:
Index: src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
===================================================================
— src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java (revision 1068918)
+++ src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java (working copy)
@@ -115,6 +115,7 @@
try
{ result = factory.getObjectInstance(obj, name, nameCtx, environment); + }
catch (NamingException e) {
} finally
{ callerContext.ungetService(ref); }
The empty catch block is needed because obviously some ObjectFactories throw a NamingException instead of returning null in some circumstances.
issueID:ARIES-573
type:Bug
changed files:
texts:Java2 security problem in Aries Managed Persistence contexts
ManagedPersistenceContextFactory gets hold of a BundleContext for the persistence bundle with client code on the stack.
issueID:ARIES-574
type:Improvement
changed files:application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/ModelledBundleResource.java
application/application-noop-resolver/src/main/java/org/apache/aries/application/resolver/noop/impl/NoOpResolver.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/DeploymentManifestManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
texts:Expose ModelledBundleResource
The ModelledBundleResource class could be externally useful and perhaps ought to be moved into the external package of the resolver.obr bundle. I've also realised that the work done under is not so useful as I hoped it would be, so I'm going to back it out to eliminate unneeded code.
issueID:ARIES-576
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:When the grace period is up the error message reports all services as missing, not the missing ones

issueID:ARIES-577
type:Improvement
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceMetadataImpl.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DefaultRunnable.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Make optional references sane
One of the problems with optional references is that you have to wrap any call to them in a try catch for ServiceUnavailableException which could be thrown. There is no realistic way to "know" that the proxy is wired. Any option you might choose provides a window where you could still get ServiceUnavailableException.
Instead I propose adding the following optional attribute in the blueprint extension schema:
default="bean id"
when the no backing service is provided if this is set the request will be silently routed to the identified default bean. When the service arrives it will switch and route to the target service. When the service goes it will route back to the default bean assuming no alternative is available.
issueID:ARIES-578
type:New Feature
changed files:transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Provide hook point for different Blueprint transaction interceptor similar to JPA hook point for persistence units
In some environments a transaction interceptor may be able to use additional vendor specific APIs. To support this it would be nice to have a plug-point to substitute a custom transaction interceptor for the default one in transaction-blueprint.
issueID:ARIES-579
type:Bug
changed files:
texts:Update the name in the proxy-api and proxy-impl
The Proxy API POM doesn't make it clear it just contains API.
The Proxy Impl POM doesn't make it clear it contains a service implementation.
issueID:ARIES-58
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/FragmentBuilder.java
texts:Move the com.ibm.osgi.util project from the initial ibm contribution to aries trunk

issueID:ARIES-580
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
texts:Revert move of SingleServiceTracker from org.apache.util to org.apache.util.tracker

issueID:ARIES-581
type:Improvement
changed files:
texts:Provide a java6 parent

issueID:ARIES-582
type:Bug
changed files:util/src/main/java/org/apache/aries/util/filesystem/IFile.java
util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
application/application-utils/src/main/java/org/apache/aries/application/utils/manifest/ManifestDefaultsInjector.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataImpl.java
util/src/main/java/org/apache/aries/util/filesystem/IDirectory.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
util/src/main/java/org/apache/aries/util/filesystem/ICloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
util/src/main/java/org/apache/aries/util/filesystem/FileUtils.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/ApplicationResourceImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
util/src/main/java/org/apache/aries/util/io/IOUtils.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedBundleImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataFactoryImpl.java
application/application-utils/src/main/java/org/apache/aries/application/utils/manifest/ContentFactory.java
util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
application/application-api/src/main/java/org/apache/aries/application/management/ResolveConstraint.java
application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
application/application-api/src/main/java/org/apache/aries/application/Content.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
util/src/main/java/org/apache/aries/util/io/RememberingInputStream.java
application/application-install/src/main/java/org/apache/aries/application/install/EBAInstaller.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConverter.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentContentImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedServiceImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationManager.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceImpl.java
util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
util/src/main/java/org/apache/aries/util/manifest/Constants.java
util/src/main/java/org/apache/aries/util/filesystem/FileSystem.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ParserProxyImpl.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadataFactory.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/ext/ModelledBundleResource.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileSystemImpl.java
application/application-converters/src/main/java/org/apache/aries/application/converters/WabConverterService.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/utils/EquinoxFrameworkUtils.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ExportedBundleImpl.java
util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResourceManager.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
util/src/main/java/org/apache/aries/util/manifest/BundleManifest.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipCloseableDirectory.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ImportedPackageImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataFactoryImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/utils/impl/ModellingHelperImpl.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedFrameworkPreResolveHook.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedCloseableDirectory.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationImpl.java
util/src/main/java/org/apache/aries/util/VersionRange.java
texts:Updates to the util module required for a release
This work item covers items that should be performed for a 1.x release of the util module.
Items include:
1. Move the SingleServiceTracker into the org.apache.aries.util.tracker package
2. Remove the BundleToClassLoaderAdapter class from org.apache.aries.util
3. Look into what, if anything, should be moved from application-util into util.
issueID:ARIES-583
type:Improvement
changed files:application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/MessageUtil.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/internal/DefaultPlatformRepository.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DefaultPostResolveTransformer.java
texts:Update the application components to use the ext:default capability for default service implementations

issueID:ARIES-584
type:Bug
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/BaseManagedServiceFactory.java
texts:Blueprint Managed Service Factory Instantiates Duplicate Service
Creating a simple managed service factory, two services are instantiated for a single factory configuration.
issueID:ARIES-585
type:Bug
changed files:
texts:build with clean .m2 fails
application-itests requires the org.apache.aries.application.noop.platform.repo artifact which doesn't seem to be built anywhere
issueID:ARIES-586
type:Bug
changed files:application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/PreResolveHook.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedFrameworkPreResolveHook.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
texts:Isolation based runtime doesn't work when resolving maven generated blueprint bundles
The Isolation based runtime for the application module does not work correctly if a bundle has a dependency on org.osgi.service.blueprint. It has two failure modes.
If the OBR provisioner uses the local repository it provisions against these and then attempts to install blueprint, and dependencies, into the shared bundle framework. These are already outside the shared bundle framework and available via the shared bundle framework configuration. In this situation installation of an application fails when it tries, and fails, to locate blueprint for installation. If it worked we would hit a different problem whereby we have two blueprint runtimes running trying to process application bundles blueprint.
If the OBR provisioner uses the local repository it fails to provision the application as it cannot find a provider for org.osgi.service.blueprint.
Solution
----------------
I will update the application code so the isolation runtime can provide additional "fake" bundles to the resolution that represents the exports provided by the shared bundle framework. This will allow the application to resolve. These fake bundles will be removed from the result so they do not appear in the deployment manifest for the application. This is similar to what we do today for the application import and export services. I will also force the resolver to not use the local repository.
issueID:ARIES-587
type:Improvement
changed files:
texts:Add more m2e ignore stuff to the default parent pom

issueID:ARIES-588
type:Bug
changed files:
texts:Blog itests fail as they try to install deleted modules
java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.junit.internal.DefaultConfigMethod.getOptions(DefaultConfigMethod.java:133)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.getOptions(JUnit4TestRunner.java:347)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.getTestMethods(JUnit4TestRunner.java:97)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.<init>(JUnit4TestRunner.java:80)
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:31)
at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:24)
at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:57)
at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:29)
at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:57)
at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:24)
at org.apache.maven.surefire.junit4.JUnit4TestSet.<init>(JUnit4TestSet.java:45)
at org.apache.maven.surefire.junit4.JUnit4DirectoryTestSuite.createTestSet(JUnit4DirectoryTestSuite.java:56)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.locateTestSets(AbstractDirectoryTestSuite.java:96)
at org.apache.maven.surefire.Surefire.createSuiteFromDefinition(Surefire.java:209)
at org.apache.maven.surefire.Surefire.run(Surefire.java:90)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: java.lang.RuntimeException: Could not resolve version. Do you have a dependency for org.apache.aries.application/org.apache.aries.application.noop.platform.repo in your maven project?
at org.ops4j.pax.exam.MavenUtils.getArtifactVersion(MavenUtils.java:69)
at org.ops4j.pax.exam.MavenUtils$1.getVersion(MavenUtils.java:102)
at org.ops4j.pax.exam.options.MavenArtifactUrlReference.version(MavenArtifactUrlReference.java:110)
at org.ops4j.pax.exam.options.MavenArtifactUrlReference.versionAsInProject(MavenArtifactUrlReference.java:118)
at org.ops4j.pax.exam.options.MavenArtifactUrlReference.versionAsInProject(MavenArtifactUrlReference.java:29)
at org.ops4j.pax.exam.options.MavenArtifactProvisionOption.versionAsInProject(MavenArtifactProvisionOption.java:121)
at org.apache.aries.samples.blog.itests.AbstractIntegrationTest.mavenBundle(AbstractIntegrationTest.java:80)
at org.apache.aries.samples.blog.itests.JdbcBlogSampleWithEbaTest.configuration(JdbcBlogSampleWithEbaTest.java:105)
... 29 more
issueID:ARIES-589
type:Improvement
changed files:
texts:Create an eba for the hello world blueprint application

issueID:ARIES-59
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Optional service reference cause blueprint to wait
Section 121.7.9 suggests with its definition of "optional" ...
"optional - Optional indicates that the satisfaction of this reference is not relevant for any registered services, or for the grace period."
that optional service references should not cause a wait when the application tries to use the service. However, in the current implementation the blueprint container will block on optional service references as well as mandatory ones.
This is quite a major problem since it means the blueprint extender itself can get blocked up if enough (3) bean init methods try to use optional and not-satisfied service references.
issueID:ARIES-590
type:Bug
changed files:
texts:Minor changes to parent poms
Update the version of the maven bundle plugin to 2.3.4
Add version information for maven-pmd-plugin (2.4)
issueID:ARIES-591
type:Bug
changed files:application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/BundleFrameworkManagerImpl.java
texts:Application isolation code doesn't cope properly with a warm start
This isn't ideal and it would be good to cope, but this is good enough for now.
issueID:ARIES-592
type:Bug
changed files:samples/twitter/twitter-bundle/src/main/java/org/apache/aries/sample/twitter/TwitterQuery.java
texts:Move the twitter itest stuff to be a sample

issueID:ARIES-593
type:Bug
changed files:util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
texts:ManifestHeaderProcessor can't handle directives with spaces before ":="

issueID:ARIES-594
type:Bug
changed files:subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/ScopeUpdate.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/InstallInfo.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/Scope.java
subsystem/subsystem-scope-api/src/main/java/org/apache/aries/subsystem/scope/SharePolicy.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeManager.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeUpdateImpl.java
texts:Subsystems needs to be updated for the OSGi Core 4.3 release.

issueID:ARIES-597
type:Improvement
changed files:
texts:Improve the JPA web page of Aries to explain step by step how to create a Aries JPA project

issueID:ARIES-599
type:Bug
changed files:jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
texts:Consistently use SLF4J Logging
It looks like certain classes are not using SLF4J API as should be done according to Alasdair Nottingham [1].
One such example is the JNDI Core BundleActivator [2]. Will search for others and try to provide a patch.
[1] http://markmail.org/message/hzwtvpqijt6tdnia
[2] http://svn.apache.org/repos/asf/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
issueID:ARIES-6
type:New Feature
changed files:
texts:Support for FactoryBean

issueID:ARIES-600
type:Bug
changed files:
texts:Do not preveint import of own exported API
The JNDI API project currently is setup to create a bundle which is intended to not import its own exported API:
<aries.osgi.import>
!org.osgi.service.jndi*,
*
</aries.osgi.import>
This is superfluous since the API is not referenced at all by the other API classes in this bundle. In fact BND emits a warning about this package not actually being used.
issueID:ARIES-601
type:Improvement
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
texts:Add service ranking to re-registered XA data source
In the blog sample we use the service property osgi.jndi.service.name to uniquely identify the datasource services. However, in the persistence.xml, we only use the jndi service name as a filter property, like:
<jta-data-source>osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/blogdb)</jta-data-source>
instead of writing:
<jta-data-source>osgi:service/jdbc/blogdb</jta-data-source>
It seems a shame to bother to specify the jndi.service.name property but then not take advantage of the shorter JNDI name, but there's a good reason we don't - it doesn't work.
The datasource blueprint.xml declares two services, for DataSource and XADataSource, and then Aries helpfully auto-creates a third service, which makes an enriched wrapper of the EmbeddedXADataSource bean for lookups of the DataSource interface.
Unfortunately, once this has been done we have two services with the same JNDI service name. Anything which uses the JNDI name
osgi:service/jdbc/blogdb, expecting a DataSource, gets a classcast exception, because an XADataSource is returned.
A neat solution is to add a service ranking (which adds, say, 1000 to the original service ranking) to the re-registered DataSource so that it is returned in preference to the XADataSource when a short-form JNDI lookup is done.
issueID:ARIES-602
type:Bug
changed files:application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/config/BundleFrameworkConfigurationFactoryImpl.java
application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/config/BundleFrameworkConfigurationImpl.java
texts:osgi.console port is not handled well.
When creating child frameworks the properties are inherited from the parent framework. If the parent framework has the osgi.console port set then this is inherited by the child framework. The problem is this results in clashes. So if it were set to a port number (other than 0) you would end up with equinox trying to listen twice for two different frameworks on the same port.
I think the simplest fix to this is to just set osgi.console to none for the child frameworks.
issueID:ARIES-603
type:Bug
changed files:
texts:Subsystems scope admin missing some tests

issueID:ARIES-604
type:Bug
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRCapability.java
texts:ClassCastException in felix bundle repository when generating repository xml
java.lang.ClassCastException: [Ljava.lang.String; incompatible with java.lang.String
at org.apache.felix.bundlerepository.impl.DataModelHelperImpl.capability(DataModelHelperImpl.java:162)
at org.apache.aries.application.resolver.obr.impl.OBRCapability.getProperties(OBRCapability.java:78)
at org.apache.aries.application.resolver.obr.impl.RepositoryGeneratorImpl.writeCapability(RepositoryGeneratorImpl.java:129)
at org.apache.aries.application.resolver.obr.impl.RepositoryGeneratorImpl.writeResource(RepositoryGeneratorImpl.java:105)
at org.apache.aries.application.resolver.obr.impl.RepositoryGeneratorImpl.generateRepository(RepositoryGeneratorImpl.java:202)
at org.apache.aries.application.resolver.obr.impl.RepositoryGeneratorImpl.generateRepository(RepositoryGeneratorImpl.java:176)
It's tripping over the blueprint namespace handler:
Properties:
{service=service, objectClass=org.apache.aries.blueprint.NamespaceHandler, service.ranking=0, osgi.service.blueprint.namespace=[Ljava.lang.String;@abb0abb}
osgi.service.blueprint.namespace=[Ljava.lang.String;@abb0abb is obviously a string array. Felix bundle repository DataModelHelperImpl is only prepared for String.
issueID:ARIES-605
type:Bug
changed files:
texts:Hello world Blueprint sample is broken
Need to add dependencies on proxy and asm
issueID:ARIES-606
type:Bug
changed files:
texts:Can't build subsystem from fresh checkout and local repo
1) subsystem relies on a 1.6.1-SNAPSHOT of Felix bundrepository which can't be found .... moving to 1.6.4
2) subsystem-core uses Equinox 3.7.0.v20110110 but other sibling modules use 3.7.0.v20110221 ... moving subsystem-core to the newer level gives a compile problem as it seems org.osgi.framework.wiring.Capability no longer exists.
issueID:ARIES-607
type:Improvement
changed files:
texts:Subsystem Scope Admin should be persistent.
A defined scope topology should survive framework restarts. A good faith effort should also be made to protect against crashes.
issueID:ARIES-608
type:Bug
changed files:util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
texts:DefaultWorker NPEs if loaded during framework shutdownl
!SESSION 2011-03-11 00:00:24.648 -----------------------------------------------
eclipse.buildId=unknown
java.fullversion=JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr8ifx-20100609_59383 (JIT enabled, AOT enabled)
J9VM - 20100609_059383
JIT - r9_20100401_15339ifx2
GC - 20100308_AA
BootLoader constants: OS=linux, ARCH=x86, WS=gtk, NL=en_US
!ENTRY org.eclipse.osgi 4 0 2011-03-11 00:00:24.648
!MESSAGE An unexpected runtime error has occurred.
!STACK 0
java.lang.ExceptionInInitializerError
at java.lang.J9VMInternals.initialize(J9VMInternals.java:222)
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:42)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:816)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:494)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:238)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:456)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1507)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1443)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1438)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:503)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:553)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1139)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.NullPointerException
at org.apache.aries.util.internal.DefaultWorker.<clinit>(DefaultWorker.java:39)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
... 29 more
!ENTRY org.apache.aries.blueprint 4 0 2011-03-11 00:00:24.650
!MESSAGE
!STACK 0
java.lang.ExceptionInInitializerError
at java.lang.J9VMInternals.initialize(J9VMInternals.java:222)
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:42)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:816)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:494)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:238)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:456)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1507)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1443)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1438)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:503)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:553)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1139)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.NullPointerException
at org.apache.aries.util.internal.DefaultWorker.<clinit>(DefaultWorker.java:39)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
... 29 more
!ENTRY org.eclipse.osgi 4 0 2011-03-11 00:00:24.658
!MESSAGE An unexpected runtime error has occurred.
!STACK 0
java.lang.NoClassDefFoundError: org.apache.aries.util.AriesFrameworkUtil (initialization failure)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:140)
at org.apache.aries.blueprint.container.ServiceRecipe.unregister(ServiceRecipe.java:201)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.notifySatisfaction(BlueprintContainerImpl.java:616)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.setSatisfied(AbstractServiceReferenceRecipe.java:305)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceRemoved(AbstractServiceReferenceRecipe.java:281)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:251)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:815)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:772)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:225)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.unregisterServices(ServiceRegistry.java:636)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.close(BundleContextImpl.java:88)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:511)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:553)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1139)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.ExceptionInInitializerError
at java.lang.J9VMInternals.initialize(J9VMInternals.java:222)
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:42)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:816)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:494)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:238)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:456)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1507)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1443)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1438)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:503)
... 10 more
Caused by: java.lang.NullPointerException
at org.apache.aries.util.internal.DefaultWorker.<clinit>(DefaultWorker.java:39)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
... 29 more
!ENTRY org.apache.aries.application.modeller 4 0 2011-03-11 00:00:24.659
!MESSAGE
!STACK 0
java.lang.NoClassDefFoundError: org.apache.aries.util.AriesFrameworkUtil (initialization failure)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:140)
at org.apache.aries.blueprint.container.ServiceRecipe.unregister(ServiceRecipe.java:201)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.notifySatisfaction(BlueprintContainerImpl.java:616)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.setSatisfied(AbstractServiceReferenceRecipe.java:305)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceRemoved(AbstractServiceReferenceRecipe.java:281)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:251)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:815)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:772)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:225)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.unregisterServices(ServiceRegistry.java:636)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.close(BundleContextImpl.java:88)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:511)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:553)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1139)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.ExceptionInInitializerError
at java.lang.J9VMInternals.initialize(J9VMInternals.java:222)
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:42)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:816)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:494)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:238)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:456)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1507)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1443)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1438)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:503)
... 10 more
Caused by: java.lang.NullPointerException
at org.apache.aries.util.internal.DefaultWorker.<clinit>(DefaultWorker.java:39)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
... 29 more
!ENTRY org.apache.aries.blueprint 4 0 2011-03-11 00:00:24.663
!MESSAGE
!STACK 0
org.osgi.framework.BundleException: Exception in org.apache.aries.blueprint.container.BlueprintExtender.stop() of bundle org.apache.aries.blueprint.
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.stop(BundleContextImpl.java:791)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:507)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:553)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1139)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.NoClassDefFoundError: org.apache.aries.util.AriesFrameworkUtil (initialization failure)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:140)
at org.apache.aries.blueprint.container.BlueprintExtender.stop(BlueprintExtender.java:158)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:771)
at java.security.AccessController.doPrivileged(AccessController.java:251)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.stop(BundleContextImpl.java:764)
... 11 more
Caused by: java.lang.ExceptionInInitializerError
at java.lang.J9VMInternals.initialize(J9VMInternals.java:222)
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:42)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:816)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:494)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:238)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:456)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1507)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1443)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1438)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:503)
... 10 more
Caused by: java.lang.NullPointerException
at org.apache.aries.util.internal.DefaultWorker.<clinit>(DefaultWorker.java:39)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
... 29 more
Root exception:
java.lang.NoClassDefFoundError: org.apache.aries.util.AriesFrameworkUtil (initialization failure)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:140)
at org.apache.aries.blueprint.container.BlueprintExtender.stop(BlueprintExtender.java:158)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:771)
at java.security.AccessController.doPrivileged(AccessController.java:251)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.stop(BundleContextImpl.java:764)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:507)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:553)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1139)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:691)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:598)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.ExceptionInInitializerError
at java.lang.J9VMInternals.initialize(J9VMInternals.java:222)
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:42)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:816)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:494)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:238)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:456)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1507)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1443)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1438)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:503)
... 10 more
Caused by: java.lang.NullPointerException
at org.apache.aries.util.internal.DefaultWorker.<clinit>(DefaultWorker.java:39)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)
... 29 more
issueID:ARIES-609
type:Bug
changed files:util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
texts:AriesFrameworkUtil uses DefaultWorker on Equinox rather than the Equinox worker

issueID:ARIES-61
type:New Feature
changed files:util/src/main/java/org/apache/aries/util/tracker/BundleTrackerFactory.java
texts:provide a common bundle tracker customizer and bundle tracker factory that can be used by extenders
Draft RFC 138 API introduced the concept of composite bundle.
Proposed is a common bundle tracker customizer that would open bundletracker whenever a starting event of a composite bundle is detected so that we can track bundles installed onto the framework associated with the composite bundle. The bundle tracker associated with the composite bundle is tracked in the bundle tracker factory so that we can close out the bundletracker associated with the composite bundle when a stopping event of the composite bundle is detected.
The implementation is based on equinox 3.5 impl of RFC 138 and will be updated when this RFC is finalized.
issueID:ARIES-611
type:Improvement
changed files:
texts:Add a test to ensure we process fragments correctly
A recent email on the user list claimed that blueprint doesn't work properly with fragments. We do not appear to have any tests, so I will create some.
issueID:ARIES-612
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:cannot access referenced service in destroy-method
I've got a working blueprint bundle to register some default OBR repositories on initialization of the bundle.
The xml config looks like:
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
<bean class="xxx.yyy.RepositoryRegistrationBean"
init-method="init" destroy-method="shutdown">
<argument index="0" ref="blueprintBundleContext"/>
<argument index="1" ref="repositoryAdmin"/>
</bean>
<reference id="repositoryAdmin"
interface="org.apache.felix.bundlerepository.RepositoryAdmin">
</reference>
</blueprint>
Both BundleContext & RepositoryAdmin are injected to RepositoryRegistrationBean's constructor. The init() works.
However, when i try to access the RepositoryAdmin during shutdown(), i got this exception:
2011-03-15 22:06:49,899 INFO [Thread:Gogo shell] [8/org.apache.aries.blueprint/0.3.0] org.apache.aries.blueprint.container.BeanRecipe - Error invoking destroy method
org.osgi.service.blueprint.container.ServiceUnavailableException: The Blueprint container is being or has been destroyed
at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:176)
at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:49)
at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:201)
at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)
at org.apache.aries.proxy.impl.DefaultWrapper.invoke(DefaultWrapper.java:31)
at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78)
at $Proxy6.removeRepository(Unknown Source)
at play.osgi.bundle.config.RepositoryRegistrationBean.shutdown(RepositoryRegistrationBean.java:39)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_24]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_24]
Reference mailing list entry http://bit.ly/e0WbRk
issueID:ARIES-613
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:
Suggesting to change the following line in org.apache.aries.blueprint.container.BeanRecipe's destroy() to LOGGER.error.LOGGER.info("Error invoking destroy method", getRealCause(e));2011-03-15 22:21:04,760 INFO  &#91;Thread:Gogo shell&#93; &#91;8/org.apache.aries.blueprint/0.3.0&#93;org.apache.aries.blueprint.container.BeanRecipe - Error invoking destroy methodorg.osgi.service.blueprint.container.ServiceUnavailableException: The Blueprint container is being or has been destroyed at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:176) at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:49) at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:201) at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)It is a trivial thing, but helps in troubleshooting.
issueID:ARIES-615
type:Bug
changed files:util/src/main/java/org/apache/aries/util/internal/EquinoxWorker.java
texts:Failing Blueprint iTests
Two of the the Blueprint tests fail. The failure is similar on both cases, tests are:
BlueprintContainerBTCustomizerTest
BlueprintContainer2BTCustomizerTest
Both tests pass on the 0.3 release. The only changes that have been made in Blueprint are the changes to parent/packageinfo under ARIES-598 and the changes made under ARIES-611 so it's likely one of these.
-------------------------------------------------------------------------------
Test set: org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 66.401 sec <<< FAILURE!
test [equinox/3.5.0](org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest) Time elapsed: 66.351 sec <<< ERROR!
java.lang.RuntimeException: Gave up waiting for service (&(objectClass=org.osgi.service.blueprint.container.BlueprintContainer)(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint.sample))
at org.apache.aries.blueprint.itests.AbstractIntegrationTest.getOsgiService(AbstractIntegrationTest.java:122)
at org.apache.aries.blueprint.itests.AbstractIntegrationTest.getBlueprintContainerForBundle(AbstractIntegrationTest.java:90)
at org.apache.aries.blueprint.itests.AbstractIntegrationTest.testBlueprintContainer(AbstractIntegrationTest.java:230)
at org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest.test(BlueprintContainer2BTCustomizerTest.java:105)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:143)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:105)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
at sun.rmi.transport.Transport$1.run(Transport.java:159)
at java.security.AccessController.doPrivileged(Native Method)
at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:680)
issueID:ARIES-617
type:Bug
changed files:
texts:Change the blog samples and aries trader to use the Aries semantic versioning scheme
Since all of the rest of trunk has switched to follow a best practice scheme for versioning, the samples should do the same.
issueID:ARIES-618
type:Bug
changed files:application/application-tooling-repository-generator/src/main/java/org/apache/aries/application/repository/generator/AriesRepositoryGenerator.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/repository/RepositoryGenerator.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
util/src/main/java/org/apache/aries/util/filesystem/FileUtils.java
texts:Create a command line repository generator
Apache Aries needs to provide a command line tool to generate repository in order to make it easier to use external repository.
issueID:ARIES-62
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
texts:Incorrect method name within Collaborator to handle unwrapping bean.
In order to correctly handle equals logic, Collaborator unwraps Interceptor wrappered beans before passing the argument onto the delgated equals method.
Unfortunately, a late change meant the method name of the WrapperedObject interface, and that handled by the Collaborator to perform the unwrapping, are not in agreement.
issueID:ARIES-620
type:Improvement
changed files:
texts:Add distro for application (isolated and non-isolated)

issueID:ARIES-621
type:Bug
changed files:
texts:Correct the samples helloworld assembly pom to use filtered resources

issueID:ARIES-623
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ExecutionContext.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/AbstractRecipe.java
texts:Another deadlock in Blueprint service lookup
As first described in https://issues.apache.org/jira/browse/GERONIMO-5554, and possibly partially addressed in ARIES-390 there is potential deadlock in the Blueprint service code.
Following is the full thread dump. The locked threads are summarised at the end, as usual.
Full thread dump OpenJDK Server VM (19.0-b09 mixed mode):
"RMI TCP Connection(idle)" daemon prio=10 tid=0x099d9c00 nid=0x1996 waiting on condition [0x879ad000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x93dcebf0> (a java.util.concurrent.SynchronousQueue$TransferStack)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:453)
at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:352)
at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:903)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Thread-45" prio=10 tid=0x09cf6400 nid=0x18bc waiting on condition [0x85d1f000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[8, SERVER]" prio=10 tid=0x09cf5400 nid=0x18bb waiting on condition [0x85d70000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb38f25d8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[8, CLIENT]" prio=10 tid=0x09cfec00 nid=0x18ba waiting on condition [0x85dc1000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb362a488> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-44" prio=10 tid=0x09d03c00 nid=0x18b9 waiting on condition [0x85e12000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[8, SERVER]" prio=10 tid=0x09513000 nid=0x18b8 waiting on condition [0x85e63000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3803fd0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[8, CLIENT]" prio=10 tid=0x09512000 nid=0x18b7 waiting on condition [0x85eb4000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3632ed8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-43" prio=10 tid=0x09510400 nid=0x18b6 waiting on condition [0x85f05000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[7, SERVER]" prio=10 tid=0x0950f000 nid=0x18b5 waiting on condition [0x85f56000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb38f41f8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[7, CLIENT]" prio=10 tid=0x0950dc00 nid=0x18b4 waiting on condition [0x85fa7000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb361a390> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-42" prio=10 tid=0x0992a800 nid=0x18b3 waiting on condition [0x85ff8000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[7, SERVER]" prio=10 tid=0x09929000 nid=0x18b2 waiting on condition [0x86049000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb37eb080> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[7, CLIENT]" prio=10 tid=0x09927400 nid=0x18b1 waiting on condition [0x8609a000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb361ee18> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"EventConsumer-1" daemon prio=10 tid=0x09a86000 nid=0x18b0 waiting on condition [0x860eb000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3644a48> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.ArrayBlockingQueue.poll(ArrayBlockingQueue.java:370)
at com.mst.fusion.event.server.cdo.consumer.EventBuffer$EventBufferIterator.run(EventBuffer.java:219)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Thread-40" prio=10 tid=0x09a7fc00 nid=0x18af waiting on condition [0x8613c000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[6, SERVER]" prio=10 tid=0x09ee7800 nid=0x18ae waiting on condition [0x8618d000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3903178> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[6, CLIENT]" prio=10 tid=0x09ee6000 nid=0x18ad waiting on condition [0x861de000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb358ad90> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-39" prio=10 tid=0x09ee5000 nid=0x18ac waiting on condition [0x8622f000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[6, SERVER]" prio=10 tid=0x09eeb000 nid=0x18ab waiting on condition [0x86280000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb38ed128> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[6, CLIENT]" prio=10 tid=0x09d44c00 nid=0x18aa waiting on condition [0x862d1000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3597dd0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"pool-10-thread-10" prio=10 tid=0x894f7000 nid=0x18a9 waiting on condition [0x86322000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-10-thread-9" prio=10 tid=0x87f60800 nid=0x18a8 waiting on condition [0x86373000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Thread-38" prio=10 tid=0x097d2400 nid=0x18a7 waiting on condition [0x863c4000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[5, SERVER]" prio=10 tid=0x097d0c00 nid=0x18a6 waiting on condition [0x86415000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb38f9518> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[5, CLIENT]" prio=10 tid=0x097cf000 nid=0x18a5 waiting on condition [0x86466000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb35fd5e8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-37" prio=10 tid=0x097ce400 nid=0x18a4 waiting on condition [0x864b7000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[5, SERVER]" prio=10 tid=0x09d36000 nid=0x18a3 waiting on condition [0x86508000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb37ed288> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[5, CLIENT]" prio=10 tid=0x09d37c00 nid=0x18a2 waiting on condition [0x86559000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3617be0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"pool-9-thread-10" prio=10 tid=0x88927800 nid=0x189c waiting on condition [0x8673f000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-9" prio=10 tid=0x88926800 nid=0x189b waiting on condition [0x86790000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-8" prio=10 tid=0x8aa30c00 nid=0x189a waiting on condition [0x867e1000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-7" prio=10 tid=0x894f3c00 nid=0x1899 waiting on condition [0x86832000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"InvalidationRunner" prio=10 tid=0x09d33400 nid=0x1898 waiting on condition [0x86883000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb351ee88> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"pool-9-thread-6" prio=10 tid=0x8aa1f800 nid=0x1897 waiting on condition [0x868d4000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-5" prio=10 tid=0x8aa05800 nid=0x1896 waiting on condition [0x86925000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Thread-31" prio=10 tid=0x09caa400 nid=0x1895 waiting on condition [0x86976000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[4, SERVER]" prio=10 tid=0x09ca9400 nid=0x1894 waiting on condition [0x869c7000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb38fa600> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[4, CLIENT]" prio=10 tid=0x09ca8800 nid=0x1893 waiting on condition [0x86a18000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb362b5b8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-30" prio=10 tid=0x09d0ec00 nid=0x1892 waiting on condition [0x86a69000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[4, SERVER]" prio=10 tid=0x09d0cc00 nid=0x1891 waiting on condition [0x86aba000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb37f2c70> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[4, CLIENT]" prio=10 tid=0x09649c00 nid=0x1890 runnable [0x86b0b000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3623fc0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"pool-10-thread-8" prio=10 tid=0x8aa33400 nid=0x188f waiting on condition [0x86b5c000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-10-thread-7" prio=10 tid=0x8947f800 nid=0x188e waiting on condition [0x86bad000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-10-thread-6" prio=10 tid=0x8aa17400 nid=0x188d waiting on condition [0x8985c000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-10-thread-5" prio=10 tid=0x8a0b2000 nid=0x188c waiting on condition [0x8795c000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Thread-29" prio=10 tid=0x0a067800 nid=0x188b waiting on condition [0x879fe000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[3, SERVER]" prio=10 tid=0x0a067000 nid=0x188a waiting on condition [0x87c5c000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb38fbb60> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[3, CLIENT]" prio=10 tid=0x0a066c00 nid=0x1889 waiting on condition [0x8730b000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3527670> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-28" prio=10 tid=0x0aa8b400 nid=0x1888 waiting on condition [0x873fe000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[3, SERVER]" prio=10 tid=0x098db400 nid=0x1887 waiting on condition [0x8755c000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb37f3ee0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[3, CLIENT]" prio=10 tid=0x096d5000 nid=0x1886 runnable [0x875ad000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3535fc8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"pool-10-thread-4" prio=10 tid=0x87fab800 nid=0x1885 waiting on condition [0x86bfe000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-10-thread-3" prio=10 tid=0x89947800 nid=0x1884 waiting on condition [0x87869000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-4" prio=10 tid=0x8a010400 nid=0x1880 waiting on condition [0x86fe1000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-3" prio=10 tid=0x89d08400 nid=0x187f waiting on condition [0x87032000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Thread-24" prio=10 tid=0x8adde800 nid=0x187e waiting on condition [0x87083000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[2, SERVER]" prio=10 tid=0x8adddc00 nid=0x187d runnable [0x870d4000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3900d48> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[2, CLIENT]" prio=10 tid=0x8a0c6400 nid=0x187c waiting on condition [0x87125000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb38f1440> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"Thread-23" prio=10 tid=0x8a042800 nid=0x187b waiting on condition [0x87176000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"ReceiveSerializer-Channel[2, SERVER]" prio=10 tid=0x8a041800 nid=0x187a runnable [0x871c7000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb37f57b0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"ReceiveSerializer-Channel[2, CLIENT]" prio=10 tid=0x89480000 nid=0x1879 runnable [0x87218000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3666670> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:423)
at org.eclipse.net4j.util.concurrent.QueueWorker.work(QueueWorker.java:72)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:188)
"pool-10-thread-2" prio=10 tid=0x8aa14000 nid=0x1877 waiting on condition [0x87269000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-10-thread-1" prio=10 tid=0x8aa17800 nid=0x1876 waiting on condition [0x872ba000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb3667610> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-2" prio=10 tid=0x87a6bc00 nid=0x1873 waiting on condition [0x873ad000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"pool-9-thread-1" prio=10 tid=0x8aad6c00 nid=0x1872 waiting on condition [0x89a5c000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0xb366a490> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"BufferPoolMonitor" daemon prio=10 tid=0x0a6c2c00 nid=0x186a in Object.wait() [0x87cad000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0xb351df20> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:133)
locked <0xb351df20> (a java.lang.ref.ReferenceQueue$Lock)
at org.eclipse.internal.net4j.buffer.BufferPool$Monitor.run(BufferPool.java:216)
"TCPSelector" daemon prio=10 tid=0x09cf1c00 nid=0x1869 runnable [0x87cfe000]
java.lang.Thread.State: RUNNABLE
at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)
at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:228)
at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:83)
at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87)
locked <0x94259f40> (a sun.nio.ch.Util$1)
locked <0x94259f30> (a java.util.Collections$UnmodifiableSet)
locked <0x94259b20> (a sun.nio.ch.EPollSelectorImpl)
at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)
at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)
at org.eclipse.net4j.internal.tcp.TCPSelector.run(TCPSelector.java:160)
at java.lang.Thread.run(Thread.java:636)
"BufferPoolMonitor" daemon prio=10 tid=0x09aad000 nid=0x1868 in Object.wait() [0x8859f000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0xb3666d90> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:133)
locked <0xb3666d90> (a java.lang.ref.ReferenceQueue$Lock)
at org.eclipse.internal.net4j.buffer.BufferPool$Monitor.run(BufferPool.java:216)
"Thread-16" prio=10 tid=0x09eec800 nid=0x1867 waiting on condition [0x875fe000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"Connection-Keep-Alive-DBStore@2" daemon prio=10 tid=0x0a376800 nid=0x1866 in Object.wait() [0x885fe000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x9420ed08> (a java.util.TaskQueue)
at java.util.TimerThread.mainLoop(Timer.java:531)
locked <0x9420ed08> (a java.util.TaskQueue)
at java.util.TimerThread.run(Timer.java:484)
"monitor-timer" daemon prio=10 tid=0x8a33ec00 nid=0x1864 in Object.wait() [0x8935c000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x94430d08> (a java.util.TaskQueue)
at java.lang.Object.wait(Object.java:502)
at java.util.TimerThread.mainLoop(Timer.java:505)
locked <0x94430d08> (a java.util.TaskQueue)
at java.util.TimerThread.run(Timer.java:484)
"Thread-12" prio=10 tid=0x88661800 nid=0x1863 waiting on condition [0x893ad000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.eclipse.net4j.util.concurrent.Worker$NextWork.pause(Worker.java:283)
at org.eclipse.net4j.util.concurrent.Worker$WorkerThread.run(Worker.java:194)
"Connection-Keep-Alive-DBStore@1" daemon prio=10 tid=0x87ff9c00 nid=0x1862 in Object.wait() [0x89573000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0xb3881008> (a java.util.TaskQueue)
at java.util.TimerThread.mainLoop(Timer.java:531)
locked <0xb3881008> (a java.util.TaskQueue)
at java.util.TimerThread.run(Timer.java:484)
"Worker-0" prio=10 tid=0x88c9bc00 nid=0x1860 in Object.wait() [0x893fe000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0xb33aa068> (a org.eclipse.core.internal.jobs.WorkerPool)
at org.eclipse.core.internal.jobs.WorkerPool.sleep(WorkerPool.java:185)
locked <0xb33aa068> (a org.eclipse.core.internal.jobs.WorkerPool)
at org.eclipse.core.internal.jobs.WorkerPool.startJob(WorkerPool.java:217)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:50)
"Worker-JM" prio=10 tid=0x8a4c4400 nid=0x185e in Object.wait() [0x895d1000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x942c94c8> (a java.util.ArrayList)
at org.eclipse.core.internal.jobs.InternalWorker.run(InternalWorker.java:58)
locked <0x942c94c8> (a java.util.ArrayList)
"Bundle File Closer" daemon prio=10 tid=0x099b3400 nid=0x185d in Object.wait() [0x89646000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x943b5d48> (a org.eclipse.osgi.framework.eventmgr.EventManager$EventThread)
at java.lang.Object.wait(Object.java:502)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.getNextEvent(EventManager.java:397)
locked <0x943b5d48> (a org.eclipse.osgi.framework.eventmgr.EventManager$EventThread)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:333)
"NioSocketAcceptor-1" prio=10 tid=0x097c5400 nid=0x185c runnable [0x89cad000]
java.lang.Thread.State: RUNNABLE
at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)
at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:228)
at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:83)
at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87)
locked <0x94342d10> (a sun.nio.ch.Util$1)
locked <0x94342d00> (a java.util.Collections$UnmodifiableSet)
locked <0x943428d8> (a sun.nio.ch.EPollSelectorImpl)
at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)
at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:102)
at org.apache.mina.transport.socket.nio.NioSocketAcceptor.select(NioSocketAcceptor.java:285)
at org.apache.mina.core.polling.AbstractPollingIoAcceptor$Acceptor.run(AbstractPollingIoAcceptor.java:400)
at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:64)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"gogo shell pipe thread" daemon prio=10 tid=0x09d46400 nid=0x185b runnable [0x896c7000]
java.lang.Thread.State: RUNNABLE
at java.io.FileInputStream.readBytes(Native Method)
at java.io.FileInputStream.read(FileInputStream.java:236)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)
at java.io.BufferedInputStream.read(BufferedInputStream.java:254)
locked <0x93c20b48> (a java.io.BufferedInputStream)
at jline.TerminalSupport.readCharacter(TerminalSupport.java:120)
at org.apache.karaf.shell.console.jline.Console$Pipe.run(Console.java:461)
at java.lang.Thread.run(Thread.java:636)
"Karaf Shell Console Thread" daemon prio=10 tid=0x8a5d3000 nid=0x185a waiting on condition [0x89718000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x9410cf40> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:345)
at org.apache.karaf.shell.console.jline.Console$ConsoleInputStream.read(Console.java:398)
at org.apache.karaf.shell.console.jline.Console$ConsoleInputStream.read(Console.java:415)
at jline.TerminalSupport.readCharacter(TerminalSupport.java:120)
at jline.UnixTerminal.readVirtualKey(UnixTerminal.java:125)
at jline.console.ConsoleReader.readVirtualKey(ConsoleReader.java:823)
at jline.console.ConsoleReader.readBinding(ConsoleReader.java:1017)
at jline.console.ConsoleReader.readLine(ConsoleReader.java:1099)
at jline.console.ConsoleReader.readLine(ConsoleReader.java:1051)
at org.apache.karaf.shell.console.jline.Console.run(Console.java:212)
at java.lang.Thread.run(Thread.java:636)
"RMI RenewClean-[127.0.1.1:44444]" daemon prio=10 tid=0x8a087c00 nid=0x1858 in Object.wait() [0x897ba000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x9442cdb8> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:133)
locked <0x9442cdb8> (a java.lang.ref.ReferenceQueue$Lock)
at sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(DGCClient.java:534)
at java.lang.Thread.run(Thread.java:636)
"JMX OSGi Bundle State Event Dispatcher" daemon prio=10 tid=0x09c63800 nid=0x1857 waiting on condition [0x8980b000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x93bd2580> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"RMI Scheduler(0)" daemon prio=10 tid=0x89db4800 nid=0x1856 waiting on condition [0x898fe000]
java.lang.Thread.State: TIMED_WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x93dc61f0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
at java.util.concurrent.DelayQueue.take(DelayQueue.java:193)
at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:688)
at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:681)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"GC Daemon" daemon prio=10 tid=0x09d8c000 nid=0x184c in Object.wait() [0x89ffe000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93acfa98> (a sun.misc.GC$LatencyLock)
at sun.misc.GC$Daemon.run(GC.java:117)
locked <0x93acfa98> (a sun.misc.GC$LatencyLock)
"JMX OSGi Blueprint State Event Dispatcher" daemon prio=10 tid=0x09daf400 nid=0x184a waiting on condition [0x89cfe000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x93acfb08> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"RMI Reaper" prio=10 tid=0x09d89400 nid=0x1848 in Object.wait() [0x8ac5c000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93acfc68> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:133)
locked <0x93acfc68> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:149)
at sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:350)
at java.lang.Thread.run(Thread.java:636)
"Blueprint Event Dispatcher: 1" daemon prio=10 tid=0x09d88000 nid=0x1846 waiting on condition [0x89aad000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x93acfcf8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"JMX OSGi Service State Event Dispatcher" daemon prio=10 tid=0x09d20400 nid=0x1845 waiting on condition [0x89afe000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x93acfe68> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"RMI TCP Accept-44444" daemon prio=10 tid=0x095d6400 nid=0x1844 runnable [0x89c5c000]
java.lang.Thread.State: RUNNABLE
at java.net.PlainSocketImpl.socketAccept(Native Method)
at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:375)
at java.net.ServerSocket.implAccept(ServerSocket.java:470)
at java.net.ServerSocket.accept(ServerSocket.java:438)
at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:387)
at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:359)
at java.lang.Thread.run(Thread.java:636)
"RMI TCP Accept-19299" daemon prio=10 tid=0x09995000 nid=0x1840 runnable [0x89e59000]
java.lang.Thread.State: RUNNABLE
at java.net.PlainSocketImpl.socketAccept(Native Method)
at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:375)
at java.net.ServerSocket.implAccept(ServerSocket.java:470)
at java.net.ServerSocket.accept(ServerSocket.java:438)
at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:387)
at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:359)
at java.lang.Thread.run(Thread.java:636)
"JMX OSGi Agent" daemon prio=10 tid=0x8aa74000 nid=0x183d waiting on condition [0x8a8c8000]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
parking to wait for <0x93d072d0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Blueprint Extender: 3" daemon prio=10 tid=0x8aa7e000 nid=0x183c waiting for monitor entry [0x89eaa000]
java.lang.Thread.State: BLOCKED (on object monitor)
at org.apache.aries.blueprint.container.ReferenceListRecipe.track(ReferenceListRecipe.java:106)
waiting to lock <0xb36606d8> (a java.lang.Object)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceAdded(AbstractServiceReferenceRecipe.java:261)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:245)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:933)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:756)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:711)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:206)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:507)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:404)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:184)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:662)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:330)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
locked <0xb370b0b8> (a java.util.concurrent.atomic.AtomicBoolean)
locked <0xb370b0a8> (a java.util.concurrent.atomic.AtomicBoolean)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Blueprint Extender: 2" daemon prio=10 tid=0x8aa4ec00 nid=0x183b waiting for monitor entry [0x89efa000]
java.lang.Thread.State: BLOCKED (on object monitor)
at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:247)
waiting to lock <0xb3661da8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:327)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:430)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:120)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse.getService(ServiceUse.java:118)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:447)
locked <0xb36b72a8> (a org.eclipse.osgi.internal.serviceregistry.ServiceUse)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:430)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:667)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.getService(BlueprintContainerImpl.java:416)
at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:180)
locked <0xb36629c8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:49)
at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:201)
at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)
at org.apache.aries.proxy.impl.DefaultWrapper.invoke(DefaultWrapper.java:31)
at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78)
at $Proxy14.toString(Unknown Source)
at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
at org.slf4j.helpers.MessageFormatter.format(MessageFormatter.java:124)
at org.ops4j.pax.logging.slf4j.Slf4jLogger.info(Slf4jLogger.java:472)
at com.mst.fusion.runtime.repository.FusionCdoRepository.bindCoreStatusService(FusionCdoRepository.java:231)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:616)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.invokeMethods(AbstractServiceReferenceRecipe.java:448)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.bind(AbstractServiceReferenceRecipe.java:430)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.bind(AbstractServiceReferenceRecipe.java:327)
at org.apache.aries.blueprint.container.ReferenceRecipe.bind(ReferenceRecipe.java:147)
locked <0xb36629c8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceRecipe.retrack(ReferenceRecipe.java:112)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.updateListeners(AbstractServiceReferenceRecipe.java:319)
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:91)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
locked <0xb366bae0> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
locked <0xb366bae0> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:640)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:331)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
locked <0xb366c498> (a java.util.concurrent.atomic.AtomicBoolean)
locked <0xb366c488> (a java.util.concurrent.atomic.AtomicBoolean)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Blueprint Extender: 1" daemon prio=10 tid=0x8aa4fc00 nid=0x183a waiting for monitor entry [0x89f4b000]
java.lang.Thread.State: BLOCKED (on object monitor)
at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:247)
waiting to lock <0xb366bae0> (a java.lang.Object)
at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:327)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:430)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:120)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse.getService(ServiceUse.java:118)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:447)
locked <0xb366c838> (a org.eclipse.osgi.internal.serviceregistry.ServiceUse)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:430)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:667)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.getService(BlueprintContainerImpl.java:416)
at org.apache.aries.blueprint.container.ReferenceListRecipe$ServiceDispatcher.call(ReferenceListRecipe.java:199)
locked <0xb36605b0> (a org.apache.aries.blueprint.container.ReferenceListRecipe$ServiceDispatcher)
at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)
at org.apache.aries.proxy.impl.DefaultWrapper.invoke(DefaultWrapper.java:31)
at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78)
at $Proxy17.toString(Unknown Source)
at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
at org.slf4j.helpers.MessageFormatter.format(MessageFormatter.java:124)
at org.ops4j.pax.logging.slf4j.Slf4jLogger.info(Slf4jLogger.java:472)
at com.mst.fusion.runtime.foreman.internal.ApplianceStatusService.bindComponentStatus(ApplianceStatusService.java:86)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:616)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.invokeMethods(AbstractServiceReferenceRecipe.java:448)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.bind(AbstractServiceReferenceRecipe.java:430)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.bind(AbstractServiceReferenceRecipe.java:327)
at org.apache.aries.blueprint.container.ReferenceListRecipe.track(ReferenceListRecipe.java:130)
locked <0xb36606d8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceListRecipe.retrack(ReferenceListRecipe.java:88)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.updateListeners(AbstractServiceReferenceRecipe.java:319)
at org.apache.aries.blueprint.container.ReferenceListRecipe.internalCreate(ReferenceListRecipe.java:74)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
locked <0xb3661da8> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
locked <0xb3661da8> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:640)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:331)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
locked <0xb36625c8> (a java.util.concurrent.atomic.AtomicBoolean)
locked <0xb36625b8> (a java.util.concurrent.atomic.AtomicBoolean)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"fileinstall-/mnt/extra/working/src/mst/fusion/build/trunk/fusion.karaf.base/target/build/runtime/deploy" daemon prio=10 tid=0x09c40400 nid=0x1839 in Object.wait() [0x89f9d000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93b78758> (a org.apache.felix.fileinstall.internal.DirectoryWatcher)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:268)
locked <0x93b78758> (a org.apache.felix.fileinstall.internal.DirectoryWatcher)
"fileinstall-/mnt/extra/working/src/mst/fusion/build/trunk/fusion.karaf.base/target/build/runtime/etc" daemon prio=10 tid=0x8aa4b400 nid=0x1838 in Object.wait() [0x8a25c000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93b75810> (a org.apache.felix.fileinstall.internal.DirectoryWatcher)
at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:268)
locked <0x93b75810> (a org.apache.felix.fileinstall.internal.DirectoryWatcher)
"CM Event Dispatcher" daemon prio=10 tid=0x096f9000 nid=0x1837 in Object.wait() [0x8a2ad000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93b789e8> (a java.util.LinkedList)
at java.lang.Object.wait(Object.java:502)
at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:76)
locked <0x93b789e8> (a java.util.LinkedList)
at java.lang.Thread.run(Thread.java:636)
"CM Configuration Updater" daemon prio=10 tid=0x09867800 nid=0x1836 in Object.wait() [0x8a2fe000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93b78cc0> (a java.util.LinkedList)
at java.lang.Object.wait(Object.java:502)
at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:76)
locked <0x93b78cc0> (a java.util.LinkedList)
at java.lang.Thread.run(Thread.java:636)
"Thread-3" daemon prio=10 tid=0x09631c00 nid=0x1835 runnable [0x8a919000]
java.lang.Thread.State: RUNNABLE
at java.net.PlainSocketImpl.socketAccept(Native Method)
at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:375)
at java.net.ServerSocket.implAccept(ServerSocket.java:470)
at java.net.ServerSocket.accept(ServerSocket.java:438)
at org.apache.karaf.main.Main$ShutdownSocketThread.run(Main.java:1340)
"Thread-2" prio=10 tid=0x8aa4a400 nid=0x1834 waiting on condition [0x8a96d000]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.apache.karaf.main.Main.doLock(Main.java:1248)
at org.apache.karaf.main.Main.lock(Main.java:1223)
at org.apache.karaf.main.Main$1.run(Main.java:267)
"Start Level Event Dispatcher" daemon prio=10 tid=0x8ad33800 nid=0x1833 in Object.wait() [0x8a9fe000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93d33ae0> (a org.eclipse.osgi.framework.eventmgr.EventManager$EventThread)
at java.lang.Object.wait(Object.java:502)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.getNextEvent(EventManager.java:397)
locked <0x93d33ae0> (a org.eclipse.osgi.framework.eventmgr.EventManager$EventThread)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:333)
"Framework Event Dispatcher" daemon prio=10 tid=0x8ad68c00 nid=0x1831 in Object.wait() [0x8acad000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93d33f00> (a org.eclipse.osgi.framework.eventmgr.EventManager$EventThread)
at java.lang.Object.wait(Object.java:502)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.getNextEvent(EventManager.java:397)
locked <0x93d33f00> (a org.eclipse.osgi.framework.eventmgr.EventManager$EventThread)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:333)
"Framework Active Thread" prio=10 tid=0x8ad95000 nid=0x1830 in Object.wait() [0x8acfe000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93a6faa0> (a org.eclipse.osgi.framework.internal.core.Framework)
at org.eclipse.osgi.framework.internal.core.Framework.run(Framework.java:1653)
locked <0x93a6faa0> (a org.eclipse.osgi.framework.internal.core.Framework)
at java.lang.Thread.run(Thread.java:636)
"RMI TCP Accept-0" daemon prio=10 tid=0x8b558800 nid=0x182d runnable [0x8af1d000]
java.lang.Thread.State: RUNNABLE
at java.net.PlainSocketImpl.socketAccept(Native Method)
at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:375)
at java.net.ServerSocket.implAccept(ServerSocket.java:470)
at java.net.ServerSocket.accept(ServerSocket.java:438)
at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:52)
at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:387)
at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:359)
at java.lang.Thread.run(Thread.java:636)
"Low Memory Detector" daemon prio=10 tid=0x094a3800 nid=0x182c runnable [0x00000000]
java.lang.Thread.State: RUNNABLE
"CompilerThread1" daemon prio=10 tid=0x094a0000 nid=0x182b waiting on condition [0x00000000]
java.lang.Thread.State: RUNNABLE
"CompilerThread0" daemon prio=10 tid=0x0949e000 nid=0x182a waiting on condition [0x00000000]
java.lang.Thread.State: RUNNABLE
"Signal Dispatcher" daemon prio=10 tid=0x0949cc00 nid=0x1829 waiting on condition [0x00000000]
java.lang.Thread.State: RUNNABLE
"Finalizer" daemon prio=10 tid=0x0948d000 nid=0x1828 in Object.wait() [0x8b31e000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93d36f20> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:133)
locked <0x93d36f20> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:149)
at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:177)
"Reference Handler" daemon prio=10 tid=0x09488800 nid=0x1827 in Object.wait() [0x8b36f000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93acfa90> (a java.lang.ref.Reference$Lock)
at java.lang.Object.wait(Object.java:502)
at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)
locked <0x93acfa90> (a java.lang.ref.Reference$Lock)
"main" prio=10 tid=0x093fe800 nid=0x1823 in Object.wait() [0xb6b98000]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
waiting on <0x93a6faa0> (a org.eclipse.osgi.framework.internal.core.Framework)
at org.eclipse.osgi.framework.internal.core.Framework.waitForStop(Framework.java:1675)
locked <0x93a6faa0> (a org.eclipse.osgi.framework.internal.core.Framework)
at org.eclipse.osgi.framework.internal.core.EquinoxLauncher.waitForStop(EquinoxLauncher.java:128)
at org.eclipse.osgi.launch.Equinox.waitForStop(Equinox.java:180)
at org.apache.karaf.main.Main.awaitShutdown(Main.java:274)
at org.apache.karaf.main.Main.main(Main.java:423)
"VM Thread" prio=10 tid=0x09484800 nid=0x1826 runnable
"GC task thread#0 (ParallelGC)" prio=10 tid=0x09405c00 nid=0x1824 runnable
"GC task thread#1 (ParallelGC)" prio=10 tid=0x09407400 nid=0x1825 runnable
"VM Periodic Task Thread" prio=10 tid=0x8b561c00 nid=0x182e waiting on condition
JNI global references: 1651
Found one Java-level deadlock:
=============================
"Blueprint Extender: 3":
waiting to lock monitor 0x8aa92540 (object 0xb36606d8, a java.lang.Object),
which is held by "Blueprint Extender: 1"
"Blueprint Extender: 1":
waiting to lock monitor 0x8aa94034 (object 0xb366bae0, a java.lang.Object),
which is held by "Blueprint Extender: 2"
"Blueprint Extender: 2":
waiting to lock monitor 0x09df3e44 (object 0xb3661da8, a java.lang.Object),
which is held by "Blueprint Extender: 1"
Java stack information for the threads listed above:
===================================================
"Blueprint Extender: 3":
at org.apache.aries.blueprint.container.ReferenceListRecipe.track(ReferenceListRecipe.java:106)
waiting to lock <0xb36606d8> (a java.lang.Object)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceAdded(AbstractServiceReferenceRecipe.java:261)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:245)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:933)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:756)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:711)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:206)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:507)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:404)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:184)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:662)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:330)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
locked <0xb370b0b8> (a java.util.concurrent.atomic.AtomicBoolean)
locked <0xb370b0a8> (a java.util.concurrent.atomic.AtomicBoolean)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Blueprint Extender: 1":
at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:247)
waiting to lock <0xb366bae0> (a java.lang.Object)
at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:327)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:430)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:120)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse.getService(ServiceUse.java:118)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:447)
locked <0xb366c838> (a org.eclipse.osgi.internal.serviceregistry.ServiceUse)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:430)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:667)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.getService(BlueprintContainerImpl.java:416)
at org.apache.aries.blueprint.container.ReferenceListRecipe$ServiceDispatcher.call(ReferenceListRecipe.java:199)
locked <0xb36605b0> (a org.apache.aries.blueprint.container.ReferenceListRecipe$ServiceDispatcher)
at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)
at org.apache.aries.proxy.impl.DefaultWrapper.invoke(DefaultWrapper.java:31)
at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78)
at $Proxy17.toString(Unknown Source)
at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
at org.slf4j.helpers.MessageFormatter.format(MessageFormatter.java:124)
at org.ops4j.pax.logging.slf4j.Slf4jLogger.info(Slf4jLogger.java:472)
at com.mst.fusion.runtime.foreman.internal.ApplianceStatusService.bindComponentStatus(ApplianceStatusService.java:86)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:616)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.invokeMethods(AbstractServiceReferenceRecipe.java:448)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.bind(AbstractServiceReferenceRecipe.java:430)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.bind(AbstractServiceReferenceRecipe.java:327)
at org.apache.aries.blueprint.container.ReferenceListRecipe.track(ReferenceListRecipe.java:130)
locked <0xb36606d8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceListRecipe.retrack(ReferenceListRecipe.java:88)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.updateListeners(AbstractServiceReferenceRecipe.java:319)
at org.apache.aries.blueprint.container.ReferenceListRecipe.internalCreate(ReferenceListRecipe.java:74)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
locked <0xb3661da8> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
locked <0xb3661da8> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:640)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:331)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
locked <0xb36625c8> (a java.util.concurrent.atomic.AtomicBoolean)
locked <0xb36625b8> (a java.util.concurrent.atomic.AtomicBoolean)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
"Blueprint Extender: 2":
at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:247)
waiting to lock <0xb3661da8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:327)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:430)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse$1.run(ServiceUse.java:120)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.serviceregistry.ServiceUse.getService(ServiceUse.java:118)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:447)
locked <0xb36b72a8> (a org.eclipse.osgi.internal.serviceregistry.ServiceUse)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:430)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:667)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.getService(BlueprintContainerImpl.java:416)
at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:180)
locked <0xb36629c8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:49)
at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:201)
at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)
at org.apache.aries.proxy.impl.DefaultWrapper.invoke(DefaultWrapper.java:31)
at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78)
at $Proxy14.toString(Unknown Source)
at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
at org.slf4j.helpers.MessageFormatter.format(MessageFormatter.java:124)
at org.ops4j.pax.logging.slf4j.Slf4jLogger.info(Slf4jLogger.java:472)
at com.mst.fusion.runtime.repository.FusionCdoRepository.bindCoreStatusService(FusionCdoRepository.java:231)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:616)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.invokeMethods(AbstractServiceReferenceRecipe.java:448)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$Listener.bind(AbstractServiceReferenceRecipe.java:430)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.bind(AbstractServiceReferenceRecipe.java:327)
at org.apache.aries.blueprint.container.ReferenceRecipe.bind(ReferenceRecipe.java:147)
locked <0xb36629c8> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceRecipe.retrack(ReferenceRecipe.java:112)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.updateListeners(AbstractServiceReferenceRecipe.java:319)
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:91)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
locked <0xb366bae0> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
locked <0xb366bae0> (a java.lang.Object)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:640)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:331)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
locked <0xb366c498> (a java.util.concurrent.atomic.AtomicBoolean)
locked <0xb366c488> (a java.util.concurrent.atomic.AtomicBoolean)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:636)
Found 1 deadlock.
Heap
PSYoungGen total 159680K, used 112191K [0xa8f60000, 0xb3a00000, 0xb3a00000)
eden space 153088K, 68% used [0xa8f60000,0xaf6813e8,0xb24e0000)
from space 6592K, 99% used [0xb3390000,0xb39fe908,0xb3a00000)
to space 10816K, 0% used [0xb24e0000,0xb24e0000,0xb2f70000)
PSOldGen total 87424K, used 11609K [0x93a00000, 0x98f60000, 0xa8f60000)
object space 87424K, 13% used [0x93a00000,0x94556698,0x98f60000)
PSPermGen total 31488K, used 31458K [0x8ba00000, 0x8d8c0000, 0x93a00000)
object space 31488K, 99% used [0x8ba00000,0x8d8b8be0,0x8d8c0000)
issueID:ARIES-624
type:Bug
changed files:
texts:Missing version for asm import in proxy impl

issueID:ARIES-626
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
transaction/transaction-blueprint/src/main/java/org/apache/aries/transaction/parsing/TxNamespaceHandler.java
texts:Aries blueprint namaspace handler schema with includes
If you have a NamespaceHandler implementation where the schema contains xsd:includes, the schema will fail to resolve if you do not have connectivity.
There is also no way to attach a CatalogResolver or xml-resolver.
issueID:ARIES-627
type:Bug
changed files:
texts:SVN Repository URL is incorrect in Building Aries instructions
The SVN URL on the following page is incorrect:
https://cwiki.apache.org/ARIES/buildingaries.html
https://svn.apache.org/repos/asf/incubator/aries/trunk should probably be https://svn.apache.org/repos/asf/aries/trunk (i.e without 'incubator')
issueID:ARIES-629
type:Bug
changed files:
texts:Application Itests take 25+ minutes
The application itests take a quite spectacular 26 minutes, both in the build and on my local box.
Prime suspect seems to be the following stack trace (taken from a thread dump):
at java.lang.Object.wait(Native Method)
waiting on <7f48c4b48> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:171)
locked <7f48c4b48> (a java.lang.Object)
at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:50)
at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:226)
at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)
at org.apache.aries.proxy.impl.DefaultWrapper.invoke(DefaultWrapper.java:31)
at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78)
at $Proxy14.uninstallBundle(Unknown Source)
at org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl.uninstall(ApplicationContextImpl.java:147)
locked <7f492d5a8> (a org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl)
at org.apache.aries.application.runtime.isolated.impl.ApplicationContextManagerImpl.close(ApplicationContextManagerImpl.java:163)
locked <7f48c4800> (a org.apache.aries.application.runtime.isolated.impl.ApplicationContextManagerImpl)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:225)
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)
at org.apache.aries.blueprint.container.BeanRecipe.destroy(BeanRecipe.java:741)
at org.apache.aries.blueprint.container.BlueprintRepository.destroy(BlueprintRepository.java:295)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroyComponents(BlueprintContainerImpl.java:682)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:833)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:453)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:916)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:220)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1350)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1301)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:470)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:546)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1098)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:593)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:261)
locked <7f46617e0> (a java.lang.Object)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:216)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:266)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:685)
locked <7f44c0680> (a org.eclipse.osgi.framework.internal.core.Framework)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:583)
locked <7f44c0680> (a org.eclipse.osgi.framework.internal.core.Framework)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:243)
at java.lang.Thread.run(Thread.java:680)
issueID:ARIES-63
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistry.java
texts:Add getters to ComponentDefinitionRegistry for Blueprint Container, Blueprint Bundle, Blueprint Bundle Context and Blueprint Converter
The 4 listed objects are defined by the spec to be available, via specified id's for injection.
They are generally useful objects for a variety of purposes, but currently there is no way for a NamespaceHandler to obtain these, unless it happens to be aware both that they are present under those id's within the component definition registry, AND how to dereference them through the PassThrough approach. Understanding both of these creates rather a strong link between any NamespaceHandler, and our current internals.
As such, the proposal is to add getters to the ComponentDefinitionRegistry, that do the dereferencing through the passthroughmetadata's internally, keeping that implementation choice isolated from any NamespaceHandler.
issueID:ARIES-630
type:Bug
changed files:
texts:Broken link on the apache aries home page
The "BlueprintHelloWorldTutorial" link should resolve to http://aries.apache.org/documentation/tutorials/blueprinthelloworldtutorial.html, rather than http://aries.apache.org/blueprinthelloworldtutorial.html
issueID:ARIES-631
type:Bug
changed files:
texts:Link broken in Blueprint Tutorial
The link in the following line in the Introduction section of the Blueprint Tutorial (http://aries.apache.org/documentation/tutorials/blueprinthelloworldtutorial.html) ,is broken,
"In order to work through the tutorial you will need to do checkout and build copy of Aries, the instructions are here . This tutorial assumes that you have built Aries and imported the samples/helloworld projects into Eclipse. "
This points to http://aries.apache.org/development/building-aries.html
The intended link seems to be http://aries.apache.org/development/buildingaries.html
issueID:ARIES-634
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/DestroyCallback.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintQuiesceParticipant.java
texts:No thread safety in Blueprint Quiesce Participant
The blueprint quiesce itests have been flaky for a while. Looking at the code there is inconsistent synchronization and poor threading practice.
issueID:ARIES-635
type:Bug
changed files:
texts:Can't find resource for bundle org.apache.aries.application.management.messages.AppManagementMessages

issueID:ARIES-636
type:New Feature
changed files:
texts:Support load-time weaving and Annotation scanning in the JPA container when running on OSGi 4.3
The OSGi 4.3 specification adds support for load-time weavning and classpath scanning, both of which were necessary for the JPA container to add support for locating and enhancing entity classes. These new features should be leveraged where they can!
issueID:ARIES-637
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/UnableToProxyException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
texts:Woven Proxy does not cope well with inner classes
There are errrors when trying to weave inner classes. This needs to be fixed
issueID:ARIES-638
type:Improvement
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:Logging improvements in AriesApplicationManagerImpl
A bundle in an application can be completely ignored by AriesApplicationManager.createApplication() (which can lead to resolution problems later on) if it doesn't contain the Bundle-ManifestVersion header. The bundle is considered invalid if it doesn't contain the Bundle-SymbolicName and Bundle-ManifestVersion headers. That's ok but there is no indication anywhere that the bundle was ignored and for what reason. The only way to tell what's going on is by stepping through the code in a debugger.
Adding logging statements to createApplication() as the nested bundles are processed would help to see what's going on with logging enabled.
issueID:ARIES-639
type:Task
changed files:
texts:Remove old release files in /www/www.apache.org/dist
There's some in /www/www.apache.org/dist/incubator/aries This will also mean changing the links on the archived 0.2-incubating page: so they go directly to archive.apache.org/dist/incubator/aries
issueID:ARIES-64
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Have blueprint extender process bundles associated with composite bundle when detecting the CompositeBundleFactory service
This is a follow on enhancement after Aries-51. In Aries-51 we added code to process bundles associated with composite bundle when detecting composite bundle starting/active.
This JIRA is about enhance the process of check existing bundles and bundles associated with composite bundles that were started before the blueprint bundle, if the composite bundle factory service is avail. This JIRA also added an itest for this scenario that blueprint sample is started in a child framework, before we start the blueprint bundle.
issueID:ARIES-640
type:Bug
changed files:
texts:application.utils imports aries.util version [0.4,1.0) but aries.util exports version 0.3.1
Given the latest repo contents, I encounter the following error when executing some junit tests.
org.osgi.framework.BundleException: The bundle "org.apache.aries.application.utils_0.4.0.SNAPSHOT [13]" could not be resolved. Reason: Missing Constraint: Import-Package: org.apache.aries.util; version="[0.4.0,1.0.0)"
at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1327)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1311)
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:389)
at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1130)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:438)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:1)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:340)
The manifest within org.apache.aries.application.utils-0.4-SNAPSHOT.jar imports org.apache.aries.util;version="[0.4,1.0)" but org.apache.aries.util-0.4-SNAPSHOT.jar exports org.apache.aries.util;version="0.3.1". I've tried "mvn clean install" on those two projects as well as just about everything else. Am I missing something?
issueID:ARIES-641
type:New Feature
changed files:
texts:Subsystems needs to be updated to latest API based on ongoing RFC 152 discussions.
The Subsystems API has changed quite a bit in recent weeks based on ongoing RFC 152 discussions. Although still not complete, the API appears to be settling down a bit, and this seemed like a good time to introduce the changes. The goal here is to simply replace the current API with the latest one, fix resulting compile errors, and make any further necessary changes in order to have the existing tests execute successfully.
issueID:ARIES-642
type:New Feature
changed files:
texts:SubsystemAdmin needs to be replaced with root Subsystem
The Subsystem API removed SubsystemAdmin and replaced it with the notion of a "root" or "framework" Subsystem. The SubsystemAdmin interface and implementing class need to be removed and any necessary functionality transferred elsewhere.
issueID:ARIES-643
type:New Feature
changed files:
texts:Subsystems needs to implement ResourceProcessor API changes.
The ResourceProcessor API underwent a number of changes such as the introduction of the ResourceOperation object along with its Coordination and Map<String, Object> context objects. The implementations needs to be updated to use these new interfaces and shift away from the Session object in favor of the Coordination.
issueID:ARIES-644
type:New Feature
changed files:subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-install/src/main/java/org/apache/aries/subsystem/install/internal/SubsystemInstaller.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeUpdateImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/Scopes.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/SharePolicies.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemConstants.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeManager.java
subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/obr/internal/Activator.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/Subsystem.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemException.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/IdGenerator.java
texts:Replace Scope Admin with Region Digraph.
Scope Admin is being relaced with org.eclipse.equinox.region (Region Digraph) as the grouping and isolation mechanism for bundles in subsystems.
issueID:ARIES-645
type:Task
changed files:subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-install/src/main/java/org/apache/aries/subsystem/install/internal/SubsystemInstaller.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeUpdateImpl.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/Scopes.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/SharePolicies.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemConstants.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/ScopeManager.java
subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/obr/internal/Activator.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/Subsystem.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemException.java
subsystem/subsystem-scope-impl/src/main/java/org/apache/aries/subsystem/scope/impl/IdGenerator.java
texts:Move Subsystems to the by-module versioning scheme
The subsystems modules was not moved to the new independent versioning approach when the rest of Aries moved. This needs to be done.
issueID:ARIES-646
type:Bug
changed files:
texts:NCDFE in Knopflerfish
A simple JPA example does not work in Knopflerfish. The example works fine in Equinox and Felix.
All sources are here: https://github.com/dpishchukhin/org.knowhowlab.tips.jpa
There are some details of bundles and errors:
List of bundles:
id level/state modified location
----------------------------------------------
0 0/active 13.05.11 08:40 System Bundle
1 1/active 13.05.11 08:40 file:bundles/org.knopflerfish.log-API_3.0.5.jar
2 1/active 13.05.11 08:40 file:bundles/org.knopflerfish.bundle.cm-API_3.0.1.jar
3 1/active 13.05.11 08:40 file:bundles/org.knopflerfish.bundle.console_3.0.1.jar
4 1/active 13.05.11 08:40 file:bundles/org.knopflerfish.bundle.consoletty-IMPL_3.0.1.jar
5 1/active 13.05.11 08:40 file:bundles/org.knopflerfish.bundle.frameworkcommands-IMPL_3.0.3.jar
6 5/active 13.05.11 08:40 file:bundles/org.knowhowlab.osgi.shell.knopflerfish_1.0.1.jar
7 5/active 13.05.11 08:40 file:bundles/osgi.cmpn_4.2.0.200908310645.jar
8 5/active 13.05.11 08:40 file:bundles/osgi.enterprise_4.2.0.201003190513.jar
9 5/active 13.05.11 08:40 file:bundles/org.apache.geronimo.specs.geronimo-jpa_2.0_spec_1.1.jar
10 5/active 13.05.11 08:40 file:bundles/derby_10.8.1000002.1095077.jar
11 5/active 13.05.11 08:40 file:bundles/org.apache.commons.collections_3.2.1.jar
12 5/active 13.05.11 08:40 file:bundles/org.apache.commons.pool_1.5.5.jar
13 5/active 13.05.11 08:40 file:bundles/org.apache.commons.dbcp_1.4.jar
14 5/active 13.05.11 08:40 file:bundles/org.apache.commons.lang_2.6.jar
15 5/active 13.05.11 08:40 file:bundles/org.apache.openjpa_2.1.0.jar
16 5/active 13.05.11 08:40 file:bundles/slf4j.api_1.6.1.jar (h:17)
17 5/resolved 13.05.11 08:40 file:bundles/slf4j.simple_1.6.1.jar (f:16)
18 5/active 13.05.11 08:40 file:bundles/org.apache.servicemix.bundles.serp_1.13.1.3.jar
19 5/active 13.05.11 08:40 file:bundles/org.apache.aries.util_0.3.0.jar
20 5/active 13.05.11 08:40 file:bundles/org.apache.aries.jpa.api_0.3.0.jar
21 5/active 13.05.11 08:40 file:bundles/org.apache.aries.jpa.container_0.3.0.jar
22 5/active 13.05.11 08:40 file:bundles/org.apache.aries.transaction.manager_0.3.0.jar
23 5/active 13.05.11 08:40 file:bundles/org.knowhowlab.tips.jpa.model_1.0.0.SNAPSHOT.jar
24 5/active 13.05.11 08:40 file:bundles/org.knowhowlab.tips.jpa.client_1.0.0.SNAPSHOT.jar
On framework start error:
> 0 BundleStart #21 INFO org.apache.aries.jpa.container - No org.apache.aries.jpa.container.properties file was found. The default properties {} will be used.
187 BundleStart #21 INFO org.apache.aries.jpa.container - No quiesce support is available, so managed persistence units will not participate in quiesce operat
ions
DEBUG: errors - FrameworkErrorEvent bundle #21
DEBUG: errors - FrameworkErrorEvent throwable:
java.lang.NoClassDefFoundError: javax/transaction/Synchronization
at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at org.knopflerfish.framework.BundleClassLoader.access$400(BundleClassLoader.java:61)
at org.knopflerfish.framework.BundleClassLoader$1.get(BundleClassLoader.java:996)
at org.knopflerfish.framework.BundleClassLoader.searchFor0(BundleClassLoader.java:899)
at org.knopflerfish.framework.BundleClassLoader.searchFor(BundleClassLoader.java:724)
at org.knopflerfish.framework.PermissionOps.callSearchFor(PermissionOps.java:191)
at org.knopflerfish.framework.BundleClassLoader.findClass(BundleClassLoader.java:230)
at org.knopflerfish.framework.BundleClassLoader.loadClass(BundleClassLoader.java:368)
at java.lang.ClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at org.knopflerfish.framework.BundleClassLoader.access$400(BundleClassLoader.java:61)
at org.knopflerfish.framework.BundleClassLoader$1.get(BundleClassLoader.java:996)
at org.knopflerfish.framework.BundleClassLoader.searchFor0(BundleClassLoader.java:899)
at org.knopflerfish.framework.BundleClassLoader.searchFor(BundleClassLoader.java:724)
at org.knopflerfish.framework.PermissionOps.callSearchFor(PermissionOps.java:191)
at org.knopflerfish.framework.BundleClassLoader.findClass(BundleClassLoader.java:230)
at org.knopflerfish.framework.BundleClassLoader.loadClass(BundleClassLoader.java:368)
at java.lang.ClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at org.knopflerfish.framework.BundleClassLoader.access$400(BundleClassLoader.java:61)
at org.knopflerfish.framework.BundleClassLoader$1.get(BundleClassLoader.java:996)
at org.knopflerfish.framework.BundleClassLoader.searchFor0(BundleClassLoader.java:899)
at org.knopflerfish.framework.BundleClassLoader.searchFor(BundleClassLoader.java:724)
at org.knopflerfish.framework.PermissionOps.callSearchFor(PermissionOps.java:191)
at org.knopflerfish.framework.BundleClassLoader.findClass(BundleClassLoader.java:230)
at org.knopflerfish.framework.BundleClassLoader.loadClass(BundleClassLoader.java:368)
at java.lang.ClassLoader.loadClass(Unknown Source)
at org.apache.openjpa.conf.BrokerValue.<init>(BrokerValue.java:44)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.<init>(OpenJPAConfigurationImpl.java:226)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.<init>(OpenJPAConfigurationImpl.java:200)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.<init>(OpenJPAConfigurationImpl.java:191)
at org.apache.openjpa.persistence.PersistenceProviderImpl.newConfigurationImpl(PersistenceProviderImpl.java:263)
at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:172)
at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:66)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:263)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.bundleStateChange(EntityManagerFactoryManager.java:153)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.modifiedBundle(PersistenceBundleManager.java:283)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:453)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)
at org.knopflerfish.framework.Listeners.bundleChanged(Listeners.java:445)
at org.knopflerfish.framework.Listeners.bundleChanged(Listeners.java:310)
at org.knopflerfish.framework.BundleThread.run(BundleThread.java:96)
Caused by: java.lang.ClassNotFoundException: javax.transaction.Synchronization
at org.knopflerfish.framework.BundleClassLoader.findClass(BundleClassLoader.java:252)
at org.knopflerfish.framework.BundleClassLoader.loadClass(BundleClassLoader.java:368)
at java.lang.ClassLoader.loadClass(Unknown Source)
... 52 more
Framework launched
On aries.jpa.contained bundle (21) restart:
framework> start 21
182154 BundleStart #21 INFO org.apache.aries.jpa.container - No org.apache.aries.jpa.container.properties file was found. The default properties {} will be us
ed.
182154 BundleStart #21 WARN org.apache.aries.jpa.container - The bundle org.knowhowlab.tips.jpa.model_1.0.0.SNAPSHOT is already active, it may not be possible
to create managed persistence units for it.
Couldn't start bundle: Aries JPA Container (#21) (due to: java.lang.NoClassDefFoundError: org/apache/openjpa/kernel/FinalizingBrokerImpl)
java.lang.NoClassDefFoundError: org/apache/openjpa/kernel/FinalizingBrokerImpl
at org.apache.openjpa.conf.BrokerValue.<init>(BrokerValue.java:44)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.<init>(OpenJPAConfigurationImpl.java:226)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.<init>(OpenJPAConfigurationImpl.java:200)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.<init>(OpenJPAConfigurationImpl.java:191)
at org.apache.openjpa.persistence.PersistenceProviderImpl.newConfigurationImpl(PersistenceProviderImpl.java:263)
at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:172)
at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:66)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:263)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.registerEntityManagerFactories(EntityManagerFactoryManager.java:204)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.bundleStateChange(EntityManagerFactoryManager.java:158)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.setupManager(PersistenceBundleManager.java:384)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.addingBundle(PersistenceBundleManager.java:148)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:439)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:184)
at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:159)
at org.apache.aries.util.tracker.RecursiveBundleTracker.open(RecursiveBundleTracker.java:77)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.open(PersistenceBundleManager.java:132)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.start(PersistenceBundleManager.java:619)
at org.knopflerfish.framework.BundleImpl.start0(BundleImpl.java:478)
at org.knopflerfish.framework.BundleThread.run(BundleThread.java:100)
issueID:ARIES-647
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
util/src/main/java/org/apache/aries/util/service/registry/ServicePair.java
texts:JNDI ObjectFactoryHelper and ContextHelper have wide doPriv blocks
ObjectFactoryHelper, DirObjectFactoryHelper and ContextHelper have some rather wide scope doPriv blocks that involve calling into foreign code. These should be scoped down to just the necessary.
issueID:ARIES-648
type:Improvement
changed files:
texts:Upload some apache aries inside logos to the website

issueID:ARIES-649
type:Improvement
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ServicePair.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
util/src/main/java/org/apache/aries/util/service/registry/ServicePair.java
texts:Move ServicePair from jndi to util so it can be used more widely
It would be cool to have ServicePair in the util component as it is a useful general utility.
issueID:ARIES-65
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
texts:Misleading exception in itest log - Unable to load properties from url file://url
The following exception in itest log is a bit misleading. I think it is perfectly okay in our blueprint sample since ignore-missing-locations is set to "true" so we should not output the exception as an info.
[pool-1-thread-2] INFO org.apache.aries.blueprint.ext.PropertyPlaceholder - Unable to load properties from url file://url
java.net.UnknownHostException: url
at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:177)
at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:432)
at java.net.Socket.connect(Socket.java:519)
at java.net.Socket.connect(Socket.java:469)
at sun.net.NetworkClient.doConnect(NetworkClient.java:163)
at sun.net.NetworkClient.openServer(NetworkClient.java:118)
at sun.net.ftp.FtpClient.openServer(FtpClient.java:488)
at sun.net.ftp.FtpClient.openServer(FtpClient.java:475)
at sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:270)
at sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:352)
at java.net.URL.openStream(URL.java:1009)
at org.apache.aries.blueprint.ext.PropertyPlaceholder.init(PropertyPlaceholder.java:90)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:205)
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:774)
at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:576)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:663)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:191)
at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:130)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:474)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:295)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:211)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:637)
issueID:ARIES-650
type:Improvement
changed files:
texts:check the 0.3 javadoc into the website
Make the 0.3 javadoc available.
issueID:ARIES-651
type:Bug
changed files:
texts:DOAP for aries is out of date
If you go to projects.apache.org the Apache Aries project is still shown as incubating and has out of date links.
I've found the doap file and it is out of date, so I'll update it here.
issueID:ARIES-652
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/filesystem/impl/NestedCloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/FileSystem.java
util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
application/application-deployment-management/src/main/java/org/apache/aries/application/deployment/management/impl/DeploymentManifestManagerImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipCloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/ICloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileSystemImpl.java
util/src/main/java/org/apache/aries/util/filesystem/IDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
util/src/main/java/org/apache/aries/util/filesystem/IFile.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
texts:Improvements to IFile API
Currently the IFile API suffers from a number of capability / performance problems:
it is not possible with the API to open a zipfile as an IDirectory if the directory that contains the zipfile was opened as an IDirectory already
it is not possible to open a zipfile nested in a zipfile with the API at all
operation on zipfile IDirectories are an order of magnitude slower than using zipfile directly because the zipfile is opened and closed for most operations!
issueID:ARIES-653
type:Bug
changed files:
texts:The noop post resolve processor and platform repository are not on the download page

issueID:ARIES-654
type:Bug
changed files:blueprint/examples/blueprint-sample-fragment/src/main/java/org/apache/aries/blueprint/fragment/FragmentBean.java
texts:Blueprint annotation scanning generates duplicate elements when annotated class is in fragment

issueID:ARIES-655
type:Improvement
changed files:
texts:Upload CT test results from 0.3
Upload the 0.3 CT results to the website.
issueID:ARIES-656
type:Improvement
changed files:
texts:Updated application test, new feature test, and added support for both local (exist in the subsystem archive) and remote (referenced by but not in subsystem archive) resources.
The following updates have been made to subsystems.
The API has been updated with the latest changes.
The application test was updated to use the new header names. Code necessary to process the new header names was added.
A new test for features was started. Code necessary to support features and distinguish between subsystem types was started.
One of the things subsystems needs to do is build repositories from any resources included with the subsystem archives. These local repositories containing resources included within the archive will be used in conjunction with remote repositories containing resources identified as part of the subsystem content but not included in the archive itself as well as any additional transitive dependencies identified during resolution. Creating the local repositories requires a thorough parsing of any content included in the archive in order to create the Resources, Capabilities, Requirements, etc. used by the repository and resolver. The beginnings of this infrastructure have been put in place.
issueID:ARIES-657
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MetadataUtil.java
texts:Enhanced support for custom scopes
I am currently working on a project that requires the use of a custom scope as follows:

<bean id="fooService" class="fooServiceImpl" scope="test:foo"/>
</blueprint>
In order to support my custom scope, I provide a NamespaceHandler whose job it is to register a BeanProcessor that implements the caching required by my custom scope. This then allows the cached instances to be retried using BlueprintContainer.getComponentInstance(). When I tried to get this working, however, I discovered a few issues.
1) Aries treats all scopes as strings, and as a result the scope from the example above is "test:foo". This is incorrect, as custom scopes are always qualified names, and so the correct value for the scope is "
{http://test.org}
foo".
2) All beans that do not have a scope of "prototype" are automatically cached by the blueprint container. This means that my bean processor is only ever called the first time that the bean is requested. My bean processor is unable to do its job unless it is called everytime that a request for the bean is made.
3) Eager activation doesn't make sense for a custom scope, as it should only apply to 'singleton' scopes.
Patch to follow.
issueID:ARIES-659
type:Bug
changed files:
texts:The page that talks about what you need to run application is incorrect for 0.3.1-SNAPSHOT
The page documentation/application-dependencies.mdtext documents some modules that were deleted in 0.3.1 snapshot. This isn't a problem since the page was written for the last release and 0.3.1 isn't released yet, but it should be updated to note that some modules are going.
issueID:ARIES-66
type:Task
changed files:
texts:Setup integration tests for JMX

issueID:ARIES-660
type:Bug
changed files:
texts:Various changes to the application build poms
There are some problems in the application pom.xml files. An email was sent to the list, but there were no details so I have made the changes I think might solve these problems. I have also updated some of the descriptions in poms to be more useful/unique.
issueID:ARIES-661
type:Bug
changed files:application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
texts:Deployment manifest Import-Packges ends up in strange format
The initial internal generation of the deployment manifest seems reasonable but then it is read in to DeploymentManifestImpl where the Import-Package attribute is converted to ContentImpl. When writing back to a file or entry in the eba this DeploymentManifestImpl code is used to generate the Import-Package header:
 private String getContentsAsString (Collection<Content> contents) {
   StringBuilder builder = new StringBuilder();
   boolean beginning = true;
   for (Content c : contents) {
     if (!!!beginning) {
       builder.append(",");
     }
     builder.append(c);
     beginning = false;

   }
   return builder.toString();
 }
However ContentImpl.toString() writes out the map attached to the package name as a map so the result is like this:
javax.servlet;
{version->2.6.0}
issueID:ARIES-662
type:Bug
changed files:
texts:More problems with versioning and the application module
In addition the distro packages do not pick up the latest level of code, they pick up the last release. I'll update them to pick up the latest, but when we do a release we will need to move some back depending on what set of application bundles we actually end up releasing.
issueID:ARIES-663
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgent.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentContext.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentContext.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgent.java
texts:ConfigurationAdminMBean registered twice
18:00:12,965 INFO  [jmx] Starting JMX OSGi agent
18:00:12,982 INFO  [jmx] Registering MBean with ObjectName [osgi.compendium:service=cm,version=1.3] for service with service.id [12]
18:00:12,990 INFO  [HostBundleState] Bundle started: org.apache.aries.jmx:0.3.0
18:00:12,993 INFO  [HostBundleState] Bundle started: org.apache.aries.util:0.3.0
18:00:12,994 INFO  [jmx] Registering org.osgi.jmx.service.cm.ConfigurationAdminMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@5d5bdc50 with name osgi.compendium:service=cm,version=1.3
18:00:13,003 INFO  [jmx] Registering org.osgi.jmx.framework.BundleStateMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@5d5bdc50 with name osgi.core:type=bundleState,version=1.5
18:00:13,005 INFO  [jmx] Registering org.osgi.jmx.framework.PackageStateMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@5d5bdc50 with name osgi.core:type=packageState,version=1.5
18:00:13,006 INFO  [jmx] Registering org.osgi.jmx.framework.ServiceStateMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@5d5bdc50 with name osgi.core:type=serviceState,version=1.5
18:00:13,007 INFO  [jmx] Registering org.osgi.jmx.service.cm.ConfigurationAdminMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@5d5bdc50 with name osgi.compendium:service=cm,version=1.3
18:00:13,009 ERROR [jmx] MBean is already registered
org.apache.felix.log.LogException: javax.management.InstanceAlreadyExistsException: osgi.compendium:service=cm,version=1.3
 at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453)
 at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484)
 at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963)
 at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917)
 at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312)
 at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482)
 at org.apache.aries.jmx.agent.JMXAgentImpl.registerMBeans(JMXAgentImpl.java:129)
 at org.apache.aries.jmx.agent.JMXAgentContext.registerMBeans(JMXAgentContext.java:58)
 at org.apache.aries.jmx.MBeanServiceTracker$1.run(MBeanServiceTracker.java:61)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
 at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
 at java.util.concurrent.FutureTask.run(FutureTask.java:138)
 at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
 at java.lang.Thread.run(Thread.java:619)
18:00:13,010 INFO  [jmx] Registering org.osgi.jmx.framework.FrameworkMBean to MBeanServer com.sun.jmx.mbeanserver.JmxMBeanServer@5d5bdc50 with name osgi.core:type=framework,version=1.5
issueID:ARIES-664
type:Bug
changed files:
texts:The HelloWorld blueprint sample itest consistently fails on my machine

issueID:ARIES-665
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
texts:Proxy weaving code must preserve SerialVersionUID
The proxy weaving code changes the SerialVersionUID when it modifies the bytecode, so serialized classes that don't hardcode the SerialVersionUID are not compatible between plain and woven versions. I assume that having the weaver add the field if missing would fix this: manually adding it to classes seems to avoid the problem.
issueID:ARIES-666
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
texts:Proxy weaving code needs to deal better with missing classes and superclasses in other bundles
As discussed on the mailing list, and as noted in the code, the weaving doesn't work if a superclass is in another bundle or just missing. I have code that works for me but should be reviewed.
issueID:ARIES-667
type:Bug
changed files:application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
texts:OBRAriesResolver can return bundle information for bundles with higher version than expected
OBRAriesResolver.getBundleInfo() can return bundle information for bundles (with the same symbolic name) with higher version than expected. The version passed in should be treated as an exact version and instead it is treated as a minimal version.
The getBundleInfo() is usually used during application installation when provisioning bundles based on DEPLOYMENT.MF information. Since getBundleInfo() can return information about a wrong bundle that can break the DEPLOYMENT.MF contract (i.e. provisioning the bundles with the exact versions).
issueID:ARIES-668
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
texts:Proxy or weaving code should not mark added synthetic methods final
OpenWebBeans checks classes for proxyiability by among other things checking for final methods. The java.lang.reflect.Modifier class does not expose anything about synthetic methods and reports synthetic final methods as final. Although it's possible to get owb to work by modifying the check to exclude synthetic methods, this puts the responsibility in a peculiar place. The OWB folks also claim that since java 5 marking methods final has no effect on the ability of the jit to optimize method calls so there isn't really any reason to mark these final.
issueID:ARIES-669
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyConcreteMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/synthesizer/Synthesizer.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/synthesizer/Synthesizer.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/SyntheticSerialVerUIDAdder.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
texts:Proxy or weaving code should mark all its changes synthetic
In order to make it easier for OWB to ignore the additional goo added by the proxy/weaving stuff, it should all be marked synthetic. So far I've identified the added SerialVersionUID field and static_init_* methods as causing problems with the jcdi tck.
issueID:ARIES-670
type:Bug
changed files:
texts:blueprint.api bundle exports org.osgi.service.blueprint package at version 0.0.0
As per discussion in the dev mailing list:
"The core bundle has this import package: org.osgi.service.blueprint;version="[1.0.0,2.0.0)". The api bundle exports the package but at version 0.0.0 (which is the bug). It works for the 'uber' bundle because everything is in the one bundle, and there is no import or export for this package. Please would you open a JIRA bug for this. Thank you."
issueID:ARIES-671
type:Improvement
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/TypeMethod.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyAbstractMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyConcreteMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/UnableToProxyException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AsmProxyManager.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/MethodCopyingClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyAdapter.java
texts:Proxy code memory usage is high for generated interface proxys
The proxy code potentially creates lots of classloaders for interface proxy instancess. This uses lots of heap and can cause permgen exhaustion.
issueID:ARIES-672
type:Bug
changed files:
texts:Erroneous "no type converter available to convert from type" exception for parameterized types
org.apache.aries.blueprint.container.AggregateConverter.convert(Object, ReifiedType) throws an Exception when the ReifiedType has type parameters. The issue is in the "isAssignable" function line 416 (of version 0.3) where there is a check that "target.size() == 0". This condition can never be true for parameterized types, so it is assumed that the object is not assignable.
For example, consider the following
public interface Foo<T> {
...
}
public interface Bar {
...
}
public class ExtendsFoo implements Foo<Bar> {
...
}
public class Baz {
public void setFoo(Foo<Bar> foo)
{ ... }
}
wiring of an instance of ExtendsFoo to Baz fails with the exception message "no type converter available to convert from type: ExtendsFoo to the required type: Foo<Bar>"
issueID:ARIES-673
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
texts:Proxy code changes handlable NoClassDefFoundError into ClassFormatError
When the proxy code is unable to locate a parent class it fails (correctly) but that failure causes the runtime to issue a ClassFormatError, rather than a NoClassDefFoundError. There is no good reason for this.
issueID:ARIES-674
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
texts:Do not proxy javax.*
The proxy component should avoid trying to proxy anything in a javax package, treating them like the SDK.
issueID:ARIES-676
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanArgumentImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceListMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/RegistrationListenerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/Interceptor.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanProperty.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceListener.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceMetadata.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ParserProxyImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/PassThroughMetadata.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/BeanProcessor.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ModelledResourceManager.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ParserContext.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/NamespaceHandlerSet.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableCollectionMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ServiceMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableIdRefMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutablePassThroughMetadata.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
application/application-modeller-standalone/src/main/java/org/apache/aries/application/modelling/standalone/OfflineModellingFactory.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceListMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentNameAlreadyInUseException.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistry.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceMetadata.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmProperties.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ServiceReferenceMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanPropertyImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceListMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistryProcessor.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/BlueprintConstants.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/NamespaceHandlerRegistry.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/CollectionMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ParserService.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableServiceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableMapEntry.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ServiceProcessor.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedServiceReferenceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ValueMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedBeanMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceListener.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/NamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableComponentMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/PropsMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/IdRefMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutablePropsMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/ComponentFactoryMetadata.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceListenerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableValueMetadata.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableRefMetadata.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ParserContextImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MapEntryImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ComponentFactoryRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/DependentComponentFactoryRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanArgument.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableMapMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ComponentMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableServiceReferenceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MapMetadataImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/RefMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/Processor.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/MetadataUtil.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableRegistrationListener.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/GenericType.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/PassThroughMetadataImpl.java
texts:Make Aries bundle modelling API consumable by non-OSGi clients
As additional option I would like to make the Blueprint parsing and Application modelling code consumable by itself, even outside OSGi as plain libraries As a side effect that should make the standalone tool smaller as well ...
issueID:ARIES-677
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Service references released before bean destroy methods execute during namespace handler unregister
This issue is similar to ARIES-612, except the incorrect cleanup ordering is within the BlueprintContainerImpl class namespaceHandlerUnregistered() method instead of destroy().
issueID:ARIES-678
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
texts:Java2 security not working for proxied interface
Using Java2 security with a proxied interface doesn't seem to be working. In particular, the ProtectionDomain passed to the Policy instance doesn't seem to contain the JAAS principals that should be associated with the permission check.
issueID:ARIES-68
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/DependentComponentFactoryMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ParserContextImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/DependentComponentFactoryRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/ComponentDefinitionRegistryImpl.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ComponentDefinitionRegistry.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ParserContext.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/ComponentFactoryMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ComponentFactoryRecipe.java
texts:Custom Component Metadata support
This started from a thought related to ARIES-63 of how to improve Passthroughmetadata to allow the object to access blueprint objects via an interface passed to 'getObject'. As more consideration is given to requirements that would be added to Passthroughmetadata, it's restrictions start to feel like a more capable alternative may be required.
Although pass through metadata is interesting, it is also fairly limited, essentially acting like a custom 'singleton' component recipe.
Custom components can get a little more complex, and may wish to act as prototype, or be informed when destruction occurs, or even participate in availability/satisfaction type behaviour (like Reference instances do today).
This feature aims to implement support for custom components through a new custom component metadata & recipe, offering all of the above.
issueID:ARIES-680
type:Bug
changed files:
texts:Be more careful to use scope provided external dependencies

issueID:ARIES-681
type:Bug
changed files:
texts:JPA Container BundleDelegatingClassLoader should look for classes in the provider bundle, too
Currently the BundleDelegatingClassLoader in JPA container only looks for classes in the bundle of the entitymanager. However the JPA implementation Eclipselink needs some classes from itself. The reason is that in entity classes the properties that hold mapping of One-To-Many are converted to EclipseLink list type. See the following exception stacktrace:
Internal Exception: java.lang.ClassNotFoundException: org.eclipse.persistence.indirection.IndirectList
at org.eclipse.persistence.exceptions.ValidationException.classNotFoundWhileConvertingClassNames(ValidationException.java:2317)
at org.eclipse.persistence.internal.queries.InterfaceContainerPolicy.convertClassNamesToClasses(InterfaceContainerPolicy.java:123)
at org.eclipse.persistence.mappings.CollectionMapping.convertClassNamesToClasses(CollectionMapping.java:788)
at org.eclipse.persistence.descriptors.ClassDescriptor.convertClassNamesToClasses(ClassDescriptor.java:1458)
at org.eclipse.persistence.sessions.Project.convertClassNamesToClasses(Project.java:362)
at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.deploy(EntityManagerSetupImpl.java:322)
... 83 more
Caused by: java.lang.ClassNotFoundException: org.eclipse.persistence.indirection.IndirectList
at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:744)
at org.apache.felix.framework.ModuleImpl.access$100(ModuleImpl.java:61)
at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1656)
at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
at org.apache.felix.framework.ModuleImpl.getClassByDelegation(ModuleImpl.java:604)
at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1487)
at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:897)
at org.apache.aries.jpa.container.unit.impl.BundleDelegatingClassLoader$1.run(BundleDelegatingClassLoader.java:50)
at org.apache.aries.jpa.container.unit.impl.BundleDelegatingClassLoader$1.run(BundleDelegatingClassLoader.java:47)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.jpa.container.unit.impl.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:47)
at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:247)
at org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(PrivilegedAccessHelper.java:88)
at org.eclipse.persistence.internal.queries.InterfaceContainerPolicy.convertClassNamesToClasses(InterfaceContainerPolicy.java:120)
... 87 more
issueID:ARIES-682
type:Bug
changed files:util/src/main/java/org/apache/aries/util/filesystem/IFile.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
texts:application-modeller-common-test failure
I see two failing tests in application-modeller-common-test - two tests run against a bundle jar which pass, but the same two tests that run against an extracted bundle jar fail. The Blueprint services aren't being found. This is the failure:
-------------------------------------------------------------------------------
Test set: org.apache.aries.application.modelling.ModellerTest
-------------------------------------------------------------------------------
Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.187 sec <<< FAILURE!
testParsingOfBundle[0](org.apache.aries.application.modelling.ModellerTest) Time elapsed: 0.012 sec <<< FAILURE!
java.lang.AssertionError: expected:<3> but was:<0>
at org.junit.Assert.fail(Assert.java:91)
at org.junit.Assert.failNotEquals(Assert.java:645)
at org.junit.Assert.assertEquals(Assert.java:126)
at org.junit.Assert.assertEquals(Assert.java:470)
at org.junit.Assert.assertEquals(Assert.java:454)
at org.apache.aries.application.modelling.ModellerTest.checkTestBundleResource(ModellerTest.java:127)
at org.apache.aries.application.modelling.ModellerTest.testParsingOfBundle(ModellerTest.java:94)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.junit.runners.Suite.runChild(Suite.java:128)
at org.junit.runners.Suite.runChild(Suite.java:24)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:600)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
issueID:ARIES-683
type:Bug
changed files:
texts:Aries does not build from empty repo because jstl 1.2 dependency no longer exists in Maven repo

issueID:ARIES-684
type:Bug
changed files:
texts:Temporary org.eclipse.osgi 3.7 download location has moved
Binaries have been archived to
http://archive.eclipse.org/equinox/drops/S-3.7M6-201103101119/org.eclipse.osgi_3.7.0.v20110304.jar
issueID:ARIES-685
type:Bug
changed files:
texts:Blueprint helloworld sample uses outdated pom version

issueID:ARIES-686
type:Improvement
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceStateMBeanHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/framework/BundleStateMBeanHandler.java
jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/MBeanHolder.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/shared/RegistrableStandardEmitterMBean.java
jmx/jmx-core-whiteboard/src/main/java/org/apache/aries/jmx/core/whiteboard/Activator.java
texts:Implement the JMX spec MBeans using the whiteboard pattern.

issueID:ARIES-687
type:Bug
changed files:
texts:Blueprint API bundle exports org.osgi.service.blueprint at version 0.0.0
The uber blueprint bundle exports it at 1.0.1 due to there being a section in the blueprint-bundle/pom.xml but blueprint-api doesn't do this.
issueID:ARIES-688
type:Bug
changed files:
texts:ASM package imports are unversioned in proxy-bundle

issueID:ARIES-689
type:Bug
changed files:
texts:Application OBR resolution fails for optional imports
Application that contains bundles that have optional dependencies on other bundles via Import-Package or Require-Bundle will fail to install. It seems like the optional dependencies are treated as mandatory ones.
issueID:ARIES-69
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ParserService.java
texts:Expose ParserService
As per recent discussion on aries-dev, expose a ParserService to enable blueprint xml to be parsed as required - not just when populating the container.
issueID:ARIES-690
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
texts:ClassCircularityError caused by proxy weaving
I've run into a ClassCircularityError that's apparently caused by proxy weaving code. I captured the stack trace via debugger:
ejbd 1@1196 daemon, prio=5, in group 'main', status: 'RUNNING'
at java.lang.ClassCircularityError.<init>(ClassCircularityError.java:32)
at java.lang.Class.getDeclaringClass(Class.java:-1)
at java.lang.Class.getEnclosingClass(Class.java:1085)
at org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.readClass(AbstractWovenProxyAdapter.java:618)
at org.apache.aries.proxy.impl.weaving.WovenProxyAdapter.visitEnd(WovenProxyAdapter.java:75)
at org.objectweb.asm.ClassAdapter.visitEnd(Unknown Source:-1)
at org.objectweb.asm.commons.SerialVersionUIDAdder.visitEnd(Unknown Source:-1)
at org.apache.aries.proxy.impl.weaving.SyntheticSerialVerUIDAdder.visitEnd(SyntheticSerialVerUIDAdder.java:35)
at org.objectweb.asm.ClassReader.accept(Unknown Source:-1)
at org.objectweb.asm.ClassReader.accept(Unknown Source:-1)
at org.apache.aries.proxy.impl.weaving.WovenProxyGenerator.getWovenProxy(WovenProxyGenerator.java:52)
at org.apache.aries.proxy.impl.weaving.ProxyWeavingHook.weave(ProxyWeavingHook.java:63)
at org.eclipse.osgi.internal.baseadaptor.weaving.WovenClassImpl.call(WovenClassImpl.java:129)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1239)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHooksPrivileged(ServiceRegistry.java:1222)
at org.eclipse.osgi.internal.baseadaptor.weaving.WovenClassImpl.callHooks(WovenClassImpl.java:154)
at org.eclipse.osgi.internal.baseadaptor.weaving.WeavingHookConfigurator.processClass(WeavingHookConfigurator.java:68)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:596)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:567)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:490)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader(ClasspathManager.java:478)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:458)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:216)
at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:400)
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:476)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:429)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:417)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
at org.apache.openjpa.util.Serialization.deserialize(Serialization.java:86)
at org.apache.openjpa.jdbc.sql.DBDictionary.getBlobObject(DBDictionary.java:623)
at org.apache.openjpa.jdbc.sql.ResultSetResult.getObjectInternal(ResultSetResult.java:402)
at org.apache.openjpa.jdbc.sql.AbstractResult.getObject(AbstractResult.java:696)
at org.apache.openjpa.jdbc.meta.strats.HandlerStrategies.loadDataStore(HandlerStrategies.java:222)
at org.apache.openjpa.jdbc.meta.strats.HandlerFieldStrategy.load(HandlerFieldStrategy.java:187)
at org.apache.openjpa.jdbc.meta.FieldMapping.load(FieldMapping.java:928)
at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.load(JDBCStoreManager.java:1123)
at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.load(JDBCStoreManager.java:1067)
at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.initializeState(JDBCStoreManager.java:438)
at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.initialize(JDBCStoreManager.java:333)
at org.apache.openjpa.kernel.DelegatingStoreManager.initialize(DelegatingStoreManager.java:112)
at org.apache.openjpa.kernel.ROPStoreManager.initialize(ROPStoreManager.java:57)
at org.apache.openjpa.kernel.BrokerImpl.initialize(BrokerImpl.java:1022)
at org.apache.openjpa.kernel.BrokerImpl.find(BrokerImpl.java:980)
at org.apache.openjpa.kernel.BrokerImpl.find(BrokerImpl.java:902)
at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.load(JDBCStoreManager.java:1041)
at org.apache.openjpa.jdbc.sql.AbstractResult.load(AbstractResult.java:280)
at org.apache.openjpa.jdbc.sql.SelectImpl$SelectResult.load(SelectImpl.java:2381)
at org.apache.openjpa.jdbc.sql.AbstractResult.load(AbstractResult.java:274)
at org.apache.openjpa.jdbc.kernel.InstanceResultObjectProvider.getResultObject(InstanceResultObjectProvider.java:59)
at org.apache.openjpa.lib.rop.EagerResultList.<init>(EagerResultList.java:36)
at org.apache.openjpa.kernel.QueryImpl.toResult(QueryImpl.java:1251)
at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:1007)
at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:863)
at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)
at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)
at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:305)
at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:319)
at org.apache.openejb.core.cmp.jpa.JpaCmpEngine.executeSelectQuery(JpaCmpEngine.java:277)
at org.apache.openejb.core.cmp.jpa.JpaCmpEngine.queryBeans(JpaCmpEngine.java:231)
at org.apache.openejb.core.cmp.CmpContainer.findEJBObject(CmpContainer.java:669)
at org.apache.openejb.core.cmp.CmpContainer.invoke(CmpContainer.java:261)
at org.apache.openejb.core.cmp.CmpContainer.invoke(CmpContainer.java:230)
at org.apache.openejb.server.ejbd.EjbRequestHandler.doEjbHome_FIND(EjbRequestHandler.java:327)
at org.apache.openejb.server.ejbd.EjbRequestHandler.processRequest(EjbRequestHandler.java:152)
at org.apache.openejb.server.ejbd.EjbDaemon.processEjbRequest(EjbDaemon.java:196)
at org.apache.openejb.server.ejbd.EjbDaemon.service(EjbDaemon.java:149)
at org.apache.openejb.server.ejbd.EjbServer.service(EjbServer.java:71)
at org.apache.openejb.server.ejbd.KeepAliveServer$Session.service(KeepAliveServer.java:213)
at org.apache.openejb.server.ejbd.KeepAliveServer.service(KeepAliveServer.java:233)
at org.apache.openejb.server.ejbd.EjbServer.service(EjbServer.java:66)
at org.apache.openejb.server.ServicePool$2.run(ServicePool.java:91)
at org.apache.openejb.server.ServicePool$3.run(ServicePool.java:120)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:680)
If I exclude 'org.apache.openjpa' from weaving (by adding a check in ProxyWeavingHook), everything works fine...
I may commit this as a temporary work-around – to help Geronimo testing. However, this seems like a general proxy issue. So, I think we'll need to understand the underlying issue...
issueID:ARIES-691
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/internal/FelixWorker.java
texts:Add tests for EclipseLink - possibly include fragment for EclipseLink support
We should test the Aries JPA container with EclipseLink as well as OpenJPA to give us better coverage. This may involve writing code to expose the EclipseLink PersistenceProvider implementation
issueID:ARIES-692
type:Improvement
changed files:
texts:Remove download of Equinox 3.7 from build
The OSGi 4.3 core API is available in Maven now. We should use it rather than downloading our own copy of Equinox 3.7 to get the API.
issueID:ARIES-693
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
texts:Interface proxy does not delegate Object methods like equals, hashCode or toString

issueID:ARIES-694
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
texts:Proxy manager can return a stale proxy built against a previous classloader for bundles having undergone refresh
This scenario occurred when using a Blueprint bundle A having a service reference on a service in another bundle B, the service api is also provided by B.
B got updated to B'. In this process A gets refreshed to use the new classes from B'. However, when Blueprint creates the service reference proxy it gets returned a proxy implementing the old interfaces from B rather than the interfaces passed in (which come from B'). This is because proxy classes are cached by bundle and the bundle has not changed ....
issueID:ARIES-695
type:Bug
changed files:
texts:Proxy manager can return a stale proxy built against a previous classloader for bundles having undergone refresh
This scenario occurred when using a Blueprint bundle A having a service reference on a service in another bundle B, the service api is also provided by B.
B got updated to B'. In this process A gets refreshed to use the new classes from B'. However, when Blueprint creates the service reference proxy it gets returned a proxy implementing the old interfaces from B rather than the interfaces passed in (which come from B'). This is because proxy classes are cached by bundle and the bundle has not changed ....
issueID:ARIES-697
type:Bug
changed files:util/src/main/java/org/apache/aries/util/nls/MessageUtil.java
texts:Java 2 security permission failure in JNDI - Util code path
Some client code invokes JNDI operations for the first time, which causes an AccessControlException in Equinox as such ...
java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessDeclaredMembers)
at java.security.AccessController.checkPermission(AccessController.java:108)
at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)
at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:208)
at java.lang.SecurityManager.checkMemberAccess(SecurityManager.java:1689)
at java.lang.Class.checkMemberAccess(Class.java:105)
at java.lang.Class.getDeclaredMethod(Class.java:574)
at org.apache.aries.util.internal.EquinoxWorker.invoke(EquinoxWorker.java:54)
at org.apache.aries.util.internal.EquinoxWorker.getClassLoader(EquinoxWorker.java:31)
at org.apache.aries.util.AriesFrameworkUtil.getClassLoader(AriesFrameworkUtil.java:56)
at org.apache.aries.util.nls.MessageUtil.createMessageUtil(MessageUtil.java:147)
at org.apache.aries.util.nls.MessageUtil.createMessageUtil(MessageUtil.java:107)
at org.apache.aries.jndi.services.ServiceHelper.<clinit>(ServiceHelper.java:212)
at java.lang.J9VMInternals.initializeImpl(Native Method)
at java.lang.J9VMInternals.initialize(J9VMInternals.java:205)
at org.apache.aries.jndi.url.ServiceRegistryContext.lookup(ServiceRegistryContext.java:99)
at org.apache.aries.jndi.url.ServiceRegistryContext.lookup(ServiceRegistryContext.java:141)
at org.apache.aries.jndi.DelegateContext.lookup(DelegateContext.java:161)
at javax.naming.InitialContext.lookup(InitialContext.java:431)
issueID:ARIES-698
type:Bug
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/utils/impl/ModellingHelperImpl.java
texts:Missing Message Resource
While attempting to import an Asset in WebSphere I get a failure with the stack trace shown below, something is wrong with my config but it appears that the error message that should inform users of the problem is missing from the message bundle, the message key is APPUTILS0001W
[01/07/11 15:36:40:125 BST] FFDC Exception:java.lang.reflect.InvocationTargetException SourceId:com.ibm.ws.eba.external.framework.LauncherInvocationHandler.invoke ProbeId:269 Reporter:com.ibm.ws.eba.launcher.crossInterfaceUtil.LauncherInvocationHandler@2015fa6
java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at com.ibm.ws.eba.launcher.crossInterfaceUtil.LauncherInvocationHandler.invoke(LauncherInvocationHandler.java:149)
at $Proxy75.getModelledResource(Unknown Source)
at com.ibm.ws.eba.bla.util.ResourceModellingUtils.model(ResourceModellingUtils.java:142)
at com.ibm.ws.eba.bla.util.ResourceModellingUtils.model(ResourceModellingUtils.java:248)
at com.ibm.ws.eba.bla.util.ExplodedAriesArchive.getByValueBundles(ExplodedAriesArchive.java:122)
at com.ibm.ws.eba.bla.util.ExplodedEBA.setOrGenerateDeploymentManifest(ExplodedEBA.java:430)
at com.ibm.ws.eba.bla.util.EBAConverter.validateAndTransform(EBAConverter.java:239)
at com.ibm.ws.eba.bla.EbaTagAssetStep.convertToDeployedEBA(EbaTagAssetStep.java:332)
at com.ibm.ws.eba.bla.EbaTagAssetStep.createPrepopulatedRows(EbaTagAssetStep.java:157)
at com.ibm.ws.eba.bla.AriesStep.executeGenStepMetadataPhase(AriesStep.java:584)
at com.ibm.ws.eba.bla.AriesStep.execute(AriesStep.java:465)
at com.ibm.wsspi.management.bla.op.compound.Phase.execute(Phase.java:151)
at com.ibm.wsspi.management.bla.op.compound.CompoundOperation._doPhaseExecute(CompoundOperation.java:102)
at com.ibm.wsspi.management.bla.op.compound.CompoundOperation.doExecute(CompoundOperation.java:85)
at com.ibm.wsspi.management.bla.op.Operation.execute(Operation.java:158)
at com.ibm.wsspi.management.bla.op.compound.CompoundOperation.execute(CompoundOperation.java:68)
at com.ibm.ws.management.bla.commands.ADTCommand$OperationScheduler.run(ADTCommand.java:596)
at java.lang.Thread.run(Thread.java:737)
Caused by: java.util.MissingResourceException: Can't find resource for bundle java.util.PropertyResourceBundle, key APPUTILS0001W
at java.util.ResourceBundle.getObject(ResourceBundle.java:402)
at java.util.ResourceBundle.getString(ResourceBundle.java:416)
at org.apache.aries.application.modelling.internal.MessageUtil.getMessage(MessageUtil.java:39)
at org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl.buildFragmentHost_(ModellingHelperImpl.java:120)
at org.apache.aries.application.modelling.impl.ExportedBundleImpl.<init>(ExportedBundleImpl.java:103)
at org.apache.aries.application.modelling.impl.ModelledResourceImpl.<init>(ModelledResourceImpl.java:137)
at org.apache.aries.application.modelling.impl.ModelledResourceImpl.<init>(ModelledResourceImpl.java:122)
at org.apache.aries.application.modelling.impl.ModellingManagerImpl.getModelledResource(ModellingManagerImpl.java:122)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50)
at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:91)
at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78)
at org.apache.aries.application.modelling.impl.$ModellingManagerImpl6218828.getModelledResource(Unknown Source)
... 22 more
issueID:ARIES-699
type:Bug
changed files:application/application-tooling-repository-generator/src/main/java/org/apache/aries/application/repository/generator/AriesRepositoryGenerator.java
texts:Apache Aries repo generation tool - default file name typo
The default repository file name if no name is specified should be repository.xml instead of reporsitory.xml:o
issueID:ARIES-7
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Use BundleTracker from OSGi 4.2

issueID:ARIES-70
type:Bug
changed files:
texts:JMX-Core doesn't build
The jmx-core code does not compile:
[INFO] Compilation failure
/Users/nottinga/Documents/aries/apache/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanHandler.java:[76,20]
cannot find symbol
symbol : constructor
StandardMBean(org.osgi.jmx.service.permissionadmin.PermissionAdminMBean,java.lang.Class<org.osgi.jmx.framework.FrameworkMBean>)
location: class javax.management.StandardMBean
Looking at the code it looks like a simple copy and paste error:
mbean = new StandardMBean(paMBean, FrameworkMBean.class);
should be:
mbean = new StandardMBean(paMBean, PermissionAdminMBean.class);
issueID:ARIES-700
type:Bug
changed files:jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/Activator.java
texts:[Whiteboard] MBean Tracker should listen for all services
The ServiceTracker tracking MBean services currently only tracks services whose service interface is accessible to the JMX Whiteboard bundle. This is wrong since the Whiteboard bundle does not really care for the actual implemented service (unless the service interface happens to be DynamicMBean (or an JMX defined extension thereof)).
The patch is extremely simple:
Index: Activator.java
===================================================================
— Activator.java (Revision 1142902)
+++ Activator.java (Arbeitskopie)
@@ -42,7 +42,7 @@
mbeanServerTracker.open();
mbeanTracker = new MBeanTracker(context);
mbeanTracker.open();
+ mbeanTracker.open(true);
}
public void stop(BundleContext context) throws Exception {
issueID:ARIES-701
type:Improvement
changed files:jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/MBeanHolder.java
jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/JmxWhiteboardSupport.java
texts:[Whiteboard] Use IdentityHashMap<Object,MBeanHolder> to map registered services to MBeanHolders
The JmxWhiteboardSupport class maintains an internal structure to keep track of MBean services registered with MBean servers. This currently is a map from MBeanHolder onto itself using special crafted MBeanHolder.equals/hashCode to support retireval on MBean unregistration.
It would probably be better use an IdentityHashMap<Object,MBeanHolder> indexed by the service object which is easily accessible and does place any special requirements on the service object.
Consequently the hashCode and equals methods of the MBeanHolder class can be removed.
issueID:ARIES-702
type:Improvement
changed files:jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/Activator.java
jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/JmxWhiteboardSupport.java
jmx/jmx-whiteboard/src/main/java/org/apache/aries/jmx/whiteboard/MBeanHolder.java
texts:[Whiteboard] Use introspection to find the MBean interface
This is problematic in multiple ways.
I suggest we change this as follows:
If the service object implements the DynamicMBean interface (or an extension thereof), use the object as is as the MBean
Find the MBean interface by walking up the class and interface hierarchy
issueID:ARIES-703
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/CollectionRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/MapRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/AbstractRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/RefRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ValueRecipe.java
texts:JDKProxyManager cannot proxy blueprint beans
When there is no ASM between the bundles and aries proxy is installed the default proxy manager is JDKProxyManager. When there is a bean in a blueprint fragment that has for example tx:transaction inside creating the transactional proxy fails with the following stacktrace:
[#|2011-07-06T14:29:24.542+0200|SEVERE|glassfish3.1|org.apache.aries.blueprint.container.BlueprintContainerImpl|_ThreadID=27;_ThreadName=Thread-1;|Unable to start blueprint container for bundle biz.everit.audit.persistence.biz.everit.audit.persistence.impl
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to create proxy for bean eventPersistenceImpl in bundle biz.everit.audit.persistence.biz.everit.audit.persistence.impl version 0.1.0.SNAPSHOT
at org.apache.aries.blueprint.container.BeanRecipe.addInterceptors(BeanRecipe.java:695)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:730)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:71)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:79)
at org.apache.aries.blueprint.di.RefRecipe.internalCreate(RefRecipe.java:60)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:98)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:220)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:205)
at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:144)
at org.apache.aries.blueprint.container.ServiceRecipe.createRecipe(ServiceRecipe.java:398)
at org.apache.aries.blueprint.container.ServiceRecipe.createService(ServiceRecipe.java:271)
at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:243)
at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:320)
at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:465)
at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:310)
at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:221)
at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:297)
at org.apache.felix.framework.Felix.getService(Felix.java:3014)
at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:329)
at org.jvnet.hk2.osgiadapter.HK2Main$HK2ServiceTrackerCustomizer.addingService(HK2Main.java:260)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:896)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:233)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:840)
at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:871)
at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:733)
at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:662)
at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3769)
at org.apache.felix.framework.Felix.access$000(Felix.java:80)
at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:722)
at org.apache.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:107)
at org.apache.felix.framework.Felix.registerService(Felix.java:2854)
at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:251)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:408)
at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:187)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:666)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:334)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.aries.proxy.UnableToProxyException: The class biz.everit.audit.persistence.impl.EventPersistenceServiceImpl is not an interface and therefore a proxy cannot be generated.
at org.apache.aries.proxy.impl.JdkProxyManager.getInterfaces(JdkProxyManager.java:43)
at org.apache.aries.proxy.impl.JdkProxyManager.createNewProxy(JdkProxyManager.java:36)
at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:75)
at org.apache.aries.proxy.impl.AbstractProxyManager.createInterceptingProxy(AbstractProxyManager.java:53)
at org.apache.aries.blueprint.container.BeanRecipe.addInterceptors(BeanRecipe.java:690)
... 47 more
It will always happen as we have the following line in BeanRecepe:
intercepted = BlueprintExtender.getProxyManager().createInterceptingProxy(b,
ProxyUtils.asList(original.getClass()), original,
new Collaborator(interceptorLookupKey, interceptors));
That means that the interface list is the class of the bean itself that is cannot be an interface. In case of JDKProxy we should derive the interfaces that the bean implements and those interface classes should be passed. However at this level (BeanRecipe) we do not know about the proxy manager...
The example blueprint file for this:
<bean id="eventPersistenceImpl" class="biz.everit.audit.persistence.impl.EventPersistenceServiceImpl">
<tx:transaction method="*" value="Required" />
<jpa:context property="em" unitname="biz.everit.audit.persistence.entity" type="TRANSACTION" />
</bean>
issueID:ARIES-704
type:Bug
changed files:util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
texts:BundleToClassLoaderAdapter does not implement loadClass(String, boolean)
When there is a loadClass(String) to a classloader it simply calls loadClass(String, boolean). The second function checks if a class is available in the parent classloader by checking loadClass(String, boolean). If BundleToClassLoader adapter is used for a ClassLoader as the parent, the loadClass(String) will never be called.
Here is a sample stacktrace ( line numbers from JDK 1.6.0_26):
at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:787)
at org.apache.felix.framework.ModuleImpl.access$400(ModuleImpl.java:71)
at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1768)
at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
at org.apache.aries.jpa.eclipselink.adapter.Activator$PersistenceUnitProxyWithTargetServer$1.findClass(Activator.java:102)
at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:247)
at org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(PrivilegedAccessHelper.java:93)
at org.eclipse.persistence.descriptors.ClassDescriptor.convertClassNamesToClasses(ClassDescriptor.java:1258)
issueID:ARIES-705
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
texts:proxy code is weaving JPA metamodel classes and can cause JPA errors
Aries proxy code is weaving JPA metamodel classes. This results in the following error for current OpenJPA (2.1.x):
java.lang.IllegalStateException: localized message key: meta-field-not-param; substitutions: [class com.foo.Baz_, serialVersionUID, long]
at org.apache.openjpa.persistence.meta.MetamodelImpl.getParameterziedType(MetamodelImpl.java:341)
at org.apache.openjpa.persistence.meta.MetamodelImpl.populate(MetamodelImpl.java:310)
at org.apache.openjpa.persistence.meta.MetamodelImpl.instantiate(MetamodelImpl.java:257)
at org.apache.openjpa.persistence.meta.MetamodelImpl.find(MetamodelImpl.java:226)
at org.apache.openjpa.persistence.meta.MetamodelImpl.<init>(MetamodelImpl.java:91)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.getMetamodel(EntityManagerFactoryImpl.java:346)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.getCriteriaBuilder(EntityManagerFactoryImpl.java:333)
at org.apache.openjpa.persistence.EntityManagerImpl.getCriteriaBuilder(EntityManagerImpl.java:1638)
at org.apache.openjpa.persistence.EntityManagerImpl.getCriteriaBuilder(EntityManagerImpl.java:101)
at com.foo.Test.query(Test.java:xxx)
See https://issues.apache.org/jira/browse/OPENJPA-2024
IMO, MetaModel classes (annotated with javax.persistence.metamodel.StaticMetamodel) should be ignored by aries weaving...
issueID:ARIES-706
type:Bug
changed files:
texts:support dynamic configuration of classes that will be ignored by proxy/weaving...
Currently, the weaving code has a static list of packages that will be ignored. There needs to be some support for a configurable list of packages/classes that will be ignored by Aries.
Including 0.4-SNAPSHOT into Geronimo has identified a number of integration problems with existing open source projects. Arguably, the solution is to update these existing open source projects (to ignore synthetic methods/fields, etc). However, this will not always be practical.
We need a way of dynamically configuring Aries weaving (even to the point of effectively turning weaving off, entirely).
issueID:ARIES-707
type:Improvement
changed files:
texts:Dry up itests
Currently, methods like getOSGiService, mavenBundle, getInstalledBundle and the various bundles that make the runtime together with the IBM JVM fix are included fresh in every itest project ...
issueID:ARIES-708
type:Bug
changed files:util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
texts:org.apache.aries.util pom should point to java6-parent, not java5-parent
Pulled in org.apache.aries.util using m2e and received a bunch of errors about the @Override annotation use on implemented interface methods. Parent should be java6-parent.
issueID:ARIES-709
type:Bug
changed files:application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
texts:Well behaved shutdown of the application runtime
If you take the bundles required for isolated application runtime and then shut them down in the wrong order (and I don't know what the right one is) it can take 5 minutes to shutdown. This is because the ApplicationContextImpl.java in the isolated runtime in the uninstall method calls the BundleFrameworkManager and if that has gone away blueprint blocks for the default 5 minutes in the hope a replacement is coming.
Fixing this may be as simple as reducing the timeout, but that is probably only part of the solution.
issueID:ARIES-71
type:Improvement
changed files:
texts:Add new Aries logo

issueID:ARIES-711
type:Bug
changed files:jmx/jmx-core-whiteboard/src/main/java/org/apache/aries/jmx/core/whiteboard/Activator.java
texts:JMX core whiteboard doesn't shutdown well
On shutdown the following exception is thrown by the jmx core whiteboard bundle activator:
org.osgi.framework.BundleException: Exception in org.apache.aries.jmx.core.whiteboard.Activator.stop() of bundle org.apache.aries.jmx.core.whiteboard.
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.stop(BundleContextImpl.java:791)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:510)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:565)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1160)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:595)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:690)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:597)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.NoClassDefFoundError: org.osgi.service.useradmin.UserAdmin
at org.apache.aries.jmx.core.whiteboard.Activator.removedService(Activator.java:373)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:1006)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:352)
at org.osgi.util.tracker.ServiceTracker.close(ServiceTracker.java:412)
at org.apache.aries.jmx.core.whiteboard.Activator.stop(Activator.java:178)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(BundleContextImpl.java:771)
at java.security.AccessController.doPrivileged(AccessController.java:251)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.stop(BundleContextImpl.java:764)
... 11 more
Caused by: java.lang.ClassNotFoundException: org.osgi.service.useradmin.UserAdmin
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:513)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:429)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:417)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:619)
... 20 more
this is because I wasn't careful enough to remove all instances of optional import classloads in a previous commit.
issueID:ARIES-713
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/threading/impl/WrappedFuture.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/threading/impl/DiscardableRunnable.java
util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/threading/impl/WrappedScheduledFuture.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintEventDispatcher.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/threading/impl/DiscardableCallable.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/threading/RWLock.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/threading/ScheduledExecutorServiceWrapper.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/threading/impl/Discardable.java
texts:Support using a ScheduledExecutorService for blueprint that is in the service registry

issueID:ARIES-714
type:Bug
changed files:application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
texts:SimpleBundleInfo.getExportService() returning wrong value
The SimpleBundleInfo.getExportService() method is returning the _exportPackages member instead of _exportServices, I suspect this is simply a copy/paste error and not by design.
issueID:ARIES-715
type:Improvement
changed files:util/src/main/java/org/apache/aries/util/filesystem/impl/FileSystemImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/InputStreamClosableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/FileSystem.java
texts:Add support for InputStream based IDirectory
The Filesystem in the util project is very useful, but it only works for Files. It would be great if we could use an InputStream as well
issueID:ARIES-716
type:Improvement
changed files:application/application-modeller-standalone/src/main/java/org/apache/aries/application/modelling/standalone/OfflineModellingFactory.java
application/application-api/src/main/java/org/apache/aries/application/modelling/ServiceModeller.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
texts:Allow plugins to extend the Aries Application Modeller
The Aries modelling code needs a plug point to allow additional service imports and exports to be defined in an extensible way
issueID:ARIES-717
type:Improvement
changed files:
texts:Use Equinox 3.7 from maven rather than downloading from eclipse.org

issueID:ARIES-718
type:New Feature
changed files:ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/EJBServiceExport.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/AriesPersistenceContextIntegration.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/OSGiTransactionManager.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/RunningApplication.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ExportedServiceImpl.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/EJBModeller.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/IDirectoryFinder.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/EJBLocatorFactory.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/EJBLocationUnavailable.java
util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/ParsedEJBServices.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/AriesProxyService.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/OSGiFinder.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/EJBRegistry.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/EJBServiceFactory.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/AllCollection.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/OpenEJBLocator.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/EJBLocator.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/EJBExtender.java
application/application-utils/src/main/java/org/apache/aries/application/utils/service/ExportedServiceHelper.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/StandaloneEJBModeller.java
texts:EJB support in Apache Aries
Start to add EJB support in Aries. We can begin by modelling the services that are exposed by an EJB bundle
issueID:ARIES-72
type:Improvement
changed files:
texts:Update Aries Images (excluding the RAM image - see Aries 71)

issueID:ARIES-720
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Improve waiting for namespace handler message
The waiting for blueprint namespace handlers message attempts to pass the filters for the namespace handlers into the error message, but the message doesn't contain the insert marker.
Need to add the insert marker.
issueID:ARIES-721
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:NPE in BeanRecipe.getDestroyMethod
While debugging a problem I got into a situation where the getDestroyMethod was called with a null bean instance. I suspect this was a knock on, but if the bean is null we should cope rather than NPEing.
issueID:ARIES-722
type:Improvement
changed files:
texts:Enabling debug for blueprint itests is too hard
Since the refactor that created the blueprint test Helper class the tests lost the commented out entries for enabling debug mode for the tests. It would be good if we made this really easy.
issueID:ARIES-725
type:Bug
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
texts:Aries Application modeller does not find and model anonymous inner Blueprint reference or service components
For a snippet like:
<bean class="java.util.ArrayList">
<argument>
<reference interface="java.util.Collection" />
</argument>
</bean>
We do not generate an ImportedService in the ModelledResource view.
issueID:ARIES-726
type:Bug
changed files:application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/BundleFrameworkImpl.java
texts:NullPointerException in CompositeClassLoader
I have an api bundle which is loaded into a shared bundle OSGi framework, and have an implementation bundle that is loaded into a separate framework. When I try and start my application, I see this exception:
java.lang.RuntimeException: Unable to start a Web Application: ....
...
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:453)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:919)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1349)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1300)
at org.eclipse.osgi.framework.internal.core.BundleHost.readyToResume(BundleHost.java:440)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:373)
at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1067)
at org.eclipse.osgi.framework.internal.core.PackageAdminImpl.resumeBundles(PackageAdminImpl.java:302)
at org.eclipse.osgi.framework.internal.core.PackageAdminImpl.processDelta(PackageAdminImpl.java:546)
at org.eclipse.osgi.framework.internal.core.PackageAdminImpl.doResolveBundles(PackageAdminImpl.java:239)
at org.eclipse.osgi.framework.internal.core.PackageAdminImpl.resolveBundles(PackageAdminImpl.java:185)
at org.eclipse.osgi.internal.composite.CompositeBase.resolveContent(CompositeBase.java:78)
at org.eclipse.osgi.internal.composite.CompositeImpl.updateSurrogate(CompositeImpl.java:97)
at org.eclipse.osgi.internal.composite.CompositeImpl.giveExports(CompositeImpl.java:216)
at org.eclipse.osgi.internal.module.ResolverImpl.checkComposites(ResolverImpl.java:563)
at org.eclipse.osgi.internal.module.ResolverImpl.resolveBundles0(ResolverImpl.java:549)
at org.eclipse.osgi.internal.module.ResolverImpl.resolveBundles(ResolverImpl.java:514)
at org.eclipse.osgi.internal.module.ResolverImpl.resolve(ResolverImpl.java:393)
at org.eclipse.osgi.internal.resolver.StateImpl.resolve(StateImpl.java:458)
at org.eclipse.osgi.internal.resolver.StateImpl.resolve(StateImpl.java:523)
at org.eclipse.osgi.framework.internal.core.PackageAdminImpl.doResolveBundles(PackageAdminImpl.java:238)
at org.eclipse.osgi.framework.internal.core.PackageAdminImpl.resolveBundles(PackageAdminImpl.java:185)
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:318)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:284)
at org.apache.aries.application.runtime.framework.BundleFrameworkImpl.start(BundleFrameworkImpl.java:110)
at org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl.startBundle(BundleFrameworkManagerImpl.java:242)
....
Caused by: com.ibm.ws.exception.RuntimeError: java.lang.NullPointerException
... 92 more
Caused by: java.lang.NullPointerException
at org.eclipse.osgi.internal.composite.CompositeClassLoader.findLocalClass(CompositeClassLoader.java:83)
at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:393)
at org.eclipse.osgi.internal.loader.SingleSourcePackage.loadClass(SingleSourcePackage.java:33)
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:457)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:422)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:612)
at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:338)
at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:232)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1197)
...
at java.lang.Class.forNameImpl(Native Method)
at java.lang.Class.forName(Class.java:166)
...
... 98 more
issueID:ARIES-728
type:New Feature
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ResolutionDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ManifestVersionHeader.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/Repository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Grammar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHookFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionRangeAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractParameter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/TypeAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedVersionAttribute.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemException.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Directive.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemSymbolicNameHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ParameterFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DirectiveFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Clause.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleManifest.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/Subsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ExportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Attribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericClause.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/HeaderFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemTypeHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractDirective.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemConstants.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/package-info.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/ContentNamespace.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Parameter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AttributeFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionResourceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Header.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemManifestVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Manifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemUri.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiContentCapability.java
texts:Check in initial baseline for subsystems implementation based on latest RFCs.
Checking in the initial baseline for the subsystems implementation based on the latest Subsystems (RFC 152) and OBR (RFC 112) working drafts. Note that subsystems is not currently part of the build. Moving forward, work will be completed in more discrete, well-defined chunks.
I would describe the current states of RFC 112 and 152 as mature and maturing, respectively. A lot of work remains to be done on the implementation and, particularly, on the testing, however.
One major necessity is an implementation of the Resolver. Currently, subsystems wraps the Resolver interface around the existing Felix OBR RepositoryAdmin as a placeholder in order to have support for pulling in content and transitive dependencies from remote repositories. However, this leaves out the wiring state which will be used for things such as computing certain headers in the subsystem and deployment manifests. Presumably, Felix will have a Resolver implementation at some point in the future. We are also looking at the possibility of implementing a Resolver on top of Equinox.
Over the next few weeks, I will be focusing primarily on hardening support for features.
issueID:ARIES-729
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
texts:Move generation of Maven repository from subsystem-core to subsystem-itests.
The generation of the remote repository currently occurs as part of the core subsystems functionality. Moving forward, it will not be the responsibility of the susbsystems implementation to generate such repositories. Rather, such repositories will be generated externally and registered as Repository services in the OSGi registry. Subsystems will then search these registered repositories in service ranking order during the provisioning process. Consequently, I will move this functionality to subsystem-itests since this repository is still necessary for testing purposes.
For the time being, I will keep the contents of org.apache.aries.subsystem.core.obr.felix in place, and subsystem-itests will import the contents. However, I wonder if even this should ultimately still reside in subsystem-core. This package contains a set of classes that essentially create a composite Repository around RepositoryAdmin. As part of setup, the test harness will need to generate the OBR XML based on the local Maven repository, register the XML with RepositoryAdmin, then register the RepositoryAdminRepository from the previously mentioned package as a Repository service with the framework.
issueID:ARIES-73
type:Improvement
changed files:
texts:Replace the Aries site.css

issueID:ARIES-730
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionResourceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Grammar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionRangeAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/TypeAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
texts:Generation of the osgi.identity requirement must support version ranges.
An osgi.identity requirement is generated in order to retrieve resources from a Repository or Environment when, for example, provisioning content resources described in the Subsystem-Content or Deployed-Content manifest headers or transitive dependencies described in the Provision-Resource header. Because the Subsystem-Content header can include version ranges, the generation of the osgi.identity requirement must include support for converting a version range into a filter string.
Ideally, I would like to use the new org.osgi.framework.VersionRange class described in RFC 175 targeted for core 4.4. This also includes support for distinguishing between development and release versions. An implementation is currently available within the OSGi Git repository at https://www.osgi.org/members/git/build.git under remote topic branch hargrave/version.
issueID:ARIES-731
type:Bug
changed files:
texts:Apache Aries repo generation tool - transaction namespace handler missing
The Apache Aries repo generation tool cannot cope with the transaction and jpa namespace as the namespace handlers are missing from the environment.
issueID:ARIES-732
type:New Feature
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:The ability to exclude bundles from the archive while still having them listed in Application-Content header
Today, all bundles in the dependencies tag are automatically archived in the EBA + a reference to them is added to the Application-Content header.
We need the ability to exclude bundles from being archived in the eba while still having a reference for them in the Application-Content header.
Graham suggested:
"to have a single configuration of something like <archiveContent / > with values of 'none', 'applicationContent', 'all' ".
Even though we don't understand the "all" value.
issueID:ARIES-733
type:New Feature
changed files:eba-maven-plugin/src/main/java/org/apache/aries/plugin/eba/EbaMojo.java
texts:add Use-Bundle header to the APPLICATION.MF using maven-eba-plugin
want to add Use-Bundle header to the APPLICATION.MF using the pom.xml and it seems that it's not supported.
According the Graham Charters:
"It should be relatively easy to add a simple Use-Bundle capability to the eba-maven-plugin. It could be configured in the same way as the Application-Ex/ImportService headers. E.g
<configuration>
<instructions>
<Use-Bundle>org.acme.my.Bundle;version="[1.0.0, 1.1.0)"</Use-Bundle>
</instructions>
</configuration>
"
issueID:ARIES-734
type:Improvement
changed files:
texts:Back port improvements made to resolution error messages in OBR application resolver
At one point changes were made to OBR application resolver to return nice error messages describing the resolution problems. This is about porting these changes back to the 0.2-incubating branch.
issueID:ARIES-737
type:New Feature
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ResolutionDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ManifestVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ExportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Manifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/StartOrderDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DirectiveFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/HeaderFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleManifest.java
texts:Provide initial support for embedded subsystems.
Subsystems can include other subsystems as content. Operations on these embedded subsystems must be supported as part of operations performed on the parent subsystem.
issueID:ARIES-738
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
texts:[subsystems] The subsystem resolver hook modifies a collection it's iterating over.

issueID:ARIES-739
type:New Feature
changed files:subsystem/subsystem-api/src/main/java/org/osgi/service/repository/Repository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/package-info.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemManifest.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/Subsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ExportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/HeaderFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemConstants.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/ContentNamespace.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionResourceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiContentCapability.java
texts:[subsystems] Update code based on latest resource, resolver, repository, and subsystem APIs.
Here are some of the more noteworthy changes.
The resource API moved from org.osgi.framework.wiring to org.osgi.framework.resource.
The resolver API changed from resolve(Environment, Requirement...) : Map<Resource, List<Wire>> to resolve(Environment, Collection<Resource>, Collection<Resource>) : Map<Resource, List<Wire>>. The two collections represent mandatory and optional resources respectively.
A number of constants from SubsystemConstants were added or removed. Methods that rely on data from subsystem metadata are to throw IllegalStateExceptions if called before the metadata has been read.
issueID:ARIES-74
type:Improvement
changed files:blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/parser/Parser.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ParserServiceImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ParserService.java
texts:Extend Parser and ParserService to also accept an InputStream
The Parser today only accepts List<URL>, each of which it simply turns into InputStreams. There are occasions when we need to pass in an InputStream directly - for example, to parse in-memory data, or a blueprint xml file within a .jar file without having to extract it first.
I'm using the same JIRA to widen the ParserService interface to accept single URLs as well as List<URL> so as to simplify client code.
issueID:ARIES-742
type:Bug
changed files:
texts:Use released version of xbeans and openwebbeans since the SNAPSHOTs we use have disappeared
Currently for the EJB itests we use 1.1.1-SNAPSHOT of openwebbeans and 3.8-SNAPSHOT of xbeans. Both these versions have been released and the old snapshots we build against have disappeared. This makes it impossible to build the projects from a fresh maven repo.
Instead we should simply use the released versions
issueID:ARIES-743
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
texts:Subclass cannot be created by ProxySubclassGenerator when there is static final method
Using Jacoco as a JavaAgent to get coverage reports during the unit tests I get a FinalModifierException. Reason is that Jacoco appends the classes with a private static final function.
issueID:ARIES-745
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
texts:miss parsing default properties defined by new blueprint-ext 1.1.0 schema

issueID:ARIES-746
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyAbstractMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
texts:Aries Proxy fails to properly proxy Object methods for interfaces
If we generate a dynamic interface proxy using ASM then we don't properly proxy methods on Object (unless they are declared on one of the interfaces). We pass a null Method to the listener and we try to cast the returned object to a random one of its interfaces.
issueID:ARIES-748
type:New Feature
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:Update subsystems to use Equinox impl of org.osgi.service.resolver.Resolver
The initial API and implementation of the Equinox org.osgi.service.resolver (RFC 112) is available in the master branches of the rt.equinox.bundles and rt.equinox.framework git repositories. I updated subsystems to make use of it. Previously, a quick and dirty Resolver adaptor wrapped around the existing Felix OBR implementation was used. Note the subsystems impl uses a registered Resolver service, so making use of the Equinox resolver simply meant adding the bundle to the itests project. When Felix releases their implementation of org.osgi.service.resolver, the two will (hopefully) be interchangeable.
Using the Equinox resolver highlighted some shortcomings in the subsystems implementation, which were fixed and are listed below.
(1) Updated subsystem-itests to bring in the Equinox resolver.
(2) Updated SubsystemEnvironment to return all capabilities that match a requirement, even those from the root subsystem (i.e. from the system bundle and any other already installed bundles). Previously, Felix OBR had been automatically providing these via the Resolver adaptor since Felix OBR has a built-in system repository. However, for the RFC 112 resolver, the expectation is the Environment will provide everything.
(3) Fixed an issue where the resource -> subsystem relationship was not being established for resources in the root subsystem causing an NPE.
(4) The FelixRequirementAdaptor must strip out the "mandatory:<*" clause from the filter or InvalidSyntaxException occurs.
(5) OsgiIdentityRequirement now includes the filter directive.
(6) Added namespace translations to FelixResourceAdaptor.
issueID:ARIES-752
type:Test
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:Add test for shared feature resources and reference counting.

issueID:ARIES-755
type:Bug
changed files:
texts:org.apache.aries.jmx at search.maven.org has empty source jar
Here's the full URL:
http://search.maven.org/remotecontent?filepath=org/apache/aries/jmx/org.apache.aries.jmx/0.3/org.apache.aries.jmx-0.3-sources.jar
issueID:ARIES-759
type:Bug
changed files:
texts:Produce a repository generator zip for the Apache Aries download page

issueID:ARIES-76
type:New Feature
changed files:
texts:
Setting up build, API etc.
issueID:ARIES-760
type:Bug
changed files:
texts:SharedBundleFrameworkConfiguration overwrites configuration
It is possible to register a BundleFrameworkConfigurationFactory that will be used by the SharedBundleFramework to obtain a BundleFrameworkConfiguration object which is wrapped by the SharedBundleFrameworkConfiguration. However, the SharedBundleFrameworkConfiguration wrapper always overwrites the Import-Package manifest entry. If I have gone through the process of registering my own BundleFrameworkConfigurationFactory and providing custom BundleFrameworkConfiguration the SharedBundleFrameworkConfiguration should respect that.
issueID:ARIES-761
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
texts:Incorrect documentation on RecursiveBundleTracker constructor
The API docs for the RecursiveBundleTracker constructor state that the stateMask:
stateMask - - The bit mask of the ORing of the bundle states to be tracked. The mask must contain the flags Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING as a minimum.
but you also must have the Bundle.RESOLVED state as well.
issueID:ARIES-762
type:Bug
changed files:
texts:Bundle framework manager bean should be lazy
The bundle-framework-management.xml does not mark the equinox-bundle-framework-manager lazy, so the shared bundle frameworks are created too early. This intermittently prevents customized services from registering ahead of the aries defaults.
issueID:ARIES-763
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionRangeAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
texts:Remove OSGi VersionRange dependency.
Currently, Subsystems has a dependency on the new OSGi VersionRange class introduced by RFC 175. Although an implementation of this class exists at OSGi, there are no publicly available distributions of framework implementations that contain it.
issueID:ARIES-764
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/Utils.java
texts:JNDI can go into an infinite loop
When navigating the class loader hierarchy if a bundle class loader is found for a bundle that is not yet active then the jndi code loops forever until the bundle is started. Instead we should attempt to start it and if it fails we stop looking and if it works we keep going.
issueID:ARIES-765
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableReferenceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedReferenceMetadata.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/ReferenceMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/Voidable.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Attempting to execute an operation on a closed EntityManagerFactory when the persistence unit is re-deployed
We use the JPA entities in the following way:
entities1.jar
entities2.jar
pu.jar
The first two contains entity classes but no persistence unit, the third contains the Meta-Persistence header and a persistence.xml file (named to something else not to be realized by Glassfish)
We use the persistence unit with blueprint.
When we re-deploy the pu.jar we have to re-deploy everything else (even the jars that do contain only services that are related to unchanged entity classes) manually as the following exception occurs:
java.lang.IllegalStateException: Attempting to execute an operation on a closed EntityManagerFactory.
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.verifyOpen(EntityManagerFactoryDelegate.java:305)
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.createEntityManagerImpl(EntityManagerFactoryDelegate.java:276)
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.createEntityManagerImpl(EntityManagerFactoryImpl.java:290)
at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:275)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:71)
at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:132)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:87)
at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getCriteriaBuilder(JTAEntityManager.java:391)
It would be nice if JTAEntityManager would realize when the persistence unit gets redeployed and would use the new instance.
issueID:ARIES-767
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AbstractProxyManager.java
texts:Service property assigned with a service reference gets a ServiceProxyWrapper
When defining a service property with a reference as a value, the property is assigned with a ServiceProxyWrapper (inner class of ReferenceRecipe).
Here is the way it is defined:
<service ref="..." interface="...">
<service-properties>
<entry key="Property1">
<ref component-id="serviceRef"/>
</entry>
</service-properties>
</service>
<reference id="serviceRef" interface="A" />
I would have expected the service property "Property1" to be assigned with an instance of "A" instead of a ServiceProxyWrapper. However I could get the instance of "A" by calling the method 'convert' and passing a ReifiedType.
issueID:ARIES-768
type:Bug
changed files:application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextImpl.java
texts:Application manager can take 5 minutes to shutdown
I thought I had fixed this, but it seems that the application manager can still take 5 minutes to shutdown. The stack trace is:
at java.lang.Object.wait(Native Method)
at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:172)
at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:50)
at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:227)
at Proxy76916cc6_8687_48e9_934d_a5102df76a23.uninstallBundle(Unknown Source)
at org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl.uninstall(ApplicationContextImpl.java:148)
at org.apache.aries.application.runtime.isolated.impl.ApplicationContextManagerImpl.close(ApplicationContextManagerImpl.java:159)
this is waiting for a replacement for the BundleFrameworkManager which never comes. I added a bind/unbind reference listener to do this as the framework was shutting down, but it turns out that we still try to call it during close. So I've updated the close method to only uninstall if it isn't already uninstalled. This should fix the 5 minute issue.
issueID:ARIES-769
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
texts:ClassCastException during JNDI lookup from WAB inside EBA
I was trying to perform a JNDI lookup from a WAB inside an EBA and I hit this problem.
java.lang.ClassCastException: org.eclipse.osgi.internal.serviceregistry.ServiceReferenceImpl incompatible with org.eclipse.osgi.internal.serviceregistry.ServiceReferenceImpl
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:594)
at org.apache.aries.jndi.Utils$4.run(Utils.java:197)
at java.security.AccessController.doPrivileged(AccessController.java:202)
at org.apache.aries.jndi.Utils.getServicePrivileged(Utils.java:195)
at org.apache.aries.jndi.ContextHelper.getInitialContextUsingBuilder(ContextHelper.java:206)
at org.apache.aries.jndi.ContextHelper.getContextProvider(ContextHelper.java:140)
at org.apache.aries.jndi.ContextHelper.getInitialContext(ContextHelper.java:118)
at org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.getInitialContext(OSGiInitialContextFactoryBuilder.java:49)
at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:225)
at javax.naming.InitialContext.initializeDefaultInitCtx(InitialContext.java:318)
at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:348)
at javax.naming.InitialContext.getURLOrDefaultInitCtx(InitialContext.java:411)
at javax.naming.InitialContext.lookup(InitialContext.java:436)
issueID:ARIES-770
type:Bug
changed files:application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/config/BundleFrameworkConfigurationFactoryImpl.java
texts:BundleFrameworkConfigurationFactoryImpl breaks LDAP syntax of service Filter
The CompositeServiceFilter-Import header represents an OSGi service filter and therefore needs to use LDAP syntax. The code in the BundleFrameworkConfigurationFactoryImpl loops through the Collection<Filter> from the metadata.getDeployedServiceImport() using a "," to separate the Filter entries.
This causes InvalidSyntaxExceptions if anyone tries to use the header to create the Filter.
issueID:ARIES-771
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ServiceListener.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
texts:Blueprint config admin pulls in non-exported blueprint internals
Blueprint config admin pulls in more packages than it should, and some are broken as a result, we should try to break some of these dependencies, and generally fix things up.
issueID:ARIES-773
type:New Feature
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
application/application-runtime-framework-management/src/main/java/org/apache/aries/application/runtime/framework/management/SharedBundleFramework.java
application/application-resolve-transform-cm/src/main/java/org/apache/aries/application/resolve/transform/cm/ConfigurationPostResolveTransformerImpl.java
application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Usage of a Configuration Admin service within an isolated application framework
Problem Summary:
Currently there is no consistent way for consuming a Configuration Admin service from an isolated application framework. The following content summarises the problems a developer would face with Aries if the Configuration Admin service is essential to their application:
Blueprint
The isolation boundaries are slightly marred by the current Aries Blueprint CM implementation. The underlying CM namespace handler that is registered by Blueprint is wired with a Configuration Admin service that resides in the root framework. The Configuration Admin service is then subsequently used for any Blueprint bundles requiring configuration (including bundles from an isolated framework).
The compendium specification stipulates that when a Blueprint bundle is being installed/updated the Blueprint container should delegate service registrations through the Blueprint bundle context. From a configuration perspective, if the bundle that is being managed resides in an isolated framework then this creates a service visibility problem (the bundle context will reference the isolated service registry).
Consider as an example the runtime usage of a Property-Placeholder for an isolated Blueprint bundle. Within the Blueprint CM container mechanics, the Configuration Admin service (provided by the CM namespace handler) will be used to fetch an existing configuration for the supplied PID, a Managed Service will then be exposed (bound to the PID) as a hook for further configuration updates. If any configuration updates should occur for the PID the associated Managed Service exposed in the isolated application framework will never be "seen" by the Configuration Admin service in the root framework for it to notify.
Manual
Much like the Blueprint issue mentioned above, if a bundle within an isolated application framework requires the use of the existing Configuration Admin service and needs to expose a Managed Service for future updates there is currently no way to do this.
issueID:ARIES-774
type:Bug
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
texts:Problem modelling nested bundles
There's a small problem in ModelledResourceManagerImpl.findBlueprint() that prevents blueprints in nested bundles being modelled correctly.
issueID:ARIES-775
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/ConstructorFinder.java
texts:ClassCircularityError while weaving a class
Stack Dump = java.lang.ClassCircularityError: <snip>
at java.lang.Class.getDeclaredConstructors0(Native Method)
at java.lang.Class.privateGetDeclaredConstructors(Class.java:2389)
at java.lang.Class.getConstructor0(Class.java:2699)
at java.lang.Class.getDeclaredConstructor(Class.java:1985)
at org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.visit(AbstractWovenProxyAdapter.java:245)
at org.objectweb.asm.ClassAdapter.visit(Unknown Source)
at org.objectweb.asm.commons.SerialVersionUIDAdder.visit(Unknown Source)
at org.objectweb.asm.ClassReader.accept(Unknown Source)
at org.objectweb.asm.ClassReader.accept(Unknown Source)
at org.apache.aries.proxy.impl.weaving.WovenProxyGenerator.getWovenProxy(WovenProxyGenerator.java:52)
at org.apache.aries.proxy.impl.weaving.ProxyWeavingHook.weave(ProxyWeavingHook.java:63)
at org.eclipse.osgi.internal.baseadaptor.weaving.WovenClassImpl.call(WovenClassImpl.java:129)
issueID:ARIES-776
type:Bug
changed files:util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
texts:NPEs in AriesFrameworkUtil and DefaultWorker static initializers
Working on getting some tests together using pojosr but the following exception prevented some services from starting properly:
Running org.fusesource.fabric.service.FabricServiceImplTest
ERROR | Blueprint Extender: 2 | Unable to start blueprint container for bundle org.apache.karaf.admin.management
org.osgi.service.blueprint.container.ComponentDefinitionException: java.lang.ExceptionInInitializerError
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:98)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:640)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:331)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.ExceptionInInitializerError
at org.apache.aries.proxy.impl.AbstractProxyManager.getClassLoader(AbstractProxyManager.java:93)
at org.apache.aries.proxy.impl.JdkProxyManager.createNewProxy(JdkProxyManager.java:32)
at org.apache.aries.proxy.impl.AbstractProxyManager.createProxy(AbstractProxyManager.java:50)
at org.apache.aries.proxy.impl.AbstractProxyManager.createProxy(AbstractProxyManager.java:39)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:236)
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:82)
... 14 more
Caused by: java.lang.NullPointerException
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:34)
... 20 more
Avoiding the above NPE in AriesFrameworkUtil yielded a second NPE in DefaultWorker's static initializer:
ERROR | Blueprint Extender: 3 | Unable to start blueprint container for bundle org.apache.karaf.admin.management
org.osgi.service.blueprint.container.ComponentDefinitionException: java.lang.ExceptionInInitializerError
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:100)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:71)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:79)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:220)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:154)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:630)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:326)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:228)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.ExceptionInInitializerError
at org.apache.aries.util.AriesFrameworkUtil.<clinit>(AriesFrameworkUtil.java:44)
at org.apache.aries.proxy.impl.AbstractProxyManager.getClassLoader(AbstractProxyManager.java:130)
at org.apache.aries.proxy.impl.JdkProxyManager.createNewProxy(JdkProxyManager.java:36)
at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:75)
at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingProxy(AbstractProxyManager.java:40)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:237)
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:84)
... 18 more
Caused by: java.lang.NullPointerException
at org.apache.aries.util.internal.DefaultWorker.<clinit>(DefaultWorker.java:42)
... 25 more
Avoiding this NPE allows me to get a valid service reference from the pojosr registry for the service I want to test, so I'm attaching a patch for review, would be good to avoid these NPEs in any case since it's not obvious what's wrong when they occur.
issueID:ARIES-777
type:Bug
changed files:util/src/main/java/org/apache/aries/util/filesystem/IFile.java
util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
util/src/main/java/org/apache/aries/util/filesystem/IDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/ICloseableDirectory.java
util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
util/src/main/java/org/apache/aries/util/tracker/InternalRecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
util/src/main/java/org/apache/aries/util/filesystem/FileUtils.java
util/src/main/java/org/apache/aries/util/tracker/BundleTrackerFactory.java
util/src/main/java/org/apache/aries/util/io/IOUtils.java
util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
util/src/main/java/org/apache/aries/util/internal/EquinoxWorker.java
util/src/main/java/org/apache/aries/util/filesystem/impl/InputStreamClosableDirectory.java
util/src/main/java/org/apache/aries/util/io/RememberingInputStream.java
util/src/main/java/org/apache/aries/util/FragmentBuilder.java
util/src/main/java/org/apache/aries/util/internal/FelixWorker.java
util/src/main/java/org/apache/aries/util/internal/MessageUtil.java
util/src/main/java/org/apache/aries/util/internal/FrameworkUtilWorker.java
util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/manifest/Constants.java
util/src/main/java/org/apache/aries/util/filesystem/FileSystem.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileSystemImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java
util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
util/src/main/java/org/apache/aries/util/manifest/BundleManifest.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipCloseableDirectory.java
util/src/main/java/org/apache/aries/util/ManifestHeaderUtils.java
util/src/main/java/org/apache/aries/util/nls/MessageUtil.java
util/src/main/java/org/apache/aries/util/service/registry/ServicePair.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedCloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
util/src/main/java/org/apache/aries/util/VersionRange.java
util/src/main/java/org/apache/aries/util/internal/R43Worker.java
texts:AriesFrameworkUtil FelixWorker doesn't work on r4.3 felixes
List<BundleRevision> revisions = b.adapt(BundleRevisions.class).getRevisions();
if (!revisions.isEmpty())
{ BundleRevision revision = revisions.get(0); return ((BundleRevisionImpl)revision).getProtectionDomain().getClassLoader(); }
issueID:ARIES-778
type:Bug
changed files:util/src/main/java/org/apache/aries/util/filesystem/IFile.java
util/src/main/java/org/apache/aries/util/internal/BundleToClassLoaderAdapter.java
util/src/main/java/org/apache/aries/util/filesystem/IDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/ICloseableDirectory.java
util/src/main/java/org/apache/aries/util/tracker/SingleServiceTracker.java
util/src/main/java/org/apache/aries/util/tracker/InternalRecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipFile.java
util/src/main/java/org/apache/aries/util/filesystem/FileUtils.java
util/src/main/java/org/apache/aries/util/tracker/BundleTrackerFactory.java
util/src/main/java/org/apache/aries/util/io/IOUtils.java
util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
util/src/main/java/org/apache/aries/util/internal/EquinoxWorker.java
util/src/main/java/org/apache/aries/util/filesystem/impl/InputStreamClosableDirectory.java
util/src/main/java/org/apache/aries/util/io/RememberingInputStream.java
util/src/main/java/org/apache/aries/util/FragmentBuilder.java
util/src/main/java/org/apache/aries/util/internal/FelixWorker.java
util/src/main/java/org/apache/aries/util/internal/MessageUtil.java
util/src/main/java/org/apache/aries/util/internal/FrameworkUtilWorker.java
util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedZipDirectory.java
util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/manifest/Constants.java
util/src/main/java/org/apache/aries/util/filesystem/FileSystem.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileSystemImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java
util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
util/src/main/java/org/apache/aries/util/manifest/BundleManifest.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipCloseableDirectory.java
util/src/main/java/org/apache/aries/util/ManifestHeaderUtils.java
util/src/main/java/org/apache/aries/util/nls/MessageUtil.java
util/src/main/java/org/apache/aries/util/service/registry/ServicePair.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/NestedCloseableDirectory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/CloseableDirectory.java
util/src/main/java/org/apache/aries/util/VersionRange.java
util/src/main/java/org/apache/aries/util/internal/R43Worker.java
texts:RecursiveBundleTracker doesn't work across isolated Regions
RecursiveBundleTracker only works on isolation-free frameworks or with the obsolete and never-official equinox composite bundles. In order for extenders such as the BlueprintExtender to work with isolation we need a way to track all bundles, not just ones in the same isolation unit.
One easy way to implement this is to install a bundle event hook and use it to drive a bundle tracker.
issueID:ARIES-779
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PlaceholdersUtils.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/PropertyPlaceholder.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmPropertyPlaceholder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
texts:AbstractPropertyPlaceHolder should be exported by blueprint-core

issueID:ARIES-780
type:Question
changed files:
texts:problem getting mp3spi working with dynamic/static weaving
I'm trying to build a modular player for sites like jamendo. The problem is that the streaming format is in mp3 (or ogg sometimes). The librarys providing such support try to use the SPI mechanism of the JRE which is a problem in OSGi environments.
So i'm really happy that this is adressed with SPI Fly - but its somehow not working for me.
I tried the dynamic weaving:
added the asm bundle and the spi fly dynamic weaving bundle in the "bundle" dir of apache felix (works fine, lb shows me that both bundles are running)
ID|State |Level|Name
0|Active | 0|System Bundle (4.0.1)
1|Active | 1|ASM all classes (3.2.0)
2|Active | 1|json simple OSGi Bundle (1.0.0.SNAPSHOT)
3|Active | 1|Mp3Wrapper OSGi Bundle (1.0.0.SNAPSHOT)
4|Active | 1|Apache Aries SPI Fly Dynamic Weaving Bundle (0.4.0.SNAPSHOT)
the mp3wrapper contains the spi providers (mp3spi, tritounus share etc. for playing mp3 files - they replace AudioInputStream and some others), so i added in the MANIFEST.MF in mp3wrapper the following header:
SPI-Provider: *
the consumer is my playerengine bundle which contains the following line in its manifest:
SPI-Consumer: *
when i start the OSGi container i get the following:
[BROWSER]: Standard Gui (Browser) registered.
@@@ 1: <init>#()V#null~null
183: java/lang/Object#<init>#()V
@@@ 1: start#(Lorg/osgi/framework/BundleContext;)V#null~[java/lang/Exception]
183: org/dyndns/soundi/soundboxplayerengine/DefaultPlayerEngine#<init>#(Lorg/osgi/framework/BundleContext;)V
182: org/dyndns/soundi/portals/interfaces/CommunicationAction#toString#()Ljava/lang/String;
182: org/dyndns/soundi/portals/interfaces/CommunicationAction#toString#()Ljava/lang/String;
183: java/util/Hashtable#<init>#()V
182: java/util/Dictionary#put#(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
182: java/lang/Class#getName#()Ljava/lang/String;
182: java/lang/Class#getName#()Ljava/lang/String;
185: org/osgi/framework/BundleContext#registerService#([Ljava/lang/String;Ljava/lang/Object;Ljava/util/Dictionary;)L
org/osgi/framework/ServiceRegistration;
184: org/dyndns/soundi/utils/Util#sendMessage#(Lorg/dyndns/soundi/utils/Util$Component;Ljava/lang/String;)V
@@@ 1: stop#(Lorg/osgi/framework/BundleContext;)V#null~[java/lang/Exception]
@@@ 0: <init>#(Lorg/osgi/framework/BundleContext;)V#null~null
183: java/lang/Object#<init>#()V
@@@ 1: play#(Ljava/io/InputStream;Lorg/dyndns/soundi/portals/interfaces/Song;)V#null~null
184: javax/sound/sampled/AudioSystem#getAudioFileTypes#()[Ljavax/sound/sampled/AudioFileFormat$Type;
182: javax/sound/sampled/AudioFileFormat$Type#getExtension#()Ljava/lang/String;
182: java/io/PrintStream#println#(Ljava/lang/String;)V
183: java/io/BufferedInputStream#<init>#(Ljava/io/InputStream;)V
184: javax/sound/sampled/AudioSystem#getAudioInputStream#(Ljava/io/InputStream;)Ljavax/sound/sampled/AudioInputStrea
m;
182: java/lang/Class#getName#()Ljava/lang/String;
184: java/util/logging/Logger#getLogger#(Ljava/lang/String;)Ljava/util/logging/Logger;
182: java/util/logging/Logger#log#(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
182: java/lang/Class#getName#()Ljava/lang/String;
184: java/util/logging/Logger#getLogger#(Ljava/lang/String;)Ljava/util/logging/Logger;
182: java/util/logging/Logger#log#(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
182: javax/sound/sampled/AudioInputStream#getFormat#()Ljavax/sound/sampled/AudioFormat;
182: javax/sound/sampled/AudioFormat#getSampleRate#()F
182: javax/sound/sampled/AudioFormat#getChannels#()I
182: javax/sound/sampled/AudioFormat#getChannels#()I
182: javax/sound/sampled/AudioFormat#getSampleRate#()F
183: javax/sound/sampled/AudioFormat#<init>#(Ljavax/sound/sampled/AudioFormat$Encoding;FIIIFZ)V
184: javax/sound/sampled/AudioSystem#getAudioInputStream#(Ljavax/sound/sampled/AudioFormat;Ljavax/sound/sampled/Audi
oInputStream;)Ljavax/sound/sampled/AudioInputStream;
183: org/dyndns/soundi/soundboxplayerengine/DefaultPlayerEngine#rawplay#(Ljavax/sound/sampled/AudioFormat;Ljavax/sou
nd/sampled/AudioInputStream;Lorg/dyndns/soundi/portals/interfaces/Song;)V
@@@ 1: pause#()V#null~null
@@@ 1: stop#()V#null~null
@@@ 1: handleEvent#(Lorg/osgi/service/event/Event;)V#null~null
@@@ 2: rawplay#(Ljavax/sound/sampled/AudioFormat;Ljavax/sound/sampled/AudioInputStream;Lorg/dyndns/soundi/portals/interf
aces/Song;)V#null~null
183: org/dyndns/soundi/soundboxplayerengine/DefaultPlayerEngine#getLine#(Ljavax/sound/sampled/AudioFormat;)Ljavax/so
und/sampled/SourceDataLine;
185: javax/sound/sampled/SourceDataLine#start#()V
185: javazoom/spi/PropertiesContainer#properties#()Ljava/util/Map;
185: java/util/Map#get#(Ljava/lang/Object;)Ljava/lang/Object;
182: java/lang/Long#longValue#()J
185: java/util/Map#get#(Ljava/lang/Object;)Ljava/lang/Object;
182: java/lang/Long#longValue#()J
182: javax/sound/sampled/AudioInputStream#read#([BII)I
185: javax/sound/sampled/SourceDataLine#write#([BII)I
185: javax/sound/sampled/SourceDataLine#drain#()V
185: javax/sound/sampled/SourceDataLine#stop#()V
185: javax/sound/sampled/SourceDataLine#close#()V
182: java/lang/Exception#printStackTrace#()V
@@@ 2: getLine#(Ljavax/sound/sampled/AudioFormat;)Ljavax/sound/sampled/SourceDataLine;#null~[javax/sound/sampled/LineUna
vailableException]
183: javax/sound/sampled/DataLine$Info#<init>#(Ljava/lang/Class;Ljavax/sound/sampled/AudioFormat;)V
184: javax/sound/sampled/AudioSystem#getLine#(Ljavax/sound/sampled/Line$Info;)Ljavax/sound/sampled/Line;
185: javax/sound/sampled/SourceDataLine#open#(Ljavax/sound/sampled/AudioFormat;)V
[PLAYERENGINE]: Default player engine registered!
so it does something, but it looks like errors. I got a reply that this is just debugging output and the functionality should work.
But it does not. I wrote a little test in my playerengine bundle:
Type[] audioFileTypes = AudioSystem.getAudioFileTypes();
for(Type a : audioFileTypes)
{ System.out.println(a.getExtension()); }
if it would work, there should be:
wav (provided by JRE)
au (provided by JRE)
aif (provided by JRE)
mp3 (provided by mp3spi)
but the last one is missing, i cannot play mp3s, i get an exception:
13.11.2011 09:23:05 org.dyndns.soundi.soundboxplayerengine.DefaultPlayerEngine play
SCHWERWIEGEND: null
javax.sound.sampled.UnsupportedAudioFileException: could not get audio input stream from input stream
at javax.sound.sampled.AudioSystem.getAudioInputStream(Unknown Source)
at org.dyndns.soundi.soundboxplayerengine.DefaultPlayerEngine.play(DefaultPlayerEngine.java:47)
at org.dyndns.soundi.soundbox.core.gui.PlayerFrame.play(PlayerFrame.java:217)
at org.dyndns.soundi.soundbox.core.gui.PlayerFrame.handleEvent(PlayerFrame.java:194)
at org.apache.felix.eventadmin.impl.tasks.HandlerTaskImpl.execute(HandlerTaskImpl.java:88)
maybe this is a bug? i'm not familiar with bytecode so i can't help nor go deeper and check whats going on
the complete framework with my bundles and asm/dynamic weaving (running example) can be downloaded here (2.3mb):
http://download.origo.ethz.ch/soundbox/3349/felix-framework-4.0.1.7z
thanks in advance
edit:
to run the application:
1) java -jar bin\felix.jar
then 2 windows should open
wait a little bit until "Jamendo plugin initialized" appears
2) now go the textfield where "Enter a keyword..." stands
enter something like "dire" and click on the "go" button
there should appear a list of songs in the table
3) click one so that it is marked and hit the button "add to player"
"add to player" tries to start the playback - the dynamic weaving happens and the exception will be thrown
issueID:ARIES-782
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgent.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentContext.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
texts:AbstractCompendiumHandler uses ServiceTracker.getTrackingCount in the wrong way
The problem is that getTrackingCount really is a counter for the service changes and is incremented on each service event. As such this counter cannot be used to get the number of tracked services.
issueID:ARIES-783
type:Bug
changed files:
texts:Jmx connection to IBM Websphere server fails when aries installed on equinox (without aries works fine)
Hi,
We are trying to connect to Websphere JMX MBean server and get the following exception (see below).
We are trying to initialize the connection using the attached bean via blueprint definition.
The attached code works fine if we run it on top of equinox without Aries bundles (only a bundle containing this bean + ibm jars are installed).
See below:
1. Bean with Connection Code
2. Installed bundles on environment and Application Bundle description
3. bundle containing IBM connectivity jars (ibm-orb and ws-admin-client)
4. Exception on startup
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Hashtable;
import java.util.Set;
import javax.management.MBeanServerConnection;
import javax.management.ObjectName;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import javax.naming.Context;
import org.osgi.framework.BundleContext;
public class TestConnection {
private static final String COM_IBM_WEBSPHERE_NAMING_NAME_SYNTAX = "com.ibm.websphere.naming.name.syntax";
//private static final String WEBSPHERE_PROTOCOL_PROVIDER_PACKAGES = "com.ibm.ws.naming";
private static final String WEBSPHERE_PROTOCOL_PROVIDER_PACKAGES = "com.ibm.websphere.management.remote";
private static final String WEBSPHERE_INITIAL_CONTEXT_FACTORY = "com.ibm.websphere.naming.WsnInitialContextFactory";
private static final String WAS_JMX_SERVICE_URL_PREFIX = "service:jmx:iiop://";
private static final String WAS_JMX_SERVICE_URL_SUFFIX = "/jndi/JMXConnector";
private BundleContext context = null;
public void init() throws Exception
{ System.out.println("--------------- iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii -"); Thread.currentThread().setContextClassLoader(TestConnection.class.getClassLoader()); String address = "172.16.252.33"; JMXConnector conn = null; JMXServiceURL jmxurl = null; jmxurl = new JMXServiceURL(WAS_JMX_SERVICE_URL_PREFIX + address + WAS_JMX_SERVICE_URL_SUFFIX); Hashtable<String, Object> parameters = new Hashtable<String, Object>(); parameters.put(Context.INITIAL_CONTEXT_FACTORY, WEBSPHERE_INITIAL_CONTEXT_FACTORY); parameters.put(javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_PACKAGES, WEBSPHERE_PROTOCOL_PROVIDER_PACKAGES); String providerUrl = "corbaloc:iiop:" + address + "/WsnAdminNameService"; parameters.put(Context.PROVIDER_URL, providerUrl); parameters.put("osgi.service.jndi.bundleContext", context); parameters.put(COM_IBM_WEBSPHERE_NAMING_NAME_SYNTAX, "ins"); conn = JMXConnectorFactory.connect(jmxurl, parameters); <<===== FAILS HERE MBeanServerConnection mbsconn = conn.getMBeanServerConnection(); Set set = mbsconn.queryMBeans(new ObjectName("*:name=*,*"), null); System.out.println(set.size()); System.out.println("Success! conn: " + conn); }
public void setContext(BundleContext context)
{ this.context = context; }
public BundleContext getContext()
{ return context; }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
id State Bundle
0 ACTIVE org.eclipse.osgi_3.5.0.v20090520
114 ACTIVE com.springsource.org.apache.commons.collections_3.2.1
115 ACTIVE org.ops4j.pax.logging.pax-logging-service_1.4.0
116 ACTIVE org.apache.commons.pool_1.5.4
118 ACTIVE org.apache.commons.lang_2.5.0
119 ACTIVE com.springsource.org.aopalliance_1.0.0
120 ACTIVE com.springsource.org.apache.commons.logging_1.1.1
121 ACTIVE org.ops4j.pax.logging.pax-logging-api_1.4.0
122 ACTIVE org.apache.felix.fileinstall_3.1.4
126 ACTIVE org.apache.felix.configadmin_1.2.4
127 ACTIVE org.objectweb.asm.all_3.2.0
133 ACTIVE com.att.tlv.infra.ibm.client.ibm-client_7.0.0
134 ACTIVE org.apache.aries.proxy_0.4.0.SNAPSHOT
135 ACTIVE org.apache.aries.util_0.4.0.SNAPSHOT
137 ACTIVE jmx-test-plain-bundle_1.0.0.qualifier
138 ACTIVE org.apache.aries.blueprint_0.3.2.SNAPSHOT
140 ACTIVE org.apache.aries.jndi_0.3.1.SNAPSHOT
osgi> bundle 137
jmx-test-plain-bundle_1.0.0.qualifier [137]
Id=137, Status=ACTIVE Data Root=D:\Dev\java\workspaces\infra-3.1.5\.metadata\.plugins\org.eclipse.pde.core\osgi\org.eclipse.osgi\bundles\137\data
No registered services.
No services in use.
Exported packages
jmx_test_plain_bundle; version="0.0.0"[exported]
Imported packages
org.osgi.framework; version="1.5.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
com.ibm.websphere.naming; version="7.0.0"<com.att.tlv.infra.ibm.client.ibm-client_7.0.0 [133]>
com.ibm.websphere.management.remote; version="7.0.0"<com.att.tlv.infra.ibm.client.ibm-client_7.0.0 [133]>
No fragment bundles
Named class space
jmx-test-plain-bundle; bundle-version="1.0.0.qualifier"[provided]
No required bundles
osgi> bundle 133
com.att.tlv.infra.ibm.client.ibm-client_7.0.0 [133]
Id=133, Status=ACTIVE Data Root=D:\Dev\java\workspaces\infra-3.1.5\.metadata\.plugins\org.eclipse.pde.core\osgi\org.eclipse.osgi\bundles\133\data
No registered services.
No services in use.
Exported packages
com.ibm.websphere.management.remote; version="7.0.0"[exported]
org.omg.CORBA; version="7.0.0"[exported]
com.ibm.websphere.naming; version="7.0.0"[exported]
com.ibm.ws.naming.corbaloc; version="7.0.0"[exported]
com.ibm.ws.naming.corbaname; version="7.0.0"[exported]
com.ibm.ws.naming.distcos; version="7.0.0"[exported]
com.ibm.ws.naming.iiop; version="7.0.0"[exported]
com.ibm.ws.naming.ipbase; version="7.0.0"[exported]
com.ibm.ws.naming.java; version="7.0.0"[exported]
com.ibm.ws.naming.jbatch; version="7.0.0"[exported]
com.ibm.ws.naming.jcache; version="7.0.0"[exported]
com.ibm.ws.naming.jndicos; version="7.0.0"[exported]
com.ibm.ws.naming.ldap; version="7.0.0"[exported]
com.ibm.ws.naming.urlbase; version="7.0.0"[exported]
com.ibm.ws.naming.urlns; version="7.0.0"[exported]
com.ibm.ws.naming.util; version="7.0.0"[exported]
Imported packages
javax.crypto; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.crypto.spec; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.jws; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.naming; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.naming.directory; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.naming.spi; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.net; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.net.ssl; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.rmi; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.auth; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.auth.callback; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.auth.kerberos; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.auth.login; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.auth.spi; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.auth.x500; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.cert; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.security.sasl; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.sql; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.swing; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.swing.border; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.swing.event; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.swing.plaf.basic; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.swing.table; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.swing.text; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.bind; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.bind.annotation; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.bind.annotation.adapters; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.namespace; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.parsers; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.soap; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.stream; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.transform; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.transform.dom; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.transform.sax; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.transform.stream; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.validation; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.ws; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
javax.xml.xpath; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.eclipse.osgi.framework.adaptor; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.eclipse.osgi.framework.log; version="1.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.eclipse.osgi.service.datalocation; version="1.2.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.ietf.jgss; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.osgi.util.tracker; version="1.4.2"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.w3c.dom; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.w3c.dom.stylesheets; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.w3c.dom.traversal; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.xml.sax; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.xml.sax.ext; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
org.xml.sax.helpers; version="0.0.0"<org.eclipse.osgi_3.5.0.v20090520 [0]>
No fragment bundles
Named class space
com.att.tlv.infra.ibm.client.ibm-client; bundle-version="7.0.0"[provided]
No required bundles
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
osgi> [Framework Event Dispatcher] DEBUG org.ops4j.pax.logging.pax-logging-service - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG org.apache.commons.pool - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG org.apache.commons.lang - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG com.springsource.org.aopalliance - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG com.springsource.org.apache.commons.logging - BundleEvent STARTED
[Start Level Event Dispatcher] INFO org.ops4j.pax.logging.internal.Activator - Enabling SLF4J API support.
[Start Level Event Dispatcher] INFO org.ops4j.pax.logging.internal.Activator - Enabling Jakarta Commons Logging API support.
[Start Level Event Dispatcher] INFO org.ops4j.pax.logging.internal.Activator - Enabling Log4J API support.
[Start Level Event Dispatcher] INFO org.ops4j.pax.logging.internal.Activator - Enabling Avalon Logger API support.
[Start Level Event Dispatcher] INFO org.ops4j.pax.logging.internal.Activator - Enabling JULI Logger API support.
[Framework Event Dispatcher] DEBUG org.ops4j.pax.logging.pax-logging-api - BundleEvent STARTED
[Start Level Event Dispatcher] DEBUG org.apache.felix.fileinstall - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.felix.fileinstall - ServiceEvent REGISTERED
[Framework Event Dispatcher] DEBUG org.apache.felix.fileinstall - BundleEvent STARTED
[Start Level Event Dispatcher] DEBUG org.apache.felix.configadmin - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.felix.configadmin - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.felix.fileinstall - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.felix.configadmin - Scheduling task ManagedService Update: pid=org.ops4j.pax.logging
[Configuration Updater] DEBUG org.apache.felix.configadmin - Running task ManagedService Update: pid=org.ops4j.pax.logging
[Start Level Event Dispatcher] DEBUG org.apache.felix.configadmin - Scheduling task ManagedServiceFactory Update: factoryPid=org.apache.felix.fileinstall
[Configuration Updater] DEBUG org.apache.felix.configadmin - Running task ManagedServiceFactory Update: factoryPid=org.apache.felix.fileinstall
[Framework Event Dispatcher] DEBUG org.apache.felix.configadmin - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG org.objectweb.asm.all - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG com.att.tlv.infra.ibm.client.ibm-client - BundleEvent STARTED
[Start Level Event Dispatcher] DEBUG org.apache.aries.proxy - ServiceEvent REGISTERED
[Framework Event Dispatcher] DEBUG org.apache.aries.proxy - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG org.apache.aries.util - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG jmx-test-plain-bundle - BundleEvent STARTED
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Starting blueprint extender...
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintEventDispatcher - EventAdmin package is not available, just don't use it
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Found ProxyManager service, starting to process blueprint bundles
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.eclipse.osgi for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.eclipse.osgi
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle com.springsource.org.apache.commons.collections for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle com.springsource.org.apache.commons.collections
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.ops4j.pax.logging.pax-logging-service for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.ops4j.pax.logging.pax-logging-service
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.commons.pool for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.apache.commons.pool
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.commons.lang for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.apache.commons.lang
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle com.springsource.org.aopalliance for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle com.springsource.org.aopalliance
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle com.springsource.org.apache.commons.logging for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle com.springsource.org.apache.commons.logging
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.ops4j.pax.logging.pax-logging-api for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.ops4j.pax.logging.pax-logging-api
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.felix.fileinstall for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.apache.felix.fileinstall
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.felix.configadmin for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.apache.felix.configadmin
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.objectweb.asm.all for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.objectweb.asm.all
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle com.att.tlv.infra.ibm.client.ibm-client for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle com.att.tlv.infra.ibm.client.ibm-client
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.aries.proxy for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.apache.aries.proxy
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.aries.util for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.apache.aries.util
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle jmx-test-plain-bundle for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Found blueprint application in bundle jmx-test-plain-bundle with paths: [bundleentry://137.fwk29115481/OSGI-INF/blueprint/blueprint.xml]
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scheduling creation of blueprint bundle jmx-test-plain-bundle asynchronously
[Blueprint Extender: 1] DEBUG org.apache.aries.blueprint.container.BlueprintContainerImpl - Running blueprint container for bundle jmx-test-plain-bundle in state Unknown
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint - ServiceEvent REGISTERED
[Blueprint Extender: 1] DEBUG org.apache.aries.blueprint.container.BlueprintEventDispatcher - Sending blueprint container event BlueprintEvent[type=CREATING] for bundle jmx-test-plain-bundle
[Start Level Event Dispatcher] INFO org.apache.aries.blueprint.container.BlueprintExtender - No quiesce support is available, so blueprint components will not participate in quiesce operations
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Blueprint extender started
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.aries.blueprint for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Found blueprint application in bundle org.apache.aries.blueprint with paths: [bundleentry://138.fwk29115481/OSGI-INF/blueprint/blueprint-cm.xml, bundleentry://138.fwk29115481/OSGI-INF/blueprint/blueprint-ext.xml]
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scheduling creation of blueprint bundle org.apache.aries.blueprint asynchronously
[Framework Event Dispatcher] DEBUG org.apache.aries.blueprint - BundleEvent STARTED
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.BlueprintContainerImpl - Running blueprint container for bundle org.apache.aries.blueprint in state Unknown
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.BlueprintContainerImpl - Grace-period directive: false
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.BlueprintEventDispatcher - Sending blueprint container event BlueprintEvent[type=CREATING] for bundle org.apache.aries.blueprint
[Start Level Event Dispatcher] DEBUG org.apache.aries.jndi - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.aries.jndi - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.aries.jndi - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.aries.jndi - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.aries.jndi - ServiceEvent REGISTERED
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.apache.aries.jndi for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.apache.aries.jndi
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - Scanning bundle org.eclipse.osgi for blueprint application
[Start Level Event Dispatcher] DEBUG org.apache.aries.blueprint.container.BlueprintExtender - No blueprint application found in bundle org.eclipse.osgi
[Framework Event Dispatcher] DEBUG org.apache.aries.jndi - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG org.eclipse.osgi - BundleEvent STARTED
[Framework Event Dispatcher] DEBUG org.eclipse.osgi - FrameworkEvent STARTED
[Framework Event Dispatcher] DEBUG org.eclipse.osgi - FrameworkEvent STARTLEVEL CHANGED
[Blueprint Extender: 1] DEBUG org.apache.aries.blueprint.container.BlueprintContainerImpl - Tracking service references: []
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.BlueprintContainerImpl - Tracking service references: []
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Registering service .component-2 with interfaces [org.apache.aries.blueprint.NamespaceHandler] and properties
{osgi.service.blueprint.namespace=[Ljava.lang.Object;@1f4cbee}
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint - ServiceEvent REGISTERED
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl - Adding NamespaceHandler
{org.apache.aries.blueprint.NamespaceHandler}={osgi.service.blueprint.namespace=[http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0,http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0,http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0], service.id=41}
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Retrieving service for bundle org.apache.aries.blueprint_0.3.2.SNAPSHOT [138] and service registration {org.apache.aries.blueprint.NamespaceHandler}
=
{osgi.service.blueprint.namespace=[http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0,http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0,http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0], service.id=41}
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Creating service instance
[Blueprint Extender: 1] DEBUG org.apache.aries.blueprint.container.BlueprintContainerImpl - Instantiating components: [blueprintContainer, blueprintBundle, blueprintBundleContext, blueprintConverter, test]
--------------- iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii -
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Service created: org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler@16c9867
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Creating listeners
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Listeners created: []
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Calling listeners for initial service registration
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Method entry: getService, args org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler@16c9867
----------------
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Registering service .component-1 with interfaces [org.apache.aries.blueprint.NamespaceHandler] and properties
{osgi.service.blueprint.namespace=[Ljava.lang.Object;@3bc473}
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint - ServiceEvent REGISTERED
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl - Adding NamespaceHandler
{org.apache.aries.blueprint.NamespaceHandler}={osgi.service.blueprint.namespace=[http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0,http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0], service.id=42}
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Retrieving service for bundle org.apache.aries.blueprint_0.3.2.SNAPSHOT [138] and service registration {org.apache.aries.blueprint.NamespaceHandler}
=
{osgi.service.blueprint.namespace=[http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0,http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0], service.id=42}
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Creating service instance
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Service created: org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler@1bcdbf6
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Creating listeners
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Listeners created: []
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Calling listeners for initial service registration
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.ServiceRecipe - Method entry: getService, args org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler@1bcdbf6
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.BlueprintContainerImpl - Instantiating components: [blueprintContainer, blueprintBundle, blueprintBundleContext, blueprintConverter]
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint - ServiceEvent REGISTERED
[Blueprint Extender: 2] DEBUG org.apache.aries.blueprint.container.BlueprintEventDispatcher - Sending blueprint container event BlueprintEvent[type=CREATED] for bundle org.apache.aries.blueprint
[Blueprint Extender: 1] DEBUG javax.enterprise.resource.corba.CORBA.rpc.presentation - ORBUTIL.errorInSettingDynamicStubFactoryFactory
org.omg.CORBA.BAD_PARAM: vmcid: SUN minor code: 227 completed: No
at com.sun.corba.se.impl.logging.ORBUtilSystemException.errorInSettingDynamicStubFactoryFactory(ORBUtilSystemException.java:1879)
at com.sun.corba.se.impl.logging.ORBUtilSystemException.errorInSettingDynamicStubFactoryFactory(ORBUtilSystemException.java:1898)
at com.sun.corba.se.spi.orb.ORB$2.run(ORB.java:196)
at java.security.AccessController.doPrivileged(Native Method)
at com.sun.corba.se.spi.orb.ORB.<clinit>(ORB.java:179)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:247)
at org.omg.CORBA.ORB.create_impl(ORB.java:295)
at org.omg.CORBA.ORB.init(ORB.java:336)
at javax.management.remote.rmi.RMIConnector.resolveOrb(RMIConnector.java:1721)
at javax.management.remote.rmi.RMIConnector.findRMIServer(RMIConnector.java:1851)
at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:257)
at javax.management.remote.JMXConnectorFactory.connect(JMXConnectorFactory.java:248)
at TestConnection.init(TestConnection.java:57)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:238)
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838)
at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:638)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:726)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:71)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:79)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:220)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:154)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:634)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:326)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:228)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.ClassNotFoundException: com.sun.corba.se.impl.presentation.rmi.bcel.StubFactoryFactoryBCELImpl
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:489)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:405)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:393)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
at com.sun.corba.se.impl.orbutil.ORBClassLoader.loadClass(ORBClassLoader.java:20)
at com.sun.corba.se.spi.orb.ORB$2.run(ORB.java:192)
... 37 more
[Blueprint Extender: 1] ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle jmx-test-plain-bundle
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to intialize bean test
at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:640)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:726)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:71)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:79)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:220)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:154)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:634)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:326)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:228)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
Caused by: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.NoInitialContextException: Unable to find the InitialContextFactory com.ibm.websphere.naming.WsnInitialContextFactory.
at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:338)
at javax.management.remote.JMXConnectorFactory.connect(JMXConnectorFactory.java:248)
at TestConnection.init(TestConnection.java:57)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:238)
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838)
at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:638)
... 19 more
Caused by: javax.naming.NoInitialContextException: Unable to find the InitialContextFactory com.ibm.websphere.naming.WsnInitialContextFactory.
at org.apache.aries.jndi.ContextHelper.getInitialContext(ContextHelper.java:127)
at org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.getInitialContext(OSGiInitialContextFactoryBuilder.java:49)
at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:667)
at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:288)
at javax.naming.InitialContext.init(InitialContext.java:223)
at javax.naming.InitialContext.<init>(InitialContext.java:197)
at javax.management.remote.rmi.RMIConnector.findRMIServerJNDI(RMIConnector.java:1884)
at javax.management.remote.rmi.RMIConnector.findRMIServer(RMIConnector.java:1856)
at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:257)
... 28 more
[Blueprint Extender: 1] DEBUG org.apache.aries.blueprint.container.BlueprintEventDispatcher - Sending blueprint container event BlueprintEvent[type=FAILURE, exception=Unable to intialize bean test] for bundle jmx-test-plain-bundle
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
issueID:ARIES-784
type:Bug
changed files:
texts:Blog sample assembly (and others) broken - aries bundles don't resolve
Most of the Aries bundles in the blog assembly no longer start. The reason is that pax logging is missing from the framework; the reason for that is that the config.ini lists the wrong version.
(Sadly, the blog tests don't validate the blog assembly. I'll raise another issue for that, since it's a harder fix.)
issueID:ARIES-786
type:Improvement
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
texts:Ability to control the list of woven classes using system properties
Introduce org.apache.aries.proxy.weaving.enabled and org.apache.aries.proxy.weaving.disabled containing a comma separated list of wildcard matching filters to allow / disallow the filtering in and out of classes for the weaving process.
issueID:ARIES-787
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:Class proxying should not be enabled by default
This should only be enabled when ext:proxy-method="classes" attribute is set
issueID:ARIES-788
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:Possible NPE when destroying the blueprint container
karaf@root> ^D
ERROR: Bundle org.apache.karaf.features.core [11] EventDispatcher: Error during dispatch. (java.lang.NullPointerException)
java.lang.NullPointerException
 at org.apache.aries.blueprint.container.ReferenceListRecipe$ServiceDispatcher.destroy(ReferenceListRecipe.java:187)
 at org.apache.aries.blueprint.container.ReferenceListRecipe.untrack(ReferenceListRecipe.java:146)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceRemoved(AbstractServiceReferenceRecipe.java:280)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:252)
 at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
 at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
 at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
 at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4252)
 at org.apache.felix.framework.Felix.access$000(Felix.java:74)
 at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390)
 at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148)
 at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127)
 at org.apache.felix.framework.ServiceRegistry.unregisterServices(ServiceRegistry.java:191)
 at org.apache.felix.framework.Felix.stopBundle(Felix.java:2386)
 at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1214)
 at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
 at java.lang.Thread.run(Thread.java:680)

gnodet:(git)karaf[trunk]/assemblies/apache-karaf/target/assembly$ 
issueID:ARIES-789
type:Bug
changed files:
texts:Custom realm undeploying corrupts default realm
I define a minimal custom realm (see attachment), hot-deploy it, then hot-undeploy it.
Afterwards I cannot ssh anymore to the Karaf Console, the error message says that the password is wrong.
Subsequent calls to the custom realm gives the following stack trace (caught in the Eclipse debugger).
Thread [camel-jetty:9020-129] (Suspended (exception org.osgi.service.blueprint.container.ServiceUnavailableException)) 
 org.apache.aries.blueprint.container.ReferenceListRecipe$ServiceDispatcher.call() line: 201 
 org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$CgLibProxyFactory$1.loadObject() line: 652 
 org.apache.karaf.jaas.config.JaasRealm$$EnhancerByCGLIB$$fea986d0.getName() line: not available 
 org.apache.karaf.jaas.config.impl.OsgiConfiguration.getAppConfigurationEntry(java.lang.String) line: 54 
 javax.security.auth.login.LoginContext.init(java.lang.String) line: 243 
 javax.security.auth.login.LoginContext.<init>(java.lang.String, javax.security.auth.Subject) line: 367 
 javax.security.auth.login.LoginContext.<init>(java.lang.String, javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler) line: 444 
 com.mycompany.OsgiJAASLoginService(org.eclipse.jetty.plus.jaas.JAASLoginService).login(java.lang.String, java.lang.Object) line: 201 
 com.mycompany.OsgiJAASLoginService.login(java.lang.String, java.lang.Object) line: 52 
 org.eclipse.jetty.security.authentication.BasicAuthenticator.validateRequest(javax.servlet.ServletRequest, javax.servlet.ServletResponse, boolean) line: 77 
 org.eclipse.jetty.security.ConstraintSecurityHandler(org.eclipse.jetty.security.SecurityHandler).handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) line: 439 
 org.eclipse.jetty.server.Server(org.eclipse.jetty.server.handler.HandlerWrapper).handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) line: 114 
 org.eclipse.jetty.server.Server.handle(org.eclipse.jetty.server.HttpConnection) line: 352 
 org.eclipse.jetty.server.nio.SelectChannelConnector$3(org.eclipse.jetty.server.HttpConnection).handleRequest() line: 596 
 org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete() line: 1051 
 org.eclipse.jetty.http.HttpParser.parseNext() line: 590 
 org.eclipse.jetty.http.HttpParser.parseAvailable() line: 212 
 org.eclipse.jetty.server.nio.SelectChannelConnector$3(org.eclipse.jetty.server.HttpConnection).handle() line: 426 
 org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle() line: 508 
 org.eclipse.jetty.io.nio.SelectChannelEndPoint.access$000(org.eclipse.jetty.io.nio.SelectChannelEndPoint) line: 34 
 org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run() line: 40 
 org.eclipse.jetty.util.thread.QueuedThreadPool$2.run() line: 451 
 java.lang.Thread.run() line: 662 
issueID:ARIES-79
type:New Feature
changed files:
texts:Implement extender for detecting persitence units.
Detect persistence unit bundles based on the presence of persistence.xml
Read all of the persistence unit metadata from the persistence.xml file
Associate a provider with each persistence unit (using the name and version resolving)
Add exports from associated provider to persistence unit bundle imports
issueID:ARIES-792
type:Improvement
changed files:
texts:Add EJB Modeller code to the Standalone Application Modeller
The Standalone Application Modeller should be able to use the new EJB modeller in order to model EJBs.
I have also included a new ejb itest to test the standalone modeller
issueID:ARIES-794
type:Task
changed files:jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
texts:Remove unnecessary additional field from JNDI ServiceHelper & add packageinfo
ServiceHelper has had a public static MESSAGES added to it since Aries JNDI 0.3 was released. This field is only used within the JNDI URL bundle. Also, the package it sits in: org.apache.aries.jndi.services was exported at 0.3 and currently doesn't have a version added to the manifest, so is effectively at version 0.0.0.
issueID:ARIES-796
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java
texts:PropertyPlaceHolder does not really like JPA elements
When using JPA, we usally pass the EntityManagerFactory to a bean using <jpa:unit> element.
When we also define a property placeholder in the same blueprint.xml we result with tha class cast exception like the one below:
java.lang.ClassCastException: org.apache.aries.jpa.blueprint.aries.impl.NSHandler$1 cannot be cast to org.apache.aries.blueprint.mutable.MutableBeanProperty
at org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder.processBeanMetadata(AbstractPropertyPlaceholder.java:116)[9:org.apache.aries.blueprint:0.3.1]
at org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder.processMetadata(AbstractPropertyPlaceholder.java:91)[9:org.apache.aries.blueprint:0.3.1]
at org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder.process(AbstractPropertyPlaceholder.java:85)[9:org.apache.aries.blueprint:0.3.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:495)[9:org.apache.aries.blueprint:0.3.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:314)[9:org.apache.aries.blueprint:0.3.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)[9:org.apache.aries.blueprint:0.3.1]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_29]
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_29]
at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_29]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)[:1.6.0_29]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)[:1.6.0_29]
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_29]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_29]
at java.lang.Thread.run(Thread.java:680)[:1.6.0_29]
issueID:ARIES-799
type:Bug
changed files:application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/AbstractParserProxy.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/RepositoryGeneratorImpl.java
application/application-obr-resolver/src/main/java/org/apache/aries/application/resolver/obr/impl/OBRCapability.java
texts:Aries Repository Generation does not respect blueprint collection semantics
The Aries Application runtime allows blueprint applications to be modelled and stored in OBR repository syntax. This doesn't honour some of the infromation stored in the blueprint service properties. If the service declares a list or set as a property value, this is modelled (incorrectly) as an array. This also causes problems where duplicate values are included in arrays that were supposed to be sets!
issueID:ARIES-80
type:New Feature
changed files:
texts:
Provide a parser service for persistent.xml files
issueID:ARIES-800
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/InternalRecursiveBundleTracker.java
texts:Closing a recursive bundle tracker opens it
When we close a recursive bundle tracker it closes it then re-opens it causing our customizer to be triggered again. The stack trace from the Aries part of the code is (from closing to calling our customizer)...
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.addingBundle(InternalRecursiveBundleTracker.java:70)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:482)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:262)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:185)
at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:163)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.openTracker(InternalRecursiveBundleTracker.java:156)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.customizedProcessBundle(InternalRecursiveBundleTracker.java:123)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.addingBundle(InternalRecursiveBundleTracker.java:65)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:482)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:262)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:185)
at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:163)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.openTracker(InternalRecursiveBundleTracker.java:156)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.customizedProcessBundle(InternalRecursiveBundleTracker.java:123)
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.removedBundle(InternalRecursiveBundleTracker.java:102)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:508)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:352)
at org.osgi.util.tracker.BundleTracker.close(BundleTracker.java:200)
at org.apache.aries.util.tracker.RecursiveBundleTracker.close(RecursiveBundleTracker.java:86)
issueID:ARIES-801
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyAbstractMethodAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AsmProxyManager.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyAdapter.java
texts:Aries Proxy cannot proxy abstract classes
The proxy component is unable to proxy abstract classes. This is just plain silly for the subclassing code, which should already be able to do this trivially and is definitely a bug.
It should be possible to augment the dynamic interface proxy code so that it can extend "woven" abstract classes too, treating any abstract methods as "interface" and simply setting the superclass properly. Because the interface generation code extends the existing weaving code this is effectively the same as loading and weaving a real concrete subclass that has zero length implementations of the abstract methods.
Interestingly it should also be possible to add interfaces to these dynamically generated woven subclasses. I'm not sure whether this will be useful or not, but we should get it for free.
issueID:ARIES-802
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:dependent restart causes ComponentNameAlreadyInUseException: Name 'blueprintContainer' is already in use by a registered component
I saw this problem several months ago. This problem still occurs in the current trunk 0.4.1-snapshot.
I have two bundles A and B running and A depends on B. In my concrete case, A is an application scenario bundle depending on B the cxf bundle.
Initially, both are running and have status Active. When I stop B, A goes to status GracePeriod. When I start B again, A is started but does not come back to status Active but goes to status "Failure" with the following error:
2011-12-14 01:12:49,755 | ERROR | rint Extender: 2 | BlueprintContainerImpl | container.BlueprintContainerImpl
362 | 10 - org.apache.aries.blueprint - 0.4.1.SNAPSHOT | Unable to start blueprint container for bundle tmp.test-osgi-cxf-provider-bp
org.apache.aries.blueprint.ComponentNameAlreadyInUseException: Name 'blueprintContainer' is already in use by a registered component
at org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl.registerComponentDefinition(ComponentDefinitionRegistryImpl.java:88)[10:org.apache.aries.blueprint:0.4.1.SNAPSHOT]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:286)[10:org.apache.aries.blueprint:0.4.1.SNAPSHOT]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:241)[10:org.apache.aries.blueprint:0.4.1.SNAPSHOT]
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)[10:org.apache.aries.blueprint:0.4.1.SNAPSHOT]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_24]
at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_24]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)[:1.6.0_24]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)[:1.6.0_24]
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_24]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_24]
at java.lang.Thread.run(Thread.java:662)[:1.6.0_24]
The cause of this problem seems to be that this bundle's blueprint container's component definition map is not cleared up prior to getting restarted. This calls ComponentRegistryImpl's registerComponentDefinition and this method checks if the same named component is already in the map.
I added a line of code to clear up the definition map and this made the bundle start and its status go to Active.
Please take a look at the attached file.
Regards, aki
issueID:ARIES-803
type:Bug
changed files:
texts:Versioning problems in JNDI 0.3.1 release bundles
The JNDI uber bundle does not use the correct import version ranges. The JNDI url bundle does not export at the right version.
issueID:ARIES-804
type:Bug
changed files:application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
texts:Unable to delete EBA file if the value of defaultUseCaches is set to false on JarURLConnection on a separate thread during installation
If you install an EBA into Aries but at the same time a different thread that sets the value of defaultUseCaches to false then the EBA cannot be deleted on Windows.
I think this is related to the fix to #ARIES-292. Here after installing the application it runs through getting the JAR file for the EBA and closing the file. If the use caches is set to true at this point then it will get the same JAR file that was used earlier in the installation process and close it. However, if use caches is set to false it will create a new JAR file and close that thus leaving the one that was opened during the installation open.
There is a timing element to this because if default use caches is false throughout then it won't keep a handle open to the file in the first place and if it is true throughout then the fix to 292 works. It is only when the value changes from true to false on a separate thread between the installation of the EBA and the tidy up that was added for 292.
I think this will have a simple fix by adding:
urlc.setUseCaches(true);
before getting the JAR file in AriesApplicationManagerImpl.install()
issueID:ARIES-806
type:Improvement
changed files:
texts:Align Bundle-Name of the JMX Whiteboard bundle with other JMX bundles
The JMX Whiteboard bundle's Bundle-Name currently is "Apache Aries Whiteboard support for JMX DynamicMBean services" which does not align with other JMX bundle's Bundle-Name values such as "Apache Aries JMX Core" or "Apache Aries JMX API"
The Bundle-Name should be changed to "Apache Aries JMX Whiteboard".
issueID:ARIES-808
type:Bug
changed files:
texts:Problem with JPAWeavingHook in an environment that uses Composite Bundles
When running my OSGi application that uses JPA I get the following error:
java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at com.ibm.osgi.jpa.jpa2.TestTools.run(TestTools.java:60)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:238)
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838)
at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:638)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:726)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:71)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314)
at java.util.concurrent.FutureTask.run(FutureTask.java:149)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:79)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:220)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:154)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:630)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:326)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:228)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:452)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314)
at java.util.concurrent.FutureTask.run(FutureTask.java:149)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:109)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:218)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:897)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:919)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.NoClassDefFoundError: org.apache.openjpa.enhance.PersistenceCapable
at java.lang.ClassLoader.defineClassImpl(Native Method)
at java.lang.ClassLoader.defineClass(ClassLoader.java:275)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass(DefaultClassLoader.java:188)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:601)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:567)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:490)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader(ClasspathManager.java:478)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:458)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:216)
at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:400)
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:476)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:429)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:417)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:619)
at java.lang.Class.forNameImpl(Native Method)
at java.lang.Class.forName(Class.java:172)
at org.apache.openjpa.meta.MetaDataRepository.classForName(MetaDataRepository.java:1552)
at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypesInternal(MetaDataRepository.java:1528)
at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypes(MetaDataRepository.java:1506)
at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:282)
at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:238)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:212)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
at com.ibm.ws.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:50)
at com.ibm.ws.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:35)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:65)
at Proxy476b6bea_8a4d_42a3_ba7d_e0257275a826.createEntityManager(Unknown Source)
at com.ibm.osgi.jpa.jpa2.NewAPITest.primeDB(NewAPITest.java:86)
at com.ibm.osgi.jpa.jpa2.NewAPITest.before(NewAPITest.java:35)
... 31 more
Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.enhance.PersistenceCapable
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:513)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:429)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:417)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:619)
... 62 more
I am using Apache Aries with Composite Bundles in order to run my application. Due to the fact that we are using OSGi 4.3 we are using the JPAWeavingHook to perform load time enhancement of our entities. The JPAWeavingHook makes use of the org.apache.aries.jpa.container.weaving.impl.WrappingTransformer to help it determine which packages need to be added as dynamic imports. It contains the following code:
public WrappingTransformer(ClassTransformer delegate,
ServiceReference<?> persistenceProvider) {
if(delegate == null)
throw new NullPointerException(NLS.MESSAGES.getMessage("jpa.weaving.null.transformer"));
if(persistenceProvider == null)
{ throw new NullPointerException(NLS.MESSAGES.getMessage("jpa.weaving.null.provider")); }
this.delegate = delegate;
Object packages = persistenceProvider.getProperty("org.apache.aries.jpa.container.weaving.packages");
Bundle provider = persistenceProvider.getBundle();
String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" +
provider.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE
+ "=" + provider.getVersion();
if(packages instanceof String[]) {
for(String s : (String[]) packages)
{ if (s.contains(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE)) packageImportsToAdd.add(s); else packageImportsToAdd.add(s + suffix); }
} else {
BundleRevision br = provider.adapt(BundleWiring.class).getRevision();
for(BundleCapability bc : br.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE))
{ packageImportsToAdd.add(bc.getAttributes().get(BundleRevision.PACKAGE_NAMESPACE) + suffix); }
}
}
The problem is that the suffix is meant to tie the dynamic imports to the persistence provider bundle so that they only work if the packages come from that bundle. When using Composite Bundles, however, the bundle that provides those packages will be the surrogate bundle and not the original persistence provider bundle. This results in the ClassNotFoundException listed above. As a workaround I can remove the suffix so that the imports can be used from any bundle, but I am not sure what the long term fix should be that would allow the JPAWeavingHook to work both with and without Composite Bundles.
issueID:ARIES-809
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
texts:Not possible to configure transaction timeout
There seems to be a flaw regarding configuration of the transaction manager. It should be possible to configure the transaction manager using the PID "org.apache.aries.transaction" but but this doesn't work. Even if this PID is bound to the transaction manager it doesn't pick up the new configuration but uses the default values anyway.
I have tested configuration of the transaction timeout (which doesn't work) but I suspect that the transaction manager doesn't pick up any configuration. I know that ServiceMix sets the "logFileDir" property to "${karaf.data}/txlog/" which I suspect doesn't work either.
This has been discussed on the Aries user list at:
http://mail-archives.apache.org/mod_mbox/aries-user/201112.mbox/%3CCAJ0TPGLo=u=bf+Ep0hG2DJjZATFOKV8KbMN5hfLkSwfw8-JNLg@mail.gmail.com%3E
issueID:ARIES-810
type:Bug
changed files:
texts:Invalid filter string in blueprint.xml results in a non-obvious error
If a developer specifies an incorrect filter string within their blueprint xml, the error reported doesn't make it obvious that this is the case.
For example:
<reference id="WorldRef" interface="com.acme.World" filter="osgi.jndi.service.name=dupCheck/topLevelSequencer"></reference>
This should read (notice the brackets):
<reference id="WorldRef" interface="com.acme.World" filter="(osgi.jndi.service.name=dupCheck/topLevelSequencer)"></reference>
This results in ImportedServiceImpl throwing an unhelpful InvalidAttributeException.
issueID:ARIES-812
type:Bug
changed files:
texts:Build break: failures in org.apache.aries.jpa.container.itest.JPAContainerDataSourceFactoryTest.testDataSourceFactoryXALifecycle and elsewhere
Investigations suggest that this test is failing because org.apache.aries.jndi.core_0.3.2.SNAPSHOT and org.apache.aries.jndi.url_0.3.2.SNAPSHOT are failing to resolve:
org.osgi.framework.BundleException: The bundle "org.apache.aries.jndi.url_0.3.2.
SNAPSHOT [17]" could not be resolved. Reason: Missing Constraint: Import-Package
: org.apache.aries.util.log; version="[0.1.0,0.2.0)"
This package is not exported by the version of org.apache.aries.util in the test runtime:
org.apache.aries.util_0.4.0 [9]
Id=9, Status=ACTIVE Data Root=C:\Users\mnuttall\AppData\Local\Temp\paxexa
m_runner_mnuttall\equinox\org.eclipse.osgi\bundles\9\data
No registered services.
No services in use.
Exported packages
org.apache.aries.util; version="0.4.0"[exported]
org.apache.aries.util.tracker; version="0.4.0"[exported]
org.apache.aries.util.nls; version="0.3.0"[exported]
org.apache.aries.util.io; version="0.1.0"[exported]
org.apache.aries.util.service.registry; version="0.1.0"[exported]
org.apache.aries.util.manifest; version="0.1.0"[exported]
org.apache.aries.util.filesystem; version="0.1.0"[exported]
Imported packages
org.osgi.framework; version="1.6.0"<org.eclipse.osgi_3.7.0.v20110613 [0]>
org.osgi.util.tracker; version="1.5.0"<org.eclipse.osgi_3.7.0.v20110613 [0]>
org.slf4j; version="1.5.6"<org.ops4j.pax.logging.pax-logging-api_1.5.0 [4]>
org.osgi.service.framework; version="1.0.0"<org.eclipse.osgi_3.7.0.v20110613
[0]>
org.osgi.framework.launch; version="1.0.0"<org.eclipse.osgi_3.7.0.v20110613
[0]>
org.eclipse.osgi.internal.loader; version="0.0.0"<org.eclipse.osgi_3.7.0.v20
110613 [0]>
org.eclipse.osgi.framework.internal.core; version="0.0.0"<org.eclipse.osgi_3
.7.0.v20110613 [0]>
org.eclipse.osgi.framework.adaptor; version="0.0.0"<org.eclipse.osgi_3.7.0.v
20110613 [0]>
No fragment bundles
Named class space
org.apache.aries.util; bundle-version="0.4.0"[provided]
No required bundles
It looks like something bad has happened to org.apache.aries.util. Investigations continue.
issueID:ARIES-813
type:Bug
changed files:samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
texts:Blog sample link from Aries icon is broken
It takes user to aries.apache.org/aries instead of aries.apache.org
issueID:ARIES-814
type:Bug
changed files:
texts:Add another diagnostic constructor to ModellerException
Further to Aries-810, we need to be able to create ModellerExceptions with additional diagnostic text.
issueID:ARIES-816
type:Bug
changed files:
texts:Java 2 security AccesControlException when getting blueprint service
java.security.AccessControlException: Access denied (org.osgi.framework.ServicePermission (service.id=61) get)
at java.security.AccessController.checkPermission(AccessController.java:108)
at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)
at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:208)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.checkGetServicePermission(ServiceRegistry.java:986)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getService(ServiceRegistry.java:428)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getService(BundleContextImpl.java:667)
at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:202)
at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:50)
at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:227)
The blueprint ReferenceRecipe needs a doPrivileged block around the getService() call.
I have attached the diff.txt for the changes needed to the ReferenceRecipe class.
issueID:ARIES-818
type:Bug
changed files:
texts:JPAWeavingHook fails to add dynamic imports for bundles that contain pre-enhanced classes
If the persistence bundle contains pre-enhanced classes then the JPAWeavingHook does not perform any additional enhancement. This has the side-effect of not adding the dynamic imports for the extra packages required by the pre-enhanced classes. The result is the following exception:
java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at com.ibm.osgi.jpa.jpa2.TestTools.run(TestTools.java:60)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:238)
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838)
at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:638)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:726)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:71)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314)
at java.util.concurrent.FutureTask.run(FutureTask.java:149)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:79)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:220)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:154)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:630)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:326)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:228)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:452)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314)
at java.util.concurrent.FutureTask.run(FutureTask.java:149)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:109)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:218)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:897)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:919)
at java.lang.Thread.run(Thread.java:736)
Caused by: java.lang.NoClassDefFoundError: org.apache.openjpa.enhance.PersistenceCapable
at java.lang.ClassLoader.defineClassImpl(Native Method)
at java.lang.ClassLoader.defineClass(ClassLoader.java:275)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass(DefaultClassLoader.java:188)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClassHoldingLock(ClasspathManager.java:626)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:608)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:562)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:486)
at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:459)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:216)
at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:400)
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:476)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:429)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:417)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:619)
at java.lang.Class.forNameImpl(Native Method)
at java.lang.Class.forName(Class.java:172)
at org.apache.openjpa.meta.MetaDataRepository.classForName(MetaDataRepository.java:1552)
at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypesInternal(MetaDataRepository.java:1528)
at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypes(MetaDataRepository.java:1506)
at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:282)
at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:238)
at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:212)
at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
at com.ibm.ws.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:50)
at com.ibm.ws.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:35)
at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:65)
at Proxy5c17bfcd_497a_4e6b_80f8_395b2e49aa63.createEntityManager(Unknown Source)
at com.ibm.osgi.jpa.jpa2.NewAPITest.primeDB(NewAPITest.java:87)
at com.ibm.osgi.jpa.jpa2.NewAPITest.before(NewAPITest.java:36)
... 31 more
Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.enhance.PersistenceCapable
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:513)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:429)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:417)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:619)
... 62 more
issueID:ARIES-819
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/OSGiFriendlyClassWriter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java
texts:OsgiFriendlyClassWriter.getCommonSuperClass appears to have some errors.
problems seen:
the shortcut to superclass when a type is the currently-being-written class doesn't return the evaluated result. This could result in trying to load the class being written anyway.
if one of the types is an interface, the answer has to be java.lang.Object, so we can return that immediately. The current code will throw an exception if both types are interfaces.
In addition, I've opened an asm issue to move the special case evaluations to a new internalGetCommonSuperClass method so we wouldn't have to track class name and superclass name ourselves.
http://forge.ow2.org/tracker/index.php?func=detail&aid=316320&group_id=23&atid=350023
issueID:ARIES-82
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:BeanRecipe fails when using generics
public class SpringFactoryBean implements FactoryBean<Spring> {
public Spring getObject() throws Exception
{ return new Primavera(); }
public Class<? extends Spring> getObjectType()
{ return Primavera.class; }
public boolean isSingleton()
{ return false; }
}
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
<bean id="springFactory" class="com.example.testing.aries.blueprint.springfactorybean.SpringFactoryBean"/>
<bean id="spring" factory-ref="springFactory" factory-method="getObject"/>
<service ref="spring" interface="com.example.testing.aries.blueprint.springfactorybean.Spring"/>
</blueprint>
[pool-1-thread-1] ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle com.example.testing.aries.blueprint.springfactorybean
org.osgi.service.blueprint.container.ComponentDefinitionException: Multiple matching factory methods getObject found on class com.example.testing.aries.blueprint.springfactorybean.SpringFactoryBean for arguments [] when instanciating bean spring: [public java.lang.Object com.example.testing.aries.blueprint.springfactorybean.SpringFactoryBean.getObject() throws java.lang.Exception, public com.example.testing.aries.blueprint.springfactorybean.Spring com.example.testing.aries.blueprint.springfactorybean.SpringFactoryBean.getObject() throws java.lang.Exception]
at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:231)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:645)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:140)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:604)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:311)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:211)
[...]
issueID:ARIES-820
type:Bug
changed files:
texts:New org.apache.aries.util-0.5 jar exports org.apache.aries.util package at same version as the v0.4 jar despite new classes existing in package
The 0.5 version of the org.apache.aries.util bundle has a new class IORuntimeException in the org.apache.aries.util package, but it exports this package at version 0.4, which is the same version as is exported by the 0.4 version of this jar. The exported version of the 0.5 jar needs to be increased to 0.4.1
issueID:ARIES-821
type:Improvement
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintRepository.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/MapRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/AsmProxyManager.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/AbstractRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyAbstractMethodAdapter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/CollectionRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceCombiningClassAdapter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/ValueRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceUsingWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/WovenProxyConcreteMethodAdapter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/Repository.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyMethodAdapter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/RefRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/MethodCopyingClassAdapter.java
texts:Allow mixtures of interfaces and classes in proxys
The new interface proxying code is able to create very fast dynamic proxy classes for arbitrary sets of interface (like a better JDK proxy). With a small amount of effort we can also allow this code to specify an arbitrary superclass for the proxy being generated. This will allow us to generate proxys that add interfaces to the class being proxied.
This may not sound very useful, but it means a blueprint bean Bar, that extends AbstractFoo, and implements Baz, can be exposed as an AbstractFoo and a Baz, but not a Bar. This works even though AbstractFoo does not implement Bar! This is the sort of thing that the blueprint spec was talking about when it says that beans/references should only expose the methods on declared interfaces.
issueID:ARIES-822
type:Improvement
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
texts:Add support for Context.OBJECT_FACTORIES to jndi.core
To quote https://www.osgi.org/bugzilla/show_bug.cgi?id=138 :


A new step should be inserted before the current step 7, in which if
javax.naming.Context.OBJECT_FACTORIES is set as an environment or system
property, then its value should be handled as per the existing javadoc. This
states:
'Constant that holds the name of the environment property for specifying the
list of object factories to use. The value of the property should be a
colon-separated list of the fully qualified class names of factory classes that
will create an object given information about the object. This property may be
specified in the environment, an applet parameter, a system property, or one or
more resource files. The value of this constant is
"java.naming.factory.object".'
issueID:ARIES-823
type:Improvement
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/DirObjectFactoryHelper.java
jndi/jndi-core/src/main/java/org/apache/aries/jndi/ObjectFactoryHelper.java
texts:Cope with badly written ObjectFactorys
I keep coming across badly written ObjectFactory classes which assume that the first parameter is a Reference and therefore always cast to this without doing an instance of check first. These are badly behaved and crummy, but it seems quite pervasive in the world of JNDI, which might have something to do with the lack of understanding people have of JNDI given it is poorly documented.
So far I've managed to get the poorly written ObjectFactories fixed, but this is such a common pattern I've raised a spec bug in the OSGi alliance to provide a way to "opt-out" of the phase that causes most problems. I'm raising this to prototype a fix.
I'm proposing (well about to commit) a fix that means an ObjectFactory with a property called aries.object.factory.requires.refernece set to Boolean.TRUE will not be called if the first parameter is not a Reference.
issueID:ARIES-825
type:New Feature
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleManifestVersionHeader.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/Repository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SecurityManager.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemPermission.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VisibilityDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/TypeAttribute.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemException.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Directive.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/package-info.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/CompositeRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericHeader.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/Subsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RepositoryServiceRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvideBundleCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvideCapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/FilterDirective.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/ContentNamespace.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/LocalRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentRequirement.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/RepositoryContent.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemUri.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiContentCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ResolutionDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Grammar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvideCapabilityCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemSymbolicNameHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/TypedAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ClauseTokenizer.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/CapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/PreferredProviderHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleSymbolicNameHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/GenericClause.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractDirective.java
subsystem/subsystem-api/src/main/java/org/osgi/service/subsystem/SubsystemConstants.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemExportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ServiceProvider.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionPolicyDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemManifestVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SharingPolicyValidator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AriesSubsystemParentsHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractParameter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedVersionAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartResourceComparator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionResourceRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DirectiveFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ThreadLocalSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequirementHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemExportServiceCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ExportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/HeaderFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemTypeHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/package-info.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionResourceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceReferences.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/GetSubsystemHeadersAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleVersionAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallResourceComparator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SystemRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VersionRangeAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/PreferredProviderRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemGraph.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SymbolicNameHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemIdentifier.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ExportPackageCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/GetBundleContextAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/EffectiveDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Parameter.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AttributeFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/PreferredProviderRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/Manifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/StartOrderDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ContentRepository.java
texts:Update subsystems to latest Subsystem, Resolver, and Repository APIs.
This defect will be used to update subsystems to the latest OSGi APIs, which have changed considerably. The latest Subsystem, Resolver, Repository, and Resource APIs will be included.
issueID:ARIES-827
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
util/src/main/java/org/apache/aries/util/tracker/InternalRecursiveBundleTracker.java
texts:ARIES-778 broke the ability to use a composite bundles isolation implementation on equinox 3.7
The ARIES-778 to use a ResolverHook based solution to the recursive bundle tracker means on equinox 3.7 you can't use the composite bundle based isolation mode.
This hardly seems like a good idea.
issueID:ARIES-829
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:ReferenceListRecepie releases using the wrong BundleContext
Looking at ARIES-828 logs I spotted an IllegalStateException in ReferenceListRecipe.ServiceDispatcher.destory on the following line:
ctx.ungetService(ref);
so of course I looked and thought, ah we should just catch the IllegalStateException and move on, we get that if the service doesn't exist anymore, so who cares. Then I spotted the context. It does this:
Bundle bundle = ref.getBundle();
if (bundle != null) {
BundleContext ctx = bundle.getBundleContext();
if (ctx != null)
{ ctx.ungetService(ref); }
}
This means we are using the bundle context of the bundle that registered the service to unget it. The code where we do a lookup says this:
getBundleContextForServiceLookup().getService(reference);
which returns in the general case the BundleContext for the BlueprintContainer. So we get using the bundle context of the blueprint bundle that uses the service, and unget using the bundle context of the bundle providing the service. I know I'm having a bad day but my eyes sprung out on stalks when I saw this.
issueID:ARIES-83
type:Bug
changed files:
texts:Blueprint bundle does not run on Equinox
The blueprint bundle does not run on Equinox because it depends on org.osgi.service.cm; version="[1.3.0,2.0.0)" which is not implemented in org.eclipse.equinox.cm_1.0.100.v20090520-1800.
issueID:ARIES-831
type:Bug
changed files:jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
texts:Java 2 security AccessControlException when using jndi lookup with java2 security enabled
junit.framework.AssertionFailedError: Got: java.security.AccessControlException: Access denied (org.osgi.framework.AdminPermission (id=242) context)
at java.security.AccessController.checkPermission(AccessController.java:108)
at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)
at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:208)
at org.eclipse.osgi.framework.internal.core.Framework.checkAdminPermission(Framework.java:1177)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.getBundleContext(AbstractBundle.java:1283)
at org.apache.aries.jndi.ContextHelper.getInitialContext(ContextHelper.java:124)
at org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.getInitialContext(OSGiInitialContextFactoryBuilder.java:49)
at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:229)
at javax.naming.InitialContext.initializeDefaultInitCtx(InitialContext.java:318)
at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:348)
at javax.naming.InitialContext.internalInit(InitialContext.java:286)
at javax.naming.InitialContext.<init>(InitialContext.java:211)
at javax.naming.InitialContext.<init>(InitialContext.java:198)
at com.ibm.ws.eba.java2security.fieldinjection.InfoServlet.doGet(InfoServlet.java:37)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)
issueID:ARIES-832
type:Bug
changed files:
texts:JPA load-time enhamcement fails for a WAB
187 polo WARN [Blueprint Extender: 1] openjpa.Runtime - An error occurred while registering a ClassTransformer with org.apache.aries.jpa.container.unit.impl.PersistenceUnitInfoImpl@69b169b1. The error is logged along with this warning. Load-time class transformation will not be available.
java.lang.IllegalStateException: The bundle com.ibm.osgi.jpa.warfileAdditions/1.0.0 is not started.
at org.apache.aries.jpa.container.unit.impl.JndiDataSource.getDs(JndiDataSource.java:61)
at org.apache.aries.jpa.container.unit.impl.DelayedLookupDataSource.getConnection(DelayedLookupDataSource.java:36)
at org.apache.openjpa.lib.jdbc.DelegatingDataSource.getConnection(DelegatingDataSource.java:108)
at org.apache.openjpa.lib.jdbc.DecoratingDataSource.getConnection(DecoratingDataSource.java:87)
at org.apache.openjpa.jdbc.sql.DBDictionaryFactory.newDBDictionary(DBDictionaryFactory.java:91)
at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getDBDictionaryInstance(JDBCConfigurationImpl.java:603)
at org.apache.openjpa.jdbc.meta.MappingRepository.endConfiguration(MappingRepository.java:1510)
at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:518)
at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:443)
at org.apache.openjpa.lib.conf.PluginValue.instantiate(PluginValue.java:104)
at org.apache.openjpa.conf.MetaDataRepositoryValue.instantiate(MetaDataRepositoryValue.java:68)
at org.apache.openjpa.lib.conf.ObjectValue.instantiate(ObjectValue.java:83)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.newMetaDataRepositoryInstance(OpenJPAConfigurationImpl.java:963)
at org.apache.openjpa.conf.OpenJPAConfigurationImpl.getMetaDataRepositoryInstance(OpenJPAConfigurationImpl.java:954)
at org.apache.openjpa.persistence.PersistenceProviderImpl$ClassTransformerImpl.<init>(PersistenceProviderImpl.java:281)
at org.apache.openjpa.persistence.PersistenceProviderImpl$ClassTransformerImpl.<init>(PersistenceProviderImpl.java:265)
at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:168)
at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:62)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:329)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.bundleStateChange(EntityManagerFactoryManager.java:175)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.setupManager(PersistenceBundleManager.java:394)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.addingBundle(PersistenceBundleManager.java:154)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:482)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:262)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:185)
at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:163)
...............................
It turns out that the IllegalStateException is thrown because the WAB is in the RESOLVED state when a request for the BundleContext is made against it. The javadoc says "If this bundle is not in the STARTING, ACTIVE, or STOPPING states or this bundle is a fragment bundle, then this bundle has no valid BundleContext. This method will return null if this bundle has no valid BundleContext."
Looking at the code in EntityManagerFactoryManager.bundleStateChange() I can see the following:
public synchronized void bundleStateChange() throws InvalidPersistenceUnitException {
switch(bundle.getState()) {
case Bundle.RESOLVED :
//If we are Resolved as a result of having stopped
//and missed the STOPPING event we need to unregister
unregisterEntityManagerFactories();
//Create the EMF objects if necessary
createEntityManagerFactories();
break;
//Starting and active both require EMFs to be registered
case Bundle.STARTING :
case Bundle.ACTIVE :
if(tracker == null)
{ tracker = new ServiceTracker(bundle.getBundleContext(), "org.osgi.service.jdbc.DataSourceFactory", this); tracker.open(); }
registerEntityManagerFactories();
break;
//Stopping means the EMFs should
case Bundle.STOPPING :
//If we're stopping we no longer need to be quiescing
quiesce = false;
if(tracker != null)
{ tracker.close(); tracker = null; }
unregisterEntityManagerFactories();
break;
case Bundle.INSTALLED :
//Destroy everything
destroyEntityManagerFactories();
}
}
This clearly shows that createEntityManagerFactories() gets driven when the WAB is in the RESOLVED state which results in the exception above. It looks like this should affect more than just WABs, but I have only hit this issue with WABs so far.
issueID:ARIES-833
type:Bug
changed files:
texts:Weaving controller switch does not work on IBM JVM v6
The feature delivered under 'ARIES-826 Add the ability to write a service to control the way proxy weaving works' does not work with IBM JVM v6 when the delegation classes are inner classes.
The WeavingProxyTest fails on IBM JVM v6. The inner class is an instanceof WovenProxy while it is not on Sun JVM v6, which causes behaviour changes.
Runnable r = new Runnable() {
public final void run() {
}
};
Therefore, checkProxyController test failed on IBM JVM while it passed on Sun JVM.
Test set: org.apache.aries.proxy.itests.WeavingProxyTest
-------------------------------------------------------------------------------
Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 28.599 sec <<< FAILURE!
checkProxyController [equinox/3.7.0.v20110613](org.apache.aries.proxy.itests.WeavingProxyTest) Time elapsed: 3.564 sec <<< ERROR!
java.lang.Exception: Unexpected exception, expected<org.apache.aries.proxy.FinalModifierException> but was<java.lang.AssertionError>
at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:117)
at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:86)
at org.ops4j.pax.exam.junit.internal.JUnit4MethodRoadie.runBeforesThenTestThenAfters(JUnit4MethodRoadie.java:60)
at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:84)
at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.invokeTestMethod(JUnit4TestRunner.java:246)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.runMethods(JUnit4TestRunner.java:196)
at org.ops4j.pax.exam.junit.JUnit4TestRunner$2.run(JUnit4TestRunner.java:186)
at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)
at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)
at org.ops4j.pax.exam.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:182)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: java.lang.AssertionError: Proxy should not have been woven!
at org.junit.Assert.fail(Assert.java:74)
at org.apache.aries.proxy.itests.WeavingProxyTest.checkProxyController(WeavingProxyTest.java:116)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:143)
at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:105)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)
at sun.rmi.transport.Transport$1.run(Transport.java:171)
at java.security.AccessController.doPrivileged(AccessController.java:284)
at sun.rmi.transport.Transport.serviceCall(Transport.java:167)
at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:547)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:802)
at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:661)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:897)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:919)
at java.lang.Thread.run(Thread.java:736)
issueID:ARIES-834
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AggregateConverter.java
texts:Unable to convert value ListIndexIterable to type java.lang.Iterable<Something>
The property :
 public void setIndexIterable(Iterable<IndexProvider> indexIterable) {
  this.indexIterable = indexIterable;
 }
The implementation :
public class ListIndexIterable implements Iterable<IndexProvider>
The Blueprint :
    <bean id="listIndexIterable" class="org.neo4j.kernel.ListIndexIterable">
     <property name="indexProviders">
      <reference-list interface="org.neo4j.graphdb.index.IndexProvider"
    availability="optional"/>
     </property>
    </bean>
    <bean id="graphDatabaseFactory" class="org.neo4j.kernel.DefaultGraphDatabaseFactory">
     <property name="indexIterable" ref="listIndexIterable"/>
    </bean>
Expected result : works because ListIndexIterable implements Iterable<IndexProvider>
Actual result :
Caused by: java.lang.Exception: Unable to convert value org.neo4j.kernel.ListIndexIterable@674df816 to type java.lang.Iterable<org.neo4j.graphdb.index.IndexProvider>
        at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:172)[9:org.apache.aries.blueprint:0.3.1]
        at org.apache.aries.blueprint.container.BlueprintRepository.convert(BlueprintRepository.java:373)[9:org.apache.aries.blueprint:0.3.1]
        at org.apache.aries.blueprint.utils.ReflectionUtils$PropertyDescriptor.convert(ReflectionUtils.java:323)[9:org.apache.aries.blueprint:0.3.1]
        at org.apache.aries.blueprint.utils.ReflectionUtils$MethodPropertyDescriptor.internalSet(ReflectionUtils.java:476)[9:org.apache.aries.blueprint:0.3.1]
        at org.apache.aries.blueprint.utils.ReflectionUtils$PropertyDescriptor.set(ReflectionUtils.java:307)[9:org.apache.aries.blueprint:0.3.1]
        at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:805)[9:org.apache.aries.blueprint:0.3.1]
        ... 17 more
issueID:ARIES-836
type:Bug
changed files:
texts:Blueprint annotation should use utils 0.5
Aries Blueprint Core uses Aries Util 0.5.0, but not Blueprint Annotation Impl.
In order to align all Aries modules with the same Util version, Blueprint Annotation Impl should use Util 0.5.0.
issueID:ARIES-837
type:Improvement
changed files:ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/EJBModeller.java
ejb/openejb-extender/src/main/java/org/apache/aries/ejb/openejb/extender/RunningApplication.java
ejb/ejb-modeller/src/main/java/org/apache/aries/ejb/modelling/impl/ParsedEJBServices.java
texts:Modify default of Export-EJB: header to be ALL when empty string
IMHO I think it would be much more user friendly to have the default Export-EJB: header mean all ejbs are exported. I would prefer as a user to not have the "ALL" option but rather either specify "NONE" to export no EJBs,
specify a subset to export only a subset, or leave the field blank to show I have no restriction on ejbs exported. It just seems counter intuitive to me to specify an Export-EJB heading and get nothing exported by default.
issueID:ARIES-838
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintDomainCombiner.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintProtectionDomain.java
texts:ClassCircularityError in BlueprintContainerImpl when using a security manager

issueID:ARIES-84
type:New Feature
changed files:
texts:Support for interceptors on service reference components (in the API for namespace handlers)
Currently, it is possible to register interceptors against a bean through the ComponentDefinitionRegistry interface. However, the registerInterceptorWithComponent method is more generic, accepting a ComponentMetadata instance.
One further use case of interceptors I would like Aries blueprint to support is interceptors on service reference elements, so that a namespace handler can register intercepts that operate when a client bean uses a blueprint injected service reference.
As mentioned above this change will not affect the API for namespace handlers. The only changes needed is to refactor the interceptor logic that is currently partially in BeanRecipe to be also available to (and used from) ReferenceRecipe.
issueID:ARIES-842
type:Bug
changed files:
texts:TransactionManager service is not available for Blueprint in Equinox if the transaction-bluprint bundle is started before the manager
TransactionManager with blueprint namespacehandler works only if the starting of the bundles is in a specified order.
Steps to reproduce:
Check out https://guest:guest@source.everit.biz:443/svn/everit-osgi/trunk
Run "mvn clean install". As a result you will see that hibernate tests run from the hibernate/tests/core project
Edit the hibernate/tests/core/pom.xml file: Take the org.apache.aries.transaction.blueprint before the org.apache.aries.transaction.wrappers dependency.
Run the "mvn clean install" again. Tests are passed on felix successfully however they stop on Equinox as "tx" namespaceHandler is not started (and it is not started as the namespace handler does not see the transactionmanager).
For a more detailed information about this kind of testing project hierarcy (with the possibility of debugging in eclipse) please see the tutorial at http://projects.everit.biz/everit-osgi/testing/step-by-step-guide.html
This may not be a problem of Aries but Equinox... In that case please let me know and I will create this issue in the bug tracker of Equinox.
issueID:ARIES-843
type:Bug
changed files:
texts:Bean can not be created if constructor argument use generics
If a bean has a constructor argument which use generics, the injection fails with "org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to find a matching constructor".
Example:
package example;
public interface Example<A> {}
public class ExampleImpl implements Example<String> {}
public class Service {
private Example<String> example;
public Service(Example<String> example)
{ this.example = example; }
}
<bean id="exampleBean" class="example.ExampleImpl"/>
<bean id="serviceBean" class="example.Service">
<argument ref="exampleBean"/>
</bean>
Changing the constructor of Service to "public Service(Example example)" make it work, but it would be better to have it inject correctly with the generics intact.
issueID:ARIES-845
type:Improvement
changed files:
texts:Support unwrap and isWrappedFor functions with older JDBC drivers in ConnectionWrapper
ConnectionWrapper now simply delegates the unwrap and isWrappedFor functions to the wrapped connection. It would be good if we could be sure that the JDBC driver supports these functions as it is written in the javadoc. However in postgres 9.1 or H2 these functions are not supported and it is impossible to use api from that is supported by the vendor (e.g. LargeObject API from Postgres).
A possible solutions is:
In these functions we check first if the wrapped connection implements the queried interface. If not we delegate the function (thinking if we wrapped a wrapper it hopefully supports these functions).
issueID:ARIES-846
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
texts:The Aries transaction manager does not recover transactions correctly

issueID:ARIES-847
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:Nullpointer exception in org.apache.aries.blueprint.container.BeanRecipe.destroy
If the blueprint file contains an error the obj given to destroy may be null. Currently this is not handled. The big problem in this case is that the user does not get a good error message about his error in the context.
I will add a patch with the check.
issueID:ARIES-848
type:Bug
changed files:
texts:blueprint-annotation-impl should actually make use of it's properties
The problem is that there are properties defined in the annotation-impl project...
<blueprint.annotation.api.version>0.3</blueprint.annotation.api.version>
<util.version>0.4</util.version>
... and there's a profile available for using the latest versions of those libs instead...
<profiles>
        <profile>
            <id>dev</id>
            <properties>
                <blueprint.annotation.api.version>0.3.3-SNAPSHOT</blueprint.annotation.api.version>
                <util.version>0.5-SNAPSHOT</util.version>
            </properties>
        </profile>
</profiles>
... nevertheless, the dependencies don't make use of those properties (see the attached patch).
issueID:ARIES-85
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassDefinitionException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/UnableToLoadProxyException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassHierarchyAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/Collaborator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassInstantiationException.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/UnableToProxyException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassBytecodeGenerationException.java
proxy/proxy-api/src/main/java/org/apache/aries/proxy/FinalModifierException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassMethodHashSet.java
texts:Refactor to make proxying code common, and add asm proxying implementation from ARIES-47
We currently have JDK proxying, CGLib Proxying, used for Service References. And seperate CGLib proxying for Bean (And Service Reference) Interceptors, with ASM code offered via a patch in ARIES-47 to provide ASM proxying for interceptors.
It would be beneficial to have a single proxying approach within the code for both Service References, Interceptors, able to select its implementation based on if asm / cglib is available at runtime, with jdk always being available.
issueID:ARIES-850
type:Bug
changed files:
texts:Build break: Pax tests ignore maven.repo.local settings
Builds have started failing from https://builds.apache.org/job/Aries/1442. The following tests are failing:
org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest.test [equinox/3.5.0]
org.apache.aries.blueprint.itests.BlueprintContainerBTCustomizerTest.test [equinox/3.5.1]
org.apache.aries.samples.blog.itests.JdbcBlogSampleWithEbaTest.test [equinox/3.5.0]
org.apache.aries.samples.blog.itests.JpaBlogSampleWithEbaTest.test [equinox/3.5.0]
org.apache.aries.samples.blog.itests.QuiesceBlogSampleWithEbaTest.test [equinox/3.5.0]
org.apache.aries.sample.twitter.itest.TwitterTest.testTwitter [equinox/3.5.0]
While this is related to ARIES-489, the move to 1.0.0, that JIRA only exposed an existing problem. 6 tests are failing with errors similar to the following:
[RMI TCP Connection(1)-67.195.138.8] DEBUG org.ops4j.pax.url.mvn.internal.Connection - Could not download [Version [1.0.0-SNAPSHOT] from URL file:/home/jenkins/.m2/repository/org/apache/aries/samples/twitter/org.apache.aries.samples.twitter.eba/1.0.0-SNAPSHOT/org.apache.aries.samples.twitter.eba-1.0.0-SNAPSHOT.eba]
The eba has been built, but it's installed in a different maven repo:
[INFO] Installing /home/jenkins/jenkins-slave/workspace/Aries/aries/samples/twitter/twitter-eba/target/org.apache.aries.samples.twitter.eba-1.0.0-SNAPSHOT.eba to /home/jenkins/jenkins-slave/maven-repositories/0/org/apache/aries/samples/twitter/org.apache.aries.samples.twitter.eba/1.0.0-
We launch the builds with -B -f /home/jenkins/jenkins-slave/workspace/Aries/aries/pom.xml -Dmaven.repo.local=/home/jenkins/jenkins-slave/maven-repositories/0 -U -cpu -e -B clean install but the maven.repo.local setting is ignored by some of the tests.
issueID:ARIES-851
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java
texts:BundleTrackerCustomizer in BundleHookBundleTracker is called multiple times for the same event.
Steps to reproduce
Compile or get a karaf-3.0.0-SNAPSHOT and unpack it
Install openjpa-2.2.0 (using the attached feature-file)
Deploy a bundle containing a persistence-unit (attached jar for example)
get the following Exception 4 times:
ERROR: Bundle org.apache.aries.jpa.container [78] EventDispatcher: Error during dispatch. (java.lang.IllegalStateException: Unable to create persistence units for the bundle test.jpa.test.jpa.bundle/0.1.0.SNAPSHOT as previous persistence units already exist.)
java.lang.IllegalStateException: Unable to create persistence units for the bundle test.jpa.test.jpa.bundle/0.1.0.SNAPSHOT as previous persistence units already exist.
See attachment for full stacktrace
In subsequent startups the Exception is still thrown but the stacktrace does not show in the console or the log.
Also when using equinox the Stacktrace does not appear in either the console or the log ever, but it's still thrown.
The problem is that the PersistenceBundleManager#addingBundle is called multiple times for the newly installed bundle.
The PersistenceBundleManager is passed as a BundleTrackerCustomizer to a BundleHookBundleTracker.
The BundleHookBundleTracker stores it in it's own private attribute and also passes it to it's super-constructor.
So the customizer is stored in the instance twice.
It's called by both BundleTracker$Tracked.customizerAdding and BundleHookBundleTracker$Tracked.customizerAdding.
Both "Tracked" recognize the bundle as untracked and call the addingBundle-method.
issueID:ARIES-853
type:Task
changed files:
texts:Poms should depend on non-snapshot version of parent

issueID:ARIES-854
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
texts:NullpointerException in TransactionManager when felix configAdmin is used
When the felix configadmin is in the OSGI container the following exception occurs:
java.lang.NullPointerException
at org.apache.aries.transaction.TransactionManagerService.getInt(TransactionManagerService.java:181)
at org.apache.aries.transaction.TransactionManagerService.<init>(TransactionManagerService.java:82)
at org.apache.aries.transaction.Activator.updated(Activator.java:55)
at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.run(ConfigurationManager.java:1160)
at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
at java.lang.Thread.run(Thread.java:722)
This has to do something with a patch applied to ARIES-809
issueID:ARIES-855
type:Improvement
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/AbstractRecipe.java
texts:Blueprint should attempt to load static nested classes when the initial attempt to load a class has failed
public class SimpleBean {
  public static Nested {
  }
}
referenced as "SimpleBean#Nested" in a blueprint context fails with the validation error.
As proposed at the Osgi-dev by BJ H., the implementation should attempt to load a nested class if the original load attempt fails.
issueID:ARIES-856
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/Activator.java
texts:Possible deadlock when starting the transaction manager

issueID:ARIES-858
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Build break: Blueprint container sometimes fails to start, causing application test failures
The root cause seems to be an NPE in NamespaceHandlerRegistryImpl:
[Blueprint Extender: 2] ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle org.apache.aries.application.default.local.platform
java.lang.NullPointerException
at java.util.LinkedList.remove(LinkedList.java:792)
at java.util.LinkedList.remove(LinkedList.java:226)
at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$LRUMap.get(NamespaceHandlerRegistryImpl.java:682)
at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.getSchema(NamespaceHandlerRegistryImpl.java:243)
at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.access$200(NamespaceHandlerRegistryImpl.java:74)
at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.getSchema(NamespaceHandlerRegistryImpl.java:502)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:291)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:242)
This issue seems to have been introduced in revision 1341258 on 22.05.2012 01:12:57, "Improve concurrency in the namespace registry".
issueID:ARIES-859
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Build break: org.apache.aries.blueprint.itests.ASMMultiBundleTest.multiBundleTest [equinox/3.5.0] failing
The following build has a new test failure, which I can reproduce locally:https://builds.apache.org/job/Aries/1473/.
It seems to be related to the following commit, under ARIES-825: http://svn.apache.org/viewvc?view=revision&revision=1347690
issueID:ARIES-86
type:Test
changed files:
texts:Add multibundle itest
Current itests use blueprint-sample to drive core blueprint features, but are unable to test custom NamespaceHandlers, Interceptors, BeanProcessors etc, as each of these require two bundles (eg, one to declare the nshandler, one to make use of it).
This issue will introduce 2 new test bundles, to enable testing of these scenarios (rather than adding just one, and increasing the complexity of the existing sample).
issueID:ARIES-860
type:Bug
changed files:
texts:Proxy API should not require 1.6 OSGi APIs
See http://aries.15396.n3.nabble.com/proxy-api-needs-at-least-org-osgi-framework-1-6-0-td4015203.html
issueID:ARIES-861
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxyClassInstantiationException.java
proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
texts:Error on retrieving constructor for proxy of karaf BlueprintCommand class on jdk 6 update 33
When I switch my karaf trunk snapshot from jdk 6 update 31 to update 33 all karaf commands stop working.
I was able to track this down to blueprint and the proxy facility or aries.
The exception I get is:
org.osgi.framework.ServiceException: Service factory exception: (class: org/apache/karaf/shell/console/commands/$BlueprintCommand16496117, method: <init> signature: (Ljava/lang/reflect/InvocationHandler;)V) Call to wrong initialization method
In the log this does not show. There I only get a Nullpointer exception as the service object for the command is returned as null.
I have documented more details in the linked karaf issue.
issueID:ARIES-863
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:Blueprint container needs to use bundle's permissions, not its own permissions, for looking up services
We've regressed the testNoImportPermission test in the blueprint.secure suite of the OSGi compliance tests (from a clean run in 0.3).
What it's testing is that when the blueprint container gets services on behalf of a bundle, it uses that bundle's permission. ARIES-727 switched from the ReferenceRecipe calling the getService() method on BluePrintContainerImpl to calling getService() itself. I believe the reason was to allow different bundle contexts to be used for some references and reference lists, to support namespace handlers adding service references. ARIES-816 re-introduced a doPrivileged block, but using the privileges of the blueprint code, not the managed bundle.
I think in the case where a reference uses a different bundle context, the lookup should probably be done with the privileges of the bundle which can 'see' the service.
issueID:ARIES-865
type:Improvement
changed files:
texts:More subsystem itests
We could use more subsystem itests. As with the application-runtime itests, some tests need a separate API bundle so that we don't end up with two copies in the runtime. Create a new module to hold new itest APIs, and a simple itest to exercise them.
Extend to include a set of itests from the Subsystem CTT
issueID:ARIES-866
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleManifestVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SecurityManager.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallResourceComparator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/VisibilityDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SystemRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvideCapabilityCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartResourceComparator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/PreferredProviderRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionResourceRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/TypedAttribute.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ClauseTokenizer.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireBundleHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemGraph.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/CapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SymbolicNameHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/CompositeRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ThreadLocalSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemIdentifier.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/PreferredProviderHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequirementHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemExportServiceCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleSymbolicNameHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RepositoryServiceRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvideBundleCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ExportPackageCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/GetBundleContextAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/EffectiveDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/FilterDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/LocalRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemContentRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/PreferredProviderRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ProvisionPolicyDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceReferences.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/BundleVersionHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SharingPolicyValidator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/GetSubsystemHeadersAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Location.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ContentRepository.java
texts:Add class copyrights where necessary.
A number of classes in the subsystems implementation need copyrights. A new snapshot of the RI should be delivered to OSGi as well.
issueID:ARIES-867
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:Deadlock if stopping a blueprint bundle while the blueprint container is in the create state.
Assume a updating mechanism which installs a bundle using fileinstall. It places a bundle in a folder watched by fileinstall. If the bundle is removed in a short manner a deadlock may occur. This issue can occur if a bundles blueprintcontainer is registering services during the create state and the bundle is stopped concurrently. See attached Threaddump. We also attached a sample environment to reproduce the deadlock.
For reproduction:
start the container in debug mode.
put the com.test.deadlock.1.blueprint-0.0.1-SNAPSHOT.jar into the ./load folder and wait for GRACE_PERIOD state of the blueprint container.
set breakpoint on line 3205 in class org.apache.felix.framework.Felix.
put the com.test.deadlock.2.stopper-0.0.1-SNAPSHOT.jar into the ./load folder.
skip the breakpoint the FIRST time!
remove the com.test.deadlock.1.blueprint-0.0.1-SNAPSHOT.jar from ./load folder, fileinstall will now remove the bundle, wait a until fileinstall loggs the that.
resuming now the debugger. This leads to the deadlock and to the attached thread dump.
Richard S.Hall does describe the problem in the comment here: https://issues.apache.org/jira/browse/FELIX-3393?focusedCommentId=13244548&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13244548
You might consider to register services in a <code>open call</code>, if easily possible.
issueID:ARIES-868
type:Improvement
changed files:
texts:Subsystem support for woven package dependencies
We need a mechanism to support woven package dependencies within subsystems. For example, when running on Equinox 3.7+ the proxy code weaves a dependency on org.apache.aries.proxy.weaving.WovenProxy into application code. This prevents blueprint-managed subsystems from starting unless a bundle explicitly imports the org.apache.aries.proxy.weaving package, which should not be necessary. JPA is worse, in that multiple, and "harder to know" package dependencies are woven in.
Investigate mechanisms for informing the SubsystemResolverHook about woven packages so that they can be permitted to resolve against the parent subsystem.
Develop one or more itests: for example, one that shows blueprint working in a subsystem on Equinox 3.8 without explicitly stating woven package dependencies.
issueID:ARIES-869
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicCapability.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemExportServiceHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SharingPolicyValidator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/SubsystemImportServiceRequirement.java
texts:Add support for computing blueprint service dependencies.
Subsystems needs to support the ability to compute service dependencies. Applications, for example, require this. This defect will focus on integrating support for service dependencies defined as part of the blueprint specification. We may also wish to support OSGi Declarative Services in another defect.
issueID:ARIES-870
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:How to handle osgi.ee requirements.
When working with the Resolver in order to compute dependencies and resolve subsystems, the ResolveContext will need to handle requests for osgi.ee capabilities. Currently, these capabilities need to be provided by resources packaged with the subsystems.
issueID:ARIES-871
type:Bug
changed files:
texts:Update dependency on util to version 1.0.0.
Update the dependency on aries.util to version 1.0.0. This is the version that OSGi desires to maintain in the enterprise branch of the git repo.
issueID:ARIES-872
type:Bug
changed files:
texts:PersistenceDescriptorParserImpl doesn't accept namespace prefixed tags
Hello,
I'm using aries-jpa 0.3 with service mix. If I use a persistence.xml where =
the elements are prefixed by a namespace as in:
<pers:persistence xmlns:pers=3D"http://java.sun.com/xml/ns/persistence"
xmlns:xsi=3D"http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation=3D"http://java.sun.com/xml/ns/persistence http://java=
.sun.com/xml/ns/persistence/persistence_1_0.xsd<http://java.sun.com/xml/ns/=
persistence%20http:/java.sun.com/xml/ns/persistence/persistence_1_0.xsd>"
version=3D"1.0">
<pers:persistence-unit name=3D"alpha">
<pers:properties>
<pers:property name=3D"javax.persistence.jdbc.driver" value=3D"alpha.=
db.class"/>
<pers:property name=3D"javax.persistence.jdbc.url" value=3D"jdbc:alph=
a:url"/>
<pers:property name=3D"javax.persistence.jdbc.user" value=3D"alan"/>
<pers:property name=3D"javax.persistence.jdbc.password" value=3D"4l4n=
"/>
</pers:properties>
</pers:persistence-unit>
</pers:persistence>
It is rejected by the PersistenceDescriptorParser, AFAIK using a prefix is =
valid and should be accepted.
issueID:ARIES-873
type:Improvement
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
texts:Allow transactionManager Identity to be specified via configuration aries.transaction.tmid=MyUniqueId
Currently the tmid for the xidfactory used by the transaction manager is hardcoded to be the PID. This identity needs to be unique for each TM that accesses a resource so it should be configurable via a property, eg aries.transaction.tmid=xxx with a default value of PID.
issueID:ARIES-874
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/di/MapRecipe.java
texts:Blueprint should treat "value-type" on a map as a default, not a requirement
We have six failures in the OSGi blueprint compliance tests with errors similar to the following:
"Unable to convert value 1.0 to type java.lang.Boolean"
I've done a bit of digging and the problem happens when a <map> in a blueprint.xml specifies a value-type. Since ARIES-703, the MapRecipe converts every value in the collection to the value-type. However, the specification describes the value-type as follows: "Optional default type for values." That is, the value-type is only a default, and individual entries in the map can override the type.
We're seeing failures because we're trying to convert values which are declared as double to the default type for the map, boolean.
I've updated MapRecipe to check if there is a value specified on the type, and use that for the conversion where possible. What I ended up with is fairly similar to what CollectionRecipe already does, reassuringly. I've also done the same thing for key-types. Finally, our tests for constructing maps were commented out, so I've re-enabled them and added some extra ones to test these more complex scenarios.
issueID:ARIES-875
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:ReferenceRecipe may "unget" a service without ever "getting" it
I discovered this when trying to use the "ConfigurationAdmin"-service in both blueprint and a BundleActivator. Normally this should work but I get this Exception
java.lang.NullPointerException
 at org.apache.felix.cm.impl.ConfigurationAdminImpl.getConfiguration(ConfigurationAdminImpl.java:105)
 at my.playground.bundle.Activator$ConfigThread.run(Activator.java:29)
This is because this ConfigurationAdminImpl has been "disposed" after blueprint called "ungetService" in ReferenceRecipe#unbind().
Normally this should go like this:
activator gets ConfigAdmin-service
blueprint gets ConfigAdmin-service
blueprint ungets ConfigAdmin-service (reference-counter still > 0, so it is not destroyed)
activator ungets ConfigAdmin-service (reference-counter is now 0, so the dispose-method in the ConfigAdmin is called).
But what happens is this:
activator gets ConfigAdmin-service
blueprint ungets ConfigAdmin-service (reference-counter is now 0, so the dispose-method in the ConfigAdmin is called).
activator throws NPE because the ConfigAdmin-service has been destroyed.
The Problem is that calling ReferenceRecipe#unbind() always ungets the service, but ReferenceRecipe#bind() does not get the service. Thus the unget-operation invalidates the service-reference for some other thread.
I attached a small demo-bundle to show the behaviour. Deploying it in a karaf-3.0.0-SNAPSHOT should show the NPE on the console.
issueID:ARIES-876
type:Story
changed files:esa-maven-plugin/src/main/java/org/apache/aries/plugin/esa/EsaMojo.java
texts:New Maven plugin to generate Subsystem esa files

issueID:ARIES-877
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
texts:The BeanRecipe is missing the factory recipe as a dependency

issueID:ARIES-878
type:Bug
changed files:blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java
blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/ManagedObjectManager.java
texts:Threading issues with <cm:managed-properties />
The managed component does not have correct values has the ConfigAdmin configuration is only taken into account later in the build. This is problematic especially when no update strategy is defined.
issueID:ARIES-879
type:Bug
changed files:
texts:<cm:cm-properties/> can't be used as a top level bean

issueID:ARIES-88
type:New Feature
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/mutable/MutableBeanMetadata.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/reflect/BeanMetadataImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ext/impl/ExtNamespaceHandler.java
blueprint/blueprint-parser/src/main/java/org/apache/aries/blueprint/ExtendedBeanMetadata.java
texts:Add field injection to Blueprint
As per discussion (1st dec) on mailing list, add field injection to blueprint.
Field injection to be enabled via custom namespace.
issueID:ARIES-880
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/XidFactoryImpl.java
texts:When recovering transactions, only recover old branches to avoid rollback of in-progress transactions

issueID:ARIES-881
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/apache/aries/transaction/internal/TransactionManagerService.java
texts:The transaction manager is very slow in low concurrency

issueID:ARIES-882
type:Bug
changed files:transaction/transaction-manager/src/main/java/org/objectweb/howl/log/Logger.java
texts:A thread is not stopped when the transaction manager is destroyed

issueID:ARIES-883
type:Bug
changed files:
texts:Upgrade to geronimo transaction manager 3.1.1

issueID:ARIES-884
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/AbstractCompendiumHandler.java
texts:ClassCastException in JMX when installing some bundles
ERROR: Bundle org.apache.aries.jmx [32] EventDispatcher: Error during dispatch. (java.lang.ClassCastException: [Ljava.lang.String; cannot be cast to java.lang.String)
java.lang.ClassCastException: [Ljava.lang.String; cannot be cast to java.lang.String
 at org.apache.aries.jmx.AbstractCompendiumHandler.addingService(AbstractCompendiumHandler.java:80)
 at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:980)
 at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
 at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:262)
 at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:234)
 at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:941)
 at org.apache.felix.framework.util.EventDispatcher$4.run(EventDispatcher.java:927)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:923)
 at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:795)
 at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)
 at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4447)
 at org.apache.felix.framework.Felix.registerService(Felix.java:3462)
 at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
 at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)
 at org.apache.felix.framework.SecurityActivator.start(SecurityActivator.java:212)
 at org.apache.felix.framework.util.SecureAction$Actions.run(SecureAction.java:1623)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:654)
 at org.apache.felix.framework.ExtensionManager.startExtensionBundle(ExtensionManager.java:450)
 at org.apache.felix.framework.Felix.installBundle(Felix.java:3004)
 at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:157)
 at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:43)
 at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
 at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
 at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
 at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)
 at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)
 at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
 at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
 at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
 at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)
 at org.apache.karaf.shell.console.jline.Console.run(Console.java:226)
 at java.lang.Thread.run(Thread.java:680)
This happen when installing the {{ mvn:org.apache.felix/org.apache.felix.framework.security/2.0.1}} bundle for example.
issueID:ARIES-885
type:Bug
changed files:
texts:In container managed mode, a single non thread safe entity manager is used to service all requests when no transaction is active
The EntityManager object is not thread safe, so the access to the shared entity manager should be synchronized.
This could eventually be made optional, but the default should be to be synchronized to avoid problems, disabling the synchronization should be an optional setting depending on which JPA provider is used.
issueID:ARIES-886
type:Improvement
changed files:
texts:Blog assembly should use OSGi 4.3
ARIES-832 pointed out that the blog assembly, and tests, should use OSGi 4.3 so they can take advantage of load-time weaving.
issueID:ARIES-887
type:Bug
changed files:
texts:destroy-method attribute not supported in bean nested in service
If we have a blueprint descriptor like this:
<service interface="...">
<bean class="..." destroy-method="..."/>
</service>
we get:
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'destroy-method' is not allowed to appear in element 'bean'.
issueID:ARIES-888
type:New Feature
changed files:transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/RecoverableConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledSession.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/SessionKey.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledConnection.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/ConnectionKey.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledProducer.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/ConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/PooledConnectionFactory.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/RecoverablePooledConnectionFactory.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledSessionEventListener.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledQueueSender.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledMessageConsumer.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledTopicPublisher.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/GenericResourceManager.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/XaConnectionPool.java
transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/XaPooledConnectionFactory.java
texts:Add a bundle to support JMS with the transaction manager

issueID:ARIES-889
type:New Feature
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
texts:Rename transaction-wrappers to transaction-jdbc to be more meaningful

issueID:ARIES-89
type:New Feature
changed files:util/src/main/java/org/apache/aries/util/filesystem/IFile.java
application/application-utils/src/main/java/org/apache/aries/application/utils/manifest/ManifestDefaultsInjector.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationContext.java
util/src/main/java/org/apache/aries/util/filesystem/IDirectory.java
application/application-api/src/main/java/org/apache/aries/application/management/BundleInfo.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ContentImpl.java
util/src/main/java/org/apache/aries/util/io/IOUtils.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/resolve/AriesApplicationResolver.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextImpl.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentMetadataFactoryImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
application/application-api/src/main/java/org/apache/aries/application/ServiceDeclaration.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ServiceDeclarationImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/ResolveConstraint.java
application/application-utils/src/main/java/org/apache/aries/application/utils/management/SimpleBundleInfo.java
application/application-api/src/main/java/org/apache/aries/application/Content.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentContent.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/BundleConverter.java
application/application-utils/src/main/java/org/apache/aries/application/impl/DeploymentContentImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/convert/ConversionException.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/runtime/LocalPlatform.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationManager.java
application/application-api/src/main/java/org/apache/aries/application/management/spi/runtime/AriesApplicationContextManager.java
util/src/main/java/org/apache/aries/util/filesystem/FileSystem.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadataFactory.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipDirectory.java
application/application-utils/src/main/java/org/apache/aries/application/utils/internal/MessageUtil.java
application/application-utils/src/main/java/org/apache/aries/application/utils/AppConstants.java
util/src/main/java/org/apache/aries/util/filesystem/impl/ZipFileImpl.java
util/src/main/java/org/apache/aries/util/filesystem/impl/DirectoryImpl.java
util/src/main/java/org/apache/aries/util/manifest/ManifestHeaderProcessor.java
util/src/main/java/org/apache/aries/util/manifest/BundleManifest.java
application/application-runtime/src/main/java/org/apache/aries/application/runtime/impl/ApplicationContextManagerImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/ManagementException.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadataFactory.java
application/application-utils/src/main/java/org/apache/aries/application/impl/ApplicationMetadataFactoryImpl.java
application/application-management/src/main/java/org/apache/aries/application/management/internal/MessageUtil.java
application/application-api/src/main/java/org/apache/aries/application/ApplicationMetadata.java
application/application-api/src/main/java/org/apache/aries/application/DeploymentMetadata.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationListener.java
util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplicationEvent.java
application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationImpl.java
application/application-api/src/main/java/org/apache/aries/application/management/AriesApplication.java
texts:Implement application support
Implement Aries application support. Additional documentation will be added to http://incubator.apache.org/aries/applications.html as we go along. Under this JIRA, we will:
Refactor application-utils into implementation and api bundles
Add support for understanding a .eba file
Add support for provisioning missing bundles
Generate default application.mf if none provided
Add hook point to call out to convert wars in a .eba into WABs
Deliver pluggable runtime support for installing/uninstalling/starting/stopping the application.
issueID:ARIES-890
type:New Feature
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/RecoverableDataSource.java
transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
texts:Add support for recovery of JDBC XA transactions
XAResources need to be registered into the TransactionManager in order to be recovered properly at restart.
issueID:ARIES-891
type:Bug
changed files:
texts:org.apache.aries.subsystem.itests.HelloWorldTest fails
The org.apache.aries.subsystem.itests.HelloWorldTest is failing.
Caused by: org.osgi.service.subsystem.SubsystemException: org.osgi.service.resolver.ResolutionException: Unable to resolve jar:file:/tmp/inputStreamExtract7190843641963851883.zip!/helloImpl.jar: missing requirement org.apache.aries.subsystem.core.archive.ImportPackageRequirement: namespace=osgi.wiring.package, attributes={}, directives=
{filter=(&(osgi.wiring.package=org.apache.aries.subsystem.itests.hello.api)(version>=0.0.0))}, resource=jar:file:/tmp/inputStreamExtract7190843641963851883.zip!/helloImpl.jar
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:381)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:358)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:96)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:87)
at org.apache.aries.subsystem.core.internal.InstallAction.createSubsystemResource(InstallAction.java:127)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:61)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:30)
at java.security.AccessController.doPrivileged(AccessController.java:202)
at org.apache.aries.subsystem.core.internal.AriesSubsystem.install(AriesSubsystem.java:250)
at org.apache.aries.subsystem.itests.SubsystemTest.installSubsystem(SubsystemTest.java:626)
at org.apache.aries.subsystem.itests.SubsystemTest.installSubsystem(SubsystemTest.java:621)
at org.apache.aries.subsystem.itests.SubsystemTest.installSubsystemFromFile(SubsystemTest.java:609)
at org.apache.aries.subsystem.itests.SubsystemTest.installSubsystemFromFile(SubsystemTest.java:601)
at org.apache.aries.subsystem.itests.HelloWorldTest.testHello(HelloWorldTest.java:33)
... 25 more
Caused by: org.osgi.service.resolver.ResolutionException: Unable to resolve jar:file:/tmp/inputStreamExtract7190843641963851883.zip!/helloImpl.jar: missing requirement org.apache.aries.subsystem.core.archive.ImportPackageRequirement: namespace=osgi.wiring.package, attributes={}, directives={filter=(&(osgi.wiring.package=org.apache.aries.subsystem.itests.hello.api)(version>=0.0.0))}
, resource=jar:file:/tmp/inputStreamExtract7190843641963851883.zip!/helloImpl.jar
at org.apache.felix.resolver.Candidates.populateResource(Candidates.java:285)
at org.apache.felix.resolver.Candidates.populate(Candidates.java:153)
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:96)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeDependencies(SubsystemResource.java:375)
... 38 more
issueID:ARIES-892
type:Bug
changed files:
texts:org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4ATest fails
The org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4ATest within org.apache.aries.subsystem.ctt.itests is failing.
Caused by: java.lang.AssertionError: Wrong number of bundles in the Root subsystem expected:<23> but was:<25>
at org.junit.Assert.fail(Assert.java:74)
at org.junit.Assert.failNotEquals(Assert.java:448)
at org.junit.Assert.assertEquals(Assert.java:102)
at org.junit.Assert.assertEquals(Assert.java:323)
at org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4ATest.verifyNoUnexpectedBundlesProvisioned(SubsystemDependency_4ATest.java:110)
... 25 more
issueID:ARIES-893
type:Bug
changed files:
texts:org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4CTest fails
The org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4ATest within org.apache.aries.subsystem.ctt.itests is failing.
Caused by: java.lang.AssertionError: Wrong number of bundles in the Root subsystem. Expected 23 bundles: [org.eclipse.osgi, org.ops4j.pax.exam, org.ops4j.pax.exam.junit.extender, org.ops4j.pax.exam.junit.extender.impl, org.ops4j.pax.logging.pax-logging-api, org.ops4j.pax.logging.pax-logging-service, org.ops4j.pax.url.mvn, org.eclipse.osgi.services, org.eclipse.equinox.region, org.apache.aries.testsupport.unit, org.apache.aries.application.api, org.apache.aries.util, org.apache.aries.application.utils, org.apache.felix.bundlerepository, org.apache.felix.resolver, org.eclipse.equinox.coordinator, org.eclipse.equinox.event, org.apache.aries.subsystem.api, org.apache.aries.subsystem.core, com.springsource.org.junit, org.ops4j.pax.exam.rbc, org.osgi.service.subsystem.region.context.0, pax-exam-probe] Found 25 bundles: [org.eclipse.osgi_3.8.0.v20120312-2035 [0], org.ops4j.pax.exam_1.2.3 [1], org.ops4j.pax.exam.junit.extender_1.2.3 [2], org.ops4j.pax.exam.junit.extender.impl_1.2.3 [3], wrap_mvn_org.ops4j.pax.exam_pax-exam-junit_1.2.3_0.0.0 [4], org.ops4j.pax.logging.pax-logging-api_1.4.0 [5], org.ops4j.pax.logging.pax-logging-service_1.4.0 [6], org.ops4j.pax.url.mvn_1.1.2 [7], org.eclipse.osgi.services_3.3.0.v20111117-1210 [8], org.eclipse.equinox.region_1.1.0.v20120227-1635 [9], org.apache.aries.testsupport.unit_0.5.0.SNAPSHOT [10], org.apache.aries.application.api_1.0.0.SNAPSHOT [11], org.apache.aries.util_1.0.0.SNAPSHOT [12], org.apache.aries.application.utils_1.0.0.SNAPSHOT [13], org.apache.felix.bundlerepository_1.6.4 [14], org.apache.felix.resolver_0.1.0.r1336820 [15], org.eclipse.equinox.coordinator_1.1.0.v20120219-1616 [16], org.eclipse.equinox.event_1.2.100.v20111010-1614 [17], org.apache.aries.subsystem.api_0.1.0.SNAPSHOT [18], org.apache.aries.subsystem.core_0.1.0.SNAPSHOT [19], org.apache.aries.subsystem.itest.interfaces_0.1.0.SNAPSHOT [20], com.springsource.org.junit_4.4.0 [21], org.ops4j.pax.exam.rbc_1.2.3 [22], org.osgi.service.subsystem.region.context.0_1.0.0 [23], pax-exam-probe_0.0.0 [24]]
at org.junit.Assert.fail(Assert.java:74)
at org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4CTest.checkSubsystemContents(SubsystemDependency_4CTest.java:133)
at org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4CTest.verifyNoUnexpectedBundlesProvisioned(SubsystemDependency_4CTest.java:123)
... 25 more
issueID:ARIES-894
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/utils/ReflectionUtils.java
texts:Unable to access public methods overriden/implemented in a protected class
I’m using apache aries 0.3.2 and I was trying to lookup a script in the bundle like this:
<bean id="script" factory-ref="blueprintBundle" factory-method="getEntry">
<argument value="scripts/myScript"/>
</bean>
But it fails with this exception:
java.lang.IllegalAccessException: Class org.apache.aries.blueprint.utils.ReflectionUtils can not access a member of class org.apache.felix.framework.BundleImpl with modifiers "public"
at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65)[:1.6.0_32]
at java.lang.reflect.Method.invoke(Method.java:588)[:1.6.0_32]
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:225)[10:org.apache.aries.blueprint:0.3.2]
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838)[10:org.apache.aries.blueprint:0.3.2]
at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:236)[10:org.apache.aries.blueprint:0.3.2]
... 15 more
The problem seems to be that the factory method is resolved against the implementation class BundleImpl which is package private and not the interface org.osgi.framework.Bundle which is public.
There is a workaround by injecting the bundle in a wrapper bean and using this bean to do the lookup.
issueID:ARIES-895
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/RequireCapabilityRequirement.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Missing filter directive on Require-Capability does not translate to a filter value of <namespace>=*.
Currently, Subsystems translates a bundle's missing Require-Capability filter directive as <namespace>=* for the purpose of computing the subsystem's Require-Capability header. For example,
Require-Capability: y
in a bundle's manifest, would translate to
Require-Capability: y;filter:=(y=*)
in the subsystem's manifest. This is incorrect because (1) a requirement with a missing filter directive should match any capability from the same namespace and (2) capabilities are not required to use the namespace as an attribute. The current translation would not match a capability from the same namespace if said capability did not use the namespace as an attribute.
issueID:ARIES-896
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/ExtendedBlueprintContainer.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractTracked.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:Deadlock with blueprint services
"Blueprint Extender: 3" daemon prio=5 tid=7febbc25b800 nid=0x10a56f000 in .wait() [10a56c000]
   java.lang.Thread.State: WAITING (on object monitor)
 at java.lang.Object.wait(Native Method)
 - waiting on <7e0099538> (a org.apache.felix.framework.ServiceRegistry)
 at java.lang.Object.wait(Object.java:485)
 at org.apache.felix.framework.ServiceRegistry.ungetService(ServiceRegistry.java:349)
 - locked <7e0099538> (a org.apache.felix.framework.ServiceRegistry)
 at org.apache.felix.framework.Felix.ungetService(Felix.java:3118)
 at org.apache.felix.framework.BundleContextImpl.ungetService(BundleContextImpl.java:342)
 at org.apache.aries.blueprint.container.ReferenceRecipe.bind(ReferenceRecipe.java:142)
 - locked <7f9bd4c10> (a java.lang.Object)
 at org.apache.aries.blueprint.container.ReferenceRecipe.retrack(ReferenceRecipe.java:112)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.updateListeners(AbstractServiceReferenceRecipe.java:319)
 at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:91)
 at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
 - locked <7f9bd58a8> (a java.lang.Object)
 at org.apache.aries.blueprint.di.RefRecipe.internalCreate(RefRecipe.java:60)
 at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
 - locked <7f9bd58a8> (a java.lang.Object)
 at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
 - locked <7f9bd58a8> (a java.lang.Object)
 at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
 at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
 at org.apache.aries.blueprint.container.ServiceRecipe.createRecipe(ServiceRecipe.java:370)
 at org.apache.aries.blueprint.container.ServiceRecipe.createExplicitDependencies(ServiceRecipe.java:359)
 at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:154)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.notifySatisfaction(BlueprintContainerImpl.java:604)
 - locked <7f9bd37e0> (a org.apache.aries.blueprint.container.ServiceRecipe)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.setSatisfied(AbstractServiceReferenceRecipe.java:305)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceAdded(AbstractServiceReferenceRecipe.java:262)
 at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceChanged(AbstractServiceReferenceRecipe.java:245)
 at org.apache.felix.framework.util.EventDispatcher$5.run(EventDispatcher.java:852)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:848)
 at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:721)
 at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:649)
 at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3857)
 at org.apache.felix.framework.Felix.access$000(Felix.java:89)
 at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:739)
 at org.apache.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:107)
 at org.apache.felix.framework.Felix.registerService(Felix.java:2946)
 at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:251)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl$3.run(BlueprintContainerImpl.java:415)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl$3.run(BlueprintContainerImpl.java:413)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:413)
 at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:184)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:654)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:337)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:233)
 - locked <7e02a0dc0> (a java.util.concurrent.atomic.AtomicBoolean)
 - locked <7e02a0db0> (a java.util.concurrent.atomic.AtomicBoolean)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
 at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
 at java.util.concurrent.FutureTask.run(FutureTask.java:138)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
 at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
 at java.lang.Thread.run(Thread.java:680)

"Blueprint Extender: 1" daemon prio=5 tid=7febbb392000 nid=0x10a369000 waiting for monitor entry [10a366000]
   java.lang.Thread.State: BLOCKED (on object monitor)
 at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:247)
 - waiting to lock <7f9bd58a8> (a java.lang.Object)
 at org.apache.aries.blueprint.container.ServiceRecipe.getService(ServiceRecipe.java:327)
 at org.apache.aries.blueprint.container.ServiceRecipe$TriggerServiceFactory.getService(ServiceRecipe.java:430)
 at org.apache.felix.framework.ServiceRegistrationImpl.getFactoryUnchecked(ServiceRegistrationImpl.java:310)
 at org.apache.felix.framework.ServiceRegistrationImpl.access$100(ServiceRegistrationImpl.java:37)
 at org.apache.felix.framework.ServiceRegistrationImpl$ServiceFactoryPrivileged.run(ServiceRegistrationImpl.java:374)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.felix.framework.ServiceRegistrationImpl.getService(ServiceRegistrationImpl.java:216)
 at org.apache.felix.framework.ServiceRegistry.getService(ServiceRegistry.java:297)
 at org.apache.felix.framework.Felix.getService(Felix.java:3106)
 at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:329)
 at org.osgi.util.tracker.ServiceTracker.addingService(ServiceTracker.java:442)
 at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:896)
 at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)
 at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:233)
 at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:840)
 at org.apache.felix.framework.util.EventDispatcher$5.run(EventDispatcher.java:852)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:848)
 at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:721)
 at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:649)
 at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3857)
 at org.apache.felix.framework.Felix.access$000(Felix.java:89)
 at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:739)
 at org.apache.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:107)
 at org.apache.felix.framework.Felix.registerService(Felix.java:2946)
 at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:251)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl$3.run(BlueprintContainerImpl.java:415)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl$3.run(BlueprintContainerImpl.java:413)
 at java.security.AccessController.doPrivileged(Native Method)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:413)
 at org.apache.aries.blueprint.container.ServiceRecipe.register(ServiceRecipe.java:184)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerServices(BlueprintContainerImpl.java:654)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:337)
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:233)
 - locked <7e02a13d8> (a java.util.concurrent.atomic.AtomicBoolean)
 - locked <7e02a13c8> (a java.util.concurrent.atomic.AtomicBoolean)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
 at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
 at java.util.concurrent.FutureTask.run(FutureTask.java:138)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
 at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
 at java.lang.Thread.run(Thread.java:680)
issueID:ARIES-897
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
texts:The ReferenceRecipe sometimes unget the tracked service for no reason
Service tracking count is used to order the bundles when stopping those.
If the order is wrong, it can cause some bundles to go into the default 5 minutes timeout when trying to access services.
issueID:ARIES-898
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
texts:The blueprint container is not correctly cleaned when a mandatory namespace is unregistered

issueID:ARIES-899
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
texts:Possible concurrent access to the namespace handler registry

issueID:ARIES-9
type:Bug
changed files:blueprint/examples/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/FooRegistrationListener.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Registration callback called with null service registration properties
A service with explicitly set auto-export attribute might cause the registration callback to be invoked with null service registration properties (if auto-export is set to anything else besides 'disabled'). For example:
<service id="fooService" ref="fooBean" auto-export="all-classes">
<registration-listener
registration-method="register" unregistration-method="unregister">
<bean class="org.apache.geronimo.osgi.RegistrationListener"/>
</registration-listener>
</service>
issueID:ARIES-90
type:Improvement
changed files:
texts:Create samples project
Samples for each of the modules
issueID:ARIES-900
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
texts:Unresolvable root subsystem should have no effect on the system.
For consistency, the root subsystem should still follow the same event pattern for state transitions as other subsystems. Consequently, the root subsystem will still enter the RESOLVING and RESOLVED states, but the resolution work will not actually be done.
The root subsystem will fail to resolve, for example, whenever a bundle already exists in the framework that is missing a required dependency. This should not prevent subsystems from functioning.
issueID:ARIES-901
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Version attribute not applied to multiple package names separated by semicolons in import package header.
The specified version attribute should be applied to all packages listed in the associated path of the ImportPackage header. Packages are in the same path when they are separated by semicolons as opposed to commas. For example,
org.foo;org.bar;org.foo.bar;version=1.3
should result in all three listed packages being associated with version 1.3 or greater. Currently, the first two will be associated with version 0.0.
org.foo,org.bar,org.foo.bar;version=1.3
In this case, only org.foo.bar is associated with version 1.3 or greater while the first two are version 0.0.
issueID:ARIES-902
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceUninstaller.java
texts:Reference counts not being checked before removing constituent relationships between the "provisioned to" subsystem and bundle resources.
When uninstalling a subsystem, the reference count is not being checked before removing the constituent relationships between the "provisioned to" subsystem and bundle resources. If the reference count is not equal to zero, the constituent relationships should not be removed. For example, the bundle resource might be a dependency of the uninstalling subsystem and a content resource of the "provisioned to" subsystem.
issueID:ARIES-905
type:Bug
changed files:
texts:Test failures (with current snapshots):
See https://builds.apache.org/job/AriesWithSnapshotDependencies/196. Now that the build which tests all the current snapshots against each other is going, it's exposed some test failures in blueprint:
Test Result (2 failures / +2)
org.apache.aries.blueprint.itests.TestReferences.testUnaryReference [equinox\/3.5.0]
org.apache.aries.blueprint.itests.TestReferences.testListReferences [equinox\/3.5.0]
To reproduce, change the blueprint-core dependency in blueprint-bundle to 1.0.1-SNAPSHOT, and change the blueprint-bundle dependency in blueprint-itests to 1.0.1-SNAPSHOT (but don't check those changes in, that's what the test build is for).
It looks like the problem started from r1368206, ARIES-896. The problem changes were in the AbstractServiceReferenceRecipe class, which now handles service events asynchronously. Since TestReferences doesn't pause for this asynchronous handling, we get failures.
issueID:ARIES-907
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ReferenceDirective.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DirectiveFactory.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AriesSubsystemParentsHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
texts:Persisted, unscoped subsystems are not being correctly started on restarts.

issueID:ARIES-908
type:Bug
changed files:
texts:Allow Blueprint Services registered with concrete classes with no zero arg constructors, to be proxied
A recent JVM security fix broke any Blueprint services that were registered using concrete classes that didn't have a zero arg constructor. In this case an exception was thrown.
This fix re-instates this functionality.
issueID:ARIES-909
type:Improvement
changed files:
texts:Itest for blueprint with subsystem
Add a sniff test to the subsystems itest suite that tests that a blueprint bundle within an application subsystem works correctly.
The bulk of the work needed for this has all ready been done under Aries-777, by adding BundleHookBundleTracker to RecursiveBundleTracker.
issueID:ARIES-91
type:Bug
changed files:
texts:Enable blueprint build to use org.osgi.service.cm version 1.2.0 onwards
Fix the pom to go back one level further than it does at the moment
issueID:ARIES-910
type:Task
changed files:
texts:Integrate Subsystems into the Aries build.
This task will track any work done as part of integrating Subsystems into the Aries build.
issueID:ARIES-911
type:Bug
changed files:
texts:application-modeller-common-test pom should depend on application-modeller-standalone-1.0.1-SNAPSHOT.jar
While running the Aries build with an empty .m2 local repository, I encountered the following error.
------------------------------------------------------------------------
[INFO] Building Apache Aries Application Modelling tests 1.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[WARNING] The POM for org.apache.aries.application:application-modeller-standalone:jar:1.0.0-SNAPSHOT is missing, no dependency information available
[ERROR] Failed to execute goal on project application-modeller-common-test: Could not resolve dependencies for project org.apache.aries.application:application-modeller-common-test:jar:1.0.0-SNAPSHOT: Failure to find org.apache.aries.application:application-modeller-standalone:jar:1.0.0-SNAPSHOT in http://snapshots.repository.codehaus.org was cached in the local repository, resolution will not be reattempted until the update interval of codehaus.snapshots has elapsed or updates are forced -> [Help 1]
The pom of application-modeller-common-test references version 1.0.0-SNAPSHOT of application-modeller-standalone but I believe it should reference version 1.0.1-SNAPSHOT, which is provided when application-modeller-standalone is built.
issueID:ARIES-912
type:Bug
changed files:
texts:samples project fails to build with clean m2 repo
[ERROR] Failed to execute goal on project org.apache.aries.samples.blueprint.idverifier.assembly: Could not resolve dependencies for project org.apache.aries.samples.blueprint.idverifier:org.apache.aries.samples.blueprint.idverifier.assembly:pom:1.0.0-SNAPSHOT: Could not find artifact org.apache.aries.jmx:org.apache.aries.jmx.blueprint:jar:1.0.0-SNAPSHOT in codehaus.snapshots (http://snapshots.repository.codehaus.org) -> [Help 1]
Looks like the value of the <ariesJmxBlueprintVersion> element within samples/pom.xml needs to be changed to 1.0.0.
issueID:ARIES-915
type:Bug
changed files:
texts:The CM module for managed-service-factory does not perform the update correct with embedded managed-properties
I'm using the following test case:
<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0">
    <cm:managed-service-factory id="testfactory"
        factory-pid="testfactory" interface="test.FactoryTest"
        auto-export="all-classes">
        <cm:managed-component
            class="test.FactoryTest"
            init-method="init">
            <cm:managed-properties persistent-id="" update-strategy="component-managed" update-method="update"/>
        </cm:managed-component>
    </cm:managed-service-factory>
</blueprint>
The testclass just print out to the log:
public class FactoryTest {

    private static final Logger LOG = LoggerFactory.getLogger(FactoryTest.class);

    public FactoryTest() {
        LOG.info("{}: FactoryTest.FactoryTest()", System.identityHashCode(this));
    }

    public void init() {
        // LOG.info("{}: FactoryTest.init()", System.identityHashCode(this));
    }

    public void update(Map<String, ?> props) {
        LOG.info("{}: FactoryTest.update() props = {}", System.identityHashCode(this), props);
    }
}
The logfile looks like this, I have reodereded the log output so each instance is one block:
karaf@root> log:display
2012-09-04 09:36:30,660 | INFO  | rint Extender: 2 | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 30590872: FactoryTest.FactoryTest()
2012-09-04 09:36:30,675 | INFO  | Thread-91        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 30590872: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo4, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-4.cfg, service.pid=testfactory.8e97399a-940e-49c3-ae75-3e720951774a}
2012-09-04 09:36:30,677 | INFO  | Thread-92        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 30590872: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo3, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-3.cfg, service.pid=testfactory.3c44fb7d-6aa2-48e6-8050-1fac3c56f9b1}
2012-09-04 09:36:30,688 | INFO  | Thread-93        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 30590872: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,697 | INFO  | Thread-94        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 30590872: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,699 | INFO  | Thread-96        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 30590872: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo1, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-1.cfg, service.pid=testfactory.c5b988ec-8747-4354-84b4-5613a60b6ab1}
2012-09-04 09:36:30,703 | INFO  | Thread-95        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 30590872: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo3, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-3.cfg, service.pid=testfactory.3c44fb7d-6aa2-48e6-8050-1fac3c56f9b1}
2012-09-04 09:36:30,703 | INFO  | Thread-95        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 7131715:  FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo3, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-3.cfg, service.pid=testfactory.3c44fb7d-6aa2-48e6-8050-1fac3c56f9b1}

2012-09-04 09:36:30,668 | INFO  | rint Extender: 2 | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 7131715:  FactoryTest.FactoryTest()
2012-09-04 09:36:30,675 | INFO  | Thread-91        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 7131715:  FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo4, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-4.cfg, service.pid=testfactory.8e97399a-940e-49c3-ae75-3e720951774a}
2012-09-04 09:36:30,677 | INFO  | Thread-92        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 7131715:  FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo3, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-3.cfg, service.pid=testfactory.3c44fb7d-6aa2-48e6-8050-1fac3c56f9b1}
2012-09-04 09:36:30,688 | INFO  | Thread-93        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 7131715:  FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,697 | INFO  | Thread-94        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 7131715:  FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,701 | INFO  | Thread-96        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 7131715:  FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo1, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-1.cfg, service.pid=testfactory.c5b988ec-8747-4354-84b4-5613a60b6ab1}

2012-09-04 09:36:30,671 | INFO  | rint Extender: 2 | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 21655743: FactoryTest.FactoryTest()
2012-09-04 09:36:30,699 | INFO  | Thread-96        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 21655743: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo1, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-1.cfg, service.pid=testfactory.c5b988ec-8747-4354-84b4-5613a60b6ab1}
2012-09-04 09:36:30,687 | INFO  | Thread-93        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 21655743: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,697 | INFO  | Thread-94        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 21655743: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,703 | INFO  | Thread-95        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 21655743: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo3, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-3.cfg, service.pid=testfactory.3c44fb7d-6aa2-48e6-8050-1fac3c56f9b1}

2012-09-04 09:36:30,679 | INFO  | rint Extender: 2 | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 20153007: FactoryTest.FactoryTest()
2012-09-04 09:36:30,688 | INFO  | Thread-93        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 20153007: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,698 | INFO  | Thread-94        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 20153007: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,701 | INFO  | Thread-96        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 20153007: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo1, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-1.cfg, service.pid=testfactory.c5b988ec-8747-4354-84b4-5613a60b6ab1}
2012-09-04 09:36:30,704 | INFO  | Thread-95        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 20153007: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo3, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-3.cfg, service.pid=testfactory.3c44fb7d-6aa2-48e6-8050-1fac3c56f9b1}

2012-09-04 09:36:30,681 | INFO  | Pid=testfactory) | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 17973749: FactoryTest.FactoryTest()
2012-09-04 09:36:30,698 | INFO  | Thread-94        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 17973749: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo2, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-2.cfg, service.pid=testfactory.139e87cd-7f73-4dab-8289-af5e6be91ba5}
2012-09-04 09:36:30,701 | INFO  | Thread-96        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 17973749: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo1, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-1.cfg, service.pid=testfactory.c5b988ec-8747-4354-84b4-5613a60b6ab1}
2012-09-04 09:36:30,703 | INFO  | Thread-95        | FactoryTest                 | 139 - test - 0.0.4.SNAPSHOT | 17973749: FactoryTest.update() props = {service.factoryPid=testfactory, hallo=hallo3, felix.fileinstall.filename=file:/tmp/apache-karaf-2.2.8/etc/testfactory-3.cfg, service.pid=testfactory.3c44fb7d-6aa2-48e6-8050-1fac3c56f9b1}

karaf@root>
The Problem is, that the update method is called multiple times (from different threads) fore each instance, even if this configuration is not related to this component!
When enabling debug output for the cm component you see some messages like this (it is the same for each distinct component):
CmManagedProperties              | 9 - org.apache.aries.blueprint - 0.3.2 | Configuration updated for bean=.component-1 / pid=
It seems as if the (automatic generated?) name for the bean should be component-1, component-2, component-3 or something but is infact always component-1 so all existing components are called.
Beside this, the method 'protected void updated(String pid, Dictionary props)' should be syncronized since it might be called from differen threads (osgi/blueprint/internal...).
I'm not sure if the 0.2 and 1.0 version is also affected by this.
issueID:ARIES-918
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
texts:Start operations on the root subsystem should not affect its constituent bundles.
Currently, all operations but start do not affect bundle constituents of the root subsystem. The same should apply to the start operation. Root operations should not affect bundles in the root region because those bundles are either (1) intended to be outside the scope of the subsystems API altogether, or (2) provisioned dependencies of child subsystems, in which case they will be affected by operations performed on the dependent children.
issueID:ARIES-919
type:Bug
changed files:
texts:Blueprint HelloWorld sample broken
It looks like changes were accidentally committed as part of SPI-fly refactoring in April last year which broke the Blueprint HelloWorld sample. The tests also didn't notice the sample was broken, so we could use slightly more robust tests than the current ones.
issueID:ARIES-92
type:New Feature
changed files:jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPReferenceListener.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPIdRefMetadata.java
jmx/jmx-blueprint-api/src/main/java/org/apache/aries/jmx/blueprint/JmxConstants.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/TransferObject.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPMapMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPServiceMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPReferenceMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPPropsMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPBeanProperty.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPRefMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPRegistrationListener.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/BlueprintState.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPTarget.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPBeanArgument.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPValueMetadata.java
jmx/jmx-blueprint-api/src/main/java/org/apache/aries/jmx/blueprint/BlueprintMetadataMBean.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/BlueprintMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPServiceReferenceMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPCollectionMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPNullMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/OSGiBlueprintEvent.java
jmx/jmx-blueprint-api/src/main/java/org/apache/aries/jmx/blueprint/BlueprintStateMBean.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/Util.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPMapEntry.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPComponentMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPBeanMetadata.java
jmx/jmx-blueprint-api/src/main/java/org/apache/aries/jmx/blueprint/Item.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPNonNullMetadata.java
jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/codec/BPReferenceListMetadata.java
texts:Contribute Blueprint MBeans to Aries
The codes are in my sandbox of Geronimo community:
https://svn.apache.org/repos/asf/geronimo/sandbox/rex
Please help svn mv/cp, thanks very much!
issueID:ARIES-920
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
texts:Subsystems fails OSGi secure CT.
Subsystems is failing two of the tests in the OSGi secure CT: testAllowStart and testAllowStop.
The calls to setAutoStart within AriesSubsystem's start and stop methods must be privileged.
issueID:ARIES-921
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:java.lang.IllegalStateException: Orphaned bundle revision detected: org.eclipse.osgi_3.8.0.v20120529-1548
Stack Dump = org.osgi.framework.ServiceException: Exception in org.apache.aries.subsystem.core.internal.BundleEventHook.event()
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1247)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHooksPrivileged(ServiceRegistry.java:1222)
at org.eclipse.osgi.framework.internal.core.Framework.notifyEventHooksPrivileged(Framework.java:1603)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1558)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1505)
at org.eclipse.osgi.framework.internal.core.Framework.installWorker(Framework.java:906)
at org.eclipse.osgi.framework.internal.core.Framework.installBundle(Framework.java:841)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.installBundle(BundleContextImpl.java:137)
at org.eclipse.osgi.internal.composite.CompositeConfigurator.installCompositeBundle(CompositeConfigurator.java:121)
at org.apache.aries.application.runtime.framework.BundleFrameworkFactoryImpl.createBundleFramework(BundleFrameworkFactoryImpl.java:41)
at Proxy4c4dbc3f_cb7e_44a3_8e8c_10f39cb3c0d6.createBundleFramework(Unknown Source)
at Proxy4547fba1_bc2e_4c7f_a9b4_fc4e150750b2.createBundleFramework(Unknown Source)
at org.apache.aries.application.runtime.framework.management.SharedBundleFramework.createSharedBundleFramework(SharedBundleFramework.java:77)
at org.apache.aries.application.runtime.framework.management.SharedBundleFramework.getSharedBundleFramework(SharedBundleFramework.java:108)
at org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl.init(BundleFrameworkManagerImpl.java:97)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:238)
at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:954)
at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:708)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:820)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:783)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
at org.apache.aries.blueprint.di.RefRecipe.internalCreate(RefRecipe.java:62)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:106)
at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:929)
at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:903)
at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:884)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:816)
at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:783)
at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:648)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:340)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:242)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalStateException: Orphaned bundle revision detected: org.eclipse.osgi_3.8.0.v20120529-1548
at org.apache.aries.subsystem.core.internal.BundleEventHook.handleExplicitlyInstalledBundleBundleContext(BundleEventHook.java:56)
at org.apache.aries.subsystem.core.internal.BundleEventHook.handleInstalledEvent(BundleEventHook.java:92)
at org.apache.aries.subsystem.core.internal.BundleEventHook.event(BundleEventHook.java:40)
at org.eclipse.osgi.framework.internal.core.Framework$10.call(Framework.java:1606)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1239)
... 52 more
issueID:ARIES-922
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:NPE in SubsystemResource.findContent
Stack Dump = org.osgi.service.coordinator.CoordinationException: Coordination has failed
at org.eclipse.equinox.coordinator.CoordinationImpl.checkTerminated(CoordinationImpl.java:393)
at org.eclipse.equinox.coordinator.CoordinationImpl.terminate(CoordinationImpl.java:401)
at org.eclipse.equinox.coordinator.CoordinationImpl.end(CoordinationImpl.java:152)
at org.eclipse.equinox.coordinator.CoordinationReferent.end(CoordinationReferent.java:38)
at org.apache.aries.subsystem.core.internal.Subsystems.getRootSubsystem(Subsystems.java:162)
at org.apache.aries.subsystem.core.internal.Activator.activate(Activator.java:155)
at org.apache.aries.subsystem.core.internal.Activator.addingService(Activator.java:240)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:932)
at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:894)
at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:107)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:451)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:950)
at org.apache.felix.resolver.Activator.start(Activator.java:43)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:711)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:702)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:683)
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:381)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)
at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1177)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:438)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:1)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:340)
Caused by: org.osgi.service.subsystem.SubsystemException: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.AriesSubsystem.getResource(AriesSubsystem.java:359)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.installAriesSubsystem(SubsystemResourceInstaller.java:97)
at org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.install(SubsystemResourceInstaller.java:37)
at org.apache.aries.subsystem.core.internal.Subsystems.getRootSubsystem(Subsystems.java:158)
... 34 more
Caused by: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.SubsystemResource.findContent(SubsystemResource.java:534)
at org.apache.aries.subsystem.core.internal.SubsystemResource.computeContentResources(SubsystemResource.java:333)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:110)
at org.apache.aries.subsystem.core.internal.AriesSubsystem.getResource(AriesSubsystem.java:356)
... 37 more
issueID:ARIES-923
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
texts:A service proxy obtained from a reference list can return a null service, leading to NPE

issueID:ARIES-924
type:Bug
changed files:transaction/transaction-jdbc/src/main/java/org/apache/aries/transaction/jdbc/internal/Activator.java
texts:Deadlock in transaction wrappers BundleActivator
There is a deadlock condition in org.apache.aries.transaction.jdbc.Activator. It is possible for start() and serviceChanged() to both call open() on the Activator's ServiceTracker such that the start() thread has acquired the transaction.wrappers bundle lock and needs to acquire the ServiceTracker's monitor, and the serviceChanged() thread holds the ServiceTracker's monitor and needs to acquire the transaction.wrappers bundle lock. We are seeing this particularly when running pax exam tests on our integration test server.
Simply synchronizing all of the Activator's methods seems like a reasonable fix.
Sample stack traces are:
"Thread-6" daemon prio=10 tid=0x00007f97e80b7800 nid=0x1a7c waiting for monitor entry [0x00007f97fd1f2000]
   java.lang.Thread.State: BLOCKED (on object monitor)
         at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:299)
         - waiting to lock <0x00000000c4c06558> (a org.osgi.util.tracker.ServiceTracker)
         at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:273)
         at org.apache.aries.transaction.jdbc.Activator.start(Activator.java:58)
         at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:629)
         at org.apache.felix.framework.Felix.activateBundle(Felix.java:1904)
         at org.apache.felix.framework.Felix.startBundle(Felix.java:1822)
         at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:927)
         at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:914)
         at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)
         at org.apache.karaf.features.internal.FeaturesServiceImpl$1.run(FeaturesServiceImpl.java:988)

"CM Configuration Updater (ManagedService Update: pid=org.apache.aries.transaction)" daemon prio=10 tid=0x00007f97e407d800 nid=0x1a5a in Object.wait() [0x00007f9818324000]
   java.lang.Thread.State: WAITING (on object monitor)
         at java.lang.Object.wait(Native Method)
         - waiting on <0x00000000c403c2e8> (a [Ljava.lang.Object;)
         at java.lang.Object.wait(Object.java:503)
         at org.apache.felix.framework.Felix.acquireBundleLock(Felix.java:4922)
         - locked <0x00000000c403c2e8> (a [Ljava.lang.Object;)
         at org.apache.felix.framework.Felix.addServiceListener(Felix.java:2814)
         at org.apache.felix.framework.BundleContextImpl.addServiceListener(BundleContextImpl.java:246)
         at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:308)
         - locked <0x00000000c4c34e48> (a org.osgi.util.tracker.ServiceTracker$Tracked)
         - locked <0x00000000c4c06558> (a org.osgi.util.tracker.ServiceTracker)
         at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:273)
         at org.apache.aries.transaction.jdbc.Activator.serviceChanged(Activator.java:118)
         at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:871)
         at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:733)
         at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:662)
         at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:3890)
         at org.apache.felix.framework.Felix.access$000(Felix.java:79)
         at org.apache.felix.framework.Felix$2.serviceChanged(Felix.java:728)
         at org.apache.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:107)
         at org.apache.felix.framework.Felix.registerService(Felix.java:2979)
         at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:313)
         at org.apache.aries.transaction.TransactionManagerService.start(TransactionManagerService.java:157)
         at org.apache.aries.transaction.Activator.updated(Activator.java:63)
         - locked <0x00000000c4be3b90> (a org.apache.aries.transaction.Activator)
         at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.run(ConfigurationManager.java:1160)
         at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)
         at java.lang.Thread.run(Thread.java:722)
issueID:ARIES-925
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
texts:Out of memory error in Apache Aries build.
Every so often, an OOM error will occur during the Subsystem build in the Apache build environment. This causes the Aries build to fail.
java.lang.OutOfMemoryError: Java heap space
at java.util.Arrays.copyOf(Arrays.java:2882)
at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:515)
at java.lang.StringBuffer.append(StringBuffer.java:306)
at java.io.StringWriter.write(StringWriter.java:77)
at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1129)
at org.apache.commons.io.IOUtils.copy(IOUtils.java:1104)
at org.apache.commons.io.IOUtils.copy(IOUtils.java:1050)
at org.apache.commons.io.IOUtils.copy(IOUtils.java:1075)
at org.apache.commons.io.IOUtils.toString(IOUtils.java:382)
at org.apache.commons.io.FileUtils.readFileToString(FileUtils.java:1103)
at org.apache.commons.io.FileUtils.readFileToString(FileUtils.java:1120)
at hudson.tasks.junit.SuiteResult.<init>(SuiteResult.java:195)
at hudson.tasks.junit.SuiteResult.parseSuite(SuiteResult.java:130)
at hudson.tasks.junit.SuiteResult.parse(SuiteResult.java:115)
at hudson.tasks.junit.TestResult.parse(TestResult.java:227)
at hudson.tasks.junit.TestResult.parse(TestResult.java:163)
at hudson.maven.reporters.SurefireArchiver.postExecute(SurefireArchiver.java:141)
at hudson.maven.Maven2Builder.postExecute(Maven2Builder.java:155)
at hudson.maven.MavenBuilder$Adapter.postExecute(MavenBuilder.java:310)
at hudson.maven.agent.PluginManagerInterceptor$1MojoIntercepterImpl.callPost(PluginManagerInterceptor.java:170)
at hudson.maven.agent.PluginManagerInterceptor.executeMojo(PluginManagerInterceptor.java:183)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
at org.apache.maven.lifecycle.LifecycleExecutorInterceptor.execute(LifecycleExecutorInterceptor.java:65)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
When this condition occurs, many of the subsystem itests have unusually long execution times and fail.
Running org.apache.aries.subsystem.itests.FeatureTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 850.841 sec
Running org.apache.aries.subsystem.itests.OptionalDependenciesTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 23.537 sec
Running org.apache.aries.subsystem.itests.ProvisionPolicyTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 85.089 sec
Running org.apache.aries.subsystem.itests.ApplicationTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 52.62 sec
Running org.apache.aries.subsystem.itests.HelloWorldTest
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 18.687 sec <<< FAILURE!
Running org.apache.aries.subsystem.itests.AutostartTest
Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 130.261 sec <<< FAILURE!
Running org.apache.aries.subsystem.itests.DependencyLifeCycleTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 69.84 sec
Running org.apache.aries.subsystem.itests.RootSubsystemTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 142.499 sec
Running org.apache.aries.subsystem.itests.CompositeTest
Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 77.371 sec <<< FAILURE!
Running org.apache.aries.subsystem.itests.BasicTest
Tests run: 3, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 54.755 sec <<< FAILURE!
Running org.apache.aries.subsystem.itests.DynamicImportTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 35.393 sec
Running org.apache.aries.subsystem.itests.InstallTest
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 17.499 sec <<< FAILURE!
Running org.apache.aries.subsystem.itests.NoRequirementFilterTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 18.05 sec
Running org.apache.aries.subsystem.itests.BlueprintTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 22.572 sec
Running org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4BTest
Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 71.278 sec <<< FAILURE!
Running org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E1Test
Tests run: 10, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 178.338 sec <<< FAILURE!
Running org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4CTest
Tests run: 4, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 74.682 sec <<< FAILURE!
Running org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4ATest
Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 71.003 sec <<< FAILURE!
Running org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E2Test
Tests run: 9, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 159.498 sec <<< FAILURE!
Running org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4DTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 74.689 sec
This issue appears to be caused by files not being properly closed during test execution.
Tests in error:
testHello [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.itests.HelloWorldTest): /tmp/paxexam_runner_hudson/hello.esa (Too many open files)
testAutostartChildUnscoped [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.itests.AutostartTest): /tmp/paxexam_runner_hudson/feature.a.esa (Too many open files)
testImportPackage [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.itests.CompositeTest): An error occurred trying to read the bundle
testEmptySubsystem [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.itests.BasicTest): /tmp/paxexam_runner_hudson/emptySubsystem.esa (Too many open files)
testReturnExistingSubsystemWithSameLocation [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.itests.InstallTest): /tmp/paxexam_runner_hudson/feature3.esa (Too many open files)
verifyBundleDWiredToBundleA [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4BTest): sdt_bundle.a.jar (Too many open files)
verifyBundlesAandBInstalledIntoRootSubsystem [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E1Test): sdt_bundle.a.jar (Too many open files)
FourE1b_App_Comp [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E1Test): sdt_bundle.a.jar (Too many open files)
FourE1b_App_Feature [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E1Test): sdt_bundle.a.jar (Too many open files)
FourE1b_Comp_Feature [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E1Test): org.apache.aries.util.IORuntimeException: IOException in IDirectory.getFSRoot
verifyBundleEWiredToCapability_yFromBundleB [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4CTest): sdt_bundle.a.jar (Too many open files)
verifyNoUnexpectedBundlesProvisioned [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4CTest): sdt_bundle.a.jar (Too many open files)
verifyBundleEWiredToCapability_yFromBundleB [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4ATest): sdt_bundle.a.jar (Too many open files)
test4E2A_where_S2isAFeature [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E2Test): sdt_bundle.a.jar (Too many open files)
FourE2b_App_App [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E2Test): sdt_bundle.a.jar (Too many open files)
FourE2b_App_Feature [equinox\/3.8.0.V20120529-1548](org.apache.aries.subsystem.ctt.itests.SubsystemDependency_4E2Test): sdt_bundle.a.jar (Too many open files)
issueID:ARIES-927
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
texts:Imports org.osgi.service.framework package as optional but assumes it's there nevertheless.
Util imports the org.osgi.service.framework package as optional. However, the InternalRecursiveBundleTracker invokes "x instanceof CompositeBundle" in the addingBundle() method without protection. This results in a NoClassDefFoundError, like the one below, in environments where the package is not available. One such environment is the OSGi CT, where "private" package imports, such as the x-internal org.osgi.service.framework package provided by Equinox, are forbidden.
! Failed to start bundle org.apache.aries.blueprint-1.0.0, exception activator error org/osgi/service/framework/CompositeBundle from: org.apache.aries.util.tracker.InternalRecursiveBundleTracker:addingBundle#67
org.osgi.framework.BundleException: Exception in org.apache.aries.blueprint.container.BlueprintExtender.start() of bundle org.apache.aries.blueprint.
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:734)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:683)
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:381)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:300)
at aQute.launcher.Launcher.update(Launcher.java:287)
at aQute.launcher.Launcher.activate(Launcher.java:212)
at aQute.launcher.Launcher.run(Launcher.java:133)
at aQute.launcher.Launcher.main(Launcher.java:68)
Caused by: java.lang.NoClassDefFoundError: org/osgi/service/framework/CompositeBundle
at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.addingBundle(InternalRecursiveBundleTracker.java:67)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:467)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:1)
at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:156)
at org.apache.aries.util.tracker.RecursiveBundleTracker.open(RecursiveBundleTracker.java:95)
at org.apache.aries.blueprint.container.BlueprintExtender$2.serviceFound(BlueprintExtender.java:104)
at org.apache.aries.util.tracker.SingleServiceTracker.update(SingleServiceTracker.java:157)
at org.apache.aries.util.tracker.SingleServiceTracker.findMatchingReference(SingleServiceTracker.java:115)
at org.apache.aries.util.tracker.SingleServiceTracker.open(SingleServiceTracker.java:98)
at org.apache.aries.blueprint.container.BlueprintExtender.start(BlueprintExtender.java:112)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:711)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:702)
... 7 more
Caused by: java.lang.ClassNotFoundException: org.osgi.service.framework.CompositeBundle
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:501)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:421)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:412)
at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
... 22 more
issueID:ARIES-929
type:Improvement
changed files:
texts:install subsystems from IDirectory objects
Subsystems may be installed by calling Subsystem.install(String) (and also the install(String, InputStream) method). The code treats the given location string as a URI string which can be opened to obtain installation artifacts, unless the URI has a scheme of "subsystem" in which case an alternative leg of code is executed to install a persisted subsystem.
It would be useful to extend this mechanism to add a new scheme ("idirfinder") which is also treated in special way; in this case the URI is passed to a service which can return a corresponding IDirectory object that matches the given URI, which the install code can then use to install a subsystem using the contents of the IDirectory. To achieve this, a modification to the subsystem install code is required (though not extensive as IDirectory objects are already used internally during install), and an interface for the IDirectory finder service must be defined.
Adding this functionality would allow installation of subsystems from a variety of sources, including expanded archive, loose config (installation artifacts distributed across disk as produced by IDEs), in-memory etc as the only requirement is then to provide an IDirectory front-end to the content. The alternative of gathering the content and producing an archive file is not desirable due to the overhead this entails, particularly when an IDE is being used for rapid development, and small changes are being made frequently.
issueID:ARIES-93
type:Bug
changed files:
texts:JMX Integration test failure with mvn eclipse:eclipse
JMX integration tests fail with mvn eclipse:eclipse
To reporoduce:
svn co https://svn.apache.org/repos/asf/incubator/aries/trunk
cd trunk
mvn clean install
mvn eclipse:eclipse
Failure:
[INFO] ------------------------------------------------------------------------
[INFO] Building Apache Aries JMX integration tests
[INFO] task-segment: [eclipse:eclipse]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing eclipse:eclipse
[INFO] [enforcer:enforce
{execution: default}
]
[INFO] [remote-resources:process
{execution: default}
]
[INFO] [paxexam:generate-config
{execution: generate-config}
]
[INFO] Adding dependencies in scope provided
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Unable to create dependencies file: java.lang.NullPointerException
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.lifecycle.LifecycleExecutionException: Unable to create dependencies file: java.lang.NullPointerException
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:719)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.forkProjectLifecycle(DefaultLifecycleExecutor.java:1205)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.forkLifecycle(DefaultLifecycleExecutor.java:1038)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:643)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoExecutionException: Unable to create dependencies file: java.lang.NullPointerException
at org.ops4j.pax.exam.mavenplugin.GenerateConfigMojo.execute(GenerateConfigMojo.java:146)
at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
... 21 more
Caused by: java.lang.NullPointerException
at org.ops4j.pax.exam.mavenplugin.GenerateConfigMojo.createPaxRunnerScan(GenerateConfigMojo.java:312)
at org.ops4j.pax.exam.mavenplugin.GenerateConfigMojo.writeProvisioning(GenerateConfigMojo.java:256)
at org.ops4j.pax.exam.mavenplugin.GenerateConfigMojo.execute(GenerateConfigMojo.java:139)
... 23 more
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9 seconds
issueID:ARIES-930
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:The abstract reference recipe may end up tracking the same reference multiple times

issueID:ARIES-931
type:Bug
changed files:
texts:NPE in Application iTests
The following NPE from application-itests will occasionally occur during the Aries build.

The NPE occurs because fwMgr.getSharedBundleFramework() returns null since the shared bundle framework was not created earlier.
org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl - Caught exception
org.apache.aries.application.management.spi.repository.ContextException: Unable to create or start the shared framework composite bundle null
at org.apache.aries.application.runtime.framework.management.SharedBundleFramework.createSharedBundleFramework(SharedBundleFramework.java:83)
The shared bundle framework was not created due to a ConcurrentModificationException in the Equinox framework.
Caused by: java.util.ConcurrentModificationException
at java.util.Hashtable$Enumerator.next(Hashtable.java:1031)
at java.util.Hashtable.putAll(Hashtable.java:465)
at org.eclipse.osgi.framework.internal.core.FrameworkProperties.internalGetProperties(FrameworkProperties.java:82)
at org.eclipse.osgi.framework.internal.core.FrameworkProperties.setProperties(FrameworkProperties.java:95)
at org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalInit(EquinoxLauncher.java:64)
at org.eclipse.osgi.framework.internal.core.EquinoxLauncher.init(EquinoxLauncher.java:38)
at org.eclipse.osgi.launch.Equinox.init(Equinox.java:89)
at org.eclipse.osgi.internal.composite.CompositeImpl.findCompanionFramework(CompositeImpl.java:64)
at org.eclipse.osgi.internal.composite.CompositeBase.<init>(CompositeBase.java:37)
at org.eclipse.osgi.internal.composite.CompositeImpl.<init>(CompositeImpl.java:37)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.createBundle(AbstractBundle.java:69)
at org.eclipse.osgi.framework.internal.core.Framework.createAndVerifyBundle(Framework.java:712)
at org.eclipse.osgi.framework.internal.core.Framework.installWorkerPrivileged(Framework.java:923)
... 49 more
The CME is a known issue and was fixed as of Equinox 3.7.2. Currently, the application-itests run against both Equinox 3.5.0 and 3.7.0, which are subject to the CME. Unless running against these frameworks is absolutely necessary, I'd like to propose that the itests be executed against 3.8, available in Maven Central, instead in order to avoid these potential "false positives" in the Aries build test results. The other configurations can remain in order to run locally when necessary but would be commented out.
issueID:ARIES-932
type:Bug
changed files:
texts:Extention proxy-method="classes" caused UnableToProxyException
UnableToProxyException arises with Karaf 2.3.0/Aries 1.0.0 when install a blueprint based bundle into container.
Caused by: org.apache.aries.proxy.UnableToProxyException: The class xxx.xxx.SomeClass is not an interface and therefore a proxy cannot be generated.
at org.apache.aries.proxy.impl.JdkProxyManager.getInterfaces(JdkProxyManager.java:43)
at org.apache.aries.proxy.impl.JdkProxyManager.createNewProxy(JdkProxyManager.java:36)
at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:75)
at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingProxy(AbstractProxyManager.java:40)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:299)
at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:102)
... 56 more
The blueprint configuration in the bundle:
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
...
<reference
xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"
ext:proxy-method="classes" id="SomeFeature" interface="xxx.xxx.SomeClass"/>
...
</blueprint>
The stack shows that the JDK proxy (JdkProxyManager) used instead of AsmProxyManager,
even though ASM 4.0 installed in container:
karaf@admin> exports | grep asm
107 org.springframework.asm; version="3.0.7.RELEASE"
107 org.springframework.asm.commons; version="3.0.7.RELEASE"
107 org.springframework.asm.signature; version="3.0.7.RELEASE"
113 net.sf.cglib.asm; version="2.2.2"
113 net.sf.cglib.asm.signature; version="2.2.2"
212 org.objectweb.asm; version="4.0.0"
212 org.objectweb.asm.signature; version="4.0.0"
212 org.objectweb.asm.commons; version="4.0.0"
212 org.objectweb.asm.tree; version="4.0.0"
212 org.objectweb.asm.tree.analysis; version="4.0.0"
212 org.objectweb.asm.util; version="4.0.0"
212 org.objectweb.asm.xml; version="4.0.0"
issueID:ARIES-936
type:Bug
changed files:
texts:Test failures running on IBM JDK
I'm getting three failures in spi-fly-dynamic-bundle when running on an IBM JDK. The test is expecting an instance of a com.sun.org.apache.xerces.internal class but it's getting an org.apache.xerces instance instead. Here's the error+stacktrace.
-------------------------------------------------------------------------------
Test set: org.apache.aries.spifly.dynamic.ClientWeavingHookTest
-------------------------------------------------------------------------------
Tests run: 15, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 0.482 sec <<< FAILURE!
testClientSpecifyingDifferentMethodsLimitedToDifferentProviders(org.apache.aries.spifly.dynamic.ClientWeavingHookTest) Time elaps
ed: 0.042 sec <<< FAILURE!
org.junit.ComparisonFailure: expected:<[com.sun.org.apache.xerces.internal].jaxp.DocumentBuilde...> but was:<[org.apache.xerces].j
axp.DocumentBuilde...>
at org.junit.Assert.assertEquals(Assert.java:123)
at org.junit.Assert.assertEquals(Assert.java:145)
at org.apache.aries.spifly.dynamic.ClientWeavingHookTest.testConsumerBundleWeaving(ClientWeavingHookTest.java:455)
at org.apache.aries.spifly.dynamic.ClientWeavingHookTest.testClientSpecifyingDifferentMethodsLimitedToDifferentProviders(Clien
tWeavingHookTest.java:431)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
issueID:ARIES-937
type:Improvement
changed files:
texts:Subsystem itests taking too long
Subsystem itests are taking an inordinate length of time to build. My check-in under revision #1395921 may have caused or exacerbated this.
issueID:ARIES-94
type:Bug
changed files:
texts:Update bluprint helloworld tutorial to work with code under samples directory
Having moved the sample code the tutorial will no longer work as described.
issueID:ARIES-940
type:Bug
changed files:
texts:Subsystem core Activator does not check for existing services

issueID:ARIES-941
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
texts:When running Subsystems in a non-root region, scoped subsystems have the wrong parent (root)
Applications and composites have the root region as parent and feature contents are installed into the root region. Instead of the root region in these cases, the region in which the Subsystems implementation was installed and started should be the one to use.
This can be reproduced by cloning the github project:
https://github.com/glyn/aries-subsystems-on-virgo-kernel
checking out the ARIES-941 tag and following the instructions in README.md.
issueID:ARIES-942
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
texts:Nesting subsystems using nested directories produces UnsupportedOperationException
This can be reproduced by cloning the github project:
https://github.com/glyn/aries-subsystems-on-virgo-kernel
checking out the ARIES-942 tag and following the instructions in README.md.
Note ARIES-942 tags a branch so that master is kept working ok.
[2012-10-18 15:26:36.402] fs-watcher <HD0002E> Hot deploy failed for file 'hello.driver.jar'. org.eclipse.virgo.nano.deployer.api.core.DeploymentException: BundleException
at org.eclipse.virgo.kernel.install.artifact.internal.bundle.StandardBundleDriver.startBundle(StandardBundleDriver.java:199)
at org.eclipse.virgo.kernel.install.artifact.internal.bundle.StandardBundleDriver.start(StandardBundleDriver.java:178)
at org.eclipse.virgo.kernel.install.artifact.internal.bundle.StandardBundleInstallArtifact.doStart(StandardBundleInstallArtifact.java:279)
at org.eclipse.virgo.kernel.install.artifact.internal.AbstractInstallArtifact.driveDoStart(AbstractInstallArtifact.java:231)
at org.eclipse.virgo.kernel.install.artifact.internal.bundle.StandardBundleInstallArtifact.start(StandardBundleInstallArtifact.java:268)
at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.start(PipelinedApplicationDeployer.java:375)
at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.deploy(PipelinedApplicationDeployer.java:258)
at org.eclipse.virgo.nano.deployer.hot.HotDeploymentFileSystemListener.deploy(HotDeployerFileSystemListener.java:215)
at org.eclipse.virgo.nano.deployer.hot.HotDeploymentFileSystemListener.onChange(HotDeployerFileSystemListener.java:69)
at org.eclipse.virgo.util.io.FileSystemChecker.notifyListeners(FileSystemChecker.java:373)
at org.eclipse.virgo.util.io.FileSystemChecker.check(FileSystemChecker.java:282)
at org.eclipse.virgo.nano.deployer.hot.WatchTask.run(WatchTask.java:48)
at java.lang.Thread.run(Thread.java:680)
Caused by: org.osgi.framework.BundleException: Exception in demo.driver.HelloDriver.start() of bundle hello.driver.
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:734)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:683)
at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:381)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:300)
at org.eclipse.virgo.nano.core.internal.StandardBundleStarter.start(StandardBundleStarter.java:57)
at org.eclipse.virgo.nano.core.internal.StandardBundleStarter.start(StandardBundleStarter.java:45)
at sun.reflect.GeneratedMethodAccessor38.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318)
at org.eclipse.gemini.blueprint.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:56)
at org.eclipse.gemini.blueprint.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:60)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
at org.eclipse.gemini.blueprint.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:57)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
at $Proxy39.start(Unknown Source)
at org.eclipse.virgo.kernel.install.artifact.internal.bundle.StandardBundleDriver.startBundle(StandardBundleDriver.java:197)
... 12 common frames omitted
Caused by: org.osgi.service.subsystem.SubsystemException: java.lang.UnsupportedOperationException
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:101)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:31)
at java.security.AccessController.doPrivileged(Native Method)
at org.apache.aries.subsystem.core.internal.AriesSubsystem.install(AriesSubsystem.java:252)
at org.apache.aries.subsystem.core.internal.AriesSubsystem.install(AriesSubsystem.java:246)
at demo.driver.HelloDriver.deploySubsystem(HelloDriver.java:36)
at demo.driver.HelloDriver.start(HelloDriver.java:32)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:711)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:702)
... 35 common frames omitted
Caused by: java.lang.UnsupportedOperationException: null
at org.apache.aries.util.filesystem.impl.DirectoryImpl.open(DirectoryImpl.java:120)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeResources(RawSubsystemResource.java:329)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:111)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:92)
at org.apache.aries.subsystem.core.internal.InstallAction.createSubsystemResource(InstallAction.java:128)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:62)
... 44 common frames omitted
issueID:ARIES-943
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
texts:Installing a scoped subsystem does not destroy the corresponding region
This can be reproduced by cloning the github project:
https://github.com/glyn/aries-subsystems-on-virgo-kernel
checking out the ARIES-943 tag and following the instructions in README.md and then deleting hello.driver.jar from the pickup directory. This uninstalls the subsystems. jconsole can then be used to inspect the region digraph showing that the regions corresponding to the uninstalled subsystems still exist.
If hello.driver.jar is repeatedly added and removed from pickup, more and more regions accumulate.
Note that the left-over regions have no bundles in them.
issueID:ARIES-946
type:Improvement
changed files:
texts:Update .gitignore to exclude .idea directory

issueID:ARIES-95
type:Bug
changed files:
texts:Make jmx-blueprint-bundle generate sources and javadoc
it does not work when type "mvn clean install -Pdeploy" in jmx-blueprint-bundle.
issueID:ARIES-952
type:Improvement
changed files:
texts:Break dependency of Aries Subsystems on Aries Blueprint
Aries Subsystems currently has a hard dependency on Aries Blueprint (AB).
When running Aries Subsystems in an environment where there is already a Blueprint implementation, we end up with duplicate Blueprint extenders, which is of course a recipe for disaster.
One such environment is the Virgo kernel. Virgo depends on Gemini Blueprint (GB) because it uses the Spring DM function provided by GB. So it's not possible to substitute AB for GB.
So the requirement is to make it possible to run Aries Subsystems with GB. Admittedly this may involve adding some GB code to support resource modelling for Blueprint, but that should be separated from the AB implementation.
To reproduce the problematic environment, see https://github.com/glyn/aries-subsystems-on-virgo-kernel and follow the instructions in README.md. The web admin console can then be used to observe both GB and AB extenders running in the Virgo user region. Also, the nature of the hard dependency can be observed by deleting the Aries Blueprint core bundle from the Virgo kernel's repository/usr directory and restarting Virgo - the modeller no longer resolves:
missing constraint in bundle <org.apache.aries.application.modeller_1.0.1.SNAPSHOT>
            constraint: <Import-Package: org.apache.aries.blueprint.services; version="[1.0.0,2.0.0)">
issueID:ARIES-956
type:New Feature
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AriesSubsystemParentsHeader.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SystemRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeploymentManifest.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemGraph.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ThreadLocalSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/GetBundleContextAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResolverHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
subsystem/subsystem-api/src/main/java/org/apache/aries/subsystem/AriesSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/PreferredProviderRepository.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceUninstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/InstallAction.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceReferences.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Utils.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/GetSubsystemHeadersAction.java
texts:Add ability to update the sharing policy of composite subsystems.
I have created a subsystem of type composite to which I am attempting to install an application subsystem. The problem is that the dependencies for the application subsystem cannot be satisfied because the manifest of the composite does not import them. At the point that I install the composite I can't supply the imports because I don't yet know which applications (and therefore which dependencies) will be installed.
Ideally what I was hoping for was an ability to import all available packages into the composite from the parent (in this case the root subsystem). I have attempted various methods of achieving this , (e.g. Including an empty bundle in the composite which has a DynamicImport-Package: *) but nothing seems to work.
Can you think of a way of implementing this scenario in the existing Subsystem framework? It's a fundamental part of what we (used to) do with the old composite bundle framework code so I`m hoping we can find a solution!
issueID:ARIES-958
type:Bug
changed files:util/src/main/java/org/apache/aries/util/manifest/ManifestProcessor.java
texts:BundleManifest.fromBundle(IFile) fails to parse OSGI headers when bundle manifest contains Name header.
com.springsource.org.aspectj.weaver-1.6.5.RELEASE.jar is such a bundle (coming from the Spring enterprise bundle repository). It contains a Name header and when packaged inside an EBA fails to deploy on Websphere Liberty Profile due to the BundleManifest.fromBundle call. (some OSGI headers are skipped, including the Bundle-Symbolic name, leaving Aries to think this is an invalid bundle.)
Odly enough, When using BundleManifest.fromBundle(InputStream is), the problem does not occur, as different parsing logic is used.
issueID:ARIES-96
type:Bug
changed files:
texts:Make jmx-bundle generate sources and javadoc
same with https://issues.apache.org/jira/browse/ARIES-95
issueID:ARIES-962
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceListRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
texts:Deadlock while stopping OSGi container
Found one Java-level deadlock:
=============================
"Blueprint Extender: 1":
waiting to lock monitor 0x00007f92a0003d98 (object 0x00000000e0995860, a java.util.ArrayList),
which is held by "FelixStartLevel"
"FelixStartLevel":
waiting to lock monitor 0x00007f92a0003cf0 (object 0x00000000e09960f0, a java.lang.Object),
which is held by "Blueprint Extender: 1"
Java stack information for the threads listed above:
===================================================
"Blueprint Extender: 1":
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.getBestServiceReference(AbstractServiceReferenceRecipe.java:429)
waiting to lock <0x00000000e0995860> (a java.util.ArrayList)
at org.apache.aries.blueprint.container.ReferenceRecipe.retrack(ReferenceRecipe.java:128)
at org.apache.aries.blueprint.container.ReferenceRecipe.untrack(ReferenceRecipe.java:151)
locked <0x00000000e09960f0> (a java.lang.Object)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceRemoved(AbstractServiceReferenceRecipe.java:346)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.access$200(AbstractServiceReferenceRecipe.java:71)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$3.run(AbstractServiceReferenceRecipe.java:316)
at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:662)
"FelixStartLevel":
at org.apache.aries.blueprint.container.ReferenceRecipe.doStop(ReferenceRecipe.java:122)
waiting to lock <0x00000000e09960f0> (a java.lang.Object)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.stop(AbstractServiceReferenceRecipe.java:153)
locked <0x00000000e0995860> (a java.util.ArrayList)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.untrackServiceReference(BlueprintContainerImpl.java:594)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.untrackServiceReferences(BlueprintContainerImpl.java:574)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:842)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:246)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:238)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:434)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:198)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:128)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:468)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:161)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:117)
at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)
at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2351)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1214)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
at java.lang.Thread.run(Thread.java:662)
Found 1 deadlock.
It seems like Apache Aries problem.
issueID:ARIES-963
type:Bug
changed files:
texts:Spi-fly requires the bundle, whose class is being woven, to have AdaptPermission for a successful weaving.
Hello Colleagues,
The spi-fly weaving hook inserts in the byte code of the woven class execution of the method "org.apache.aries.spifly.Util.fixContextClassloader(String cls, String method, Class<?> clsArg, ClassLoader bundleLoader)"
This method in its turn calls the method "org.apache.aries.spifly.Util.findContextClassloader(Bundle consumerBundle, String className, String methodName, Class<?> clsArg)". The latter internally calls "BundleWiring bundleWiring = (BundleWiring)consumerBundle.adapt(BundleWiring.class);" on line 137, which requires the caller to have the AdaptPermission ("org.osgi.framework.AdaptPermission" "org.osgi.framework.wiring.BundleWiring" "adapt").
Option1)
Since the spi-fly weaving hook has the WovenClass object, it may obtain the BundleWiring without any security checks through the WovenClass.getBundleWiring() call and may pass this BundleWiring object to the Util methods, which are inserted in the woven class byte code. This would require changes in the signature of the Util.fixContextClassloader(...) and Util.findContextClassloader(...) and in the code in the weaving hook, that uses it.
Option2)
Execute the call bundle.adapt(BundleRevision.class) in an AccessController.doPrivileged block.
This was observed during the execution of the osgi test case for the serviceloader.secure on the spi-fly on top of the OSGi R5 compatible implementation from ProSyst. Here is the stack trace:
java.security.AccessControlException: access denied ("org.osgi.framework.AdaptPermission" "org.osgi.framework.wiring.BundleWiring" "adapt")
at java.security.AccessControlContext.checkPermission(AccessControlContext.java:366)
at com.prosyst.mbs.impl.framework.module.security.SecurityManagerImpl.checkPermission(SecurityManagerImpl.java:110)
at com.prosyst.mbs.impl.framework.module.security.SecurityManagerImpl.checkPermission(SecurityManagerImpl.java:71)
at com.prosyst.mbs.impl.framework.module.security.BasicSecurityImpl.checkAdaptPermission(BasicSecurityImpl.java:445)
at com.prosyst.mbs.impl.framework.BundleImpl.adapt(BundleImpl.java:7437)
at com.prosyst.mbs.impl.framework.BundleImpl.adapt(BundleImpl.java:7430)
at org.apache.aries.spifly.Util.findContextClassloader(Util.java:137)
at org.apache.aries.spifly.Util.fixContextClassloader(Util.java:84)
at org.osgi.test.cases.serviceloader.secure.client.ColorProviderClient.$$FCCL$$java#util#ServiceLoader$load$java#lang#Class(ColorProviderClient.java)
at org.osgi.test.cases.serviceloader.secure.client.ColorProviderClient.run(ColorProviderClient.java:38)
at org.osgi.test.cases.serviceloader.secure.junit.ServiceLoaderSecureTest.testLegacyClientWithPermission(ServiceLoaderSecureTest.java:292)
...
issueID:ARIES-965
type:Improvement
changed files:subsystem/subsystem-api/src/main/java/org/osgi/service/repository/ContentNamespace.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/Repository.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/RepositoryContent.java
subsystem/subsystem-api/src/main/java/org/osgi/service/repository/package-info.java
texts:Consider having the subsystems api bundle include the org.osgi.service.repository package and both import and export it.
Without installing an implementation of the OSGi Repository specification, there is currently no other way of getting the org.osgi.service.repository package than the osgi.enterprise jar. Subsystems does not require an implementation of the repository specification in order to function, but it does require the package since it uses repositories internally (e.g., local, system, and preferred provider). It therefore seems reasonable to include that package in the subsystems api bundle. This would also be helpful to subsystems users who will make use of the repository api but don't need a standard spec implementation.
issueID:ARIES-966
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java
texts:The region context bundle should have the start level set explicitly to 1.
All other bundles, both content and dependencies, installed (i.e. managed) by subsystems have the start level explicitly set to 1. This is because the life cycle of bundles managed by subsystems should only be affected by the life cycle of the susbsytem. The same thing applies to region context bundles.
issueID:ARIES-967
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
texts:NPE in org.apache.aries.subsystem.core.internal.BundleEventHook.event() at server shutdown.
-----Start of DE processing----- = [11/16/12 16:19:34:484 GMT]
Exception = org.osgi.framework.ServiceException
Source = ...
probeid = log-2
Stack Dump = org.osgi.framework.ServiceException: Exception in org.apache.aries.subsystem.core.internal.BundleEventHook.event()
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1247)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHooksPrivileged(ServiceRegistry.java:1222)
at org.eclipse.osgi.framework.internal.core.Framework.notifyEventHooksPrivileged(Framework.java:1603)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1558)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1505)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1500)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.uninstallWorker(AbstractBundle.java:825)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.uninstall(AbstractBundle.java:784)
...
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:611)
at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:236)
at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:37)
at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:613)
at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:496)
at org.apache.felix.scr.impl.helper.ActivateMethod.invoke(ActivateMethod.java:149)
at org.apache.felix.scr.impl.manager.ImmediateComponentManager.disposeImplementationObject(ImmediateComponentManager.java:272)
at org.apache.felix.scr.impl.manager.ImmediateComponentManager.deleteComponent(ImmediateComponentManager.java:152)
at org.apache.felix.scr.impl.manager.AbstractComponentManager$State.doDeactivate(AbstractComponentManager.java:1305)
at org.apache.felix.scr.impl.manager.AbstractComponentManager$Satisfied.dispose(AbstractComponentManager.java:1617)
at org.apache.felix.scr.impl.manager.AbstractComponentManager.disposeInternal(AbstractComponentManager.java:574)
at org.apache.felix.scr.impl.manager.AbstractComponentManager.dispose(AbstractComponentManager.java:404)
at org.apache.felix.scr.impl.config.ImmediateComponentHolder.disposeComponents(ImmediateComponentHolder.java:371)
at org.apache.felix.scr.impl.BundleComponentActivator.dispose(BundleComponentActivator.java:320)
at org.apache.felix.scr.impl.Activator.disposeComponents(Activator.java:316)
at org.apache.felix.scr.impl.Activator.bundleChanged(Activator.java:183)
at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847)
at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1569)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1505)
at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1500)
at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:506)
at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:566)
at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1207)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:592)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:257)
at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:215)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:284)
at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:693)
at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:600)
at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:261)
at java.lang.Thread.run(Thread.java:770)
Caused by: java.lang.NullPointerException
at org.apache.aries.subsystem.core.internal.BundleResourceInstaller$BundleConstituent.equals(BundleResourceInstaller.java:97)
at java.util.ArrayList.contains(ArrayList.java:305)
at java.util.Collections$UnmodifiableCollection.contains(Collections.java:992)
at org.apache.aries.subsystem.core.internal.Subsystems.getSubsystemsByConstituent(Subsystems.java:189)
at org.apache.aries.subsystem.core.internal.BundleEventHook.handleUninstalledEvent(BundleEventHook.java:101)
at org.apache.aries.subsystem.core.internal.BundleEventHook.event(BundleEventHook.java:46)
at org.eclipse.osgi.framework.internal.core.Framework$10.call(Framework.java:1606)
at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1239)
... 45 more
Dump of callerThis
Object type = ...
strings[0] = "FrameworkEvent ERROR"
strings[1] = ...
strings[2] = "org.osgi.framework.ServiceException: Exception in org.apache.aries.subsystem.core.internal.BundleEventHook.event()"
strings[3] = ...
issueID:ARIES-968
type:Improvement
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BasicSubsystem.java
texts:Consider using a "multiple attempts" strategy versus the current locking strategy when updating sharing policies.
The AriesSubsystem.addRequirements(Collection<Requirement>) method adds the specified requirements to a subsystem's sharing policy, which is controlled by a Region in the RegionDigraph API. Updating a region digraph is atomic. This means a copy of the current digraph is made, updated, and then set in the digraph service. If something else sets a a different copy between the time the first copy is made and set, an exception occurs. Currently, this is mitigated by locking on the SubsystemImpl class. A better mitigating approach would be to make multiple attempts until it either succeeded or some threshold number of attempts was surpassed. This would avoid the bottleneck as well as address the possibility of something outside subsystems interfering.
issueID:ARIES-969
type:Bug
changed files:
texts:Empty Bundle-Blueprint: header should result in no blueprint container
At the end of the OSGi R5 Enterprise spec section 121.3.4 we read,
"If the Bundle-Blueprint header is specified but empty, then the Blueprint bundle must not be managed. This can be used to temporarily disable a Blueprint bundle."
This behaviour is not currently implemented. As well as not being spec-compliant, it can be time consuming to scan large bundles for blueprint files. I'll firstly use this defect to change the behaviour so as to become spec-compliant.
One problem with the spec as written is that bundles that do not contain blueprint must "opt out" of blueprint management by including an empty Bundle-Blueprint header. This is a problem for users that consume third party bundles that are unwilling or unable to modify their manifests. So I'm going to add a system property, "org.apache.aries.blueprint.header.mandatory". Its default value will be "false". Setting it to 'true' will mean that bundles that do not contain a Bundle-Blueprint: header in their manifests will not be scanned for blueprint and will not get runtime blueprint containers. ModelledResourceManagerImpl.findBlueprints() is expensive for large bundles, so this will yield substantial performance improvements for such users.
issueID:ARIES-97
type:Bug
changed files:
texts:fix JMX itest pom
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure
error: error reading D:_g\m2\repository\javax\mail\mail\1.4\mail-1.4.jar; error in opening zip file
issueID:ARIES-971
type:Bug
changed files:
texts:ServiceHelper.CacheClearoutListener.add(BundleContext, ServiceKey) causes NPE if system bundle is hidden
In org.apache.aries.jndi.services.ServiceHelper.CacheClearoutListener.add(BundleContext, ServiceKey) the following code will cause an NPE:
// try to use the system bundle for our listener,
// if that fails we fall back to the calling context
BundleContext systemBundle =
AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
public BundleContext run()
{ return ctx.getBundle(0).getBundleContext(); <<< NPE here }
});
This can happen if a bundle FindHook hides the bundle 0 from the ctx bundle. A check for null should be done here:
BundleContext systemBundle =
AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
public BundleContext run()
{ Bundle system = ctx.getBundle(0); return system == null ? null : system.getBundleContext(); }
});
This would allow jndi to work in such environments where bundle, service, and resolver hooks are used for isolation (e.g. subsystems).
issueID:ARIES-972
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
texts:Subsystem install fails with NPE if no subsystem manifest is contained in an ESA
The subsystem manifest file is optional for ESA files. If an ESA is installed which contains no subsystem manifest AND the subsystem was NOT installed using the subsystem: URI (in order to specify the Subsystem-SymbolicName param) then the following NPE will be observed:
Caused by: java.lang.NullPointerException
at java.util.regex.Matcher.getTextLength(Matcher.java:1140)
at java.util.regex.Matcher.reset(Matcher.java:291)
at java.util.regex.Matcher.<init>(Matcher.java:211)
at java.util.regex.Pattern.matcher(Pattern.java:888)
at org.apache.aries.subsystem.core.archive.AbstractHeader.<init>(AbstractHeader.java:55)
at org.apache.aries.subsystem.core.archive.SymbolicNameHeader.<init>(SymbolicNameHeader.java:20)
at org.apache.aries.subsystem.core.archive.SubsystemSymbolicNameHeader.<init>(SubsystemSymbolicNameHeader.java:21)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeSubsystemSymbolicNameHeader(RawSubsystemResource.java:383)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.addSubsystemSymbolicNameHeader(RawSubsystemResource.java:223)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.computeSubsystemManifestBeforeRequirements(RawSubsystemResource.java:374)
at org.apache.aries.subsystem.core.internal.RawSubsystemResource.<init>(RawSubsystemResource.java:110)
at org.apache.aries.subsystem.core.internal.SubsystemResource.<init>(SubsystemResource.java:93)
at org.apache.aries.subsystem.core.internal.InstallAction.createSubsystemResource(InstallAction.java:128)
at org.apache.aries.subsystem.core.internal.InstallAction.run(InstallAction.java:62)
... 61 more
issueID:ARIES-973
type:Bug
changed files:versioning/versioning-plugin/src/main/java/org/apache/aries/versioning/mojo/CLVersionCheckerMojo.java
versioning/versioning-plugin/src/main/java/org/apache/aries/versioning/mojo/VersionCheckerMojo.java
texts:Versioning component isn't building
The pom is depending on parent @ 0.6 instead of 1.0
The submodule naming is inconsistent with the rest of Aries
issueID:ARIES-975
type:Bug
changed files:versioning/versioning-checker/src/main/java/org/apache/aries/versioning/utils/ClassDeclaration.java
texts:Semantic versioning seralization comparision incorrect
The comparision for seralization id is incorrect
issueID:ARIES-977
type:Bug
changed files:
texts:JPA Deployment fails for WAB
When I attempt to deploy a WAB with Aries JPA this is what happens:
SEVERE: java.lang.IllegalStateException: The bundle com.somebundle/0.0.1.SNAPSHOT is not started.
at org.apache.aries.jpa.container.unit.impl.JndiDataSource.getDs(JndiDataSource.java:61)
at org.apache.aries.jpa.container.unit.impl.DelayedLookupDataSource.getConnection(DelayedLookupDataSource.java:36)
at org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:71)
at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:114)
at org.hibernate.cfg.Configuration.buildSettingsInternal(Configuration.java:2163)
at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2159)
at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1383)
at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:954)
at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:887)
at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:73)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:329)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.bundleStateChange(EntityManagerFactoryManager.java:175)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.modifiedBundle(PersistenceBundleManager.java:296)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:453)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)
at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)
at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)
at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3758)
at org.apache.felix.framework.Felix.access$600(Felix.java:80)
at org.apache.felix.framework.Felix$FelixResolver.fireResolvedEvents(Felix.java:4296)
at org.apache.felix.framework.Felix$FelixResolver.resolve(Felix.java:4062)
at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3436)
at org.apache.felix.framework.Felix.startBundle(Felix.java:1727)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:922)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:909)
at
It seems that there is an expectation that the bundle should be in a STARTED state when it is in RESOLVED. I think this is very similar to issue https://issues.apache.org/jira/browse/ARIES-832 except that it happens in a different place.
This is a very serious issue, currently no known workarounds.
issueID:ARIES-978
type:Bug
changed files:
texts:Aries JPA does not work with Hibernate
When I attempt to deploy a bundle with persistence.xml and Hibernate is the provider the following exception occurs:
SEVERE: java.lang.IllegalStateException: The bundle JPATest/0.0.1.SNAPSHOT is not started.
at org.apache.aries.jpa.container.unit.impl.JndiDataSource.getDs(JndiDataSource.java:61)
at org.apache.aries.jpa.container.unit.impl.DelayedLookupDataSource.getConnection(DelayedLookupDataSource.java:36)
at org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:71)
at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:114)
at org.hibernate.cfg.Configuration.buildSettingsInternal(Configuration.java:2163)
at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2159)
at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1383)
at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:954)
at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:887)
at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:73)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:329)
at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.bundleStateChange(EntityManagerFactoryManager.java:175)
at org.apache.aries.jpa.container.impl.PersistenceBundleManager.modifiedBundle(PersistenceBundleManager.java:296)
at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:453)
at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237)
at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)
at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807)
at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729)
at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:610)
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3758)
at org.apache.felix.framework.Felix.access$600(Felix.java:80)
at org.apache.felix.framework.Felix$FelixResolver.fireResolvedEvents(Felix.java:4296)
at org.apache.felix.framework.Felix$FelixResolver.resolve(Felix.java:4062)
at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3436)
at org.apache.felix.framework.Felix.startBundle(Felix.java:1727)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:922)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:909)
This does not occur with OpenJPA with the same exact bundle.
From what I can see is happening EntityManagerFactoryManager is calling createEntityManagerFactories(). This ends up going through Hibernate code from what you can see in the stack trace, and then comes back to Aries code when Hibernate is trying to get the DataSource (which belongs to Aries) and tries calling .getConnection().
At that point we will go to JndiDataSource getDs() and there Aries code will expect to have a bundleContext, but it is null and the bundle is in the RESOLVED state.
In OpenJPA this code path never gets hit, and getDs() function is never called.
There is also this issue:https://issues.apache.org/jira/browse/ARIES-933.
I'm not sure what has been done since then, but I would appreciate to hear what is the official word on this and if there exist any workarounds.
This is definitely a blocker if Hibernate is used.
Related: https://issues.apache.org/jira/browse/ARIES-832
issueID:ARIES-982
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:Deadlock between Subsystems EventHook and Activator
We're sometimes seeing a deadlock between one thread that's passed through
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.register(SubsystemServiceRegistrar.java:69)
5XESTACKTRACE (entered lock: org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar@0xD6FEEAA0, entry count: 1)
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.installAriesSubsystem(SubsystemResourceInstaller.java:96)
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.install(SubsystemResourceInstaller.java:40)
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/Subsystems.getRootSubsystem(Subsystems.java:130)
5XESTACKTRACE (entered lock: org/apache/aries/subsystem/core/internal/Subsystems@0xD6FEEAB0, entry count: 1)
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/Activator.activate(Activator.java:167)
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/Activator.addingService(Activator.java:263)
5XESTACKTRACE (entered lock: org/apache/aries/subsystem/core/internal/Activator@0xD6C83A70, entry count: 1)
and another,
3XMTHREADINFO "Blueprint Extender: 2" J9VMThread:0x083A9800, j9thread_t:0x087B373C, java/lang/Thread:0xD6346650, state:B, prio=5
3XMTHREADINFO1 (native thread ID:0x770F, native priority:0x5, native policy:UNKNOWN)
3XMTHREADINFO2 (native stack address range from:0xD0278000, to:0xD02B9000, size:0x41000)
3XMTHREADBLOCK Blocked on: org/apache/aries/subsystem/core/internal/Activator@0xD6C83A70 Owned by: "Blueprint Extender: 3" (J9VMThread:0x087D5D00, java/lang/Thread:0xD66F2280)
3XMTHREADINFO3 Java callstack:
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/BundleEventHook.handleExplicitlyInstalledBundleBundleContext(BundleEventHook.java:55)
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/BundleEventHook.handleInstalledEvent(BundleEventHook.java:93)
4XESTACKTRACE at org/apache/aries/subsystem/core/internal/BundleEventHook.event(BundleEventHook.java:41)
The problem looks to be caused by the call to Activator.getInstance() within BundleEventHook.handleExplicitlyInstalledBundleBundleContext(). One option would be to move that call into the BundleEventHook() constructor.
issueID:ARIES-983
type:Bug
changed files:util/src/main/java/org/apache/aries/util/tracker/hook/BundleHookBundleTracker.java
texts:The BundleHookBundleTracker has an invalid logic wrt initially tracked bundles
The bundle tracker does not register the hook service before tracking bundles which means it can miss events when starting.
In addition, some methods are not overriden from BundleTracker and may lead to bad results if called.
The only reason for BundleHookBundleTracker to override BundleTracker is to be easily manipulated the same way, but given the internals are changed, all the methods must be redefined because they all call a private (thus not overridable) method.
issueID:ARIES-984
type:Bug
changed files:jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
texts:When shutting down, the JMX agent should wait for threads to be terminated

issueID:ARIES-985
type:Bug
changed files:jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java
texts:Improve robustness of JMX Blueprint bundle activator
More operations should be delegated to the bundle tracker
issueID:ARIES-986
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ExecutorServiceWrapper.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java
blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BlueprintExtender.java
texts:The blueprint extender does not support high concurrency very well
When multiple start / stop / update operations run concurrently, the extender fails to behave correctly wrt to container creation / destruction.
issueID:ARIES-988
type:Bug
changed files:proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java
texts:The proxy manager should unregister its service
Even if it's not required, it allows services to react to the unregistration before the bundle context is invalidated.
issueID:ARIES-989
type:Bug
changed files:
texts:Deadlock while stopping karaf
Found one Java-level deadlock:
=============================
"pool-org.apache.karaf.deployer.spring-2.3.0.fuse-71-038-thread-3":
waiting to lock monitor 0x00007f6314010c00 (object 0x00000000e08f3428, a java.util.ArrayList),
which is held by "FelixStartLevel"
"FelixStartLevel":
waiting to lock monitor 0x00007f6314010ca8 (object 0x00000000e08f3498, a java.lang.Object),
which is held by "pool-org.apache.karaf.deployer.spring-2.3.0.fuse-71-038-thread-3"
Java stack information for the threads listed above:
===================================================
"pool-org.apache.karaf.deployer.spring-2.3.0.fuse-71-038-thread-3":
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.getBestServiceReference(AbstractServiceReferenceRecipe.java:443)
waiting to lock <0x00000000e08f3428> (a java.util.ArrayList)
at org.apache.aries.blueprint.container.ReferenceRecipe.retrack(ReferenceRecipe.java:128)
at org.apache.aries.blueprint.container.ReferenceRecipe.untrack(ReferenceRecipe.java:151)
locked <0x00000000e08f3498> (a java.lang.Object)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.serviceRemoved(AbstractServiceReferenceRecipe.java:359)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.access$200(AbstractServiceReferenceRecipe.java:71)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$3.run(AbstractServiceReferenceRecipe.java:317)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
at java.lang.Thread.run(Thread.java:679)
"FelixStartLevel":
at org.apache.aries.blueprint.container.ReferenceRecipe.doStop(ReferenceRecipe.java:122)
waiting to lock <0x00000000e08f3498> (a java.lang.Object)
at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.stop(AbstractServiceReferenceRecipe.java:153)
locked <0x00000000e08f3428> (a java.util.ArrayList)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.untrackServiceReference(BlueprintContainerImpl.java:597)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.untrackServiceReferences(BlueprintContainerImpl.java:577)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:845)
at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:254)
at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:246)
at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:471)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:198)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:128)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:468)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:161)
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:117)
at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4479)
at org.apache.felix.framework.Felix.stopBundle(Felix.java:2592)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1305)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:298)
at java.lang.Thread.run(Thread.java:679)
Found 1 deadlock.
Versions:
karaf@root> osgi:list |grep -i aries
[ 8] [Active ] [ ] [ ] [ 20] Apache Aries Util (1.0.0)
[ 9] [Active ] [ ] [ ] [ 20] Apache Aries Blueprint API (1.0.1.fuse-71-038)
[ 10] [Active ] [Created ] [ ] [ 20] Apache Aries Blueprint Core (1.0.1.fuse-71-038)
[ 11] [Active ] [ ] [ ] [ 20] Apache Aries Proxy API (1.0.0)
[ 12] [Active ] [Created ] [ ] [ 20] Apache Aries Blueprint CM (1.0.1.fuse-71-038)
[ 13] [Active ] [ ] [ ] [ 20] Apache Aries Proxy Service (1.0.0)
[ 26] [Active ] [ ] [ ] [ 30] Apache Aries JMX API (1.0.1.fuse-71-038)
[ 27] [Active ] [ ] [ ] [ 30] Apache Aries JMX Blueprint API (1.0.1.fuse-71-038)
[ 33] [Active ] [ ] [ ] [ 30] Apache Aries JMX Blueprint Core (1.0.1.fuse-71-038)
[ 43] [Active ] [ ] [ ] [ 30] Apache Aries JMX Core (1.0.1.fuse-71-038)
[ 101] [Active ] [ ] [ ] [ 60] Guava: Google Core Libraries for Java (13.0.0)
[ 208] [Active ] [ ] [ ] [ 30] Aries JPA Container API (1.0.0)
[ 209] [Active ] [Created ] [ ] [ 30] Aries JPA Container blueprint integration for Aries blueprint (1.0.0)
[ 210] [Active ] [ ] [ ] [ 30] Aries JPA Container (1.0.0)
[ 211] [Active ] [ ] [ ] [ 30] Aries JPA Container Managed Contexts (1.0.0)
[ 212] [Active ] [ ] [ ] [ 30] Apache Aries JNDI API (1.0.0)
[ 213] [Active ] [ ] [ ] [ 30] Apache Aries JNDI Core (1.0.0)
[ 214] [Active ] [ ] [ ] [ 30] Apache Aries JNDI RMI Handler (1.0.0)
[ 215] [Active ] [ ] [ ] [ 30] Apache Aries JNDI URL Handler (1.0.0)
[ 216] [Active ] [ ] [ ] [ 30] Apache Aries JNDI Support for Legacy Runtimes (1.0.0)
[ 217] [Active ] [Created ] [ ] [ 30] Apache Aries Transaction Blueprint (1.0.1.fuse-71-038)
[ 218] [Active ] [ ] [ ] [ 30] Apache Aries Transaction Manager (1.0.1.fuse-71-038)
[ 219] [Active ] [Failure ] [ ] [ 30] Apache Aries Transaction Enlisting JDBC Datasource (1.0.1.fuse-71-038)
issueID:ARIES-99
type:Improvement
changed files:samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntry.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewAuthor.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthor.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/AuthorImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthorManager.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/FormServlet.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/BlogPersistenceService.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntry.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Author.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/Blog.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogEntryImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BloggingService.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogEntryManager.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/BlogAuthor.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorManagerImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/ViewBlog.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/EditAuthorForm.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/BlogPersistenceServiceImpl.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/CreateBlogEntryForm.java
samples/blog/blog-web/src/main/java/org/apache/aries/samples/blog/web/util/HTMLOutput.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogAuthorImpl.java
samples/blog/blog-persistence-jdbc/src/main/java/org/apache/aries/samples/blog/persistence/jdbc/entity/EntryImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BlogImpl.java
samples/blog/blog-biz/src/main/java/org/apache/aries/samples/blog/biz/BloggingServiceImpl.java
samples/blog/blog-api/src/main/java/org/apache/aries/samples/blog/api/persistence/Entry.java
texts:Add the 'blog sample' to version control
The blog sample is a small code sample which currently demonstrates the use of Blueprint and JNDI. It can be extended to use other Aries modules as they are developed.
issueID:ARIES-990
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
texts:NPE while establishing the root subsystem
I got the following NPE while the subsystem core was activating and establishing the root subsystem. I think at the time many bundles in the 'root' subsystem may have been getting deleted:
>Caused by: java.lang.NullPointerException
> at org.apache.aries.subsystem.core.internal.ResourceHelper.getIdentityAttribute(ResourceHelper.java:62)
> at org.apache.aries.subsystem.core.internal.ResourceHelper.getTypeAttribute(ResourceHelper.java:92)
> at org.apache.aries.subsystem.core.internal.ResourceInstaller.newInstance(ResourceInstaller.java:27)
> at org.apache.aries.subsystem.core.internal.Subsystems.populateRootSubsystem(Subsystems.java:173)
> at org.apache.aries.subsystem.core.internal.Subsystems.getRootSubsystem(Subsystems.java:131)
There is a TODO in Subsystems.populateRootSubsystem that I think is showing itself in this NPE. In the following line of code the bundle revision may be null if the bundle got uninstalled:
BundleRevision revision = bundle.adapt(BundleRevision.class);
I think a check for null is needed here.
issueID:ARIES-991
type:Bug
changed files:blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
texts:Concurrency issue which can cause a service to be kept registered

issueID:ARIES-992
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
texts:Get an IllegalStateException in BundleEventHook.handleExplicitlyInstalledBundleBundleContext
>Caused by: java.lang.IllegalStateException: The activator has not been initialized or has been shutdown
> at org.apache.aries.subsystem.core.internal.Activator.checkInstance(Activator.java:65)
> at org.apache.aries.subsystem.core.internal.Activator.getInstance(Activator.java:57)
> at org.apache.aries.subsystem.core.internal.Utils.createCoordination(Utils.java:38)
> at org.apache.aries.subsystem.core.internal.Utils.installResource(Utils.java:72)
> at org.apache.aries.subsystem.core.internal.BundleEventHook.handleExplicitlyInstalledBundleBundleContext(BundleEventHook.java:82)
> at org.apache.aries.subsystem.core.internal.BundleEventHook.handleInstalledEvent(BundleEventHook.java:116)
> at org.apache.aries.subsystem.core.internal.BundleEventHook.event(BundleEventHook.java:55)
> at org.eclipse.osgi.framework.internal.core.Framework$10.call(Framework.java:1606)
> at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1239)
issueID:ARIES-995
type:Bug
changed files:
texts:Subsystem core bundle should be properly isolated as is the uber bundle.
The internal packages should be properly isolated in the core bundle. This will cause compile errors in the itests. The dependencies will need to be resolved in some other way, such as attaching a fragment to the system bundle.
issueID:ARIES-996
type:Bug
changed files:
texts:JPA does not work for bundles that are constituents of subsystems.
The first problem is that the system bundle might be hidden from the client bundle by find hooks. This results in an NPE on line 104 of GlobalPersistenceManager.registerContext.
The second problem is that even if the first is gotten around by getting the system bundle by location instead of by ID, duplicate transaction exceptions occur since there is only one system bundle.
One solution would be to use a bundle tracker that tracks subsystem region context bundles. This is easily done since all region context bundles have the same symbolic name prefix per the spec. GlobalPersistenceManager.registerContext would first iterate over any tracked region context bundles. If a region context bundle is visible to the client bundle, then the bundle context of the region context bundle is used. If there are no region context bundles, or none are visible to the client bundle, then the system bundle context is used as before.
A more general issue not addressed by this bug is how JPA should function within a framework isolated by any generic mechanism using hooks. It's not clear how the bundle context to use would be identified.
issueID:ARIES-997
type:Bug
changed files:subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/DependencyCalculator.java
subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceInstaller.java
texts:Support for the Aries Application header Application-ImportService
The old Aries Application support (implemented using equinox composite bundles) has support for a header Application-ImportService. This header has a different intention than the subsystems specified Subsystem-ImportService header.
The Subsystem-ImportService header is intended to be used by composite subsystem types only and is used to specify the import sharing policy for services. For subsystems the imported services are expected to be provided by some provider (bundle) which is visible in the parent subsystem of the composite which is importing the service.
The Application-ImportService header on the other hand is used to specify services which are expected to be provided by some remote service technology, for example SCA. For Aries applications no resources are provisioned to satisfy the service requirements specified by the Application-ImportService header. Instead, at provisioning time the Aries application support mocks up a resource that provides service capabilities that can be used to resolve service requirements from the resources (bundles) included in an EBA that is being provisioned.
This issue proposes that the Aries Subsystem implementation should add support for the Application-ImportService header that is similar in behavior to the Aries Application support.
issueID:ARIES-999
type:Bug
changed files:
texts:Blueprint CM should extend import version range to support Blueprint Core 1.1.0-SNAPSHOT

